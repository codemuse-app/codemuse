import os
import time
from modal import Image, Secret, Stub, method, web_endpoint
import sentry_sdk

import utils

MODEL_DIR = "/model"
BASE_MODEL = "codellama/CodeLlama-7b-Instruct-hf"
TOKENIZER_DIR = "/tokenizer"
TOKENIZER = "codellama/CodeLlama-7b-Instruct-hf"

def download_model_to_folder():
    from huggingface_hub import snapshot_download

    os.makedirs(MODEL_DIR, exist_ok=True)

    snapshot_download(
        BASE_MODEL,
        local_dir=MODEL_DIR,
        token=os.environ["HUGGINGFACE_TOKEN"],
    )

    snapshot_download(
        TOKENIZER,
        local_dir=TOKENIZER_DIR,
        token=os.environ["HUGGINGFACE_TOKEN"],
    )

    from transformers import CodeLlamaTokenizerFast
    CodeLlamaTokenizerFast.from_pretrained(TOKENIZER_DIR)

    return


image = (
    Image.from_registry(
        "nvcr.io/nvidia/pytorch:23.10-py3"
    )
    .pip_install(
        "torch==2.1.0+cu121", index_url="https://download.pytorch.org/whl"
    )
    # Pinned to 10/16/23
    .pip_install(
        "vllm @ git+https://github.com/vllm-project/vllm.git@665cbcec4b963f6ab7b696f3d7e3393a7909003d"
    )
    # Use the barebones hf-transfer package for maximum download speeds. No progress bar, but expect 700MB/s.
    .pip_install(["hf-transfer", "sentry-sdk", "posthog", 'transformers[torch]'])
    .env({"HF_HUB_ENABLE_HF_TRANSFER": "1"})
    .run_function(
        download_model_to_folder,
        secret=Secret.from_name("huggingface"),
        timeout=60 * 20,
    )
)

stub = Stub("documentation", image=image)

@stub.cls(gpu="A10G", secret=Secret.from_name("huggingface"), concurrency_limit=5, allow_concurrent_inputs=20, container_idle_timeout=60, timeout=60 * 20, keep_warm=1)
class Model:
    def __enter__(self):
        from vllm.engine.arg_utils import AsyncEngineArgs
        from vllm.engine.async_llm_engine import AsyncLLMEngine
        from transformers import CodeLlamaTokenizerFast

        engine_args = AsyncEngineArgs(model=MODEL_DIR, gpu_memory_utilization=0.95)
        self.llm = AsyncLLMEngine.from_engine_args(engine_args)
        self.tokenizer = CodeLlamaTokenizerFast.from_pretrained(TOKENIZER_DIR)
        self.template = """<s>[INST] <<SYS>>

{system}
<</SYS>>

```python
{code}
````

Briefly explain the above code. Focus on business aspects, and be as concise as possible. If possible, only use one short sentence.[/INST] """


    @method(keep_warm=1)
    @utils.with_sentry
    async def generate(self, code: str):
        from vllm import SamplingParams
        from vllm.utils import random_uuid

        # --------------------
        # IMPORTANT
        # --------------------
        # This number has been determined empirically depending on the current prompt token count. If you change the prompt, you may need to change this number.
        # Changing the GPU may also change this number.
        MAX_CODE_TOKENS = 12000

        # Check if the input goes over the token limit of MAX_CODE_TOKENS. If it does, truncate it. Use vllm tokenizer to get the exact token count.
        # TODO: would it be smarter to take some part from the beginning and some part from the end?
        with sentry_sdk.start_span(op="tokenize"):
            if len(self.tokenizer.encode(code)) > MAX_CODE_TOKENS:
                code = self.tokenizer.decode(self.tokenizer.encode(code)[0:MAX_CODE_TOKENS])

        prompt = self.template.format(
            system="You are a skilled senior developer who is asked to explain the code to a new hire. You are synthetic, and you are trying to explain the code to a human. You focus on business aspects rather than framework details. You use simple english language, with declarative sentences. You do not talk about 'this code' or 'that snippet', but just explain straight to the point.",
            code=code
        )

        sampling_params = SamplingParams(
            temperature=0.0,
            top_p=1,
            max_tokens=800,
            presence_penalty=1.15,
        )
        request_id = random_uuid()
        results_generator = self.llm.generate(prompt, sampling_params, request_id)

        index = 0

        with sentry_sdk.start_span(op="generate"):
            async for request_output in results_generator:
                if "\ufffd" == request_output.outputs[0].text[-1]:
                    continue
                yield request_output.outputs[0].text[index:]
                index = len(request_output.outputs[0].text)


# @stub.local_entrypoint()
# def main():
#     model = Model()
#     questions = [
#         # Coding questions
#         "Implement a Python function to compute the Fibonacci numbers.",
#     ]
#     model.generate.remote(questions)

@stub.function()
@utils.with_sentry
@web_endpoint()
def test_sentry():
    raise ValueError("Test exception")

@stub.function()
@utils.with_sentry
@web_endpoint(method="POST", label="generate-documentation")
def generate_documentation(item: dict):
    code = item["code"]

    if not code:
        return "No code provided. Please provide a JSON object with a `code` key."

    for chunk in Model().generate.remote_gen(code):
        answer += chunk

    return {
        "documentation": answer.strip()
    }

@stub.local_entrypoint()
def main():
    model = Model()
    questions = [
        # Coding questions
        "   self.assertDictEqual(message_parser.parse_message(\n            \"Pmax Dec sold here at 9700 x 2\")[0],\n            {'size': 'panamax', 'maturity': {'type': 'month', 'value': 'dec', 'year': None}, 'bid': None, 'offer': None,\n             \"last\": \"9700\", \"plaintext\": 'pmax dec sold here at 9700 x 2'}\n        )\n\n        self.assertDictEqual(message_parser.parse_message(\n            \"Pmax Dec offered on at 9700\")[0],\n            {'size': 'panamax', 'maturity': {'type': 'month', 'value': 'dec', 'year': None}, 'bid': None, 'offer': \"9700\",\n             \"last\": None, \"plaintext\": 'pmax dec offered on at 9700'}\n        )\n\n        self.assertDictEqual(message_parser.parse_message(\n            \"cape nov try 16000/16150\")[0],\n            {'size': 'cape', 'maturity': {'type': 'month', 'value': 'nov', 'year': None}, 'bid': \"16000\", 'offer': \"16150\",\n             \"last\": None, \"plaintext\": 'cape nov try 16000/16150'}\n        )\n\n        self.assertDictEqual(message_parser.parse_message(\n            \"Pmx Q2 9550@9800 real\")[0],\n            {'size': 'panamax', 'maturity': {'type': 'quarter', 'value': '2', 'year': None}, 'bid': \"9550\", 'offer': \"9800\",\n             \"last\": None, \"plaintext\": 'pmx q2 9550@9800 real'}\n        )\n\n        self.assertDictEqual(message_parser.parse_message(\n            \"Pmx Q1 7800@7900\")[0],\n            {'size': 'panamax', 'maturity': {'type': 'quarter', 'value': '1', 'year': None}, 'bid': \"7800\", 'offer': \"7900\",\n             \"last\": None, \"plaintext\": 'pmx q1 7800@7900'}\n        )\n\n        self.assertDictEqual(message_parser.parse_message(\n            \"dec cape try 14400 offeer\")[0],\n            {'size': 'cape', 'maturity': {'type': 'month', 'value': 'dec', 'year': None}, 'bid': None, 'offer': \"14400\",\n             \"last\": None, \"plaintext\": 'dec cape try 14400 offeer'}\n        )\n\n        self.assertDictEqual(message_parser.parse_message(\n            \"cal 22 cape try 13250 bid\")[0],\n            {'size': 'cape', 'maturity': {'type': 'year', 'value': '2022', 'year': \"22\"}, 'bid': \"13250\", 'offer': None,\n             \"last\": None, \"plaintext\": 'cal 22 cape try 13250 bid'}\n        )\n\n        self.assertDictEqual(message_parser.parse_message(\n            \"Pmx Q1 8250@8350\")[0],\n            {'size': 'panamax', 'maturity': {'type': 'quarter', 'value': '1', 'year': None}, 'bid': \"8250\", 'offer': \"8350\",\n             \"last\": None, \"plaintext\": \"pmx q1 8250@8350\"}\n        )\n\n        self.assertDictEqual(message_parser.parse_message(\n            \"Pmx Cal21 9650@9750\")[0],\n            {'size': 'panamax', 'maturity': {'type': 'year', 'value': '2021', 'year': \"21\"}, 'bid': \"9650\", 'offer': \"9750\",\n             \"last\": None, \"plaintext\": \"pmx cal21 9650@9750\"}\n        )\n\n        self.assertDictEqual(message_parser.parse_message(\n            \"cape nov out firm 16000 v 16100\")[0],\n            {'size': 'cape', 'maturity': {'type': 'month', 'value': 'nov', 'year': None}, 'bid': \"16000\", 'offer': \"16100\",\n             \"last\": None, \"plaintext\": \"cape nov out firm 16000 v 16100\"}\n        )\n\n        self.assertDictEqual(message_parser.parse_message(\n            \"pmx feb out firm 7300 v 7350\")[0],\n            {'size': 'panamax', 'maturity': {'type': 'month', 'value': 'feb', 'year': None}, 'bid': \"7300\", 'offer': \"7350\",\n             \"last\": None, \"plaintext\": \"pmx feb out firm 7300 v 7350\"}\n        )\n\n        self.assertDictEqual(message_parser.parse_message(\n            \"dec cape try 14200 bid now\")[0],\n            {'size': 'cape', 'maturity': {'type': 'month', 'value': 'dec', 'year': None}, 'bid': \"14200\", 'offer': None,\n             \"last\": None, \"plaintext\": \"dec cape try 14200 bid now\"}\n        )\n\n        self.assertDictEqual(message_parser.parse_message(\n            \"smx q1 7800 traded after the 7775 you did on friday\")[0],\n            {'size': 'supramax', 'maturity': {'type': 'quarter', 'value': '1', 'year': None}, 'bid': None, 'offer': None,\n             \"last\": \"7800\", \"plaintext\": \"smx q1 7800 traded after the 7775 you did on friday\"}\n        )\n\n        self.assertDictEqual(message_parser.parse_message(\n            \"Pamx Dec 9650 / 9750 working now\")[0],\n            {'size': 'panamax', 'maturity': {'type': 'month', 'value': 'dec', 'year': None}, 'bid': \"9650\", 'offer': \"9750\",\n             \"last\": None, \"plaintext\": \"pamx dec 9650 / 9750 working now\"}\n        )\n\n        self.assertDictEqual(message_parser.parse_message(\n            \"Pmax Dec tds here a few times 9450\")[0],\n            {'size': 'panamax', 'maturity': {'type': 'month', 'value': 'dec', 'year': None}, 'bid': None, 'offer': None,\n             \"last\": \"9450\", \"plaintext\": \"pmax dec tds here a few times 9450\"}\n        )\n\n        self.assertDictEqual(message_parser.parse_message(\n            \"dec cape try sell on 13400\")[0],\n            {'size': 'cape', 'maturity': {'type': 'month', 'value': 'dec', 'year': None}, 'bid': None, 'offer': None,\n             \"last\": \"13400\", \"plaintext\": \"dec cape try sell on 13400\"}\n        )\n\n        self.assertDictEqual(message_parser.parse_message(\n            \"Q1 21 cape 11000 / 10000\")[0],\n            {'size': 'cape', 'maturity': {'type': 'quarter', 'value': '1', 'year': \"21\"}, 'bid': \"11000\", 'offer': \"10000\",\n             \"last\": None, \"plaintext\": \"q1 21 cape 11000 / 10000\"}\n        )\n\n        self.assertDictEqual(message_parser.parse_message(\n            \"Q1 21 cape 11000 / 5000\")[0],\n            {'size': 'cape', 'maturity': {'type': 'quarter', 'value': '1', 'year': \"21\"}, 'bid': \"11000\", 'offer': \"5000\",\n             \"last\": None, \"plaintext\": \"q1 21 cape 11000 / 5000\"}\n        )\n\n        self.assertDictEqual(message_parser.parse_message(\n            \"bid q1 21 cape 5000\")[0],\n            {'size': 'cape', 'maturity': {'type': 'quarter', 'value': '1', 'year': \"21\"}, 'bid': \"5000\", 'offer': None,\n             \"last\": None, \"plaintext\": \"bid q1 21 cape 5000\"}\n        )\n\n        self.assertDictEqual(message_parser.parse_message(\n            \"smx dec reoffer 10800\")[0],\n            {'size': 'supramax', 'maturity': {'type': 'month', 'value': 'dec', 'year': None}, 'bid': None,\n             'offer': \"10800\", \"last\": None, 'plaintext': \"smx dec reoffer 10800\"}\n        )\n\n        self.assertDictEqual(message_parser.parse_message(\n            \"Pmx Dec tds 10650 left 600 / 700\")[0],\n            {'size': 'panamax', 'maturity': {'type': 'month', 'value': 'dec', 'year': None}, 'bid': \"600\",\n             'offer': \"700\", \"last\": \"10650\", 'plaintext': \"pmx dec tds 10650 left 600 / 700\"}\n        )\n\n        self.assertDictEqual(message_parser.parse_message(\n            \"Smx Q1 trading 8075 away, left 8050 v 8075 here\")[0],\n            {'size': 'supramax', 'maturity': {'type': 'quarter', 'value': '1', 'year': None}, 'bid': \"8050\",\n             'offer': \"8075\", \"last\": \"8075\", 'plaintext': \"smx q1 trading 8075 away, left 8050 v 8075 here\"},\n\n        )",
        "Write a Rust function that performs binary exponentiation.",
        "How do I allocate memory in C?",
        "What are the differences between Javascript and Python?",
        "How do I find invalid indices in Postgres?",
        "How can you implement a LRU (Least Recently Used) cache in Python?",
        "What approach would you use to detect and prevent race conditions in a multithreaded application?",
        "Can you explain how a decision tree algorithm works in machine learning?",
        "How would you design a simple key-value store database from scratch?",
        "How do you handle deadlock situations in concurrent programming?",
        "What is the logic behind the A* search algorithm, and where is it used?",
        "How can you design an efficient autocomplete system?",
        "What approach would you take to design a secure session management system in a web application?",
        "How would you handle collision in a hash table?",
        "How can you implement a load balancer for a distributed system?",
        # Literature
        "What is the fable involving a fox and grapes?",
        "Write a story in the style of James Joyce about a trip to the Australian outback in 2083, to see robots in the beautiful desert.",
        "Who does Harry turn into a balloon?",
        "Write a tale about a time-traveling historian who's determined to witness the most significant events in human history.",
        "Describe a day in the life of a secret agent who's also a full-time parent.",
        "Create a story about a detective who can communicate with animals.",
        "What is the most unusual thing about living in a city floating in the clouds?",
        "In a world where dreams are shared, what happens when a nightmare invades a peaceful dream?",
        "Describe the adventure of a lifetime for a group of friends who found a map leading to a parallel universe.",
        "Tell a story about a musician who discovers that their music has magical powers.",
        "In a world where people age backwards, describe the life of a 5-year-old man.",
        "Create a tale about a painter whose artwork comes to life every night.",
        "What happens when a poet's verses start to predict future events?",
        "Imagine a world where books can talk. How does a librarian handle them?",
        "Tell a story about an astronaut who discovered a planet populated by plants.",
        "Describe the journey of a letter traveling through the most sophisticated postal service ever.",
        "Write a tale about a chef whose food can evoke memories from the eater's past.",
        # History
        "What were the major contributing factors to the fall of the Roman Empire?",
        "How did the invention of the printing press revolutionize European society?",
        "What are the effects of quantitative easing?",
        "How did the Greek philosophers influence economic thought in the ancient world?",
        "What were the economic and philosophical factors that led to the fall of the Soviet Union?",
        "How did decolonization in the 20th century change the geopolitical map?",
        "What was the influence of the Khmer Empire on Southeast Asia's history and culture?",
        # Thoughtfulness
        "Describe the city of the future, considering advances in technology, environmental changes, and societal shifts.",
        "In a dystopian future where water is the most valuable commodity, how would society function?",
        "If a scientist discovers immortality, how could this impact society, economy, and the environment?",
        "What could be the potential implications of contact with an advanced alien civilization?",
        # Math
        "What is the product of 9 and 8?",
        "If a train travels 120 kilometers in 2 hours, what is its average speed?",
        "Think through this step by step. If the sequence a_n is defined by a_1 = 3, a_2 = 5, and a_n = a_(n-1) + a_(n-2) for n > 2, find a_6.",
        "Think through this step by step. Calculate the sum of an arithmetic series with first term 3, last term 35, and total terms 11.",
        "Think through this step by step. What is the area of a triangle with vertices at the points (1,2), (3,-4), and (-2,5)?",
        "Think through this step by step. Solve the following system of linear equations: 3x + 2y = 14, 5x - y = 15.",
        # Facts
        "Who was Emperor Norton I, and what was his significance in San Francisco's history?",
        "What is the Voynich manuscript, and why has it perplexed scholars for centuries?",
        "What was Project A119 and what were its objectives?",
        "What is the 'Dyatlov Pass incident' and why does it remain a mystery?",
        "What is the 'Emu War' that took place in Australia in the 1930s?",
        "What is the 'Phantom Time Hypothesis' proposed by Heribert Illig?",
        "Who was the 'Green Children of Woolpit' as per 12th-century English legend?",
        "What are 'zombie stars' in the context of astronomy?",
        "Who were the 'Dog-Headed Saint' and the 'Lion-Faced Saint' in medieval Christian traditions?",
        "What is the story of the 'Globsters', unidentified organic masses washed up on the shores?",
    ]

    big_question = "def test_SingleLine_Message(self):\n        \n        self.assertDictEqual(message_parser.parse_message(\"cape apr 19250 tdd here\")[0],\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n                               {\"size\": \"cape\",\n                                \"maturity\": {\"type\": \"month\", \"value\": \"apr\", \"year\": None},\n                                \"bid\": None, \"offer\": None, \"last\": \"19250\",\n                                \"plaintext\": \"cape apr 19250 tdd here\"})\n        \n        self.assertDictEqual(message_parser.parse_message(\"*cape aug 12000 bid*\")[0],\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n                               {\"size\": \"cape\",\n                                \"maturity\": {\"type\": \"month\", \"value\": \"aug\", \"year\": None},\n                                \"bid\": \"12000\", \"offer\": None, \"last\": None,\n                                \"plaintext\": \"cape aug 12000 bid\"})\n        self.assertDictEqual(message_parser.parse_message(\"_cape aug 12000 bid_\")[0],\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n                               {\"size\": \"cape\",\n                                \"maturity\": {\"type\": \"month\", \"value\": \"aug\", \"year\": None},\n                                \"bid\": \"12000\", \"offer\": None, \"last\": None,\n                                \"plaintext\": \"cape aug 12000 bid\"})\n        self.assertDictEqual(message_parser.parse_message(\"cape aug 12000 bid\")[0],\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n                               {\"size\": \"cape\",\n                                \"maturity\": {\"type\": \"month\", \"value\": \"aug\", \"year\": None},\n                                \"bid\": \"12000\", \"offer\": None, \"last\": None,\n                                \"plaintext\": \"cape aug 12000 bid\"})\n        self.assertDictEqual(message_parser.parse_message(\"cape q4 20 bid 12000\")[0],\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n                               {\"size\": \"cape\", \"maturity\": {\"type\": \"quarter\", \"value\": \"4\", \"year\": \"20\"},\n                                \"bid\": \"12000\", \"offer\": None, \"last\": None,\n                                \"plaintext\": \"cape q4 20 bid 12000\"})\n\n        self.assertDictEqual(message_parser.parse_message(\"pmx aug offer 13000\")[0],\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n                               {\"size\": \"panamax\", \"maturity\": {\"type\": \"month\", \"value\": \"aug\", \"year\": None},\n                                \"offer\": \"13000\", \"bid\": None, \"last\": None,\n                                \"plaintext\": \"pmx aug offer 13000\"})\n\n        self.assertDictEqual(message_parser.parse_message(\"handy nov 20 offer 15000\")[0],\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n                               {\"size\": \"handy\", \"maturity\": {\"type\": \"month\", \"value\": \"nov\", \"year\": \"20\"},\n                                \"offer\": \"15000\", \"bid\": None, \"last\": None,\n                                \"plaintext\": \"handy nov 20 offer 15000\"})\n\n        self.assertDictEqual(message_parser.parse_message(\"Handy cal 20 12000 / 13000\")[0],\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n                               {\"size\": \"handy\", \"maturity\": {\"type\": \"year\", \"value\": \"2020\", \"year\": \"20\"},\n                                \"bid\": \"12000\", \"offer\": \"13000\", \"last\": None,\n                                \"plaintext\": \"handy cal 20 12000 / 13000\"})\n\n        self.assertDictEqual(message_parser.parse_message(\"aug 20 supra 12500 v 13000 trades 12000\")[0],\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n                               {\"size\": \"supramax\", \"maturity\": {\"type\": \"month\", \"value\": \"aug\", \"year\": \"20\"},\n                                \"bid\": \"12500\", \"offer\": \"13000\",\n                                \"last\": \"12000\", \"plaintext\": \"aug 20 supra 12500 v 13000 trades 12000\"})\n\n        self.assertDictEqual(message_parser.parse_message(\"aug 20 supra 12500v13000 trades 12000\")[0],\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n                               {\"size\": \"supramax\", \"maturity\": {\"type\": \"month\", \"value\": \"aug\", \"year\": \"20\"},\n                                \"bid\": \"12500\", \"offer\": \"13000\",\n                                \"last\": \"12000\", \"plaintext\": \"aug 20 supra 12500v13000 trades 12000\"})\n\n        self.assertDictEqual(message_parser.parse_message(\"cape q4 21750 paid - 21550/21750 follow\")[0],\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n                               {\"size\": \"cape\", \"maturity\": {\"type\": \"quarter\", \"value\": \"4\", \"year\": None},\n                                \"bid\": \"21550\", \"offer\": \"21750\",\n                                \"last\": \"21750\", \"plaintext\": \"cape q4 21750 paid - 21550/21750 follow\"})\n\n        self.assertDictEqual(message_parser.parse_message(\"q4 20 pmx paid 21750  - bid 21550\")[0],\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n                               {\"size\": \"panamax\", \"maturity\": {\"type\": \"quarter\", \"value\": \"4\", \"year\": \"20\"},\n                                \"bid\": \"21550\", \"offer\": None,\n                                \"last\": \"21750\", \"plaintext\": \"q4 20 pmx paid 21750 - bid 21550\"})\n\n        self.assertDictEqual(message_parser.parse_message(\"nov handy bid 21550 paid 21755 follow\")[0],\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n                               {\"size\": \"handy\", \"maturity\": {\"type\": \"month\", \"value\": \"nov\", \"year\": None},\n                                \"bid\": \"21550\", \"offer\": None,\n                                \"last\": \"21755\", \"plaintext\": \"nov handy bid 21550 paid 21755 follow\"})\n\n        self.assertDictEqual(message_parser.parse_message(\"q1 cape paid 21750 - 21550 /21750 follow\")[0],\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n   {\"size\": \"cape\",\n                                \"maturity\": {\"type\": \"month\", \"value\": \"aug\", \"year\": None},\n                                \"bid\": \"12000\", \"offer\": None, \"last\": None,\n                                \"plaintext\": \"cape aug 12000 bid\"})\n        self.assertDictEqual(message_parser.parse_message(\"_cape aug 12000 bid_\")[0],\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n                               {\"size\": \"cape\",\n                                \"maturity\": {\"type\": \"month\", \"value\": \"aug\", \"year\": None},\n                                \"bid\": \"12000\", \"offer\": None, \"last\": None,\n                                \"plaintext\": \"cape aug 12000 bid\"})\n        self.assertDictEqual(message_parser.parse_message(\"cape aug 12000 bid\")[0],\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n                               {\"size\": \"cape\",\n                                \"maturity\": {\"type\": \"month\", \"value\": \"aug\", \"year\": None},\n                                \"bid\": \"12000\", \"offer\": None, \"last\": None,\n                                \"plaintext\": \"cape aug 12000 bid\"})\n        self.assertDictEqual(message_parser.parse_message(\"cape q4 20 bid 12000\")[0],\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n                               {\"size\": \"cape\", \"maturity\": {\"type\": \"quarter\", \"value\": \"4\", \"year\": \"20\"},\n                                \"bid\": \"12000\", \"offer\": None, \"last\": None,\n                                \"plaintext\": \"cape q4 20 bid 12000\"})\n\n        self.assertDictEqual(message_parser.parse_message(\"pmx aug offer 13000\")[0],\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n                               {\"size\": \"panamax\", \"maturity\": {\"type\": \"month\", \"value\": \"aug\", \"year\": None},\n                                \"offer\": \"13000\", \"bid\": None, \"last\": None,\n                                \"plaintext\": \"pmx aug offer 13000\"})\n\n        self.assertDictEqual(message_parser.parse_message(\"handy nov 20 offer 15000\")[0],\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n                               {\"size\": \"handy\", \"maturity\": {\"type\": \"month\", \"value\": \"nov\", \"year\": \"20\"},\n                                \"offer\": \"15000\", \"bid\": None, \"last\": None,\n                                \"plaintext\": \"handy nov 20 offer 15000\"})\n\n        self.assertDictEqual(message_parser.parse_message(\"Handy cal 20 12000 / 13000\")[0],\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n                               {\"size\": \"handy\", \"maturity\": {\"type\": \"year\", \"value\": \"2020\", \"year\": \"20\"},\n                                \"bid\": \"12000\", \"offer\": \"13000\", \"last\": None,\n                                \"plaintext\": \"handy cal 20 12000 / 13000\"})\n\n        self.assertDictEqual(message_parser.parse_message(\"aug 20 supra 12500 v 13000 trades 12000\")[0],\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n                               {\"size\": \"supramax\", \"maturity\": {\"type\": \"month\", \"value\": \"aug\", \"year\": \"20\"},\n                                \"bid\": \"12500\", \"offer\": \"13000\",\n                                \"last\": \"12000\", \"plaintext\": \"aug 20 supra 12500 v 13000 trades 12000\"})\n\n        self.assertDictEqual(message_parser.parse_message(\"aug 20 supra 12500v13000 trades 12000\")[0],\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n                               {\"size\": \"supramax\", \"maturity\": {\"type\": \"month\", \"value\": \"aug\", \"year\": \"20\"},\n                                \"bid\": \"12500\", \"offer\": \"13000\",\n                                \"last\": \"12000\", \"plaintext\": \"aug 20 supra 12500v13000 trades 12000\"})\n\n        self.assertDictEqual(message_parser.parse_message(\"cape q4 21750 paid - 21550/21750 follow\")[0],\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n                               {\"size\": \"cape\", \"maturity\": {\"type\": \"quarter\", \"value\": \"4\", \"year\": None},\n                                \"bid\": \"21550\", \"offer\": \"21750\",\n                                \"last\": \"21750\", \"plaintext\": \"cape q4 21750 paid - 21550/21750 follow\"})\n\n        self.assertDictEqual(message_parser.parse_message(\"q4 20 pmx paid 21750  - bid 21550\")[0],\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n                               {\"size\": \"panamax\", \"maturity\": {\"type\": \"quarter\", \"value\": \"4\", \"year\": \"20\"},\n                                \"bid\": \"21550\", \"offer\": None,\n                                \"last\": \"21750\", \"plaintext\": \"q4 20 pmx paid 21750 - bid 21550\"})\n\n        self.assertDictEqual(message_parser.parse_message(\"nov handy bid 21550 paid 21755 follow\")[0],\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n                               {\"size\": \"handy\", \"maturity\": {\"type\": \"month\", \"value\": \"nov\", \"year\": None},\n                                \"bid\": \"21550\", \"offer\": None,\n                                \"last\": \"21755\", \"plaintext\": \"nov handy bid 21550 paid 21755 follow\"})\n\n        self.assertDictEqual(message_parser.parse_message(\"q1 cape paid 21750 - 21550 /21750 follow\")[0],\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n       scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n                               {\"size\": \"cape\", \"maturity\": {\"type\": \"quarter\", \"value\": \"1\", \"year\": None},\n                                \"bid\": \"21550\", \"offer\": \"21750\",\n                                \"last\": \"21750\", \"plaintext\": \"q1 cape paid 21750 - 21550 /21750 follow\"})\n\n        self.assertDictEqual(message_parser.parse_message(\"17000 trades here nov cape\")[0],\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n                               {\"size\": \"cape\", \"maturity\": {\"type\": \"month\", \"value\": \"nov\", \"year\": None},\n                                \"bid\": None, \"offer\": None,\n                                \"last\": \"17000\", \"plaintext\": \"17000 trades here nov cape\"})\n\n        self.assertDictEqual(message_parser.parse_message(\"cape q1 21 sold 21000 5dpm\")[0],\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n                               {\"size\": \"cape\", \"maturity\": {\"type\": \"quarter\", \"value\": \"1\", \"year\": \"21\"},\n                                \"bid\": None, \"offer\": None,\n                                \"last\": \"21000\", \"plaintext\": \"cape q1 21 sold 21000 5dpm\"}\n                               )\n\n        self.assertDictEqual(message_parser.parse_message(\"pmx dec 20 11200 v 12300 trades 15000\")[0],\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n                               {\"size\": \"panamax\", \"maturity\": {\"type\": \"month\", \"value\": \"dec\", \"year\": \"20\"},\n                                \"bid\": \"11200\", \"offer\": \"12300\",\n                                \"last\": \"15000\", \"plaintext\": \"pmx dec 20 11200 v 12300 trades 15000\"}\n                               )\n\n\n        self.assertDictEqual(message_parser.parse_message(\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n         {\"size\": \"handy\", \"maturity\": {\"type\": \"month\", \"value\": \"nov\", \"year\": None},\n                                \"bid\": \"21550\", \"offer\": None,\n                                \"last\": \"21755\", \"plaintext\": \"nov handy bid 21550 paid 21755 follow\"})\n\n        self.assertDictEqual(message_parser.parse_message(\"q1 cape paid 21750 - 21550 /21750 follow\")[0],\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n       scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n                               {\"size\": \"cape\", \"maturity\": {\"type\": \"quarter\", \"value\": \"1\", \"year\": None},\n                                \"bid\": \"21550\", \"offer\": \"21750\",\n                                \"last\": \"21750\", \"plaintext\": \"q1 cape paid 21750 - 21550 /21750 follow\"})\n\n        self.assertDictEqual(message_parser.parse_message(\"17000 trades here nov cape\")[0],\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n                               {\"size\": \"cape\", \"maturity\": {\"type\": \"month\", \"value\": \"nov\", \"year\": None},\n                                \"bid\": None, \"offer\": None,\n                                \"last\": \"17000\", \"plaintext\": \"17000 trades here nov cape\"})\n\n        self.assertDictEqual(message_parser.parse_message(\"cape q1 21 sold 21000 5dpm\")[0],\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n                               {\"size\": \"cape\", \"maturity\": {\"type\": \"quarter\", \"value\": \"1\", \"year\": \"21\"},\n                                \"bid\": None, \"offer\": None,\n                                \"last\": \"21000\", \"plaintext\": \"cape q1 21 sold 21000 5dpm\"}\n                               )\n\n        self.assertDictEqual(message_parser.parse_message(\"pmx dec 20 11200 v 12300 trades 15000\")[0],\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n                               {\"size\": \"panamax\", \"maturity\": {\"type\": \"month\", \"value\": \"dec\", \"year\": \"20\"},\n                                \"bid\": \"11200\", \"offer\": \"12300\",\n                                \"last\": \"15000\", \"plaintext\": \"pmx dec 20 11200 v 12300 trades 15000\"}\n                               )\n\n\n        self.assertDictEqual(message_parser.parse_message(\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n         {\"size\": \"handy\", \"maturity\": {\"type\": \"month\", \"value\": \"nov\", \"year\": None},\n                                \"bid\": \"21550\", \"offer\": None,\n                                \"last\": \"21755\", \"plaintext\": \"nov handy bid 21550 paid 21755 follow\"})\n\n        self.assertDictEqual(message_parser.parse_message(\"q1 cape paid 21750 - 21550 /21750 follow\")[0],\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n       scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n                               {\"size\": \"cape\", \"maturity\": {\"type\": \"quarter\", \"value\": \"1\", \"year\": None},\n                                \"bid\": \"21550\", \"offer\": \"21750\",\n                                \"last\": \"21750\", \"plaintext\": \"q1 cape paid 21750 - 21550 /21750 follow\"})\n\n        self.assertDictEqual(message_parser.parse_message(\"17000 trades here nov cape\")[0],\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n                               {\"size\": \"cape\", \"maturity\": {\"type\": \"month\", \"value\": \"nov\", \"year\": None},\n                                \"bid\": None, \"offer\": None,\n                                \"last\": \"17000\", \"plaintext\": \"17000 trades here nov cape\"})\n\n        self.assertDictEqual(message_parser.parse_message(\"cape q1 21 sold 21000 5dpm\")[0],\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n                               {\"size\": \"cape\", \"maturity\": {\"type\": \"quarter\", \"value\": \"1\", \"year\": \"21\"},\n                                \"bid\": None, \"offer\": None,\n                                \"last\": \"21000\", \"plaintext\": \"cape q1 21 sold 21000 5dpm\"}\n                               )\n\n        self.assertDictEqual(message_parser.parse_message(\"pmx dec 20 11200 v 12300 trades 15000\")[0],\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n                               {\"size\": \"panamax\", \"maturity\": {\"type\": \"month\", \"value\": \"dec\", \"year\": \"20\"},\n                                \"bid\": \"11200\", \"offer\": \"12300\",\n                                \"last\": \"15000\", \"plaintext\": \"pmx dec 20 11200 v 12300 trades 15000\"}\n                               )\n\n\n        self.assertDictEqual(message_parser.parse_message(\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n         {\"size\": \"handy\", \"maturity\": {\"type\": \"month\", \"value\": \"nov\", \"year\": None},\n                                \"bid\": \"21550\", \"offer\": None,\n                                \"last\": \"21755\", \"plaintext\": \"nov handy bid 21550 paid 21755 follow\"})\n\n        self.assertDictEqual(message_parser.parse_message(\"q1 cape paid 21750 - 21550 /21750 follow\")[0],\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n       scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n                               {\"size\": \"cape\", \"maturity\": {\"type\": \"quarter\", \"value\": \"1\", \"year\": None},\n                                \"bid\": \"21550\", \"offer\": \"21750\",\n                                \"last\": \"21750\", \"plaintext\": \"q1 cape paid 21750 - 21550 /21750 follow\"})\n\n        self.assertDictEqual(message_parser.parse_message(\"17000 trades here nov cape\")[0],\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n                               {\"size\": \"cape\", \"maturity\": {\"type\": \"month\", \"value\": \"nov\", \"year\": None},\n                                \"bid\": None, \"offer\": None,\n                                \"last\": \"17000\", \"plaintext\": \"17000 trades here nov cape\"})\n\n        self.assertDictEqual(message_parser.parse_message(\"cape q1 21 sold 21000 5dpm\")[0],\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n                               {\"size\": \"cape\", \"maturity\": {\"type\": \"quarter\", \"value\": \"1\", \"year\": \"21\"},\n                                \"bid\": None, \"offer\": None,\n                                \"last\": \"21000\", \"plaintext\": \"cape q1 21 sold 21000 5dpm\"}\n                               )\n\n        self.assertDictEqual(message_parser.parse_message(\"pmx dec 20 11200 v 12300 trades 15000\")[0],\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n                               {\"size\": \"panamax\", \"maturity\": {\"type\": \"month\", \"value\": \"dec\", \"year\": \"20\"},\n                                \"bid\": \"11200\", \"offer\": \"12300\",\n                                \"last\": \"15000\", \"plaintext\": \"pmx dec 20 11200 v 12300 trades 15000\"}\n                               )\n\n\n        self.assertDictEqual(message_parser.parse_message(\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n        \"\"\"\n        scip-python python rtcmd-api-server indexer `modules.marine.helpers.message_parser`/__init__:: undefined\n        scip-python python rtcmd-api-server indexer `server.service.modules.marine.helpers.message_parser`/parse_message().:  The code is a message parser that takes a string input and returns a list of dictionaries containing price information. It uses regular expressions to search for specific patterns in the message and extracts the size and price information.\n        \"\"\"\n            \"cape nov paid 15650 try bid on 15750\")[0],\n            {'size': 'cape', 'maturity': {'type': 'month', 'value': 'nov', 'year': None}, 'bid': \"15750\", 'offer': None,\n             \"last\": \"15650\", \"plaintext\": 'cape nov paid 15650 try bid on 15750'}\n        )\n\n        self.assertDictEqual(message_parser.parse_message(\n            \"pmx nov paid 9600 away left 9700 offer\")[0],\n            {'size': 'panamax', 'maturity': {'type': 'month', 'value': 'nov', 'year': None}, 'bid': None, 'offer': \"9700\",\n             \"last\": \"9600\", \"plaintext\": 'pmx nov paid 9600 away left 9700 offer'}\n        )\n\n        self.assertDictEqual(message_parser.parse_message(\n            \"pmax dec bid on 9600\")[0],\n            {'size': 'panamax', 'maturity': {'type': 'month', 'value': 'dec', 'year': None}, 'bid': \"9600\", 'offer': None,\n             \"last\": None, \"plaintext\": 'pmax dec bid on 9600'}\n        )\n\n        self.assertDictEqual(message_parser.parse_message(\n            \"pmx nov paid 9600 away left 9700 offer\")[0],\n            {'size': 'panamax', 'maturity': {'type': 'month', 'value': 'nov', 'year': None}, 'bid': None, 'offer': \"9700\",\n             \"last\": \"9600\", \"plaintext\": 'pmx nov paid 9600 away left 9700 offer'}\n        )\n        self.assertDictEqual(message_parser.parse_message(\n            \"pmx q1 trades 8100 away left 8000@$8150\")[0],\n            {'size': 'panamax', 'maturity': {'type': 'quarter', 'value': '1', 'year': None}, 'bid': \"8000\", 'offer': \"8150\",\n             \"last\": \"8100\", \"plaintext\": 'pmx q1 trades 8100 away left 8000@$8150'}\n        )\n        self.assertDictEqual(message_parser.parse_message(\n            \"cape q2 out firm 10650 v 10700\")[0],\n            {'size': 'cape', 'maturity': {'type': 'quarter', 'value': '2', 'year': None}, 'bid': \"10650\", 'offer': \"10700\",\n             \"last\": None, \"plaintext\": 'cape q2 out firm 10650 v 10700'}\n        )\n        self.assertDictEqual(message_parser.parse_message(\n            \"PMX CAL21 try 9700 / 9750 - last traded 9750\")[0],\n            {'size': 'panamax', 'maturity': {'type': 'year', 'value': '2021', 'year': \"21\"}, 'bid': \"9700\", 'offer': \"9750\",\n             \"last\": \"9750\", \"plaintext\": 'pmx cal21 try 9700 / 9750 - last traded 9750'}\n        )\n        self.assertDictEqual(message_parser.parse_message(\n            \"cape nov now 15950 bid\")[0],\n            {'size': 'cape', 'maturity': {'type': 'month', 'value': 'nov', 'year': None}, 'bid': \"15950\", 'offer': None,\n             \"last\": None, \"plaintext\": 'cape nov now 15950 bid'}\n        )\n        self.assertDictEqual(message_parser.parse_message(\n            \"Pmax C21 back to 9650 / 9800\")[0],\n            {'size': 'panamax', 'maturity': {'type': 'year', 'value': '2021', 'year': \"21\"}, 'bid': \"9650\", 'offer': \"9800\",\n             \"last\": None, \"plaintext\": 'pmax c21 back to 9650 / 9800'}\n        )\n        self.assertDictEqual(message_parser.parse_message(\n            \"Cal22 capes 13000 bid\")[0],\n            {'size': 'cape', 'maturity': {'type': 'year', 'value': '2022', 'year': \"22\"}, 'bid': \"13000\", 'offer': None,\n             \"last\": None, \"plaintext\": 'cal22 capes 13000 bid'}\n        )\n        self.assertDictEqual(message_parser.parse_message(\n            \"Cal22 capes 13000/13150\")[0],\n            {'size': 'cape', 'maturity': {'type': 'year', 'value': '2022', 'year': \"22\"}, 'bid': \"13000\", 'offer': \"13150\",\n             \"last\": None, \"plaintext\": 'cal22 capes 13000/13150'}\n        )\n        self.assertDictEqual(message_parser.parse_message(\n            \"Pmax Q2 try 9900 offer\")[0],\n            {'size': 'panamax', 'maturity': {'type': 'quarter', 'value': '2', 'year': None}, 'bid': None, 'offer': \"9900\",\n             \"last\": None, \"plaintext\": 'pmax q2 try 9900 offer'}\n        )\n\n        self.assertDictEqual(message_parser.parse_message(\n            \"Pmax Dec sold here at 9700 x 2\")[0],\n            {'size': 'panamax', 'maturity': {'type': 'month', 'value': 'dec', 'year': None}, 'bid': None, 'offer': None,\n             \"last\": \"9700\", \"plaintext\": 'pmax dec sold here at 9700 x 2'}\n        )\n\n        self.assertDictEqual(message_parser.parse_message(\n            \"Pmax Dec offered on at 9700\")[0],\n            {'size': 'panamax', 'maturity': {'type': 'month', 'value': 'dec', 'year': None}, 'bid': None, 'offer': \"9700\",\n             \"last\": None, \"plaintext\": 'pmax dec offered on at 9700'}\n        )\n\n        self.assertDictEqual(message_parser.parse_message(\n            \"cape nov try 16000/16150\")[0],\n            {'size': 'cape', 'maturity': {'type': 'month', 'value': 'nov', 'year': None}, 'bid': \"16000\", 'offer': \"16150\",\n             \"last\": None, \"plaintext\": 'cape nov try 16000/16150'}\n        )\n\n        self.assertDictEqual(message_parser.parse_message(\n            \"Pmx Q2 9550@9800 real\")[0],\n            {'size': 'panamax', 'maturity': {'type': 'quarter', 'value': '2', 'year': None}, 'bid': \"9550\", 'offer': \"9800\",\n             \"last\": None, \"plaintext\": 'pmx q2 9550@9800 real'}\n        )\n\n        self.assertDictEqual(message_parser.parse_message(\n            \"Pmx Q1 7800@7900\")[0],\n            {'size': 'panamax', 'maturity': {'type': 'quarter', 'value': '1', 'year': None}, 'bid': \"7800\", 'offer': \"7900\",\n             \"last\": None, \"plaintext\": 'pmx q1 7800@7900'}\n        )\n\n        self.assertDictEqual(message_parser.parse_message(\n            \"dec cape try 14400 offeer\")[0],\n            {'size': 'cape', 'maturity': {'type': 'month', 'value': 'dec', 'year': None}, 'bid': None, 'offer': \"14400\",\n             \"last\": None, \"plaintext\": 'dec cape try 14400 offeer'}\n        )\n\n        self.assertDictEqual(message_parser.parse_message(\n            \"cal 22 cape try 13250 bid\")[0],\n            {'size': 'cape', 'maturity': {'type': 'year', 'value': '2022', 'year': \"22\"}, 'bid': \"13250\", 'offer': None,\n             \"last\": None, \"plaintext\": 'cal 22 cape try 13250 bid'}\n        )\n\n        self.assertDictEqual(message_parser.parse_message(\n            \"Pmx Q1 8250@8350\")[0],\n            {'size': 'panamax', 'maturity': {'type': 'quarter', 'value': '1', 'year': None}, 'bid': \"8250\", 'offer': \"8350\",\n             \"last\": None, \"plaintext\": \"pmx q1 8250@8350\"}\n        )\n\n        self.assertDictEqual(message_parser.parse_message(\n            \"Pmx Cal21 9650@9750\")[0],\n            {'size': 'panamax', 'maturity': {'type': 'year', 'value': '2021', 'year': \"21\"}, 'bid': \"9650\", 'offer': \"9750\",\n             \"last\": None, \"plaintext\": \"pmx cal21 9650@9750\"}\n        )\n\n        self.assertDictEqual(message_parser.parse_message(\n            \"cape nov out firm 16000 v 16100\")[0],\n            {'size': 'cape', 'maturity': {'type': 'month', 'value': 'nov', 'year': None}, 'bid': \"16000\", 'offer': \"16100\",\n             \"last\": None, \"plaintext\": \"cape nov out firm 16000 v 16100\"}\n        )\n\n        self.assertDictEqual(message_parser.parse_message(\n            \"pmx feb out firm 7300 v 7350\")[0],\n            {'size': 'panamax', 'maturity': {'type': 'month', 'value': 'feb', 'year': None}, 'bid': \"7300\", 'offer': \"7350\",\n             \"last\": None, \"plaintext\": \"pmx feb out firm 7300 v 7350\"}\n        )\n\n        self.assertDictEqual(message_parser.parse_message(\n            \"dec cape try 14200 bid now\")[0],\n            {'size': 'cape', 'maturity': {'type': 'month', 'value': 'dec', 'year': None}, 'bid': \"14200\", 'offer': None,\n             \"last\": None, \"plaintext\": \"dec cape try 14200 bid now\"}\n        )\n\n        self.assertDictEqual(message_parser.parse_message(\n            \"smx q1 7800 traded after the 7775 you did on friday\")[0],\n            {'size': 'supramax', 'maturity': {'type': 'quarter', 'value': '1', 'year': None}, 'bid': None, 'offer': None,\n             \"last\": \"7800\", \"plaintext\": \"smx q1 7800 traded after the 7775 you did on friday\"}\n        )\n\n        self.assertDictEqual(message_parser.parse_message(\n            \"Pamx Dec 9650 / 9750 working now\")[0],\n            {'size': 'panamax', 'maturity': {'type': 'month', 'value': 'dec', 'year': None}, 'bid': \"9650\", 'offer': \"9750\",\n             \"last\": None, \"plaintext\": \"pamx dec 9650 / 9750 working now\"}\n        )\n\n        self.assertDictEqual(message_parser.parse_message(\n            \"Pmax Dec tds here a few times 9450\")[0],\n            {'size': 'panamax', 'maturity': {'type': 'month', 'value': 'dec', 'year': None}, 'bid': None, 'offer': None,\n             \"last\": \"9450\", \"plaintext\": \"pmax dec tds here a few times 9450\"}\n        )\n\n        self.assertDictEqual(message_parser.parse_message(\n            \"dec cape try sell on 13400\")[0],\n            {'size': 'cape', 'maturity': {'type': 'month', 'value': 'dec', 'year': None}, 'bid': None, 'offer': None,\n             \"last\": \"13400\", \"plaintext\": \"dec cape try sell on 13400\"}\n        )\n\n        self.assertDictEqual(message_parser.parse_message(\n            \"Q1 21 cape 11000 / 10000\")[0],\n            {'size': 'cape', 'maturity': {'type': 'quarter', 'value': '1', 'year': \"21\"}, 'bid': \"11000\", 'offer': \"10000\",\n             \"last\": None, \"plaintext\": \"q1 21 cape 11000 / 10000\"}\n        )\n\n        self.assertDictEqual(message_parser.parse_message(\n            \"Q1 21 cape 11000 / 5000\")[0],\n            {'size': 'cape', 'maturity': {'type': 'quarter', 'value': '1', 'year': \"21\"}, 'bid': \"11000\", 'offer': \"5000\",\n             \"last\": None, \"plaintext\": \"q1 21 cape 11000 / 5000\"}\n        )\n\n        self.assertDictEqual(message_parser.parse_message(\n            \"bid q1 21 cape 5000\")[0],\n            {'size': 'cape', 'maturity': {'type': 'quarter', 'value': '1', 'year': \"21\"}, 'bid': \"5000\", 'offer': None,\n             \"last\": None, \"plaintext\": \"bid q1 21 cape 5000\"}\n        )\n\n        self.assertDictEqual(message_parser.parse_message(\n            \"smx dec reoffer 10800\")[0],\n            {'size': 'supramax', 'maturity': {'type': 'month', 'value': 'dec', 'year': None}, 'bid': None,\n             'offer': \"10800\", \"last\": None, 'plaintext': \"smx dec reoffer 10800\"}\n        )\n\n        self.assertDictEqual(message_parser.parse_message(\n            \"Pmx Dec tds 10650 left 600 / 700\")[0],\n            {'size': 'panamax', 'maturity': {'type': 'month', 'value': 'dec', 'year': None}, 'bid': \"600\",\n             'offer': \"700\", \"last\": \"10650\", 'plaintext': \"pmx dec tds 10650 left 600 / 700\"}\n        )\n\n        self.assertDictEqual(message_parser.parse_message(\n            \"Smx Q1 trading 8075 away, left 8050 v 8075 here\")[0],\n            {'size': 'supramax', 'maturity': {'type': 'quarter', 'value': '1', 'year': None}, 'bid': \"8050\",\n             'offer': \"8075\", \"last\": \"8075\", 'plaintext': \"smx q1 trading 8075 away, left 8050 v 8075 here\"},\n\n        )"

    questions = [big_question]


    from concurrent.futures import ThreadPoolExecutor

    def process_question(question):
        for chunk in model.generate.remote_gen(question):
            print(chunk, end="")
        print()

    def main():
        with ThreadPoolExecutor() as executor:
            executor.map(process_question, questions)

    # Run the main function
    main()
