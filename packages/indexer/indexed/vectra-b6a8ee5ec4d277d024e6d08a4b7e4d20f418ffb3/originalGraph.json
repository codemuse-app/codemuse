{"options":{"type":"directed","multi":true,"allowSelfLoops":true},"attributes":{},"nodes":[{"key":"scip-typescript npm vectra 0.5.5 src/`types.ts`/","attributes":{"range":[0,0,174,1],"symbol":"scip-typescript npm vectra 0.5.5 src/`types.ts`/","content":"\n\n/**\n * An AI model that can be used to create embeddings.\n */\nexport interface EmbeddingsModel {\n    /**\n     * Maximum number of tokens\n     */\n    readonly maxTokens: number;\n\n    /**\n     * Creates embeddings for the given inputs.\n     * @param inputs Text inputs to create embeddings for.\n     * @returns A `EmbeddingsResponse` with a status and the generated embeddings or a message when an error occurs.\n     */\n    createEmbeddings(inputs: string|string[]): Promise<EmbeddingsResponse>;\n}\n\n/**\n * Status of the embeddings response.\n * @remarks\n * `success` - The embeddings were successfully created.\n * `error` - An error occurred while creating the embeddings.\n * `rate_limited` - The request was rate limited.\n */\nexport type EmbeddingsResponseStatus = 'success' | 'error' | 'rate_limited';\n\n/**\n * Response returned by a `EmbeddingsClient`.\n */\nexport interface EmbeddingsResponse {\n    /**\n     * Status of the embeddings response.\n     */\n    status: EmbeddingsResponseStatus;\n\n    /**\n     * Optional. Embeddings for the given inputs.\n     */\n    output?: number[][];\n\n    /**\n     * Optional. Message when status is not equal to `success`.\n     */\n    message?: string;\n\n    /**\n     * Optional. Model used to create the embeddings.\n     */\n    model?: string;\n\n    /**\n     * Optional. Usage statistics for the request.\n     */\n    usage?: Record<string, any>;\n}\n\nexport interface TextChunk {\n    text: string;\n    tokens: number[];\n    startPos: number;\n    endPos: number;\n    startOverlap: number[];\n    endOverlap: number[];\n}\n\nexport interface TextFetcher {\n    fetch(uri: string, onDocument: (uri: string, text: string, docType?: string) => Promise<boolean>): Promise<boolean>;\n}\n\nexport interface IndexStats {\n    version: number;\n    metadata_config: {\n        indexed?: string[];\n    };\n    items: number;\n}\n\nexport interface IndexItem<TMetadata = Record<string,MetadataTypes>> {\n    id: string;\n    metadata: TMetadata;\n    vector: number[];\n    norm: number;\n    metadataFile?: string;\n}\n\nexport interface MetadataFilter {\n\n    /**\n     * Equal to (number, string, boolean)\n     */\n    '$eq'?: number|string|boolean;\n\n    /**\n     * Not equal to (number, string, boolean)\n     */\n    '$ne'?: number|string|boolean;\n\n    /**\n     * Greater than (number)\n     */\n    '$gt'?: number;\n\n    /**\n     * Greater than or equal to (number)\n     */\n    '$gte'?: number;\n\n    /**\n     * Less than (number)\n     */\n    '$lt'?: number;\n\n    /**\n     * Less than or equal to (number)\n     */\n    '$lte'?: number;\n\n    /**\n     * In array (string or number)\n     */\n    '$in'?: (number|string)[];\n\n    /**\n     * Not in array (string or number)\n     */\n    '$nin'?: (number|string)[];\n\n    /**\n     * AND (MetadataFilter[])\n     */\n    '$and'?: MetadataFilter[];\n\n    /**\n     * OR (MetadataFilter[])\n     */\n    '$or'?: MetadataFilter[];\n\n    [key: string]: unknown;\n}\n\nexport type MetadataTypes = number|string|boolean;\n\nexport interface QueryResult<TMetadata = Record<string,MetadataTypes>> {\n    item: IndexItem<TMetadata>;\n    score: number;\n}\n\nexport interface Tokenizer {\n    decode(tokens: number[]): string;\n    encode(text: string): number[];\n}\n\nexport interface DocumentChunkMetadata {\n    documentId: string;\n    startPos: number;\n    endPos: number;\n    [key: string]: MetadataTypes;\n}\n\nexport interface DocumentCatalogStats {\n    version: number;\n    documents: number;\n    chunks: number;\n    metadata_config: {\n        indexed?: string[];\n    };\n}\n\nexport interface DocumentTextSection {\n    text: string;\n    tokenCount: number;\n    score: number;\n}","file":"/src/types.ts","language":"typescript","fileHash":"460c5de8e5745169778c80466fee9ff841c85b40c07b225188c102855aae9961","hash":"460c5de8e5745169778c80466fee9ff841c85b40c07b225188c102855aae9961","processedContent":"\n\n/**\n * An AI model that can be used to create embeddings.\n */\nexport interface EmbeddingsModel {\n    \"\"\"This code defines an interface for an embeddings model, which allows for the creation of embeddings for text inputs. The interface includes a maximum number of tokens and a method for creating embeddings.\"\"\"\n    pass\n\n/**\n * Status of the embeddings response.\n * @remarks\n * `success` - The embeddings were successfully created.\n * `error` - An error occurred while creating the embeddings.\n * `rate_limited` - The request was rate limited.\n */\nexport type EmbeddingsResponseStatus = 'success' | 'error' | 'rate_limited';\n\n/**\n * Response returned by a `EmbeddingsClient`.\n */\nexport interface EmbeddingsResponse {\n    \"\"\"This code defines an interface for an embeddings response, which includes a status, optional output, message, model, and usage statistics. It is used to represent the result of a request for embeddings from a machine learning model.\"\"\"\n    pass\n\nexport interface TextChunk {\n    \"\"\"This code defines an interface for a text chunk, which includes the text itself, its tokens, start and end positions, and start and end overlaps.\"\"\"\n    pass\n\nexport interface TextFetcher {\n    \"\"\"This code defines an interface for a text fetcher, which allows you to fetch text from a URI and pass it to a callback function. The interface specifies a single method, `fetch`, that takes a URI and a callback function as arguments, and returns a promise that resolves to a boolean value indicating whether the fetch was successful.\"\"\"\n    pass\n\nexport interface IndexStats {\n    \"\"\"This code defines an interface for an index statistics object, which contains information about the version of the index, the metadata configuration, and the number of items in the index.\"\"\"\n    pass\n\nexport interface IndexItem<TMetadata = Record<string,MetadataTypes>> {\n    \"\"\"This code defines an interface for an index item, which includes an ID, metadata, a vector, and other properties. The metadata can be of any type, but it is optional.\"\"\"\n    pass\n\nexport interface MetadataFilter {\n    \"\"\"This code defines a type called MetadataFilter, which is used to filter metadata in a database. It allows for filtering based on various conditions such as equality, greater than, less than, and more.\"\"\"\n    pass\n\nexport type MetadataTypes = number|string|boolean;\n\nexport interface QueryResult<TMetadata = Record<string,MetadataTypes>> {\n    \"\"\"This code defines an interface for a query result, which includes an item (an index item with ID, metadata, vector, and other properties), a score (a number representing the relevance of the item to the query).\"\"\"\n    pass\n\nexport interface Tokenizer {\n    \"\"\"This code defines an interface for a tokenizer, which is a class that takes in a list of numbers and returns a string, and also takes in a string and returns a list of numbers.\"\"\"\n    pass\n\nexport interface DocumentChunkMetadata {\n    \"\"\"This code defines an interface for document chunk metadata, which includes a document ID, start and end positions, and a key-value pair with a type of metadata.\"\"\"\n    pass\n\nexport interface DocumentCatalogStats {\n    \"\"\"This code defines an interface for a document catalog statistics object, which contains information about the number of documents, chunks, and metadata configuration.\"\"\"\n    pass\n\nexport interface DocumentTextSection {\n    text: string;\n    tokenCount: number;\n    score: number;\n}","documentation":"The code defines various interfaces and types for an AI model that can create embeddings for text inputs, including a response status, embeddings response, text chunk, text fetcher, index statistics, index item, metadata filter, query result, tokenizer, document chunk metadata, and document catalog statistics."}},{"key":"scip-typescript npm vectra 0.5.5 src/`types.ts`/EmbeddingsModel#","attributes":{"range":[5,0,17,1],"symbol":"scip-typescript npm vectra 0.5.5 src/`types.ts`/EmbeddingsModel#","content":"export interface EmbeddingsModel {\n    /**\n     * Maximum number of tokens\n     */\n    readonly maxTokens: number;\n\n    /**\n     * Creates embeddings for the given inputs.\n     * @param inputs Text inputs to create embeddings for.\n     * @returns A `EmbeddingsResponse` with a status and the generated embeddings or a message when an error occurs.\n     */\n    createEmbeddings(inputs: string|string[]): Promise<EmbeddingsResponse>;\n}","file":"/src/types.ts","language":"typescript","fileHash":"460c5de8e5745169778c80466fee9ff841c85b40c07b225188c102855aae9961","hash":"0ddaa4db9ce99e36b6ac613e6d42191b2b689408b79d36fe1df5027589611cd7","processedContent":"export interface EmbeddingsModel {\n    /**\n     * Maximum number of tokens\n     */\n    readonly maxTokens: number;\n\n    /**\n     * Creates embeddings for the given inputs.\n     * @param inputs Text inputs to create embeddings for.\n     * @returns A `EmbeddingsResponse` with a status and the generated embeddings or a message when an error occurs.\n     */\n    createEmbeddings(inputs: string|string[]): Promise<EmbeddingsResponse>; #This code defines an interface for an embeddings response, which includes a status, optional output, message, model, and usage statistics. It is used to represent the result of a request for embeddings from a machine learning model.\n}","documentation":"This code defines an interface for an embeddings model, which allows for the creation of embeddings for text inputs. The interface includes a maximum number of tokens and a method for creating embeddings."}},{"key":"scip-typescript npm vectra 0.5.5 src/`types.ts`/EmbeddingsResponse#","attributes":{"range":[31,0,56,1],"symbol":"scip-typescript npm vectra 0.5.5 src/`types.ts`/EmbeddingsResponse#","content":"export interface EmbeddingsResponse {\n    /**\n     * Status of the embeddings response.\n     */\n    status: EmbeddingsResponseStatus;\n\n    /**\n     * Optional. Embeddings for the given inputs.\n     */\n    output?: number[][];\n\n    /**\n     * Optional. Message when status is not equal to `success`.\n     */\n    message?: string;\n\n    /**\n     * Optional. Model used to create the embeddings.\n     */\n    model?: string;\n\n    /**\n     * Optional. Usage statistics for the request.\n     */\n    usage?: Record<string, any>;\n}","file":"/src/types.ts","language":"typescript","fileHash":"460c5de8e5745169778c80466fee9ff841c85b40c07b225188c102855aae9961","hash":"b0a6b4083af561f6d3a5b31d2817b8f89c3ae8e4155f0c0a36edf821431b3c6b","processedContent":"export interface EmbeddingsResponse {\n    /**\n     * Status of the embeddings response.\n     */\n    status: EmbeddingsResponseStatus; #undefined\n\n    /**\n     * Optional. Embeddings for the given inputs.\n     */\n    output?: number[][];\n\n    /**\n     * Optional. Message when status is not equal to `success`.\n     */\n    message?: string;\n\n    /**\n     * Optional. Model used to create the embeddings.\n     */\n    model?: string;\n\n    /**\n     * Optional. Usage statistics for the request.\n     */\n    usage?: Record<string, any>;\n}","documentation":"This code defines an interface for an embeddings response, which includes a status, optional output, message, model, and usage statistics. It is used to represent the result of a request for embeddings from a machine learning model."}},{"key":"scip-typescript npm vectra 0.5.5 src/`types.ts`/TextChunk#","attributes":{"range":[58,0,65,1],"symbol":"scip-typescript npm vectra 0.5.5 src/`types.ts`/TextChunk#","content":"export interface TextChunk {\n    text: string;\n    tokens: number[];\n    startPos: number;\n    endPos: number;\n    startOverlap: number[];\n    endOverlap: number[];\n}","file":"/src/types.ts","language":"typescript","fileHash":"460c5de8e5745169778c80466fee9ff841c85b40c07b225188c102855aae9961","hash":"de05960ecba2ebe39cba67c1cd4e1122d48ab7c5580a7ba9633dbe6fb8fd1260","processedContent":"export interface TextChunk {\n    text: string;\n    tokens: number[];\n    startPos: number;\n    endPos: number;\n    startOverlap: number[];\n    endOverlap: number[];\n}","documentation":"This code defines an interface for a text chunk, which includes the text itself, its tokens, start and end positions, and start and end overlaps."}},{"key":"scip-typescript npm vectra 0.5.5 src/`types.ts`/TextFetcher#","attributes":{"range":[67,0,69,1],"symbol":"scip-typescript npm vectra 0.5.5 src/`types.ts`/TextFetcher#","content":"export interface TextFetcher {\n    fetch(uri: string, onDocument: (uri: string, text: string, docType?: string) => Promise<boolean>): Promise<boolean>;\n}","file":"/src/types.ts","language":"typescript","fileHash":"460c5de8e5745169778c80466fee9ff841c85b40c07b225188c102855aae9961","hash":"d4809da6fbea43bb5c382c7fac5ca95d8a71eef2c3e18b1291ad48b3a3fd7ac8","processedContent":"export interface TextFetcher {\n    fetch(uri: string, onDocument: (uri: string, text: string, docType?: string) => Promise<boolean>): Promise<boolean>;\n}","documentation":"This code defines an interface for a text fetcher, which allows you to fetch text from a URI and pass it to a callback function. The interface specifies a single method, `fetch`, that takes a URI and a callback function as arguments, and returns a promise that resolves to a boolean value indicating whether the fetch was successful."}},{"key":"scip-typescript npm vectra 0.5.5 src/`types.ts`/IndexStats#","attributes":{"range":[71,0,77,1],"symbol":"scip-typescript npm vectra 0.5.5 src/`types.ts`/IndexStats#","content":"export interface IndexStats {\n    version: number;\n    metadata_config: {\n        indexed?: string[];\n    };\n    items: number;\n}","file":"/src/types.ts","language":"typescript","fileHash":"460c5de8e5745169778c80466fee9ff841c85b40c07b225188c102855aae9961","hash":"4d70c58dd5f0fd5dc58b96f8bdfad20d5c30a59e80b508188c37176c35c95dab","processedContent":"export interface IndexStats {\n    version: number;\n    metadata_config: {\n        indexed?: string[];\n    };\n    items: number;\n}","documentation":"This code defines an interface for an index statistics object, which contains information about the version of the index, the metadata configuration, and the number of items in the index."}},{"key":"scip-typescript npm vectra 0.5.5 src/`types.ts`/IndexItem#","attributes":{"range":[79,0,85,1],"symbol":"scip-typescript npm vectra 0.5.5 src/`types.ts`/IndexItem#","content":"export interface IndexItem<TMetadata = Record<string,MetadataTypes>> {\n    id: string;\n    metadata: TMetadata;\n    vector: number[];\n    norm: number;\n    metadataFile?: string;\n}","file":"/src/types.ts","language":"typescript","fileHash":"460c5de8e5745169778c80466fee9ff841c85b40c07b225188c102855aae9961","hash":"81cc88a3e24d4c34aa71fd2190652df9e6fad6c924b50a88b1f79b01baed6d6d","processedContent":"export interface IndexItem<TMetadata = Record<string,MetadataTypes>> { #undefined\n    id: string;\n    metadata: TMetadata; #undefined\n    vector: number[];\n    norm: number;\n    metadataFile?: string;\n}","documentation":"This code defines an interface for an index item, which includes an ID, metadata, a vector, and other properties. The metadata can be of any type, but it is optional."}},{"key":"scip-typescript npm vectra 0.5.5 src/`types.ts`/MetadataFilter#","attributes":{"range":[87,0,140,1],"symbol":"scip-typescript npm vectra 0.5.5 src/`types.ts`/MetadataFilter#","content":"export interface MetadataFilter {\n\n    /**\n     * Equal to (number, string, boolean)\n     */\n    '$eq'?: number|string|boolean;\n\n    /**\n     * Not equal to (number, string, boolean)\n     */\n    '$ne'?: number|string|boolean;\n\n    /**\n     * Greater than (number)\n     */\n    '$gt'?: number;\n\n    /**\n     * Greater than or equal to (number)\n     */\n    '$gte'?: number;\n\n    /**\n     * Less than (number)\n     */\n    '$lt'?: number;\n\n    /**\n     * Less than or equal to (number)\n     */\n    '$lte'?: number;\n\n    /**\n     * In array (string or number)\n     */\n    '$in'?: (number|string)[];\n\n    /**\n     * Not in array (string or number)\n     */\n    '$nin'?: (number|string)[];\n\n    /**\n     * AND (MetadataFilter[])\n     */\n    '$and'?: MetadataFilter[];\n\n    /**\n     * OR (MetadataFilter[])\n     */\n    '$or'?: MetadataFilter[];\n\n    [key: string]: unknown;\n}","file":"/src/types.ts","language":"typescript","fileHash":"460c5de8e5745169778c80466fee9ff841c85b40c07b225188c102855aae9961","hash":"03f124450a3391bfd3a4e26cb9e53fa8462a665877b820f384534b3279fe06b0","processedContent":"export interface MetadataFilter {\n\n    /**\n     * Equal to (number, string, boolean)\n     */\n    '$eq'?: number|string|boolean;\n\n    /**\n     * Not equal to (number, string, boolean)\n     */\n    '$ne'?: number|string|boolean;\n\n    /**\n     * Greater than (number)\n     */\n    '$gt'?: number;\n\n    /**\n     * Greater than or equal to (number)\n     */\n    '$gte'?: number;\n\n    /**\n     * Less than (number)\n     */\n    '$lt'?: number;\n\n    /**\n     * Less than or equal to (number)\n     */\n    '$lte'?: number;\n\n    /**\n     * In array (string or number)\n     */\n    '$in'?: (number|string)[];\n\n    /**\n     * Not in array (string or number)\n     */\n    '$nin'?: (number|string)[];\n\n    /**\n     * AND (MetadataFilter[])\n     */\n    '$and'?: MetadataFilter[];\n\n    /**\n     * OR (MetadataFilter[])\n     */\n    '$or'?: MetadataFilter[];\n\n    [key: string]: unknown;\n}","documentation":"This code defines a type called MetadataFilter, which is used to filter metadata in a database. It allows for filtering based on various conditions such as equality, greater than, less than, and more."}},{"key":"scip-typescript npm vectra 0.5.5 src/`types.ts`/QueryResult#","attributes":{"range":[144,0,147,1],"symbol":"scip-typescript npm vectra 0.5.5 src/`types.ts`/QueryResult#","content":"export interface QueryResult<TMetadata = Record<string,MetadataTypes>> {\n    item: IndexItem<TMetadata>;\n    score: number;\n}","file":"/src/types.ts","language":"typescript","fileHash":"460c5de8e5745169778c80466fee9ff841c85b40c07b225188c102855aae9961","hash":"63e071a51822519c943d8585b23bcf552785224e3ca2c550c70c16b0d154cde6","processedContent":"export interface QueryResult<TMetadata = Record<string,MetadataTypes>> { #undefined\n    item: IndexItem<TMetadata>;\n    \"\"\"\n    scip-typescript npm vectra 0.5.5 src/`types.ts`/IndexItem#: This code defines an interface for an index item, which includes an ID, metadata, a vector, and other properties. The metadata can be of any type, but it is optional.\n    scip-typescript npm vectra 0.5.5 src/`types.ts`/QueryResult#[TMetadata]: undefined\n    \"\"\"\n    score: number;\n}","documentation":"This code defines an interface for a query result, which includes an item (an index item with ID, metadata, vector, and other properties), a score (a number representing the relevance of the item to the query)."}},{"key":"scip-typescript npm vectra 0.5.5 src/`types.ts`/Tokenizer#","attributes":{"range":[149,0,152,1],"symbol":"scip-typescript npm vectra 0.5.5 src/`types.ts`/Tokenizer#","content":"export interface Tokenizer {\n    decode(tokens: number[]): string;\n    encode(text: string): number[];\n}","file":"/src/types.ts","language":"typescript","fileHash":"460c5de8e5745169778c80466fee9ff841c85b40c07b225188c102855aae9961","hash":"de0e8ad328d4431c66e245137546ddd61971d498357a5a910aa1907324a03c21","processedContent":"export interface Tokenizer {\n    decode(tokens: number[]): string;\n    encode(text: string): number[];\n}","documentation":"This code defines an interface for a tokenizer, which is a class that takes in a list of numbers and returns a string, and also takes in a string and returns a list of numbers."}},{"key":"scip-typescript npm vectra 0.5.5 src/`types.ts`/DocumentChunkMetadata#","attributes":{"range":[154,0,159,1],"symbol":"scip-typescript npm vectra 0.5.5 src/`types.ts`/DocumentChunkMetadata#","content":"export interface DocumentChunkMetadata {\n    documentId: string;\n    startPos: number;\n    endPos: number;\n    [key: string]: MetadataTypes;\n}","file":"/src/types.ts","language":"typescript","fileHash":"460c5de8e5745169778c80466fee9ff841c85b40c07b225188c102855aae9961","hash":"bcd5574d9de46a1bf97d1808d6f33820f7f5b5e9e4dd6d32b5cf5a7d06360f7c","processedContent":"export interface DocumentChunkMetadata {\n    documentId: string;\n    startPos: number;\n    endPos: number;\n    [key: string]: MetadataTypes; #undefined\n}","documentation":"This code defines an interface for document chunk metadata, which includes a document ID, start and end positions, and a key-value pair with a type of metadata."}},{"key":"scip-typescript npm vectra 0.5.5 src/`types.ts`/DocumentCatalogStats#","attributes":{"range":[161,0,168,1],"symbol":"scip-typescript npm vectra 0.5.5 src/`types.ts`/DocumentCatalogStats#","content":"export interface DocumentCatalogStats {\n    version: number;\n    documents: number;\n    chunks: number;\n    metadata_config: {\n        indexed?: string[];\n    };\n}","file":"/src/types.ts","language":"typescript","fileHash":"460c5de8e5745169778c80466fee9ff841c85b40c07b225188c102855aae9961","hash":"f18a3bc667e74794a1d85d15459bbff0638587f820818f72a6ec4bdd6a84405b","processedContent":"export interface DocumentCatalogStats {\n    version: number;\n    documents: number;\n    chunks: number;\n    metadata_config: {\n        indexed?: string[];\n    };\n}","documentation":"This code defines an interface for a document catalog statistics object, which contains information about the number of documents, chunks, and metadata configuration."}},{"key":"scip-typescript npm vectra 0.5.5 src/`types.ts`/DocumentTextSection#","attributes":{"range":[170,0,174,1],"symbol":"scip-typescript npm vectra 0.5.5 src/`types.ts`/DocumentTextSection#","content":"export interface DocumentTextSection {\n    text: string;\n    tokenCount: number;\n    score: number;\n}","file":"/src/types.ts","language":"typescript","fileHash":"460c5de8e5745169778c80466fee9ff841c85b40c07b225188c102855aae9961","hash":"4d20f65131501a2603c18cb9890bbebb953c1850a6c1ea37ef5929551e2a62aa","processedContent":"export interface DocumentTextSection {\n    text: string;\n    tokenCount: number;\n    score: number;\n}","documentation":"This code defines an interface for a document text section, which includes the text itself, the number of tokens in the text, and a score that represents the relevance or importance of the text."}},{"key":"scip-typescript npm vectra 0.5.5 src/`types.ts`/EmbeddingsResponseStatus#","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`types.ts`/EmbeddingsResponseStatus#","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`types.ts`/MetadataTypes#","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`types.ts`/MetadataTypes#","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`types.ts`/IndexItem#[TMetadata]","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`types.ts`/IndexItem#[TMetadata]","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`types.ts`/QueryResult#[TMetadata]","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`types.ts`/QueryResult#[TMetadata]","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`GPT3Tokenizer.ts`/","attributes":{"range":[0,0,15,0],"symbol":"scip-typescript npm vectra 0.5.5 src/`GPT3Tokenizer.ts`/","content":"import { Tokenizer } from \"./types\";\nimport { encode, decode } from \"gpt-3-encoder\";\n\n/**\n * Tokenizer that uses GPT-3's encoder.\n */\nexport class GPT3Tokenizer implements Tokenizer {\n    public decode(tokens: number[]): string {\n        return decode(tokens);\n    }\n\n    public encode(text: string): number[] {\n        return encode(text);\n    }\n}\n","file":"/src/GPT3Tokenizer.ts","language":"typescript","fileHash":"46adc7263d2b373781a816f152159ebbb68a7b13b3f62204d7bf500f6af91393","hash":"46adc7263d2b373781a816f152159ebbb68a7b13b3f62204d7bf500f6af91393","processedContent":"import { Tokenizer } from \"./types\";\n\"\"\"\nscip-typescript npm vectra 0.5.5 src/`types.ts`/Tokenizer#: This code defines an interface for a tokenizer, which is a class that takes in a list of numbers and returns a string, and also takes in a string and returns a list of numbers.\nscip-typescript npm vectra 0.5.5 src/`types.ts`/: The code defines various interfaces and types for an AI model that can create embeddings for text inputs, including a response status, embeddings response, text chunk, text fetcher, index statistics, index item, metadata filter, query result, tokenizer, document chunk metadata, and document catalog statistics.\n\"\"\"\nimport { encode, decode } from \"gpt-3-encoder\";\n\"\"\"\nscip-typescript npm gpt-3-encoder 1.1.4 `index.d.ts`/`\"gpt-3-encoder\"`/encode().: undefined\nscip-typescript npm gpt-3-encoder 1.1.4 `index.d.ts`/`\"gpt-3-encoder\"`/decode().: undefined\nscip-typescript npm gpt-3-encoder 1.1.4 `index.d.ts`/`\"gpt-3-encoder\"`/: undefined\n\"\"\"\n\n/**\n * Tokenizer that uses GPT-3's encoder.\n */\nexport class GPT3Tokenizer implements Tokenizer {\n    \"\"\"This code defines a class called `GPT3Tokenizer` that implements an interface for tokenizing text. The class has two functions, `decode` and `encode`, which are not defined and return undefined.\"\"\"\n    pass\n","documentation":"This code defines a class called `GPT3Tokenizer` that implements an interface for tokenizing text using GPT-3's encoder. The class has two functions, `decode` and `encode`, which are not defined and return undefined."}},{"key":"scip-typescript npm vectra 0.5.5 src/`GPT3Tokenizer.ts`/GPT3Tokenizer#","attributes":{"range":[6,0,14,1],"symbol":"scip-typescript npm vectra 0.5.5 src/`GPT3Tokenizer.ts`/GPT3Tokenizer#","content":"export class GPT3Tokenizer implements Tokenizer {\n    public decode(tokens: number[]): string {\n        return decode(tokens);\n    }\n\n    public encode(text: string): number[] {\n        return encode(text);\n    }\n}","file":"/src/GPT3Tokenizer.ts","language":"typescript","fileHash":"46adc7263d2b373781a816f152159ebbb68a7b13b3f62204d7bf500f6af91393","hash":"53c50369568e6257d4cc225253a9223bac1c451b1c88ddbc4eff6f6d654f4cc1","processedContent":"export class GPT3Tokenizer implements Tokenizer { #This code defines an interface for a tokenizer, which is a class that takes in a list of numbers and returns a string, and also takes in a string and returns a list of numbers.\n    public decode(tokens: number[]): string {\n        \"\"\"This code defines a function called `decode` that takes an array of numbers as input and returns a string. The function is not defined, so it returns undefined.\"\"\"\n        pass\n\n    public encode(text: string): number[] {\n        \"\"\"This code defines a function called `encode` that takes a string as input and returns an array of numbers. The function is not defined, so it returns undefined.\"\"\"\n        pass\n}","documentation":"This code defines a class called `GPT3Tokenizer` that implements an interface for tokenizing text. The class has two functions, `decode` and `encode`, which are not defined and return undefined."}},{"key":"scip-typescript npm vectra 0.5.5 src/`GPT3Tokenizer.ts`/GPT3Tokenizer#decode().","attributes":{"range":[7,4,9,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`GPT3Tokenizer.ts`/GPT3Tokenizer#decode().","content":"public decode(tokens: number[]): string {\n        return decode(tokens);\n    }","file":"/src/GPT3Tokenizer.ts","language":"typescript","fileHash":"46adc7263d2b373781a816f152159ebbb68a7b13b3f62204d7bf500f6af91393","hash":"9b599efed779eb0bee07f9c2fa10d5204045a1df819805417fed5cc01b465a53","processedContent":"public decode(tokens: number[]): string {\n        return decode(tokens); #undefined\n    }","documentation":"This code defines a function called `decode` that takes an array of numbers as input and returns a string. The function is not defined, so it returns undefined."}},{"key":"scip-typescript npm vectra 0.5.5 src/`GPT3Tokenizer.ts`/GPT3Tokenizer#encode().","attributes":{"range":[11,4,13,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`GPT3Tokenizer.ts`/GPT3Tokenizer#encode().","content":"public encode(text: string): number[] {\n        return encode(text);\n    }","file":"/src/GPT3Tokenizer.ts","language":"typescript","fileHash":"46adc7263d2b373781a816f152159ebbb68a7b13b3f62204d7bf500f6af91393","hash":"8f7d2c4a99a6d7450896599deec3af4849ebf3ff8ed1d00e281f59376525f4be","processedContent":"public encode(text: string): number[] {\n        return encode(text); #undefined\n    }","documentation":"This code defines a function called `encode` that takes a string as input and returns an array of numbers. The function is not defined, so it returns undefined."}},{"key":"scip-typescript npm gpt-3-encoder 1.1.4 `index.d.ts`/`\"gpt-3-encoder\"`/encode().","attributes":{"symbol":"scip-typescript npm gpt-3-encoder 1.1.4 `index.d.ts`/`\"gpt-3-encoder\"`/encode().","language":"typescript"}},{"key":"scip-typescript npm gpt-3-encoder 1.1.4 `index.d.ts`/`\"gpt-3-encoder\"`/decode().","attributes":{"symbol":"scip-typescript npm gpt-3-encoder 1.1.4 `index.d.ts`/`\"gpt-3-encoder\"`/decode().","language":"typescript"}},{"key":"scip-typescript npm gpt-3-encoder 1.1.4 `index.d.ts`/`\"gpt-3-encoder\"`/","attributes":{"symbol":"scip-typescript npm gpt-3-encoder 1.1.4 `index.d.ts`/`\"gpt-3-encoder\"`/","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/","attributes":{"range":[0,0,157,1],"symbol":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/","content":"import { MetadataFilter, MetadataTypes } from './types';\n\nexport class ItemSelector {\n    /**\n     * Returns the similarity between two vectors using the cosine similarity.\n     * @param vector1 Vector 1\n     * @param vector2 Vector 2\n     * @returns Similarity between the two vectors\n     */\n    public static cosineSimilarity(vector1: number[], vector2: number[]) {\n        // Return the quotient of the dot product and the product of the norms\n        return this.dotProduct(vector1, vector2) / (this.normalize(vector1) * this.normalize(vector2));\n    }\n\n    /**\n     * Normalizes a vector.\n     * @remarks\n     * The norm of a vector is the square root of the sum of the squares of the elements.\n     * The LocalIndex pre-normalizes all vectors to improve performance.\n     * @param vector Vector to normalize\n     * @returns Normalized vector\n     */\n    public static normalize(vector: number[]) {\n        // Initialize a variable to store the sum of the squares\n        let sum = 0;\n        // Loop through the elements of the array\n        for (let i = 0; i < vector.length; i++) {\n            // Square the element and add it to the sum\n            sum += vector[i] * vector[i];\n        }\n        // Return the square root of the sum\n        return Math.sqrt(sum);\n    }\n\n    /**\n     * Returns the similarity between two vectors using cosine similarity.\n     * @remarks\n     * The LocalIndex pre-normalizes all vectors to improve performance.\n     * This method uses the pre-calculated norms to improve performance.\n     * @param vector1 Vector 1\n     * @param norm1 Norm of vector 1\n     * @param vector2 Vector 2\n     * @param norm2 Norm of vector 2\n     * @returns Similarity between the two vectors\n     */\n    public static normalizedCosineSimilarity(vector1: number[], norm1: number, vector2: number[], norm2: number) {\n        // Return the quotient of the dot product and the product of the norms\n        return this.dotProduct(vector1, vector2) / (norm1 * norm2);\n    }\n\n    /**\n     * Applies a filter to the metadata of an item.\n     * @param metadata Metadata of the item\n     * @param filter Filter to apply\n     * @returns True if the item matches the filter, false otherwise\n     */\n    public static select(metadata: Record<string, MetadataTypes>, filter: MetadataFilter): boolean {\n        if (filter === undefined || filter === null) {\n            return true;\n        }\n\n        for (const key in filter) {\n            switch (key) {\n                case '$and':\n                    if (!filter[key]!.every((f: MetadataFilter) => this.select(metadata, f))) {\n                        return false;\n                    }\n                    break;\n                case '$or':\n                    if (!filter[key]!.some((f: MetadataFilter) => this.select(metadata, f))) {\n                        return false;\n                    }\n                    break;\n                default:\n                    const value = filter[key];\n                    if (value === undefined || value === null) {\n                        return false;\n                    } else if (typeof value == 'object') {\n                        if (!this.metadataFilter(metadata[key], value as MetadataFilter)) {\n                            return false;\n                        }\n                    } else {\n                        if (metadata[key] !== value) {\n                            return false;\n                        }\n                    }\n                    break;\n            }\n        }\n        return true;\n    }\n\n    private static dotProduct(arr1: number[], arr2: number[]) {\n        // Initialize a variable to store the sum of the products\n        let sum = 0;\n        // Loop through the elements of the arrays\n        for (let i = 0; i < arr1.length; i++) {\n            // Multiply the corresponding elements and add them to the sum\n            sum += arr1[i] * arr2[i];\n        }\n        // Return the sum\n        return sum;\n    }\n\n    private static metadataFilter(value: MetadataTypes, filter: MetadataFilter): boolean {\n        if (value === undefined || value === null) {\n            return false;\n        }\n\n        for (const key in filter) {\n            switch (key) {\n                case '$eq':\n                    if (value !== filter[key]) {\n                        return false;\n                    }\n                    break;\n                case '$ne':\n                    if (value === filter[key]) {\n                        return false;\n                    }\n                    break;\n                case '$gt':\n                    if (typeof value != 'number' || value <= filter[key]!) {\n                        return false;\n                    }\n                    break;\n                case '$gte':\n                    if (typeof value != 'number' || value < filter[key]!) {\n                        return false;\n                    }\n                    break;\n                case '$lt':\n                    if (typeof value != 'number' || value >= filter[key]!) {\n                        return false;\n                    }\n                    break;\n                case '$lte':\n                    if (typeof value != 'number' || value > filter[key]!) {\n                        return false;\n                    }\n                    break;\n                case '$in':\n                    if (typeof value == 'boolean' || !filter[key]!.includes(value)) {\n                        return false;\n                    }\n                    break;\n                case '$nin':\n                    if (typeof value == 'boolean' || filter[key]!.includes(value)) {\n                        return false;\n                    }\n                    break;\n                default:\n                    return value === filter[key];\n            }\n        }\n        return true;\n    }\n}","file":"/src/ItemSelector.ts","language":"typescript","fileHash":"d6743d360f5de46ac30035647b7771f50238b39094356b35ceb6e77647c86503","hash":"d6743d360f5de46ac30035647b7771f50238b39094356b35ceb6e77647c86503","processedContent":"import { MetadataFilter, MetadataTypes } from './types';\n\"\"\"\nscip-typescript npm vectra 0.5.5 src/`types.ts`/MetadataFilter#: This code defines a type called MetadataFilter, which is used to filter metadata in a database. It allows for filtering based on various conditions such as equality, greater than, less than, and more.\nscip-typescript npm vectra 0.5.5 src/`types.ts`/MetadataTypes#: undefined\nscip-typescript npm vectra 0.5.5 src/`types.ts`/: The code defines various interfaces and types for an AI model that can create embeddings for text inputs, including a response status, embeddings response, text chunk, text fetcher, index statistics, index item, metadata filter, query result, tokenizer, document chunk metadata, and document catalog statistics.\n\"\"\"\n\nexport class ItemSelector {\n    /**\n     * Returns the similarity between two vectors using the cosine similarity.\n     * @param vector1 Vector 1\n     * @param vector2 Vector 2\n     * @returns Similarity between the two vectors\n     */\n    public static cosineSimilarity(vector1: number[], vector2: number[]) {\n        // Return the quotient of the dot product and the product of the norms\n        return this.dotProduct(vector1, vector2) / (this.normalize(vector1) * this.normalize(vector2));\n    }\n\n    /**\n     * Normalizes a vector.\n     * @remarks\n     * The norm of a vector is the square root of the sum of the squares of the elements.\n     * The LocalIndex pre-normalizes all vectors to improve performance.\n     * @param vector Vector to normalize\n     * @returns Normalized vector\n     */\n    public static normalize(vector: number[]) {\n        // Initialize a variable to store the sum of the squares\n        let sum = 0;\n        // Loop through the elements of the array\n        for (let i = 0; i < vector.length; i++) {\n            // Square the element and add it to the sum\n            sum += vector[i] * vector[i];\n        }\n        // Return the square root of the sum\n        return Math.sqrt(sum);\n    }\n\n    /**\n     * Returns the similarity between two vectors using cosine similarity.\n     * @remarks\n     * The LocalIndex pre-normalizes all vectors to improve performance.\n     * This method uses the pre-calculated norms to improve performance.\n     * @param vector1 Vector 1\n     * @param norm1 Norm of vector 1\n     * @param vector2 Vector 2\n     * @param norm2 Norm of vector 2\n     * @returns Similarity between the two vectors\n     */\n    public static normalizedCosineSimilarity(vector1: number[], norm1: number, vector2: number[], norm2: number) {\n        // Return the quotient of the dot product and the product of the norms\n        return this.dotProduct(vector1, vector2) / (norm1 * norm2);\n    }\n\n    /**\n     * Applies a filter to the metadata of an item.\n     * @param metadata Metadata of the item\n     * @param filter Filter to apply\n     * @returns True if the item matches the filter, false otherwise\n     */\n    public static select(metadata: Record<string, MetadataTypes>, filter: MetadataFilter): boolean {\n        if (filter === undefined || filter === null) {\n            return true;\n        }\n\n        for (const key in filter) {\n            switch (key) {\n                case '$and':\n                    if (!filter[key]!.every((f: MetadataFilter) => this.select(metadata, f))) {\n                        return false;\n                    }\n                    break;\n                case '$or':\n                    if (!filter[key]!.some((f: MetadataFilter) => this.select(metadata, f))) {\n                        return false;\n                    }\n                    break;\n                default:\n                    const value = filter[key];\n                    if (value === undefined || value === null) {\n                        return false;\n                    } else if (typeof value == 'object') {\n                        if (!this.metadataFilter(metadata[key], value as MetadataFilter)) {\n                            return false;\n                        }\n                    } else {\n                        if (metadata[key] !== value) {\n                            return false;\n                        }\n                    }\n                    break;\n            }\n        }\n        return true;\n    }\n\n    private static dotProduct(arr1: number[], arr2: number[]) {\n        // Initialize a variable to store the sum of the products\n        let sum = 0;\n        // Loop through the elements of the arrays\n        for (let i = 0; i < arr1.length; i++) {\n            // Multiply the corresponding elements and add them to the sum\n            sum += arr1[i] * arr2[i];\n        }\n        // Return the sum\n        return sum;\n    }\n\n    private static metadataFilter(value: MetadataTypes, filter: MetadataFilter): boolean {\n        if (value === undefined || value === null) {\n            return false;\n        }\n\n        for (const key in filter) {\n            switch (key) {\n                case '$eq':\n                    if (value !== filter[key]) {\n                        return false;\n                    }\n                    break;\n                case '$ne':\n                    if (value === filter[key]) {\n                        return false;\n                    }\n                    break;\n                case '$gt':\n                    if (typeof value != 'number' || value <= filter[key]!) {\n                        return false;\n                    }\n                    break;\n                case '$gte':\n                    if (typeof value != 'number' || value < filter[key]!) {\n                        return false;\n                    }\n                    break;\n                case '$lt':\n                    if (typeof value != 'number' || value >= filter[key]!) {\n                        return false;\n                    }\n                    break;\n                case '$lte':\n                    if (typeof value != 'number' || value > filter[key]!) {\n                        return false;\n                    }\n                    break;\n                case '$in':\n                    if (typeof value == 'boolean' || !filter[key]!.includes(value)) {\n                        return false;\n                    }\n                    break;\n                case '$nin':\n                    if (typeof value == 'boolean' || filter[key]!.includes(value)) {\n                        return false;\n                    }\n                    break;\n                default:\n                    return value === filter[key];\n            }\n        }\n        return true;\n    }\n}","documentation":"The code defines a class called ItemSelector that provides methods for filtering metadata and calculating similarities between vectors. It also defines various interfaces and types for an AI model that can create embeddings for text inputs."}},{"key":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#","attributes":{"range":[2,0,157,1],"symbol":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#","content":"export class ItemSelector {\n    /**\n     * Returns the similarity between two vectors using the cosine similarity.\n     * @param vector1 Vector 1\n     * @param vector2 Vector 2\n     * @returns Similarity between the two vectors\n     */\n    public static cosineSimilarity(vector1: number[], vector2: number[]) {\n        // Return the quotient of the dot product and the product of the norms\n        return this.dotProduct(vector1, vector2) / (this.normalize(vector1) * this.normalize(vector2));\n    }\n\n    /**\n     * Normalizes a vector.\n     * @remarks\n     * The norm of a vector is the square root of the sum of the squares of the elements.\n     * The LocalIndex pre-normalizes all vectors to improve performance.\n     * @param vector Vector to normalize\n     * @returns Normalized vector\n     */\n    public static normalize(vector: number[]) {\n        // Initialize a variable to store the sum of the squares\n        let sum = 0;\n        // Loop through the elements of the array\n        for (let i = 0; i < vector.length; i++) {\n            // Square the element and add it to the sum\n            sum += vector[i] * vector[i];\n        }\n        // Return the square root of the sum\n        return Math.sqrt(sum);\n    }\n\n    /**\n     * Returns the similarity between two vectors using cosine similarity.\n     * @remarks\n     * The LocalIndex pre-normalizes all vectors to improve performance.\n     * This method uses the pre-calculated norms to improve performance.\n     * @param vector1 Vector 1\n     * @param norm1 Norm of vector 1\n     * @param vector2 Vector 2\n     * @param norm2 Norm of vector 2\n     * @returns Similarity between the two vectors\n     */\n    public static normalizedCosineSimilarity(vector1: number[], norm1: number, vector2: number[], norm2: number) {\n        // Return the quotient of the dot product and the product of the norms\n        return this.dotProduct(vector1, vector2) / (norm1 * norm2);\n    }\n\n    /**\n     * Applies a filter to the metadata of an item.\n     * @param metadata Metadata of the item\n     * @param filter Filter to apply\n     * @returns True if the item matches the filter, false otherwise\n     */\n    public static select(metadata: Record<string, MetadataTypes>, filter: MetadataFilter): boolean {\n        if (filter === undefined || filter === null) {\n            return true;\n        }\n\n        for (const key in filter) {\n            switch (key) {\n                case '$and':\n                    if (!filter[key]!.every((f: MetadataFilter) => this.select(metadata, f))) {\n                        return false;\n                    }\n                    break;\n                case '$or':\n                    if (!filter[key]!.some((f: MetadataFilter) => this.select(metadata, f))) {\n                        return false;\n                    }\n                    break;\n                default:\n                    const value = filter[key];\n                    if (value === undefined || value === null) {\n                        return false;\n                    } else if (typeof value == 'object') {\n                        if (!this.metadataFilter(metadata[key], value as MetadataFilter)) {\n                            return false;\n                        }\n                    } else {\n                        if (metadata[key] !== value) {\n                            return false;\n                        }\n                    }\n                    break;\n            }\n        }\n        return true;\n    }\n\n    private static dotProduct(arr1: number[], arr2: number[]) {\n        // Initialize a variable to store the sum of the products\n        let sum = 0;\n        // Loop through the elements of the arrays\n        for (let i = 0; i < arr1.length; i++) {\n            // Multiply the corresponding elements and add them to the sum\n            sum += arr1[i] * arr2[i];\n        }\n        // Return the sum\n        return sum;\n    }\n\n    private static metadataFilter(value: MetadataTypes, filter: MetadataFilter): boolean {\n        if (value === undefined || value === null) {\n            return false;\n        }\n\n        for (const key in filter) {\n            switch (key) {\n                case '$eq':\n                    if (value !== filter[key]) {\n                        return false;\n                    }\n                    break;\n                case '$ne':\n                    if (value === filter[key]) {\n                        return false;\n                    }\n                    break;\n                case '$gt':\n                    if (typeof value != 'number' || value <= filter[key]!) {\n                        return false;\n                    }\n                    break;\n                case '$gte':\n                    if (typeof value != 'number' || value < filter[key]!) {\n                        return false;\n                    }\n                    break;\n                case '$lt':\n                    if (typeof value != 'number' || value >= filter[key]!) {\n                        return false;\n                    }\n                    break;\n                case '$lte':\n                    if (typeof value != 'number' || value > filter[key]!) {\n                        return false;\n                    }\n                    break;\n                case '$in':\n                    if (typeof value == 'boolean' || !filter[key]!.includes(value)) {\n                        return false;\n                    }\n                    break;\n                case '$nin':\n                    if (typeof value == 'boolean' || filter[key]!.includes(value)) {\n                        return false;\n                    }\n                    break;\n                default:\n                    return value === filter[key];\n            }\n        }\n        return true;\n    }\n}","file":"/src/ItemSelector.ts","language":"typescript","fileHash":"d6743d360f5de46ac30035647b7771f50238b39094356b35ceb6e77647c86503","hash":"4a318d5aebe5f051a04454259d66795daaa10db40ce2b88d25cf641d4e7fba06","processedContent":"export class ItemSelector {\n    /**\n     * Returns the similarity between two vectors using the cosine similarity.\n     * @param vector1 Vector 1\n     * @param vector2 Vector 2\n     * @returns Similarity between the two vectors\n     */\n    public static cosineSimilarity(vector1: number[], vector2: number[]) {\n        \"\"\"This code calculates the cosine similarity between two vectors by dividing the dot product of the two vectors by the product of their norms.\"\"\"\n        pass\n\n    /**\n     * Normalizes a vector.\n     * @remarks\n     * The norm of a vector is the square root of the sum of the squares of the elements.\n     * The LocalIndex pre-normalizes all vectors to improve performance.\n     * @param vector Vector to normalize\n     * @returns Normalized vector\n     */\n    public static normalize(vector: number[]) {\n        \"\"\"This code normalizes a vector by calculating the square root of the sum of the squares of its elements.\"\"\"\n        pass\n\n    /**\n     * Returns the similarity between two vectors using cosine similarity.\n     * @remarks\n     * The LocalIndex pre-normalizes all vectors to improve performance.\n     * This method uses the pre-calculated norms to improve performance.\n     * @param vector1 Vector 1\n     * @param norm1 Norm of vector 1\n     * @param vector2 Vector 2\n     * @param norm2 Norm of vector 2\n     * @returns Similarity between the two vectors\n     */\n    public static normalizedCosineSimilarity(vector1: number[], norm1: number, vector2: number[], norm2: number) {\n        \"\"\"This code calculates the cosine similarity between two vectors by dividing their dot product by the product of their norms.\"\"\"\n        pass\n\n    /**\n     * Applies a filter to the metadata of an item.\n     * @param metadata Metadata of the item\n     * @param filter Filter to apply\n     * @returns True if the item matches the filter, false otherwise\n     */\n    public static select(metadata: Record<string, MetadataTypes>, filter: MetadataFilter): boolean {\n        \"\"\"This code defines a filter function that takes in a value and a filter object, and returns true if the value matches the filter criteria. The filter criteria can include basic comparisons like equality, inequality, greater than, less than, etc., as well as more complex conditions like \"in\" or \"not in\" a list of values.\"\"\"\n        pass\n\n    private static dotProduct(arr1: number[], arr2: number[]) {\n        \"\"\"This code calculates the dot product of two arrays by multiplying corresponding elements and summing them up.\"\"\"\n        pass\n\n    private static metadataFilter(value: MetadataTypes, filter: MetadataFilter): boolean {\n        \"\"\"This code is a filter function that takes in a value and a filter object, and returns true if the value matches the filter criteria. The filter criteria can include basic comparisons like equality, inequality, greater than, less than, etc., as well as more complex conditions like \"in\" or \"not in\" a list of values.\"\"\"\n        pass\n}","documentation":"The code defines a class called ItemSelector that provides methods for calculating similarities between vectors, normalizing vectors, and applying filters to metadata."}},{"key":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#cosineSimilarity().","attributes":{"range":[9,4,12,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#cosineSimilarity().","content":"public static cosineSimilarity(vector1: number[], vector2: number[]) {\n        // Return the quotient of the dot product and the product of the norms\n        return this.dotProduct(vector1, vector2) / (this.normalize(vector1) * this.normalize(vector2));\n    }","file":"/src/ItemSelector.ts","language":"typescript","fileHash":"d6743d360f5de46ac30035647b7771f50238b39094356b35ceb6e77647c86503","hash":"aa537510c4661065a743f83447c82c61e0f13dea31c44e337bf5b4e5c4a8616e","processedContent":"public static cosineSimilarity(vector1: number[], vector2: number[]) {\n        // Return the quotient of the dot product and the product of the norms\n        return this.dotProduct(vector1, vector2) / (this.normalize(vector1) * this.normalize(vector2));\n        \"\"\"\n        scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#dotProduct().: This code calculates the dot product of two arrays by multiplying corresponding elements and summing them up.\n        scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#normalize().: This code normalizes a vector by calculating the square root of the sum of the squares of its elements.\n        scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#normalize().: This code normalizes a vector by calculating the square root of the sum of the squares of its elements.\n        \"\"\"\n    }","documentation":"This code calculates the cosine similarity between two vectors by dividing the dot product of the two vectors by the product of their norms."}},{"key":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#normalize().","attributes":{"range":[22,4,32,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#normalize().","content":"public static normalize(vector: number[]) {\n        // Initialize a variable to store the sum of the squares\n        let sum = 0;\n        // Loop through the elements of the array\n        for (let i = 0; i < vector.length; i++) {\n            // Square the element and add it to the sum\n            sum += vector[i] * vector[i];\n        }\n        // Return the square root of the sum\n        return Math.sqrt(sum);\n    }","file":"/src/ItemSelector.ts","language":"typescript","fileHash":"d6743d360f5de46ac30035647b7771f50238b39094356b35ceb6e77647c86503","hash":"2130f9233012afaf9a780d88a70b716a23f98861b19d7310ae3fce1dbfa53056","processedContent":"public static normalize(vector: number[]) {\n        // Initialize a variable to store the sum of the squares\n        let sum = 0;\n        // Loop through the elements of the array\n        for (let i = 0; i < vector.length; i++) {\n            // Square the element and add it to the sum\n            sum += vector[i] * vector[i];\n        }\n        // Return the square root of the sum\n        return Math.sqrt(sum);\n    }","documentation":"This code normalizes a vector by calculating the square root of the sum of the squares of its elements."}},{"key":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#normalizedCosineSimilarity().","attributes":{"range":[45,4,48,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#normalizedCosineSimilarity().","content":"public static normalizedCosineSimilarity(vector1: number[], norm1: number, vector2: number[], norm2: number) {\n        // Return the quotient of the dot product and the product of the norms\n        return this.dotProduct(vector1, vector2) / (norm1 * norm2);\n    }","file":"/src/ItemSelector.ts","language":"typescript","fileHash":"d6743d360f5de46ac30035647b7771f50238b39094356b35ceb6e77647c86503","hash":"7fc7dd51538c4eec12ae949777e07697d61839ddd5bc009a5e812d31c1388cd6","processedContent":"public static normalizedCosineSimilarity(vector1: number[], norm1: number, vector2: number[], norm2: number) {\n        // Return the quotient of the dot product and the product of the norms\n        return this.dotProduct(vector1, vector2) / (norm1 * norm2); #This code calculates the dot product of two arrays by multiplying corresponding elements and summing them up.\n    }","documentation":"This code calculates the cosine similarity between two vectors by dividing their dot product by the product of their norms."}},{"key":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#select().","attributes":{"range":[56,4,90,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#select().","content":"public static select(metadata: Record<string, MetadataTypes>, filter: MetadataFilter): boolean {\n        if (filter === undefined || filter === null) {\n            return true;\n        }\n\n        for (const key in filter) {\n            switch (key) {\n                case '$and':\n                    if (!filter[key]!.every((f: MetadataFilter) => this.select(metadata, f))) {\n                        return false;\n                    }\n                    break;\n                case '$or':\n                    if (!filter[key]!.some((f: MetadataFilter) => this.select(metadata, f))) {\n                        return false;\n                    }\n                    break;\n                default:\n                    const value = filter[key];\n                    if (value === undefined || value === null) {\n                        return false;\n                    } else if (typeof value == 'object') {\n                        if (!this.metadataFilter(metadata[key], value as MetadataFilter)) {\n                            return false;\n                        }\n                    } else {\n                        if (metadata[key] !== value) {\n                            return false;\n                        }\n                    }\n                    break;\n            }\n        }\n        return true;\n    }","file":"/src/ItemSelector.ts","language":"typescript","fileHash":"d6743d360f5de46ac30035647b7771f50238b39094356b35ceb6e77647c86503","hash":"5d2d8819adc8e5c044ae8fd9f136ea29347076d30dace3ffb8b122f33aa4d072","processedContent":"public static select(metadata: Record<string, MetadataTypes>, filter: MetadataFilter): boolean {\n        if (filter === undefined || filter === null) {\n            return true;\n        }\n\n        for (const key in filter) {\n            switch (key) {\n                case '$and':\n                    if (!filter[key]!.every((f: MetadataFilter) => this.select(metadata, f))) { #This code defines a type called MetadataFilter, which is used to filter metadata in a database. It allows for filtering based on various conditions such as equality, greater than, less than, and more.\n                        return false;\n                    }\n                    break;\n                case '$or':\n                    if (!filter[key]!.some((f: MetadataFilter) => this.select(metadata, f))) { #This code defines a type called MetadataFilter, which is used to filter metadata in a database. It allows for filtering based on various conditions such as equality, greater than, less than, and more.\n                        return false;\n                    }\n                    break;\n                default:\n                    const value = filter[key];\n                    if (value === undefined || value === null) {\n                        return false;\n                    } else if (typeof value == 'object') {\n                        if (!this.metadataFilter(metadata[key], value as MetadataFilter)) {\n                        \"\"\"\n                        scip-typescript npm vectra 0.5.5 src/`types.ts`/MetadataFilter#: This code defines a type called MetadataFilter, which is used to filter metadata in a database. It allows for filtering based on various conditions such as equality, greater than, less than, and more.\n                        scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#metadataFilter().: This code is a filter function that takes in a value and a filter object, and returns true if the value matches the filter criteria. The filter criteria can include basic comparisons like equality, inequality, greater than, less than, etc., as well as more complex conditions like \"in\" or \"not in\" a list of values.\n                        \"\"\"\n                            return false;\n                        }\n                    } else {\n                        if (metadata[key] !== value) {\n                            return false;\n                        }\n                    }\n                    break;\n            }\n        }\n        return true;\n    }","documentation":"This code defines a filter function that takes in a value and a filter object, and returns true if the value matches the filter criteria. The filter criteria can include basic comparisons like equality, inequality, greater than, less than, etc., as well as more complex conditions like \"in\" or \"not in\" a list of values."}},{"key":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#dotProduct().","attributes":{"range":[92,4,102,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#dotProduct().","content":"private static dotProduct(arr1: number[], arr2: number[]) {\n        // Initialize a variable to store the sum of the products\n        let sum = 0;\n        // Loop through the elements of the arrays\n        for (let i = 0; i < arr1.length; i++) {\n            // Multiply the corresponding elements and add them to the sum\n            sum += arr1[i] * arr2[i];\n        }\n        // Return the sum\n        return sum;\n    }","file":"/src/ItemSelector.ts","language":"typescript","fileHash":"d6743d360f5de46ac30035647b7771f50238b39094356b35ceb6e77647c86503","hash":"823c80cec598a4392132f202785ef681eac987aaf3a172dfd086daa884ebb77d","processedContent":"private static dotProduct(arr1: number[], arr2: number[]) {\n        // Initialize a variable to store the sum of the products\n        let sum = 0;\n        // Loop through the elements of the arrays\n        for (let i = 0; i < arr1.length; i++) {\n            // Multiply the corresponding elements and add them to the sum\n            sum += arr1[i] * arr2[i];\n        }\n        // Return the sum\n        return sum;\n    }","documentation":"This code calculates the dot product of two arrays by multiplying corresponding elements and summing them up."}},{"key":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#metadataFilter().","attributes":{"range":[104,4,156,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#metadataFilter().","content":"private static metadataFilter(value: MetadataTypes, filter: MetadataFilter): boolean {\n        if (value === undefined || value === null) {\n            return false;\n        }\n\n        for (const key in filter) {\n            switch (key) {\n                case '$eq':\n                    if (value !== filter[key]) {\n                        return false;\n                    }\n                    break;\n                case '$ne':\n                    if (value === filter[key]) {\n                        return false;\n                    }\n                    break;\n                case '$gt':\n                    if (typeof value != 'number' || value <= filter[key]!) {\n                        return false;\n                    }\n                    break;\n                case '$gte':\n                    if (typeof value != 'number' || value < filter[key]!) {\n                        return false;\n                    }\n                    break;\n                case '$lt':\n                    if (typeof value != 'number' || value >= filter[key]!) {\n                        return false;\n                    }\n                    break;\n                case '$lte':\n                    if (typeof value != 'number' || value > filter[key]!) {\n                        return false;\n                    }\n                    break;\n                case '$in':\n                    if (typeof value == 'boolean' || !filter[key]!.includes(value)) {\n                        return false;\n                    }\n                    break;\n                case '$nin':\n                    if (typeof value == 'boolean' || filter[key]!.includes(value)) {\n                        return false;\n                    }\n                    break;\n                default:\n                    return value === filter[key];\n            }\n        }\n        return true;\n    }","file":"/src/ItemSelector.ts","language":"typescript","fileHash":"d6743d360f5de46ac30035647b7771f50238b39094356b35ceb6e77647c86503","hash":"f8799acc5adde9bf041af08ef0693a7d79056a108426ce54a797684a651cbe19","processedContent":"private static metadataFilter(value: MetadataTypes, filter: MetadataFilter): boolean {\n        if (value === undefined || value === null) {\n            return false;\n        }\n\n        for (const key in filter) {\n            switch (key) {\n                case '$eq':\n                    if (value !== filter[key]) {\n                        return false;\n                    }\n                    break;\n                case '$ne':\n                    if (value === filter[key]) {\n                        return false;\n                    }\n                    break;\n                case '$gt':\n                    if (typeof value != 'number' || value <= filter[key]!) {\n                        return false;\n                    }\n                    break;\n                case '$gte':\n                    if (typeof value != 'number' || value < filter[key]!) {\n                        return false;\n                    }\n                    break;\n                case '$lt':\n                    if (typeof value != 'number' || value >= filter[key]!) {\n                        return false;\n                    }\n                    break;\n                case '$lte':\n                    if (typeof value != 'number' || value > filter[key]!) {\n                        return false;\n                    }\n                    break;\n                case '$in':\n                    if (typeof value == 'boolean' || !filter[key]!.includes(value)) {\n                        return false;\n                    }\n                    break;\n                case '$nin':\n                    if (typeof value == 'boolean' || filter[key]!.includes(value)) {\n                        return false;\n                    }\n                    break;\n                default:\n                    return value === filter[key];\n            }\n        }\n        return true;\n    }","documentation":"This code is a filter function that takes in a value and a filter object, and returns true if the value matches the filter criteria. The filter criteria can include basic comparisons like equality, inequality, greater than, less than, etc., as well as more complex conditions like \"in\" or \"not in\" a list of values."}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/","attributes":{"range":[0,0,396,0],"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/","content":"import * as fs from 'fs/promises';\nimport * as path from 'path';\nimport { v4 } from 'uuid';\nimport { ItemSelector } from './ItemSelector';\nimport { IndexItem, IndexStats, MetadataFilter, MetadataTypes, QueryResult } from './types';\n\nexport interface CreateIndexConfig {\n    version: number;\n    deleteIfExists?: boolean;\n    metadata_config?: {\n        indexed?: string[];\n    };\n}\n\n/**\n * Local vector index instance.\n * @remarks\n * This class is used to create, update, and query a local vector index.\n * Each index is a folder on disk containing an index.json file and an optional set of metadata files.\n */\nexport class LocalIndex {\n    private readonly _folderPath: string;\n    private readonly _indexName: string;\n\n    private _data?: IndexData;\n    private _update?: IndexData;\n\n    /**\n     * Creates a new instance of LocalIndex.\n     * @param folderPath - Path to the index folder\n     * @param indexName - Optional name of the index file. Defaults to index.json\n     */\n    public constructor(folderPath: string, indexName?: string) {\n        this._folderPath = folderPath;\n        this._indexName = indexName || \"index.json\";\n    }\n\n    /**\n     * Path to the index folder.\n     */\n    public get folderPath(): string {\n        return this._folderPath;\n    }\n\n    /**\n     * Optional name of the index file. \n     */\n    public get indexName(): string {\n        return this._indexName;\n    }\n\n    /**\n     * Begins an update to the index.\n     * @remarks\n     * This method loads the index into memory and prepares it for updates.\n     */\n    public async beginUpdate(): Promise<void> {\n        if (this._update) {\n            throw new Error('Update already in progress');\n        }\n\n        await this.loadIndexData();\n        this._update = Object.assign({}, this._data);\n    }\n\n    /**\n     * Cancels an update to the index.\n     * @remarks\n     * This method discards any changes made to the index since the update began.\n     */\n    public cancelUpdate(): void {\n        this._update = undefined;\n    }\n\n    /**\n     * Creates a new index.\n     * @remarks\n     * This method creates a new folder on disk containing an index.json file.\n     * @param config - Index configuration\n     */\n    public async createIndex(config: CreateIndexConfig = {version: 1}): Promise<void> {\n        // Delete if exists\n        if (await this.isIndexCreated()) {\n            if (config.deleteIfExists) {\n                await this.deleteIndex();\n            } else {\n                throw new Error('Index already exists');\n            }\n        }\n\n        try {\n            // Create folder for index\n            await fs.mkdir(this._folderPath, { recursive: true });\n\n            // Initialize index.json file\n            this._data = {\n                version: config.version,\n                metadata_config: config.metadata_config ?? {},\n                items: []\n            };\n\n            await fs.writeFile(path.join(this._folderPath, this._indexName), JSON.stringify(this._data));\n        } catch (err: unknown) {\n            await this.deleteIndex();\n            throw new Error('Error creating index');\n        }\n    }\n\n    /**\n     * Deletes the index.\n     * @remarks\n     * This method deletes the index folder from disk.\n     */\n    public deleteIndex(): Promise<void> {\n        this._data = undefined;\n        return fs.rm(this._folderPath, {\n            recursive: true,\n            maxRetries: 3\n        });\n    }\n\n    /**\n     * Deletes an item from the index.\n     * @param id - Item id\n     */\n    public async deleteItem(id: string): Promise<void> {\n        if (this._update) {\n            const index = this._update.items.findIndex(i => i.id === id);\n            if (index >= 0) {\n                this._update.items.splice(index, 1);\n            }\n        } else {\n            await this.beginUpdate();\n            const index = this._update!.items.findIndex(i => i.id === id);\n            if (index >= 0) {\n                this._update!.items.splice(index, 1);\n            }\n            await this.endUpdate();\n        }\n    }\n\n    /**\n     * Ends an update to the index.\n     * @remarks\n     * This method saves the index to disk.\n     */\n    public async endUpdate(): Promise<void> {\n        if (!this._update) {\n            throw new Error('No update in progress');\n        }\n\n        try {\n            // Save index\n            await fs.writeFile(path.join(this._folderPath, this._indexName), JSON.stringify(this._update));\n            this._data = this._update;\n            this._update = undefined;\n        } catch(err: unknown) {\n            throw new Error(`Error saving index: ${(err as any).toString()}`);\n        }\n    }\n\n    /**\n     * Loads an index from disk and returns its stats.\n     * @returns Index stats\n     */\n    public async getIndexStats(): Promise<IndexStats> {\n        await this.loadIndexData();\n        return {\n            version: this._data!.version,\n            metadata_config: this._data!.metadata_config,\n            items: this._data!.items.length\n        };\n    }\n\n    /**\n     * Returns an item from the index given its ID.\n     * @param id Item id\n     * @returns Item or undefined if not found\n     */\n    public async getItem<TMetadata = Record<string,MetadataTypes>>(id: string): Promise<IndexItem<TMetadata> | undefined> {\n        await this.loadIndexData();\n        return this._data!.items.find(i => i.id === id) as any | undefined;\n    }\n\n    /**\n     * Adds an item to the index.\n     * @remarks\n     * A new update is started if one is not already in progress. If an item with the same ID\n     * already exists, an error will be thrown.\n     * @param item Item to insert\n     * @returns Inserted item\n     */\n    public async insertItem<TMetadata = Record<string,MetadataTypes>>(item: Partial<IndexItem<TMetadata>>): Promise<IndexItem<TMetadata>> {\n        if (this._update) {\n            return await this.addItemToUpdate(item, true) as any;\n        } else {\n            await this.beginUpdate();\n            const newItem = await this.addItemToUpdate(item, true);\n            await this.endUpdate();\n            return newItem as any;\n        }\n    }\n\n    /**\n     * Returns true if the index exists.\n     */\n    public async isIndexCreated(): Promise<boolean> {\n        try {\n            await fs.access(path.join(this._folderPath, this.indexName));\n            return true;\n        } catch (err: unknown) {\n            return false;\n        }\n    }\n\n    /**\n     * Returns all items in the index.\n     * @remarks\n     * This method loads the index into memory and returns all its items. A copy of the items\n     * array is returned so no modifications should be made to the array.\n     * @returns All items in the index\n     */\n    public async listItems<TMetadata = Record<string,MetadataTypes>>(): Promise<IndexItem<TMetadata>[]> {\n        await this.loadIndexData();\n        return this._data!.items.slice() as any;\n    }\n\n    /**\n     * Returns all items in the index matching the filter.\n     * @remarks\n     * This method loads the index into memory and returns all its items matching the filter.\n     * @param filter Filter to apply\n     * @returns Items matching the filter\n     */\n    public async listItemsByMetadata<TMetadata = Record<string,MetadataTypes>>(filter: MetadataFilter): Promise<IndexItem<TMetadata>[]> {\n        await this.loadIndexData();\n        return this._data!.items.filter(i => ItemSelector.select(i.metadata, filter)) as any;\n    }\n\n    /**\n     * Finds the top k items in the index that are most similar to the vector.\n     * @remarks\n     * This method loads the index into memory and returns the top k items that are most similar.\n     * An optional filter can be applied to the metadata of the items.\n     * @param vector Vector to query against\n     * @param topK Number of items to return\n     * @param filter Optional filter to apply\n     * @returns Similar items to the vector that matches the filter\n     */\n    public async queryItems<TMetadata = Record<string,MetadataTypes>>(vector: number[], topK: number, filter?: MetadataFilter): Promise<QueryResult<TMetadata>[]> {\n        await this.loadIndexData();\n\n        // Filter items\n        let items = this._data!.items;\n        if (filter) {\n            items = items.filter(i => ItemSelector.select(i.metadata, filter));\n        }\n\n        // Calculate distances\n        const norm = ItemSelector.normalize(vector);\n        const distances: { index: number, distance: number }[] = [];\n        for (let i = 0; i < items.length; i++) {\n            const item = items[i];\n            const distance = ItemSelector.normalizedCosineSimilarity(vector, norm, item.vector, item.norm);\n            distances.push({ index: i, distance: distance });\n        }\n\n        // Sort by distance DESCENDING\n        distances.sort((a, b) => b.distance - a.distance);\n\n        // Find top k\n        const top: QueryResult<TMetadata>[] = distances.slice(0, topK).map(d => {\n            return {\n                item: Object.assign({}, items[d.index]) as any,\n                score: d.distance\n            };\n        });\n\n        // Load external metadata\n        for (const item of top) {\n            if (item.item.metadataFile) {\n                const metadataPath = path.join(this._folderPath, item.item.metadataFile);\n                const metadata = await fs.readFile(metadataPath);\n                item.item.metadata = JSON.parse(metadata.toString());\n            }\n        }\n\n        return top;\n    }\n\n    /**\n     * Adds or replaces an item in the index.\n     * @remarks\n     * A new update is started if one is not already in progress. If an item with the same ID\n     * already exists, it will be replaced.\n     * @param item Item to insert or replace\n     * @returns Upserted item\n     */\n    public async upsertItem<TMetadata = Record<string,MetadataTypes>>(item: Partial<IndexItem<TMetadata>>): Promise<IndexItem<TMetadata>> {\n        if (this._update) {\n            return await this.addItemToUpdate(item, false) as any;\n        } else {\n            await this.beginUpdate();\n            const newItem = await this.addItemToUpdate(item, false);\n            await this.endUpdate();\n            return newItem as any;\n        }\n    }\n\n    /**\n     * Ensures that the index has been loaded into memory.\n     */\n    protected async loadIndexData(): Promise<void> {\n        if (this._data) {\n            return;\n        }\n\n        if (!await this.isIndexCreated()) {\n            throw new Error('Index does not exist');\n        }\n\n        const data = await fs.readFile(path.join(this._folderPath, this.indexName));\n        this._data = JSON.parse(data.toString());\n    }\n\n    private async addItemToUpdate(item: Partial<IndexItem<any>>, unique: boolean): Promise<IndexItem> {\n        // Ensure vector is provided\n        if (!item.vector) {\n            throw new Error('Vector is required');\n        }\n\n        // Ensure unique\n        const id = item.id ?? v4();\n        if (unique) {\n            const existing = this._update!.items.find(i => i.id === id);\n            if (existing) {\n                throw new Error(`Item with id ${id} already exists`);\n            }\n        }\n\n        // Check for indexed metadata\n        let metadata: Record<string,any> = {};\n        let metadataFile: string | undefined;\n        if (this._update!.metadata_config.indexed && this._update!.metadata_config.indexed.length > 0 && item.metadata) {\n            // Copy only indexed metadata\n            for (const key of this._update!.metadata_config.indexed) {\n                if (item.metadata && item.metadata[key]) {\n                    metadata[key] = item.metadata[key];\n                }\n            }\n\n            // Save remaining metadata to disk\n            metadataFile = `${v4}.json`;\n            const metadataPath = path.join(this._folderPath, metadataFile);\n            await fs.writeFile(metadataPath, JSON.stringify(item.metadata));\n        } else if (item.metadata) {\n            metadata = item.metadata;\n        }\n\n        // Create new item\n        const newItem: IndexItem = {\n            id: id,\n            metadata: metadata,\n            vector: item.vector,\n            norm: ItemSelector.normalize(item.vector)\n        };\n        if (metadataFile) {\n            newItem.metadataFile = metadataFile;\n        }\n\n        // Add item to index\n        if (!unique) {\n            const existing = this._update!.items.find(i => i.id === id);\n            if (existing) {\n                existing.metadata = newItem.metadata;\n                existing.vector = newItem.vector;\n                existing.metadataFile = newItem.metadataFile;\n                return existing;\n            } else {\n                this._update!.items.push(newItem);\n                return newItem;\n            }\n        } else {\n            this._update!.items.push(newItem);\n            return newItem;\n        }\n    }\n}\n\ninterface IndexData {\n    version: number;\n    metadata_config: {\n        indexed?: string[];\n    };\n    items: IndexItem[];\n}\n","file":"/src/LocalIndex.ts","language":"typescript","fileHash":"cdd0d6e03ff4f40008666df83b2383fcb027ad1c8814421f1bb00ed457d81ec2","hash":"cdd0d6e03ff4f40008666df83b2383fcb027ad1c8814421f1bb00ed457d81ec2","processedContent":"import * as fs from 'fs/promises';\n\"\"\"\nscip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/: undefined\nscip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/: undefined\n\"\"\"\nimport * as path from 'path';\n\"\"\"\nscip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/: undefined\nscip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path.: undefined\nscip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/: undefined\n\"\"\"\nimport { v4 } from 'uuid';\n\"\"\"\nscip-typescript npm @types/uuid 9.0.7 `index.d.ts`/v4.: undefined\nscip-typescript npm @types/uuid 9.0.7 `index.d.ts`/: undefined\n\"\"\"\nimport { ItemSelector } from './ItemSelector';\n\"\"\"\nscip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#: The code defines a class called ItemSelector that provides methods for calculating similarities between vectors, normalizing vectors, and applying filters to metadata.\nscip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/: The code defines a class called ItemSelector that provides methods for filtering metadata and calculating similarities between vectors. It also defines various interfaces and types for an AI model that can create embeddings for text inputs.\n\"\"\"\nimport { IndexItem, IndexStats, MetadataFilter, MetadataTypes, QueryResult } from './types';\n\"\"\"\nscip-typescript npm vectra 0.5.5 src/`types.ts`/IndexItem#: This code defines an interface for an index item, which includes an ID, metadata, a vector, and other properties. The metadata can be of any type, but it is optional.\nscip-typescript npm vectra 0.5.5 src/`types.ts`/IndexStats#: This code defines an interface for an index statistics object, which contains information about the version of the index, the metadata configuration, and the number of items in the index.\nscip-typescript npm vectra 0.5.5 src/`types.ts`/MetadataFilter#: This code defines a type called MetadataFilter, which is used to filter metadata in a database. It allows for filtering based on various conditions such as equality, greater than, less than, and more.\nscip-typescript npm vectra 0.5.5 src/`types.ts`/MetadataTypes#: undefined\nscip-typescript npm vectra 0.5.5 src/`types.ts`/QueryResult#: This code defines an interface for a query result, which includes an item (an index item with ID, metadata, vector, and other properties), a score (a number representing the relevance of the item to the query).\nscip-typescript npm vectra 0.5.5 src/`types.ts`/: The code defines various interfaces and types for an AI model that can create embeddings for text inputs, including a response status, embeddings response, text chunk, text fetcher, index statistics, index item, metadata filter, query result, tokenizer, document chunk metadata, and document catalog statistics.\n\"\"\"\n\nexport interface CreateIndexConfig {\n    \"\"\"This code defines an interface for creating an index in a database, with options to specify the version number, whether to delete the index if it already exists, and metadata configuration options such as which fields to index.\"\"\"\n    pass\n\n/**\n * Local vector index instance.\n * @remarks\n * This class is used to create, update, and query a local vector index.\n * Each index is a folder on disk containing an index.json file and an optional set of metadata files.\n */\nexport class LocalIndex {\n    \"\"\"This code defines a class called `LocalIndex` that manages an index file on disk. It provides methods for creating, updating, and querying the index, as well as loading and saving the index to disk.\"\"\"\n    pass\n\ninterface IndexData {\n    \"\"\"This code defines an interface for an index item, which includes an ID, metadata, a vector, and other properties. The metadata can be of any type, but it is optional.\"\"\"\n    pass\n","documentation":"This code defines a class called `LocalIndex` that manages a local vector index, which is used to create, update, and query an index file on disk. It also defines various interfaces and types for an AI model that can create embeddings for text inputs."}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/CreateIndexConfig#","attributes":{"range":[6,0,12,1],"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/CreateIndexConfig#","content":"export interface CreateIndexConfig {\n    version: number;\n    deleteIfExists?: boolean;\n    metadata_config?: {\n        indexed?: string[];\n    };\n}","file":"/src/LocalIndex.ts","language":"typescript","fileHash":"cdd0d6e03ff4f40008666df83b2383fcb027ad1c8814421f1bb00ed457d81ec2","hash":"2e32db00f97b84282e1f2c6f4a127be402680420346a8ae64ea2f7cab5e6d7cc","processedContent":"export interface CreateIndexConfig {\n    version: number;\n    deleteIfExists?: boolean;\n    metadata_config?: {\n        indexed?: string[];\n    };\n}","documentation":"This code defines an interface for creating an index in a database, with options to specify the version number, whether to delete the index if it already exists, and metadata configuration options such as which fields to index."}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#","attributes":{"range":[20,0,387,1],"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#","content":"export class LocalIndex {\n    private readonly _folderPath: string;\n    private readonly _indexName: string;\n\n    private _data?: IndexData;\n    private _update?: IndexData;\n\n    /**\n     * Creates a new instance of LocalIndex.\n     * @param folderPath - Path to the index folder\n     * @param indexName - Optional name of the index file. Defaults to index.json\n     */\n    public constructor(folderPath: string, indexName?: string) {\n        this._folderPath = folderPath;\n        this._indexName = indexName || \"index.json\";\n    }\n\n    /**\n     * Path to the index folder.\n     */\n    public get folderPath(): string {\n        return this._folderPath;\n    }\n\n    /**\n     * Optional name of the index file. \n     */\n    public get indexName(): string {\n        return this._indexName;\n    }\n\n    /**\n     * Begins an update to the index.\n     * @remarks\n     * This method loads the index into memory and prepares it for updates.\n     */\n    public async beginUpdate(): Promise<void> {\n        if (this._update) {\n            throw new Error('Update already in progress');\n        }\n\n        await this.loadIndexData();\n        this._update = Object.assign({}, this._data);\n    }\n\n    /**\n     * Cancels an update to the index.\n     * @remarks\n     * This method discards any changes made to the index since the update began.\n     */\n    public cancelUpdate(): void {\n        this._update = undefined;\n    }\n\n    /**\n     * Creates a new index.\n     * @remarks\n     * This method creates a new folder on disk containing an index.json file.\n     * @param config - Index configuration\n     */\n    public async createIndex(config: CreateIndexConfig = {version: 1}): Promise<void> {\n        // Delete if exists\n        if (await this.isIndexCreated()) {\n            if (config.deleteIfExists) {\n                await this.deleteIndex();\n            } else {\n                throw new Error('Index already exists');\n            }\n        }\n\n        try {\n            // Create folder for index\n            await fs.mkdir(this._folderPath, { recursive: true });\n\n            // Initialize index.json file\n            this._data = {\n                version: config.version,\n                metadata_config: config.metadata_config ?? {},\n                items: []\n            };\n\n            await fs.writeFile(path.join(this._folderPath, this._indexName), JSON.stringify(this._data));\n        } catch (err: unknown) {\n            await this.deleteIndex();\n            throw new Error('Error creating index');\n        }\n    }\n\n    /**\n     * Deletes the index.\n     * @remarks\n     * This method deletes the index folder from disk.\n     */\n    public deleteIndex(): Promise<void> {\n        this._data = undefined;\n        return fs.rm(this._folderPath, {\n            recursive: true,\n            maxRetries: 3\n        });\n    }\n\n    /**\n     * Deletes an item from the index.\n     * @param id - Item id\n     */\n    public async deleteItem(id: string): Promise<void> {\n        if (this._update) {\n            const index = this._update.items.findIndex(i => i.id === id);\n            if (index >= 0) {\n                this._update.items.splice(index, 1);\n            }\n        } else {\n            await this.beginUpdate();\n            const index = this._update!.items.findIndex(i => i.id === id);\n            if (index >= 0) {\n                this._update!.items.splice(index, 1);\n            }\n            await this.endUpdate();\n        }\n    }\n\n    /**\n     * Ends an update to the index.\n     * @remarks\n     * This method saves the index to disk.\n     */\n    public async endUpdate(): Promise<void> {\n        if (!this._update) {\n            throw new Error('No update in progress');\n        }\n\n        try {\n            // Save index\n            await fs.writeFile(path.join(this._folderPath, this._indexName), JSON.stringify(this._update));\n            this._data = this._update;\n            this._update = undefined;\n        } catch(err: unknown) {\n            throw new Error(`Error saving index: ${(err as any).toString()}`);\n        }\n    }\n\n    /**\n     * Loads an index from disk and returns its stats.\n     * @returns Index stats\n     */\n    public async getIndexStats(): Promise<IndexStats> {\n        await this.loadIndexData();\n        return {\n            version: this._data!.version,\n            metadata_config: this._data!.metadata_config,\n            items: this._data!.items.length\n        };\n    }\n\n    /**\n     * Returns an item from the index given its ID.\n     * @param id Item id\n     * @returns Item or undefined if not found\n     */\n    public async getItem<TMetadata = Record<string,MetadataTypes>>(id: string): Promise<IndexItem<TMetadata> | undefined> {\n        await this.loadIndexData();\n        return this._data!.items.find(i => i.id === id) as any | undefined;\n    }\n\n    /**\n     * Adds an item to the index.\n     * @remarks\n     * A new update is started if one is not already in progress. If an item with the same ID\n     * already exists, an error will be thrown.\n     * @param item Item to insert\n     * @returns Inserted item\n     */\n    public async insertItem<TMetadata = Record<string,MetadataTypes>>(item: Partial<IndexItem<TMetadata>>): Promise<IndexItem<TMetadata>> {\n        if (this._update) {\n            return await this.addItemToUpdate(item, true) as any;\n        } else {\n            await this.beginUpdate();\n            const newItem = await this.addItemToUpdate(item, true);\n            await this.endUpdate();\n            return newItem as any;\n        }\n    }\n\n    /**\n     * Returns true if the index exists.\n     */\n    public async isIndexCreated(): Promise<boolean> {\n        try {\n            await fs.access(path.join(this._folderPath, this.indexName));\n            return true;\n        } catch (err: unknown) {\n            return false;\n        }\n    }\n\n    /**\n     * Returns all items in the index.\n     * @remarks\n     * This method loads the index into memory and returns all its items. A copy of the items\n     * array is returned so no modifications should be made to the array.\n     * @returns All items in the index\n     */\n    public async listItems<TMetadata = Record<string,MetadataTypes>>(): Promise<IndexItem<TMetadata>[]> {\n        await this.loadIndexData();\n        return this._data!.items.slice() as any;\n    }\n\n    /**\n     * Returns all items in the index matching the filter.\n     * @remarks\n     * This method loads the index into memory and returns all its items matching the filter.\n     * @param filter Filter to apply\n     * @returns Items matching the filter\n     */\n    public async listItemsByMetadata<TMetadata = Record<string,MetadataTypes>>(filter: MetadataFilter): Promise<IndexItem<TMetadata>[]> {\n        await this.loadIndexData();\n        return this._data!.items.filter(i => ItemSelector.select(i.metadata, filter)) as any;\n    }\n\n    /**\n     * Finds the top k items in the index that are most similar to the vector.\n     * @remarks\n     * This method loads the index into memory and returns the top k items that are most similar.\n     * An optional filter can be applied to the metadata of the items.\n     * @param vector Vector to query against\n     * @param topK Number of items to return\n     * @param filter Optional filter to apply\n     * @returns Similar items to the vector that matches the filter\n     */\n    public async queryItems<TMetadata = Record<string,MetadataTypes>>(vector: number[], topK: number, filter?: MetadataFilter): Promise<QueryResult<TMetadata>[]> {\n        await this.loadIndexData();\n\n        // Filter items\n        let items = this._data!.items;\n        if (filter) {\n            items = items.filter(i => ItemSelector.select(i.metadata, filter));\n        }\n\n        // Calculate distances\n        const norm = ItemSelector.normalize(vector);\n        const distances: { index: number, distance: number }[] = [];\n        for (let i = 0; i < items.length; i++) {\n            const item = items[i];\n            const distance = ItemSelector.normalizedCosineSimilarity(vector, norm, item.vector, item.norm);\n            distances.push({ index: i, distance: distance });\n        }\n\n        // Sort by distance DESCENDING\n        distances.sort((a, b) => b.distance - a.distance);\n\n        // Find top k\n        const top: QueryResult<TMetadata>[] = distances.slice(0, topK).map(d => {\n            return {\n                item: Object.assign({}, items[d.index]) as any,\n                score: d.distance\n            };\n        });\n\n        // Load external metadata\n        for (const item of top) {\n            if (item.item.metadataFile) {\n                const metadataPath = path.join(this._folderPath, item.item.metadataFile);\n                const metadata = await fs.readFile(metadataPath);\n                item.item.metadata = JSON.parse(metadata.toString());\n            }\n        }\n\n        return top;\n    }\n\n    /**\n     * Adds or replaces an item in the index.\n     * @remarks\n     * A new update is started if one is not already in progress. If an item with the same ID\n     * already exists, it will be replaced.\n     * @param item Item to insert or replace\n     * @returns Upserted item\n     */\n    public async upsertItem<TMetadata = Record<string,MetadataTypes>>(item: Partial<IndexItem<TMetadata>>): Promise<IndexItem<TMetadata>> {\n        if (this._update) {\n            return await this.addItemToUpdate(item, false) as any;\n        } else {\n            await this.beginUpdate();\n            const newItem = await this.addItemToUpdate(item, false);\n            await this.endUpdate();\n            return newItem as any;\n        }\n    }\n\n    /**\n     * Ensures that the index has been loaded into memory.\n     */\n    protected async loadIndexData(): Promise<void> {\n        if (this._data) {\n            return;\n        }\n\n        if (!await this.isIndexCreated()) {\n            throw new Error('Index does not exist');\n        }\n\n        const data = await fs.readFile(path.join(this._folderPath, this.indexName));\n        this._data = JSON.parse(data.toString());\n    }\n\n    private async addItemToUpdate(item: Partial<IndexItem<any>>, unique: boolean): Promise<IndexItem> {\n        // Ensure vector is provided\n        if (!item.vector) {\n            throw new Error('Vector is required');\n        }\n\n        // Ensure unique\n        const id = item.id ?? v4();\n        if (unique) {\n            const existing = this._update!.items.find(i => i.id === id);\n            if (existing) {\n                throw new Error(`Item with id ${id} already exists`);\n            }\n        }\n\n        // Check for indexed metadata\n        let metadata: Record<string,any> = {};\n        let metadataFile: string | undefined;\n        if (this._update!.metadata_config.indexed && this._update!.metadata_config.indexed.length > 0 && item.metadata) {\n            // Copy only indexed metadata\n            for (const key of this._update!.metadata_config.indexed) {\n                if (item.metadata && item.metadata[key]) {\n                    metadata[key] = item.metadata[key];\n                }\n            }\n\n            // Save remaining metadata to disk\n            metadataFile = `${v4}.json`;\n            const metadataPath = path.join(this._folderPath, metadataFile);\n            await fs.writeFile(metadataPath, JSON.stringify(item.metadata));\n        } else if (item.metadata) {\n            metadata = item.metadata;\n        }\n\n        // Create new item\n        const newItem: IndexItem = {\n            id: id,\n            metadata: metadata,\n            vector: item.vector,\n            norm: ItemSelector.normalize(item.vector)\n        };\n        if (metadataFile) {\n            newItem.metadataFile = metadataFile;\n        }\n\n        // Add item to index\n        if (!unique) {\n            const existing = this._update!.items.find(i => i.id === id);\n            if (existing) {\n                existing.metadata = newItem.metadata;\n                existing.vector = newItem.vector;\n                existing.metadataFile = newItem.metadataFile;\n                return existing;\n            } else {\n                this._update!.items.push(newItem);\n                return newItem;\n            }\n        } else {\n            this._update!.items.push(newItem);\n            return newItem;\n        }\n    }\n}","file":"/src/LocalIndex.ts","language":"typescript","fileHash":"cdd0d6e03ff4f40008666df83b2383fcb027ad1c8814421f1bb00ed457d81ec2","hash":"bdf9577c18bb63150ed7048155493beff710f16caf4b0975955c498ab6ae3089","processedContent":"export class LocalIndex {\n    private readonly _folderPath: string;\n    private readonly _indexName: string;\n\n    private _data?: IndexData; #This code defines an interface for an index item, which includes an ID, metadata, a vector, and other properties. The metadata can be of any type, but it is optional.\n    private _update?: IndexData; #This code defines an interface for an index item, which includes an ID, metadata, a vector, and other properties. The metadata can be of any type, but it is optional.\n\n    /**\n     * Creates a new instance of LocalIndex.\n     * @param folderPath - Path to the index folder\n     * @param indexName - Optional name of the index file. Defaults to index.json\n     */\n    public constructor(folderPath: string, indexName?: string) {\n        this._folderPath = folderPath; #undefined\n        this._indexName = indexName || \"index.json\"; #undefined\n    }\n\n    /**\n     * Path to the index folder.\n     */\n    public get folderPath(): string {\n        return this._folderPath; #undefined\n    }\n\n    /**\n     * Optional name of the index file. \n     */\n    public get indexName(): string {\n        return this._indexName; #undefined\n    }\n\n    /**\n     * Begins an update to the index.\n     * @remarks\n     * This method loads the index into memory and prepares it for updates.\n     */\n    public async beginUpdate(): Promise<void> {\n        \"\"\"This code checks if an index file exists in a specific folder and reads the contents of the file into memory. It then creates a copy of the data in memory to use for updates.\"\"\"\n        pass\n\n    /**\n     * Cancels an update to the index.\n     * @remarks\n     * This method discards any changes made to the index since the update began.\n     */\n    public cancelUpdate(): void {\n        \"\"\"This code sets the value of a variable called `_update` to `undefined`.\"\"\"\n        pass\n\n    /**\n     * Creates a new index.\n     * @remarks\n     * This method creates a new folder on disk containing an index.json file.\n     * @param config - Index configuration\n     */\n    public async createIndex(config: CreateIndexConfig = {version: 1}): Promise<void> {\n        \"\"\"This code creates an index file in a specific folder, deleting it first if it already exists. It initializes the index with metadata and version information, and writes it to disk.\"\"\"\n        pass\n\n    /**\n     * Deletes the index.\n     * @remarks\n     * This method deletes the index folder from disk.\n     */\n    public deleteIndex(): Promise<void> {\n        \"\"\"This code deletes a folder and its contents recursively, with a maximum of 3 retries.\"\"\"\n        pass\n\n    /**\n     * Deletes an item from the index.\n     * @param id - Item id\n     */\n    public async deleteItem(id: string): Promise<void> {\n        \"\"\"This code is a method that deletes an item from an index file. It first checks if there is an update in progress, and then it finds the index of the item to be deleted in the update data. If the item is found, it is removed from the update data and saved to disk.\"\"\"\n        pass\n\n    /**\n     * Ends an update to the index.\n     * @remarks\n     * This method saves the index to disk.\n     */\n    public async endUpdate(): Promise<void> {\n        \"\"\"This code is a method that saves the current state of an index to disk. It first checks if there is an update in progress, and then it writes the update to a file using the `fs` module. If there is an error while saving the file, it throws a new error with the error message.\"\"\"\n        pass\n\n    /**\n     * Loads an index from disk and returns its stats.\n     * @returns Index stats\n     */\n    public async getIndexStats(): Promise<IndexStats> {\n        \"\"\"This code retrieves the index statistics for a specific folder, including the version number, metadata configuration, and the number of items in the index.\"\"\"\n        pass\n\n    /**\n     * Returns an item from the index given its ID.\n     * @param id Item id\n     * @returns Item or undefined if not found\n     */\n    public async getItem<TMetadata = Record<string,MetadataTypes>>(id: string): Promise<IndexItem<TMetadata> | undefined> {\n        \"\"\"This code checks if an index file exists in a specific folder and reads the contents of the file into memory. It then returns the item with the specified ID from the loaded data, or undefined if it doesn't exist.\"\"\"\n        pass\n\n    /**\n     * Adds an item to the index.\n     * @remarks\n     * A new update is started if one is not already in progress. If an item with the same ID\n     * already exists, an error will be thrown.\n     * @param item Item to insert\n     * @returns Inserted item\n     */\n    public async insertItem<TMetadata = Record<string,MetadataTypes>>(item: Partial<IndexItem<TMetadata>>): Promise<IndexItem<TMetadata>> {\n        \"\"\"This code defines a method called `insertItem` that adds an item to an index. It checks for the presence of a vector and ensures that the item is unique before adding it to the index. If the item is not unique, it updates the existing item in the index instead of adding a new one.\"\"\"\n        pass\n\n    /**\n     * Returns true if the index exists.\n     */\n    public async isIndexCreated(): Promise<boolean> {\n        \"\"\"This code checks if an index file exists in a specific folder. It uses the `fs` module to check for the existence of the file and returns a boolean value indicating whether the file exists or not.\"\"\"\n        pass\n\n    /**\n     * Returns all items in the index.\n     * @remarks\n     * This method loads the index into memory and returns all its items. A copy of the items\n     * array is returned so no modifications should be made to the array.\n     * @returns All items in the index\n     */\n    public async listItems<TMetadata = Record<string,MetadataTypes>>(): Promise<IndexItem<TMetadata>[]> {\n        \"\"\"This code fetches a list of items from a specific folder and returns it as an array.\"\"\"\n        pass\n\n    /**\n     * Returns all items in the index matching the filter.\n     * @remarks\n     * This method loads the index into memory and returns all its items matching the filter.\n     * @param filter Filter to apply\n     * @returns Items matching the filter\n     */\n    public async listItemsByMetadata<TMetadata = Record<string,MetadataTypes>>(filter: MetadataFilter): Promise<IndexItem<TMetadata>[]> {\n        \"\"\"This code defines a function called `listItemsByMetadata` that takes in a filter object and returns a list of items from an index file based on the filter criteria. The function uses an `ItemSelector` class to apply filters to metadata and select items that match the filter conditions.\"\"\"\n        pass\n\n    /**\n     * Finds the top k items in the index that are most similar to the vector.\n     * @remarks\n     * This method loads the index into memory and returns the top k items that are most similar.\n     * An optional filter can be applied to the metadata of the items.\n     * @param vector Vector to query against\n     * @param topK Number of items to return\n     * @param filter Optional filter to apply\n     * @returns Similar items to the vector that matches the filter\n     */\n    public async queryItems<TMetadata = Record<string,MetadataTypes>>(vector: number[], topK: number, filter?: MetadataFilter): Promise<QueryResult<TMetadata>[]> {\n        \"\"\"This code defines a function called `queryItems` that takes in a vector, top K, and filter parameters. It first checks if an index file exists in a specific folder and reads the contents of the file into memory. Then, it filters items based on the filter criteria, calculates distances between the query vector and each item's vector, sorts the distances in descending order, finds the top K items, and loads external metadata for each item.\"\"\"\n        pass\n\n    /**\n     * Adds or replaces an item in the index.\n     * @remarks\n     * A new update is started if one is not already in progress. If an item with the same ID\n     * already exists, it will be replaced.\n     * @param item Item to insert or replace\n     * @returns Upserted item\n     */\n    public async upsertItem<TMetadata = Record<string,MetadataTypes>>(item: Partial<IndexItem<TMetadata>>): Promise<IndexItem<TMetadata>> {\n        \"\"\"This code defines a method called `upsertItem` that adds an item to an index. It checks for the presence of a vector and ensures that the item is unique before adding it to the index. If the item is not unique, it updates the existing item in the index instead of adding a new one.\"\"\"\n        pass\n\n    /**\n     * Ensures that the index has been loaded into memory.\n     */\n    protected async loadIndexData(): Promise<void> {\n        \"\"\"This code checks if an index file exists in a specific folder and reads the contents of the file into memory.\"\"\"\n        pass\n\n    private async addItemToUpdate(item: Partial<IndexItem<any>>, unique: boolean): Promise<IndexItem> {\n        \"\"\"This code defines a method called `addItemToUpdate` that adds an item to an index. It checks for the presence of a vector and ensures that the item is unique before adding it to the index. If the item is not unique, it updates the existing item in the index instead of adding a new one.\"\"\"\n        pass\n}","documentation":"This code defines a class called `LocalIndex` that manages an index file on disk. It provides methods for creating, updating, and querying the index, as well as loading and saving the index to disk."}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#beginUpdate().","attributes":{"range":[56,4,63,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#beginUpdate().","content":"public async beginUpdate(): Promise<void> {\n        if (this._update) {\n            throw new Error('Update already in progress');\n        }\n\n        await this.loadIndexData();\n        this._update = Object.assign({}, this._data);\n    }","file":"/src/LocalIndex.ts","language":"typescript","fileHash":"cdd0d6e03ff4f40008666df83b2383fcb027ad1c8814421f1bb00ed457d81ec2","hash":"27422b8d4356da6ef52bac17d34a400a6016ba5a72a6d9df539ad10462c0c3a9","processedContent":"public async beginUpdate(): Promise<void> {\n        if (this._update) { #undefined\n            throw new Error('Update already in progress');\n        }\n\n        await this.loadIndexData(); #This code checks if an index file exists in a specific folder and reads the contents of the file into memory.\n        this._update = Object.assign({}, this._data);\n        \"\"\"\n        scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_update.: undefined\n        scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_data.: undefined\n        \"\"\"\n    }","documentation":"This code checks if an index file exists in a specific folder and reads the contents of the file into memory. It then creates a copy of the data in memory to use for updates."}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#cancelUpdate().","attributes":{"range":[70,4,72,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#cancelUpdate().","content":"public cancelUpdate(): void {\n        this._update = undefined;\n    }","file":"/src/LocalIndex.ts","language":"typescript","fileHash":"cdd0d6e03ff4f40008666df83b2383fcb027ad1c8814421f1bb00ed457d81ec2","hash":"5e038e4a29eb56740959ebe5eef310378fa3052d9aa30dfdee406d8e8ffc3201","processedContent":"public cancelUpdate(): void {\n        this._update = undefined; #undefined\n    }","documentation":"This code sets the value of a variable called `_update` to `undefined`."}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#createIndex().","attributes":{"range":[80,4,106,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#createIndex().","content":"public async createIndex(config: CreateIndexConfig = {version: 1}): Promise<void> {\n        // Delete if exists\n        if (await this.isIndexCreated()) {\n            if (config.deleteIfExists) {\n                await this.deleteIndex();\n            } else {\n                throw new Error('Index already exists');\n            }\n        }\n\n        try {\n            // Create folder for index\n            await fs.mkdir(this._folderPath, { recursive: true });\n\n            // Initialize index.json file\n            this._data = {\n                version: config.version,\n                metadata_config: config.metadata_config ?? {},\n                items: []\n            };\n\n            await fs.writeFile(path.join(this._folderPath, this._indexName), JSON.stringify(this._data));\n        } catch (err: unknown) {\n            await this.deleteIndex();\n            throw new Error('Error creating index');\n        }\n    }","file":"/src/LocalIndex.ts","language":"typescript","fileHash":"cdd0d6e03ff4f40008666df83b2383fcb027ad1c8814421f1bb00ed457d81ec2","hash":"fb488a50110f379bb24a3aa975feaf692db47aaeb8f759a38528e04f5073bb82","processedContent":"public async createIndex(config: CreateIndexConfig = {version: 1}): Promise<void> {\n        // Delete if exists\n        if (await this.isIndexCreated()) { #This code checks if an index file exists in a specific folder. It uses the `fs` module to check for the existence of the file and returns a boolean value indicating whether the file exists or not.\n            if (config.deleteIfExists) { #undefined\n                await this.deleteIndex(); #This code deletes a folder and its contents recursively, with a maximum of 3 retries.\n            } else {\n                throw new Error('Index already exists');\n            }\n        }\n\n        try {\n            // Create folder for index\n            await fs.mkdir(this._folderPath, { recursive: true });\n            \"\"\"\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/mkdir().: undefined\n            scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_folderPath.: undefined\n            \"\"\"\n\n            // Initialize index.json file\n            this._data = { #undefined\n                version: config.version, #undefined\n                metadata_config: config.metadata_config ?? {}, #undefined\n                items: []\n            };\n\n            await fs.writeFile(path.join(this._folderPath, this._indexName), JSON.stringify(this._data));\n            \"\"\"\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/: undefined\n            scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_folderPath.: undefined\n            scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_data.: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/writeFile().: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#join().: undefined\n            scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_indexName.: undefined\n            \"\"\"\n        } catch (err: unknown) {\n            await this.deleteIndex();\n            throw new Error('Error creating index');\n        }\n    }","documentation":"This code creates an index file in a specific folder, deleting it first if it already exists. It initializes the index with metadata and version information, and writes it to disk."}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#deleteIndex().","attributes":{"range":[113,4,119,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#deleteIndex().","content":"public deleteIndex(): Promise<void> {\n        this._data = undefined;\n        return fs.rm(this._folderPath, {\n            recursive: true,\n            maxRetries: 3\n        });\n    }","file":"/src/LocalIndex.ts","language":"typescript","fileHash":"cdd0d6e03ff4f40008666df83b2383fcb027ad1c8814421f1bb00ed457d81ec2","hash":"48d4654312233bfa89d453f9ab7d606ee0e71edc4db38c44f17e0d47b0c7207b","processedContent":"public deleteIndex(): Promise<void> {\n        this._data = undefined; #undefined\n        return fs.rm(this._folderPath, {\n        \"\"\"\n        scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/: undefined\n        scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/rm().: undefined\n        scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_folderPath.: undefined\n        \"\"\"\n            recursive: true,\n            maxRetries: 3\n        });\n    }","documentation":"This code deletes a folder and its contents recursively, with a maximum of 3 retries."}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#deleteItem().","attributes":{"range":[125,4,139,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#deleteItem().","content":"public async deleteItem(id: string): Promise<void> {\n        if (this._update) {\n            const index = this._update.items.findIndex(i => i.id === id);\n            if (index >= 0) {\n                this._update.items.splice(index, 1);\n            }\n        } else {\n            await this.beginUpdate();\n            const index = this._update!.items.findIndex(i => i.id === id);\n            if (index >= 0) {\n                this._update!.items.splice(index, 1);\n            }\n            await this.endUpdate();\n        }\n    }","file":"/src/LocalIndex.ts","language":"typescript","fileHash":"cdd0d6e03ff4f40008666df83b2383fcb027ad1c8814421f1bb00ed457d81ec2","hash":"af14c55010cf892eac3d855ba48c9237d90769e5a0b5cf2499a672e21975466f","processedContent":"public async deleteItem(id: string): Promise<void> {\n        if (this._update) { #undefined\n            const index = this._update.items.findIndex(i => i.id === id);\n            \"\"\"\n            scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_update.: undefined\n            scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#items.: undefined\n            \"\"\"\n            if (index >= 0) {\n                this._update.items.splice(index, 1);\n                \"\"\"\n                scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_update.: undefined\n                scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#items.: undefined\n                \"\"\"\n            }\n        } else {\n            await this.beginUpdate(); #This code checks if an index file exists in a specific folder and reads the contents of the file into memory. It then creates a copy of the data in memory to use for updates.\n            const index = this._update!.items.findIndex(i => i.id === id);\n            \"\"\"\n            scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_update.: undefined\n            scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#items.: undefined\n            \"\"\"\n            if (index >= 0) {\n                this._update!.items.splice(index, 1);\n                \"\"\"\n                scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_update.: undefined\n                scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#items.: undefined\n                \"\"\"\n            }\n            await this.endUpdate(); #This code is a method that saves the current state of an index to disk. It first checks if there is an update in progress, and then it writes the update to a file using the `fs` module. If there is an error while saving the file, it throws a new error with the error message.\n        }\n    }","documentation":"This code is a method that deletes an item from an index file. It first checks if there is an update in progress, and then it finds the index of the item to be deleted in the update data. If the item is found, it is removed from the update data and saved to disk."}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#endUpdate().","attributes":{"range":[146,4,159,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#endUpdate().","content":"public async endUpdate(): Promise<void> {\n        if (!this._update) {\n            throw new Error('No update in progress');\n        }\n\n        try {\n            // Save index\n            await fs.writeFile(path.join(this._folderPath, this._indexName), JSON.stringify(this._update));\n            this._data = this._update;\n            this._update = undefined;\n        } catch(err: unknown) {\n            throw new Error(`Error saving index: ${(err as any).toString()}`);\n        }\n    }","file":"/src/LocalIndex.ts","language":"typescript","fileHash":"cdd0d6e03ff4f40008666df83b2383fcb027ad1c8814421f1bb00ed457d81ec2","hash":"431025aec768193bcc47d7d48790c76046547c795af0417c0f2235bea5ccfc6d","processedContent":"public async endUpdate(): Promise<void> {\n        if (!this._update) { #undefined\n            throw new Error('No update in progress');\n        }\n\n        try {\n            // Save index\n            await fs.writeFile(path.join(this._folderPath, this._indexName), JSON.stringify(this._update));\n            \"\"\"\n            scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_update.: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/writeFile().: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#join().: undefined\n            scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_folderPath.: undefined\n            scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_indexName.: undefined\n            \"\"\"\n            this._data = this._update;\n            \"\"\"\n            scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_update.: undefined\n            scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_data.: undefined\n            \"\"\"\n            this._update = undefined; #undefined\n        } catch(err: unknown) {\n            throw new Error(`Error saving index: ${(err as any).toString()}`);\n        }\n    }","documentation":"This code is a method that saves the current state of an index to disk. It first checks if there is an update in progress, and then it writes the update to a file using the `fs` module. If there is an error while saving the file, it throws a new error with the error message."}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#getIndexStats().","attributes":{"range":[165,4,172,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#getIndexStats().","content":"public async getIndexStats(): Promise<IndexStats> {\n        await this.loadIndexData();\n        return {\n            version: this._data!.version,\n            metadata_config: this._data!.metadata_config,\n            items: this._data!.items.length\n        };\n    }","file":"/src/LocalIndex.ts","language":"typescript","fileHash":"cdd0d6e03ff4f40008666df83b2383fcb027ad1c8814421f1bb00ed457d81ec2","hash":"c1c60683c97e8de5eb54ae9a33268d234d2d992971e41cd43678933046706ec0","processedContent":"public async getIndexStats(): Promise<IndexStats> {\n        await this.loadIndexData(); #This code checks if an index file exists in a specific folder and reads the contents of the file into memory.\n        return {\n            version: this._data!.version,\n            \"\"\"\n            scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_data.: undefined\n            scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#version.: undefined\n            \"\"\"\n            metadata_config: this._data!.metadata_config,\n            \"\"\"\n            scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_data.: undefined\n            scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#metadata_config.: undefined\n            \"\"\"\n            items: this._data!.items.length\n            \"\"\"\n            scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_data.: undefined\n            scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#items.: undefined\n            \"\"\"\n        };\n    }","documentation":"This code retrieves the index statistics for a specific folder, including the version number, metadata configuration, and the number of items in the index."}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#getItem().","attributes":{"range":[179,4,182,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#getItem().","content":"public async getItem<TMetadata = Record<string,MetadataTypes>>(id: string): Promise<IndexItem<TMetadata> | undefined> {\n        await this.loadIndexData();\n        return this._data!.items.find(i => i.id === id) as any | undefined;\n    }","file":"/src/LocalIndex.ts","language":"typescript","fileHash":"cdd0d6e03ff4f40008666df83b2383fcb027ad1c8814421f1bb00ed457d81ec2","hash":"f1323ee93cf95f9119b39ed4e7265617f8136a7edc91a6a20abd6a516114d4d4","processedContent":"public async getItem<TMetadata = Record<string,MetadataTypes>>(id: string): Promise<IndexItem<TMetadata> | undefined> {\n        await this.loadIndexData(); #This code checks if an index file exists in a specific folder and reads the contents of the file into memory.\n        return this._data!.items.find(i => i.id === id) as any | undefined;\n        \"\"\"\n        scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_data.: undefined\n        scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#items.: undefined\n        \"\"\"\n    }","documentation":"This code checks if an index file exists in a specific folder and reads the contents of the file into memory. It then returns the item with the specified ID from the loaded data, or undefined if it doesn't exist."}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#insertItem().","attributes":{"range":[192,4,201,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#insertItem().","content":"public async insertItem<TMetadata = Record<string,MetadataTypes>>(item: Partial<IndexItem<TMetadata>>): Promise<IndexItem<TMetadata>> {\n        if (this._update) {\n            return await this.addItemToUpdate(item, true) as any;\n        } else {\n            await this.beginUpdate();\n            const newItem = await this.addItemToUpdate(item, true);\n            await this.endUpdate();\n            return newItem as any;\n        }\n    }","file":"/src/LocalIndex.ts","language":"typescript","fileHash":"cdd0d6e03ff4f40008666df83b2383fcb027ad1c8814421f1bb00ed457d81ec2","hash":"bd5584dde47cd6a1473c09e34059de9c703a0e8938a08b3da37807dc06eadecf","processedContent":"public async insertItem<TMetadata = Record<string,MetadataTypes>>(item: Partial<IndexItem<TMetadata>>): Promise<IndexItem<TMetadata>> {\n        if (this._update) { #undefined\n            return await this.addItemToUpdate(item, true) as any; #This code defines a method called `addItemToUpdate` that adds an item to an index. It checks for the presence of a vector and ensures that the item is unique before adding it to the index. If the item is not unique, it updates the existing item in the index instead of adding a new one.\n        } else {\n            await this.beginUpdate(); #This code checks if an index file exists in a specific folder and reads the contents of the file into memory. It then creates a copy of the data in memory to use for updates.\n            const newItem = await this.addItemToUpdate(item, true); #This code defines a method called `addItemToUpdate` that adds an item to an index. It checks for the presence of a vector and ensures that the item is unique before adding it to the index. If the item is not unique, it updates the existing item in the index instead of adding a new one.\n            await this.endUpdate(); #This code is a method that saves the current state of an index to disk. It first checks if there is an update in progress, and then it writes the update to a file using the `fs` module. If there is an error while saving the file, it throws a new error with the error message.\n            return newItem as any;\n        }\n    }","documentation":"This code defines a method called `insertItem` that adds an item to an index. It checks for the presence of a vector and ensures that the item is unique before adding it to the index. If the item is not unique, it updates the existing item in the index instead of adding a new one."}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#isIndexCreated().","attributes":{"range":[206,4,213,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#isIndexCreated().","content":"public async isIndexCreated(): Promise<boolean> {\n        try {\n            await fs.access(path.join(this._folderPath, this.indexName));\n            return true;\n        } catch (err: unknown) {\n            return false;\n        }\n    }","file":"/src/LocalIndex.ts","language":"typescript","fileHash":"cdd0d6e03ff4f40008666df83b2383fcb027ad1c8814421f1bb00ed457d81ec2","hash":"b3764e600241007a6d012fef60ca74f363c93fe8974697c7a07f30fab48f1923","processedContent":"public async isIndexCreated(): Promise<boolean> {\n        try {\n            await fs.access(path.join(this._folderPath, this.indexName));\n            \"\"\"\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/access().: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#join().: undefined\n            scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_folderPath.: undefined\n            scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#`<get>indexName`().: undefined\n            \"\"\"\n            return true;\n        } catch (err: unknown) {\n            return false;\n        }\n    }","documentation":"This code checks if an index file exists in a specific folder. It uses the `fs` module to check for the existence of the file and returns a boolean value indicating whether the file exists or not."}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#listItems().","attributes":{"range":[222,4,225,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#listItems().","content":"public async listItems<TMetadata = Record<string,MetadataTypes>>(): Promise<IndexItem<TMetadata>[]> {\n        await this.loadIndexData();\n        return this._data!.items.slice() as any;\n    }","file":"/src/LocalIndex.ts","language":"typescript","fileHash":"cdd0d6e03ff4f40008666df83b2383fcb027ad1c8814421f1bb00ed457d81ec2","hash":"881e17f4b01e7b82875627e728ff7a1603976cd9e2d5fbacc312f0fe622e12b0","processedContent":"public async listItems<TMetadata = Record<string,MetadataTypes>>(): Promise<IndexItem<TMetadata>[]> {\n        await this.loadIndexData(); #This code checks if an index file exists in a specific folder and reads the contents of the file into memory.\n        return this._data!.items.slice() as any;\n        \"\"\"\n        scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_data.: undefined\n        scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#items.: undefined\n        \"\"\"\n    }","documentation":"This code fetches a list of items from a specific folder and returns it as an array."}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#listItemsByMetadata().","attributes":{"range":[234,4,237,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#listItemsByMetadata().","content":"public async listItemsByMetadata<TMetadata = Record<string,MetadataTypes>>(filter: MetadataFilter): Promise<IndexItem<TMetadata>[]> {\n        await this.loadIndexData();\n        return this._data!.items.filter(i => ItemSelector.select(i.metadata, filter)) as any;\n    }","file":"/src/LocalIndex.ts","language":"typescript","fileHash":"cdd0d6e03ff4f40008666df83b2383fcb027ad1c8814421f1bb00ed457d81ec2","hash":"95d2960a2e76fff2a8954a540603e2c8abb42e277dec9a1551f65c76ea9a117a","processedContent":"public async listItemsByMetadata<TMetadata = Record<string,MetadataTypes>>(filter: MetadataFilter): Promise<IndexItem<TMetadata>[]> {\n        await this.loadIndexData(); #This code checks if an index file exists in a specific folder and reads the contents of the file into memory.\n        return this._data!.items.filter(i => ItemSelector.select(i.metadata, filter)) as any;\n        \"\"\"\n        scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_data.: undefined\n        scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#items.: undefined\n        scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#: The code defines a class called ItemSelector that provides methods for calculating similarities between vectors, normalizing vectors, and applying filters to metadata.\n        scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#select().: This code defines a filter function that takes in a value and a filter object, and returns true if the value matches the filter criteria. The filter criteria can include basic comparisons like equality, inequality, greater than, less than, etc., as well as more complex conditions like \"in\" or \"not in\" a list of values.\n        \"\"\"\n    }","documentation":"This code defines a function called `listItemsByMetadata` that takes in a filter object and returns a list of items from an index file based on the filter criteria. The function uses an `ItemSelector` class to apply filters to metadata and select items that match the filter conditions."}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#queryItems().","attributes":{"range":[249,4,288,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#queryItems().","content":"public async queryItems<TMetadata = Record<string,MetadataTypes>>(vector: number[], topK: number, filter?: MetadataFilter): Promise<QueryResult<TMetadata>[]> {\n        await this.loadIndexData();\n\n        // Filter items\n        let items = this._data!.items;\n        if (filter) {\n            items = items.filter(i => ItemSelector.select(i.metadata, filter));\n        }\n\n        // Calculate distances\n        const norm = ItemSelector.normalize(vector);\n        const distances: { index: number, distance: number }[] = [];\n        for (let i = 0; i < items.length; i++) {\n            const item = items[i];\n            const distance = ItemSelector.normalizedCosineSimilarity(vector, norm, item.vector, item.norm);\n            distances.push({ index: i, distance: distance });\n        }\n\n        // Sort by distance DESCENDING\n        distances.sort((a, b) => b.distance - a.distance);\n\n        // Find top k\n        const top: QueryResult<TMetadata>[] = distances.slice(0, topK).map(d => {\n            return {\n                item: Object.assign({}, items[d.index]) as any,\n                score: d.distance\n            };\n        });\n\n        // Load external metadata\n        for (const item of top) {\n            if (item.item.metadataFile) {\n                const metadataPath = path.join(this._folderPath, item.item.metadataFile);\n                const metadata = await fs.readFile(metadataPath);\n                item.item.metadata = JSON.parse(metadata.toString());\n            }\n        }\n\n        return top;\n    }","file":"/src/LocalIndex.ts","language":"typescript","fileHash":"cdd0d6e03ff4f40008666df83b2383fcb027ad1c8814421f1bb00ed457d81ec2","hash":"60d6d3caeeebe32a4ac0780f64a826c81bfe8dda6e091a8d070fb2766e0c2417","processedContent":"public async queryItems<TMetadata = Record<string,MetadataTypes>>(vector: number[], topK: number, filter?: MetadataFilter): Promise<QueryResult<TMetadata>[]> {\n        await this.loadIndexData(); #This code checks if an index file exists in a specific folder and reads the contents of the file into memory.\n\n        // Filter items\n        let items = this._data!.items;\n        \"\"\"\n        scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_data.: undefined\n        scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#items.: undefined\n        \"\"\"\n        if (filter) {\n            items = items.filter(i => ItemSelector.select(i.metadata, filter));\n            \"\"\"\n            scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#: The code defines a class called ItemSelector that provides methods for calculating similarities between vectors, normalizing vectors, and applying filters to metadata.\n            scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#select().: This code defines a filter function that takes in a value and a filter object, and returns true if the value matches the filter criteria. The filter criteria can include basic comparisons like equality, inequality, greater than, less than, etc., as well as more complex conditions like \"in\" or \"not in\" a list of values.\n            \"\"\"\n        }\n\n        // Calculate distances\n        const norm = ItemSelector.normalize(vector);\n        \"\"\"\n        scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#: The code defines a class called ItemSelector that provides methods for calculating similarities between vectors, normalizing vectors, and applying filters to metadata.\n        scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#normalize().: This code normalizes a vector by calculating the square root of the sum of the squares of its elements.\n        \"\"\"\n        const distances: { index: number, distance: number }[] = [];\n        for (let i = 0; i < items.length; i++) {\n            const item = items[i];\n            const distance = ItemSelector.normalizedCosineSimilarity(vector, norm, item.vector, item.norm);\n            \"\"\"\n            scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#: The code defines a class called ItemSelector that provides methods for calculating similarities between vectors, normalizing vectors, and applying filters to metadata.\n            scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#normalizedCosineSimilarity().: This code calculates the cosine similarity between two vectors by dividing their dot product by the product of their norms.\n            \"\"\"\n            distances.push({ index: i, distance: distance });\n        }\n\n        // Sort by distance DESCENDING\n        distances.sort((a, b) => b.distance - a.distance);\n\n        // Find top k\n        const top: QueryResult<TMetadata>[] = distances.slice(0, topK).map(d => {\n        \"\"\"\n        scip-typescript npm vectra 0.5.5 src/`types.ts`/QueryResult#: This code defines an interface for a query result, which includes an item (an index item with ID, metadata, vector, and other properties), a score (a number representing the relevance of the item to the query).\n        scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#queryItems().[TMetadata]: undefined\n        \"\"\"\n            return {\n                item: Object.assign({}, items[d.index]) as any,\n                score: d.distance\n            };\n        });\n\n        // Load external metadata\n        for (const item of top) {\n            if (item.item.metadataFile) {\n                const metadataPath = path.join(this._folderPath, item.item.metadataFile);\n                \"\"\"\n                scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#: undefined\n                scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#join().: undefined\n                scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_folderPath.: undefined\n                \"\"\"\n                const metadata = await fs.readFile(metadataPath);\n                \"\"\"\n                scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/: undefined\n                scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/readFile().: undefined\n                \"\"\"\n                item.item.metadata = JSON.parse(metadata.toString());\n            }\n        }\n\n        return top;\n    }","documentation":"This code defines a function called `queryItems` that takes in a vector, top K, and filter parameters. It first checks if an index file exists in a specific folder and reads the contents of the file into memory. Then, it filters items based on the filter criteria, calculates distances between the query vector and each item's vector, sorts the distances in descending order, finds the top K items, and loads external metadata for each item."}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#upsertItem().","attributes":{"range":[298,4,307,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#upsertItem().","content":"public async upsertItem<TMetadata = Record<string,MetadataTypes>>(item: Partial<IndexItem<TMetadata>>): Promise<IndexItem<TMetadata>> {\n        if (this._update) {\n            return await this.addItemToUpdate(item, false) as any;\n        } else {\n            await this.beginUpdate();\n            const newItem = await this.addItemToUpdate(item, false);\n            await this.endUpdate();\n            return newItem as any;\n        }\n    }","file":"/src/LocalIndex.ts","language":"typescript","fileHash":"cdd0d6e03ff4f40008666df83b2383fcb027ad1c8814421f1bb00ed457d81ec2","hash":"1ad5b6f87a6e2be7d5b5e72deeb8fc3c9151cd741cc01a3b09623c763c083533","processedContent":"public async upsertItem<TMetadata = Record<string,MetadataTypes>>(item: Partial<IndexItem<TMetadata>>): Promise<IndexItem<TMetadata>> {\n        if (this._update) { #undefined\n            return await this.addItemToUpdate(item, false) as any; #This code defines a method called `addItemToUpdate` that adds an item to an index. It checks for the presence of a vector and ensures that the item is unique before adding it to the index. If the item is not unique, it updates the existing item in the index instead of adding a new one.\n        } else {\n            await this.beginUpdate(); #This code checks if an index file exists in a specific folder and reads the contents of the file into memory. It then creates a copy of the data in memory to use for updates.\n            const newItem = await this.addItemToUpdate(item, false); #This code defines a method called `addItemToUpdate` that adds an item to an index. It checks for the presence of a vector and ensures that the item is unique before adding it to the index. If the item is not unique, it updates the existing item in the index instead of adding a new one.\n            await this.endUpdate(); #This code is a method that saves the current state of an index to disk. It first checks if there is an update in progress, and then it writes the update to a file using the `fs` module. If there is an error while saving the file, it throws a new error with the error message.\n            return newItem as any;\n        }\n    }","documentation":"This code defines a method called `upsertItem` that adds an item to an index. It checks for the presence of a vector and ensures that the item is unique before adding it to the index. If the item is not unique, it updates the existing item in the index instead of adding a new one."}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#loadIndexData().","attributes":{"range":[312,4,323,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#loadIndexData().","content":"protected async loadIndexData(): Promise<void> {\n        if (this._data) {\n            return;\n        }\n\n        if (!await this.isIndexCreated()) {\n            throw new Error('Index does not exist');\n        }\n\n        const data = await fs.readFile(path.join(this._folderPath, this.indexName));\n        this._data = JSON.parse(data.toString());\n    }","file":"/src/LocalIndex.ts","language":"typescript","fileHash":"cdd0d6e03ff4f40008666df83b2383fcb027ad1c8814421f1bb00ed457d81ec2","hash":"e7d5159b2c40715adc84475ff14ef53194f43bd36f54899407b6513da184d570","processedContent":"protected async loadIndexData(): Promise<void> {\n        if (this._data) { #undefined\n            return;\n        }\n\n        if (!await this.isIndexCreated()) { #This code checks if an index file exists in a specific folder. It uses the `fs` module to check for the existence of the file and returns a boolean value indicating whether the file exists or not.\n            throw new Error('Index does not exist');\n        }\n\n        const data = await fs.readFile(path.join(this._folderPath, this.indexName));\n        \"\"\"\n        scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/: undefined\n        scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/readFile().: undefined\n        scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#: undefined\n        scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#join().: undefined\n        scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_folderPath.: undefined\n        scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#`<get>indexName`().: undefined\n        \"\"\"\n        this._data = JSON.parse(data.toString()); #undefined\n    }","documentation":"This code checks if an index file exists in a specific folder and reads the contents of the file into memory."}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#addItemToUpdate().","attributes":{"range":[325,4,386,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#addItemToUpdate().","content":"private async addItemToUpdate(item: Partial<IndexItem<any>>, unique: boolean): Promise<IndexItem> {\n        // Ensure vector is provided\n        if (!item.vector) {\n            throw new Error('Vector is required');\n        }\n\n        // Ensure unique\n        const id = item.id ?? v4();\n        if (unique) {\n            const existing = this._update!.items.find(i => i.id === id);\n            if (existing) {\n                throw new Error(`Item with id ${id} already exists`);\n            }\n        }\n\n        // Check for indexed metadata\n        let metadata: Record<string,any> = {};\n        let metadataFile: string | undefined;\n        if (this._update!.metadata_config.indexed && this._update!.metadata_config.indexed.length > 0 && item.metadata) {\n            // Copy only indexed metadata\n            for (const key of this._update!.metadata_config.indexed) {\n                if (item.metadata && item.metadata[key]) {\n                    metadata[key] = item.metadata[key];\n                }\n            }\n\n            // Save remaining metadata to disk\n            metadataFile = `${v4}.json`;\n            const metadataPath = path.join(this._folderPath, metadataFile);\n            await fs.writeFile(metadataPath, JSON.stringify(item.metadata));\n        } else if (item.metadata) {\n            metadata = item.metadata;\n        }\n\n        // Create new item\n        const newItem: IndexItem = {\n            id: id,\n            metadata: metadata,\n            vector: item.vector,\n            norm: ItemSelector.normalize(item.vector)\n        };\n        if (metadataFile) {\n            newItem.metadataFile = metadataFile;\n        }\n\n        // Add item to index\n        if (!unique) {\n            const existing = this._update!.items.find(i => i.id === id);\n            if (existing) {\n                existing.metadata = newItem.metadata;\n                existing.vector = newItem.vector;\n                existing.metadataFile = newItem.metadataFile;\n                return existing;\n            } else {\n                this._update!.items.push(newItem);\n                return newItem;\n            }\n        } else {\n            this._update!.items.push(newItem);\n            return newItem;\n        }\n    }","file":"/src/LocalIndex.ts","language":"typescript","fileHash":"cdd0d6e03ff4f40008666df83b2383fcb027ad1c8814421f1bb00ed457d81ec2","hash":"36a9d8ffdfbb10b06be424171467b1d257151e43614a88fc93f738e611f4812b","processedContent":"private async addItemToUpdate(item: Partial<IndexItem<any>>, unique: boolean): Promise<IndexItem> {\n        // Ensure vector is provided\n        if (!item.vector) {\n            throw new Error('Vector is required');\n        }\n\n        // Ensure unique\n        const id = item.id ?? v4(); #undefined\n        if (unique) {\n            const existing = this._update!.items.find(i => i.id === id);\n            \"\"\"\n            scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_update.: undefined\n            scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#items.: undefined\n            \"\"\"\n            \"\"\"\n            scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_update.: undefined\n            scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#items.: undefined\n            \"\"\"\n            if (existing) {\n                throw new Error(`Item with id ${id} already exists`);\n            }\n        }\n\n        // Check for indexed metadata\n        let metadata: Record<string,any> = {};\n        let metadataFile: string | undefined;\n        if (this._update!.metadata_config.indexed && this._update!.metadata_config.indexed.length > 0 && item.metadata) {\n        \"\"\"\n        scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_update.: undefined\n        scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_update.: undefined\n        scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#metadata_config.: undefined\n        scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#metadata_config.: undefined\n        scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#metadata_config.typeLiteral103:indexed.: undefined\n        scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#metadata_config.typeLiteral103:indexed.: undefined\n        \"\"\"\n            // Copy only indexed metadata\n            for (const key of this._update!.metadata_config.indexed) {\n            \"\"\"\n            scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_update.: undefined\n            scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#metadata_config.: undefined\n            scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#metadata_config.typeLiteral103:indexed.: undefined\n            \"\"\"\n                if (item.metadata && item.metadata[key]) {\n                    metadata[key] = item.metadata[key];\n                }\n            }\n\n            // Save remaining metadata to disk\n            metadataFile = `${v4}.json`; #undefined\n            const metadataPath = path.join(this._folderPath, metadataFile);\n            \"\"\"\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#join().: undefined\n            scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_folderPath.: undefined\n            \"\"\"\n            await fs.writeFile(metadataPath, JSON.stringify(item.metadata));\n            \"\"\"\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/writeFile().: undefined\n            \"\"\"\n        } else if (item.metadata) {\n            metadata = item.metadata;\n        }\n\n        // Create new item\n        const newItem: IndexItem = { #This code defines an interface for an index item, which includes an ID, metadata, a vector, and other properties. The metadata can be of any type, but it is optional.\n            id: id,\n            metadata: metadata,\n            vector: item.vector,\n            norm: ItemSelector.normalize(item.vector)\n            \"\"\"\n            scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#: The code defines a class called ItemSelector that provides methods for calculating similarities between vectors, normalizing vectors, and applying filters to metadata.\n            scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#normalize().: This code normalizes a vector by calculating the square root of the sum of the squares of its elements.\n            \"\"\"\n        };\n        if (metadataFile) {\n            newItem.metadataFile = metadataFile; #undefined\n        }\n\n        // Add item to index\n        if (!unique) {\n            const existing = this._update!.items.find(i => i.id === id);\n            if (existing) {\n                existing.metadata = newItem.metadata; #undefined\n                existing.vector = newItem.vector; #undefined\n                existing.metadataFile = newItem.metadataFile; #undefined\n                return existing;\n            } else {\n                this._update!.items.push(newItem);\n                \"\"\"\n                scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_update.: undefined\n                scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#items.: undefined\n                \"\"\"\n            \"\"\"\n            scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_update.: undefined\n            scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#items.: undefined\n            \"\"\"\n                return newItem;\n            }\n        } else {\n            this._update!.items.push(newItem);\n            return newItem;\n        }\n    }","documentation":"This code defines a method called `addItemToUpdate` that adds an item to an index. It checks for the presence of a vector and ensures that the item is unique before adding it to the index. If the item is not unique, it updates the existing item in the index instead of adding a new one."}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#","attributes":{"range":[389,0,395,1],"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#","content":"interface IndexData {\n    version: number;\n    metadata_config: {\n        indexed?: string[];\n    };\n    items: IndexItem[];\n}","file":"/src/LocalIndex.ts","language":"typescript","fileHash":"cdd0d6e03ff4f40008666df83b2383fcb027ad1c8814421f1bb00ed457d81ec2","hash":"13785d8139631603a9c9db805ee25bf3fe4c8e3f84614deda68d14219402e34d","processedContent":"interface IndexData {\n    version: number;\n    metadata_config: {\n        indexed?: string[];\n    };\n    items: IndexItem[]; #This code defines an interface for an index item, which includes an ID, metadata, a vector, and other properties. The metadata can be of any type, but it is optional.\n}","documentation":"This code defines an interface for an index item, which includes an ID, metadata, a vector, and other properties. The metadata can be of any type, but it is optional."}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path.","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path.","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/","language":"typescript"}},{"key":"scip-typescript npm @types/uuid 9.0.7 `index.d.ts`/v4.","attributes":{"symbol":"scip-typescript npm @types/uuid 9.0.7 `index.d.ts`/v4.","language":"typescript"}},{"key":"scip-typescript npm @types/uuid 9.0.7 `index.d.ts`/","attributes":{"symbol":"scip-typescript npm @types/uuid 9.0.7 `index.d.ts`/","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_folderPath.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_folderPath.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_indexName.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_indexName.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_update.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_update.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_data.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_data.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/CreateIndexConfig#deleteIfExists.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/CreateIndexConfig#deleteIfExists.","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/mkdir().","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/mkdir().","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/CreateIndexConfig#version.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/CreateIndexConfig#version.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/CreateIndexConfig#metadata_config.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/CreateIndexConfig#metadata_config.","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/writeFile().","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/writeFile().","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#join().","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#join().","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/rm().","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/rm().","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#items.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#items.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#version.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#version.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#metadata_config.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#metadata_config.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#getItem().[TMetadata]","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#getItem().[TMetadata]","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#insertItem().[TMetadata]","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#insertItem().[TMetadata]","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/access().","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/access().","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#`<get>indexName`().","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#`<get>indexName`().","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#listItems().[TMetadata]","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#listItems().[TMetadata]","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#listItemsByMetadata().[TMetadata]","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#listItemsByMetadata().[TMetadata]","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#queryItems().[TMetadata]","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#queryItems().[TMetadata]","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/readFile().","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/readFile().","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#upsertItem().[TMetadata]","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#upsertItem().[TMetadata]","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#metadata_config.typeLiteral103:indexed.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#metadata_config.typeLiteral103:indexed.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`types.ts`/IndexItem#metadataFile.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`types.ts`/IndexItem#metadataFile.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`types.ts`/IndexItem#metadata.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`types.ts`/IndexItem#metadata.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`types.ts`/IndexItem#vector.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`types.ts`/IndexItem#vector.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/","attributes":{"range":[0,0,565,0],"symbol":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/","content":"import { GPT3Tokenizer } from \"./GPT3Tokenizer\";\nimport { TextChunk, Tokenizer } from \"./types\";\n\nconst ALPHANUMERIC_CHARS = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n\nexport interface TextSplitterConfig {\n    separators: string[];\n    keepSeparators: boolean;\n    chunkSize: number;\n    chunkOverlap: number;\n    tokenizer: Tokenizer;\n    docType?: string;\n}\n\nexport class TextSplitter {\n    private readonly _config: TextSplitterConfig;\n\n    public constructor(config?: Partial<TextSplitterConfig>) {\n        this._config = Object.assign({\n            keepSeparators: false,\n            chunkSize: 400,\n            chunkOverlap: 40,\n        } as TextSplitterConfig, config);\n\n        // Create a default tokenizer if none is provided\n        if (!this._config.tokenizer) {\n            this._config.tokenizer = new GPT3Tokenizer();\n        }\n\n        // Use default separators if none are provided\n        if (!this._config.separators || this._config.separators.length === 0) {\n            this._config.separators = this.getSeparators(this._config.docType);\n        }\n\n        // Validate the config settings\n        if (this._config.chunkSize < 1) {\n            throw new Error(\"chunkSize must be >= 1\");\n        } else if (this._config.chunkOverlap < 0) {\n            throw new Error(\"chunkOverlap must be >= 0\");\n        } else if (this._config.chunkOverlap > this._config.chunkSize) {\n            throw new Error(\"chunkOverlap must be <= chunkSize\");\n        }\n    }\n\n    public split(text: string): TextChunk[] {\n        // Get basic chunks\n        const chunks = this.recursiveSplit(text, this._config.separators, 0);\n\n        const that = this;\n        function getOverlapTokens(tokens?: number[]): number[] {\n            if (tokens != undefined) {\n                const len = tokens.length > that._config.chunkOverlap ? that._config.chunkOverlap : tokens.length;\n                return tokens.slice(0, len);\n            } else {\n                return [];\n            }\n        }\n\n        // Add overlap tokens and text to the start and end of each chunk\n        if (this._config.chunkOverlap > 0) {\n            for (let i = 1; i < chunks.length; i++) {\n                const previousChunk = chunks[i - 1];\n                const chunk = chunks[i];\n                const nextChunk = i < chunks.length - 1 ? chunks[i + 1] : undefined;\n                chunk.startOverlap = getOverlapTokens(previousChunk.tokens.reverse()).reverse();\n                chunk.endOverlap = getOverlapTokens(nextChunk?.tokens);\n            }\n        }\n\n        return chunks;\n    }\n\n    private recursiveSplit(text: string, separators: string[], startPos: number): TextChunk[] {\n        const chunks: TextChunk[] = [];\n        if (text.length > 0) {\n            // Split text into parts\n            let parts: string[];\n            let separator = '';\n            const nextSeparators = separators.length > 1 ? separators.slice(1) : [];\n            if (separators.length > 0) {\n                // Split by separator\n                separator = separators[0];\n                parts = separator == ' ' ? this.splitBySpaces(text) : text.split(separator);\n            } else {\n                // Cut text in half\n                const half = Math.floor(text.length / 2);\n                parts = [text.substring(0, half), text.substring(half)];\n            }\n\n            // Iterate over parts\n            for (let i = 0; i < parts.length; i++) {\n                const lastChunk = (i === parts.length - 1);\n\n                // Get chunk text and endPos\n                let chunk = parts[i];\n                const endPos = (startPos + (chunk.length - 1)) + (lastChunk ? 0 : separator.length);\n                if (this._config.keepSeparators && !lastChunk) {\n                    chunk += separator;\n                }\n\n                // Ensure chunk contains text\n                if (!this.containsAlphanumeric(chunk)) {\n                    continue;\n                }\n\n                // Optimization to avoid encoding really large chunks\n                if (chunk.length / 6 > this._config.chunkSize) {\n                    // Break the text into smaller chunks\n                    const subChunks = this.recursiveSplit(chunk, nextSeparators, startPos);\n                    chunks.push(...subChunks);\n                } else {\n                    // Encode chunk text\n                    const tokens = this._config.tokenizer.encode(chunk);\n                    if (tokens.length > this._config.chunkSize) {\n                        // Break the text into smaller chunks\n                        const subChunks = this.recursiveSplit(chunk, nextSeparators, startPos);\n                        chunks.push(...subChunks);\n                    } else {\n                        // Append chunk to output\n                        chunks.push({\n                            text: chunk,\n                            tokens: tokens,\n                            startPos: startPos,\n                            endPos: endPos,\n                            startOverlap: [],\n                            endOverlap: [],\n                        });\n                    }\n\n                }\n\n\n                // Update startPos\n                startPos = endPos + 1;\n            }\n        }\n\n        return this.combineChunks(chunks);\n    }\n\n    private combineChunks(chunks: TextChunk[]): TextChunk[] {\n        const combinedChunks: TextChunk[] = [];\n        let currentChunk: TextChunk|undefined;\n        let currentLength = 0;\n        const separator = this._config.keepSeparators ? '' : ' ';\n        for (let i = 0; i < chunks.length; i++) {\n            const chunk = chunks[i];\n            if (currentChunk) {\n                const length = currentChunk.tokens.length + chunk.tokens.length;\n                if (length > this._config.chunkSize) {\n                    combinedChunks.push(currentChunk);\n                    currentChunk = chunk;\n                    currentLength = chunk.tokens.length;\n                } else {\n                    currentChunk.text += separator + chunk.text;\n                    currentChunk.tokens.push(...chunk.tokens);\n                    currentLength += chunk.tokens.length;\n                }\n            } else {\n                currentChunk = chunk;\n                currentLength = chunk.tokens.length;\n            }\n        }\n        if (currentChunk) {\n            combinedChunks.push(currentChunk);\n        }\n        return combinedChunks;\n    }\n\n    private containsAlphanumeric(text: string): boolean {\n        for (let i = 0; i < text.length; i++) {\n            if (ALPHANUMERIC_CHARS.includes(text[i])) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private splitBySpaces(text: string): string[] {\n        const parts: string[] = [];\n        const words = text.split(' ');\n        if (words.length > 0) {\n            let part = words[0];\n            for (let i = 1; i < words.length; i++) {\n                const nextWord = words[i];\n                if (this._config.tokenizer.encode(part + ' ' + nextWord).length <= this._config.chunkSize) {\n                    part += ' ' + nextWord;\n                } else {\n                    parts.push(part);\n                    part = nextWord;\n                }\n            }\n            parts.push(part);\n        } else {\n            parts.push(text);\n        }\n\n        return parts;\n    }\n\n    private getSeparators(docType?: string): string[] {\n        switch (docType ?? '') {\n            case \"cpp\":\n                return [\n                    // Split along class definitions\n                    \"\\nclass \",\n                    // Split along function definitions\n                    \"\\nvoid \",\n                    \"\\nint \",\n                    \"\\nfloat \",\n                    \"\\ndouble \",\n                    // Split along control flow statements\n                    \"\\nif \",\n                    \"\\nfor \",\n                    \"\\nwhile \",\n                    \"\\nswitch \",\n                    \"\\ncase \",\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"go\":\n                return [\n                    // Split along function definitions\n                    \"\\nfunc \",\n                    \"\\nvar \",\n                    \"\\nconst \",\n                    \"\\ntype \",\n                    // Split along control flow statements\n                    \"\\nif \",\n                    \"\\nfor \",\n                    \"\\nswitch \",\n                    \"\\ncase \",\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"java\":\n            case \"c#\":\n            case \"csharp\":\n            case \"cs\":\n            case \"ts\":\n            case \"tsx\":\n            case \"typescript\":\n                return [\n                    // split along regions\n                    \"// LLM-REGION\",\n                    \"/* LLM-REGION\",\n                    \"/** LLM-REGION\",\n                    // Split along class definitions\n                    \"\\nclass \",\n                    // Split along method definitions\n                    \"\\npublic \",\n                    \"\\nprotected \",\n                    \"\\nprivate \",\n                    \"\\nstatic \",\n                    // Split along control flow statements\n                    \"\\nif \",\n                    \"\\nfor \",\n                    \"\\nwhile \",\n                    \"\\nswitch \",\n                    \"\\ncase \",\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"js\":\n            case \"jsx\":\n            case \"javascript\":\n                return [\n                    // split along regions\n                    \"// LLM-REGION\",\n                    \"/* LLM-REGION\",\n                    \"/** LLM-REGION\",\n                    // Split along class definitions\n                    \"\\nclass \",\n                    // Split along function definitions\n                    \"\\nfunction \",\n                    \"\\nconst \",\n                    \"\\nlet \",\n                    \"\\nvar \",\n                    \"\\nclass \",\n                    // Split along control flow statements\n                    \"\\nif \",\n                    \"\\nfor \",\n                    \"\\nwhile \",\n                    \"\\nswitch \",\n                    \"\\ncase \",\n                    \"\\ndefault \",\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"php\":\n                return [\n                    // Split along function definitions\n                    \"\\nfunction \",\n                    // Split along class definitions\n                    \"\\nclass \",\n                    // Split along control flow statements\n                    \"\\nif \",\n                    \"\\nforeach \",\n                    \"\\nwhile \",\n                    \"\\ndo \",\n                    \"\\nswitch \",\n                    \"\\ncase \",\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"proto\":\n                return [\n                    // Split along message definitions\n                    \"\\nmessage \",\n                    // Split along service definitions\n                    \"\\nservice \",\n                    // Split along enum definitions\n                    \"\\nenum \",\n                    // Split along option definitions\n                    \"\\noption \",\n                    // Split along import statements\n                    \"\\nimport \",\n                    // Split along syntax declarations\n                    \"\\nsyntax \",\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"python\":\n            case \"py\":\n                return [\n                    // First, try to split along class definitions\n                    \"\\nclass \",\n                    \"\\ndef \",\n                    \"\\n\\tdef \",\n                    // Now split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"rst\":\n                return [\n                    // Split along section titles\n                    \"\\n===\\n\",\n                    \"\\n---\\n\",\n                    \"\\n***\\n\",\n                    // Split along directive markers\n                    \"\\n.. \",\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"ruby\":\n                return [\n                    // Split along method definitions\n                    \"\\ndef \",\n                    \"\\nclass \",\n                    // Split along control flow statements\n                    \"\\nif \",\n                    \"\\nunless \",\n                    \"\\nwhile \",\n                    \"\\nfor \",\n                    \"\\ndo \",\n                    \"\\nbegin \",\n                    \"\\nrescue \",\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"rust\":\n                return [\n                    // Split along function definitions\n                    \"\\nfn \",\n                    \"\\nconst \",\n                    \"\\nlet \",\n                    // Split along control flow statements\n                    \"\\nif \",\n                    \"\\nwhile \",\n                    \"\\nfor \",\n                    \"\\nloop \",\n                    \"\\nmatch \",\n                    \"\\nconst \",\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"scala\":\n                return [\n                    // Split along class definitions\n                    \"\\nclass \",\n                    \"\\nobject \",\n                    // Split along method definitions\n                    \"\\ndef \",\n                    \"\\nval \",\n                    \"\\nvar \",\n                    // Split along control flow statements\n                    \"\\nif \",\n                    \"\\nfor \",\n                    \"\\nwhile \",\n                    \"\\nmatch \",\n                    \"\\ncase \",\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"swift\":\n                return [\n                    // Split along function definitions\n                    \"\\nfunc \",\n                    // Split along class definitions\n                    \"\\nclass \",\n                    \"\\nstruct \",\n                    \"\\nenum \",\n                    // Split along control flow statements\n                    \"\\nif \",\n                    \"\\nfor \",\n                    \"\\nwhile \",\n                    \"\\ndo \",\n                    \"\\nswitch \",\n                    \"\\ncase \",\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"md\":\n            case \"markdown\":\n                return [\n                    // First, try to split along Markdown headings (starting with level 2)\n                    \"\\n## \",\n                    \"\\n### \",\n                    \"\\n#### \",\n                    \"\\n##### \",\n                    \"\\n###### \",\n                    // Note the alternative syntax for headings (below) is not handled here\n                    // Heading level 2\n                    // ---------------\n                    // End of code block\n                    \"```\\n\\n\",\n                    // Horizontal lines\n                    \"\\n\\n***\\n\\n\",\n                    \"\\n\\n---\\n\\n\",\n                    \"\\n\\n___\\n\\n\",\n                    // Note that this splitter doesn't handle horizontal lines defined\n                    // by *three or more* of ***, ---, or ___, but this is not handled\n                    // Github tables\n                    \"<table>\",\n                    // \"<tr>\",\n                    // \"<td>\",\n                    // \"<td \",\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"latex\":\n                return [\n                    // First, try to split along Latex sections\n                    \"\\n\\\\chapter{\",\n                    \"\\n\\\\section{\",\n                    \"\\n\\\\subsection{\",\n                    \"\\n\\\\subsubsection{\",\n\n                    // Now split by environments\n                    \"\\n\\\\begin{enumerate}\",\n                    \"\\n\\\\begin{itemize}\",\n                    \"\\n\\\\begin{description}\",\n                    \"\\n\\\\begin{list}\",\n                    \"\\n\\\\begin{quote}\",\n                    \"\\n\\\\begin{quotation}\",\n                    \"\\n\\\\begin{verse}\",\n                    \"\\n\\\\begin{verbatim}\",\n\n                    // Now split by math environments\n                    \"\\n\\\\begin{align}\",\n                    \"$$\",\n                    \"$\",\n\n                    // Now split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"html\":\n                return [\n                    // First, try to split along HTML tags\n                    \"<body>\",\n                    \"<div>\",\n                    \"<p>\",\n                    \"<br>\",\n                    \"<li>\",\n                    \"<h1>\",\n                    \"<h2>\",\n                    \"<h3>\",\n                    \"<h4>\",\n                    \"<h5>\",\n                    \"<h6>\",\n                    \"<span>\",\n                    \"<table>\",\n                    \"<tr>\",\n                    \"<td>\",\n                    \"<th>\",\n                    \"<ul>\",\n                    \"<ol>\",\n                    \"<header>\",\n                    \"<footer>\",\n                    \"<nav>\",\n                    // Head\n                    \"<head>\",\n                    \"<style>\",\n                    \"<script>\",\n                    \"<meta>\",\n                    \"<title>\",\n                    // Normal type of lines\n                    \" \"\n                ];\n            case \"sol\":\n                return [\n                    // Split along compiler informations definitions\n                    \"\\npragma \",\n                    \"\\nusing \",\n                    // Split along contract definitions\n                    \"\\ncontract \",\n                    \"\\ninterface \",\n                    \"\\nlibrary \",\n                    // Split along method definitions\n                    \"\\nconstructor \",\n                    \"\\ntype \",\n                    \"\\nfunction \",\n                    \"\\nevent \",\n                    \"\\nmodifier \",\n                    \"\\nerror \",\n                    \"\\nstruct \",\n                    \"\\nenum \",\n                    // Split along control flow statements\n                    \"\\nif \",\n                    \"\\nfor \",\n                    \"\\nwhile \",\n                    \"\\ndo while \",\n                    \"\\nassembly \",\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            default:\n                return [\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \",\n                    \"\",\n                ];\n        }\n    }\n}\n","file":"/src/TextSplitter.ts","language":"typescript","fileHash":"17115f169bfe23cd7981fedafb6a5d19b2380229b85821a064527f2c828b27d4","hash":"17115f169bfe23cd7981fedafb6a5d19b2380229b85821a064527f2c828b27d4","processedContent":"import { GPT3Tokenizer } from \"./GPT3Tokenizer\";\n\"\"\"\nscip-typescript npm vectra 0.5.5 src/`GPT3Tokenizer.ts`/GPT3Tokenizer#: This code defines a class called `GPT3Tokenizer` that implements an interface for tokenizing text. The class has two functions, `decode` and `encode`, which are not defined and return undefined.\nscip-typescript npm vectra 0.5.5 src/`GPT3Tokenizer.ts`/: This code defines a class called `GPT3Tokenizer` that implements an interface for tokenizing text using GPT-3's encoder. The class has two functions, `decode` and `encode`, which are not defined and return undefined.\n\"\"\"\nimport { TextChunk, Tokenizer } from \"./types\";\n\"\"\"\nscip-typescript npm vectra 0.5.5 src/`types.ts`/TextChunk#: This code defines an interface for a text chunk, which includes the text itself, its tokens, start and end positions, and start and end overlaps.\nscip-typescript npm vectra 0.5.5 src/`types.ts`/Tokenizer#: This code defines an interface for a tokenizer, which is a class that takes in a list of numbers and returns a string, and also takes in a string and returns a list of numbers.\nscip-typescript npm vectra 0.5.5 src/`types.ts`/: The code defines various interfaces and types for an AI model that can create embeddings for text inputs, including a response status, embeddings response, text chunk, text fetcher, index statistics, index item, metadata filter, query result, tokenizer, document chunk metadata, and document catalog statistics.\n\"\"\"\n\nconst ALPHANUMERIC_CHARS = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n\nexport interface TextSplitterConfig {\n    \"\"\"This code defines an interface for a text splitter, which is a class that takes in a string and returns a list of strings based on certain rules. The interface specifies the configuration options for the text splitter, including the separators to use, whether to keep the separators in the output, the chunk size, and the overlap between chunks. Additionally, it includes a tokenizer interface that defines how to convert a string into a list of numbers and vice versa.\"\"\"\n    pass\n\nexport class TextSplitter {\n    \"\"\"This code defines a class called `TextSplitter` that takes in a string and returns a list of strings based on certain rules. The interface specifies the configuration options for the text splitter, including the separators to use, whether to keep the separators in the output, the chunk size, and the overlap between chunks. Additionally, it includes a tokenizer interface that defines how to convert a string into a list of numbers and vice versa.\"\"\"\n    pass\n","documentation":"The code defines a class called `TextSplitter` that takes in a string and returns a list of strings based on certain rules, with configuration options for separators, chunk size, and overlap. Additionally, it includes a tokenizer interface for converting strings into lists of numbers and vice versa."}},{"key":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#","attributes":{"range":[5,0,12,1],"symbol":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#","content":"export interface TextSplitterConfig {\n    separators: string[];\n    keepSeparators: boolean;\n    chunkSize: number;\n    chunkOverlap: number;\n    tokenizer: Tokenizer;\n    docType?: string;\n}","file":"/src/TextSplitter.ts","language":"typescript","fileHash":"17115f169bfe23cd7981fedafb6a5d19b2380229b85821a064527f2c828b27d4","hash":"fd759de74a0d2ed4f6dea2554f31ccad2e9969e573733c570952108fe4c9916a","processedContent":"export interface TextSplitterConfig {\n    separators: string[];\n    keepSeparators: boolean;\n    chunkSize: number;\n    chunkOverlap: number;\n    tokenizer: Tokenizer; #This code defines an interface for a tokenizer, which is a class that takes in a list of numbers and returns a string, and also takes in a string and returns a list of numbers.\n    docType?: string;\n}","documentation":"This code defines an interface for a text splitter, which is a class that takes in a string and returns a list of strings based on certain rules. The interface specifies the configuration options for the text splitter, including the separators to use, whether to keep the separators in the output, the chunk size, and the overlap between chunks. Additionally, it includes a tokenizer interface that defines how to convert a string into a list of numbers and vice versa."}},{"key":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#","attributes":{"range":[14,0,564,1],"symbol":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#","content":"export class TextSplitter {\n    private readonly _config: TextSplitterConfig;\n\n    public constructor(config?: Partial<TextSplitterConfig>) {\n        this._config = Object.assign({\n            keepSeparators: false,\n            chunkSize: 400,\n            chunkOverlap: 40,\n        } as TextSplitterConfig, config);\n\n        // Create a default tokenizer if none is provided\n        if (!this._config.tokenizer) {\n            this._config.tokenizer = new GPT3Tokenizer();\n        }\n\n        // Use default separators if none are provided\n        if (!this._config.separators || this._config.separators.length === 0) {\n            this._config.separators = this.getSeparators(this._config.docType);\n        }\n\n        // Validate the config settings\n        if (this._config.chunkSize < 1) {\n            throw new Error(\"chunkSize must be >= 1\");\n        } else if (this._config.chunkOverlap < 0) {\n            throw new Error(\"chunkOverlap must be >= 0\");\n        } else if (this._config.chunkOverlap > this._config.chunkSize) {\n            throw new Error(\"chunkOverlap must be <= chunkSize\");\n        }\n    }\n\n    public split(text: string): TextChunk[] {\n        // Get basic chunks\n        const chunks = this.recursiveSplit(text, this._config.separators, 0);\n\n        const that = this;\n        function getOverlapTokens(tokens?: number[]): number[] {\n            if (tokens != undefined) {\n                const len = tokens.length > that._config.chunkOverlap ? that._config.chunkOverlap : tokens.length;\n                return tokens.slice(0, len);\n            } else {\n                return [];\n            }\n        }\n\n        // Add overlap tokens and text to the start and end of each chunk\n        if (this._config.chunkOverlap > 0) {\n            for (let i = 1; i < chunks.length; i++) {\n                const previousChunk = chunks[i - 1];\n                const chunk = chunks[i];\n                const nextChunk = i < chunks.length - 1 ? chunks[i + 1] : undefined;\n                chunk.startOverlap = getOverlapTokens(previousChunk.tokens.reverse()).reverse();\n                chunk.endOverlap = getOverlapTokens(nextChunk?.tokens);\n            }\n        }\n\n        return chunks;\n    }\n\n    private recursiveSplit(text: string, separators: string[], startPos: number): TextChunk[] {\n        const chunks: TextChunk[] = [];\n        if (text.length > 0) {\n            // Split text into parts\n            let parts: string[];\n            let separator = '';\n            const nextSeparators = separators.length > 1 ? separators.slice(1) : [];\n            if (separators.length > 0) {\n                // Split by separator\n                separator = separators[0];\n                parts = separator == ' ' ? this.splitBySpaces(text) : text.split(separator);\n            } else {\n                // Cut text in half\n                const half = Math.floor(text.length / 2);\n                parts = [text.substring(0, half), text.substring(half)];\n            }\n\n            // Iterate over parts\n            for (let i = 0; i < parts.length; i++) {\n                const lastChunk = (i === parts.length - 1);\n\n                // Get chunk text and endPos\n                let chunk = parts[i];\n                const endPos = (startPos + (chunk.length - 1)) + (lastChunk ? 0 : separator.length);\n                if (this._config.keepSeparators && !lastChunk) {\n                    chunk += separator;\n                }\n\n                // Ensure chunk contains text\n                if (!this.containsAlphanumeric(chunk)) {\n                    continue;\n                }\n\n                // Optimization to avoid encoding really large chunks\n                if (chunk.length / 6 > this._config.chunkSize) {\n                    // Break the text into smaller chunks\n                    const subChunks = this.recursiveSplit(chunk, nextSeparators, startPos);\n                    chunks.push(...subChunks);\n                } else {\n                    // Encode chunk text\n                    const tokens = this._config.tokenizer.encode(chunk);\n                    if (tokens.length > this._config.chunkSize) {\n                        // Break the text into smaller chunks\n                        const subChunks = this.recursiveSplit(chunk, nextSeparators, startPos);\n                        chunks.push(...subChunks);\n                    } else {\n                        // Append chunk to output\n                        chunks.push({\n                            text: chunk,\n                            tokens: tokens,\n                            startPos: startPos,\n                            endPos: endPos,\n                            startOverlap: [],\n                            endOverlap: [],\n                        });\n                    }\n\n                }\n\n\n                // Update startPos\n                startPos = endPos + 1;\n            }\n        }\n\n        return this.combineChunks(chunks);\n    }\n\n    private combineChunks(chunks: TextChunk[]): TextChunk[] {\n        const combinedChunks: TextChunk[] = [];\n        let currentChunk: TextChunk|undefined;\n        let currentLength = 0;\n        const separator = this._config.keepSeparators ? '' : ' ';\n        for (let i = 0; i < chunks.length; i++) {\n            const chunk = chunks[i];\n            if (currentChunk) {\n                const length = currentChunk.tokens.length + chunk.tokens.length;\n                if (length > this._config.chunkSize) {\n                    combinedChunks.push(currentChunk);\n                    currentChunk = chunk;\n                    currentLength = chunk.tokens.length;\n                } else {\n                    currentChunk.text += separator + chunk.text;\n                    currentChunk.tokens.push(...chunk.tokens);\n                    currentLength += chunk.tokens.length;\n                }\n            } else {\n                currentChunk = chunk;\n                currentLength = chunk.tokens.length;\n            }\n        }\n        if (currentChunk) {\n            combinedChunks.push(currentChunk);\n        }\n        return combinedChunks;\n    }\n\n    private containsAlphanumeric(text: string): boolean {\n        for (let i = 0; i < text.length; i++) {\n            if (ALPHANUMERIC_CHARS.includes(text[i])) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private splitBySpaces(text: string): string[] {\n        const parts: string[] = [];\n        const words = text.split(' ');\n        if (words.length > 0) {\n            let part = words[0];\n            for (let i = 1; i < words.length; i++) {\n                const nextWord = words[i];\n                if (this._config.tokenizer.encode(part + ' ' + nextWord).length <= this._config.chunkSize) {\n                    part += ' ' + nextWord;\n                } else {\n                    parts.push(part);\n                    part = nextWord;\n                }\n            }\n            parts.push(part);\n        } else {\n            parts.push(text);\n        }\n\n        return parts;\n    }\n\n    private getSeparators(docType?: string): string[] {\n        switch (docType ?? '') {\n            case \"cpp\":\n                return [\n                    // Split along class definitions\n                    \"\\nclass \",\n                    // Split along function definitions\n                    \"\\nvoid \",\n                    \"\\nint \",\n                    \"\\nfloat \",\n                    \"\\ndouble \",\n                    // Split along control flow statements\n                    \"\\nif \",\n                    \"\\nfor \",\n                    \"\\nwhile \",\n                    \"\\nswitch \",\n                    \"\\ncase \",\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"go\":\n                return [\n                    // Split along function definitions\n                    \"\\nfunc \",\n                    \"\\nvar \",\n                    \"\\nconst \",\n                    \"\\ntype \",\n                    // Split along control flow statements\n                    \"\\nif \",\n                    \"\\nfor \",\n                    \"\\nswitch \",\n                    \"\\ncase \",\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"java\":\n            case \"c#\":\n            case \"csharp\":\n            case \"cs\":\n            case \"ts\":\n            case \"tsx\":\n            case \"typescript\":\n                return [\n                    // split along regions\n                    \"// LLM-REGION\",\n                    \"/* LLM-REGION\",\n                    \"/** LLM-REGION\",\n                    // Split along class definitions\n                    \"\\nclass \",\n                    // Split along method definitions\n                    \"\\npublic \",\n                    \"\\nprotected \",\n                    \"\\nprivate \",\n                    \"\\nstatic \",\n                    // Split along control flow statements\n                    \"\\nif \",\n                    \"\\nfor \",\n                    \"\\nwhile \",\n                    \"\\nswitch \",\n                    \"\\ncase \",\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"js\":\n            case \"jsx\":\n            case \"javascript\":\n                return [\n                    // split along regions\n                    \"// LLM-REGION\",\n                    \"/* LLM-REGION\",\n                    \"/** LLM-REGION\",\n                    // Split along class definitions\n                    \"\\nclass \",\n                    // Split along function definitions\n                    \"\\nfunction \",\n                    \"\\nconst \",\n                    \"\\nlet \",\n                    \"\\nvar \",\n                    \"\\nclass \",\n                    // Split along control flow statements\n                    \"\\nif \",\n                    \"\\nfor \",\n                    \"\\nwhile \",\n                    \"\\nswitch \",\n                    \"\\ncase \",\n                    \"\\ndefault \",\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"php\":\n                return [\n                    // Split along function definitions\n                    \"\\nfunction \",\n                    // Split along class definitions\n                    \"\\nclass \",\n                    // Split along control flow statements\n                    \"\\nif \",\n                    \"\\nforeach \",\n                    \"\\nwhile \",\n                    \"\\ndo \",\n                    \"\\nswitch \",\n                    \"\\ncase \",\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"proto\":\n                return [\n                    // Split along message definitions\n                    \"\\nmessage \",\n                    // Split along service definitions\n                    \"\\nservice \",\n                    // Split along enum definitions\n                    \"\\nenum \",\n                    // Split along option definitions\n                    \"\\noption \",\n                    // Split along import statements\n                    \"\\nimport \",\n                    // Split along syntax declarations\n                    \"\\nsyntax \",\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"python\":\n            case \"py\":\n                return [\n                    // First, try to split along class definitions\n                    \"\\nclass \",\n                    \"\\ndef \",\n                    \"\\n\\tdef \",\n                    // Now split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"rst\":\n                return [\n                    // Split along section titles\n                    \"\\n===\\n\",\n                    \"\\n---\\n\",\n                    \"\\n***\\n\",\n                    // Split along directive markers\n                    \"\\n.. \",\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"ruby\":\n                return [\n                    // Split along method definitions\n                    \"\\ndef \",\n                    \"\\nclass \",\n                    // Split along control flow statements\n                    \"\\nif \",\n                    \"\\nunless \",\n                    \"\\nwhile \",\n                    \"\\nfor \",\n                    \"\\ndo \",\n                    \"\\nbegin \",\n                    \"\\nrescue \",\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"rust\":\n                return [\n                    // Split along function definitions\n                    \"\\nfn \",\n                    \"\\nconst \",\n                    \"\\nlet \",\n                    // Split along control flow statements\n                    \"\\nif \",\n                    \"\\nwhile \",\n                    \"\\nfor \",\n                    \"\\nloop \",\n                    \"\\nmatch \",\n                    \"\\nconst \",\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"scala\":\n                return [\n                    // Split along class definitions\n                    \"\\nclass \",\n                    \"\\nobject \",\n                    // Split along method definitions\n                    \"\\ndef \",\n                    \"\\nval \",\n                    \"\\nvar \",\n                    // Split along control flow statements\n                    \"\\nif \",\n                    \"\\nfor \",\n                    \"\\nwhile \",\n                    \"\\nmatch \",\n                    \"\\ncase \",\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"swift\":\n                return [\n                    // Split along function definitions\n                    \"\\nfunc \",\n                    // Split along class definitions\n                    \"\\nclass \",\n                    \"\\nstruct \",\n                    \"\\nenum \",\n                    // Split along control flow statements\n                    \"\\nif \",\n                    \"\\nfor \",\n                    \"\\nwhile \",\n                    \"\\ndo \",\n                    \"\\nswitch \",\n                    \"\\ncase \",\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"md\":\n            case \"markdown\":\n                return [\n                    // First, try to split along Markdown headings (starting with level 2)\n                    \"\\n## \",\n                    \"\\n### \",\n                    \"\\n#### \",\n                    \"\\n##### \",\n                    \"\\n###### \",\n                    // Note the alternative syntax for headings (below) is not handled here\n                    // Heading level 2\n                    // ---------------\n                    // End of code block\n                    \"```\\n\\n\",\n                    // Horizontal lines\n                    \"\\n\\n***\\n\\n\",\n                    \"\\n\\n---\\n\\n\",\n                    \"\\n\\n___\\n\\n\",\n                    // Note that this splitter doesn't handle horizontal lines defined\n                    // by *three or more* of ***, ---, or ___, but this is not handled\n                    // Github tables\n                    \"<table>\",\n                    // \"<tr>\",\n                    // \"<td>\",\n                    // \"<td \",\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"latex\":\n                return [\n                    // First, try to split along Latex sections\n                    \"\\n\\\\chapter{\",\n                    \"\\n\\\\section{\",\n                    \"\\n\\\\subsection{\",\n                    \"\\n\\\\subsubsection{\",\n\n                    // Now split by environments\n                    \"\\n\\\\begin{enumerate}\",\n                    \"\\n\\\\begin{itemize}\",\n                    \"\\n\\\\begin{description}\",\n                    \"\\n\\\\begin{list}\",\n                    \"\\n\\\\begin{quote}\",\n                    \"\\n\\\\begin{quotation}\",\n                    \"\\n\\\\begin{verse}\",\n                    \"\\n\\\\begin{verbatim}\",\n\n                    // Now split by math environments\n                    \"\\n\\\\begin{align}\",\n                    \"$$\",\n                    \"$\",\n\n                    // Now split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"html\":\n                return [\n                    // First, try to split along HTML tags\n                    \"<body>\",\n                    \"<div>\",\n                    \"<p>\",\n                    \"<br>\",\n                    \"<li>\",\n                    \"<h1>\",\n                    \"<h2>\",\n                    \"<h3>\",\n                    \"<h4>\",\n                    \"<h5>\",\n                    \"<h6>\",\n                    \"<span>\",\n                    \"<table>\",\n                    \"<tr>\",\n                    \"<td>\",\n                    \"<th>\",\n                    \"<ul>\",\n                    \"<ol>\",\n                    \"<header>\",\n                    \"<footer>\",\n                    \"<nav>\",\n                    // Head\n                    \"<head>\",\n                    \"<style>\",\n                    \"<script>\",\n                    \"<meta>\",\n                    \"<title>\",\n                    // Normal type of lines\n                    \" \"\n                ];\n            case \"sol\":\n                return [\n                    // Split along compiler informations definitions\n                    \"\\npragma \",\n                    \"\\nusing \",\n                    // Split along contract definitions\n                    \"\\ncontract \",\n                    \"\\ninterface \",\n                    \"\\nlibrary \",\n                    // Split along method definitions\n                    \"\\nconstructor \",\n                    \"\\ntype \",\n                    \"\\nfunction \",\n                    \"\\nevent \",\n                    \"\\nmodifier \",\n                    \"\\nerror \",\n                    \"\\nstruct \",\n                    \"\\nenum \",\n                    // Split along control flow statements\n                    \"\\nif \",\n                    \"\\nfor \",\n                    \"\\nwhile \",\n                    \"\\ndo while \",\n                    \"\\nassembly \",\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            default:\n                return [\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \",\n                    \"\",\n                ];\n        }\n    }\n}","file":"/src/TextSplitter.ts","language":"typescript","fileHash":"17115f169bfe23cd7981fedafb6a5d19b2380229b85821a064527f2c828b27d4","hash":"010d0893b053ca761f29dfd1c85ed8a79c943077d4e92fc8138923cd1e9f0d48","processedContent":"export class TextSplitter {\n    private readonly _config: TextSplitterConfig; #This code defines an interface for a text splitter, which is a class that takes in a string and returns a list of strings based on certain rules. The interface specifies the configuration options for the text splitter, including the separators to use, whether to keep the separators in the output, the chunk size, and the overlap between chunks. Additionally, it includes a tokenizer interface that defines how to convert a string into a list of numbers and vice versa.\n\n    public constructor(config?: Partial<TextSplitterConfig>) { #This code defines an interface for a text splitter, which is a class that takes in a string and returns a list of strings based on certain rules. The interface specifies the configuration options for the text splitter, including the separators to use, whether to keep the separators in the output, the chunk size, and the overlap between chunks. Additionally, it includes a tokenizer interface that defines how to convert a string into a list of numbers and vice versa.\n        this._config = Object.assign({ #undefined\n            keepSeparators: false,\n            chunkSize: 400,\n            chunkOverlap: 40,\n        } as TextSplitterConfig, config); #This code defines an interface for a text splitter, which is a class that takes in a string and returns a list of strings based on certain rules. The interface specifies the configuration options for the text splitter, including the separators to use, whether to keep the separators in the output, the chunk size, and the overlap between chunks. Additionally, it includes a tokenizer interface that defines how to convert a string into a list of numbers and vice versa.\n\n        // Create a default tokenizer if none is provided\n        if (!this._config.tokenizer) {\n        \"\"\"\n        scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#_config.: undefined\n        scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#tokenizer.: undefined\n        \"\"\"\n            this._config.tokenizer = new GPT3Tokenizer();\n            \"\"\"\n            scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#_config.: undefined\n            scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#tokenizer.: undefined\n            scip-typescript npm vectra 0.5.5 src/`GPT3Tokenizer.ts`/GPT3Tokenizer#: This code defines a class called `GPT3Tokenizer` that implements an interface for tokenizing text. The class has two functions, `decode` and `encode`, which are not defined and return undefined.\n            \"\"\"\n        }\n\n        // Use default separators if none are provided\n        if (!this._config.separators || this._config.separators.length === 0) {\n        \"\"\"\n        scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#_config.: undefined\n        scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#_config.: undefined\n        scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#separators.: undefined\n        scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#separators.: undefined\n        \"\"\"\n            this._config.separators = this.getSeparators(this._config.docType);\n            \"\"\"\n            scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#getSeparators().: The code defines a function called `getSeparators` that takes a string parameter representing the document type and returns an array of strings that can be used as separators for splitting a text into its constituent parts. The function uses a switch statement to determine the appropriate separators based on the document type, which is then returned.\n            scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#_config.: undefined\n            scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#_config.: undefined\n            scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#separators.: undefined\n            scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#docType.: undefined\n            \"\"\"\n        }\n\n        // Validate the config settings\n        if (this._config.chunkSize < 1) {\n        \"\"\"\n        scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#_config.: undefined\n        scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#chunkSize.: undefined\n        \"\"\"\n            throw new Error(\"chunkSize must be >= 1\");\n        } else if (this._config.chunkOverlap < 0) {\n        \"\"\"\n        scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#_config.: undefined\n        scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#chunkOverlap.: undefined\n        \"\"\"\n            throw new Error(\"chunkOverlap must be >= 0\");\n        } else if (this._config.chunkOverlap > this._config.chunkSize) {\n        \"\"\"\n        scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#_config.: undefined\n        scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#_config.: undefined\n        scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#chunkSize.: undefined\n        scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#chunkOverlap.: undefined\n        \"\"\"\n            throw new Error(\"chunkOverlap must be <= chunkSize\");\n        }\n    }\n\n    public split(text: string): TextChunk[] {\n        // Get basic chunks\n        const chunks = this.recursiveSplit(text, this._config.separators, 0);\n\n        const that = this;\n        function getOverlapTokens(tokens?: number[]): number[] {\n            \"\"\"This code splits a string of text into smaller chunks based on certain criteria, such as separators or the length of each chunk. It also encodes the text into tokens and keeps track of the current chunk and its length.\"\"\"\n            pass\n\n    private recursiveSplit(text: string, separators: string[], startPos: number): TextChunk[] {\n        \"\"\"This code takes a string of text and splits it into smaller chunks based on certain criteria, such as separators or the length of each chunk. It also encodes the text into tokens and keeps track of the current chunk and its length.\"\"\"\n        pass\n\n    private combineChunks(chunks: TextChunk[]): TextChunk[] {\n        \"\"\"This code takes an array of text chunks and combines them into a single chunk if the combined length is less than a certain threshold. It also handles separators and keeps track of the current chunk and its length.\"\"\"\n        pass\n\n    private containsAlphanumeric(text: string): boolean {\n        \"\"\"This code checks if a string contains any alphanumeric characters.\"\"\"\n        pass\n\n    private splitBySpaces(text: string): string[] {\n        \"\"\"This code takes a string of text and splits it into an array of strings based on spaces. It also checks the length of each string after concatenating it with the next word, and if it exceeds a certain limit, it pushes the current part to the parts array and starts a new one.\"\"\"\n        pass\n\n    private getSeparators(docType?: string): string[] {\n        switch (docType ?? '') {\n            case \"cpp\":\n                return [\n                    // Split along class definitions\n                    \"\"\"The code defines a function called `getSeparators` that takes a string parameter representing the document type and returns an array of strings that can be used as separators for splitting a text into its constituent parts. The function uses a switch statement to determine the appropriate separators based on the document type, which is then returned.\"\"\"\n                    pass\n}","documentation":"This code defines a class called `TextSplitter` that takes in a string and returns a list of strings based on certain rules. The interface specifies the configuration options for the text splitter, including the separators to use, whether to keep the separators in the output, the chunk size, and the overlap between chunks. Additionally, it includes a tokenizer interface that defines how to convert a string into a list of numbers and vice versa."}},{"key":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#split().","attributes":{"range":[44,4,70,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#split().","content":"public split(text: string): TextChunk[] {\n        // Get basic chunks\n        const chunks = this.recursiveSplit(text, this._config.separators, 0);\n\n        const that = this;\n        function getOverlapTokens(tokens?: number[]): number[] {\n            if (tokens != undefined) {\n                const len = tokens.length > that._config.chunkOverlap ? that._config.chunkOverlap : tokens.length;\n                return tokens.slice(0, len);\n            } else {\n                return [];\n            }\n        }\n\n        // Add overlap tokens and text to the start and end of each chunk\n        if (this._config.chunkOverlap > 0) {\n            for (let i = 1; i < chunks.length; i++) {\n                const previousChunk = chunks[i - 1];\n                const chunk = chunks[i];\n                const nextChunk = i < chunks.length - 1 ? chunks[i + 1] : undefined;\n                chunk.startOverlap = getOverlapTokens(previousChunk.tokens.reverse()).reverse();\n                chunk.endOverlap = getOverlapTokens(nextChunk?.tokens);\n            }\n        }\n\n        return chunks;\n    }","file":"/src/TextSplitter.ts","language":"typescript","fileHash":"17115f169bfe23cd7981fedafb6a5d19b2380229b85821a064527f2c828b27d4","hash":"c58874e4e29eca906743d30bd387a4c0ae2b9b1256dbaa501c4bfb04e067dc3b","processedContent":"public split(text: string): TextChunk[] {\n        // Get basic chunks\n        const chunks = this.recursiveSplit(text, this._config.separators, 0);\n        \"\"\"\n        scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#recursiveSplit().: This code takes a string of text and splits it into smaller chunks based on certain criteria, such as separators or the length of each chunk. It also encodes the text into tokens and keeps track of the current chunk and its length.\n        scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#_config.: undefined\n        scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#separators.: undefined\n        \"\"\"\n\n        const that = this;\n        function getOverlapTokens(tokens?: number[]): number[] {\n            if (tokens != undefined) {\n                const len = tokens.length > that._config.chunkOverlap ? that._config.chunkOverlap : tokens.length;\n                \"\"\"\n                scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#_config.: undefined\n                scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#_config.: undefined\n                scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#chunkOverlap.: undefined\n                scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#chunkOverlap.: undefined\n                \"\"\"\n                return tokens.slice(0, len);\n            } else {\n                return [];\n            }\n        }\n\n        // Add overlap tokens and text to the start and end of each chunk\n        if (this._config.chunkOverlap > 0) {\n        \"\"\"\n        scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#_config.: undefined\n        scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#chunkOverlap.: undefined\n        \"\"\"\n            for (let i = 1; i < chunks.length; i++) {\n                const previousChunk = chunks[i - 1];\n                const chunk = chunks[i];\n                const nextChunk = i < chunks.length - 1 ? chunks[i + 1] : undefined;\n                chunk.startOverlap = getOverlapTokens(previousChunk.tokens.reverse()).reverse();\n                chunk.endOverlap = getOverlapTokens(nextChunk?.tokens);\n            }\n        }\n\n        return chunks;\n    }","documentation":"This code splits a string of text into smaller chunks based on certain criteria, such as separators or the length of each chunk. It also encodes the text into tokens and keeps track of the current chunk and its length."}},{"key":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#recursiveSplit().","attributes":{"range":[72,4,138,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#recursiveSplit().","content":"private recursiveSplit(text: string, separators: string[], startPos: number): TextChunk[] {\n        const chunks: TextChunk[] = [];\n        if (text.length > 0) {\n            // Split text into parts\n            let parts: string[];\n            let separator = '';\n            const nextSeparators = separators.length > 1 ? separators.slice(1) : [];\n            if (separators.length > 0) {\n                // Split by separator\n                separator = separators[0];\n                parts = separator == ' ' ? this.splitBySpaces(text) : text.split(separator);\n            } else {\n                // Cut text in half\n                const half = Math.floor(text.length / 2);\n                parts = [text.substring(0, half), text.substring(half)];\n            }\n\n            // Iterate over parts\n            for (let i = 0; i < parts.length; i++) {\n                const lastChunk = (i === parts.length - 1);\n\n                // Get chunk text and endPos\n                let chunk = parts[i];\n                const endPos = (startPos + (chunk.length - 1)) + (lastChunk ? 0 : separator.length);\n                if (this._config.keepSeparators && !lastChunk) {\n                    chunk += separator;\n                }\n\n                // Ensure chunk contains text\n                if (!this.containsAlphanumeric(chunk)) {\n                    continue;\n                }\n\n                // Optimization to avoid encoding really large chunks\n                if (chunk.length / 6 > this._config.chunkSize) {\n                    // Break the text into smaller chunks\n                    const subChunks = this.recursiveSplit(chunk, nextSeparators, startPos);\n                    chunks.push(...subChunks);\n                } else {\n                    // Encode chunk text\n                    const tokens = this._config.tokenizer.encode(chunk);\n                    if (tokens.length > this._config.chunkSize) {\n                        // Break the text into smaller chunks\n                        const subChunks = this.recursiveSplit(chunk, nextSeparators, startPos);\n                        chunks.push(...subChunks);\n                    } else {\n                        // Append chunk to output\n                        chunks.push({\n                            text: chunk,\n                            tokens: tokens,\n                            startPos: startPos,\n                            endPos: endPos,\n                            startOverlap: [],\n                            endOverlap: [],\n                        });\n                    }\n\n                }\n\n\n                // Update startPos\n                startPos = endPos + 1;\n            }\n        }\n\n        return this.combineChunks(chunks);\n    }","file":"/src/TextSplitter.ts","language":"typescript","fileHash":"17115f169bfe23cd7981fedafb6a5d19b2380229b85821a064527f2c828b27d4","hash":"8196506689a669153587305dbce80fe9f3c08ca3f0dd1a2a4d40bef699df59ea","processedContent":"private recursiveSplit(text: string, separators: string[], startPos: number): TextChunk[] {\n        const chunks: TextChunk[] = []; #This code defines an interface for a text chunk, which includes the text itself, its tokens, start and end positions, and start and end overlaps.\n        if (text.length > 0) {\n            // Split text into parts\n            let parts: string[];\n            let separator = '';\n            const nextSeparators = separators.length > 1 ? separators.slice(1) : [];\n            if (separators.length > 0) {\n                // Split by separator\n                separator = separators[0];\n                parts = separator == ' ' ? this.splitBySpaces(text) : text.split(separator); #This code takes a string of text and splits it into an array of strings based on spaces. It also checks the length of each string after concatenating it with the next word, and if it exceeds a certain limit, it pushes the current part to the parts array and starts a new one.\n            } else {\n                // Cut text in half\n                const half = Math.floor(text.length / 2);\n                parts = [text.substring(0, half), text.substring(half)];\n            }\n\n            // Iterate over parts\n            for (let i = 0; i < parts.length; i++) {\n                const lastChunk = (i === parts.length - 1);\n\n                // Get chunk text and endPos\n                let chunk = parts[i];\n                const endPos = (startPos + (chunk.length - 1)) + (lastChunk ? 0 : separator.length);\n                if (this._config.keepSeparators && !lastChunk) {\n                \"\"\"\n                scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#_config.: undefined\n                scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#keepSeparators.: undefined\n                \"\"\"\n                    chunk += separator;\n                }\n\n                // Ensure chunk contains text\n                if (!this.containsAlphanumeric(chunk)) { #This code checks if a string contains any alphanumeric characters.\n                    continue;\n                }\n\n                // Optimization to avoid encoding really large chunks\n                if (chunk.length / 6 > this._config.chunkSize) {\n                \"\"\"\n                scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#_config.: undefined\n                scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#chunkSize.: undefined\n                \"\"\"\n                    // Break the text into smaller chunks\n                    const subChunks = this.recursiveSplit(chunk, nextSeparators, startPos);\n                    chunks.push(...subChunks);\n                } else {\n                    // Encode chunk text\n                    const tokens = this._config.tokenizer.encode(chunk);\n                    \"\"\"\n                    scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#_config.: undefined\n                    scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#tokenizer.: undefined\n                    scip-typescript npm vectra 0.5.5 src/`types.ts`/Tokenizer#encode().: undefined\n                    \"\"\"\n                    if (tokens.length > this._config.chunkSize) {\n                    \"\"\"\n                    scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#_config.: undefined\n                    scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#chunkSize.: undefined\n                    \"\"\"\n                        // Break the text into smaller chunks\n                        const subChunks = this.recursiveSplit(chunk, nextSeparators, startPos);\n                        chunks.push(...subChunks);\n                    } else {\n                        // Append chunk to output\n                        chunks.push({\n                            text: chunk,\n                            tokens: tokens,\n                            startPos: startPos,\n                            endPos: endPos,\n                            startOverlap: [],\n                            endOverlap: [],\n                        });\n                    }\n\n                }\n\n\n                // Update startPos\n                startPos = endPos + 1;\n            }\n        }\n\n        return this.combineChunks(chunks); #This code takes an array of text chunks and combines them into a single chunk if the combined length is less than a certain threshold. It also handles separators and keeps track of the current chunk and its length.\n    }","documentation":"This code takes a string of text and splits it into smaller chunks based on certain criteria, such as separators or the length of each chunk. It also encodes the text into tokens and keeps track of the current chunk and its length."}},{"key":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#combineChunks().","attributes":{"range":[140,4,167,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#combineChunks().","content":"private combineChunks(chunks: TextChunk[]): TextChunk[] {\n        const combinedChunks: TextChunk[] = [];\n        let currentChunk: TextChunk|undefined;\n        let currentLength = 0;\n        const separator = this._config.keepSeparators ? '' : ' ';\n        for (let i = 0; i < chunks.length; i++) {\n            const chunk = chunks[i];\n            if (currentChunk) {\n                const length = currentChunk.tokens.length + chunk.tokens.length;\n                if (length > this._config.chunkSize) {\n                    combinedChunks.push(currentChunk);\n                    currentChunk = chunk;\n                    currentLength = chunk.tokens.length;\n                } else {\n                    currentChunk.text += separator + chunk.text;\n                    currentChunk.tokens.push(...chunk.tokens);\n                    currentLength += chunk.tokens.length;\n                }\n            } else {\n                currentChunk = chunk;\n                currentLength = chunk.tokens.length;\n            }\n        }\n        if (currentChunk) {\n            combinedChunks.push(currentChunk);\n        }\n        return combinedChunks;\n    }","file":"/src/TextSplitter.ts","language":"typescript","fileHash":"17115f169bfe23cd7981fedafb6a5d19b2380229b85821a064527f2c828b27d4","hash":"a9f72df23a0dec8dee90c4f8dbdf511729713e4c789dde086a20676448bbf349","processedContent":"private combineChunks(chunks: TextChunk[]): TextChunk[] {\n        const combinedChunks: TextChunk[] = []; #This code defines an interface for a text chunk, which includes the text itself, its tokens, start and end positions, and start and end overlaps.\n        let currentChunk: TextChunk|undefined; #This code defines an interface for a text chunk, which includes the text itself, its tokens, start and end positions, and start and end overlaps.\n        let currentLength = 0;\n        const separator = this._config.keepSeparators ? '' : ' ';\n        \"\"\"\n        scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#_config.: undefined\n        scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#keepSeparators.: undefined\n        \"\"\"\n        for (let i = 0; i < chunks.length; i++) {\n            const chunk = chunks[i];\n            if (currentChunk) {\n                const length = currentChunk.tokens.length + chunk.tokens.length; #undefined\n                if (length > this._config.chunkSize) {\n                \"\"\"\n                scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#_config.: undefined\n                scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#chunkSize.: undefined\n                \"\"\"\n                    combinedChunks.push(currentChunk);\n                    currentChunk = chunk;\n                    currentLength = chunk.tokens.length;\n                } else {\n                    currentChunk.text += separator + chunk.text; #undefined\n                    currentChunk.tokens.push(...chunk.tokens); #undefined\n                    currentLength += chunk.tokens.length;\n                }\n            } else {\n                currentChunk = chunk;\n                currentLength = chunk.tokens.length;\n            }\n        }\n        if (currentChunk) {\n            combinedChunks.push(currentChunk);\n        }\n        return combinedChunks;\n    }","documentation":"This code takes an array of text chunks and combines them into a single chunk if the combined length is less than a certain threshold. It also handles separators and keeps track of the current chunk and its length."}},{"key":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#containsAlphanumeric().","attributes":{"range":[169,4,176,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#containsAlphanumeric().","content":"private containsAlphanumeric(text: string): boolean {\n        for (let i = 0; i < text.length; i++) {\n            if (ALPHANUMERIC_CHARS.includes(text[i])) {\n                return true;\n            }\n        }\n        return false;\n    }","file":"/src/TextSplitter.ts","language":"typescript","fileHash":"17115f169bfe23cd7981fedafb6a5d19b2380229b85821a064527f2c828b27d4","hash":"0c09e3a8336a50514c37df5f985b345ef0defcce04e9d5d1ca81739f2a106731","processedContent":"private containsAlphanumeric(text: string): boolean {\n        for (let i = 0; i < text.length; i++) {\n            if (ALPHANUMERIC_CHARS.includes(text[i])) { #undefined\n                return true;\n            }\n        }\n        return false;\n    }","documentation":"This code checks if a string contains any alphanumeric characters."}},{"key":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#splitBySpaces().","attributes":{"range":[178,4,198,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#splitBySpaces().","content":"private splitBySpaces(text: string): string[] {\n        const parts: string[] = [];\n        const words = text.split(' ');\n        if (words.length > 0) {\n            let part = words[0];\n            for (let i = 1; i < words.length; i++) {\n                const nextWord = words[i];\n                if (this._config.tokenizer.encode(part + ' ' + nextWord).length <= this._config.chunkSize) {\n                    part += ' ' + nextWord;\n                } else {\n                    parts.push(part);\n                    part = nextWord;\n                }\n            }\n            parts.push(part);\n        } else {\n            parts.push(text);\n        }\n\n        return parts;\n    }","file":"/src/TextSplitter.ts","language":"typescript","fileHash":"17115f169bfe23cd7981fedafb6a5d19b2380229b85821a064527f2c828b27d4","hash":"efee16efb0a859a325199e684337e3139758a0e45834f4676f1768e6c83f2073","processedContent":"private splitBySpaces(text: string): string[] {\n        const parts: string[] = [];\n        const words = text.split(' ');\n        if (words.length > 0) {\n            let part = words[0];\n            for (let i = 1; i < words.length; i++) {\n                const nextWord = words[i];\n                if (this._config.tokenizer.encode(part + ' ' + nextWord).length <= this._config.chunkSize) {\n                \"\"\"\n                scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#_config.: undefined\n                scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#_config.: undefined\n                scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#tokenizer.: undefined\n                scip-typescript npm vectra 0.5.5 src/`types.ts`/Tokenizer#encode().: undefined\n                scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#chunkSize.: undefined\n                \"\"\"\n                    part += ' ' + nextWord;\n                } else {\n                    parts.push(part);\n                    part = nextWord;\n                }\n            }\n            parts.push(part);\n        } else {\n            parts.push(text);\n        }\n\n        return parts;\n    }","documentation":"This code takes a string of text and splits it into an array of strings based on spaces. It also checks the length of each string after concatenating it with the next word, and if it exceeds a certain limit, it pushes the current part to the parts array and starts a new one."}},{"key":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#getSeparators().","attributes":{"range":[200,4,563,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#getSeparators().","content":"private getSeparators(docType?: string): string[] {\n        switch (docType ?? '') {\n            case \"cpp\":\n                return [\n                    // Split along class definitions\n                    \"\\nclass \",\n                    // Split along function definitions\n                    \"\\nvoid \",\n                    \"\\nint \",\n                    \"\\nfloat \",\n                    \"\\ndouble \",\n                    // Split along control flow statements\n                    \"\\nif \",\n                    \"\\nfor \",\n                    \"\\nwhile \",\n                    \"\\nswitch \",\n                    \"\\ncase \",\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"go\":\n                return [\n                    // Split along function definitions\n                    \"\\nfunc \",\n                    \"\\nvar \",\n                    \"\\nconst \",\n                    \"\\ntype \",\n                    // Split along control flow statements\n                    \"\\nif \",\n                    \"\\nfor \",\n                    \"\\nswitch \",\n                    \"\\ncase \",\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"java\":\n            case \"c#\":\n            case \"csharp\":\n            case \"cs\":\n            case \"ts\":\n            case \"tsx\":\n            case \"typescript\":\n                return [\n                    // split along regions\n                    \"// LLM-REGION\",\n                    \"/* LLM-REGION\",\n                    \"/** LLM-REGION\",\n                    // Split along class definitions\n                    \"\\nclass \",\n                    // Split along method definitions\n                    \"\\npublic \",\n                    \"\\nprotected \",\n                    \"\\nprivate \",\n                    \"\\nstatic \",\n                    // Split along control flow statements\n                    \"\\nif \",\n                    \"\\nfor \",\n                    \"\\nwhile \",\n                    \"\\nswitch \",\n                    \"\\ncase \",\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"js\":\n            case \"jsx\":\n            case \"javascript\":\n                return [\n                    // split along regions\n                    \"// LLM-REGION\",\n                    \"/* LLM-REGION\",\n                    \"/** LLM-REGION\",\n                    // Split along class definitions\n                    \"\\nclass \",\n                    // Split along function definitions\n                    \"\\nfunction \",\n                    \"\\nconst \",\n                    \"\\nlet \",\n                    \"\\nvar \",\n                    \"\\nclass \",\n                    // Split along control flow statements\n                    \"\\nif \",\n                    \"\\nfor \",\n                    \"\\nwhile \",\n                    \"\\nswitch \",\n                    \"\\ncase \",\n                    \"\\ndefault \",\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"php\":\n                return [\n                    // Split along function definitions\n                    \"\\nfunction \",\n                    // Split along class definitions\n                    \"\\nclass \",\n                    // Split along control flow statements\n                    \"\\nif \",\n                    \"\\nforeach \",\n                    \"\\nwhile \",\n                    \"\\ndo \",\n                    \"\\nswitch \",\n                    \"\\ncase \",\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"proto\":\n                return [\n                    // Split along message definitions\n                    \"\\nmessage \",\n                    // Split along service definitions\n                    \"\\nservice \",\n                    // Split along enum definitions\n                    \"\\nenum \",\n                    // Split along option definitions\n                    \"\\noption \",\n                    // Split along import statements\n                    \"\\nimport \",\n                    // Split along syntax declarations\n                    \"\\nsyntax \",\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"python\":\n            case \"py\":\n                return [\n                    // First, try to split along class definitions\n                    \"\\nclass \",\n                    \"\\ndef \",\n                    \"\\n\\tdef \",\n                    // Now split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"rst\":\n                return [\n                    // Split along section titles\n                    \"\\n===\\n\",\n                    \"\\n---\\n\",\n                    \"\\n***\\n\",\n                    // Split along directive markers\n                    \"\\n.. \",\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"ruby\":\n                return [\n                    // Split along method definitions\n                    \"\\ndef \",\n                    \"\\nclass \",\n                    // Split along control flow statements\n                    \"\\nif \",\n                    \"\\nunless \",\n                    \"\\nwhile \",\n                    \"\\nfor \",\n                    \"\\ndo \",\n                    \"\\nbegin \",\n                    \"\\nrescue \",\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"rust\":\n                return [\n                    // Split along function definitions\n                    \"\\nfn \",\n                    \"\\nconst \",\n                    \"\\nlet \",\n                    // Split along control flow statements\n                    \"\\nif \",\n                    \"\\nwhile \",\n                    \"\\nfor \",\n                    \"\\nloop \",\n                    \"\\nmatch \",\n                    \"\\nconst \",\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"scala\":\n                return [\n                    // Split along class definitions\n                    \"\\nclass \",\n                    \"\\nobject \",\n                    // Split along method definitions\n                    \"\\ndef \",\n                    \"\\nval \",\n                    \"\\nvar \",\n                    // Split along control flow statements\n                    \"\\nif \",\n                    \"\\nfor \",\n                    \"\\nwhile \",\n                    \"\\nmatch \",\n                    \"\\ncase \",\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"swift\":\n                return [\n                    // Split along function definitions\n                    \"\\nfunc \",\n                    // Split along class definitions\n                    \"\\nclass \",\n                    \"\\nstruct \",\n                    \"\\nenum \",\n                    // Split along control flow statements\n                    \"\\nif \",\n                    \"\\nfor \",\n                    \"\\nwhile \",\n                    \"\\ndo \",\n                    \"\\nswitch \",\n                    \"\\ncase \",\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"md\":\n            case \"markdown\":\n                return [\n                    // First, try to split along Markdown headings (starting with level 2)\n                    \"\\n## \",\n                    \"\\n### \",\n                    \"\\n#### \",\n                    \"\\n##### \",\n                    \"\\n###### \",\n                    // Note the alternative syntax for headings (below) is not handled here\n                    // Heading level 2\n                    // ---------------\n                    // End of code block\n                    \"```\\n\\n\",\n                    // Horizontal lines\n                    \"\\n\\n***\\n\\n\",\n                    \"\\n\\n---\\n\\n\",\n                    \"\\n\\n___\\n\\n\",\n                    // Note that this splitter doesn't handle horizontal lines defined\n                    // by *three or more* of ***, ---, or ___, but this is not handled\n                    // Github tables\n                    \"<table>\",\n                    // \"<tr>\",\n                    // \"<td>\",\n                    // \"<td \",\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"latex\":\n                return [\n                    // First, try to split along Latex sections\n                    \"\\n\\\\chapter{\",\n                    \"\\n\\\\section{\",\n                    \"\\n\\\\subsection{\",\n                    \"\\n\\\\subsubsection{\",\n\n                    // Now split by environments\n                    \"\\n\\\\begin{enumerate}\",\n                    \"\\n\\\\begin{itemize}\",\n                    \"\\n\\\\begin{description}\",\n                    \"\\n\\\\begin{list}\",\n                    \"\\n\\\\begin{quote}\",\n                    \"\\n\\\\begin{quotation}\",\n                    \"\\n\\\\begin{verse}\",\n                    \"\\n\\\\begin{verbatim}\",\n\n                    // Now split by math environments\n                    \"\\n\\\\begin{align}\",\n                    \"$$\",\n                    \"$\",\n\n                    // Now split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"html\":\n                return [\n                    // First, try to split along HTML tags\n                    \"<body>\",\n                    \"<div>\",\n                    \"<p>\",\n                    \"<br>\",\n                    \"<li>\",\n                    \"<h1>\",\n                    \"<h2>\",\n                    \"<h3>\",\n                    \"<h4>\",\n                    \"<h5>\",\n                    \"<h6>\",\n                    \"<span>\",\n                    \"<table>\",\n                    \"<tr>\",\n                    \"<td>\",\n                    \"<th>\",\n                    \"<ul>\",\n                    \"<ol>\",\n                    \"<header>\",\n                    \"<footer>\",\n                    \"<nav>\",\n                    // Head\n                    \"<head>\",\n                    \"<style>\",\n                    \"<script>\",\n                    \"<meta>\",\n                    \"<title>\",\n                    // Normal type of lines\n                    \" \"\n                ];\n            case \"sol\":\n                return [\n                    // Split along compiler informations definitions\n                    \"\\npragma \",\n                    \"\\nusing \",\n                    // Split along contract definitions\n                    \"\\ncontract \",\n                    \"\\ninterface \",\n                    \"\\nlibrary \",\n                    // Split along method definitions\n                    \"\\nconstructor \",\n                    \"\\ntype \",\n                    \"\\nfunction \",\n                    \"\\nevent \",\n                    \"\\nmodifier \",\n                    \"\\nerror \",\n                    \"\\nstruct \",\n                    \"\\nenum \",\n                    // Split along control flow statements\n                    \"\\nif \",\n                    \"\\nfor \",\n                    \"\\nwhile \",\n                    \"\\ndo while \",\n                    \"\\nassembly \",\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            default:\n                return [\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \",\n                    \"\",\n                ];\n        }\n    }","file":"/src/TextSplitter.ts","language":"typescript","fileHash":"17115f169bfe23cd7981fedafb6a5d19b2380229b85821a064527f2c828b27d4","hash":"57261b1d4359df9c174ea02eda17192635cafd439f22d9e00bc09482cb72f29c","processedContent":"private getSeparators(docType?: string): string[] {\n        switch (docType ?? '') {\n            case \"cpp\":\n                return [\n                    // Split along class definitions\n                    \"\\nclass \",\n                    // Split along function definitions\n                    \"\\nvoid \",\n                    \"\\nint \",\n                    \"\\nfloat \",\n                    \"\\ndouble \",\n                    // Split along control flow statements\n                    \"\\nif \",\n                    \"\\nfor \",\n                    \"\\nwhile \",\n                    \"\\nswitch \",\n                    \"\\ncase \",\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"go\":\n                return [\n                    // Split along function definitions\n                    \"\\nfunc \",\n                    \"\\nvar \",\n                    \"\\nconst \",\n                    \"\\ntype \",\n                    // Split along control flow statements\n                    \"\\nif \",\n                    \"\\nfor \",\n                    \"\\nswitch \",\n                    \"\\ncase \",\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"java\":\n            case \"c#\":\n            case \"csharp\":\n            case \"cs\":\n            case \"ts\":\n            case \"tsx\":\n            case \"typescript\":\n                return [\n                    // split along regions\n                    \"// LLM-REGION\",\n                    \"/* LLM-REGION\",\n                    \"/** LLM-REGION\",\n                    // Split along class definitions\n                    \"\\nclass \",\n                    // Split along method definitions\n                    \"\\npublic \",\n                    \"\\nprotected \",\n                    \"\\nprivate \",\n                    \"\\nstatic \",\n                    // Split along control flow statements\n                    \"\\nif \",\n                    \"\\nfor \",\n                    \"\\nwhile \",\n                    \"\\nswitch \",\n                    \"\\ncase \",\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"js\":\n            case \"jsx\":\n            case \"javascript\":\n                return [\n                    // split along regions\n                    \"// LLM-REGION\",\n                    \"/* LLM-REGION\",\n                    \"/** LLM-REGION\",\n                    // Split along class definitions\n                    \"\\nclass \",\n                    // Split along function definitions\n                    \"\\nfunction \",\n                    \"\\nconst \",\n                    \"\\nlet \",\n                    \"\\nvar \",\n                    \"\\nclass \",\n                    // Split along control flow statements\n                    \"\\nif \",\n                    \"\\nfor \",\n                    \"\\nwhile \",\n                    \"\\nswitch \",\n                    \"\\ncase \",\n                    \"\\ndefault \",\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"php\":\n                return [\n                    // Split along function definitions\n                    \"\\nfunction \",\n                    // Split along class definitions\n                    \"\\nclass \",\n                    // Split along control flow statements\n                    \"\\nif \",\n                    \"\\nforeach \",\n                    \"\\nwhile \",\n                    \"\\ndo \",\n                    \"\\nswitch \",\n                    \"\\ncase \",\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"proto\":\n                return [\n                    // Split along message definitions\n                    \"\\nmessage \",\n                    // Split along service definitions\n                    \"\\nservice \",\n                    // Split along enum definitions\n                    \"\\nenum \",\n                    // Split along option definitions\n                    \"\\noption \",\n                    // Split along import statements\n                    \"\\nimport \",\n                    // Split along syntax declarations\n                    \"\\nsyntax \",\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"python\":\n            case \"py\":\n                return [\n                    // First, try to split along class definitions\n                    \"\\nclass \",\n                    \"\\ndef \",\n                    \"\\n\\tdef \",\n                    // Now split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"rst\":\n                return [\n                    // Split along section titles\n                    \"\\n===\\n\",\n                    \"\\n---\\n\",\n                    \"\\n***\\n\",\n                    // Split along directive markers\n                    \"\\n.. \",\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"ruby\":\n                return [\n                    // Split along method definitions\n                    \"\\ndef \",\n                    \"\\nclass \",\n                    // Split along control flow statements\n                    \"\\nif \",\n                    \"\\nunless \",\n                    \"\\nwhile \",\n                    \"\\nfor \",\n                    \"\\ndo \",\n                    \"\\nbegin \",\n                    \"\\nrescue \",\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"rust\":\n                return [\n                    // Split along function definitions\n                    \"\\nfn \",\n                    \"\\nconst \",\n                    \"\\nlet \",\n                    // Split along control flow statements\n                    \"\\nif \",\n                    \"\\nwhile \",\n                    \"\\nfor \",\n                    \"\\nloop \",\n                    \"\\nmatch \",\n                    \"\\nconst \",\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"scala\":\n                return [\n                    // Split along class definitions\n                    \"\\nclass \",\n                    \"\\nobject \",\n                    // Split along method definitions\n                    \"\\ndef \",\n                    \"\\nval \",\n                    \"\\nvar \",\n                    // Split along control flow statements\n                    \"\\nif \",\n                    \"\\nfor \",\n                    \"\\nwhile \",\n                    \"\\nmatch \",\n                    \"\\ncase \",\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"swift\":\n                return [\n                    // Split along function definitions\n                    \"\\nfunc \",\n                    // Split along class definitions\n                    \"\\nclass \",\n                    \"\\nstruct \",\n                    \"\\nenum \",\n                    // Split along control flow statements\n                    \"\\nif \",\n                    \"\\nfor \",\n                    \"\\nwhile \",\n                    \"\\ndo \",\n                    \"\\nswitch \",\n                    \"\\ncase \",\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"md\":\n            case \"markdown\":\n                return [\n                    // First, try to split along Markdown headings (starting with level 2)\n                    \"\\n## \",\n                    \"\\n### \",\n                    \"\\n#### \",\n                    \"\\n##### \",\n                    \"\\n###### \",\n                    // Note the alternative syntax for headings (below) is not handled here\n                    // Heading level 2\n                    // ---------------\n                    // End of code block\n                    \"```\\n\\n\",\n                    // Horizontal lines\n                    \"\\n\\n***\\n\\n\",\n                    \"\\n\\n---\\n\\n\",\n                    \"\\n\\n___\\n\\n\",\n                    // Note that this splitter doesn't handle horizontal lines defined\n                    // by *three or more* of ***, ---, or ___, but this is not handled\n                    // Github tables\n                    \"<table>\",\n                    // \"<tr>\",\n                    // \"<td>\",\n                    // \"<td \",\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"latex\":\n                return [\n                    // First, try to split along Latex sections\n                    \"\\n\\\\chapter{\",\n                    \"\\n\\\\section{\",\n                    \"\\n\\\\subsection{\",\n                    \"\\n\\\\subsubsection{\",\n\n                    // Now split by environments\n                    \"\\n\\\\begin{enumerate}\",\n                    \"\\n\\\\begin{itemize}\",\n                    \"\\n\\\\begin{description}\",\n                    \"\\n\\\\begin{list}\",\n                    \"\\n\\\\begin{quote}\",\n                    \"\\n\\\\begin{quotation}\",\n                    \"\\n\\\\begin{verse}\",\n                    \"\\n\\\\begin{verbatim}\",\n\n                    // Now split by math environments\n                    \"\\n\\\\begin{align}\",\n                    \"$$\",\n                    \"$\",\n\n                    // Now split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            case \"html\":\n                return [\n                    // First, try to split along HTML tags\n                    \"<body>\",\n                    \"<div>\",\n                    \"<p>\",\n                    \"<br>\",\n                    \"<li>\",\n                    \"<h1>\",\n                    \"<h2>\",\n                    \"<h3>\",\n                    \"<h4>\",\n                    \"<h5>\",\n                    \"<h6>\",\n                    \"<span>\",\n                    \"<table>\",\n                    \"<tr>\",\n                    \"<td>\",\n                    \"<th>\",\n                    \"<ul>\",\n                    \"<ol>\",\n                    \"<header>\",\n                    \"<footer>\",\n                    \"<nav>\",\n                    // Head\n                    \"<head>\",\n                    \"<style>\",\n                    \"<script>\",\n                    \"<meta>\",\n                    \"<title>\",\n                    // Normal type of lines\n                    \" \"\n                ];\n            case \"sol\":\n                return [\n                    // Split along compiler informations definitions\n                    \"\\npragma \",\n                    \"\\nusing \",\n                    // Split along contract definitions\n                    \"\\ncontract \",\n                    \"\\ninterface \",\n                    \"\\nlibrary \",\n                    // Split along method definitions\n                    \"\\nconstructor \",\n                    \"\\ntype \",\n                    \"\\nfunction \",\n                    \"\\nevent \",\n                    \"\\nmodifier \",\n                    \"\\nerror \",\n                    \"\\nstruct \",\n                    \"\\nenum \",\n                    // Split along control flow statements\n                    \"\\nif \",\n                    \"\\nfor \",\n                    \"\\nwhile \",\n                    \"\\ndo while \",\n                    \"\\nassembly \",\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \"\n                ];\n            default:\n                return [\n                    // Split by the normal type of lines\n                    \"\\n\\n\",\n                    \"\\n\",\n                    \" \",\n                    \"\",\n                ];\n        }\n    }","documentation":"The code defines a function called `getSeparators` that takes a string parameter representing the document type and returns an array of strings that can be used as separators for splitting a text into its constituent parts. The function uses a switch statement to determine the appropriate separators based on the document type, which is then returned."}},{"key":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#_config.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#_config.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#tokenizer.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#tokenizer.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#separators.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#separators.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#docType.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#docType.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#chunkSize.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#chunkSize.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#chunkOverlap.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#chunkOverlap.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#keepSeparators.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#keepSeparators.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`types.ts`/Tokenizer#encode().","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`types.ts`/Tokenizer#encode().","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`types.ts`/TextChunk#tokens.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`types.ts`/TextChunk#tokens.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`types.ts`/TextChunk#text.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`types.ts`/TextChunk#text.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/ALPHANUMERIC_CHARS.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/ALPHANUMERIC_CHARS.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/","attributes":{"range":[0,0,69,1],"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/","content":"import * as fs from 'fs/promises';\nimport * as path from 'path';\nimport { MetadataTypes } from './types';\n\nexport class LocalDocument {\n    private readonly _folderPath: string;\n    private readonly _id: string;\n    private readonly _uri: string;\n    private _metadata: Record<string,MetadataTypes>|undefined;\n    private _text: string|undefined;\n\n    public constructor(folderPath: string, id: string, uri: string) {\n        this._folderPath = folderPath;\n        this._id = id;\n        this._uri = uri;\n    }\n\n    public get folderPath(): string {\n        return this._folderPath;\n    }\n\n    public get id(): string {\n        return this._id;\n    }\n\n    public get uri(): string {\n        return this._uri;\n    }\n\n    public async hasMetadata(): Promise<boolean> {\n        try {\n            await fs.access(path.join(this.folderPath, `${this.id}.json`));\n            return true;\n        } catch (err: unknown) {\n            return false;\n        }\n    }\n\n    public async loadMetadata(): Promise<Record<string,MetadataTypes>> {\n        if (this._metadata == undefined) {\n            let json: string;\n            try {\n                json = (await fs.readFile(path.join(this.folderPath, `${this.id}.json`))).toString();\n            } catch (err: unknown) {\n                throw new Error(`Error reading metadata for document \"${this.uri}\": ${(err as any).toString()}`);\n            }\n\n            try {\n                this._metadata = JSON.parse(json);\n            } catch (err: unknown) {\n                throw new Error(`Error parsing metadata for document \"${this.uri}\": ${(err as any).toString()}`);\n            }\n        }\n\n        return this._metadata!;\n    }\n\n    public async loadText(): Promise<string> {\n        if (this._text == undefined) {\n            try {\n                this._text = (await fs.readFile(path.join(this.folderPath, `${this.id}.txt`))).toString();\n            } catch (err: unknown) {\n                throw new Error(`Error reading text file for document \"${this.uri}\": ${(err as any).toString()}`);\n            }\n        }\n\n        return this._text;\n    }\n\n}","file":"/src/LocalDocument.ts","language":"typescript","fileHash":"3936549ad5cb5054357c9de7a8bb8d7af4ea45fcc5108bdfee1d607a77d0f1ce","hash":"3936549ad5cb5054357c9de7a8bb8d7af4ea45fcc5108bdfee1d607a77d0f1ce","processedContent":"import * as fs from 'fs/promises';\n\"\"\"\nscip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/: undefined\nscip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/: undefined\n\"\"\"\nimport * as path from 'path';\n\"\"\"\nscip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/: undefined\nscip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path.: undefined\nscip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/: undefined\n\"\"\"\nimport { MetadataTypes } from './types';\n\"\"\"\nscip-typescript npm vectra 0.5.5 src/`types.ts`/MetadataTypes#: undefined\nscip-typescript npm vectra 0.5.5 src/`types.ts`/: The code defines various interfaces and types for an AI model that can create embeddings for text inputs, including a response status, embeddings response, text chunk, text fetcher, index statistics, index item, metadata filter, query result, tokenizer, document chunk metadata, and document catalog statistics.\n\"\"\"\n\nexport class LocalDocument {\n    private readonly _folderPath: string;\n    private readonly _id: string;\n    private readonly _uri: string;\n    private _metadata: Record<string,MetadataTypes>|undefined;\n    private _text: string|undefined;\n\n    public constructor(folderPath: string, id: string, uri: string) {\n        this._folderPath = folderPath;\n        this._id = id;\n        this._uri = uri;\n    }\n\n    public get folderPath(): string {\n        return this._folderPath;\n    }\n\n    public get id(): string {\n        return this._id;\n    }\n\n    public get uri(): string {\n        return this._uri;\n    }\n\n    public async hasMetadata(): Promise<boolean> {\n        try {\n            await fs.access(path.join(this.folderPath, `${this.id}.json`));\n            return true;\n        } catch (err: unknown) {\n            return false;\n        }\n    }\n\n    public async loadMetadata(): Promise<Record<string,MetadataTypes>> {\n        if (this._metadata == undefined) {\n            let json: string;\n            try {\n                json = (await fs.readFile(path.join(this.folderPath, `${this.id}.json`))).toString();\n            } catch (err: unknown) {\n                throw new Error(`Error reading metadata for document \"${this.uri}\": ${(err as any).toString()}`);\n            }\n\n            try {\n                this._metadata = JSON.parse(json);\n            } catch (err: unknown) {\n                throw new Error(`Error parsing metadata for document \"${this.uri}\": ${(err as any).toString()}`);\n            }\n        }\n\n        return this._metadata!;\n    }\n\n    public async loadText(): Promise<string> {\n        if (this._text == undefined) {\n            try {\n                this._text = (await fs.readFile(path.join(this.folderPath, `${this.id}.txt`))).toString();\n            } catch (err: unknown) {\n                throw new Error(`Error reading text file for document \"${this.uri}\": ${(err as any).toString()}`);\n            }\n        }\n\n        return this._text;\n    }\n\n}","documentation":"This code defines a class called LocalDocument that represents a document stored on the local file system. It has properties for the folder path, ID, and URI, as well as methods for loading metadata and text content from the file system."}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#","attributes":{"range":[4,0,69,1],"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#","content":"export class LocalDocument {\n    private readonly _folderPath: string;\n    private readonly _id: string;\n    private readonly _uri: string;\n    private _metadata: Record<string,MetadataTypes>|undefined;\n    private _text: string|undefined;\n\n    public constructor(folderPath: string, id: string, uri: string) {\n        this._folderPath = folderPath;\n        this._id = id;\n        this._uri = uri;\n    }\n\n    public get folderPath(): string {\n        return this._folderPath;\n    }\n\n    public get id(): string {\n        return this._id;\n    }\n\n    public get uri(): string {\n        return this._uri;\n    }\n\n    public async hasMetadata(): Promise<boolean> {\n        try {\n            await fs.access(path.join(this.folderPath, `${this.id}.json`));\n            return true;\n        } catch (err: unknown) {\n            return false;\n        }\n    }\n\n    public async loadMetadata(): Promise<Record<string,MetadataTypes>> {\n        if (this._metadata == undefined) {\n            let json: string;\n            try {\n                json = (await fs.readFile(path.join(this.folderPath, `${this.id}.json`))).toString();\n            } catch (err: unknown) {\n                throw new Error(`Error reading metadata for document \"${this.uri}\": ${(err as any).toString()}`);\n            }\n\n            try {\n                this._metadata = JSON.parse(json);\n            } catch (err: unknown) {\n                throw new Error(`Error parsing metadata for document \"${this.uri}\": ${(err as any).toString()}`);\n            }\n        }\n\n        return this._metadata!;\n    }\n\n    public async loadText(): Promise<string> {\n        if (this._text == undefined) {\n            try {\n                this._text = (await fs.readFile(path.join(this.folderPath, `${this.id}.txt`))).toString();\n            } catch (err: unknown) {\n                throw new Error(`Error reading text file for document \"${this.uri}\": ${(err as any).toString()}`);\n            }\n        }\n\n        return this._text;\n    }\n\n}","file":"/src/LocalDocument.ts","language":"typescript","fileHash":"3936549ad5cb5054357c9de7a8bb8d7af4ea45fcc5108bdfee1d607a77d0f1ce","hash":"cf307a1a794e9f82221c34dd5677a7b4e8352ef2dc889c456396ae7ad6f25958","processedContent":"export class LocalDocument {\n    private readonly _folderPath: string;\n    private readonly _id: string;\n    private readonly _uri: string;\n    private _metadata: Record<string,MetadataTypes>|undefined; #undefined\n    private _text: string|undefined;\n\n    public constructor(folderPath: string, id: string, uri: string) {\n        this._folderPath = folderPath; #undefined\n        this._id = id; #undefined\n        this._uri = uri; #undefined\n    }\n\n    public get folderPath(): string {\n        return this._folderPath; #undefined\n    }\n\n    public get id(): string {\n        return this._id; #undefined\n    }\n\n    public get uri(): string {\n        return this._uri; #undefined\n    }\n\n    public async hasMetadata(): Promise<boolean> {\n        \"\"\"This code checks if a file with the same name as the document ID exists in the specified folder. If it does, it returns true, otherwise it returns false.\"\"\"\n        pass\n\n    public async loadMetadata(): Promise<Record<string,MetadataTypes>> {\n        \"\"\"This code is a method that loads metadata for a document. It reads a JSON file from the file system, parses the JSON, and returns the parsed data as an object.\"\"\"\n        pass\n\n    public async loadText(): Promise<string> {\n        \"\"\"This code is a method that reads the text content of a file and returns it as a string. It uses the `fs` module to read the file, and the `path` module to join the file path with the file name. The method also has error handling to catch any errors that may occur during the reading process.\"\"\"\n        pass\n\n}","documentation":"This code defines a class called LocalDocument that represents a document stored on the local file system. It has methods for loading metadata and text content, as well as checking if a file with the same name as the document ID exists in the specified folder."}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#hasMetadata().","attributes":{"range":[29,4,36,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#hasMetadata().","content":"public async hasMetadata(): Promise<boolean> {\n        try {\n            await fs.access(path.join(this.folderPath, `${this.id}.json`));\n            return true;\n        } catch (err: unknown) {\n            return false;\n        }\n    }","file":"/src/LocalDocument.ts","language":"typescript","fileHash":"3936549ad5cb5054357c9de7a8bb8d7af4ea45fcc5108bdfee1d607a77d0f1ce","hash":"ab98363e453dd8ffe7398ab61ab13dd51e92cd52b01bcd225321c4042906d040","processedContent":"public async hasMetadata(): Promise<boolean> {\n        try {\n            await fs.access(path.join(this.folderPath, `${this.id}.json`));\n            \"\"\"\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/access().: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#join().: undefined\n            scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#`<get>folderPath`().: undefined\n            scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#`<get>id`().: undefined\n            \"\"\"\n            return true;\n        } catch (err: unknown) {\n            return false;\n        }\n    }","documentation":"This code checks if a file with the same name as the document ID exists in the specified folder. If it does, it returns true, otherwise it returns false."}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#loadMetadata().","attributes":{"range":[38,4,55,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#loadMetadata().","content":"public async loadMetadata(): Promise<Record<string,MetadataTypes>> {\n        if (this._metadata == undefined) {\n            let json: string;\n            try {\n                json = (await fs.readFile(path.join(this.folderPath, `${this.id}.json`))).toString();\n            } catch (err: unknown) {\n                throw new Error(`Error reading metadata for document \"${this.uri}\": ${(err as any).toString()}`);\n            }\n\n            try {\n                this._metadata = JSON.parse(json);\n            } catch (err: unknown) {\n                throw new Error(`Error parsing metadata for document \"${this.uri}\": ${(err as any).toString()}`);\n            }\n        }\n\n        return this._metadata!;\n    }","file":"/src/LocalDocument.ts","language":"typescript","fileHash":"3936549ad5cb5054357c9de7a8bb8d7af4ea45fcc5108bdfee1d607a77d0f1ce","hash":"87987953d446d247463dcbbf3221e76db68495a574bfbbf026e83169c0a5f801","processedContent":"public async loadMetadata(): Promise<Record<string,MetadataTypes>> {\n        if (this._metadata == undefined) { #undefined\n            let json: string;\n            try {\n                json = (await fs.readFile(path.join(this.folderPath, `${this.id}.json`))).toString();\n                \"\"\"\n                scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/: undefined\n                scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/readFile().: undefined\n                scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#: undefined\n                scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#join().: undefined\n                scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#`<get>folderPath`().: undefined\n                scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#`<get>id`().: undefined\n                \"\"\"\n            } catch (err: unknown) {\n                throw new Error(`Error reading metadata for document \"${this.uri}\": ${(err as any).toString()}`); #undefined\n            }\n\n            try {\n                this._metadata = JSON.parse(json); #undefined\n            } catch (err: unknown) {\n                throw new Error(`Error parsing metadata for document \"${this.uri}\": ${(err as any).toString()}`); #undefined\n            }\n        }\n\n        return this._metadata!; #undefined\n    }","documentation":"This code is a method that loads metadata for a document. It reads a JSON file from the file system, parses the JSON, and returns the parsed data as an object."}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#loadText().","attributes":{"range":[57,4,67,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#loadText().","content":"public async loadText(): Promise<string> {\n        if (this._text == undefined) {\n            try {\n                this._text = (await fs.readFile(path.join(this.folderPath, `${this.id}.txt`))).toString();\n            } catch (err: unknown) {\n                throw new Error(`Error reading text file for document \"${this.uri}\": ${(err as any).toString()}`);\n            }\n        }\n\n        return this._text;\n    }","file":"/src/LocalDocument.ts","language":"typescript","fileHash":"3936549ad5cb5054357c9de7a8bb8d7af4ea45fcc5108bdfee1d607a77d0f1ce","hash":"7a70da037dfef8fa588710c18b7c7b6689da0ebedffe1f01441768040d7955c9","processedContent":"public async loadText(): Promise<string> {\n        if (this._text == undefined) { #undefined\n            try {\n                this._text = (await fs.readFile(path.join(this.folderPath, `${this.id}.txt`))).toString();\n                \"\"\"\n                scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#_text.: undefined\n                scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/: undefined\n                scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/readFile().: undefined\n                scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#: undefined\n                scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#join().: undefined\n                scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#`<get>folderPath`().: undefined\n                scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#`<get>id`().: undefined\n                \"\"\"\n            } catch (err: unknown) {\n                throw new Error(`Error reading text file for document \"${this.uri}\": ${(err as any).toString()}`); #undefined\n            }\n        }\n\n        return this._text; #undefined\n    }","documentation":"This code is a method that reads the text content of a file and returns it as a string. It uses the `fs` module to read the file, and the `path` module to join the file path with the file name. The method also has error handling to catch any errors that may occur during the reading process."}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#_folderPath.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#_folderPath.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#_id.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#_id.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#_uri.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#_uri.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#`<get>folderPath`().","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#`<get>folderPath`().","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#`<get>id`().","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#`<get>id`().","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#_metadata.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#_metadata.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#`<get>uri`().","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#`<get>uri`().","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#_text.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#_text.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/","attributes":{"range":[0,0,223,0],"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/","content":"import { LocalDocument } from \"./LocalDocument\";\nimport { QueryResult, DocumentChunkMetadata, Tokenizer, DocumentTextSection } from \"./types\";\n\nexport class LocalDocumentResult extends LocalDocument {\n    private readonly _chunks: QueryResult<DocumentChunkMetadata>[];\n    private readonly _tokenizer: Tokenizer;\n    private readonly _score: number;\n\n    public constructor(folderPath: string, id: string, uri: string, chunks: QueryResult<DocumentChunkMetadata>[], tokenizer: Tokenizer) {\n        super(folderPath, id, uri);\n        this._chunks = chunks;\n        this._tokenizer = tokenizer;\n\n        // Compute average score\n        let score = 0;\n        this._chunks.forEach(chunk => score += chunk.score);\n        this._score = score / this._chunks.length;\n    }\n\n    public get chunks(): QueryResult<DocumentChunkMetadata>[] {\n        return this._chunks;\n    }\n\n    public get score(): number {\n        return this._score;\n    }\n\n    public async renderSections(maxTokens: number, maxSections: number, overlappingChunks = true): Promise<DocumentTextSection[]> {\n        // Load text from disk\n        const text = await this.loadText();\n\n        // First check to see if the entire document is less than maxTokens\n        if (text.length <= (maxTokens * 8)) {\n            const tokens = this._tokenizer.encode(text);\n            if (tokens.length < maxTokens) {\n                return [{\n                    text,\n                    tokenCount: tokens.length,\n                    score: 1.0\n                }];\n            }\n        }\n\n        // Otherwise, we need to split the document into sections\n        // - Add each chunk to a temp array and filter out any chunk that's longer then maxTokens.\n        // - Sort the array by startPos to arrange chunks in document order.\n        // - Generate a new array of sections by combining chunks until the maxTokens is reached for each section.\n        // - Generate an aggregate score for each section by averaging the score of each chunk in the section.\n        // - Sort the sections by score and limit to maxSections.\n        // - For each remaining section combine adjacent chunks of text.\n        // - Dynamically add overlapping chunks of text to each section until the maxTokens is reached.\n        const chunks: SectionChunk[] = this._chunks.map(chunk => {\n            const startPos = chunk.item.metadata.startPos;\n            const endPos = chunk.item.metadata.endPos;\n            const chunkText = text.substring(startPos, endPos + 1);\n            return {\n                text: chunkText,\n                startPos,\n                endPos,\n                score: chunk.score,\n                tokenCount: this._tokenizer.encode(chunkText).length\n            };\n        }).filter(chunk => chunk.tokenCount <= maxTokens).sort((a, b) => a.startPos - b.startPos);\n\n        // Check for no chunks\n        if (chunks.length === 0) {\n            // Take the top chunk and return a subset of its text\n            const topChunk = this._chunks[0];\n            const startPos = topChunk.item.metadata.startPos;\n            const endPos = topChunk.item.metadata.endPos;\n            const chunkText = text.substring(startPos, endPos + 1);\n            const tokens = this._tokenizer.encode(chunkText);\n            return [{\n                text: this._tokenizer.decode(tokens.slice(0, maxTokens)),\n                tokenCount: maxTokens,\n                score: topChunk.score\n            }];\n        }\n\n        // Generate sections\n        const sections: Section[] = [{\n            chunks: [],\n            score: 0,\n            tokenCount: 0\n        }];\n        for (let i = 0; i < chunks.length; i++) {\n            const chunk = chunks[i];\n            let section = sections[sections.length - 1];\n            if (section.tokenCount + chunk.tokenCount > maxTokens) {\n                sections.push({\n                    chunks: [],\n                    score: 0,\n                    tokenCount: 0\n                });\n            }\n            sections[sections.length - 1].chunks.push(chunk);\n            sections[sections.length - 1].score += chunk.score;\n            sections[sections.length - 1].tokenCount += chunk.tokenCount;\n        }\n\n        // Normalize section scores\n        sections.forEach(section => section.score /= section.chunks.length);\n\n        // Sort sections by score and limit to maxSections\n        sections.sort((a, b) => b.score - a.score);\n        if (sections.length > maxSections) {\n            sections.splice(maxSections, sections.length - maxSections);\n        }\n\n        // Combine adjacent chunks of text\n        sections.forEach(section => {\n            for (let i = 0; i < section.chunks.length - 1; i++) {\n                const chunk = section.chunks[i];\n                const nextChunk = section.chunks[i + 1];\n                if (chunk.endPos + 1 === nextChunk.startPos) {\n                    chunk.text += nextChunk.text;\n                    chunk.endPos = nextChunk.endPos;\n                    chunk.tokenCount += nextChunk.tokenCount;\n                    section.chunks.splice(i + 1, 1);\n                    i--;\n                }\n            }\n        });\n\n        // Add overlapping chunks of text to each section until the maxTokens is reached\n        if (overlappingChunks) {\n            const connector: SectionChunk = {\n                text: '\\n\\n...\\n\\n',\n                startPos: -1,\n                endPos: -1,\n                score: 0,\n                tokenCount: this._tokenizer.encode('\\n\\n...\\n\\n').length\n            };\n            sections.forEach(section => {\n                // Insert connectors between chunks\n                if (section.chunks.length > 1) {\n                    for (let i = 0; i < section.chunks.length - 1; i++) {\n                        section.chunks.splice(i + 1, 0, connector);\n                        section.tokenCount += connector.tokenCount;\n                        i++;\n                    }\n                }\n\n                // Add chunks to beginning and end of the section until maxTokens is reached\n                let budget = maxTokens - section.tokenCount;\n                if (budget > 40) {\n                    const sectionStart = section.chunks[0].startPos;\n                    const sectionEnd = section.chunks[section.chunks.length - 1].endPos;\n                    if (sectionStart > 0) {\n                        const beforeTex = text.substring(0, section.chunks[0].startPos);\n                        const beforeTokens = this.encodeBeforeText(beforeTex, Math.ceil(budget/2));\n                        const beforeBudget = sectionEnd < text.length - 1 ? Math.min(beforeTokens.length, Math.ceil(budget/2)) : Math.min(beforeTokens.length, budget);\n                        const chunk: SectionChunk = {\n                            text: this._tokenizer.decode(beforeTokens.slice(-beforeBudget)),\n                            startPos: sectionStart - beforeBudget,\n                            endPos: sectionStart - 1,\n                            score: 0,\n                            tokenCount: beforeBudget\n                        };\n                        section.chunks.unshift(chunk);\n                        section.tokenCount += chunk.tokenCount;\n                        budget -= chunk.tokenCount;\n                    }\n\n                    if (sectionEnd < text.length - 1) {\n                        const afterText = text.substring(sectionEnd + 1);\n                        const afterTokens = this.encodeAfterText(afterText, budget);\n                        const afterBudget = Math.min(afterTokens.length, budget);\n                        const chunk: SectionChunk = {\n                            text: this._tokenizer.decode(afterTokens.slice(0, afterBudget)),\n                            startPos: sectionEnd + 1,\n                            endPos: sectionEnd + afterBudget,\n                            score: 0,\n                            tokenCount: afterBudget\n                        };\n                        section.chunks.push(chunk);\n                        section.tokenCount += chunk.tokenCount;\n                        budget -= chunk.tokenCount;\n                    }\n                }\n            });\n        }\n\n        // Return final rendered sections\n        return sections.map(section => {\n            let text = '';\n            section.chunks.forEach(chunk => text += chunk.text);\n            return {\n                text: text,\n                tokenCount: section.tokenCount,\n                score: section.score\n            };\n        });\n    }\n\n    private encodeBeforeText(text: string, budget: number): number[] {\n        const maxLength = budget * 8;\n        const substr = text.length <= maxLength ? text : text.substring(text.length - maxLength);\n        return this._tokenizer.encode(substr);\n    }\n    \n    private encodeAfterText(text: string, budget: number): number[] {\n        const maxLength = budget * 8;\n        const substr = text.length <= maxLength ? text : text.substring(0, maxLength);\n        return this._tokenizer.encode(substr);\n    }\n\n}\n\ninterface SectionChunk {\n    text: string;\n    startPos: number;\n    endPos: number;\n    score: number;\n    tokenCount: number;\n}\n\ninterface Section {\n    chunks: SectionChunk[];\n    score: number;\n    tokenCount: number;\n}\n\n","file":"/src/LocalDocumentResult.ts","language":"typescript","fileHash":"9a21327011f815b3f5108afe67a1606cfca2bd116b190e26b519cefb8922cc08","hash":"9a21327011f815b3f5108afe67a1606cfca2bd116b190e26b519cefb8922cc08","processedContent":"import { LocalDocument } from \"./LocalDocument\";\n\"\"\"\nscip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#: This code defines a class called LocalDocument that represents a document stored on the local file system. It has methods for loading metadata and text content, as well as checking if a file with the same name as the document ID exists in the specified folder.\nscip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/: This code defines a class called LocalDocument that represents a document stored on the local file system. It has properties for the folder path, ID, and URI, as well as methods for loading metadata and text content from the file system.\n\"\"\"\nimport { QueryResult, DocumentChunkMetadata, Tokenizer, DocumentTextSection } from \"./types\";\n\"\"\"\nscip-typescript npm vectra 0.5.5 src/`types.ts`/QueryResult#: This code defines an interface for a query result, which includes an item (an index item with ID, metadata, vector, and other properties), a score (a number representing the relevance of the item to the query).\nscip-typescript npm vectra 0.5.5 src/`types.ts`/DocumentChunkMetadata#: This code defines an interface for document chunk metadata, which includes a document ID, start and end positions, and a key-value pair with a type of metadata.\nscip-typescript npm vectra 0.5.5 src/`types.ts`/Tokenizer#: This code defines an interface for a tokenizer, which is a class that takes in a list of numbers and returns a string, and also takes in a string and returns a list of numbers.\nscip-typescript npm vectra 0.5.5 src/`types.ts`/DocumentTextSection#: This code defines an interface for a document text section, which includes the text itself, the number of tokens in the text, and a score that represents the relevance or importance of the text.\nscip-typescript npm vectra 0.5.5 src/`types.ts`/: The code defines various interfaces and types for an AI model that can create embeddings for text inputs, including a response status, embeddings response, text chunk, text fetcher, index statistics, index item, metadata filter, query result, tokenizer, document chunk metadata, and document catalog statistics.\n\"\"\"\n\nexport class LocalDocumentResult extends LocalDocument {\n    \"\"\"This code defines a class called LocalDocumentResult that represents a document stored on the local file system. It has methods for loading metadata and text content, as well as checking if a file with the same name as the document ID exists in the specified folder.\"\"\"\n    pass\n\ninterface SectionChunk {\n    \"\"\"This code defines a data structure called SectionChunk, which contains information about a section of text, including the text itself, its starting and ending positions, a score indicating its relevance, and the number of tokens (words or phrases) in the section.\"\"\"\n    pass\n\ninterface Section {\n    \"\"\"This code defines a data structure called Section, which contains information about a section of text, including its relevance score and the number of tokens in the section.\"\"\"\n    pass\n\n","documentation":"The code defines a class called LocalDocumentResult that represents a document stored on the local file system, and includes methods for loading metadata and text content, as well as checking if a file with the same name as the document ID exists in the specified folder. It also defines various interfaces and types for an AI model that can create embeddings for text inputs."}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#","attributes":{"range":[3,0,207,1],"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#","content":"export class LocalDocumentResult extends LocalDocument {\n    private readonly _chunks: QueryResult<DocumentChunkMetadata>[];\n    private readonly _tokenizer: Tokenizer;\n    private readonly _score: number;\n\n    public constructor(folderPath: string, id: string, uri: string, chunks: QueryResult<DocumentChunkMetadata>[], tokenizer: Tokenizer) {\n        super(folderPath, id, uri);\n        this._chunks = chunks;\n        this._tokenizer = tokenizer;\n\n        // Compute average score\n        let score = 0;\n        this._chunks.forEach(chunk => score += chunk.score);\n        this._score = score / this._chunks.length;\n    }\n\n    public get chunks(): QueryResult<DocumentChunkMetadata>[] {\n        return this._chunks;\n    }\n\n    public get score(): number {\n        return this._score;\n    }\n\n    public async renderSections(maxTokens: number, maxSections: number, overlappingChunks = true): Promise<DocumentTextSection[]> {\n        // Load text from disk\n        const text = await this.loadText();\n\n        // First check to see if the entire document is less than maxTokens\n        if (text.length <= (maxTokens * 8)) {\n            const tokens = this._tokenizer.encode(text);\n            if (tokens.length < maxTokens) {\n                return [{\n                    text,\n                    tokenCount: tokens.length,\n                    score: 1.0\n                }];\n            }\n        }\n\n        // Otherwise, we need to split the document into sections\n        // - Add each chunk to a temp array and filter out any chunk that's longer then maxTokens.\n        // - Sort the array by startPos to arrange chunks in document order.\n        // - Generate a new array of sections by combining chunks until the maxTokens is reached for each section.\n        // - Generate an aggregate score for each section by averaging the score of each chunk in the section.\n        // - Sort the sections by score and limit to maxSections.\n        // - For each remaining section combine adjacent chunks of text.\n        // - Dynamically add overlapping chunks of text to each section until the maxTokens is reached.\n        const chunks: SectionChunk[] = this._chunks.map(chunk => {\n            const startPos = chunk.item.metadata.startPos;\n            const endPos = chunk.item.metadata.endPos;\n            const chunkText = text.substring(startPos, endPos + 1);\n            return {\n                text: chunkText,\n                startPos,\n                endPos,\n                score: chunk.score,\n                tokenCount: this._tokenizer.encode(chunkText).length\n            };\n        }).filter(chunk => chunk.tokenCount <= maxTokens).sort((a, b) => a.startPos - b.startPos);\n\n        // Check for no chunks\n        if (chunks.length === 0) {\n            // Take the top chunk and return a subset of its text\n            const topChunk = this._chunks[0];\n            const startPos = topChunk.item.metadata.startPos;\n            const endPos = topChunk.item.metadata.endPos;\n            const chunkText = text.substring(startPos, endPos + 1);\n            const tokens = this._tokenizer.encode(chunkText);\n            return [{\n                text: this._tokenizer.decode(tokens.slice(0, maxTokens)),\n                tokenCount: maxTokens,\n                score: topChunk.score\n            }];\n        }\n\n        // Generate sections\n        const sections: Section[] = [{\n            chunks: [],\n            score: 0,\n            tokenCount: 0\n        }];\n        for (let i = 0; i < chunks.length; i++) {\n            const chunk = chunks[i];\n            let section = sections[sections.length - 1];\n            if (section.tokenCount + chunk.tokenCount > maxTokens) {\n                sections.push({\n                    chunks: [],\n                    score: 0,\n                    tokenCount: 0\n                });\n            }\n            sections[sections.length - 1].chunks.push(chunk);\n            sections[sections.length - 1].score += chunk.score;\n            sections[sections.length - 1].tokenCount += chunk.tokenCount;\n        }\n\n        // Normalize section scores\n        sections.forEach(section => section.score /= section.chunks.length);\n\n        // Sort sections by score and limit to maxSections\n        sections.sort((a, b) => b.score - a.score);\n        if (sections.length > maxSections) {\n            sections.splice(maxSections, sections.length - maxSections);\n        }\n\n        // Combine adjacent chunks of text\n        sections.forEach(section => {\n            for (let i = 0; i < section.chunks.length - 1; i++) {\n                const chunk = section.chunks[i];\n                const nextChunk = section.chunks[i + 1];\n                if (chunk.endPos + 1 === nextChunk.startPos) {\n                    chunk.text += nextChunk.text;\n                    chunk.endPos = nextChunk.endPos;\n                    chunk.tokenCount += nextChunk.tokenCount;\n                    section.chunks.splice(i + 1, 1);\n                    i--;\n                }\n            }\n        });\n\n        // Add overlapping chunks of text to each section until the maxTokens is reached\n        if (overlappingChunks) {\n            const connector: SectionChunk = {\n                text: '\\n\\n...\\n\\n',\n                startPos: -1,\n                endPos: -1,\n                score: 0,\n                tokenCount: this._tokenizer.encode('\\n\\n...\\n\\n').length\n            };\n            sections.forEach(section => {\n                // Insert connectors between chunks\n                if (section.chunks.length > 1) {\n                    for (let i = 0; i < section.chunks.length - 1; i++) {\n                        section.chunks.splice(i + 1, 0, connector);\n                        section.tokenCount += connector.tokenCount;\n                        i++;\n                    }\n                }\n\n                // Add chunks to beginning and end of the section until maxTokens is reached\n                let budget = maxTokens - section.tokenCount;\n                if (budget > 40) {\n                    const sectionStart = section.chunks[0].startPos;\n                    const sectionEnd = section.chunks[section.chunks.length - 1].endPos;\n                    if (sectionStart > 0) {\n                        const beforeTex = text.substring(0, section.chunks[0].startPos);\n                        const beforeTokens = this.encodeBeforeText(beforeTex, Math.ceil(budget/2));\n                        const beforeBudget = sectionEnd < text.length - 1 ? Math.min(beforeTokens.length, Math.ceil(budget/2)) : Math.min(beforeTokens.length, budget);\n                        const chunk: SectionChunk = {\n                            text: this._tokenizer.decode(beforeTokens.slice(-beforeBudget)),\n                            startPos: sectionStart - beforeBudget,\n                            endPos: sectionStart - 1,\n                            score: 0,\n                            tokenCount: beforeBudget\n                        };\n                        section.chunks.unshift(chunk);\n                        section.tokenCount += chunk.tokenCount;\n                        budget -= chunk.tokenCount;\n                    }\n\n                    if (sectionEnd < text.length - 1) {\n                        const afterText = text.substring(sectionEnd + 1);\n                        const afterTokens = this.encodeAfterText(afterText, budget);\n                        const afterBudget = Math.min(afterTokens.length, budget);\n                        const chunk: SectionChunk = {\n                            text: this._tokenizer.decode(afterTokens.slice(0, afterBudget)),\n                            startPos: sectionEnd + 1,\n                            endPos: sectionEnd + afterBudget,\n                            score: 0,\n                            tokenCount: afterBudget\n                        };\n                        section.chunks.push(chunk);\n                        section.tokenCount += chunk.tokenCount;\n                        budget -= chunk.tokenCount;\n                    }\n                }\n            });\n        }\n\n        // Return final rendered sections\n        return sections.map(section => {\n            let text = '';\n            section.chunks.forEach(chunk => text += chunk.text);\n            return {\n                text: text,\n                tokenCount: section.tokenCount,\n                score: section.score\n            };\n        });\n    }\n\n    private encodeBeforeText(text: string, budget: number): number[] {\n        const maxLength = budget * 8;\n        const substr = text.length <= maxLength ? text : text.substring(text.length - maxLength);\n        return this._tokenizer.encode(substr);\n    }\n    \n    private encodeAfterText(text: string, budget: number): number[] {\n        const maxLength = budget * 8;\n        const substr = text.length <= maxLength ? text : text.substring(0, maxLength);\n        return this._tokenizer.encode(substr);\n    }\n\n}","file":"/src/LocalDocumentResult.ts","language":"typescript","fileHash":"9a21327011f815b3f5108afe67a1606cfca2bd116b190e26b519cefb8922cc08","hash":"933bc96069c29eff0a6e20390c07e4e33f1417db44b5bf669c4b539eb498c3ab","processedContent":"export class LocalDocumentResult extends LocalDocument { #This code defines a class called LocalDocument that represents a document stored on the local file system. It has methods for loading metadata and text content, as well as checking if a file with the same name as the document ID exists in the specified folder.\n    private readonly _chunks: QueryResult<DocumentChunkMetadata>[];\n    \"\"\"\n    scip-typescript npm vectra 0.5.5 src/`types.ts`/QueryResult#: This code defines an interface for a query result, which includes an item (an index item with ID, metadata, vector, and other properties), a score (a number representing the relevance of the item to the query).\n    scip-typescript npm vectra 0.5.5 src/`types.ts`/DocumentChunkMetadata#: This code defines an interface for document chunk metadata, which includes a document ID, start and end positions, and a key-value pair with a type of metadata.\n    \"\"\"\n    private readonly _tokenizer: Tokenizer; #This code defines an interface for a tokenizer, which is a class that takes in a list of numbers and returns a string, and also takes in a string and returns a list of numbers.\n    private readonly _score: number;\n\n    public constructor(folderPath: string, id: string, uri: string, chunks: QueryResult<DocumentChunkMetadata>[], tokenizer: Tokenizer) {\n    \"\"\"\n    scip-typescript npm vectra 0.5.5 src/`types.ts`/QueryResult#: This code defines an interface for a query result, which includes an item (an index item with ID, metadata, vector, and other properties), a score (a number representing the relevance of the item to the query).\n    scip-typescript npm vectra 0.5.5 src/`types.ts`/DocumentChunkMetadata#: This code defines an interface for document chunk metadata, which includes a document ID, start and end positions, and a key-value pair with a type of metadata.\n    scip-typescript npm vectra 0.5.5 src/`types.ts`/Tokenizer#: This code defines an interface for a tokenizer, which is a class that takes in a list of numbers and returns a string, and also takes in a string and returns a list of numbers.\n    \"\"\"\n        super(folderPath, id, uri);\n        this._chunks = chunks; #undefined\n        this._tokenizer = tokenizer; #undefined\n\n        // Compute average score\n        let score = 0;\n        this._chunks.forEach(chunk => score += chunk.score); #undefined\n        this._score = score / this._chunks.length;\n        \"\"\"\n        scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#_chunks.: undefined\n        scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#_score.: undefined\n        \"\"\"\n    }\n\n    public get chunks(): QueryResult<DocumentChunkMetadata>[] {\n    \"\"\"\n    scip-typescript npm vectra 0.5.5 src/`types.ts`/QueryResult#: This code defines an interface for a query result, which includes an item (an index item with ID, metadata, vector, and other properties), a score (a number representing the relevance of the item to the query).\n    scip-typescript npm vectra 0.5.5 src/`types.ts`/DocumentChunkMetadata#: This code defines an interface for document chunk metadata, which includes a document ID, start and end positions, and a key-value pair with a type of metadata.\n    \"\"\"\n        return this._chunks; #undefined\n    }\n\n    public get score(): number {\n        return this._score; #undefined\n    }\n\n    public async renderSections(maxTokens: number, maxSections: number, overlappingChunks = true): Promise<DocumentTextSection[]> {\n        \"\"\"This code is a method that takes in three parameters: maxTokens, maxSections, and overlappingChunks. It reads the text content of a file and splits it into sections based on relevance scores. The method returns an array of sections, each with its own text, token count, and score.\"\"\"\n        pass\n\n    private encodeBeforeText(text: string, budget: number): number[] {\n        \"\"\"This code takes a string `text` and a number `budget`, and returns an array of numbers that represent the encoded text. The encoding is done using a tokenizer, which is a class that takes a string and returns an array of tokens. The length of the array is limited by the budget, which is a measure of the amount of memory available for the encoding.\"\"\"\n        pass\n    \n    private encodeAfterText(text: string, budget: number): number[] {\n        \"\"\"This code takes a string `text` and a number `budget`, and returns an array of numbers that represent the encoded text. The encoding is done using a tokenizer, which truncates the text if it exceeds the budget and then encodes the truncated text.\"\"\"\n        pass\n\n}","documentation":"This code defines a class called LocalDocumentResult that represents a document stored on the local file system. It has methods for loading metadata and text content, as well as checking if a file with the same name as the document ID exists in the specified folder."}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#renderSections().","attributes":{"range":[27,4,193,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#renderSections().","content":"public async renderSections(maxTokens: number, maxSections: number, overlappingChunks = true): Promise<DocumentTextSection[]> {\n        // Load text from disk\n        const text = await this.loadText();\n\n        // First check to see if the entire document is less than maxTokens\n        if (text.length <= (maxTokens * 8)) {\n            const tokens = this._tokenizer.encode(text);\n            if (tokens.length < maxTokens) {\n                return [{\n                    text,\n                    tokenCount: tokens.length,\n                    score: 1.0\n                }];\n            }\n        }\n\n        // Otherwise, we need to split the document into sections\n        // - Add each chunk to a temp array and filter out any chunk that's longer then maxTokens.\n        // - Sort the array by startPos to arrange chunks in document order.\n        // - Generate a new array of sections by combining chunks until the maxTokens is reached for each section.\n        // - Generate an aggregate score for each section by averaging the score of each chunk in the section.\n        // - Sort the sections by score and limit to maxSections.\n        // - For each remaining section combine adjacent chunks of text.\n        // - Dynamically add overlapping chunks of text to each section until the maxTokens is reached.\n        const chunks: SectionChunk[] = this._chunks.map(chunk => {\n            const startPos = chunk.item.metadata.startPos;\n            const endPos = chunk.item.metadata.endPos;\n            const chunkText = text.substring(startPos, endPos + 1);\n            return {\n                text: chunkText,\n                startPos,\n                endPos,\n                score: chunk.score,\n                tokenCount: this._tokenizer.encode(chunkText).length\n            };\n        }).filter(chunk => chunk.tokenCount <= maxTokens).sort((a, b) => a.startPos - b.startPos);\n\n        // Check for no chunks\n        if (chunks.length === 0) {\n            // Take the top chunk and return a subset of its text\n            const topChunk = this._chunks[0];\n            const startPos = topChunk.item.metadata.startPos;\n            const endPos = topChunk.item.metadata.endPos;\n            const chunkText = text.substring(startPos, endPos + 1);\n            const tokens = this._tokenizer.encode(chunkText);\n            return [{\n                text: this._tokenizer.decode(tokens.slice(0, maxTokens)),\n                tokenCount: maxTokens,\n                score: topChunk.score\n            }];\n        }\n\n        // Generate sections\n        const sections: Section[] = [{\n            chunks: [],\n            score: 0,\n            tokenCount: 0\n        }];\n        for (let i = 0; i < chunks.length; i++) {\n            const chunk = chunks[i];\n            let section = sections[sections.length - 1];\n            if (section.tokenCount + chunk.tokenCount > maxTokens) {\n                sections.push({\n                    chunks: [],\n                    score: 0,\n                    tokenCount: 0\n                });\n            }\n            sections[sections.length - 1].chunks.push(chunk);\n            sections[sections.length - 1].score += chunk.score;\n            sections[sections.length - 1].tokenCount += chunk.tokenCount;\n        }\n\n        // Normalize section scores\n        sections.forEach(section => section.score /= section.chunks.length);\n\n        // Sort sections by score and limit to maxSections\n        sections.sort((a, b) => b.score - a.score);\n        if (sections.length > maxSections) {\n            sections.splice(maxSections, sections.length - maxSections);\n        }\n\n        // Combine adjacent chunks of text\n        sections.forEach(section => {\n            for (let i = 0; i < section.chunks.length - 1; i++) {\n                const chunk = section.chunks[i];\n                const nextChunk = section.chunks[i + 1];\n                if (chunk.endPos + 1 === nextChunk.startPos) {\n                    chunk.text += nextChunk.text;\n                    chunk.endPos = nextChunk.endPos;\n                    chunk.tokenCount += nextChunk.tokenCount;\n                    section.chunks.splice(i + 1, 1);\n                    i--;\n                }\n            }\n        });\n\n        // Add overlapping chunks of text to each section until the maxTokens is reached\n        if (overlappingChunks) {\n            const connector: SectionChunk = {\n                text: '\\n\\n...\\n\\n',\n                startPos: -1,\n                endPos: -1,\n                score: 0,\n                tokenCount: this._tokenizer.encode('\\n\\n...\\n\\n').length\n            };\n            sections.forEach(section => {\n                // Insert connectors between chunks\n                if (section.chunks.length > 1) {\n                    for (let i = 0; i < section.chunks.length - 1; i++) {\n                        section.chunks.splice(i + 1, 0, connector);\n                        section.tokenCount += connector.tokenCount;\n                        i++;\n                    }\n                }\n\n                // Add chunks to beginning and end of the section until maxTokens is reached\n                let budget = maxTokens - section.tokenCount;\n                if (budget > 40) {\n                    const sectionStart = section.chunks[0].startPos;\n                    const sectionEnd = section.chunks[section.chunks.length - 1].endPos;\n                    if (sectionStart > 0) {\n                        const beforeTex = text.substring(0, section.chunks[0].startPos);\n                        const beforeTokens = this.encodeBeforeText(beforeTex, Math.ceil(budget/2));\n                        const beforeBudget = sectionEnd < text.length - 1 ? Math.min(beforeTokens.length, Math.ceil(budget/2)) : Math.min(beforeTokens.length, budget);\n                        const chunk: SectionChunk = {\n                            text: this._tokenizer.decode(beforeTokens.slice(-beforeBudget)),\n                            startPos: sectionStart - beforeBudget,\n                            endPos: sectionStart - 1,\n                            score: 0,\n                            tokenCount: beforeBudget\n                        };\n                        section.chunks.unshift(chunk);\n                        section.tokenCount += chunk.tokenCount;\n                        budget -= chunk.tokenCount;\n                    }\n\n                    if (sectionEnd < text.length - 1) {\n                        const afterText = text.substring(sectionEnd + 1);\n                        const afterTokens = this.encodeAfterText(afterText, budget);\n                        const afterBudget = Math.min(afterTokens.length, budget);\n                        const chunk: SectionChunk = {\n                            text: this._tokenizer.decode(afterTokens.slice(0, afterBudget)),\n                            startPos: sectionEnd + 1,\n                            endPos: sectionEnd + afterBudget,\n                            score: 0,\n                            tokenCount: afterBudget\n                        };\n                        section.chunks.push(chunk);\n                        section.tokenCount += chunk.tokenCount;\n                        budget -= chunk.tokenCount;\n                    }\n                }\n            });\n        }\n\n        // Return final rendered sections\n        return sections.map(section => {\n            let text = '';\n            section.chunks.forEach(chunk => text += chunk.text);\n            return {\n                text: text,\n                tokenCount: section.tokenCount,\n                score: section.score\n            };\n        });\n    }","file":"/src/LocalDocumentResult.ts","language":"typescript","fileHash":"9a21327011f815b3f5108afe67a1606cfca2bd116b190e26b519cefb8922cc08","hash":"c566801b5745889cbd1f2830ee8fb684c2ba196dc926f41c7e9522812968febc","processedContent":"public async renderSections(maxTokens: number, maxSections: number, overlappingChunks = true): Promise<DocumentTextSection[]> {\n        // Load text from disk\n        const text = await this.loadText(); #This code is a method that reads the text content of a file and returns it as a string. It uses the `fs` module to read the file, and the `path` module to join the file path with the file name. The method also has error handling to catch any errors that may occur during the reading process.\n\n        // First check to see if the entire document is less than maxTokens\n        if (text.length <= (maxTokens * 8)) {\n            const tokens = this._tokenizer.encode(text);\n            \"\"\"\n            scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#_tokenizer.: undefined\n            scip-typescript npm vectra 0.5.5 src/`types.ts`/Tokenizer#encode().: undefined\n            \"\"\"\n            if (tokens.length < maxTokens) {\n                return [{\n                    text,\n                    tokenCount: tokens.length,\n                    score: 1.0\n                }];\n            }\n        }\n\n        // Otherwise, we need to split the document into sections\n        // - Add each chunk to a temp array and filter out any chunk that's longer then maxTokens.\n        // - Sort the array by startPos to arrange chunks in document order.\n        // - Generate a new array of sections by combining chunks until the maxTokens is reached for each section.\n        // - Generate an aggregate score for each section by averaging the score of each chunk in the section.\n        // - Sort the sections by score and limit to maxSections.\n        // - For each remaining section combine adjacent chunks of text.\n        // - Dynamically add overlapping chunks of text to each section until the maxTokens is reached.\n        const chunks: SectionChunk[] = this._chunks.map(chunk => {\n        \"\"\"\n        scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/SectionChunk#: This code defines a data structure called SectionChunk, which contains information about a section of text, including the text itself, its starting and ending positions, a score indicating its relevance, and the number of tokens (words or phrases) in the section.\n        scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#_chunks.: undefined\n        \"\"\"\n            const startPos = chunk.item.metadata.startPos;\n            const endPos = chunk.item.metadata.endPos;\n            const chunkText = text.substring(startPos, endPos + 1);\n            return {\n                text: chunkText,\n                startPos,\n                endPos,\n                score: chunk.score,\n                tokenCount: this._tokenizer.encode(chunkText).length\n                \"\"\"\n                scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#_tokenizer.: undefined\n                scip-typescript npm vectra 0.5.5 src/`types.ts`/Tokenizer#encode().: undefined\n                \"\"\"\n            };\n        }).filter(chunk => chunk.tokenCount <= maxTokens).sort((a, b) => a.startPos - b.startPos);\n\n        // Check for no chunks\n        if (chunks.length === 0) {\n            // Take the top chunk and return a subset of its text\n            const topChunk = this._chunks[0]; #undefined\n            const startPos = topChunk.item.metadata.startPos;\n            const endPos = topChunk.item.metadata.endPos;\n            const chunkText = text.substring(startPos, endPos + 1);\n            const tokens = this._tokenizer.encode(chunkText);\n            \"\"\"\n            scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#_tokenizer.: undefined\n            scip-typescript npm vectra 0.5.5 src/`types.ts`/Tokenizer#encode().: undefined\n            \"\"\"\n            return [{\n                text: this._tokenizer.decode(tokens.slice(0, maxTokens)),\n                \"\"\"\n                scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#_tokenizer.: undefined\n                scip-typescript npm vectra 0.5.5 src/`types.ts`/Tokenizer#decode().: undefined\n                \"\"\"\n                tokenCount: maxTokens,\n                score: topChunk.score\n            }];\n        }\n\n        // Generate sections\n        const sections: Section[] = [{ #This code defines a data structure called Section, which contains information about a section of text, including its relevance score and the number of tokens in the section.\n            chunks: [],\n            score: 0,\n            tokenCount: 0\n        }];\n        for (let i = 0; i < chunks.length; i++) {\n            const chunk = chunks[i];\n            let section = sections[sections.length - 1];\n            if (section.tokenCount + chunk.tokenCount > maxTokens) {\n                sections.push({\n                    chunks: [],\n                    score: 0,\n                    tokenCount: 0\n                });\n            }\n            sections[sections.length - 1].chunks.push(chunk);\n            sections[sections.length - 1].score += chunk.score;\n            sections[sections.length - 1].tokenCount += chunk.tokenCount;\n        }\n\n        // Normalize section scores\n        sections.forEach(section => section.score /= section.chunks.length);\n\n        // Sort sections by score and limit to maxSections\n        sections.sort((a, b) => b.score - a.score);\n        if (sections.length > maxSections) {\n            sections.splice(maxSections, sections.length - maxSections);\n        }\n\n        // Combine adjacent chunks of text\n        sections.forEach(section => {\n            for (let i = 0; i < section.chunks.length - 1; i++) {\n                const chunk = section.chunks[i];\n                const nextChunk = section.chunks[i + 1];\n                if (chunk.endPos + 1 === nextChunk.startPos) {\n                    chunk.text += nextChunk.text;\n                    chunk.endPos = nextChunk.endPos;\n                    chunk.tokenCount += nextChunk.tokenCount;\n                    section.chunks.splice(i + 1, 1);\n                    i--;\n                }\n            }\n        });\n\n        // Add overlapping chunks of text to each section until the maxTokens is reached\n        if (overlappingChunks) {\n            const connector: SectionChunk = { #This code defines a data structure called SectionChunk, which contains information about a section of text, including the text itself, its starting and ending positions, a score indicating its relevance, and the number of tokens (words or phrases) in the section.\n                text: '\\n\\n...\\n\\n',\n                startPos: -1,\n                endPos: -1,\n                score: 0,\n                tokenCount: this._tokenizer.encode('\\n\\n...\\n\\n').length\n                \"\"\"\n                scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#_tokenizer.: undefined\n                scip-typescript npm vectra 0.5.5 src/`types.ts`/Tokenizer#encode().: undefined\n                \"\"\"\n            };\n            sections.forEach(section => {\n                // Insert connectors between chunks\n                if (section.chunks.length > 1) {\n                    for (let i = 0; i < section.chunks.length - 1; i++) {\n                        section.chunks.splice(i + 1, 0, connector);\n                        section.tokenCount += connector.tokenCount; #undefined\n                        i++;\n                    }\n                }\n\n                // Add chunks to beginning and end of the section until maxTokens is reached\n                let budget = maxTokens - section.tokenCount;\n                if (budget > 40) {\n                    const sectionStart = section.chunks[0].startPos;\n                    const sectionEnd = section.chunks[section.chunks.length - 1].endPos;\n                    if (sectionStart > 0) {\n                        const beforeTex = text.substring(0, section.chunks[0].startPos);\n                        const beforeTokens = this.encodeBeforeText(beforeTex, Math.ceil(budget/2)); #This code takes a string `text` and a number `budget`, and returns an array of numbers that represent the encoded text. The encoding is done using a tokenizer, which is a class that takes a string and returns an array of tokens. The length of the array is limited by the budget, which is a measure of the amount of memory available for the encoding.\n                        const beforeBudget = sectionEnd < text.length - 1 ? Math.min(beforeTokens.length, Math.ceil(budget/2)) : Math.min(beforeTokens.length, budget);\n                        const chunk: SectionChunk = { #This code defines a data structure called SectionChunk, which contains information about a section of text, including the text itself, its starting and ending positions, a score indicating its relevance, and the number of tokens (words or phrases) in the section.\n                            text: this._tokenizer.decode(beforeTokens.slice(-beforeBudget)),\n                            \"\"\"\n                            scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#_tokenizer.: undefined\n                            scip-typescript npm vectra 0.5.5 src/`types.ts`/Tokenizer#decode().: undefined\n                            \"\"\"\n                            startPos: sectionStart - beforeBudget,\n                            endPos: sectionStart - 1,\n                            score: 0,\n                            tokenCount: beforeBudget\n                        };\n                        section.chunks.unshift(chunk);\n                        section.tokenCount += chunk.tokenCount; #undefined\n                        budget -= chunk.tokenCount; #undefined\n                    }\n\n                    if (sectionEnd < text.length - 1) {\n                        const afterText = text.substring(sectionEnd + 1);\n                        const afterTokens = this.encodeAfterText(afterText, budget); #This code takes a string `text` and a number `budget`, and returns an array of numbers that represent the encoded text. The encoding is done using a tokenizer, which truncates the text if it exceeds the budget and then encodes the truncated text.\n                        const afterBudget = Math.min(afterTokens.length, budget);\n                        const chunk: SectionChunk = { #This code defines a data structure called SectionChunk, which contains information about a section of text, including the text itself, its starting and ending positions, a score indicating its relevance, and the number of tokens (words or phrases) in the section.\n                            text: this._tokenizer.decode(afterTokens.slice(0, afterBudget)),\n                            \"\"\"\n                            scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#_tokenizer.: undefined\n                            scip-typescript npm vectra 0.5.5 src/`types.ts`/Tokenizer#decode().: undefined\n                            \"\"\"\n                            startPos: sectionEnd + 1,\n                            endPos: sectionEnd + afterBudget,\n                            score: 0,\n                            tokenCount: afterBudget\n                        };\n                        section.chunks.push(chunk);\n                        section.tokenCount += chunk.tokenCount; #undefined\n                        budget -= chunk.tokenCount; #undefined\n                    }\n                }\n            });\n        }\n\n        // Return final rendered sections\n        return sections.map(section => {\n            let text = '';\n            section.chunks.forEach(chunk => text += chunk.text);\n            return {\n                text: text,\n                tokenCount: section.tokenCount,\n                score: section.score\n            };\n        });\n    }","documentation":"This code is a method that takes in three parameters: maxTokens, maxSections, and overlappingChunks. It reads the text content of a file and splits it into sections based on relevance scores. The method returns an array of sections, each with its own text, token count, and score."}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#encodeBeforeText().","attributes":{"range":[195,4,199,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#encodeBeforeText().","content":"private encodeBeforeText(text: string, budget: number): number[] {\n        const maxLength = budget * 8;\n        const substr = text.length <= maxLength ? text : text.substring(text.length - maxLength);\n        return this._tokenizer.encode(substr);\n    }","file":"/src/LocalDocumentResult.ts","language":"typescript","fileHash":"9a21327011f815b3f5108afe67a1606cfca2bd116b190e26b519cefb8922cc08","hash":"f22aa175a713d5fa179cbd58b57c51bd2562d90693ed20d36875efeaac6f3e1d","processedContent":"private encodeBeforeText(text: string, budget: number): number[] {\n        const maxLength = budget * 8;\n        const substr = text.length <= maxLength ? text : text.substring(text.length - maxLength);\n        return this._tokenizer.encode(substr);\n        \"\"\"\n        scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#_tokenizer.: undefined\n        scip-typescript npm vectra 0.5.5 src/`types.ts`/Tokenizer#encode().: undefined\n        \"\"\"\n    }","documentation":"This code takes a string `text` and a number `budget`, and returns an array of numbers that represent the encoded text. The encoding is done using a tokenizer, which is a class that takes a string and returns an array of tokens. The length of the array is limited by the budget, which is a measure of the amount of memory available for the encoding."}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#encodeAfterText().","attributes":{"range":[201,4,205,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#encodeAfterText().","content":"private encodeAfterText(text: string, budget: number): number[] {\n        const maxLength = budget * 8;\n        const substr = text.length <= maxLength ? text : text.substring(0, maxLength);\n        return this._tokenizer.encode(substr);\n    }","file":"/src/LocalDocumentResult.ts","language":"typescript","fileHash":"9a21327011f815b3f5108afe67a1606cfca2bd116b190e26b519cefb8922cc08","hash":"7eddb9a0af8871894a897e989e599123996975b630252ef9868b8a9b65e1f2e7","processedContent":"private encodeAfterText(text: string, budget: number): number[] {\n        const maxLength = budget * 8;\n        const substr = text.length <= maxLength ? text : text.substring(0, maxLength);\n        return this._tokenizer.encode(substr);\n        \"\"\"\n        scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#_tokenizer.: undefined\n        scip-typescript npm vectra 0.5.5 src/`types.ts`/Tokenizer#encode().: undefined\n        \"\"\"\n    }","documentation":"This code takes a string `text` and a number `budget`, and returns an array of numbers that represent the encoded text. The encoding is done using a tokenizer, which truncates the text if it exceeds the budget and then encodes the truncated text."}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/SectionChunk#","attributes":{"range":[209,0,215,1],"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/SectionChunk#","content":"interface SectionChunk {\n    text: string;\n    startPos: number;\n    endPos: number;\n    score: number;\n    tokenCount: number;\n}","file":"/src/LocalDocumentResult.ts","language":"typescript","fileHash":"9a21327011f815b3f5108afe67a1606cfca2bd116b190e26b519cefb8922cc08","hash":"c28db6646aef05b459a480779d36c5775c099e1c583bd95848e0fead018188c8","processedContent":"interface SectionChunk {\n    text: string;\n    startPos: number;\n    endPos: number;\n    score: number;\n    tokenCount: number;\n}","documentation":"This code defines a data structure called SectionChunk, which contains information about a section of text, including the text itself, its starting and ending positions, a score indicating its relevance, and the number of tokens (words or phrases) in the section."}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/Section#","attributes":{"range":[217,0,221,1],"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/Section#","content":"interface Section {\n    chunks: SectionChunk[];\n    score: number;\n    tokenCount: number;\n}","file":"/src/LocalDocumentResult.ts","language":"typescript","fileHash":"9a21327011f815b3f5108afe67a1606cfca2bd116b190e26b519cefb8922cc08","hash":"84dded2af0cfa9514aa8cebe90fbb73176c5726be567c0f37f837ade1d233d7c","processedContent":"interface Section {\n    chunks: SectionChunk[]; #This code defines a data structure called SectionChunk, which contains information about a section of text, including the text itself, its starting and ending positions, a score indicating its relevance, and the number of tokens (words or phrases) in the section.\n    score: number;\n    tokenCount: number;\n}","documentation":"This code defines a data structure called Section, which contains information about a section of text, including its relevance score and the number of tokens in the section."}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#_chunks.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#_chunks.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#_tokenizer.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#_tokenizer.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#_score.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#_score.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`types.ts`/Tokenizer#decode().","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`types.ts`/Tokenizer#decode().","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/SectionChunk#tokenCount.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/SectionChunk#tokenCount.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/","attributes":{"range":[0,0,362,0],"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/","content":"import * as fs from 'fs/promises';\nimport * as path from 'path';\nimport { v4 } from 'uuid';\nimport { GPT3Tokenizer } from \"./GPT3Tokenizer\";\nimport { CreateIndexConfig, LocalIndex } from \"./LocalIndex\";\nimport { TextSplitter, TextSplitterConfig } from \"./TextSplitter\";\nimport { MetadataFilter, EmbeddingsModel, Tokenizer, MetadataTypes, EmbeddingsResponse, QueryResult, DocumentChunkMetadata, DocumentCatalogStats } from \"./types\";\nimport { LocalDocumentResult } from './LocalDocumentResult';\nimport { LocalDocument } from './LocalDocument';\n\nexport interface DocumentQueryOptions {\n    maxDocuments?: number;\n    maxChunks?: number;\n    filter?: MetadataFilter;\n}\n\nexport interface LocalDocumentIndexConfig {\n    folderPath: string;\n    embeddings?: EmbeddingsModel;\n    tokenizer?: Tokenizer;\n    chunkingConfig?: Partial<TextSplitterConfig>;\n}\n\nexport class LocalDocumentIndex extends LocalIndex {\n    private readonly _embeddings?: EmbeddingsModel;\n    private readonly _tokenizer: Tokenizer;\n    private readonly _chunkingConfig?: TextSplitterConfig;\n    private _catalog?: DocumentCatalog;\n    private _newCatalog?: DocumentCatalog;\n\n\n    public constructor(config: LocalDocumentIndexConfig) {\n        super(config.folderPath);\n        this._embeddings = config.embeddings;\n        this._chunkingConfig = Object.assign({\n            keepSeparators: true,\n            chunkSize: 512,\n            chunkOverlap: 0,\n        } as TextSplitterConfig, config.chunkingConfig);\n        this._tokenizer = config.tokenizer ?? this._chunkingConfig.tokenizer ?? new GPT3Tokenizer();\n        this._chunkingConfig.tokenizer = this._tokenizer;\n    }\n\n    /**\n     * Returns true if the document catalog exists.\n     */\n    public async isCatalogCreated(): Promise<boolean> {\n        try {\n            await fs.access(path.join(this.folderPath, 'catalog.json'));\n            return true;\n        } catch (err: unknown) {\n            return false;\n        }\n    }\n\n    public async getDocumentId(uri: string): Promise<string | undefined> {\n        await this.loadIndexData();\n        return this._catalog?.uriToId[uri];\n    }\n\n    public async getDocumentUri(documentId: string): Promise<string | undefined> {\n        await this.loadIndexData();\n        return this._catalog?.idToUri[documentId];\n    }\n\n    public async createIndex(config?: CreateIndexConfig): Promise<void> {\n        await super.createIndex(config);\n        await this.loadIndexData();\n    }\n\n    public async deleteDocument(uri: string): Promise<void> {\n        // Lookup document ID\n        const documentId = await this.getDocumentId(uri);\n        if (documentId == undefined) {\n            return;\n        }\n\n        // Delete document chunks from index and remove from catalog\n        await this.beginUpdate();\n        try {\n            // Get list of chunks for document\n            const chunks = await this.listItemsByMetadata<DocumentChunkMetadata>({ documentId });\n\n            // Delete chunks\n            for (const chunk of chunks) {\n                await this.deleteItem(chunk.id);\n            }\n\n            // Remove entry from catalog\n            delete this._newCatalog!.uriToId[uri];\n            delete this._newCatalog!.idToUri[documentId];\n            this._newCatalog!.count--;\n\n            // Commit changes\n            await this.endUpdate();\n        } catch (err: unknown) {\n            // Cancel update and raise error\n            this.cancelUpdate();\n            throw new Error(`Error deleting document \"${uri}\": ${(err as any).toString()}`);\n        }\n\n        // Delete text file from disk\n        try {\n            await fs.unlink(path.join(this.folderPath, `${documentId}.txt`));\n        } catch (err: unknown) {\n            throw new Error(`Error removing text file for document \"${uri}\" from disk: ${(err as any).toString()}`);\n        }\n\n        // Delete metadata file from disk\n        try {\n            await fs.unlink(path.join(this.folderPath, `${documentId}.json`));\n        } catch (err: unknown) {\n            // Ignore error\n        }\n    }\n\n    public async getCatalogStats(): Promise<DocumentCatalogStats> {\n        const stats = await this.getIndexStats()\n        return {\n            version: this._catalog!.version,\n            documents: this._catalog!.count,\n            chunks: stats.items,\n            metadata_config: stats.metadata_config\n        };\n    }\n\n    /**\n     * Adds a document to the catalog.\n     * @remarks\n     * A new update is started if one is not already in progress. If an document with the same uri\n     * already exists, it will be replaced.\n     * @param uri - Document URI\n     * @param text - Document text\n     * @param docType - Optional. Document type\n     * @param metadata - Optional. Document metadata to index\n     * @returns Inserted document\n     */\n    public async upsertDocument(uri: string, text: string, docType?: string, metadata?: Record<string, MetadataTypes>): Promise<LocalDocument> {\n        // Ensure embeddings configured\n        if (!this._embeddings) {\n            throw new Error(`Embeddings model not configured.`);\n        }\n\n        // Check for existing document ID\n        let documentId = await this.getDocumentId(uri);\n        if (documentId != undefined) {\n            // Delete existing document\n            await this.deleteDocument(uri);\n        } else {\n            // Generate new document ID\n            documentId = v4();\n        }\n\n        // Initialize text splitter settings\n        const config = Object.assign({ docType }, this._chunkingConfig);\n        if (config.docType == undefined) {\n            // Populate docType based on extension\n            const pos = uri.lastIndexOf('.');\n            if (pos >= 0) {\n                const ext = uri.substring(pos + 1).toLowerCase();\n                config.docType = ext;\n            }\n        }\n\n        // Split text into chunks\n        const splitter = new TextSplitter(config);\n        const chunks = splitter.split(text);\n\n        // Break chunks into batches for embedding generation\n        let totalTokens = 0;\n        const chunkBatches: string[][] = [];\n        let currentBatch: string[] = [];\n        for (const chunk of chunks) {\n            totalTokens += chunk.tokens.length;\n            if (totalTokens > this._embeddings.maxTokens) {\n                chunkBatches.push(currentBatch);\n                currentBatch = [];\n                totalTokens = chunk.tokens.length;\n            }\n            currentBatch.push(chunk.text.replace(/\\n/g, ' '));\n        }\n        if (currentBatch.length > 0) {\n            chunkBatches.push(currentBatch);\n        }\n\n        // Generate embeddings for chunks\n        const embeddings: number[][] = [];\n        for (const batch of chunkBatches) {\n            let response: EmbeddingsResponse;\n            try {\n                response = await this._embeddings.createEmbeddings(batch);\n            } catch (err: unknown) {\n                throw new Error(`Error generating embeddings: ${(err as any).toString()}`);\n            }\n\n            // Check for error\n            if (response.status != 'success') {\n                throw new Error(`Error generating embeddings: ${response.message}`);\n            }\n\n            // Add embeddings to output\n            for (const embedding of response.output!) {\n                embeddings.push(embedding);\n            }\n        }\n\n        // Add document chunks to index\n        await this.beginUpdate();\n        try {\n            // Add chunks to index\n            for (let i = 0; i < chunks.length; i++) {\n                const chunk = chunks[i];\n                const embedding = embeddings[i];\n                const chunkMetadata: DocumentChunkMetadata = Object.assign({\n                    documentId,\n                    startPos: chunk.startPos,\n                    endPos: chunk.endPos,\n                }, metadata);\n                await this.insertItem({\n                    id: v4(),\n                    metadata: chunkMetadata,\n                    vector: embedding,\n                });\n            }\n\n            // Save metadata file to disk\n            if (metadata != undefined) {\n                await fs.writeFile(path.join(this.folderPath, `${documentId}.json`), JSON.stringify(metadata));\n            }\n\n            // Save text file to disk\n            await fs.writeFile(path.join(this.folderPath, `${documentId}.txt`), text);\n\n            // Add entry to catalog\n            this._newCatalog!.uriToId[uri] = documentId;\n            this._newCatalog!.idToUri[documentId] = uri;\n            this._newCatalog!.count++;\n\n            // Commit changes\n            await this.endUpdate();\n        } catch (err: unknown) {\n            // Cancel update and raise error\n            this.cancelUpdate();\n            throw new Error(`Error adding document \"${uri}\": ${(err as any).toString()}`);\n        }\n\n        // Return document\n        return new LocalDocument(this.folderPath, documentId, uri);\n    }\n\n\n    public async queryDocuments(query: string, options?: DocumentQueryOptions): Promise<LocalDocumentResult[]> {\n        // Ensure embeddings configured\n        if (!this._embeddings) {\n            throw new Error(`Embeddings model not configured.`);\n        }\n\n        // Ensure options are defined\n        options = Object.assign({\n            maxDocuments: 10,\n            maxChunks: 50,\n        }, options);\n\n        // Generate embeddings for query\n        let embeddings: EmbeddingsResponse;\n        try {\n            embeddings = await this._embeddings.createEmbeddings(query.replace(/\\n/g, ' '));\n        } catch (err: unknown) {\n            throw new Error(`Error generating embeddings for query: ${(err as any).toString()}`);\n        }\n\n        // Check for error\n        if (embeddings.status != 'success') {\n            throw new Error(`Error generating embeddings for query: ${embeddings.message}`);\n        }\n\n        // Query index for chunks\n        const results = await this.queryItems<DocumentChunkMetadata>(embeddings.output![0], options.maxChunks!, options.filter);\n\n        // Group chunks by document\n        const documentChunks: { [documentId: string]: QueryResult<DocumentChunkMetadata>[]; } = {};\n        for (const result  of results) {\n            const metadata = result.item.metadata;\n            if (documentChunks[metadata.documentId] == undefined) {\n                documentChunks[metadata.documentId] = [];\n            }\n            documentChunks[metadata.documentId].push(result);\n        }\n\n        // Create a document result for each document\n        const documentResults: LocalDocumentResult[] = [];\n        for (const documentId in documentChunks) {\n            const chunks = documentChunks[documentId];\n            const uri = await this.getDocumentUri(documentId) as string;\n            const documentResult = new LocalDocumentResult(this.folderPath, documentId, uri, chunks, this._tokenizer);\n            documentResults.push(documentResult);\n        }\n\n        // Sort document results by score and return top results\n        return documentResults.sort((a, b) => b.score - a.score).slice(0, options.maxDocuments!);\n    }\n\n    // Overrides\n\n    public async beginUpdate(): Promise<void> {\n        await super.beginUpdate();\n        this._newCatalog = Object.assign({}, this._catalog);\n    }\n\n    public cancelUpdate(): void {\n        super.cancelUpdate();\n        this._newCatalog = undefined;\n    }\n\n    public async endUpdate(): Promise<void> {\n        await super.endUpdate();\n\n        try {\n            // Save catalog\n            await fs.writeFile(path.join(this.folderPath, 'catalog.json'), JSON.stringify(this._newCatalog));\n            this._catalog = this._newCatalog;\n            this._newCatalog = undefined;\n        } catch(err: unknown) {\n            throw new Error(`Error saving document catalog: ${(err as any).toString()}`);\n        }\n    }\n\n    protected async loadIndexData(): Promise<void> {\n        await super.loadIndexData();\n\n        if (this._catalog) {\n            return;\n        }\n\n        const catalogPath = path.join(this.folderPath, 'catalog.json');\n        if (await this.isCatalogCreated()) {\n            // Load catalog\n            const buffer = await fs.readFile(catalogPath);\n            this._catalog = JSON.parse(buffer.toString());\n        } else {\n            try {\n                // Initialize catalog\n                this._catalog = {\n                    version: 1,\n                    count: 0,\n                    uriToId: {},\n                    idToUri: {},\n                };\n                await fs.writeFile(catalogPath, JSON.stringify(this._catalog));\n            } catch(err: unknown) {\n                throw new Error(`Error creating document catalog: ${(err as any).toString()}`);\n            }\n        }\n    }\n}\n\ninterface DocumentCatalog {\n    version: number;\n    count: number;\n    uriToId: { [uri: string]: string; };\n    idToUri: { [id: string]: string; };\n}\n","file":"/src/LocalDocumentIndex.ts","language":"typescript","fileHash":"6f23de8064ad58a75e6251d6940f9751f6a6e8f389e9f6bffdb7113f655b8b36","hash":"6f23de8064ad58a75e6251d6940f9751f6a6e8f389e9f6bffdb7113f655b8b36","processedContent":"import * as fs from 'fs/promises';\n\"\"\"\nscip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/: undefined\nscip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/: undefined\n\"\"\"\nimport * as path from 'path';\n\"\"\"\nscip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/: undefined\nscip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path.: undefined\nscip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/: undefined\n\"\"\"\nimport { v4 } from 'uuid';\n\"\"\"\nscip-typescript npm @types/uuid 9.0.7 `index.d.ts`/v4.: undefined\nscip-typescript npm @types/uuid 9.0.7 `index.d.ts`/: undefined\n\"\"\"\nimport { GPT3Tokenizer } from \"./GPT3Tokenizer\";\n\"\"\"\nscip-typescript npm vectra 0.5.5 src/`GPT3Tokenizer.ts`/GPT3Tokenizer#: This code defines a class called `GPT3Tokenizer` that implements an interface for tokenizing text. The class has two functions, `decode` and `encode`, which are not defined and return undefined.\nscip-typescript npm vectra 0.5.5 src/`GPT3Tokenizer.ts`/: This code defines a class called `GPT3Tokenizer` that implements an interface for tokenizing text using GPT-3's encoder. The class has two functions, `decode` and `encode`, which are not defined and return undefined.\n\"\"\"\nimport { CreateIndexConfig, LocalIndex } from \"./LocalIndex\";\n\"\"\"\nscip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/CreateIndexConfig#: This code defines an interface for creating an index in a database, with options to specify the version number, whether to delete the index if it already exists, and metadata configuration options such as which fields to index.\nscip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#: This code defines a class called `LocalIndex` that manages an index file on disk. It provides methods for creating, updating, and querying the index, as well as loading and saving the index to disk.\nscip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/: This code defines a class called `LocalIndex` that manages a local vector index, which is used to create, update, and query an index file on disk. It also defines various interfaces and types for an AI model that can create embeddings for text inputs.\n\"\"\"\nimport { TextSplitter, TextSplitterConfig } from \"./TextSplitter\";\n\"\"\"\nscip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#: This code defines a class called `TextSplitter` that takes in a string and returns a list of strings based on certain rules. The interface specifies the configuration options for the text splitter, including the separators to use, whether to keep the separators in the output, the chunk size, and the overlap between chunks. Additionally, it includes a tokenizer interface that defines how to convert a string into a list of numbers and vice versa.\nscip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#: This code defines an interface for a text splitter, which is a class that takes in a string and returns a list of strings based on certain rules. The interface specifies the configuration options for the text splitter, including the separators to use, whether to keep the separators in the output, the chunk size, and the overlap between chunks. Additionally, it includes a tokenizer interface that defines how to convert a string into a list of numbers and vice versa.\nscip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/: The code defines a class called `TextSplitter` that takes in a string and returns a list of strings based on certain rules, with configuration options for separators, chunk size, and overlap. Additionally, it includes a tokenizer interface for converting strings into lists of numbers and vice versa.\n\"\"\"\nimport { MetadataFilter, EmbeddingsModel, Tokenizer, MetadataTypes, EmbeddingsResponse, QueryResult, DocumentChunkMetadata, DocumentCatalogStats } from \"./types\";\n\"\"\"\nscip-typescript npm vectra 0.5.5 src/`types.ts`/MetadataFilter#: This code defines a type called MetadataFilter, which is used to filter metadata in a database. It allows for filtering based on various conditions such as equality, greater than, less than, and more.\nscip-typescript npm vectra 0.5.5 src/`types.ts`/EmbeddingsModel#: This code defines an interface for an embeddings model, which allows for the creation of embeddings for text inputs. The interface includes a maximum number of tokens and a method for creating embeddings.\nscip-typescript npm vectra 0.5.5 src/`types.ts`/Tokenizer#: This code defines an interface for a tokenizer, which is a class that takes in a list of numbers and returns a string, and also takes in a string and returns a list of numbers.\nscip-typescript npm vectra 0.5.5 src/`types.ts`/MetadataTypes#: undefined\nscip-typescript npm vectra 0.5.5 src/`types.ts`/EmbeddingsResponse#: This code defines an interface for an embeddings response, which includes a status, optional output, message, model, and usage statistics. It is used to represent the result of a request for embeddings from a machine learning model.\nscip-typescript npm vectra 0.5.5 src/`types.ts`/QueryResult#: This code defines an interface for a query result, which includes an item (an index item with ID, metadata, vector, and other properties), a score (a number representing the relevance of the item to the query).\nscip-typescript npm vectra 0.5.5 src/`types.ts`/DocumentChunkMetadata#: This code defines an interface for document chunk metadata, which includes a document ID, start and end positions, and a key-value pair with a type of metadata.\nscip-typescript npm vectra 0.5.5 src/`types.ts`/DocumentCatalogStats#: This code defines an interface for a document catalog statistics object, which contains information about the number of documents, chunks, and metadata configuration.\nscip-typescript npm vectra 0.5.5 src/`types.ts`/: The code defines various interfaces and types for an AI model that can create embeddings for text inputs, including a response status, embeddings response, text chunk, text fetcher, index statistics, index item, metadata filter, query result, tokenizer, document chunk metadata, and document catalog statistics.\n\"\"\"\nimport { LocalDocumentResult } from './LocalDocumentResult';\n\"\"\"\nscip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#: This code defines a class called LocalDocumentResult that represents a document stored on the local file system. It has methods for loading metadata and text content, as well as checking if a file with the same name as the document ID exists in the specified folder.\nscip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/: The code defines a class called LocalDocumentResult that represents a document stored on the local file system, and includes methods for loading metadata and text content, as well as checking if a file with the same name as the document ID exists in the specified folder. It also defines various interfaces and types for an AI model that can create embeddings for text inputs.\n\"\"\"\nimport { LocalDocument } from './LocalDocument';\n\"\"\"\nscip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#: This code defines a class called LocalDocument that represents a document stored on the local file system. It has methods for loading metadata and text content, as well as checking if a file with the same name as the document ID exists in the specified folder.\nscip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/: This code defines a class called LocalDocument that represents a document stored on the local file system. It has properties for the folder path, ID, and URI, as well as methods for loading metadata and text content from the file system.\n\"\"\"\n\nexport interface DocumentQueryOptions {\n    \"\"\"This code defines a type called DocumentQueryOptions, which is used to specify options for querying documents in a database. It allows for filtering based on metadata and limits the number of documents and chunks returned.\"\"\"\n    pass\n\nexport interface LocalDocumentIndexConfig {\n    \"\"\"This code defines an interface for a local document index, which includes configuration options for creating embeddings, tokenizing text, and splitting text into chunks.\"\"\"\n    pass\n\nexport class LocalDocumentIndex extends LocalIndex {\n    \"\"\"This code defines a class called `LocalDocumentIndex` that manages an index file on disk and provides methods for creating, updating, and querying the index. It also includes configuration options for creating embeddings, tokenizing text, and splitting text into chunks.\"\"\"\n    pass\n\ninterface DocumentCatalog {\n    \"\"\"This code defines a data structure called DocumentCatalog, which stores information about documents in a digital library. It includes version number, count of documents, and two dictionaries to map between document URIs and IDs.\"\"\"\n    pass\n","documentation":"The code defines a class called `LocalDocumentIndex` that manages an index file on disk and provides methods for creating, updating, and querying the index. It also includes configuration options for creating embeddings, tokenizing text, and splitting text into chunks."}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/DocumentQueryOptions#","attributes":{"range":[10,0,14,1],"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/DocumentQueryOptions#","content":"export interface DocumentQueryOptions {\n    maxDocuments?: number;\n    maxChunks?: number;\n    filter?: MetadataFilter;\n}","file":"/src/LocalDocumentIndex.ts","language":"typescript","fileHash":"6f23de8064ad58a75e6251d6940f9751f6a6e8f389e9f6bffdb7113f655b8b36","hash":"8289e66667780cdaa7bfc67e33ae6351707f5beb5a31fd463d186afb53093d7b","processedContent":"export interface DocumentQueryOptions {\n    maxDocuments?: number;\n    maxChunks?: number;\n    filter?: MetadataFilter; #This code defines a type called MetadataFilter, which is used to filter metadata in a database. It allows for filtering based on various conditions such as equality, greater than, less than, and more.\n}","documentation":"This code defines a type called DocumentQueryOptions, which is used to specify options for querying documents in a database. It allows for filtering based on metadata and limits the number of documents and chunks returned."}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndexConfig#","attributes":{"range":[16,0,21,1],"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndexConfig#","content":"export interface LocalDocumentIndexConfig {\n    folderPath: string;\n    embeddings?: EmbeddingsModel;\n    tokenizer?: Tokenizer;\n    chunkingConfig?: Partial<TextSplitterConfig>;\n}","file":"/src/LocalDocumentIndex.ts","language":"typescript","fileHash":"6f23de8064ad58a75e6251d6940f9751f6a6e8f389e9f6bffdb7113f655b8b36","hash":"ce5949b9404f6d199c0eca6764c49ac510455c154e973b3720c285ef63e75895","processedContent":"export interface LocalDocumentIndexConfig {\n    folderPath: string;\n    embeddings?: EmbeddingsModel; #This code defines an interface for an embeddings model, which allows for the creation of embeddings for text inputs. The interface includes a maximum number of tokens and a method for creating embeddings.\n    tokenizer?: Tokenizer; #This code defines an interface for a tokenizer, which is a class that takes in a list of numbers and returns a string, and also takes in a string and returns a list of numbers.\n    chunkingConfig?: Partial<TextSplitterConfig>; #This code defines an interface for a text splitter, which is a class that takes in a string and returns a list of strings based on certain rules. The interface specifies the configuration options for the text splitter, including the separators to use, whether to keep the separators in the output, the chunk size, and the overlap between chunks. Additionally, it includes a tokenizer interface that defines how to convert a string into a list of numbers and vice versa.\n}","documentation":"This code defines an interface for a local document index, which includes configuration options for creating embeddings, tokenizing text, and splitting text into chunks."}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#","attributes":{"range":[23,0,354,1],"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#","content":"export class LocalDocumentIndex extends LocalIndex {\n    private readonly _embeddings?: EmbeddingsModel;\n    private readonly _tokenizer: Tokenizer;\n    private readonly _chunkingConfig?: TextSplitterConfig;\n    private _catalog?: DocumentCatalog;\n    private _newCatalog?: DocumentCatalog;\n\n\n    public constructor(config: LocalDocumentIndexConfig) {\n        super(config.folderPath);\n        this._embeddings = config.embeddings;\n        this._chunkingConfig = Object.assign({\n            keepSeparators: true,\n            chunkSize: 512,\n            chunkOverlap: 0,\n        } as TextSplitterConfig, config.chunkingConfig);\n        this._tokenizer = config.tokenizer ?? this._chunkingConfig.tokenizer ?? new GPT3Tokenizer();\n        this._chunkingConfig.tokenizer = this._tokenizer;\n    }\n\n    /**\n     * Returns true if the document catalog exists.\n     */\n    public async isCatalogCreated(): Promise<boolean> {\n        try {\n            await fs.access(path.join(this.folderPath, 'catalog.json'));\n            return true;\n        } catch (err: unknown) {\n            return false;\n        }\n    }\n\n    public async getDocumentId(uri: string): Promise<string | undefined> {\n        await this.loadIndexData();\n        return this._catalog?.uriToId[uri];\n    }\n\n    public async getDocumentUri(documentId: string): Promise<string | undefined> {\n        await this.loadIndexData();\n        return this._catalog?.idToUri[documentId];\n    }\n\n    public async createIndex(config?: CreateIndexConfig): Promise<void> {\n        await super.createIndex(config);\n        await this.loadIndexData();\n    }\n\n    public async deleteDocument(uri: string): Promise<void> {\n        // Lookup document ID\n        const documentId = await this.getDocumentId(uri);\n        if (documentId == undefined) {\n            return;\n        }\n\n        // Delete document chunks from index and remove from catalog\n        await this.beginUpdate();\n        try {\n            // Get list of chunks for document\n            const chunks = await this.listItemsByMetadata<DocumentChunkMetadata>({ documentId });\n\n            // Delete chunks\n            for (const chunk of chunks) {\n                await this.deleteItem(chunk.id);\n            }\n\n            // Remove entry from catalog\n            delete this._newCatalog!.uriToId[uri];\n            delete this._newCatalog!.idToUri[documentId];\n            this._newCatalog!.count--;\n\n            // Commit changes\n            await this.endUpdate();\n        } catch (err: unknown) {\n            // Cancel update and raise error\n            this.cancelUpdate();\n            throw new Error(`Error deleting document \"${uri}\": ${(err as any).toString()}`);\n        }\n\n        // Delete text file from disk\n        try {\n            await fs.unlink(path.join(this.folderPath, `${documentId}.txt`));\n        } catch (err: unknown) {\n            throw new Error(`Error removing text file for document \"${uri}\" from disk: ${(err as any).toString()}`);\n        }\n\n        // Delete metadata file from disk\n        try {\n            await fs.unlink(path.join(this.folderPath, `${documentId}.json`));\n        } catch (err: unknown) {\n            // Ignore error\n        }\n    }\n\n    public async getCatalogStats(): Promise<DocumentCatalogStats> {\n        const stats = await this.getIndexStats()\n        return {\n            version: this._catalog!.version,\n            documents: this._catalog!.count,\n            chunks: stats.items,\n            metadata_config: stats.metadata_config\n        };\n    }\n\n    /**\n     * Adds a document to the catalog.\n     * @remarks\n     * A new update is started if one is not already in progress. If an document with the same uri\n     * already exists, it will be replaced.\n     * @param uri - Document URI\n     * @param text - Document text\n     * @param docType - Optional. Document type\n     * @param metadata - Optional. Document metadata to index\n     * @returns Inserted document\n     */\n    public async upsertDocument(uri: string, text: string, docType?: string, metadata?: Record<string, MetadataTypes>): Promise<LocalDocument> {\n        // Ensure embeddings configured\n        if (!this._embeddings) {\n            throw new Error(`Embeddings model not configured.`);\n        }\n\n        // Check for existing document ID\n        let documentId = await this.getDocumentId(uri);\n        if (documentId != undefined) {\n            // Delete existing document\n            await this.deleteDocument(uri);\n        } else {\n            // Generate new document ID\n            documentId = v4();\n        }\n\n        // Initialize text splitter settings\n        const config = Object.assign({ docType }, this._chunkingConfig);\n        if (config.docType == undefined) {\n            // Populate docType based on extension\n            const pos = uri.lastIndexOf('.');\n            if (pos >= 0) {\n                const ext = uri.substring(pos + 1).toLowerCase();\n                config.docType = ext;\n            }\n        }\n\n        // Split text into chunks\n        const splitter = new TextSplitter(config);\n        const chunks = splitter.split(text);\n\n        // Break chunks into batches for embedding generation\n        let totalTokens = 0;\n        const chunkBatches: string[][] = [];\n        let currentBatch: string[] = [];\n        for (const chunk of chunks) {\n            totalTokens += chunk.tokens.length;\n            if (totalTokens > this._embeddings.maxTokens) {\n                chunkBatches.push(currentBatch);\n                currentBatch = [];\n                totalTokens = chunk.tokens.length;\n            }\n            currentBatch.push(chunk.text.replace(/\\n/g, ' '));\n        }\n        if (currentBatch.length > 0) {\n            chunkBatches.push(currentBatch);\n        }\n\n        // Generate embeddings for chunks\n        const embeddings: number[][] = [];\n        for (const batch of chunkBatches) {\n            let response: EmbeddingsResponse;\n            try {\n                response = await this._embeddings.createEmbeddings(batch);\n            } catch (err: unknown) {\n                throw new Error(`Error generating embeddings: ${(err as any).toString()}`);\n            }\n\n            // Check for error\n            if (response.status != 'success') {\n                throw new Error(`Error generating embeddings: ${response.message}`);\n            }\n\n            // Add embeddings to output\n            for (const embedding of response.output!) {\n                embeddings.push(embedding);\n            }\n        }\n\n        // Add document chunks to index\n        await this.beginUpdate();\n        try {\n            // Add chunks to index\n            for (let i = 0; i < chunks.length; i++) {\n                const chunk = chunks[i];\n                const embedding = embeddings[i];\n                const chunkMetadata: DocumentChunkMetadata = Object.assign({\n                    documentId,\n                    startPos: chunk.startPos,\n                    endPos: chunk.endPos,\n                }, metadata);\n                await this.insertItem({\n                    id: v4(),\n                    metadata: chunkMetadata,\n                    vector: embedding,\n                });\n            }\n\n            // Save metadata file to disk\n            if (metadata != undefined) {\n                await fs.writeFile(path.join(this.folderPath, `${documentId}.json`), JSON.stringify(metadata));\n            }\n\n            // Save text file to disk\n            await fs.writeFile(path.join(this.folderPath, `${documentId}.txt`), text);\n\n            // Add entry to catalog\n            this._newCatalog!.uriToId[uri] = documentId;\n            this._newCatalog!.idToUri[documentId] = uri;\n            this._newCatalog!.count++;\n\n            // Commit changes\n            await this.endUpdate();\n        } catch (err: unknown) {\n            // Cancel update and raise error\n            this.cancelUpdate();\n            throw new Error(`Error adding document \"${uri}\": ${(err as any).toString()}`);\n        }\n\n        // Return document\n        return new LocalDocument(this.folderPath, documentId, uri);\n    }\n\n\n    public async queryDocuments(query: string, options?: DocumentQueryOptions): Promise<LocalDocumentResult[]> {\n        // Ensure embeddings configured\n        if (!this._embeddings) {\n            throw new Error(`Embeddings model not configured.`);\n        }\n\n        // Ensure options are defined\n        options = Object.assign({\n            maxDocuments: 10,\n            maxChunks: 50,\n        }, options);\n\n        // Generate embeddings for query\n        let embeddings: EmbeddingsResponse;\n        try {\n            embeddings = await this._embeddings.createEmbeddings(query.replace(/\\n/g, ' '));\n        } catch (err: unknown) {\n            throw new Error(`Error generating embeddings for query: ${(err as any).toString()}`);\n        }\n\n        // Check for error\n        if (embeddings.status != 'success') {\n            throw new Error(`Error generating embeddings for query: ${embeddings.message}`);\n        }\n\n        // Query index for chunks\n        const results = await this.queryItems<DocumentChunkMetadata>(embeddings.output![0], options.maxChunks!, options.filter);\n\n        // Group chunks by document\n        const documentChunks: { [documentId: string]: QueryResult<DocumentChunkMetadata>[]; } = {};\n        for (const result  of results) {\n            const metadata = result.item.metadata;\n            if (documentChunks[metadata.documentId] == undefined) {\n                documentChunks[metadata.documentId] = [];\n            }\n            documentChunks[metadata.documentId].push(result);\n        }\n\n        // Create a document result for each document\n        const documentResults: LocalDocumentResult[] = [];\n        for (const documentId in documentChunks) {\n            const chunks = documentChunks[documentId];\n            const uri = await this.getDocumentUri(documentId) as string;\n            const documentResult = new LocalDocumentResult(this.folderPath, documentId, uri, chunks, this._tokenizer);\n            documentResults.push(documentResult);\n        }\n\n        // Sort document results by score and return top results\n        return documentResults.sort((a, b) => b.score - a.score).slice(0, options.maxDocuments!);\n    }\n\n    // Overrides\n\n    public async beginUpdate(): Promise<void> {\n        await super.beginUpdate();\n        this._newCatalog = Object.assign({}, this._catalog);\n    }\n\n    public cancelUpdate(): void {\n        super.cancelUpdate();\n        this._newCatalog = undefined;\n    }\n\n    public async endUpdate(): Promise<void> {\n        await super.endUpdate();\n\n        try {\n            // Save catalog\n            await fs.writeFile(path.join(this.folderPath, 'catalog.json'), JSON.stringify(this._newCatalog));\n            this._catalog = this._newCatalog;\n            this._newCatalog = undefined;\n        } catch(err: unknown) {\n            throw new Error(`Error saving document catalog: ${(err as any).toString()}`);\n        }\n    }\n\n    protected async loadIndexData(): Promise<void> {\n        await super.loadIndexData();\n\n        if (this._catalog) {\n            return;\n        }\n\n        const catalogPath = path.join(this.folderPath, 'catalog.json');\n        if (await this.isCatalogCreated()) {\n            // Load catalog\n            const buffer = await fs.readFile(catalogPath);\n            this._catalog = JSON.parse(buffer.toString());\n        } else {\n            try {\n                // Initialize catalog\n                this._catalog = {\n                    version: 1,\n                    count: 0,\n                    uriToId: {},\n                    idToUri: {},\n                };\n                await fs.writeFile(catalogPath, JSON.stringify(this._catalog));\n            } catch(err: unknown) {\n                throw new Error(`Error creating document catalog: ${(err as any).toString()}`);\n            }\n        }\n    }\n}","file":"/src/LocalDocumentIndex.ts","language":"typescript","fileHash":"6f23de8064ad58a75e6251d6940f9751f6a6e8f389e9f6bffdb7113f655b8b36","hash":"0adbea6ec03f8dea06e42824fd8f62e869f6de9a46b60cb93a56189461c7574c","processedContent":"export class LocalDocumentIndex extends LocalIndex { #This code defines a class called `LocalIndex` that manages an index file on disk. It provides methods for creating, updating, and querying the index, as well as loading and saving the index to disk.\n    private readonly _embeddings?: EmbeddingsModel; #This code defines an interface for an embeddings model, which allows for the creation of embeddings for text inputs. The interface includes a maximum number of tokens and a method for creating embeddings.\n    private readonly _tokenizer: Tokenizer; #This code defines an interface for a tokenizer, which is a class that takes in a list of numbers and returns a string, and also takes in a string and returns a list of numbers.\n    private readonly _chunkingConfig?: TextSplitterConfig; #This code defines an interface for a text splitter, which is a class that takes in a string and returns a list of strings based on certain rules. The interface specifies the configuration options for the text splitter, including the separators to use, whether to keep the separators in the output, the chunk size, and the overlap between chunks. Additionally, it includes a tokenizer interface that defines how to convert a string into a list of numbers and vice versa.\n    private _catalog?: DocumentCatalog; #This code defines a data structure called DocumentCatalog, which stores information about documents in a digital library. It includes version number, count of documents, and two dictionaries to map between document URIs and IDs.\n    private _newCatalog?: DocumentCatalog; #This code defines a data structure called DocumentCatalog, which stores information about documents in a digital library. It includes version number, count of documents, and two dictionaries to map between document URIs and IDs.\n\n\n    public constructor(config: LocalDocumentIndexConfig) { #This code defines an interface for a local document index, which includes configuration options for creating embeddings, tokenizing text, and splitting text into chunks.\n        super(config.folderPath); #undefined\n        this._embeddings = config.embeddings;\n        \"\"\"\n        scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_embeddings.: undefined\n        scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndexConfig#embeddings.: undefined\n        \"\"\"\n        this._chunkingConfig = Object.assign({ #undefined\n            keepSeparators: true,\n            chunkSize: 512,\n            chunkOverlap: 0,\n        } as TextSplitterConfig, config.chunkingConfig);\n        \"\"\"\n        scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#: This code defines an interface for a text splitter, which is a class that takes in a string and returns a list of strings based on certain rules. The interface specifies the configuration options for the text splitter, including the separators to use, whether to keep the separators in the output, the chunk size, and the overlap between chunks. Additionally, it includes a tokenizer interface that defines how to convert a string into a list of numbers and vice versa.\n        scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndexConfig#chunkingConfig.: undefined\n        \"\"\"\n        this._tokenizer = config.tokenizer ?? this._chunkingConfig.tokenizer ?? new GPT3Tokenizer();\n        \"\"\"\n        scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_chunkingConfig.: undefined\n        scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_tokenizer.: undefined\n        scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndexConfig#tokenizer.: undefined\n        scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#tokenizer.: undefined\n        scip-typescript npm vectra 0.5.5 src/`GPT3Tokenizer.ts`/GPT3Tokenizer#: This code defines a class called `GPT3Tokenizer` that implements an interface for tokenizing text. The class has two functions, `decode` and `encode`, which are not defined and return undefined.\n        \"\"\"\n        this._chunkingConfig.tokenizer = this._tokenizer;\n        \"\"\"\n        scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_chunkingConfig.: undefined\n        scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_tokenizer.: undefined\n        scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#tokenizer.: undefined\n        \"\"\"\n    }\n\n    /**\n     * Returns true if the document catalog exists.\n     */\n    public async isCatalogCreated(): Promise<boolean> {\n        \"\"\"This code checks if a catalog file exists in the specified folder path. If it does, it returns true, otherwise it returns false.\"\"\"\n        pass\n\n    public async getDocumentId(uri: string): Promise<string | undefined> {\n        \"\"\"This code checks if a catalog file exists in a specific folder and reads its contents into memory. If it doesn't exist, it initializes the catalog with default values and saves it to disk. It then returns the ID associated with a given URI.\"\"\"\n        pass\n\n    public async getDocumentUri(documentId: string): Promise<string | undefined> {\n        \"\"\"This code checks if a catalog file exists in a specific folder and reads its contents into memory. If it doesn't exist, it initializes the catalog with default values and saves it to disk.\"\"\"\n        pass\n\n    public async createIndex(config?: CreateIndexConfig): Promise<void> {\n        \"\"\"This code creates an index file and loads catalog data into memory.\"\"\"\n        pass\n\n    public async deleteDocument(uri: string): Promise<void> {\n        \"\"\"This code is a method that deletes a document from an index file. It first checks if the document exists in the index, and then it deletes the document chunks and removes the entry from the catalog. Finally, it saves the changes to disk and deletes the text and metadata files associated with the document.\"\"\"\n        pass\n\n    public async getCatalogStats(): Promise<DocumentCatalogStats> {\n        \"\"\"This code retrieves the index statistics for a specific folder, including the version number, metadata configuration, and the number of items in the index.\"\"\"\n        pass\n\n    /**\n     * Adds a document to the catalog.\n     * @remarks\n     * A new update is started if one is not already in progress. If an document with the same uri\n     * already exists, it will be replaced.\n     * @param uri - Document URI\n     * @param text - Document text\n     * @param docType - Optional. Document type\n     * @param metadata - Optional. Document metadata to index\n     * @returns Inserted document\n     */\n    public async upsertDocument(uri: string, text: string, docType?: string, metadata?: Record<string, MetadataTypes>): Promise<LocalDocument> {\n        \"\"\"This code is a method that upserts a document into an index, which is a data structure used to store and retrieve information. It first checks if the document exists in the index, and then it deletes the document chunks and removes the entry from the catalog. Finally, it saves the changes to disk and deletes the text and metadata files associated with the document.\"\"\"\n        pass\n\n\n    public async queryDocuments(query: string, options?: DocumentQueryOptions): Promise<LocalDocumentResult[]> {\n        \"\"\"This code defines a function called `queryDocuments` that takes in a query string and options, generates embeddings for the query, queries an index for chunks based on the embeddings, groups chunks by document, creates a document result for each document, sorts the results by score, and returns the top results.\"\"\"\n        pass\n\n    // Overrides\n\n    public async beginUpdate(): Promise<void> {\n        \"\"\"This code checks if an index file exists in a specific folder and reads the contents of the file into memory. It then creates a copy of the data in memory to use for updates.\"\"\"\n        pass\n\n    public cancelUpdate(): void {\n        \"\"\"This code sets the value of a variable called `_update` to `undefined` and also sets the value of another variable called `_newCatalog` to `undefined`.\"\"\"\n        pass\n\n    public async endUpdate(): Promise<void> {\n        \"\"\"This code is a method that saves the current state of an index to disk. It first checks if there is an update in progress, and then it writes the update to a file using the `fs` module. If there is an error while saving the file, it throws a new error with the error message.\"\"\"\n        pass\n\n    protected async loadIndexData(): Promise<void> {\n        \"\"\"This code checks if a catalog file exists in a specific folder and reads its contents into memory. If it doesn't exist, it initializes the catalog with default values and saves it to disk.\"\"\"\n        pass\n}","documentation":"This code defines a class called `LocalDocumentIndex` that manages an index file on disk and provides methods for creating, updating, and querying the index. It also includes configuration options for creating embeddings, tokenizing text, and splitting text into chunks."}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#isCatalogCreated().","attributes":{"range":[46,4,53,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#isCatalogCreated().","content":"public async isCatalogCreated(): Promise<boolean> {\n        try {\n            await fs.access(path.join(this.folderPath, 'catalog.json'));\n            return true;\n        } catch (err: unknown) {\n            return false;\n        }\n    }","file":"/src/LocalDocumentIndex.ts","language":"typescript","fileHash":"6f23de8064ad58a75e6251d6940f9751f6a6e8f389e9f6bffdb7113f655b8b36","hash":"4a38fb641bc81f48c953e9657b448c074dc5b4f7523832628f97e746f047a850","processedContent":"public async isCatalogCreated(): Promise<boolean> {\n        try {\n            await fs.access(path.join(this.folderPath, 'catalog.json'));\n            \"\"\"\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/access().: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#join().: undefined\n            scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#`<get>folderPath`().: undefined\n            \"\"\"\n            return true;\n        } catch (err: unknown) {\n            return false;\n        }\n    }","documentation":"This code checks if a catalog file exists in the specified folder path. If it does, it returns true, otherwise it returns false."}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#getDocumentId().","attributes":{"range":[55,4,58,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#getDocumentId().","content":"public async getDocumentId(uri: string): Promise<string | undefined> {\n        await this.loadIndexData();\n        return this._catalog?.uriToId[uri];\n    }","file":"/src/LocalDocumentIndex.ts","language":"typescript","fileHash":"6f23de8064ad58a75e6251d6940f9751f6a6e8f389e9f6bffdb7113f655b8b36","hash":"b025a11c4df7830f4f50f5066118a947e68afdbfc6b861d1c51bbcdb444dae51","processedContent":"public async getDocumentId(uri: string): Promise<string | undefined> {\n        await this.loadIndexData(); #This code checks if a catalog file exists in a specific folder and reads its contents into memory. If it doesn't exist, it initializes the catalog with default values and saves it to disk.\n        return this._catalog?.uriToId[uri];\n        \"\"\"\n        scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_catalog.: undefined\n        scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/DocumentCatalog#uriToId.: undefined\n        \"\"\"\n    }","documentation":"This code checks if a catalog file exists in a specific folder and reads its contents into memory. If it doesn't exist, it initializes the catalog with default values and saves it to disk. It then returns the ID associated with a given URI."}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#getDocumentUri().","attributes":{"range":[60,4,63,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#getDocumentUri().","content":"public async getDocumentUri(documentId: string): Promise<string | undefined> {\n        await this.loadIndexData();\n        return this._catalog?.idToUri[documentId];\n    }","file":"/src/LocalDocumentIndex.ts","language":"typescript","fileHash":"6f23de8064ad58a75e6251d6940f9751f6a6e8f389e9f6bffdb7113f655b8b36","hash":"e1e3e14bdcbe2a0ebe6f259a3299fcde833374ea7d382c02cd624be4e7ea4592","processedContent":"public async getDocumentUri(documentId: string): Promise<string | undefined> {\n        await this.loadIndexData(); #This code checks if a catalog file exists in a specific folder and reads its contents into memory. If it doesn't exist, it initializes the catalog with default values and saves it to disk.\n        return this._catalog?.idToUri[documentId];\n        \"\"\"\n        scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_catalog.: undefined\n        scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/DocumentCatalog#idToUri.: undefined\n        \"\"\"\n    }","documentation":"This code checks if a catalog file exists in a specific folder and reads its contents into memory. If it doesn't exist, it initializes the catalog with default values and saves it to disk."}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#createIndex().","attributes":{"range":[65,4,68,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#createIndex().","content":"public async createIndex(config?: CreateIndexConfig): Promise<void> {\n        await super.createIndex(config);\n        await this.loadIndexData();\n    }","file":"/src/LocalDocumentIndex.ts","language":"typescript","fileHash":"6f23de8064ad58a75e6251d6940f9751f6a6e8f389e9f6bffdb7113f655b8b36","hash":"1eb9064897c466c390e0495c12e18a410f957d83c6ad14f950fb09d78bd53922","processedContent":"public async createIndex(config?: CreateIndexConfig): Promise<void> {\n        await super.createIndex(config); #This code creates an index file in a specific folder, deleting it first if it already exists. It initializes the index with metadata and version information, and writes it to disk.\n        await this.loadIndexData(); #This code checks if a catalog file exists in a specific folder and reads its contents into memory. If it doesn't exist, it initializes the catalog with default values and saves it to disk.\n    }","documentation":"This code creates an index file and loads catalog data into memory."}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#deleteDocument().","attributes":{"range":[70,4,114,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#deleteDocument().","content":"public async deleteDocument(uri: string): Promise<void> {\n        // Lookup document ID\n        const documentId = await this.getDocumentId(uri);\n        if (documentId == undefined) {\n            return;\n        }\n\n        // Delete document chunks from index and remove from catalog\n        await this.beginUpdate();\n        try {\n            // Get list of chunks for document\n            const chunks = await this.listItemsByMetadata<DocumentChunkMetadata>({ documentId });\n\n            // Delete chunks\n            for (const chunk of chunks) {\n                await this.deleteItem(chunk.id);\n            }\n\n            // Remove entry from catalog\n            delete this._newCatalog!.uriToId[uri];\n            delete this._newCatalog!.idToUri[documentId];\n            this._newCatalog!.count--;\n\n            // Commit changes\n            await this.endUpdate();\n        } catch (err: unknown) {\n            // Cancel update and raise error\n            this.cancelUpdate();\n            throw new Error(`Error deleting document \"${uri}\": ${(err as any).toString()}`);\n        }\n\n        // Delete text file from disk\n        try {\n            await fs.unlink(path.join(this.folderPath, `${documentId}.txt`));\n        } catch (err: unknown) {\n            throw new Error(`Error removing text file for document \"${uri}\" from disk: ${(err as any).toString()}`);\n        }\n\n        // Delete metadata file from disk\n        try {\n            await fs.unlink(path.join(this.folderPath, `${documentId}.json`));\n        } catch (err: unknown) {\n            // Ignore error\n        }\n    }","file":"/src/LocalDocumentIndex.ts","language":"typescript","fileHash":"6f23de8064ad58a75e6251d6940f9751f6a6e8f389e9f6bffdb7113f655b8b36","hash":"c179c961a7c1839b2bf7d49935c8d10342547d82a844153e5370abb84b0a06bf","processedContent":"public async deleteDocument(uri: string): Promise<void> {\n        // Lookup document ID\n        const documentId = await this.getDocumentId(uri); #This code checks if a catalog file exists in a specific folder and reads its contents into memory. If it doesn't exist, it initializes the catalog with default values and saves it to disk. It then returns the ID associated with a given URI.\n        if (documentId == undefined) {\n            return;\n        }\n\n        // Delete document chunks from index and remove from catalog\n        await this.beginUpdate(); #This code checks if an index file exists in a specific folder and reads the contents of the file into memory. It then creates a copy of the data in memory to use for updates.\n        try {\n            // Get list of chunks for document\n            const chunks = await this.listItemsByMetadata<DocumentChunkMetadata>({ documentId });\n            \"\"\"\n            scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#listItemsByMetadata().: This code defines a function called `listItemsByMetadata` that takes in a filter object and returns a list of items from an index file based on the filter criteria. The function uses an `ItemSelector` class to apply filters to metadata and select items that match the filter conditions.\n            scip-typescript npm vectra 0.5.5 src/`types.ts`/DocumentChunkMetadata#: This code defines an interface for document chunk metadata, which includes a document ID, start and end positions, and a key-value pair with a type of metadata.\n            \"\"\"\n\n            // Delete chunks\n            for (const chunk of chunks) {\n                await this.deleteItem(chunk.id); #This code is a method that deletes an item from an index file. It first checks if there is an update in progress, and then it finds the index of the item to be deleted in the update data. If the item is found, it is removed from the update data and saved to disk.\n            }\n\n            // Remove entry from catalog\n            delete this._newCatalog!.uriToId[uri];\n            \"\"\"\n            scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_newCatalog.: undefined\n            scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/DocumentCatalog#uriToId.: undefined\n            \"\"\"\n            delete this._newCatalog!.idToUri[documentId];\n            \"\"\"\n            scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_newCatalog.: undefined\n            scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/DocumentCatalog#idToUri.: undefined\n            \"\"\"\n            this._newCatalog!.count--;\n            \"\"\"\n            scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_newCatalog.: undefined\n            scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/DocumentCatalog#count.: undefined\n            \"\"\"\n\n            // Commit changes\n            await this.endUpdate(); #This code is a method that saves the current state of an index to disk. It first checks if there is an update in progress, and then it writes the update to a file using the `fs` module. If there is an error while saving the file, it throws a new error with the error message.\n        } catch (err: unknown) {\n            // Cancel update and raise error\n            this.cancelUpdate(); #This code sets the value of a variable called `_update` to `undefined` and also sets the value of another variable called `_newCatalog` to `undefined`.\n            throw new Error(`Error deleting document \"${uri}\": ${(err as any).toString()}`);\n        }\n\n        // Delete text file from disk\n        try {\n            await fs.unlink(path.join(this.folderPath, `${documentId}.txt`));\n            \"\"\"\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/unlink().: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#join().: undefined\n            scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#`<get>folderPath`().: undefined\n            \"\"\"\n        } catch (err: unknown) {\n            throw new Error(`Error removing text file for document \"${uri}\" from disk: ${(err as any).toString()}`);\n        }\n\n        // Delete metadata file from disk\n        try {\n            await fs.unlink(path.join(this.folderPath, `${documentId}.json`));\n            \"\"\"\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/unlink().: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#join().: undefined\n            scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#`<get>folderPath`().: undefined\n            \"\"\"\n        } catch (err: unknown) {\n            // Ignore error\n        }\n    }","documentation":"This code is a method that deletes a document from an index file. It first checks if the document exists in the index, and then it deletes the document chunks and removes the entry from the catalog. Finally, it saves the changes to disk and deletes the text and metadata files associated with the document."}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#getCatalogStats().","attributes":{"range":[116,4,124,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#getCatalogStats().","content":"public async getCatalogStats(): Promise<DocumentCatalogStats> {\n        const stats = await this.getIndexStats()\n        return {\n            version: this._catalog!.version,\n            documents: this._catalog!.count,\n            chunks: stats.items,\n            metadata_config: stats.metadata_config\n        };\n    }","file":"/src/LocalDocumentIndex.ts","language":"typescript","fileHash":"6f23de8064ad58a75e6251d6940f9751f6a6e8f389e9f6bffdb7113f655b8b36","hash":"c57592f233d464d6969bb40bc47e915452c4f52ced79f641faefa3df3b3bf54a","processedContent":"public async getCatalogStats(): Promise<DocumentCatalogStats> {\n        const stats = await this.getIndexStats() #This code retrieves the index statistics for a specific folder, including the version number, metadata configuration, and the number of items in the index.\n        return {\n            version: this._catalog!.version,\n            \"\"\"\n            scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_catalog.: undefined\n            scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/DocumentCatalog#version.: undefined\n            \"\"\"\n            documents: this._catalog!.count,\n            \"\"\"\n            scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_catalog.: undefined\n            scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/DocumentCatalog#count.: undefined\n            \"\"\"\n            chunks: stats.items,\n            metadata_config: stats.metadata_config\n        };\n    }","documentation":"This code retrieves the index statistics for a specific folder, including the version number, metadata configuration, and the number of items in the index."}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#upsertDocument().","attributes":{"range":[137,4,248,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#upsertDocument().","content":"public async upsertDocument(uri: string, text: string, docType?: string, metadata?: Record<string, MetadataTypes>): Promise<LocalDocument> {\n        // Ensure embeddings configured\n        if (!this._embeddings) {\n            throw new Error(`Embeddings model not configured.`);\n        }\n\n        // Check for existing document ID\n        let documentId = await this.getDocumentId(uri);\n        if (documentId != undefined) {\n            // Delete existing document\n            await this.deleteDocument(uri);\n        } else {\n            // Generate new document ID\n            documentId = v4();\n        }\n\n        // Initialize text splitter settings\n        const config = Object.assign({ docType }, this._chunkingConfig);\n        if (config.docType == undefined) {\n            // Populate docType based on extension\n            const pos = uri.lastIndexOf('.');\n            if (pos >= 0) {\n                const ext = uri.substring(pos + 1).toLowerCase();\n                config.docType = ext;\n            }\n        }\n\n        // Split text into chunks\n        const splitter = new TextSplitter(config);\n        const chunks = splitter.split(text);\n\n        // Break chunks into batches for embedding generation\n        let totalTokens = 0;\n        const chunkBatches: string[][] = [];\n        let currentBatch: string[] = [];\n        for (const chunk of chunks) {\n            totalTokens += chunk.tokens.length;\n            if (totalTokens > this._embeddings.maxTokens) {\n                chunkBatches.push(currentBatch);\n                currentBatch = [];\n                totalTokens = chunk.tokens.length;\n            }\n            currentBatch.push(chunk.text.replace(/\\n/g, ' '));\n        }\n        if (currentBatch.length > 0) {\n            chunkBatches.push(currentBatch);\n        }\n\n        // Generate embeddings for chunks\n        const embeddings: number[][] = [];\n        for (const batch of chunkBatches) {\n            let response: EmbeddingsResponse;\n            try {\n                response = await this._embeddings.createEmbeddings(batch);\n            } catch (err: unknown) {\n                throw new Error(`Error generating embeddings: ${(err as any).toString()}`);\n            }\n\n            // Check for error\n            if (response.status != 'success') {\n                throw new Error(`Error generating embeddings: ${response.message}`);\n            }\n\n            // Add embeddings to output\n            for (const embedding of response.output!) {\n                embeddings.push(embedding);\n            }\n        }\n\n        // Add document chunks to index\n        await this.beginUpdate();\n        try {\n            // Add chunks to index\n            for (let i = 0; i < chunks.length; i++) {\n                const chunk = chunks[i];\n                const embedding = embeddings[i];\n                const chunkMetadata: DocumentChunkMetadata = Object.assign({\n                    documentId,\n                    startPos: chunk.startPos,\n                    endPos: chunk.endPos,\n                }, metadata);\n                await this.insertItem({\n                    id: v4(),\n                    metadata: chunkMetadata,\n                    vector: embedding,\n                });\n            }\n\n            // Save metadata file to disk\n            if (metadata != undefined) {\n                await fs.writeFile(path.join(this.folderPath, `${documentId}.json`), JSON.stringify(metadata));\n            }\n\n            // Save text file to disk\n            await fs.writeFile(path.join(this.folderPath, `${documentId}.txt`), text);\n\n            // Add entry to catalog\n            this._newCatalog!.uriToId[uri] = documentId;\n            this._newCatalog!.idToUri[documentId] = uri;\n            this._newCatalog!.count++;\n\n            // Commit changes\n            await this.endUpdate();\n        } catch (err: unknown) {\n            // Cancel update and raise error\n            this.cancelUpdate();\n            throw new Error(`Error adding document \"${uri}\": ${(err as any).toString()}`);\n        }\n\n        // Return document\n        return new LocalDocument(this.folderPath, documentId, uri);\n    }","file":"/src/LocalDocumentIndex.ts","language":"typescript","fileHash":"6f23de8064ad58a75e6251d6940f9751f6a6e8f389e9f6bffdb7113f655b8b36","hash":"dcaba5187101eafb527587f2ac2044f0a40d0cb91d63a0207a7342f8d1dfb27e","processedContent":"public async upsertDocument(uri: string, text: string, docType?: string, metadata?: Record<string, MetadataTypes>): Promise<LocalDocument> {\n        // Ensure embeddings configured\n        if (!this._embeddings) { #undefined\n            throw new Error(`Embeddings model not configured.`);\n        }\n\n        // Check for existing document ID\n        let documentId = await this.getDocumentId(uri); #This code checks if a catalog file exists in a specific folder and reads its contents into memory. If it doesn't exist, it initializes the catalog with default values and saves it to disk. It then returns the ID associated with a given URI.\n        if (documentId != undefined) {\n            // Delete existing document\n            await this.deleteDocument(uri); #This code is a method that deletes a document from an index file. It first checks if the document exists in the index, and then it deletes the document chunks and removes the entry from the catalog. Finally, it saves the changes to disk and deletes the text and metadata files associated with the document.\n        } else {\n            // Generate new document ID\n            documentId = v4(); #undefined\n        }\n\n        // Initialize text splitter settings\n        const config = Object.assign({ docType }, this._chunkingConfig); #undefined\n        if (config.docType == undefined) {\n            // Populate docType based on extension\n            const pos = uri.lastIndexOf('.');\n            if (pos >= 0) {\n                const ext = uri.substring(pos + 1).toLowerCase();\n                config.docType = ext;\n            }\n        }\n\n        // Split text into chunks\n        const splitter = new TextSplitter(config); #undefined\n        const chunks = splitter.split(text); #This code splits a string of text into smaller chunks based on certain criteria, such as separators or the length of each chunk. It also encodes the text into tokens and keeps track of the current chunk and its length.\n\n        // Break chunks into batches for embedding generation\n        let totalTokens = 0;\n        const chunkBatches: string[][] = [];\n        let currentBatch: string[] = [];\n        for (const chunk of chunks) {\n            totalTokens += chunk.tokens.length;\n            if (totalTokens > this._embeddings.maxTokens) {\n            \"\"\"\n            scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_embeddings.: undefined\n            scip-typescript npm vectra 0.5.5 src/`types.ts`/EmbeddingsModel#maxTokens.: undefined\n            \"\"\"\n                chunkBatches.push(currentBatch);\n                currentBatch = [];\n                totalTokens = chunk.tokens.length;\n            }\n            currentBatch.push(chunk.text.replace(/\\n/g, ' '));\n        }\n        if (currentBatch.length > 0) {\n            chunkBatches.push(currentBatch);\n        }\n\n        // Generate embeddings for chunks\n        const embeddings: number[][] = [];\n        for (const batch of chunkBatches) {\n            let response: EmbeddingsResponse; #This code defines an interface for an embeddings response, which includes a status, optional output, message, model, and usage statistics. It is used to represent the result of a request for embeddings from a machine learning model.\n            try {\n                response = await this._embeddings.createEmbeddings(batch);\n                \"\"\"\n                scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_embeddings.: undefined\n                scip-typescript npm vectra 0.5.5 src/`types.ts`/EmbeddingsModel#createEmbeddings().: undefined\n                \"\"\"\n            } catch (err: unknown) {\n                throw new Error(`Error generating embeddings: ${(err as any).toString()}`);\n            }\n\n            // Check for error\n            if (response.status != 'success') { #undefined\n                throw new Error(`Error generating embeddings: ${response.message}`); #undefined\n            }\n\n            // Add embeddings to output\n            for (const embedding of response.output!) { #undefined\n                embeddings.push(embedding);\n            }\n        }\n\n        // Add document chunks to index\n        await this.beginUpdate(); #This code checks if an index file exists in a specific folder and reads the contents of the file into memory. It then creates a copy of the data in memory to use for updates.\n        try {\n            // Add chunks to index\n            for (let i = 0; i < chunks.length; i++) {\n                const chunk = chunks[i];\n                const embedding = embeddings[i];\n                const chunkMetadata: DocumentChunkMetadata = Object.assign({ #This code defines an interface for document chunk metadata, which includes a document ID, start and end positions, and a key-value pair with a type of metadata.\n                    documentId,\n                    startPos: chunk.startPos,\n                    endPos: chunk.endPos,\n                }, metadata);\n                await this.insertItem({ #This code defines a method called `insertItem` that adds an item to an index. It checks for the presence of a vector and ensures that the item is unique before adding it to the index. If the item is not unique, it updates the existing item in the index instead of adding a new one.\n                    id: v4(), #undefined\n                    metadata: chunkMetadata,\n                    vector: embedding,\n                });\n            }\n\n            // Save metadata file to disk\n            if (metadata != undefined) {\n                await fs.writeFile(path.join(this.folderPath, `${documentId}.json`), JSON.stringify(metadata));\n                \"\"\"\n                scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/: undefined\n                scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/writeFile().: undefined\n                scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#: undefined\n                scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#join().: undefined\n                scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#`<get>folderPath`().: undefined\n                \"\"\"\n            }\n\n            // Save text file to disk\n            await fs.writeFile(path.join(this.folderPath, `${documentId}.txt`), text);\n            \"\"\"\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/writeFile().: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#join().: undefined\n            scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#`<get>folderPath`().: undefined\n            \"\"\"\n\n            // Add entry to catalog\n            this._newCatalog!.uriToId[uri] = documentId;\n            \"\"\"\n            scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_newCatalog.: undefined\n            scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/DocumentCatalog#uriToId.: undefined\n            \"\"\"\n            this._newCatalog!.idToUri[documentId] = uri;\n            \"\"\"\n            scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_newCatalog.: undefined\n            scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/DocumentCatalog#idToUri.: undefined\n            \"\"\"\n            this._newCatalog!.count++;\n            \"\"\"\n            scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_newCatalog.: undefined\n            scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/DocumentCatalog#count.: undefined\n            \"\"\"\n\n            // Commit changes\n            await this.endUpdate(); #This code is a method that saves the current state of an index to disk. It first checks if there is an update in progress, and then it writes the update to a file using the `fs` module. If there is an error while saving the file, it throws a new error with the error message.\n        } catch (err: unknown) {\n            // Cancel update and raise error\n            this.cancelUpdate(); #This code sets the value of a variable called `_update` to `undefined` and also sets the value of another variable called `_newCatalog` to `undefined`.\n            throw new Error(`Error adding document \"${uri}\": ${(err as any).toString()}`);\n        }\n\n        // Return document\n        return new LocalDocument(this.folderPath, documentId, uri);\n        \"\"\"\n        scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#`<get>folderPath`().: undefined\n        scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#`<constructor>`().: undefined\n        \"\"\"\n    }","documentation":"This code is a method that upserts a document into an index, which is a data structure used to store and retrieve information. It first checks if the document exists in the index, and then it deletes the document chunks and removes the entry from the catalog. Finally, it saves the changes to disk and deletes the text and metadata files associated with the document."}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#queryDocuments().","attributes":{"range":[251,4,300,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#queryDocuments().","content":"public async queryDocuments(query: string, options?: DocumentQueryOptions): Promise<LocalDocumentResult[]> {\n        // Ensure embeddings configured\n        if (!this._embeddings) {\n            throw new Error(`Embeddings model not configured.`);\n        }\n\n        // Ensure options are defined\n        options = Object.assign({\n            maxDocuments: 10,\n            maxChunks: 50,\n        }, options);\n\n        // Generate embeddings for query\n        let embeddings: EmbeddingsResponse;\n        try {\n            embeddings = await this._embeddings.createEmbeddings(query.replace(/\\n/g, ' '));\n        } catch (err: unknown) {\n            throw new Error(`Error generating embeddings for query: ${(err as any).toString()}`);\n        }\n\n        // Check for error\n        if (embeddings.status != 'success') {\n            throw new Error(`Error generating embeddings for query: ${embeddings.message}`);\n        }\n\n        // Query index for chunks\n        const results = await this.queryItems<DocumentChunkMetadata>(embeddings.output![0], options.maxChunks!, options.filter);\n\n        // Group chunks by document\n        const documentChunks: { [documentId: string]: QueryResult<DocumentChunkMetadata>[]; } = {};\n        for (const result  of results) {\n            const metadata = result.item.metadata;\n            if (documentChunks[metadata.documentId] == undefined) {\n                documentChunks[metadata.documentId] = [];\n            }\n            documentChunks[metadata.documentId].push(result);\n        }\n\n        // Create a document result for each document\n        const documentResults: LocalDocumentResult[] = [];\n        for (const documentId in documentChunks) {\n            const chunks = documentChunks[documentId];\n            const uri = await this.getDocumentUri(documentId) as string;\n            const documentResult = new LocalDocumentResult(this.folderPath, documentId, uri, chunks, this._tokenizer);\n            documentResults.push(documentResult);\n        }\n\n        // Sort document results by score and return top results\n        return documentResults.sort((a, b) => b.score - a.score).slice(0, options.maxDocuments!);\n    }","file":"/src/LocalDocumentIndex.ts","language":"typescript","fileHash":"6f23de8064ad58a75e6251d6940f9751f6a6e8f389e9f6bffdb7113f655b8b36","hash":"779dd3d3801be322ee0c1afcad3287a0e02d01b42c23d04746d8ff91e34483c3","processedContent":"public async queryDocuments(query: string, options?: DocumentQueryOptions): Promise<LocalDocumentResult[]> {\n        // Ensure embeddings configured\n        if (!this._embeddings) { #undefined\n            throw new Error(`Embeddings model not configured.`);\n        }\n\n        // Ensure options are defined\n        options = Object.assign({\n            maxDocuments: 10,\n            maxChunks: 50,\n        }, options);\n\n        // Generate embeddings for query\n        let embeddings: EmbeddingsResponse; #This code defines an interface for an embeddings response, which includes a status, optional output, message, model, and usage statistics. It is used to represent the result of a request for embeddings from a machine learning model.\n        try {\n            embeddings = await this._embeddings.createEmbeddings(query.replace(/\\n/g, ' '));\n            \"\"\"\n            scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_embeddings.: undefined\n            scip-typescript npm vectra 0.5.5 src/`types.ts`/EmbeddingsModel#createEmbeddings().: undefined\n            \"\"\"\n        } catch (err: unknown) {\n            throw new Error(`Error generating embeddings for query: ${(err as any).toString()}`);\n        }\n\n        // Check for error\n        if (embeddings.status != 'success') { #undefined\n            throw new Error(`Error generating embeddings for query: ${embeddings.message}`); #undefined\n        }\n\n        // Query index for chunks\n        const results = await this.queryItems<DocumentChunkMetadata>(embeddings.output![0], options.maxChunks!, options.filter);\n        \"\"\"\n        scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#queryItems().: This code defines a function called `queryItems` that takes in a vector, top K, and filter parameters. It first checks if an index file exists in a specific folder and reads the contents of the file into memory. Then, it filters items based on the filter criteria, calculates distances between the query vector and each item's vector, sorts the distances in descending order, finds the top K items, and loads external metadata for each item.\n        scip-typescript npm vectra 0.5.5 src/`types.ts`/DocumentChunkMetadata#: This code defines an interface for document chunk metadata, which includes a document ID, start and end positions, and a key-value pair with a type of metadata.\n        scip-typescript npm vectra 0.5.5 src/`types.ts`/EmbeddingsResponse#output.: undefined\n        scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/DocumentQueryOptions#maxChunks.: undefined\n        scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/DocumentQueryOptions#filter.: undefined\n        \"\"\"\n\n        // Group chunks by document\n        const documentChunks: { [documentId: string]: QueryResult<DocumentChunkMetadata>[]; } = {};\n        \"\"\"\n        scip-typescript npm vectra 0.5.5 src/`types.ts`/DocumentChunkMetadata#: This code defines an interface for document chunk metadata, which includes a document ID, start and end positions, and a key-value pair with a type of metadata.\n        scip-typescript npm vectra 0.5.5 src/`types.ts`/QueryResult#: This code defines an interface for a query result, which includes an item (an index item with ID, metadata, vector, and other properties), a score (a number representing the relevance of the item to the query).\n        \"\"\"\n        for (const result  of results) {\n            const metadata = result.item.metadata;\n            if (documentChunks[metadata.documentId] == undefined) {\n                documentChunks[metadata.documentId] = [];\n            }\n            documentChunks[metadata.documentId].push(result);\n        }\n\n        // Create a document result for each document\n        const documentResults: LocalDocumentResult[] = []; #This code defines a class called LocalDocumentResult that represents a document stored on the local file system. It has methods for loading metadata and text content, as well as checking if a file with the same name as the document ID exists in the specified folder.\n        for (const documentId in documentChunks) {\n            const chunks = documentChunks[documentId];\n            const uri = await this.getDocumentUri(documentId) as string; #This code checks if a catalog file exists in a specific folder and reads its contents into memory. If it doesn't exist, it initializes the catalog with default values and saves it to disk.\n            const documentResult = new LocalDocumentResult(this.folderPath, documentId, uri, chunks, this._tokenizer);\n            \"\"\"\n            scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#`<constructor>`().: undefined\n            scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#`<get>folderPath`().: undefined\n            scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_tokenizer.: undefined\n            \"\"\"\n            documentResults.push(documentResult);\n        }\n\n        // Sort document results by score and return top results\n        return documentResults.sort((a, b) => b.score - a.score).slice(0, options.maxDocuments!); #undefined\n    }","documentation":"This code defines a function called `queryDocuments` that takes in a query string and options, generates embeddings for the query, queries an index for chunks based on the embeddings, groups chunks by document, creates a document result for each document, sorts the results by score, and returns the top results."}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#beginUpdate().","attributes":{"range":[304,4,307,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#beginUpdate().","content":"public async beginUpdate(): Promise<void> {\n        await super.beginUpdate();\n        this._newCatalog = Object.assign({}, this._catalog);\n    }","file":"/src/LocalDocumentIndex.ts","language":"typescript","fileHash":"6f23de8064ad58a75e6251d6940f9751f6a6e8f389e9f6bffdb7113f655b8b36","hash":"05ad62c99a274b2982ef61f0b45273b55af221fae1b2f0a6a08dbd17ee62dcca","processedContent":"public async beginUpdate(): Promise<void> {\n        await super.beginUpdate(); #This code checks if an index file exists in a specific folder and reads the contents of the file into memory. It then creates a copy of the data in memory to use for updates.\n        this._newCatalog = Object.assign({}, this._catalog);\n        \"\"\"\n        scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_newCatalog.: undefined\n        scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_catalog.: undefined\n        \"\"\"\n    }","documentation":"This code checks if an index file exists in a specific folder and reads the contents of the file into memory. It then creates a copy of the data in memory to use for updates."}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#cancelUpdate().","attributes":{"range":[309,4,312,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#cancelUpdate().","content":"public cancelUpdate(): void {\n        super.cancelUpdate();\n        this._newCatalog = undefined;\n    }","file":"/src/LocalDocumentIndex.ts","language":"typescript","fileHash":"6f23de8064ad58a75e6251d6940f9751f6a6e8f389e9f6bffdb7113f655b8b36","hash":"a7a88da81b5ef949aa821eff7b0db5e013e50b79a5150f26f98790416a73456a","processedContent":"public cancelUpdate(): void {\n        super.cancelUpdate(); #This code sets the value of a variable called `_update` to `undefined`.\n        this._newCatalog = undefined; #undefined\n    }","documentation":"This code sets the value of a variable called `_update` to `undefined` and also sets the value of another variable called `_newCatalog` to `undefined`."}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#endUpdate().","attributes":{"range":[314,4,325,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#endUpdate().","content":"public async endUpdate(): Promise<void> {\n        await super.endUpdate();\n\n        try {\n            // Save catalog\n            await fs.writeFile(path.join(this.folderPath, 'catalog.json'), JSON.stringify(this._newCatalog));\n            this._catalog = this._newCatalog;\n            this._newCatalog = undefined;\n        } catch(err: unknown) {\n            throw new Error(`Error saving document catalog: ${(err as any).toString()}`);\n        }\n    }","file":"/src/LocalDocumentIndex.ts","language":"typescript","fileHash":"6f23de8064ad58a75e6251d6940f9751f6a6e8f389e9f6bffdb7113f655b8b36","hash":"1c68ac1792542eea69ea77f52e65866ec2f36960f61256bd02e45b01f372c54f","processedContent":"public async endUpdate(): Promise<void> {\n        await super.endUpdate(); #This code is a method that saves the current state of an index to disk. It first checks if there is an update in progress, and then it writes the update to a file using the `fs` module. If there is an error while saving the file, it throws a new error with the error message.\n\n        try {\n            // Save catalog\n            await fs.writeFile(path.join(this.folderPath, 'catalog.json'), JSON.stringify(this._newCatalog));\n            \"\"\"\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/writeFile().: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#join().: undefined\n            scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#`<get>folderPath`().: undefined\n            scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_newCatalog.: undefined\n            \"\"\"\n            this._catalog = this._newCatalog;\n            \"\"\"\n            scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_newCatalog.: undefined\n            scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_catalog.: undefined\n            \"\"\"\n            this._newCatalog = undefined; #undefined\n        } catch(err: unknown) {\n            throw new Error(`Error saving document catalog: ${(err as any).toString()}`);\n        }\n    }","documentation":"This code is a method that saves the current state of an index to disk. It first checks if there is an update in progress, and then it writes the update to a file using the `fs` module. If there is an error while saving the file, it throws a new error with the error message."}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#loadIndexData().","attributes":{"range":[327,4,353,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#loadIndexData().","content":"protected async loadIndexData(): Promise<void> {\n        await super.loadIndexData();\n\n        if (this._catalog) {\n            return;\n        }\n\n        const catalogPath = path.join(this.folderPath, 'catalog.json');\n        if (await this.isCatalogCreated()) {\n            // Load catalog\n            const buffer = await fs.readFile(catalogPath);\n            this._catalog = JSON.parse(buffer.toString());\n        } else {\n            try {\n                // Initialize catalog\n                this._catalog = {\n                    version: 1,\n                    count: 0,\n                    uriToId: {},\n                    idToUri: {},\n                };\n                await fs.writeFile(catalogPath, JSON.stringify(this._catalog));\n            } catch(err: unknown) {\n                throw new Error(`Error creating document catalog: ${(err as any).toString()}`);\n            }\n        }\n    }","file":"/src/LocalDocumentIndex.ts","language":"typescript","fileHash":"6f23de8064ad58a75e6251d6940f9751f6a6e8f389e9f6bffdb7113f655b8b36","hash":"61923957e718f81375233d184dbc42b08b3111a73ff0dcfb1a5abd4d0acdd3e1","processedContent":"protected async loadIndexData(): Promise<void> {\n        await super.loadIndexData(); #This code checks if an index file exists in a specific folder and reads the contents of the file into memory.\n\n        if (this._catalog) { #undefined\n            return;\n        }\n\n        const catalogPath = path.join(this.folderPath, 'catalog.json');\n        \"\"\"\n        scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#: undefined\n        scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#join().: undefined\n        scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#`<get>folderPath`().: undefined\n        \"\"\"\n        if (await this.isCatalogCreated()) { #This code checks if a catalog file exists in the specified folder path. If it does, it returns true, otherwise it returns false.\n            // Load catalog\n            const buffer = await fs.readFile(catalogPath);\n            \"\"\"\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/readFile().: undefined\n            \"\"\"\n            this._catalog = JSON.parse(buffer.toString()); #undefined\n        } else {\n            try {\n                // Initialize catalog\n                this._catalog = { #undefined\n                    version: 1,\n                    count: 0,\n                    uriToId: {},\n                    idToUri: {},\n                };\n                await fs.writeFile(catalogPath, JSON.stringify(this._catalog));\n                \"\"\"\n                scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_catalog.: undefined\n                scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/: undefined\n                scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/writeFile().: undefined\n                \"\"\"\n            } catch(err: unknown) {\n                throw new Error(`Error creating document catalog: ${(err as any).toString()}`);\n            }\n        }\n    }","documentation":"This code checks if a catalog file exists in a specific folder and reads its contents into memory. If it doesn't exist, it initializes the catalog with default values and saves it to disk."}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/DocumentCatalog#","attributes":{"range":[356,0,361,1],"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/DocumentCatalog#","content":"interface DocumentCatalog {\n    version: number;\n    count: number;\n    uriToId: { [uri: string]: string; };\n    idToUri: { [id: string]: string; };\n}","file":"/src/LocalDocumentIndex.ts","language":"typescript","fileHash":"6f23de8064ad58a75e6251d6940f9751f6a6e8f389e9f6bffdb7113f655b8b36","hash":"3d03b717fded86247b82f0f8f6f315077ef315e021e4c69fa3c2eb9057cc1f88","processedContent":"interface DocumentCatalog {\n    version: number;\n    count: number;\n    uriToId: { [uri: string]: string; };\n    idToUri: { [id: string]: string; };\n}","documentation":"This code defines a data structure called DocumentCatalog, which stores information about documents in a digital library. It includes version number, count of documents, and two dictionaries to map between document URIs and IDs."}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndexConfig#folderPath.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndexConfig#folderPath.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_embeddings.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_embeddings.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndexConfig#embeddings.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndexConfig#embeddings.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_chunkingConfig.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_chunkingConfig.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndexConfig#chunkingConfig.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndexConfig#chunkingConfig.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_tokenizer.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_tokenizer.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndexConfig#tokenizer.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndexConfig#tokenizer.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#`<get>folderPath`().","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#`<get>folderPath`().","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_catalog.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_catalog.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/DocumentCatalog#uriToId.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/DocumentCatalog#uriToId.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/DocumentCatalog#idToUri.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/DocumentCatalog#idToUri.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_newCatalog.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_newCatalog.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/DocumentCatalog#count.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/DocumentCatalog#count.","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/unlink().","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/unlink().","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/DocumentCatalog#version.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/DocumentCatalog#version.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#`<constructor>`().","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#`<constructor>`().","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`types.ts`/EmbeddingsModel#maxTokens.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`types.ts`/EmbeddingsModel#maxTokens.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`types.ts`/EmbeddingsModel#createEmbeddings().","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`types.ts`/EmbeddingsModel#createEmbeddings().","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`types.ts`/EmbeddingsResponse#status.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`types.ts`/EmbeddingsResponse#status.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`types.ts`/EmbeddingsResponse#message.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`types.ts`/EmbeddingsResponse#message.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`types.ts`/EmbeddingsResponse#output.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`types.ts`/EmbeddingsResponse#output.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#`<constructor>`().","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#`<constructor>`().","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/DocumentQueryOptions#maxChunks.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/DocumentQueryOptions#maxChunks.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/DocumentQueryOptions#filter.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/DocumentQueryOptions#filter.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#`<constructor>`().","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#`<constructor>`().","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/DocumentQueryOptions#maxDocuments.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/DocumentQueryOptions#maxDocuments.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/","attributes":{"range":[0,0,227,0],"symbol":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/","content":"import axios, { AxiosRequestConfig } from \"axios\";\nimport { TextFetcher } from './types';\nimport * as cheerio from 'cheerio';\nimport TurndownService  from 'turndown';\n\nconst ALLOWED_CONTENT_TYPES = [\n    \"text/html\",\n    \"application/json\",\n    \"application/xml\",\n    \"application/javascript\",\n    \"text/plain\",\n];\n\nconst DEFAULT_HEADERS = {\n    Accept: \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\",\n    \"Accept-Encoding\": \"gzip, deflate, sdch, br\",\n    \"Accept-Language\": \"en-US,en;q=0.8,ms;q=0.6\",\n    \"Alt-Used\": \"LEAVE-THIS-KEY-SET-BY-TOOL\",\n    Connection: \"keep-alive\",\n    Host: \"LEAVE-THIS-KEY-SET-BY-TOOL\",\n    Referer: \"https://www.google.com/\",\n    \"Sec-Fetch-Dest\": \"document\",\n    \"Sec-Fetch-Mode\": \"navigate\",\n    \"Sec-Fetch-Site\": \"cross-site\",\n    \"Upgrade-Insecure-Requests\": \"1\",\n    \"User-Agent\": \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36\",\n};\n\nexport interface WebFetcherConfig {\n    headers?: Record<string,string>;\n    requestConfig?: AxiosRequestConfig;\n    htmlToMarkdown: boolean;\n    summarizeHtml: boolean;\n}\n\nexport class WebFetcher implements TextFetcher {\n    private readonly _config: WebFetcherConfig;\n\n    public constructor(config?: Partial<WebFetcherConfig>) {\n        this._config = Object.assign({\n            htmlToMarkdown: true,\n            summarizeHtml: false,\n        } as WebFetcherConfig, config);\n    }\n\n    public async fetch(uri: string, onDocument: (uri: string, text: string, docType?: string) => Promise<boolean>): Promise<boolean> {\n        const httpClient = axios.create({\n            validateStatus: () => true,\n        });\n\n        // Clone headers to avoid mutating the original\n        const headers = Object.assign({}, DEFAULT_HEADERS, this._config.headers)\n\n        // get hostname from url\n        const host = new URL(uri).hostname;\n        headers['Host'] = host;\n        headers['Alt-Used'] = host;\n\n        // Fetch page and check for errors\n        const response = await httpClient.get(uri, {\n            headers,\n            ...this._config.requestConfig,\n        });\n        if (response.status >= 400) {\n            throw new Error(`Site returned an HTTP status of ${response.status}`);\n        }\n\n        // Check for valid content type\n        const contentType = response.headers['content-type'];\n        const contentTypeArray = contentType.split(';');\n        if (!contentTypeArray[0] || !ALLOWED_CONTENT_TYPES.includes(contentTypeArray[0])) {\n            throw new Error(`Site returned an invalid content type of ${contentType}`);\n        }\n\n        // Convert content type to doc type\n        const docType = contentTypeArray[0] != 'text/plain' ? contentTypeArray[0].split('/')[1] : undefined;\n        if (docType == 'html' && this._config.htmlToMarkdown) {\n            const text = this.htmlToMarkdown(response.data, uri);\n            return await onDocument(uri, text, 'md');\n        } else {\n            const text = response.data;\n            return await onDocument(uri, text, docType);\n        }\n    }\n\n\n    private htmlToMarkdown(html: string, baseUrl: string): string {\n        // Parse HTML and remove scripts\n        const $ = cheerio.load(html, { scriptingEnabled: true });\n\n        // Remove scripts and convert relative links to absolute\n        $('script').remove();\n        $('a').each((i, elem) => {\n            const $el = $(elem);\n            const href = $el.attr(\"href\");\n            if (href && !href.startsWith(\"http\")) {\n                // Try converting to an absolute link\n                try {\n                    $el.attr(\"href\", new URL(href, baseUrl).toString());\n                } catch {\n                    // Leave as is\n                }\n            }\n        });\n\n        // Convert to markdown\n        const body = $('body').html() ?? '';\n        const turndownService = new TurndownService({\n            hr: '\\n\\n---\\n\\n',\n        });\n        convertTables(turndownService);\n        const md = turndownService.turndown(body);\n\n        // Remove any overly long header text\n        const contentStart = Math.min(md.indexOf('\\n'), md.indexOf(' '));\n        if (contentStart > 64) {\n            return md.slice(contentStart);\n        } else {\n            return md;\n        }\n    }\n}\n\nfunction convertTables(turndownService: TurndownService): void {\n    turndownService.addRule('tableCell', {\n        filter: ['th', 'td'],\n        replacement: function (content, node) {\n            return cell(content, node)\n        }\n    });\n\n    turndownService.addRule('tableRow', {\n        filter: 'tr',\n        replacement: function (content, node) {\n            var borderCells = ''\n            var alignMap: any = { left: ':--', right: '--:', center: ':-:' }\n\n            if (isHeadingRow(node)) {\n                for (var i = 0; i < node.childNodes.length; i++) {\n                    var border = '---'\n                    var align: string = (\n                        node.childNodes[i].getAttribute('align') || ''\n                    ).toLowerCase()\n\n                    if (align) border = alignMap[align] || border\n\n                    borderCells += cell(border, node.childNodes[i])\n                }\n            }\n            return '\\n' + content + (borderCells ? '\\n' + borderCells : '')\n        }\n    });\n\n    turndownService.addRule('table', {\n        filter: ['table'],\n        replacement: function (content, node) {\n            // Ensure there are no blank lines\n            content = content.replace('\\n\\n', '\\n')\n            return '\\n\\n' + content + '\\n\\n'\n        }\n    });\n\n    turndownService.addRule('tableSection', {\n        filter: ['thead', 'tbody', 'tfoot'],\n        replacement: function (content) {\n            return content\n        }\n    });\n}\n\nconst indexOf = Array.prototype.indexOf\nconst every = Array.prototype.every\n\n// A tr is a heading row if:\n// - the parent is a THEAD\n// - or if its the first child of the TABLE or the first TBODY (possibly\n//   following a blank THEAD)\n// - and every cell is a TH\nfunction isHeadingRow(tr: any) {\n    var parentNode = tr.parentNode\n    return (\n        parentNode.nodeName === 'THEAD' ||\n        (\n            parentNode.firstChild === tr &&\n            (parentNode.nodeName === 'TABLE' || isFirstTbody(parentNode)) &&\n            every.call(tr.childNodes, function (n) { return n.nodeName === 'TH' })\n        )\n    )\n}\n\nfunction isFirstTbody(element: any) {\n    var previousSibling = element.previousSibling\n    return (\n        element.nodeName === 'TBODY' && (\n            !previousSibling ||\n            (\n                previousSibling.nodeName === 'THEAD' &&\n                /^\\s*$/i.test(previousSibling.textContent)\n            )\n        )\n    )\n}\n\nfunction cell(content: string, node: any): string {\n    var index = indexOf.call(node.parentNode.childNodes, node)\n    var prefix = ' '\n    if (index === 0) {\n        prefix = '| '\n    }\n    return cleanContent(prefix + content + ' |');\n}\n\nfunction cleanContent(content: string): string {\n    let output = '';\n    const chars = ['\\n', '\\r', '\\t', '\\f', '\\v', '\\u00a0', '\\u2028', '\\u2029', ' '];\n    for (let i = 0; i < content.length; i++) {\n        if (chars.includes(content[i])) {\n            if (output[output.length - 1] != ' ') {\n                output += ' ';\n            }\n            continue;\n        } else {\n            output += content[i];\n        }\n    }\n    return output;\n}\n","file":"/src/WebFetcher.ts","language":"typescript","fileHash":"a88ab2f7438d795f2a77dd318c95a403e7ab810e6c023d9e1b00fc058e31f66c","hash":"a88ab2f7438d795f2a77dd318c95a403e7ab810e6c023d9e1b00fc058e31f66c","processedContent":"import axios, { AxiosRequestConfig } from \"axios\";\n\"\"\"\nscip-typescript npm axios 1.6.2 `index.d.ts`/axios.: undefined\nscip-typescript npm axios 1.6.2 `index.d.ts`/AxiosRequestConfig#: undefined\nscip-typescript npm axios 1.6.2 `index.d.ts`/: undefined\n\"\"\"\nimport { TextFetcher } from './types';\n\"\"\"\nscip-typescript npm vectra 0.5.5 src/`types.ts`/TextFetcher#: This code defines an interface for a text fetcher, which allows you to fetch text from a URI and pass it to a callback function. The interface specifies a single method, `fetch`, that takes a URI and a callback function as arguments, and returns a promise that resolves to a boolean value indicating whether the fetch was successful.\nscip-typescript npm vectra 0.5.5 src/`types.ts`/: The code defines various interfaces and types for an AI model that can create embeddings for text inputs, including a response status, embeddings response, text chunk, text fetcher, index statistics, index item, metadata filter, query result, tokenizer, document chunk metadata, and document catalog statistics.\n\"\"\"\nimport * as cheerio from 'cheerio';\n\"\"\"\nscip-typescript npm cheerio 1.0.0-rc.12 lib/`index.d.ts`/: undefined\nscip-typescript npm cheerio 1.0.0-rc.12 lib/`index.d.ts`/: undefined\n\"\"\"\nimport TurndownService  from 'turndown';\n\nconst ALLOWED_CONTENT_TYPES = [\n    \"text/html\",\n    \"application/json\",\n    \"application/xml\",\n    \"application/javascript\",\n    \"text/plain\",\n];\n\nconst DEFAULT_HEADERS = {\n    Accept: \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\",\n    \"Accept-Encoding\": \"gzip, deflate, sdch, br\",\n    \"Accept-Language\": \"en-US,en;q=0.8,ms;q=0.6\",\n    \"Alt-Used\": \"LEAVE-THIS-KEY-SET-BY-TOOL\",\n    Connection: \"keep-alive\",\n    Host: \"LEAVE-THIS-KEY-SET-BY-TOOL\",\n    Referer: \"https://www.google.com/\",\n    \"Sec-Fetch-Dest\": \"document\",\n    \"Sec-Fetch-Mode\": \"navigate\",\n    \"Sec-Fetch-Site\": \"cross-site\",\n    \"Upgrade-Insecure-Requests\": \"1\",\n    \"User-Agent\": \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36\",\n};\n\nexport interface WebFetcherConfig {\n    \"\"\"This code defines an interface for a web fetcher configuration, which allows users to customize the headers and request configuration for HTTP requests. The interface also includes options to convert HTML to Markdown and summarize HTML content.\"\"\"\n    pass\n\nexport class WebFetcher implements TextFetcher {\n    \"\"\"This code defines a class called WebFetcher that fetches web pages and converts them to Markdown documents using Axios and Cheerio. It also includes options to convert HTML to Markdown and summarize HTML content.\"\"\"\n    pass\n\nfunction convertTables(turndownService: TurndownService): void {\n    \"\"\"The code defines a function called \"convertTables\" that takes a TurndownService object as an argument. It adds three rules to the TurndownService object, which are used to convert HTML tables into Markdown tables. The first rule defines how table cells should be formatted, the second rule defines how table rows should be formatted, and the third rule defines how tables should be formatted overall.\"\"\"\n    pass\n\nconst indexOf = Array.prototype.indexOf\nconst every = Array.prototype.every\n\n// A tr is a heading row if:\n// - the parent is a THEAD\n// - or if its the first child of the TABLE or the first TBODY (possibly\n//   following a blank THEAD)\n// - and every cell is a TH\nfunction isHeadingRow(tr: any) {\n    \"\"\"This code checks if a table row (tr) is a heading row by checking if its parent node is a thead or if it's the first tbody in a table and all of its child nodes are th elements.\"\"\"\n    pass\n\nfunction isFirstTbody(element: any) {\n    \"\"\"This code checks if an element is the first tbody in a table, by checking if it has a previous sibling that is a thead with no content.\"\"\"\n    pass\n\nfunction cell(content: string, node: any): string {\n    \"\"\"This code defines a function called \"cell\" that takes two arguments: a string and an object. It returns a cleaned-up version of the input string, with any whitespace characters removed.\"\"\"\n    pass\n\nfunction cleanContent(content: string): string {\n    \"\"\"This code takes a string as input and removes any whitespace characters, including newlines, tabs, and spaces. It then returns the cleaned-up string.\"\"\"\n    pass\n","documentation":"The code defines a class called WebFetcher that fetches web pages and converts them to Markdown documents using Axios and Cheerio. It also includes options to convert HTML to Markdown and summarize HTML content."}},{"key":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcherConfig#","attributes":{"range":[28,0,33,1],"symbol":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcherConfig#","content":"export interface WebFetcherConfig {\n    headers?: Record<string,string>;\n    requestConfig?: AxiosRequestConfig;\n    htmlToMarkdown: boolean;\n    summarizeHtml: boolean;\n}","file":"/src/WebFetcher.ts","language":"typescript","fileHash":"a88ab2f7438d795f2a77dd318c95a403e7ab810e6c023d9e1b00fc058e31f66c","hash":"08844e0bfa2e16fa1adaf6729a67eb47552029896f2af7bc5fb1393b7d5970f2","processedContent":"export interface WebFetcherConfig {\n    headers?: Record<string,string>;\n    requestConfig?: AxiosRequestConfig; #undefined\n    htmlToMarkdown: boolean;\n    summarizeHtml: boolean;\n}","documentation":"This code defines an interface for a web fetcher configuration, which allows users to customize the headers and request configuration for HTTP requests. The interface also includes options to convert HTML to Markdown and summarize HTML content."}},{"key":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#","attributes":{"range":[35,0,121,1],"symbol":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#","content":"export class WebFetcher implements TextFetcher {\n    private readonly _config: WebFetcherConfig;\n\n    public constructor(config?: Partial<WebFetcherConfig>) {\n        this._config = Object.assign({\n            htmlToMarkdown: true,\n            summarizeHtml: false,\n        } as WebFetcherConfig, config);\n    }\n\n    public async fetch(uri: string, onDocument: (uri: string, text: string, docType?: string) => Promise<boolean>): Promise<boolean> {\n        const httpClient = axios.create({\n            validateStatus: () => true,\n        });\n\n        // Clone headers to avoid mutating the original\n        const headers = Object.assign({}, DEFAULT_HEADERS, this._config.headers)\n\n        // get hostname from url\n        const host = new URL(uri).hostname;\n        headers['Host'] = host;\n        headers['Alt-Used'] = host;\n\n        // Fetch page and check for errors\n        const response = await httpClient.get(uri, {\n            headers,\n            ...this._config.requestConfig,\n        });\n        if (response.status >= 400) {\n            throw new Error(`Site returned an HTTP status of ${response.status}`);\n        }\n\n        // Check for valid content type\n        const contentType = response.headers['content-type'];\n        const contentTypeArray = contentType.split(';');\n        if (!contentTypeArray[0] || !ALLOWED_CONTENT_TYPES.includes(contentTypeArray[0])) {\n            throw new Error(`Site returned an invalid content type of ${contentType}`);\n        }\n\n        // Convert content type to doc type\n        const docType = contentTypeArray[0] != 'text/plain' ? contentTypeArray[0].split('/')[1] : undefined;\n        if (docType == 'html' && this._config.htmlToMarkdown) {\n            const text = this.htmlToMarkdown(response.data, uri);\n            return await onDocument(uri, text, 'md');\n        } else {\n            const text = response.data;\n            return await onDocument(uri, text, docType);\n        }\n    }\n\n\n    private htmlToMarkdown(html: string, baseUrl: string): string {\n        // Parse HTML and remove scripts\n        const $ = cheerio.load(html, { scriptingEnabled: true });\n\n        // Remove scripts and convert relative links to absolute\n        $('script').remove();\n        $('a').each((i, elem) => {\n            const $el = $(elem);\n            const href = $el.attr(\"href\");\n            if (href && !href.startsWith(\"http\")) {\n                // Try converting to an absolute link\n                try {\n                    $el.attr(\"href\", new URL(href, baseUrl).toString());\n                } catch {\n                    // Leave as is\n                }\n            }\n        });\n\n        // Convert to markdown\n        const body = $('body').html() ?? '';\n        const turndownService = new TurndownService({\n            hr: '\\n\\n---\\n\\n',\n        });\n        convertTables(turndownService);\n        const md = turndownService.turndown(body);\n\n        // Remove any overly long header text\n        const contentStart = Math.min(md.indexOf('\\n'), md.indexOf(' '));\n        if (contentStart > 64) {\n            return md.slice(contentStart);\n        } else {\n            return md;\n        }\n    }\n}","file":"/src/WebFetcher.ts","language":"typescript","fileHash":"a88ab2f7438d795f2a77dd318c95a403e7ab810e6c023d9e1b00fc058e31f66c","hash":"895b5af7f949f0f1f755c719c353ef8b2b362d86ce748afceae5fffea624a1c8","processedContent":"export class WebFetcher implements TextFetcher { #This code defines an interface for a text fetcher, which allows you to fetch text from a URI and pass it to a callback function. The interface specifies a single method, `fetch`, that takes a URI and a callback function as arguments, and returns a promise that resolves to a boolean value indicating whether the fetch was successful.\n    private readonly _config: WebFetcherConfig; #This code defines an interface for a web fetcher configuration, which allows users to customize the headers and request configuration for HTTP requests. The interface also includes options to convert HTML to Markdown and summarize HTML content.\n\n    public constructor(config?: Partial<WebFetcherConfig>) { #This code defines an interface for a web fetcher configuration, which allows users to customize the headers and request configuration for HTTP requests. The interface also includes options to convert HTML to Markdown and summarize HTML content.\n        this._config = Object.assign({ #undefined\n            htmlToMarkdown: true,\n            summarizeHtml: false,\n        } as WebFetcherConfig, config); #This code defines an interface for a web fetcher configuration, which allows users to customize the headers and request configuration for HTTP requests. The interface also includes options to convert HTML to Markdown and summarize HTML content.\n    }\n\n    public async fetch(uri: string, onDocument: (uri: string, text: string, docType?: string) => Promise<boolean>): Promise<boolean> {\n        \"\"\"This code fetches a web page and converts it to a Markdown document, using the Axios library to make HTTP requests and the Cheerio library to parse HTML. It also handles errors and validates the content type of the response.\"\"\"\n        pass\n\n\n    private htmlToMarkdown(html: string, baseUrl: string): string {\n        \"\"\"The code takes an HTML string and a base URL as input, parses the HTML using Cheerio, removes scripts and converts relative links to absolute, converts the HTML to Markdown using TurndownService, and removes any overly long header text.\"\"\"\n        pass\n}","documentation":"This code defines a class called WebFetcher that fetches web pages and converts them to Markdown documents using Axios and Cheerio. It also includes options to convert HTML to Markdown and summarize HTML content."}},{"key":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#fetch().","attributes":{"range":[45,4,83,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#fetch().","content":"public async fetch(uri: string, onDocument: (uri: string, text: string, docType?: string) => Promise<boolean>): Promise<boolean> {\n        const httpClient = axios.create({\n            validateStatus: () => true,\n        });\n\n        // Clone headers to avoid mutating the original\n        const headers = Object.assign({}, DEFAULT_HEADERS, this._config.headers)\n\n        // get hostname from url\n        const host = new URL(uri).hostname;\n        headers['Host'] = host;\n        headers['Alt-Used'] = host;\n\n        // Fetch page and check for errors\n        const response = await httpClient.get(uri, {\n            headers,\n            ...this._config.requestConfig,\n        });\n        if (response.status >= 400) {\n            throw new Error(`Site returned an HTTP status of ${response.status}`);\n        }\n\n        // Check for valid content type\n        const contentType = response.headers['content-type'];\n        const contentTypeArray = contentType.split(';');\n        if (!contentTypeArray[0] || !ALLOWED_CONTENT_TYPES.includes(contentTypeArray[0])) {\n            throw new Error(`Site returned an invalid content type of ${contentType}`);\n        }\n\n        // Convert content type to doc type\n        const docType = contentTypeArray[0] != 'text/plain' ? contentTypeArray[0].split('/')[1] : undefined;\n        if (docType == 'html' && this._config.htmlToMarkdown) {\n            const text = this.htmlToMarkdown(response.data, uri);\n            return await onDocument(uri, text, 'md');\n        } else {\n            const text = response.data;\n            return await onDocument(uri, text, docType);\n        }\n    }","file":"/src/WebFetcher.ts","language":"typescript","fileHash":"a88ab2f7438d795f2a77dd318c95a403e7ab810e6c023d9e1b00fc058e31f66c","hash":"e979aa31cb6919c83e47648b862ab4f4d169233935cfedd920fecbceda77c07a","processedContent":"public async fetch(uri: string, onDocument: (uri: string, text: string, docType?: string) => Promise<boolean>): Promise<boolean> {\n        const httpClient = axios.create({\n        \"\"\"\n        scip-typescript npm axios 1.6.2 `index.d.ts`/axios.: undefined\n        scip-typescript npm axios 1.6.2 `index.d.ts`/AxiosStatic#create().: undefined\n        \"\"\"\n            validateStatus: () => true,\n        });\n\n        // Clone headers to avoid mutating the original\n        const headers = Object.assign({}, DEFAULT_HEADERS, this._config.headers)\n        \"\"\"\n        scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/DEFAULT_HEADERS.: undefined\n        scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#_config.: undefined\n        scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcherConfig#headers.: undefined\n        \"\"\"\n\n        // get hostname from url\n        const host = new URL(uri).hostname;\n        \"\"\"\n        scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/global/URL#: undefined\n        scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/global/URL.: undefined\n        scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/URL#hostname.: undefined\n        \"\"\"\n        headers['Host'] = host;\n        headers['Alt-Used'] = host;\n\n        // Fetch page and check for errors\n        const response = await httpClient.get(uri, { #undefined\n            headers,\n            ...this._config.requestConfig,\n            \"\"\"\n            scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#_config.: undefined\n            scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcherConfig#requestConfig.: undefined\n            \"\"\"\n        });\n        if (response.status >= 400) {\n            throw new Error(`Site returned an HTTP status of ${response.status}`);\n        }\n\n        // Check for valid content type\n        const contentType = response.headers['content-type'];\n        const contentTypeArray = contentType.split(';');\n        if (!contentTypeArray[0] || !ALLOWED_CONTENT_TYPES.includes(contentTypeArray[0])) { #undefined\n            throw new Error(`Site returned an invalid content type of ${contentType}`);\n        }\n\n        // Convert content type to doc type\n        const docType = contentTypeArray[0] != 'text/plain' ? contentTypeArray[0].split('/')[1] : undefined;\n        if (docType == 'html' && this._config.htmlToMarkdown) {\n        \"\"\"\n        scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#_config.: undefined\n        scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcherConfig#htmlToMarkdown.: undefined\n        \"\"\"\n            const text = this.htmlToMarkdown(response.data, uri); #The code takes an HTML string and a base URL as input, parses the HTML using Cheerio, removes scripts and converts relative links to absolute, converts the HTML to Markdown using TurndownService, and removes any overly long header text.\n            return await onDocument(uri, text, 'md');\n        } else {\n            const text = response.data;\n            return await onDocument(uri, text, docType);\n        }\n    }","documentation":"This code fetches a web page and converts it to a Markdown document, using the Axios library to make HTTP requests and the Cheerio library to parse HTML. It also handles errors and validates the content type of the response."}},{"key":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#htmlToMarkdown().","attributes":{"range":[86,4,120,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#htmlToMarkdown().","content":"private htmlToMarkdown(html: string, baseUrl: string): string {\n        // Parse HTML and remove scripts\n        const $ = cheerio.load(html, { scriptingEnabled: true });\n\n        // Remove scripts and convert relative links to absolute\n        $('script').remove();\n        $('a').each((i, elem) => {\n            const $el = $(elem);\n            const href = $el.attr(\"href\");\n            if (href && !href.startsWith(\"http\")) {\n                // Try converting to an absolute link\n                try {\n                    $el.attr(\"href\", new URL(href, baseUrl).toString());\n                } catch {\n                    // Leave as is\n                }\n            }\n        });\n\n        // Convert to markdown\n        const body = $('body').html() ?? '';\n        const turndownService = new TurndownService({\n            hr: '\\n\\n---\\n\\n',\n        });\n        convertTables(turndownService);\n        const md = turndownService.turndown(body);\n\n        // Remove any overly long header text\n        const contentStart = Math.min(md.indexOf('\\n'), md.indexOf(' '));\n        if (contentStart > 64) {\n            return md.slice(contentStart);\n        } else {\n            return md;\n        }\n    }","file":"/src/WebFetcher.ts","language":"typescript","fileHash":"a88ab2f7438d795f2a77dd318c95a403e7ab810e6c023d9e1b00fc058e31f66c","hash":"09601d97c55d6d1c20555f9970b3111c4995b78e79d3ba71a11b244832e61a69","processedContent":"private htmlToMarkdown(html: string, baseUrl: string): string {\n        // Parse HTML and remove scripts\n        const $ = cheerio.load(html, { scriptingEnabled: true });\n        \"\"\"\n        scip-typescript npm cheerio 1.0.0-rc.12 lib/`index.d.ts`/: undefined\n        scip-typescript npm cheerio 1.0.0-rc.12 lib/`index.d.ts`/load.: undefined\n        \"\"\"\n\n        // Remove scripts and convert relative links to absolute\n        $('script').remove(); #undefined\n        $('a').each((i, elem) => { #undefined\n            const $el = $(elem);\n            const href = $el.attr(\"href\"); #undefined\n            if (href && !href.startsWith(\"http\")) {\n                // Try converting to an absolute link\n                try {\n                    $el.attr(\"href\", new URL(href, baseUrl).toString());\n                    \"\"\"\n                    scip-typescript npm cheerio 1.0.0-rc.12 lib/api/`attributes.d.ts`/attr().: undefined\n                    scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/global/URL#: undefined\n                    scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/global/URL.: undefined\n                    scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/URL#toString().: undefined\n                    \"\"\"\n                } catch {\n                    // Leave as is\n                }\n            }\n        });\n\n        // Convert to markdown\n        const body = $('body').html() ?? ''; #undefined\n        const turndownService = new TurndownService({\n            hr: '\\n\\n---\\n\\n',\n        });\n        convertTables(turndownService); #The code defines a function called \"convertTables\" that takes a TurndownService object as an argument. It adds three rules to the TurndownService object, which are used to convert HTML tables into Markdown tables. The first rule defines how table cells should be formatted, the second rule defines how table rows should be formatted, and the third rule defines how tables should be formatted overall.\n        const md = turndownService.turndown(body);\n\n        // Remove any overly long header text\n        const contentStart = Math.min(md.indexOf('\\n'), md.indexOf(' '));\n        if (contentStart > 64) {\n            return md.slice(contentStart);\n        } else {\n            return md;\n        }\n    }","documentation":"The code takes an HTML string and a base URL as input, parses the HTML using Cheerio, removes scripts and converts relative links to absolute, converts the HTML to Markdown using TurndownService, and removes any overly long header text."}},{"key":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/convertTables().","attributes":{"range":[123,0,168,1],"symbol":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/convertTables().","content":"function convertTables(turndownService: TurndownService): void {\n    turndownService.addRule('tableCell', {\n        filter: ['th', 'td'],\n        replacement: function (content, node) {\n            return cell(content, node)\n        }\n    });\n\n    turndownService.addRule('tableRow', {\n        filter: 'tr',\n        replacement: function (content, node) {\n            var borderCells = ''\n            var alignMap: any = { left: ':--', right: '--:', center: ':-:' }\n\n            if (isHeadingRow(node)) {\n                for (var i = 0; i < node.childNodes.length; i++) {\n                    var border = '---'\n                    var align: string = (\n                        node.childNodes[i].getAttribute('align') || ''\n                    ).toLowerCase()\n\n                    if (align) border = alignMap[align] || border\n\n                    borderCells += cell(border, node.childNodes[i])\n                }\n            }\n            return '\\n' + content + (borderCells ? '\\n' + borderCells : '')\n        }\n    });\n\n    turndownService.addRule('table', {\n        filter: ['table'],\n        replacement: function (content, node) {\n            // Ensure there are no blank lines\n            content = content.replace('\\n\\n', '\\n')\n            return '\\n\\n' + content + '\\n\\n'\n        }\n    });\n\n    turndownService.addRule('tableSection', {\n        filter: ['thead', 'tbody', 'tfoot'],\n        replacement: function (content) {\n            return content\n        }\n    });\n}","file":"/src/WebFetcher.ts","language":"typescript","fileHash":"a88ab2f7438d795f2a77dd318c95a403e7ab810e6c023d9e1b00fc058e31f66c","hash":"a542548d88a66e211afb0f44063eadf5f4d6cf14f10bd0f8ab2ff60efab954b3","processedContent":"function convertTables(turndownService: TurndownService): void {\n    turndownService.addRule('tableCell', {\n        filter: ['th', 'td'],\n        replacement: function (content, node) {\n            return cell(content, node) #This code defines a function called \"cell\" that takes two arguments: a string and an object. It returns a cleaned-up version of the input string, with any whitespace characters removed.\n        }\n    });\n\n    turndownService.addRule('tableRow', {\n        filter: 'tr',\n        replacement: function (content, node) {\n            var borderCells = ''\n            var alignMap: any = { left: ':--', right: '--:', center: ':-:' }\n\n            if (isHeadingRow(node)) { #This code checks if a table row (tr) is a heading row by checking if its parent node is a thead or if it's the first tbody in a table and all of its child nodes are th elements.\n                for (var i = 0; i < node.childNodes.length; i++) {\n                    var border = '---'\n                    var align: string = (\n                        node.childNodes[i].getAttribute('align') || ''\n                    ).toLowerCase()\n\n                    if (align) border = alignMap[align] || border\n\n                    borderCells += cell(border, node.childNodes[i]) #This code defines a function called \"cell\" that takes two arguments: a string and an object. It returns a cleaned-up version of the input string, with any whitespace characters removed.\n                }\n            }\n            return '\\n' + content + (borderCells ? '\\n' + borderCells : '')\n        }\n    });\n\n    turndownService.addRule('table', {\n        filter: ['table'],\n        replacement: function (content, node) {\n            // Ensure there are no blank lines\n            content = content.replace('\\n\\n', '\\n')\n            return '\\n\\n' + content + '\\n\\n'\n        }\n    });\n\n    turndownService.addRule('tableSection', {\n        filter: ['thead', 'tbody', 'tfoot'],\n        replacement: function (content) {\n            return content\n        }\n    });\n}","documentation":"The code defines a function called \"convertTables\" that takes a TurndownService object as an argument. It adds three rules to the TurndownService object, which are used to convert HTML tables into Markdown tables. The first rule defines how table cells should be formatted, the second rule defines how table rows should be formatted, and the third rule defines how tables should be formatted overall."}},{"key":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/isHeadingRow().","attributes":{"range":[178,0,188,1],"symbol":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/isHeadingRow().","content":"function isHeadingRow(tr: any) {\n    var parentNode = tr.parentNode\n    return (\n        parentNode.nodeName === 'THEAD' ||\n        (\n            parentNode.firstChild === tr &&\n            (parentNode.nodeName === 'TABLE' || isFirstTbody(parentNode)) &&\n            every.call(tr.childNodes, function (n) { return n.nodeName === 'TH' })\n        )\n    )\n}","file":"/src/WebFetcher.ts","language":"typescript","fileHash":"a88ab2f7438d795f2a77dd318c95a403e7ab810e6c023d9e1b00fc058e31f66c","hash":"10ca4ece35b1d81e73f1be195eb9c073664ec24877529079d93f7262e24f6bc8","processedContent":"function isHeadingRow(tr: any) {\n    var parentNode = tr.parentNode\n    return (\n        parentNode.nodeName === 'THEAD' ||\n        (\n            parentNode.firstChild === tr &&\n            (parentNode.nodeName === 'TABLE' || isFirstTbody(parentNode)) && #This code checks if an element is the first tbody in a table, by checking if it has a previous sibling that is a thead with no content.\n            every.call(tr.childNodes, function (n) { return n.nodeName === 'TH' }) #undefined\n        )\n    )\n}","documentation":"This code checks if a table row (tr) is a heading row by checking if its parent node is a thead or if it's the first tbody in a table and all of its child nodes are th elements."}},{"key":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/isFirstTbody().","attributes":{"range":[190,0,201,1],"symbol":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/isFirstTbody().","content":"function isFirstTbody(element: any) {\n    var previousSibling = element.previousSibling\n    return (\n        element.nodeName === 'TBODY' && (\n            !previousSibling ||\n            (\n                previousSibling.nodeName === 'THEAD' &&\n                /^\\s*$/i.test(previousSibling.textContent)\n            )\n        )\n    )\n}","file":"/src/WebFetcher.ts","language":"typescript","fileHash":"a88ab2f7438d795f2a77dd318c95a403e7ab810e6c023d9e1b00fc058e31f66c","hash":"be3716b3e591523abad6ed828bad1acf1fb878307f92f4ef9753fef17379b884","processedContent":"function isFirstTbody(element: any) {\n    var previousSibling = element.previousSibling\n    return (\n        element.nodeName === 'TBODY' && (\n            !previousSibling ||\n            (\n                previousSibling.nodeName === 'THEAD' &&\n                /^\\s*$/i.test(previousSibling.textContent)\n            )\n        )\n    )\n}","documentation":"This code checks if an element is the first tbody in a table, by checking if it has a previous sibling that is a thead with no content."}},{"key":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/cell().","attributes":{"range":[203,0,210,1],"symbol":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/cell().","content":"function cell(content: string, node: any): string {\n    var index = indexOf.call(node.parentNode.childNodes, node)\n    var prefix = ' '\n    if (index === 0) {\n        prefix = '| '\n    }\n    return cleanContent(prefix + content + ' |');\n}","file":"/src/WebFetcher.ts","language":"typescript","fileHash":"a88ab2f7438d795f2a77dd318c95a403e7ab810e6c023d9e1b00fc058e31f66c","hash":"5760237dd6a00d85891682bdfa40c838d0fb32bfd01a9f9d6add892374e76aca","processedContent":"function cell(content: string, node: any): string {\n    var index = indexOf.call(node.parentNode.childNodes, node) #undefined\n    var prefix = ' '\n    if (index === 0) {\n        prefix = '| '\n    }\n    return cleanContent(prefix + content + ' |'); #This code takes a string as input and removes any whitespace characters, including newlines, tabs, and spaces. It then returns the cleaned-up string.\n}","documentation":"This code defines a function called \"cell\" that takes two arguments: a string and an object. It returns a cleaned-up version of the input string, with any whitespace characters removed."}},{"key":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/cleanContent().","attributes":{"range":[212,0,226,1],"symbol":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/cleanContent().","content":"function cleanContent(content: string): string {\n    let output = '';\n    const chars = ['\\n', '\\r', '\\t', '\\f', '\\v', '\\u00a0', '\\u2028', '\\u2029', ' '];\n    for (let i = 0; i < content.length; i++) {\n        if (chars.includes(content[i])) {\n            if (output[output.length - 1] != ' ') {\n                output += ' ';\n            }\n            continue;\n        } else {\n            output += content[i];\n        }\n    }\n    return output;\n}","file":"/src/WebFetcher.ts","language":"typescript","fileHash":"a88ab2f7438d795f2a77dd318c95a403e7ab810e6c023d9e1b00fc058e31f66c","hash":"3c03455755862d7c7deeba0b4f9cf9dbe4c462fa704c5a8ca3966e9252ca51c7","processedContent":"function cleanContent(content: string): string {\n    let output = '';\n    const chars = ['\\n', '\\r', '\\t', '\\f', '\\v', '\\u00a0', '\\u2028', '\\u2029', ' '];\n    for (let i = 0; i < content.length; i++) {\n        if (chars.includes(content[i])) {\n            if (output[output.length - 1] != ' ') {\n                output += ' ';\n            }\n            continue;\n        } else {\n            output += content[i];\n        }\n    }\n    return output;\n}","documentation":"This code takes a string as input and removes any whitespace characters, including newlines, tabs, and spaces. It then returns the cleaned-up string."}},{"key":"scip-typescript npm axios 1.6.2 `index.d.ts`/axios.","attributes":{"symbol":"scip-typescript npm axios 1.6.2 `index.d.ts`/axios.","language":"typescript"}},{"key":"scip-typescript npm axios 1.6.2 `index.d.ts`/AxiosRequestConfig#","attributes":{"symbol":"scip-typescript npm axios 1.6.2 `index.d.ts`/AxiosRequestConfig#","language":"typescript"}},{"key":"scip-typescript npm axios 1.6.2 `index.d.ts`/","attributes":{"symbol":"scip-typescript npm axios 1.6.2 `index.d.ts`/","language":"typescript"}},{"key":"scip-typescript npm cheerio 1.0.0-rc.12 lib/`index.d.ts`/","attributes":{"symbol":"scip-typescript npm cheerio 1.0.0-rc.12 lib/`index.d.ts`/","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#_config.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#_config.","language":"typescript"}},{"key":"scip-typescript npm axios 1.6.2 `index.d.ts`/AxiosStatic#create().","attributes":{"symbol":"scip-typescript npm axios 1.6.2 `index.d.ts`/AxiosStatic#create().","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/DEFAULT_HEADERS.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/DEFAULT_HEADERS.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcherConfig#headers.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcherConfig#headers.","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/global/URL#","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/global/URL#","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/global/URL.","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/global/URL.","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/URL#hostname.","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/URL#hostname.","language":"typescript"}},{"key":"scip-typescript npm axios 1.6.2 `index.d.ts`/Axios#get().","attributes":{"symbol":"scip-typescript npm axios 1.6.2 `index.d.ts`/Axios#get().","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcherConfig#requestConfig.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcherConfig#requestConfig.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/ALLOWED_CONTENT_TYPES.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/ALLOWED_CONTENT_TYPES.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcherConfig#htmlToMarkdown.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcherConfig#htmlToMarkdown.","language":"typescript"}},{"key":"scip-typescript npm cheerio 1.0.0-rc.12 lib/`index.d.ts`/load.","attributes":{"symbol":"scip-typescript npm cheerio 1.0.0-rc.12 lib/`index.d.ts`/load.","language":"typescript"}},{"key":"scip-typescript npm cheerio 1.0.0-rc.12 lib/api/`manipulation.d.ts`/remove().","attributes":{"symbol":"scip-typescript npm cheerio 1.0.0-rc.12 lib/api/`manipulation.d.ts`/remove().","language":"typescript"}},{"key":"scip-typescript npm cheerio 1.0.0-rc.12 lib/api/`traversing.d.ts`/each().","attributes":{"symbol":"scip-typescript npm cheerio 1.0.0-rc.12 lib/api/`traversing.d.ts`/each().","language":"typescript"}},{"key":"scip-typescript npm cheerio 1.0.0-rc.12 lib/api/`attributes.d.ts`/attr().","attributes":{"symbol":"scip-typescript npm cheerio 1.0.0-rc.12 lib/api/`attributes.d.ts`/attr().","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/URL#toString().","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/URL#toString().","language":"typescript"}},{"key":"scip-typescript npm cheerio 1.0.0-rc.12 lib/api/`manipulation.d.ts`/html().","attributes":{"symbol":"scip-typescript npm cheerio 1.0.0-rc.12 lib/api/`manipulation.d.ts`/html().","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/every.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/every.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/indexOf.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/indexOf.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/","attributes":{"range":[0,0,63,1],"symbol":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/","content":"const colorizer = require('json-colorizer');\n\n/**\n * @private\n */\nexport class Colorize {\n    public static replaceLine(text: string): string {\n        return '\\x1b[A\\x1b[2K' + text;\n    }\n\n    public static error(error: Error|string): string {\n        if (typeof error === 'string') {\n            return `\\x1b[31;1m${error}\\x1b[0m`;\n        } else {\n            return `\\x1b[31;1m${error.message}\\x1b[0m`;\n        }\n    }\n\n    public static output(output: object | string, quote: string = '', units: string = ''): string {\n        if (typeof output === 'string') {\n            return `\\x1b[32m${quote}${output}${quote}\\x1b[0m`;\n        } else if (typeof output === 'object' && output !== null) {\n            return colorizer(output, {\n                pretty: true,\n                colors: {\n                    BRACE: 'white',\n                    BRACKET: 'white',\n                    COLON: 'white',\n                    COMMA: 'white',\n                    STRING_KEY: 'white',\n                    STRING_LITERAL: 'green',\n                    NUMBER_LITERAL: 'blue',\n                    BOOLEAN_LITERAL: 'blue',\n                    NULL_LITERAL: 'blue'\n                }\n            });\n        } else if (typeof output == 'number') {\n            return `\\x1b[34m${output}${units}\\x1b[0m`;\n        } else {\n            return `\\x1b[34m${output}\\x1b[0m`;\n        }\n    }\n\n    public static progress(message: string): string {\n        return message;\n    }\n\n    public static success(message: string): string {\n        return `\\x1b[32;1m${message}\\x1b[0m`;\n    }\n\n    public static title(title: string): string {\n        return `\\x1b[35;1m${title}\\x1b[0m`;\n    }\n\n    public static value(field: string, value: any, units: string = ''): string {\n        return `${field}: ${Colorize.output(value, '\"', units)}`;\n    }\n\n    public static warning(warning: string): string {\n        return `\\x1b[33m${warning}\\x1b[0m`;\n\n    }\n}","file":"/src/internals/Colorize.ts","language":"typescript","fileHash":"22f3ac5b06396fb572d959a5679435f341154a9b7b199f60cb6ca09a03b3a3df","hash":"22f3ac5b06396fb572d959a5679435f341154a9b7b199f60cb6ca09a03b3a3df","processedContent":"const colorizer = require('json-colorizer'); #undefined\n\n/**\n * @private\n */\nexport class Colorize {\n    public static replaceLine(text: string): string {\n        return '\\x1b[A\\x1b[2K' + text;\n    }\n\n    public static error(error: Error|string): string {\n        if (typeof error === 'string') {\n            return `\\x1b[31;1m${error}\\x1b[0m`;\n        } else {\n            return `\\x1b[31;1m${error.message}\\x1b[0m`;\n        }\n    }\n\n    public static output(output: object | string, quote: string = '', units: string = ''): string {\n        if (typeof output === 'string') {\n            return `\\x1b[32m${quote}${output}${quote}\\x1b[0m`;\n        } else if (typeof output === 'object' && output !== null) {\n            return colorizer(output, {\n                pretty: true,\n                colors: {\n                    BRACE: 'white',\n                    BRACKET: 'white',\n                    COLON: 'white',\n                    COMMA: 'white',\n                    STRING_KEY: 'white',\n                    STRING_LITERAL: 'green',\n                    NUMBER_LITERAL: 'blue',\n                    BOOLEAN_LITERAL: 'blue',\n                    NULL_LITERAL: 'blue'\n                }\n            });\n        } else if (typeof output == 'number') {\n            return `\\x1b[34m${output}${units}\\x1b[0m`;\n        } else {\n            return `\\x1b[34m${output}\\x1b[0m`;\n        }\n    }\n\n    public static progress(message: string): string {\n        return message;\n    }\n\n    public static success(message: string): string {\n        return `\\x1b[32;1m${message}\\x1b[0m`;\n    }\n\n    public static title(title: string): string {\n        return `\\x1b[35;1m${title}\\x1b[0m`;\n    }\n\n    public static value(field: string, value: any, units: string = ''): string {\n        return `${field}: ${Colorize.output(value, '\"', units)}`;\n    }\n\n    public static warning(warning: string): string {\n        return `\\x1b[33m${warning}\\x1b[0m`;\n\n    }\n}","documentation":"This code defines a class called Colorize, which provides methods for formatting and colorizing text in the terminal. It uses the json-colorizer library to highlight JSON data and other objects in different colors. The class also includes methods for displaying progress messages, success messages, warning messages, and error messages."}},{"key":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#","attributes":{"range":[5,0,63,1],"symbol":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#","content":"export class Colorize {\n    public static replaceLine(text: string): string {\n        return '\\x1b[A\\x1b[2K' + text;\n    }\n\n    public static error(error: Error|string): string {\n        if (typeof error === 'string') {\n            return `\\x1b[31;1m${error}\\x1b[0m`;\n        } else {\n            return `\\x1b[31;1m${error.message}\\x1b[0m`;\n        }\n    }\n\n    public static output(output: object | string, quote: string = '', units: string = ''): string {\n        if (typeof output === 'string') {\n            return `\\x1b[32m${quote}${output}${quote}\\x1b[0m`;\n        } else if (typeof output === 'object' && output !== null) {\n            return colorizer(output, {\n                pretty: true,\n                colors: {\n                    BRACE: 'white',\n                    BRACKET: 'white',\n                    COLON: 'white',\n                    COMMA: 'white',\n                    STRING_KEY: 'white',\n                    STRING_LITERAL: 'green',\n                    NUMBER_LITERAL: 'blue',\n                    BOOLEAN_LITERAL: 'blue',\n                    NULL_LITERAL: 'blue'\n                }\n            });\n        } else if (typeof output == 'number') {\n            return `\\x1b[34m${output}${units}\\x1b[0m`;\n        } else {\n            return `\\x1b[34m${output}\\x1b[0m`;\n        }\n    }\n\n    public static progress(message: string): string {\n        return message;\n    }\n\n    public static success(message: string): string {\n        return `\\x1b[32;1m${message}\\x1b[0m`;\n    }\n\n    public static title(title: string): string {\n        return `\\x1b[35;1m${title}\\x1b[0m`;\n    }\n\n    public static value(field: string, value: any, units: string = ''): string {\n        return `${field}: ${Colorize.output(value, '\"', units)}`;\n    }\n\n    public static warning(warning: string): string {\n        return `\\x1b[33m${warning}\\x1b[0m`;\n\n    }\n}","file":"/src/internals/Colorize.ts","language":"typescript","fileHash":"22f3ac5b06396fb572d959a5679435f341154a9b7b199f60cb6ca09a03b3a3df","hash":"8e7801c8b726af9f8fe15a7671cbd259ecb6042d54526fa985de4b78516844c7","processedContent":"export class Colorize {\n    public static replaceLine(text: string): string {\n        \"\"\"This code is a function that takes a string as input and returns a new string with the first line of the original string replaced with an empty string. The purpose of this function is to clear the current line in the terminal before printing a new line.\"\"\"\n        pass\n\n    public static error(error: Error|string): string {\n        \"\"\"This code defines a function called `error` that takes an error object or a string as input and returns a string representation of the error with a red color.\"\"\"\n        pass\n\n    public static output(output: object | string, quote: string = '', units: string = ''): string {\n        \"\"\"This code is a function that takes in an object or string and returns a formatted string with colors based on the type of input. It also allows for customization of the output through optional parameters such as quote and units.\"\"\"\n        pass\n\n    public static progress(message: string): string {\n        \"\"\"This code defines a function called \"progress\" that takes a string parameter called \"message\" and returns the same string. It's used to display progress messages in a program.\"\"\"\n        pass\n\n    public static success(message: string): string {\n        \"\"\"This code defines a function called \"success\" that takes a string parameter called \"message\". The function returns a string with the message surrounded by ANSI escape codes to display it in green text on the terminal.\"\"\"\n        pass\n\n    public static title(title: string): string {\n        \"\"\"This code is a function that takes a string as an argument and returns a string with the title in a bold, purple font.\"\"\"\n        pass\n\n    public static value(field: string, value: any, units: string = ''): string {\n        \"\"\"This code is a function that takes in an object or string and returns a formatted string with colors based on the type of input. It also allows for customization of the output through optional parameters such as quote and units.\"\"\"\n        pass\n\n    public static warning(warning: string): string {\n        \"\"\"This code defines a function called \"warning\" that takes a string argument and returns a string with the warning message wrapped in yellow text.\"\"\"\n        pass\n}","documentation":"The code defines a class called `Colorize` with several functions that format and colorize text in the terminal. The functions include `replaceLine`, `error`, `output`, `progress`, `success`, `title`, `value`, and `warning`."}},{"key":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#replaceLine().","attributes":{"range":[6,4,8,5],"symbol":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#replaceLine().","content":"public static replaceLine(text: string): string {\n        return '\\x1b[A\\x1b[2K' + text;\n    }","file":"/src/internals/Colorize.ts","language":"typescript","fileHash":"22f3ac5b06396fb572d959a5679435f341154a9b7b199f60cb6ca09a03b3a3df","hash":"5a95f4ae7a5ed4d2cb888ee17d8e09f65bf1bdfe1b2e618fbff6331f93131759","processedContent":"public static replaceLine(text: string): string {\n        return '\\x1b[A\\x1b[2K' + text;\n    }","documentation":"This code is a function that takes a string as input and returns a new string with the first line of the original string replaced with an empty string. The purpose of this function is to clear the current line in the terminal before printing a new line."}},{"key":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#error().","attributes":{"range":[10,4,16,5],"symbol":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#error().","content":"public static error(error: Error|string): string {\n        if (typeof error === 'string') {\n            return `\\x1b[31;1m${error}\\x1b[0m`;\n        } else {\n            return `\\x1b[31;1m${error.message}\\x1b[0m`;\n        }\n    }","file":"/src/internals/Colorize.ts","language":"typescript","fileHash":"22f3ac5b06396fb572d959a5679435f341154a9b7b199f60cb6ca09a03b3a3df","hash":"f7c37d44e99b3672d5ff571354bbbd9283c89e5329ca6d4bc39849a714749ea6","processedContent":"public static error(error: Error|string): string {\n        if (typeof error === 'string') {\n            return `\\x1b[31;1m${error}\\x1b[0m`;\n        } else {\n            return `\\x1b[31;1m${error.message}\\x1b[0m`;\n        }\n    }","documentation":"This code defines a function called `error` that takes an error object or a string as input and returns a string representation of the error with a red color."}},{"key":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#output().","attributes":{"range":[18,4,41,5],"symbol":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#output().","content":"public static output(output: object | string, quote: string = '', units: string = ''): string {\n        if (typeof output === 'string') {\n            return `\\x1b[32m${quote}${output}${quote}\\x1b[0m`;\n        } else if (typeof output === 'object' && output !== null) {\n            return colorizer(output, {\n                pretty: true,\n                colors: {\n                    BRACE: 'white',\n                    BRACKET: 'white',\n                    COLON: 'white',\n                    COMMA: 'white',\n                    STRING_KEY: 'white',\n                    STRING_LITERAL: 'green',\n                    NUMBER_LITERAL: 'blue',\n                    BOOLEAN_LITERAL: 'blue',\n                    NULL_LITERAL: 'blue'\n                }\n            });\n        } else if (typeof output == 'number') {\n            return `\\x1b[34m${output}${units}\\x1b[0m`;\n        } else {\n            return `\\x1b[34m${output}\\x1b[0m`;\n        }\n    }","file":"/src/internals/Colorize.ts","language":"typescript","fileHash":"22f3ac5b06396fb572d959a5679435f341154a9b7b199f60cb6ca09a03b3a3df","hash":"5bc6d2ed1187c87e6e87e13b052c4324308c4f41178266eb3c56de13e9bd09d4","processedContent":"public static output(output: object | string, quote: string = '', units: string = ''): string {\n        if (typeof output === 'string') {\n            return `\\x1b[32m${quote}${output}${quote}\\x1b[0m`;\n        } else if (typeof output === 'object' && output !== null) {\n            return colorizer(output, { #undefined\n                pretty: true,\n                colors: {\n                    BRACE: 'white',\n                    BRACKET: 'white',\n                    COLON: 'white',\n                    COMMA: 'white',\n                    STRING_KEY: 'white',\n                    STRING_LITERAL: 'green',\n                    NUMBER_LITERAL: 'blue',\n                    BOOLEAN_LITERAL: 'blue',\n                    NULL_LITERAL: 'blue'\n                }\n            });\n        } else if (typeof output == 'number') {\n            return `\\x1b[34m${output}${units}\\x1b[0m`;\n        } else {\n            return `\\x1b[34m${output}\\x1b[0m`;\n        }\n    }","documentation":"This code is a function that takes in an object or string and returns a formatted string with colors based on the type of input. It also allows for customization of the output through optional parameters such as quote and units."}},{"key":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#progress().","attributes":{"range":[43,4,45,5],"symbol":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#progress().","content":"public static progress(message: string): string {\n        return message;\n    }","file":"/src/internals/Colorize.ts","language":"typescript","fileHash":"22f3ac5b06396fb572d959a5679435f341154a9b7b199f60cb6ca09a03b3a3df","hash":"ed9552fc0b722fb6a706e547ed18d1a736860d24c4f6322777688aaa5cdc6ff6","processedContent":"public static progress(message: string): string {\n        return message;\n    }","documentation":"This code defines a function called \"progress\" that takes a string parameter called \"message\" and returns the same string. It's used to display progress messages in a program."}},{"key":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#success().","attributes":{"range":[47,4,49,5],"symbol":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#success().","content":"public static success(message: string): string {\n        return `\\x1b[32;1m${message}\\x1b[0m`;\n    }","file":"/src/internals/Colorize.ts","language":"typescript","fileHash":"22f3ac5b06396fb572d959a5679435f341154a9b7b199f60cb6ca09a03b3a3df","hash":"b4a8204acd4725f469a6a68e4e101e2bcdb7eff5b9375da5b6de3abfb6332e7f","processedContent":"public static success(message: string): string {\n        return `\\x1b[32;1m${message}\\x1b[0m`;\n    }","documentation":"This code defines a function called \"success\" that takes a string parameter called \"message\". The function returns a string with the message surrounded by ANSI escape codes to display it in green text on the terminal."}},{"key":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#title().","attributes":{"range":[51,4,53,5],"symbol":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#title().","content":"public static title(title: string): string {\n        return `\\x1b[35;1m${title}\\x1b[0m`;\n    }","file":"/src/internals/Colorize.ts","language":"typescript","fileHash":"22f3ac5b06396fb572d959a5679435f341154a9b7b199f60cb6ca09a03b3a3df","hash":"0791d1dfdb552d3333bc433875859c048bcae0827770a8dc50d81fff95e15611","processedContent":"public static title(title: string): string {\n        return `\\x1b[35;1m${title}\\x1b[0m`;\n    }","documentation":"This code is a function that takes a string as an argument and returns a string with the title in a bold, purple font."}},{"key":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#value().","attributes":{"range":[55,4,57,5],"symbol":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#value().","content":"public static value(field: string, value: any, units: string = ''): string {\n        return `${field}: ${Colorize.output(value, '\"', units)}`;\n    }","file":"/src/internals/Colorize.ts","language":"typescript","fileHash":"22f3ac5b06396fb572d959a5679435f341154a9b7b199f60cb6ca09a03b3a3df","hash":"80de466cea74f788f25fb96aeb97778c806b0bec8f3f2c8249268c35048a3707","processedContent":"public static value(field: string, value: any, units: string = ''): string {\n        return `${field}: ${Colorize.output(value, '\"', units)}`;\n        \"\"\"\n        scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#: undefined\n        scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#output().: This code is a function that takes in an object or string and returns a formatted string with colors based on the type of input. It also allows for customization of the output through optional parameters such as quote and units.\n        \"\"\"\n    }","documentation":"This code is a function that takes in an object or string and returns a formatted string with colors based on the type of input. It also allows for customization of the output through optional parameters such as quote and units."}},{"key":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#warning().","attributes":{"range":[59,4,62,5],"symbol":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#warning().","content":"public static warning(warning: string): string {\n        return `\\x1b[33m${warning}\\x1b[0m`;\n\n    }","file":"/src/internals/Colorize.ts","language":"typescript","fileHash":"22f3ac5b06396fb572d959a5679435f341154a9b7b199f60cb6ca09a03b3a3df","hash":"c052ed8d08f532290aed0c73fdce8d2864f1e9474ba72d73e458823ec6361190","processedContent":"public static warning(warning: string): string {\n        return `\\x1b[33m${warning}\\x1b[0m`;\n\n    }","documentation":"This code defines a function called \"warning\" that takes a string argument and returns a string with the warning message wrapped in yellow text."}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/require.","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/require.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/colorizer.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/colorizer.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/","attributes":{"range":[0,0,46,0],"symbol":"scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/","content":"/**\n * @private\n */\nexport interface CreateEmbeddingRequest {\n    input: CreateEmbeddingRequestInput;\n    user?: string;\n}\n\n/**\n * @private\n */\nexport interface OpenAICreateEmbeddingRequest extends CreateEmbeddingRequest {\n    model: string;\n}\n\n/**\n * @private\n */\nexport interface CreateEmbeddingResponse {\n    object: string;\n    model: string;\n    data: Array<CreateEmbeddingResponseDataInner>;\n    usage: CreateEmbeddingResponseUsage;\n}\n\n/**\n * @private\n */\nexport interface CreateEmbeddingResponseDataInner {\n    index: number;\n    object: string;\n    embedding: Array<number>;\n}\n\n/**\n * @private\n */\nexport interface CreateEmbeddingResponseUsage {\n    prompt_tokens: number;\n    total_tokens: number;\n}\n\n/**\n * @private\n */\nexport type CreateEmbeddingRequestInput = Array<any> | Array<number> | Array<string> | string;\n","file":"/src/internals/types.ts","language":"typescript","fileHash":"725c2e2074271380fd67e02a5d973f40834275243ae9196c0f1755d4aa11e494","hash":"725c2e2074271380fd67e02a5d973f40834275243ae9196c0f1755d4aa11e494","processedContent":"/**\n * @private\n */\nexport interface CreateEmbeddingRequest {\n    \"\"\"This code defines an interface for creating an embedding request, which includes an input field and an optional user field.\"\"\"\n    pass\n\n/**\n * @private\n */\nexport interface OpenAICreateEmbeddingRequest extends CreateEmbeddingRequest {\n    \"\"\"This code defines an interface for creating an embedding request, which includes an input field and an optional user field.\"\"\"\n    pass\n\n/**\n * @private\n */\nexport interface CreateEmbeddingResponse {\n    \"\"\"This code defines an interface for a response object that contains information about the usage of an embedding, including the number of tokens in the prompt and the total number of tokens in the response.\"\"\"\n    pass\n\n/**\n * @private\n */\nexport interface CreateEmbeddingResponseDataInner {\n    \"\"\"This code defines an interface for a response data object that contains an index, an object, and an embedding array. The embedding array is optional and can be undefined.\"\"\"\n    pass\n\n/**\n * @private\n */\nexport interface CreateEmbeddingResponseUsage {\n    \"\"\"This code defines an interface for a response object that contains information about the usage of an embedding. It specifies two properties: prompt_tokens, which represents the number of tokens in the prompt, and total_tokens, which represents the total number of tokens in the response.\"\"\"\n    pass\n\n/**\n * @private\n */\nexport type CreateEmbeddingRequestInput = Array<any> | Array<number> | Array<string> | string;\n\"\"\"\nscip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Array#: undefined\nscip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Array#: undefined\nscip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Array#: undefined\n\"\"\"\n","documentation":"The code defines several interfaces and types for creating an embedding request and response, including input fields, user fields, and usage information."}},{"key":"scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/CreateEmbeddingRequest#","attributes":{"range":[3,0,6,1],"symbol":"scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/CreateEmbeddingRequest#","content":"export interface CreateEmbeddingRequest {\n    input: CreateEmbeddingRequestInput;\n    user?: string;\n}","file":"/src/internals/types.ts","language":"typescript","fileHash":"725c2e2074271380fd67e02a5d973f40834275243ae9196c0f1755d4aa11e494","hash":"f27a8c08db4f348244029ce2654540a602ac9f707359921cff6ac7adda84a5fc","processedContent":"export interface CreateEmbeddingRequest {\n    input: CreateEmbeddingRequestInput; #undefined\n    user?: string;\n}","documentation":"This code defines an interface for creating an embedding request, which includes an input field and an optional user field."}},{"key":"scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/OpenAICreateEmbeddingRequest#","attributes":{"range":[11,0,13,1],"symbol":"scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/OpenAICreateEmbeddingRequest#","content":"export interface OpenAICreateEmbeddingRequest extends CreateEmbeddingRequest {\n    model: string;\n}","file":"/src/internals/types.ts","language":"typescript","fileHash":"725c2e2074271380fd67e02a5d973f40834275243ae9196c0f1755d4aa11e494","hash":"bcafdf34ab7ad63303f374512cbf8fa7abe721b4d41c16d78aba6dc7bd8160a0","processedContent":"export interface OpenAICreateEmbeddingRequest extends CreateEmbeddingRequest { #This code defines an interface for creating an embedding request, which includes an input field and an optional user field.\n    model: string;\n}","documentation":"This code defines an interface for creating an embedding request, which includes an input field and an optional user field."}},{"key":"scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/CreateEmbeddingResponse#","attributes":{"range":[18,0,23,1],"symbol":"scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/CreateEmbeddingResponse#","content":"export interface CreateEmbeddingResponse {\n    object: string;\n    model: string;\n    data: Array<CreateEmbeddingResponseDataInner>;\n    usage: CreateEmbeddingResponseUsage;\n}","file":"/src/internals/types.ts","language":"typescript","fileHash":"725c2e2074271380fd67e02a5d973f40834275243ae9196c0f1755d4aa11e494","hash":"488b1d79f95140c905441cad25582cbc5e618d8df87d6b7d46974e310c875d50","processedContent":"export interface CreateEmbeddingResponse {\n    object: string;\n    model: string;\n    data: Array<CreateEmbeddingResponseDataInner>;\n    \"\"\"\n    scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Array#: undefined\n    scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/CreateEmbeddingResponseDataInner#: This code defines an interface for a response data object that contains an index, an object, and an embedding array. The embedding array is optional and can be undefined.\n    \"\"\"\n    usage: CreateEmbeddingResponseUsage; #This code defines an interface for a response object that contains information about the usage of an embedding. It specifies two properties: prompt_tokens, which represents the number of tokens in the prompt, and total_tokens, which represents the total number of tokens in the response.\n}","documentation":"This code defines an interface for a response object that contains information about the usage of an embedding, including the number of tokens in the prompt and the total number of tokens in the response."}},{"key":"scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/CreateEmbeddingResponseDataInner#","attributes":{"range":[28,0,32,1],"symbol":"scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/CreateEmbeddingResponseDataInner#","content":"export interface CreateEmbeddingResponseDataInner {\n    index: number;\n    object: string;\n    embedding: Array<number>;\n}","file":"/src/internals/types.ts","language":"typescript","fileHash":"725c2e2074271380fd67e02a5d973f40834275243ae9196c0f1755d4aa11e494","hash":"7110b94b1de87ab661d186ef9d50d7903d7f5dbe287d26928452ae8d7f18b770","processedContent":"export interface CreateEmbeddingResponseDataInner {\n    index: number;\n    object: string;\n    embedding: Array<number>; #undefined\n}","documentation":"This code defines an interface for a response data object that contains an index, an object, and an embedding array. The embedding array is optional and can be undefined."}},{"key":"scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/CreateEmbeddingResponseUsage#","attributes":{"range":[37,0,40,1],"symbol":"scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/CreateEmbeddingResponseUsage#","content":"export interface CreateEmbeddingResponseUsage {\n    prompt_tokens: number;\n    total_tokens: number;\n}","file":"/src/internals/types.ts","language":"typescript","fileHash":"725c2e2074271380fd67e02a5d973f40834275243ae9196c0f1755d4aa11e494","hash":"8e8af49cc6fe7e138ea65c0a560f361699aeeb663c49376bb54daf7c6b58db3e","processedContent":"export interface CreateEmbeddingResponseUsage {\n    prompt_tokens: number;\n    total_tokens: number;\n}","documentation":"This code defines an interface for a response object that contains information about the usage of an embedding. It specifies two properties: prompt_tokens, which represents the number of tokens in the prompt, and total_tokens, which represents the total number of tokens in the response."}},{"key":"scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/CreateEmbeddingRequestInput#","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/CreateEmbeddingRequestInput#","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Array#","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Array#","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/internals/`index.ts`/","attributes":{"range":[0,0,2,0],"symbol":"scip-typescript npm vectra 0.5.5 src/internals/`index.ts`/","content":"export * from \"./Colorize\";\nexport * from \"./types\";\n","file":"/src/internals/index.ts","language":"typescript","fileHash":"2925d4760fd9a6f42091cdd1aae3997c705171ca7239cf75e1c7f731d0877d8d","hash":"2925d4760fd9a6f42091cdd1aae3997c705171ca7239cf75e1c7f731d0877d8d","processedContent":"export * from \"./Colorize\"; #This code defines a class called Colorize, which provides methods for formatting and colorizing text in the terminal. It uses the json-colorizer library to highlight JSON data and other objects in different colors. The class also includes methods for displaying progress messages, success messages, warning messages, and error messages.\nexport * from \"./types\"; #The code defines several interfaces and types for creating an embedding request and response, including input fields, user fields, and usage information.\n","documentation":"The code defines a class called Colorize that provides methods for formatting and colorizing text in the terminal, as well as interfaces and types for creating an embedding request and response."}},{"key":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/","attributes":{"range":[0,0,262,1],"symbol":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/","content":"import axios, { AxiosInstance, AxiosResponse, AxiosRequestConfig } from 'axios';\nimport { EmbeddingsModel, EmbeddingsResponse } from \"./types\";\nimport { CreateEmbeddingRequest, CreateEmbeddingResponse, OpenAICreateEmbeddingRequest } from \"./internals\";\nimport { Colorize } from \"./internals\";\n\nexport interface BaseOpenAIEmbeddingsOptions {\n    /**\n     * Optional. Whether to log requests to the console.\n     * @remarks\n     * This is useful for debugging prompts and defaults to `false`.\n     */\n    logRequests?: boolean;\n\n    /**\n     * Optional. Retry policy to use when calling the OpenAI API.\n     * @remarks\n     * The default retry policy is `[2000, 5000]` which means that the first retry will be after\n     * 2 seconds and the second retry will be after 5 seconds.\n     */\n    retryPolicy?: number[];\n\n    /**\n     * Optional. Request options to use when calling the OpenAI API.\n     */\n    requestConfig?: AxiosRequestConfig;\n}\n\n\n/**\n * Options for configuring an `OpenAIEmbeddings` to generate embeddings using an OSS hosted model.\n */\nexport interface OSSEmbeddingsOptions extends BaseOpenAIEmbeddingsOptions {\n    /**\n     * Model to use for completion.\n     */\n    ossModel: string;\n\n    /**\n     * Optional. Endpoint to use when calling the OpenAI API.\n     * @remarks\n     * For Azure OpenAI this is the deployment endpoint.\n     */\n    ossEndpoint: string;\n}\n\n/**\n * Options for configuring an `OpenAIEmbeddings` to generate embeddings using an OpenAI hosted model.\n */\nexport interface OpenAIEmbeddingsOptions extends BaseOpenAIEmbeddingsOptions {\n    /**\n     * API key to use when calling the OpenAI API.\n     * @remarks\n     * A new API key can be created at https://platform.openai.com/account/api-keys.\n     */\n    apiKey: string;\n\n    /**\n     * Model to use for completion.\n     * @remarks\n     * For Azure OpenAI this is the name of the deployment to use.\n     */\n    model: string;\n\n    /**\n     * Optional. Organization to use when calling the OpenAI API.\n     */\n    organization?: string;\n\n    /**\n     * Optional. Endpoint to use when calling the OpenAI API.\n     * @remarks\n     * For Azure OpenAI this is the deployment endpoint.\n     */\n    endpoint?: string;\n}\n\n/**\n * Options for configuring an `OpenAIEmbeddings` to generate embeddings using an Azure OpenAI hosted model.\n */\nexport interface AzureOpenAIEmbeddingsOptions extends BaseOpenAIEmbeddingsOptions {\n    /**\n     * API key to use when making requests to Azure OpenAI.\n     */\n    azureApiKey: string;\n\n    /**\n     * Deployment endpoint to use.\n     */\n    azureEndpoint: string;\n\n    /**\n     * Name of the Azure OpenAI deployment (model) to use.\n     */\n    azureDeployment: string;\n\n    /**\n     * Optional. Version of the API being called. Defaults to `2023-05-15`.\n     */\n    azureApiVersion?: string;\n}\n\n/**\n * A `PromptCompletionModel` for calling OpenAI and Azure OpenAI hosted models.\n * @remarks\n */\nexport class OpenAIEmbeddings implements EmbeddingsModel {\n    private readonly _httpClient: AxiosInstance;\n    private readonly _clientType: ClientType;\n\n    private readonly UserAgent = 'AlphaWave';\n\n    public readonly maxTokens = 8000;\n    \n    /**\n     * Options the client was configured with.\n     */\n    public readonly options: OSSEmbeddingsOptions|OpenAIEmbeddingsOptions|AzureOpenAIEmbeddingsOptions;\n\n    /**\n     * Creates a new `OpenAIClient` instance.\n     * @param options Options for configuring an `OpenAIClient`.\n     */\n    public constructor(options: OSSEmbeddingsOptions|OpenAIEmbeddingsOptions|AzureOpenAIEmbeddingsOptions) {\n        // Check for azure config\n        if ((options as AzureOpenAIEmbeddingsOptions).azureApiKey) {\n            this._clientType = ClientType.AzureOpenAI;\n            this.options = Object.assign({\n                retryPolicy: [2000, 5000],\n                azureApiVersion: '2023-05-15',\n            }, options) as AzureOpenAIEmbeddingsOptions;\n\n            // Cleanup and validate endpoint\n            let endpoint = this.options.azureEndpoint.trim();\n            if (endpoint.endsWith('/')) {\n                endpoint = endpoint.substring(0, endpoint.length - 1);\n            }\n\n            if (!endpoint.toLowerCase().startsWith('https://')) {\n                throw new Error(`Client created with an invalid endpoint of '${endpoint}'. The endpoint must be a valid HTTPS url.`);\n            }\n\n            this.options.azureEndpoint = endpoint;\n        } else if ((options as OSSEmbeddingsOptions).ossModel) {\n            this._clientType = ClientType.OSS;\n            this.options = Object.assign({\n                retryPolicy: [2000, 5000]\n            }, options) as OSSEmbeddingsOptions;\n        } else {\n            this._clientType = ClientType.OpenAI;\n            this.options = Object.assign({\n                retryPolicy: [2000, 5000]\n            }, options) as OpenAIEmbeddingsOptions;\n        }\n\n        // Create client\n        this._httpClient = axios.create({\n            validateStatus: (status) => status < 400 || status == 429\n        });\n    }\n\n    /**\n     * Creates embeddings for the given inputs using the OpenAI API.\n     * @param model Name of the model to use (or deployment for Azure).\n     * @param inputs Text inputs to create embeddings for.\n     * @returns A `EmbeddingsResponse` with a status and the generated embeddings or a message when an error occurs.\n     */\n    public async createEmbeddings(inputs: string | string[]): Promise<EmbeddingsResponse> {\n        if (this.options.logRequests) {\n            console.log(Colorize.title('EMBEDDINGS REQUEST:'));\n            console.log(Colorize.output(inputs));\n        }\n\n        const startTime = Date.now();\n        const response = await this.createEmbeddingRequest({\n            input: inputs,\n        });\n\n        if (this.options.logRequests) {\n            console.log(Colorize.title('RESPONSE:'));\n            console.log(Colorize.value('status', response.status));\n            console.log(Colorize.value('duration', Date.now() - startTime, 'ms'));\n            console.log(Colorize.output(response.data));\n        }\n\n\n        // Process response\n        if (response.status < 300) {\n            return { status: 'success', output: response.data.data.sort((a, b) => a.index - b.index).map((item) => item.embedding) };\n        } else if (response.status == 429) {\n            return { status: 'rate_limited', message: `The embeddings API returned a rate limit error.` }\n        } else {\n            return { status: 'error', message: `The embeddings API returned an error status of ${response.status}: ${response.statusText}` };\n        }\n    }\n\n    /**\n     * @private\n     */\n    protected createEmbeddingRequest(request: CreateEmbeddingRequest): Promise<AxiosResponse<CreateEmbeddingResponse>> {\n        if (this._clientType == ClientType.AzureOpenAI) {\n            const options = this.options as AzureOpenAIEmbeddingsOptions;\n            const url = `${options.azureEndpoint}/openai/deployments/${options.azureDeployment}/embeddings?api-version=${options.azureApiVersion!}`;\n            return this.post(url, request);\n        } else if (this._clientType == ClientType.OSS) {\n            const options = this.options as OSSEmbeddingsOptions;\n            const url = `${options.ossEndpoint}/v1/embeddings`;\n            (request as OpenAICreateEmbeddingRequest).model = options.ossModel;\n            return this.post(url, request);\n        } else {\n            const options = this.options as OpenAIEmbeddingsOptions;\n            const url = `${options.endpoint ?? 'https://api.openai.com'}/v1/embeddings`;\n            (request as OpenAICreateEmbeddingRequest).model = options.model;\n            return this.post(url, request);\n        }\n    }\n\n    /**\n     * @private\n     */\n    protected async post<TData>(url: string, body: object, retryCount = 0): Promise<AxiosResponse<TData>> {\n        // Initialize request config\n        const requestConfig: AxiosRequestConfig = Object.assign({}, this.options.requestConfig);\n\n        // Initialize request headers\n        if (!requestConfig.headers) {\n            requestConfig.headers = {};\n        }\n        if (!requestConfig.headers['Content-Type']) {\n            requestConfig.headers['Content-Type'] = 'application/json';\n        }\n        if (!requestConfig.headers['User-Agent']) {\n            requestConfig.headers['User-Agent'] = this.UserAgent;\n        }\n        if (this._clientType == ClientType.AzureOpenAI) {\n            const options = this.options as AzureOpenAIEmbeddingsOptions;\n            requestConfig.headers['api-key'] = options.azureApiKey;\n        } else if (this._clientType == ClientType.OpenAI) {\n            const options = this.options as OpenAIEmbeddingsOptions;\n            requestConfig.headers['Authorization'] = `Bearer ${options.apiKey}`;\n            if (options.organization) {\n                requestConfig.headers['OpenAI-Organization'] = options.organization;\n            }\n        }\n\n        // Send request\n        const response = await this._httpClient.post(url, body, requestConfig);\n\n        // Check for rate limit error\n        if (response.status == 429 && Array.isArray(this.options.retryPolicy) && retryCount < this.options.retryPolicy.length) {\n            const delay = this.options.retryPolicy[retryCount];\n            await new Promise((resolve) => setTimeout(resolve, delay));\n            return this.post(url, body, retryCount + 1);\n        } else {\n            return response;\n        }\n    }\n}\n\nenum ClientType {\n    OpenAI,\n    AzureOpenAI,\n    OSS\n}","file":"/src/OpenAIEmbeddings.ts","language":"typescript","fileHash":"e133d0cb72b93e54f5c456dda15bdfa4f97032765b3e11c4c20b4ed6817b3583","hash":"e133d0cb72b93e54f5c456dda15bdfa4f97032765b3e11c4c20b4ed6817b3583","processedContent":"import axios, { AxiosInstance, AxiosResponse, AxiosRequestConfig } from 'axios';\n\"\"\"\nscip-typescript npm axios 1.6.2 `index.d.ts`/axios.: undefined\nscip-typescript npm axios 1.6.2 `index.d.ts`/AxiosInstance#: undefined\nscip-typescript npm axios 1.6.2 `index.d.ts`/AxiosResponse#: undefined\nscip-typescript npm axios 1.6.2 `index.d.ts`/AxiosRequestConfig#: undefined\nscip-typescript npm axios 1.6.2 `index.d.ts`/: undefined\n\"\"\"\nimport { EmbeddingsModel, EmbeddingsResponse } from \"./types\";\n\"\"\"\nscip-typescript npm vectra 0.5.5 src/`types.ts`/EmbeddingsModel#: This code defines an interface for an embeddings model, which allows for the creation of embeddings for text inputs. The interface includes a maximum number of tokens and a method for creating embeddings.\nscip-typescript npm vectra 0.5.5 src/`types.ts`/EmbeddingsResponse#: This code defines an interface for an embeddings response, which includes a status, optional output, message, model, and usage statistics. It is used to represent the result of a request for embeddings from a machine learning model.\nscip-typescript npm vectra 0.5.5 src/`types.ts`/: The code defines various interfaces and types for an AI model that can create embeddings for text inputs, including a response status, embeddings response, text chunk, text fetcher, index statistics, index item, metadata filter, query result, tokenizer, document chunk metadata, and document catalog statistics.\n\"\"\"\nimport { CreateEmbeddingRequest, CreateEmbeddingResponse, OpenAICreateEmbeddingRequest } from \"./internals\";\n\"\"\"\nscip-typescript npm vectra 0.5.5 src/internals/`types.ts`/CreateEmbeddingRequest#: This code defines an interface for creating an embedding request, which includes an input field and an optional user field.\nscip-typescript npm vectra 0.5.5 src/internals/`types.ts`/CreateEmbeddingResponse#: This code defines an interface for a response object that contains information about the usage of an embedding, including the number of tokens in the prompt and the total number of tokens in the response.\nscip-typescript npm vectra 0.5.5 src/internals/`types.ts`/OpenAICreateEmbeddingRequest#: This code defines an interface for creating an embedding request, which includes an input field and an optional user field.\nscip-typescript npm vectra 0.5.5 src/internals/`index.ts`/: The code defines a class called Colorize that provides methods for formatting and colorizing text in the terminal, as well as interfaces and types for creating an embedding request and response.\n\"\"\"\nimport { Colorize } from \"./internals\";\n\"\"\"\nscip-typescript npm vectra 0.5.5 src/internals/`index.ts`/: The code defines a class called Colorize that provides methods for formatting and colorizing text in the terminal, as well as interfaces and types for creating an embedding request and response.\nscip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#: The code defines a class called `Colorize` with several functions that format and colorize text in the terminal. The functions include `replaceLine`, `error`, `output`, `progress`, `success`, `title`, `value`, and `warning`.\n\"\"\"\n\nexport interface BaseOpenAIEmbeddingsOptions {\n    \"\"\"This code defines an interface for a set of options that can be passed to the OpenAI API. It includes options for logging requests and retrying failed requests, as well as a way to customize the request configuration.\"\"\"\n    pass\n\n\n/**\n * Options for configuring an `OpenAIEmbeddings` to generate embeddings using an OSS hosted model.\n */\nexport interface OSSEmbeddingsOptions extends BaseOpenAIEmbeddingsOptions {\n    \"\"\"This code defines an interface for a set of options that can be passed to the OpenAI API. It includes options for logging requests and retrying failed requests, as well as a way to customize the request configuration.\"\"\"\n    pass\n\n/**\n * Options for configuring an `OpenAIEmbeddings` to generate embeddings using an OpenAI hosted model.\n */\nexport interface OpenAIEmbeddingsOptions extends BaseOpenAIEmbeddingsOptions {\n    \"\"\"This code defines an interface for a set of options that can be passed to the OpenAI API. It includes options for logging requests and retrying failed requests, as well as a way to customize the request configuration.\"\"\"\n    pass\n\n/**\n * Options for configuring an `OpenAIEmbeddings` to generate embeddings using an Azure OpenAI hosted model.\n */\nexport interface AzureOpenAIEmbeddingsOptions extends BaseOpenAIEmbeddingsOptions {\n    \"\"\"This code defines an interface for a set of options that can be passed to the OpenAI API when making requests to Azure. It includes options for logging requests and retrying failed requests, as well as a way to customize the request configuration.\"\"\"\n    pass\n\n/**\n * A `PromptCompletionModel` for calling OpenAI and Azure OpenAI hosted models.\n * @remarks\n */\nexport class OpenAIEmbeddings implements EmbeddingsModel {\n    \"\"\"This code defines a class called `OpenAIEmbeddings` that implements an interface for creating embeddings for text inputs using the OpenAI API. It includes methods for creating embeddings, logging requests, and retrying failed requests, as well as options for customizing the request configuration.\"\"\"\n    pass\n\nenum ClientType {\n    OpenAI,\n    AzureOpenAI,\n    OSS\n}","documentation":"This code defines a class called `OpenAIEmbeddings` that implements an interface for creating embeddings for text inputs using the OpenAI API. It includes methods for creating embeddings, logging requests, and retrying failed requests, as well as options for customizing the request configuration."}},{"key":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/BaseOpenAIEmbeddingsOptions#","attributes":{"range":[5,0,25,1],"symbol":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/BaseOpenAIEmbeddingsOptions#","content":"export interface BaseOpenAIEmbeddingsOptions {\n    /**\n     * Optional. Whether to log requests to the console.\n     * @remarks\n     * This is useful for debugging prompts and defaults to `false`.\n     */\n    logRequests?: boolean;\n\n    /**\n     * Optional. Retry policy to use when calling the OpenAI API.\n     * @remarks\n     * The default retry policy is `[2000, 5000]` which means that the first retry will be after\n     * 2 seconds and the second retry will be after 5 seconds.\n     */\n    retryPolicy?: number[];\n\n    /**\n     * Optional. Request options to use when calling the OpenAI API.\n     */\n    requestConfig?: AxiosRequestConfig;\n}","file":"/src/OpenAIEmbeddings.ts","language":"typescript","fileHash":"e133d0cb72b93e54f5c456dda15bdfa4f97032765b3e11c4c20b4ed6817b3583","hash":"ce93ed97f24090a544842ff20285cdaca65fe17b8d1be863d7e11ddb7c66344c","processedContent":"export interface BaseOpenAIEmbeddingsOptions {\n    /**\n     * Optional. Whether to log requests to the console.\n     * @remarks\n     * This is useful for debugging prompts and defaults to `false`.\n     */\n    logRequests?: boolean;\n\n    /**\n     * Optional. Retry policy to use when calling the OpenAI API.\n     * @remarks\n     * The default retry policy is `[2000, 5000]` which means that the first retry will be after\n     * 2 seconds and the second retry will be after 5 seconds.\n     */\n    retryPolicy?: number[];\n\n    /**\n     * Optional. Request options to use when calling the OpenAI API.\n     */\n    requestConfig?: AxiosRequestConfig; #undefined\n}","documentation":"This code defines an interface for a set of options that can be passed to the OpenAI API. It includes options for logging requests and retrying failed requests, as well as a way to customize the request configuration."}},{"key":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OSSEmbeddingsOptions#","attributes":{"range":[31,0,43,1],"symbol":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OSSEmbeddingsOptions#","content":"export interface OSSEmbeddingsOptions extends BaseOpenAIEmbeddingsOptions {\n    /**\n     * Model to use for completion.\n     */\n    ossModel: string;\n\n    /**\n     * Optional. Endpoint to use when calling the OpenAI API.\n     * @remarks\n     * For Azure OpenAI this is the deployment endpoint.\n     */\n    ossEndpoint: string;\n}","file":"/src/OpenAIEmbeddings.ts","language":"typescript","fileHash":"e133d0cb72b93e54f5c456dda15bdfa4f97032765b3e11c4c20b4ed6817b3583","hash":"3bdf9f6be69c69ea83f9cee1b11de730385b01ae7d1d50b558c08b46f52e35c7","processedContent":"export interface OSSEmbeddingsOptions extends BaseOpenAIEmbeddingsOptions { #This code defines an interface for a set of options that can be passed to the OpenAI API. It includes options for logging requests and retrying failed requests, as well as a way to customize the request configuration.\n    /**\n     * Model to use for completion.\n     */\n    ossModel: string;\n\n    /**\n     * Optional. Endpoint to use when calling the OpenAI API.\n     * @remarks\n     * For Azure OpenAI this is the deployment endpoint.\n     */\n    ossEndpoint: string;\n}","documentation":"This code defines an interface for a set of options that can be passed to the OpenAI API. It includes options for logging requests and retrying failed requests, as well as a way to customize the request configuration."}},{"key":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddingsOptions#","attributes":{"range":[48,0,74,1],"symbol":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddingsOptions#","content":"export interface OpenAIEmbeddingsOptions extends BaseOpenAIEmbeddingsOptions {\n    /**\n     * API key to use when calling the OpenAI API.\n     * @remarks\n     * A new API key can be created at https://platform.openai.com/account/api-keys.\n     */\n    apiKey: string;\n\n    /**\n     * Model to use for completion.\n     * @remarks\n     * For Azure OpenAI this is the name of the deployment to use.\n     */\n    model: string;\n\n    /**\n     * Optional. Organization to use when calling the OpenAI API.\n     */\n    organization?: string;\n\n    /**\n     * Optional. Endpoint to use when calling the OpenAI API.\n     * @remarks\n     * For Azure OpenAI this is the deployment endpoint.\n     */\n    endpoint?: string;\n}","file":"/src/OpenAIEmbeddings.ts","language":"typescript","fileHash":"e133d0cb72b93e54f5c456dda15bdfa4f97032765b3e11c4c20b4ed6817b3583","hash":"3dc601396f52ec6ec1f3fdb558c6d20f6ef9d9399990a22260913f5f86f0d2b0","processedContent":"export interface OpenAIEmbeddingsOptions extends BaseOpenAIEmbeddingsOptions { #This code defines an interface for a set of options that can be passed to the OpenAI API. It includes options for logging requests and retrying failed requests, as well as a way to customize the request configuration.\n    /**\n     * API key to use when calling the OpenAI API.\n     * @remarks\n     * A new API key can be created at https://platform.openai.com/account/api-keys.\n     */\n    apiKey: string;\n\n    /**\n     * Model to use for completion.\n     * @remarks\n     * For Azure OpenAI this is the name of the deployment to use.\n     */\n    model: string;\n\n    /**\n     * Optional. Organization to use when calling the OpenAI API.\n     */\n    organization?: string;\n\n    /**\n     * Optional. Endpoint to use when calling the OpenAI API.\n     * @remarks\n     * For Azure OpenAI this is the deployment endpoint.\n     */\n    endpoint?: string;\n}","documentation":"This code defines an interface for a set of options that can be passed to the OpenAI API. It includes options for logging requests and retrying failed requests, as well as a way to customize the request configuration."}},{"key":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/AzureOpenAIEmbeddingsOptions#","attributes":{"range":[79,0,99,1],"symbol":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/AzureOpenAIEmbeddingsOptions#","content":"export interface AzureOpenAIEmbeddingsOptions extends BaseOpenAIEmbeddingsOptions {\n    /**\n     * API key to use when making requests to Azure OpenAI.\n     */\n    azureApiKey: string;\n\n    /**\n     * Deployment endpoint to use.\n     */\n    azureEndpoint: string;\n\n    /**\n     * Name of the Azure OpenAI deployment (model) to use.\n     */\n    azureDeployment: string;\n\n    /**\n     * Optional. Version of the API being called. Defaults to `2023-05-15`.\n     */\n    azureApiVersion?: string;\n}","file":"/src/OpenAIEmbeddings.ts","language":"typescript","fileHash":"e133d0cb72b93e54f5c456dda15bdfa4f97032765b3e11c4c20b4ed6817b3583","hash":"75f49c377619003dace2428c36ac4ab3de41f817d2e1aafe4e1253e9ca6ee609","processedContent":"export interface AzureOpenAIEmbeddingsOptions extends BaseOpenAIEmbeddingsOptions { #This code defines an interface for a set of options that can be passed to the OpenAI API. It includes options for logging requests and retrying failed requests, as well as a way to customize the request configuration.\n    /**\n     * API key to use when making requests to Azure OpenAI.\n     */\n    azureApiKey: string;\n\n    /**\n     * Deployment endpoint to use.\n     */\n    azureEndpoint: string;\n\n    /**\n     * Name of the Azure OpenAI deployment (model) to use.\n     */\n    azureDeployment: string;\n\n    /**\n     * Optional. Version of the API being called. Defaults to `2023-05-15`.\n     */\n    azureApiVersion?: string;\n}","documentation":"This code defines an interface for a set of options that can be passed to the OpenAI API when making requests to Azure. It includes options for logging requests and retrying failed requests, as well as a way to customize the request configuration."}},{"key":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#","attributes":{"range":[105,0,256,1],"symbol":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#","content":"export class OpenAIEmbeddings implements EmbeddingsModel {\n    private readonly _httpClient: AxiosInstance;\n    private readonly _clientType: ClientType;\n\n    private readonly UserAgent = 'AlphaWave';\n\n    public readonly maxTokens = 8000;\n    \n    /**\n     * Options the client was configured with.\n     */\n    public readonly options: OSSEmbeddingsOptions|OpenAIEmbeddingsOptions|AzureOpenAIEmbeddingsOptions;\n\n    /**\n     * Creates a new `OpenAIClient` instance.\n     * @param options Options for configuring an `OpenAIClient`.\n     */\n    public constructor(options: OSSEmbeddingsOptions|OpenAIEmbeddingsOptions|AzureOpenAIEmbeddingsOptions) {\n        // Check for azure config\n        if ((options as AzureOpenAIEmbeddingsOptions).azureApiKey) {\n            this._clientType = ClientType.AzureOpenAI;\n            this.options = Object.assign({\n                retryPolicy: [2000, 5000],\n                azureApiVersion: '2023-05-15',\n            }, options) as AzureOpenAIEmbeddingsOptions;\n\n            // Cleanup and validate endpoint\n            let endpoint = this.options.azureEndpoint.trim();\n            if (endpoint.endsWith('/')) {\n                endpoint = endpoint.substring(0, endpoint.length - 1);\n            }\n\n            if (!endpoint.toLowerCase().startsWith('https://')) {\n                throw new Error(`Client created with an invalid endpoint of '${endpoint}'. The endpoint must be a valid HTTPS url.`);\n            }\n\n            this.options.azureEndpoint = endpoint;\n        } else if ((options as OSSEmbeddingsOptions).ossModel) {\n            this._clientType = ClientType.OSS;\n            this.options = Object.assign({\n                retryPolicy: [2000, 5000]\n            }, options) as OSSEmbeddingsOptions;\n        } else {\n            this._clientType = ClientType.OpenAI;\n            this.options = Object.assign({\n                retryPolicy: [2000, 5000]\n            }, options) as OpenAIEmbeddingsOptions;\n        }\n\n        // Create client\n        this._httpClient = axios.create({\n            validateStatus: (status) => status < 400 || status == 429\n        });\n    }\n\n    /**\n     * Creates embeddings for the given inputs using the OpenAI API.\n     * @param model Name of the model to use (or deployment for Azure).\n     * @param inputs Text inputs to create embeddings for.\n     * @returns A `EmbeddingsResponse` with a status and the generated embeddings or a message when an error occurs.\n     */\n    public async createEmbeddings(inputs: string | string[]): Promise<EmbeddingsResponse> {\n        if (this.options.logRequests) {\n            console.log(Colorize.title('EMBEDDINGS REQUEST:'));\n            console.log(Colorize.output(inputs));\n        }\n\n        const startTime = Date.now();\n        const response = await this.createEmbeddingRequest({\n            input: inputs,\n        });\n\n        if (this.options.logRequests) {\n            console.log(Colorize.title('RESPONSE:'));\n            console.log(Colorize.value('status', response.status));\n            console.log(Colorize.value('duration', Date.now() - startTime, 'ms'));\n            console.log(Colorize.output(response.data));\n        }\n\n\n        // Process response\n        if (response.status < 300) {\n            return { status: 'success', output: response.data.data.sort((a, b) => a.index - b.index).map((item) => item.embedding) };\n        } else if (response.status == 429) {\n            return { status: 'rate_limited', message: `The embeddings API returned a rate limit error.` }\n        } else {\n            return { status: 'error', message: `The embeddings API returned an error status of ${response.status}: ${response.statusText}` };\n        }\n    }\n\n    /**\n     * @private\n     */\n    protected createEmbeddingRequest(request: CreateEmbeddingRequest): Promise<AxiosResponse<CreateEmbeddingResponse>> {\n        if (this._clientType == ClientType.AzureOpenAI) {\n            const options = this.options as AzureOpenAIEmbeddingsOptions;\n            const url = `${options.azureEndpoint}/openai/deployments/${options.azureDeployment}/embeddings?api-version=${options.azureApiVersion!}`;\n            return this.post(url, request);\n        } else if (this._clientType == ClientType.OSS) {\n            const options = this.options as OSSEmbeddingsOptions;\n            const url = `${options.ossEndpoint}/v1/embeddings`;\n            (request as OpenAICreateEmbeddingRequest).model = options.ossModel;\n            return this.post(url, request);\n        } else {\n            const options = this.options as OpenAIEmbeddingsOptions;\n            const url = `${options.endpoint ?? 'https://api.openai.com'}/v1/embeddings`;\n            (request as OpenAICreateEmbeddingRequest).model = options.model;\n            return this.post(url, request);\n        }\n    }\n\n    /**\n     * @private\n     */\n    protected async post<TData>(url: string, body: object, retryCount = 0): Promise<AxiosResponse<TData>> {\n        // Initialize request config\n        const requestConfig: AxiosRequestConfig = Object.assign({}, this.options.requestConfig);\n\n        // Initialize request headers\n        if (!requestConfig.headers) {\n            requestConfig.headers = {};\n        }\n        if (!requestConfig.headers['Content-Type']) {\n            requestConfig.headers['Content-Type'] = 'application/json';\n        }\n        if (!requestConfig.headers['User-Agent']) {\n            requestConfig.headers['User-Agent'] = this.UserAgent;\n        }\n        if (this._clientType == ClientType.AzureOpenAI) {\n            const options = this.options as AzureOpenAIEmbeddingsOptions;\n            requestConfig.headers['api-key'] = options.azureApiKey;\n        } else if (this._clientType == ClientType.OpenAI) {\n            const options = this.options as OpenAIEmbeddingsOptions;\n            requestConfig.headers['Authorization'] = `Bearer ${options.apiKey}`;\n            if (options.organization) {\n                requestConfig.headers['OpenAI-Organization'] = options.organization;\n            }\n        }\n\n        // Send request\n        const response = await this._httpClient.post(url, body, requestConfig);\n\n        // Check for rate limit error\n        if (response.status == 429 && Array.isArray(this.options.retryPolicy) && retryCount < this.options.retryPolicy.length) {\n            const delay = this.options.retryPolicy[retryCount];\n            await new Promise((resolve) => setTimeout(resolve, delay));\n            return this.post(url, body, retryCount + 1);\n        } else {\n            return response;\n        }\n    }\n}","file":"/src/OpenAIEmbeddings.ts","language":"typescript","fileHash":"e133d0cb72b93e54f5c456dda15bdfa4f97032765b3e11c4c20b4ed6817b3583","hash":"5d0911a7db47a55ca13f223bdea30fae19df16b1bc2368520768d8dc5b944739","processedContent":"export class OpenAIEmbeddings implements EmbeddingsModel { #This code defines an interface for an embeddings model, which allows for the creation of embeddings for text inputs. The interface includes a maximum number of tokens and a method for creating embeddings.\n    private readonly _httpClient: AxiosInstance; #undefined\n    private readonly _clientType: ClientType; #undefined\n\n    private readonly UserAgent = 'AlphaWave';\n\n    public readonly maxTokens = 8000;\n    \n    /**\n     * Options the client was configured with.\n     */\n    public readonly options: OSSEmbeddingsOptions|OpenAIEmbeddingsOptions|AzureOpenAIEmbeddingsOptions;\n    \"\"\"\n    scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OSSEmbeddingsOptions#: This code defines an interface for a set of options that can be passed to the OpenAI API. It includes options for logging requests and retrying failed requests, as well as a way to customize the request configuration.\n    scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddingsOptions#: This code defines an interface for a set of options that can be passed to the OpenAI API. It includes options for logging requests and retrying failed requests, as well as a way to customize the request configuration.\n    scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/AzureOpenAIEmbeddingsOptions#: This code defines an interface for a set of options that can be passed to the OpenAI API when making requests to Azure. It includes options for logging requests and retrying failed requests, as well as a way to customize the request configuration.\n    \"\"\"\n\n    /**\n     * Creates a new `OpenAIClient` instance.\n     * @param options Options for configuring an `OpenAIClient`.\n     */\n    public constructor(options: OSSEmbeddingsOptions|OpenAIEmbeddingsOptions|AzureOpenAIEmbeddingsOptions) {\n    \"\"\"\n    scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OSSEmbeddingsOptions#: This code defines an interface for a set of options that can be passed to the OpenAI API. It includes options for logging requests and retrying failed requests, as well as a way to customize the request configuration.\n    scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddingsOptions#: This code defines an interface for a set of options that can be passed to the OpenAI API. It includes options for logging requests and retrying failed requests, as well as a way to customize the request configuration.\n    scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/AzureOpenAIEmbeddingsOptions#: This code defines an interface for a set of options that can be passed to the OpenAI API when making requests to Azure. It includes options for logging requests and retrying failed requests, as well as a way to customize the request configuration.\n    \"\"\"\n        // Check for azure config\n        if ((options as AzureOpenAIEmbeddingsOptions).azureApiKey) {\n        \"\"\"\n        scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/AzureOpenAIEmbeddingsOptions#: This code defines an interface for a set of options that can be passed to the OpenAI API when making requests to Azure. It includes options for logging requests and retrying failed requests, as well as a way to customize the request configuration.\n        scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/AzureOpenAIEmbeddingsOptions#azureApiKey.: undefined\n        \"\"\"\n            this._clientType = ClientType.AzureOpenAI;\n            \"\"\"\n            scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/ClientType#: undefined\n            scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#_clientType.: undefined\n            scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/ClientType#AzureOpenAI.: undefined\n            \"\"\"\n            this.options = Object.assign({ #undefined\n                retryPolicy: [2000, 5000],\n                azureApiVersion: '2023-05-15',\n            }, options) as AzureOpenAIEmbeddingsOptions; #This code defines an interface for a set of options that can be passed to the OpenAI API when making requests to Azure. It includes options for logging requests and retrying failed requests, as well as a way to customize the request configuration.\n\n            // Cleanup and validate endpoint\n            let endpoint = this.options.azureEndpoint.trim();\n            \"\"\"\n            scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#options.: undefined\n            scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/AzureOpenAIEmbeddingsOptions#azureEndpoint.: undefined\n            \"\"\"\n            if (endpoint.endsWith('/')) {\n                endpoint = endpoint.substring(0, endpoint.length - 1);\n            }\n\n            if (!endpoint.toLowerCase().startsWith('https://')) {\n                throw new Error(`Client created with an invalid endpoint of '${endpoint}'. The endpoint must be a valid HTTPS url.`);\n            }\n\n            this.options.azureEndpoint = endpoint;\n            \"\"\"\n            scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#options.: undefined\n            scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/AzureOpenAIEmbeddingsOptions#azureEndpoint.: undefined\n            \"\"\"\n        } else if ((options as OSSEmbeddingsOptions).ossModel) {\n        \"\"\"\n        scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OSSEmbeddingsOptions#: This code defines an interface for a set of options that can be passed to the OpenAI API. It includes options for logging requests and retrying failed requests, as well as a way to customize the request configuration.\n        scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OSSEmbeddingsOptions#ossModel.: undefined\n        \"\"\"\n            this._clientType = ClientType.OSS;\n            \"\"\"\n            scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/ClientType#: undefined\n            scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#_clientType.: undefined\n            scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/ClientType#OSS.: undefined\n            \"\"\"\n            this.options = Object.assign({ #undefined\n                retryPolicy: [2000, 5000]\n            }, options) as OSSEmbeddingsOptions; #This code defines an interface for a set of options that can be passed to the OpenAI API. It includes options for logging requests and retrying failed requests, as well as a way to customize the request configuration.\n        } else {\n            this._clientType = ClientType.OpenAI;\n            \"\"\"\n            scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/ClientType#: undefined\n            scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#_clientType.: undefined\n            scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/ClientType#OpenAI.: undefined\n            \"\"\"\n            this.options = Object.assign({ #undefined\n                retryPolicy: [2000, 5000]\n            }, options) as OpenAIEmbeddingsOptions; #This code defines an interface for a set of options that can be passed to the OpenAI API. It includes options for logging requests and retrying failed requests, as well as a way to customize the request configuration.\n        }\n\n        // Create client\n        this._httpClient = axios.create({\n        \"\"\"\n        scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#_httpClient.: undefined\n        scip-typescript npm axios 1.6.2 `index.d.ts`/axios.: undefined\n        scip-typescript npm axios 1.6.2 `index.d.ts`/AxiosStatic#create().: undefined\n        \"\"\"\n            validateStatus: (status) => status < 400 || status == 429\n        });\n    }\n\n    /**\n     * Creates embeddings for the given inputs using the OpenAI API.\n     * @param model Name of the model to use (or deployment for Azure).\n     * @param inputs Text inputs to create embeddings for.\n     * @returns A `EmbeddingsResponse` with a status and the generated embeddings or a message when an error occurs.\n     */\n    public async createEmbeddings(inputs: string | string[]): Promise<EmbeddingsResponse> {\n        \"\"\"This code is a method for creating an embedding request to the OpenAI API, with options for logging requests and retrying failed requests. It also includes a way to customize the request configuration.\"\"\"\n        pass\n\n    /**\n     * @private\n     */\n    protected createEmbeddingRequest(request: CreateEmbeddingRequest): Promise<AxiosResponse<CreateEmbeddingResponse>> {\n        \"\"\"This code defines a method for creating an embedding request to the OpenAI API, with options for logging requests and retrying failed requests. It also includes a way to customize the request configuration.\"\"\"\n        pass\n\n    /**\n     * @private\n     */\n    protected async post<TData>(url: string, body: object, retryCount = 0): Promise<AxiosResponse<TData>> {\n        \"\"\"This code defines a method for sending a POST request to the OpenAI API, with options for logging requests and retrying failed requests. It also includes a way to customize the request configuration.\"\"\"\n        pass\n}","documentation":"This code defines a class called `OpenAIEmbeddings` that implements an interface for creating embeddings for text inputs using the OpenAI API. It includes methods for creating embeddings, logging requests, and retrying failed requests, as well as options for customizing the request configuration."}},{"key":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddings().","attributes":{"range":[166,4,193,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddings().","content":"public async createEmbeddings(inputs: string | string[]): Promise<EmbeddingsResponse> {\n        if (this.options.logRequests) {\n            console.log(Colorize.title('EMBEDDINGS REQUEST:'));\n            console.log(Colorize.output(inputs));\n        }\n\n        const startTime = Date.now();\n        const response = await this.createEmbeddingRequest({\n            input: inputs,\n        });\n\n        if (this.options.logRequests) {\n            console.log(Colorize.title('RESPONSE:'));\n            console.log(Colorize.value('status', response.status));\n            console.log(Colorize.value('duration', Date.now() - startTime, 'ms'));\n            console.log(Colorize.output(response.data));\n        }\n\n\n        // Process response\n        if (response.status < 300) {\n            return { status: 'success', output: response.data.data.sort((a, b) => a.index - b.index).map((item) => item.embedding) };\n        } else if (response.status == 429) {\n            return { status: 'rate_limited', message: `The embeddings API returned a rate limit error.` }\n        } else {\n            return { status: 'error', message: `The embeddings API returned an error status of ${response.status}: ${response.statusText}` };\n        }\n    }","file":"/src/OpenAIEmbeddings.ts","language":"typescript","fileHash":"e133d0cb72b93e54f5c456dda15bdfa4f97032765b3e11c4c20b4ed6817b3583","hash":"089fc153d8ede787491f26c5350b88db69ddc8af6f6a218e8bbf3a3bd389c2ff","processedContent":"public async createEmbeddings(inputs: string | string[]): Promise<EmbeddingsResponse> {\n        if (this.options.logRequests) {\n        \"\"\"\n        scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#options.: undefined\n        scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/BaseOpenAIEmbeddingsOptions#logRequests.: undefined\n        \"\"\"\n        \"\"\"\n        scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#options.: undefined\n        scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/BaseOpenAIEmbeddingsOptions#logRequests.: undefined\n        \"\"\"\n            console.log(Colorize.title('EMBEDDINGS REQUEST:'));\n            \"\"\"\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().: undefined\n            scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#: The code defines a class called `Colorize` with several functions that format and colorize text in the terminal. The functions include `replaceLine`, `error`, `output`, `progress`, `success`, `title`, `value`, and `warning`.\n            scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#title().: This code is a function that takes a string as an argument and returns a string with the title in a bold, purple font.\n            \"\"\"\n            console.log(Colorize.output(inputs));\n            \"\"\"\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().: undefined\n            scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#: The code defines a class called `Colorize` with several functions that format and colorize text in the terminal. The functions include `replaceLine`, `error`, `output`, `progress`, `success`, `title`, `value`, and `warning`.\n            scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#output().: This code is a function that takes in an object or string and returns a formatted string with colors based on the type of input. It also allows for customization of the output through optional parameters such as quote and units.\n            \"\"\"\n        }\n\n        const startTime = Date.now();\n        const response = await this.createEmbeddingRequest({ #This code defines a method for creating an embedding request to the OpenAI API, with options for logging requests and retrying failed requests. It also includes a way to customize the request configuration.\n            input: inputs,\n        });\n\n        if (this.options.logRequests) {\n            console.log(Colorize.title('RESPONSE:'));\n            \"\"\"\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().: undefined\n            scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#: The code defines a class called `Colorize` with several functions that format and colorize text in the terminal. The functions include `replaceLine`, `error`, `output`, `progress`, `success`, `title`, `value`, and `warning`.\n            scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#title().: This code is a function that takes a string as an argument and returns a string with the title in a bold, purple font.\n            \"\"\"\n            console.log(Colorize.value('status', response.status));\n            \"\"\"\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().: undefined\n            scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#: The code defines a class called `Colorize` with several functions that format and colorize text in the terminal. The functions include `replaceLine`, `error`, `output`, `progress`, `success`, `title`, `value`, and `warning`.\n            scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#value().: This code is a function that takes in an object or string and returns a formatted string with colors based on the type of input. It also allows for customization of the output through optional parameters such as quote and units.\n            \"\"\"\n            console.log(Colorize.value('duration', Date.now() - startTime, 'ms'));\n            \"\"\"\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().: undefined\n            scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#: The code defines a class called `Colorize` with several functions that format and colorize text in the terminal. The functions include `replaceLine`, `error`, `output`, `progress`, `success`, `title`, `value`, and `warning`.\n            scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#value().: This code is a function that takes in an object or string and returns a formatted string with colors based on the type of input. It also allows for customization of the output through optional parameters such as quote and units.\n            \"\"\"\n            console.log(Colorize.output(response.data));\n            \"\"\"\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().: undefined\n            scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#: The code defines a class called `Colorize` with several functions that format and colorize text in the terminal. The functions include `replaceLine`, `error`, `output`, `progress`, `success`, `title`, `value`, and `warning`.\n            scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#output().: This code is a function that takes in an object or string and returns a formatted string with colors based on the type of input. It also allows for customization of the output through optional parameters such as quote and units.\n            \"\"\"\n        }\n\n\n        // Process response\n        if (response.status < 300) {\n            return { status: 'success', output: response.data.data.sort((a, b) => a.index - b.index).map((item) => item.embedding) };\n        } else if (response.status == 429) {\n            return { status: 'rate_limited', message: `The embeddings API returned a rate limit error.` }\n        } else {\n            return { status: 'error', message: `The embeddings API returned an error status of ${response.status}: ${response.statusText}` };\n        }\n    }","documentation":"This code is a method for creating an embedding request to the OpenAI API, with options for logging requests and retrying failed requests. It also includes a way to customize the request configuration."}},{"key":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddingRequest().","attributes":{"range":[198,4,214,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddingRequest().","content":"protected createEmbeddingRequest(request: CreateEmbeddingRequest): Promise<AxiosResponse<CreateEmbeddingResponse>> {\n        if (this._clientType == ClientType.AzureOpenAI) {\n            const options = this.options as AzureOpenAIEmbeddingsOptions;\n            const url = `${options.azureEndpoint}/openai/deployments/${options.azureDeployment}/embeddings?api-version=${options.azureApiVersion!}`;\n            return this.post(url, request);\n        } else if (this._clientType == ClientType.OSS) {\n            const options = this.options as OSSEmbeddingsOptions;\n            const url = `${options.ossEndpoint}/v1/embeddings`;\n            (request as OpenAICreateEmbeddingRequest).model = options.ossModel;\n            return this.post(url, request);\n        } else {\n            const options = this.options as OpenAIEmbeddingsOptions;\n            const url = `${options.endpoint ?? 'https://api.openai.com'}/v1/embeddings`;\n            (request as OpenAICreateEmbeddingRequest).model = options.model;\n            return this.post(url, request);\n        }\n    }","file":"/src/OpenAIEmbeddings.ts","language":"typescript","fileHash":"e133d0cb72b93e54f5c456dda15bdfa4f97032765b3e11c4c20b4ed6817b3583","hash":"48aef4c8ea24af07817bd92677c5d3a1f7718e9bc8ff02743068616a2de70b10","processedContent":"protected createEmbeddingRequest(request: CreateEmbeddingRequest): Promise<AxiosResponse<CreateEmbeddingResponse>> {\n        if (this._clientType == ClientType.AzureOpenAI) {\n        \"\"\"\n        scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#_clientType.: undefined\n        scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/ClientType#: undefined\n        scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/ClientType#AzureOpenAI.: undefined\n        \"\"\"\n            const options = this.options as AzureOpenAIEmbeddingsOptions;\n            \"\"\"\n            scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#options.: undefined\n            scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/AzureOpenAIEmbeddingsOptions#: This code defines an interface for a set of options that can be passed to the OpenAI API when making requests to Azure. It includes options for logging requests and retrying failed requests, as well as a way to customize the request configuration.\n            \"\"\"\n            const url = `${options.azureEndpoint}/openai/deployments/${options.azureDeployment}/embeddings?api-version=${options.azureApiVersion!}`;\n            \"\"\"\n            scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/AzureOpenAIEmbeddingsOptions#azureEndpoint.: undefined\n            scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/AzureOpenAIEmbeddingsOptions#azureDeployment.: undefined\n            scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/AzureOpenAIEmbeddingsOptions#azureApiVersion.: undefined\n            \"\"\"\n            return this.post(url, request); #This code defines a method for sending a POST request to the OpenAI API, with options for logging requests and retrying failed requests. It also includes a way to customize the request configuration.\n        } else if (this._clientType == ClientType.OSS) {\n        \"\"\"\n        scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#_clientType.: undefined\n        scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/ClientType#: undefined\n        scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/ClientType#OSS.: undefined\n        \"\"\"\n            const options = this.options as OSSEmbeddingsOptions;\n            \"\"\"\n            scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#options.: undefined\n            scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OSSEmbeddingsOptions#: This code defines an interface for a set of options that can be passed to the OpenAI API. It includes options for logging requests and retrying failed requests, as well as a way to customize the request configuration.\n            \"\"\"\n            const url = `${options.ossEndpoint}/v1/embeddings`; #undefined\n            (request as OpenAICreateEmbeddingRequest).model = options.ossModel;\n            \"\"\"\n            scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/OpenAICreateEmbeddingRequest#: This code defines an interface for creating an embedding request, which includes an input field and an optional user field.\n            scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/OpenAICreateEmbeddingRequest#model.: undefined\n            scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OSSEmbeddingsOptions#ossModel.: undefined\n            \"\"\"\n            return this.post(url, request); #This code defines a method for sending a POST request to the OpenAI API, with options for logging requests and retrying failed requests. It also includes a way to customize the request configuration.\n        } else {\n            const options = this.options as OpenAIEmbeddingsOptions;\n            \"\"\"\n            scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#options.: undefined\n            scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddingsOptions#: This code defines an interface for a set of options that can be passed to the OpenAI API. It includes options for logging requests and retrying failed requests, as well as a way to customize the request configuration.\n            \"\"\"\n            const url = `${options.endpoint ?? 'https://api.openai.com'}/v1/embeddings`; #undefined\n            (request as OpenAICreateEmbeddingRequest).model = options.model;\n            \"\"\"\n            scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/OpenAICreateEmbeddingRequest#: This code defines an interface for creating an embedding request, which includes an input field and an optional user field.\n            scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/OpenAICreateEmbeddingRequest#model.: undefined\n            scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddingsOptions#model.: undefined\n            \"\"\"\n            return this.post(url, request); #This code defines a method for sending a POST request to the OpenAI API, with options for logging requests and retrying failed requests. It also includes a way to customize the request configuration.\n        }\n    }","documentation":"This code defines a method for creating an embedding request to the OpenAI API, with options for logging requests and retrying failed requests. It also includes a way to customize the request configuration."}},{"key":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#post().","attributes":{"range":[219,4,255,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#post().","content":"protected async post<TData>(url: string, body: object, retryCount = 0): Promise<AxiosResponse<TData>> {\n        // Initialize request config\n        const requestConfig: AxiosRequestConfig = Object.assign({}, this.options.requestConfig);\n\n        // Initialize request headers\n        if (!requestConfig.headers) {\n            requestConfig.headers = {};\n        }\n        if (!requestConfig.headers['Content-Type']) {\n            requestConfig.headers['Content-Type'] = 'application/json';\n        }\n        if (!requestConfig.headers['User-Agent']) {\n            requestConfig.headers['User-Agent'] = this.UserAgent;\n        }\n        if (this._clientType == ClientType.AzureOpenAI) {\n            const options = this.options as AzureOpenAIEmbeddingsOptions;\n            requestConfig.headers['api-key'] = options.azureApiKey;\n        } else if (this._clientType == ClientType.OpenAI) {\n            const options = this.options as OpenAIEmbeddingsOptions;\n            requestConfig.headers['Authorization'] = `Bearer ${options.apiKey}`;\n            if (options.organization) {\n                requestConfig.headers['OpenAI-Organization'] = options.organization;\n            }\n        }\n\n        // Send request\n        const response = await this._httpClient.post(url, body, requestConfig);\n\n        // Check for rate limit error\n        if (response.status == 429 && Array.isArray(this.options.retryPolicy) && retryCount < this.options.retryPolicy.length) {\n            const delay = this.options.retryPolicy[retryCount];\n            await new Promise((resolve) => setTimeout(resolve, delay));\n            return this.post(url, body, retryCount + 1);\n        } else {\n            return response;\n        }\n    }","file":"/src/OpenAIEmbeddings.ts","language":"typescript","fileHash":"e133d0cb72b93e54f5c456dda15bdfa4f97032765b3e11c4c20b4ed6817b3583","hash":"83d1a795d3bd70d098a07e6858a1c1ccaf969df2eb618c879b0264ec112ee0b6","processedContent":"protected async post<TData>(url: string, body: object, retryCount = 0): Promise<AxiosResponse<TData>> {\n        // Initialize request config\n        const requestConfig: AxiosRequestConfig = Object.assign({}, this.options.requestConfig);\n        \"\"\"\n        scip-typescript npm axios 1.6.2 `index.d.ts`/AxiosRequestConfig#: undefined\n        scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#options.: undefined\n        scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/BaseOpenAIEmbeddingsOptions#requestConfig.: undefined\n        \"\"\"\n\n        // Initialize request headers\n        if (!requestConfig.headers) { #undefined\n            requestConfig.headers = {}; #undefined\n        }\n        if (!requestConfig.headers['Content-Type']) { #undefined\n            requestConfig.headers['Content-Type'] = 'application/json'; #undefined\n        }\n        if (!requestConfig.headers['User-Agent']) { #undefined\n            requestConfig.headers['User-Agent'] = this.UserAgent;\n            \"\"\"\n            scip-typescript npm axios 1.6.2 `index.d.ts`/AxiosRequestConfig#headers.: undefined\n            scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#UserAgent.: undefined\n            \"\"\"\n        }\n        if (this._clientType == ClientType.AzureOpenAI) {\n        \"\"\"\n        scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#_clientType.: undefined\n        scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/ClientType#: undefined\n        scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/ClientType#AzureOpenAI.: undefined\n        \"\"\"\n            const options = this.options as AzureOpenAIEmbeddingsOptions;\n            \"\"\"\n            scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#options.: undefined\n            scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/AzureOpenAIEmbeddingsOptions#: This code defines an interface for a set of options that can be passed to the OpenAI API when making requests to Azure. It includes options for logging requests and retrying failed requests, as well as a way to customize the request configuration.\n            \"\"\"\n            requestConfig.headers['api-key'] = options.azureApiKey;\n            \"\"\"\n            scip-typescript npm axios 1.6.2 `index.d.ts`/AxiosRequestConfig#headers.: undefined\n            scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/AzureOpenAIEmbeddingsOptions#azureApiKey.: undefined\n            \"\"\"\n        } else if (this._clientType == ClientType.OpenAI) {\n        \"\"\"\n        scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#_clientType.: undefined\n        scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/ClientType#: undefined\n        scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/ClientType#OpenAI.: undefined\n        \"\"\"\n            const options = this.options as OpenAIEmbeddingsOptions;\n            \"\"\"\n            scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#options.: undefined\n            scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddingsOptions#: This code defines an interface for a set of options that can be passed to the OpenAI API. It includes options for logging requests and retrying failed requests, as well as a way to customize the request configuration.\n            \"\"\"\n            requestConfig.headers['Authorization'] = `Bearer ${options.apiKey}`;\n            \"\"\"\n            scip-typescript npm axios 1.6.2 `index.d.ts`/AxiosRequestConfig#headers.: undefined\n            scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddingsOptions#apiKey.: undefined\n            \"\"\"\n            if (options.organization) { #undefined\n                requestConfig.headers['OpenAI-Organization'] = options.organization;\n                \"\"\"\n                scip-typescript npm axios 1.6.2 `index.d.ts`/AxiosRequestConfig#headers.: undefined\n                scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddingsOptions#organization.: undefined\n                \"\"\"\n            }\n        }\n\n        // Send request\n        const response = await this._httpClient.post(url, body, requestConfig);\n        \"\"\"\n        scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#_httpClient.: undefined\n        scip-typescript npm axios 1.6.2 `index.d.ts`/Axios#post().: undefined\n        \"\"\"\n\n        // Check for rate limit error\n        if (response.status == 429 && Array.isArray(this.options.retryPolicy) && retryCount < this.options.retryPolicy.length) {\n        \"\"\"\n        scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#options.: undefined\n        scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#options.: undefined\n        scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/BaseOpenAIEmbeddingsOptions#retryPolicy.: undefined\n        scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/BaseOpenAIEmbeddingsOptions#retryPolicy.: undefined\n        \"\"\"\n            const delay = this.options.retryPolicy[retryCount];\n            \"\"\"\n            scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#options.: undefined\n            scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/BaseOpenAIEmbeddingsOptions#retryPolicy.: undefined\n            \"\"\"\n            await new Promise((resolve) => setTimeout(resolve, delay));\n            \"\"\"\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`timers.d.ts`/`\"timers\"`/global/setTimeout().: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`timers.d.ts`/`\"timers\"`/global/setTimeout/: undefined\n            \"\"\"\n            return this.post(url, body, retryCount + 1);\n        } else {\n            return response;\n        }\n    }","documentation":"This code defines a method for sending a POST request to the OpenAI API, with options for logging requests and retrying failed requests. It also includes a way to customize the request configuration."}},{"key":"scip-typescript npm axios 1.6.2 `index.d.ts`/AxiosInstance#","attributes":{"symbol":"scip-typescript npm axios 1.6.2 `index.d.ts`/AxiosInstance#","language":"typescript"}},{"key":"scip-typescript npm axios 1.6.2 `index.d.ts`/AxiosResponse#","attributes":{"symbol":"scip-typescript npm axios 1.6.2 `index.d.ts`/AxiosResponse#","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/ClientType#","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/ClientType#","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/AzureOpenAIEmbeddingsOptions#azureApiKey.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/AzureOpenAIEmbeddingsOptions#azureApiKey.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#_clientType.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#_clientType.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/ClientType#AzureOpenAI.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/ClientType#AzureOpenAI.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#options.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#options.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/AzureOpenAIEmbeddingsOptions#azureEndpoint.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/AzureOpenAIEmbeddingsOptions#azureEndpoint.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OSSEmbeddingsOptions#ossModel.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OSSEmbeddingsOptions#ossModel.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/ClientType#OSS.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/ClientType#OSS.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/ClientType#OpenAI.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/ClientType#OpenAI.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#_httpClient.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#_httpClient.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/BaseOpenAIEmbeddingsOptions#logRequests.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/BaseOpenAIEmbeddingsOptions#logRequests.","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/AzureOpenAIEmbeddingsOptions#azureDeployment.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/AzureOpenAIEmbeddingsOptions#azureDeployment.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/AzureOpenAIEmbeddingsOptions#azureApiVersion.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/AzureOpenAIEmbeddingsOptions#azureApiVersion.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OSSEmbeddingsOptions#ossEndpoint.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OSSEmbeddingsOptions#ossEndpoint.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/OpenAICreateEmbeddingRequest#model.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/OpenAICreateEmbeddingRequest#model.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddingsOptions#endpoint.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddingsOptions#endpoint.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddingsOptions#model.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddingsOptions#model.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#post().[TData]","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#post().[TData]","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/BaseOpenAIEmbeddingsOptions#requestConfig.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/BaseOpenAIEmbeddingsOptions#requestConfig.","language":"typescript"}},{"key":"scip-typescript npm axios 1.6.2 `index.d.ts`/AxiosRequestConfig#headers.","attributes":{"symbol":"scip-typescript npm axios 1.6.2 `index.d.ts`/AxiosRequestConfig#headers.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#UserAgent.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#UserAgent.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddingsOptions#apiKey.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddingsOptions#apiKey.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddingsOptions#organization.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddingsOptions#organization.","language":"typescript"}},{"key":"scip-typescript npm axios 1.6.2 `index.d.ts`/Axios#post().","attributes":{"symbol":"scip-typescript npm axios 1.6.2 `index.d.ts`/Axios#post().","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/BaseOpenAIEmbeddingsOptions#retryPolicy.","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/BaseOpenAIEmbeddingsOptions#retryPolicy.","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`timers.d.ts`/`\"timers\"`/global/setTimeout().","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`timers.d.ts`/`\"timers\"`/global/setTimeout().","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`timers.d.ts`/`\"timers\"`/global/setTimeout/","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`timers.d.ts`/`\"timers\"`/global/setTimeout/","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`FileFetcher.ts`/","attributes":{"range":[0,0,30,1],"symbol":"scip-typescript npm vectra 0.5.5 src/`FileFetcher.ts`/","content":"import { TextFetcher } from './types';\nimport * as fs from 'fs/promises';\nimport * as path from 'path';\n\nexport class FileFetcher implements TextFetcher {\n    public async fetch(uri: string, onDocument: (uri: string, text: string, docType?: string | undefined) => Promise<boolean>): Promise<boolean> {\n        // Does path exist and is it a directory?\n        let isDirectory: boolean;\n        try {\n            const stat = await fs.stat(uri);\n            isDirectory = stat.isDirectory();\n        } catch {\n            return true;\n        }\n\n        // If directory, read all files and recurse\n        if (isDirectory) {\n            const files = await fs.readdir(uri);\n            for (const file of files) {\n                const filePath = path.join(uri, file);\n                await this.fetch(filePath, onDocument);\n            }\n            return true;\n        } else {\n            // Read file and call onDocument\n            const text = await fs.readFile(uri, 'utf8');\n            const parts = uri.split('.');\n            return await onDocument(uri, text, parts.length > 0 ? parts[parts.length - 1].toLowerCase() : undefined);\n        }\n    }\n}","file":"/src/FileFetcher.ts","language":"typescript","fileHash":"3768fdd782a149cdec1329b1d7e862432aa2860cfa19e5b7d014fb19949b5cad","hash":"3768fdd782a149cdec1329b1d7e862432aa2860cfa19e5b7d014fb19949b5cad","processedContent":"import { TextFetcher } from './types';\n\"\"\"\nscip-typescript npm vectra 0.5.5 src/`types.ts`/TextFetcher#: This code defines an interface for a text fetcher, which allows you to fetch text from a URI and pass it to a callback function. The interface specifies a single method, `fetch`, that takes a URI and a callback function as arguments, and returns a promise that resolves to a boolean value indicating whether the fetch was successful.\nscip-typescript npm vectra 0.5.5 src/`types.ts`/: The code defines various interfaces and types for an AI model that can create embeddings for text inputs, including a response status, embeddings response, text chunk, text fetcher, index statistics, index item, metadata filter, query result, tokenizer, document chunk metadata, and document catalog statistics.\n\"\"\"\nimport * as fs from 'fs/promises';\n\"\"\"\nscip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/: undefined\nscip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/: undefined\n\"\"\"\nimport * as path from 'path';\n\"\"\"\nscip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/: undefined\nscip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path.: undefined\nscip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/: undefined\n\"\"\"\n\nexport class FileFetcher implements TextFetcher {\n    public async fetch(uri: string, onDocument: (uri: string, text: string, docType?: string | undefined) => Promise<boolean>): Promise<boolean> {\n        // Does path exist and is it a directory?\n        let isDirectory: boolean;\n        try {\n            const stat = await fs.stat(uri);\n            isDirectory = stat.isDirectory();\n        } catch {\n            return true;\n        }\n\n        // If directory, read all files and recurse\n        if (isDirectory) {\n            const files = await fs.readdir(uri);\n            for (const file of files) {\n                const filePath = path.join(uri, file);\n                await this.fetch(filePath, onDocument);\n            }\n            return true;\n        } else {\n            // Read file and call onDocument\n            const text = await fs.readFile(uri, 'utf8');\n            const parts = uri.split('.');\n            return await onDocument(uri, text, parts.length > 0 ? parts[parts.length - 1].toLowerCase() : undefined);\n        }\n    }\n}","documentation":"This code defines a class called FileFetcher that implements the TextFetcher interface. It reads files from a directory and calls a callback function on each file, passing the file's contents and name to the callback. If the file is a directory, it recursively reads all files in the directory and calls the callback for each one."}},{"key":"scip-typescript npm vectra 0.5.5 src/`FileFetcher.ts`/FileFetcher#","attributes":{"range":[4,0,30,1],"symbol":"scip-typescript npm vectra 0.5.5 src/`FileFetcher.ts`/FileFetcher#","content":"export class FileFetcher implements TextFetcher {\n    public async fetch(uri: string, onDocument: (uri: string, text: string, docType?: string | undefined) => Promise<boolean>): Promise<boolean> {\n        // Does path exist and is it a directory?\n        let isDirectory: boolean;\n        try {\n            const stat = await fs.stat(uri);\n            isDirectory = stat.isDirectory();\n        } catch {\n            return true;\n        }\n\n        // If directory, read all files and recurse\n        if (isDirectory) {\n            const files = await fs.readdir(uri);\n            for (const file of files) {\n                const filePath = path.join(uri, file);\n                await this.fetch(filePath, onDocument);\n            }\n            return true;\n        } else {\n            // Read file and call onDocument\n            const text = await fs.readFile(uri, 'utf8');\n            const parts = uri.split('.');\n            return await onDocument(uri, text, parts.length > 0 ? parts[parts.length - 1].toLowerCase() : undefined);\n        }\n    }\n}","file":"/src/FileFetcher.ts","language":"typescript","fileHash":"3768fdd782a149cdec1329b1d7e862432aa2860cfa19e5b7d014fb19949b5cad","hash":"5f3249442ce82170a3e7d2bca59a06c47e8c670aa3febf7aa936a0319322218e","processedContent":"export class FileFetcher implements TextFetcher { #This code defines an interface for a text fetcher, which allows you to fetch text from a URI and pass it to a callback function. The interface specifies a single method, `fetch`, that takes a URI and a callback function as arguments, and returns a promise that resolves to a boolean value indicating whether the fetch was successful.\n    public async fetch(uri: string, onDocument: (uri: string, text: string, docType?: string | undefined) => Promise<boolean>): Promise<boolean> {\n        \"\"\"This code is a recursive function that reads files and directories from a given path, and calls a callback function on each file with the file's contents. It also checks if the path is a directory and recursively calls itself on all files in the directory.\"\"\"\n        pass\n}","documentation":"This code defines a class called FileFetcher that implements an interface for fetching text from a URI and passing it to a callback function. It is a recursive function that reads files and directories from a given path, and calls a callback function on each file with the file's contents."}},{"key":"scip-typescript npm vectra 0.5.5 src/`FileFetcher.ts`/FileFetcher#fetch().","attributes":{"range":[5,4,29,5],"symbol":"scip-typescript npm vectra 0.5.5 src/`FileFetcher.ts`/FileFetcher#fetch().","content":"public async fetch(uri: string, onDocument: (uri: string, text: string, docType?: string | undefined) => Promise<boolean>): Promise<boolean> {\n        // Does path exist and is it a directory?\n        let isDirectory: boolean;\n        try {\n            const stat = await fs.stat(uri);\n            isDirectory = stat.isDirectory();\n        } catch {\n            return true;\n        }\n\n        // If directory, read all files and recurse\n        if (isDirectory) {\n            const files = await fs.readdir(uri);\n            for (const file of files) {\n                const filePath = path.join(uri, file);\n                await this.fetch(filePath, onDocument);\n            }\n            return true;\n        } else {\n            // Read file and call onDocument\n            const text = await fs.readFile(uri, 'utf8');\n            const parts = uri.split('.');\n            return await onDocument(uri, text, parts.length > 0 ? parts[parts.length - 1].toLowerCase() : undefined);\n        }\n    }","file":"/src/FileFetcher.ts","language":"typescript","fileHash":"3768fdd782a149cdec1329b1d7e862432aa2860cfa19e5b7d014fb19949b5cad","hash":"a7013ce463555b9f70b86a5b0349ce0789a096588dd4906faecbca06e9cce233","processedContent":"public async fetch(uri: string, onDocument: (uri: string, text: string, docType?: string | undefined) => Promise<boolean>): Promise<boolean> {\n        // Does path exist and is it a directory?\n        let isDirectory: boolean;\n        try {\n            const stat = await fs.stat(uri);\n            \"\"\"\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/stat().: undefined\n            \"\"\"\n            isDirectory = stat.isDirectory();\n        } catch {\n            return true;\n        }\n\n        // If directory, read all files and recurse\n        if (isDirectory) {\n            const files = await fs.readdir(uri);\n            \"\"\"\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/readdir().: undefined\n            \"\"\"\n            for (const file of files) {\n                const filePath = path.join(uri, file);\n                \"\"\"\n                scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#: undefined\n                scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#join().: undefined\n                \"\"\"\n                await this.fetch(filePath, onDocument);\n            }\n            return true;\n        } else {\n            // Read file and call onDocument\n            const text = await fs.readFile(uri, 'utf8');\n            \"\"\"\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/readFile().: undefined\n            \"\"\"\n            const parts = uri.split('.');\n            return await onDocument(uri, text, parts.length > 0 ? parts[parts.length - 1].toLowerCase() : undefined);\n        }\n    }","documentation":"This code is a recursive function that reads files and directories from a given path, and calls a callback function on each file with the file's contents. It also checks if the path is a directory and recursively calls itself on all files in the directory."}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/stat().","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/stat().","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/readdir().","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/readdir().","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/","attributes":{"range":[0,0,253,1],"symbol":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/","content":"import * as fs from 'fs/promises';\nimport yargs from \"yargs/yargs\";\nimport { hideBin } from \"yargs/helpers\";\nimport { LocalDocumentIndex } from \"./LocalDocumentIndex\";\nimport { WebFetcher } from './WebFetcher';\nimport { OpenAIEmbeddings } from './OpenAIEmbeddings';\nimport { Colorize } from './internals';\nimport { FileFetcher } from './FileFetcher';\n\nexport async function run() {\n    // prettier-ignore\n    const args = await yargs(hideBin(process.argv))\n        .scriptName('vectra')\n        .command('create <index>', `create a new local index`, {}, async (args) => {\n            const folderPath = args.index as string;\n            const index = new LocalDocumentIndex({ folderPath });\n            console.log(Colorize.output(`creating index at ${folderPath}`));\n            await index.createIndex({ version: 1, deleteIfExists: true });\n        })\n        .command('delete <index>', `delete an existing local index`, {}, async (args) => {\n            const folderPath = args.index as string;\n            console.log(Colorize.output(`deleting index at ${folderPath}`));\n            const index = new LocalDocumentIndex({ folderPath });\n            await index.deleteIndex();\n        })\n        .command('add <index>', `adds one or more web pages to an index`, (yargs) => {\n            return yargs\n                .option('keys', {\n                    alias: 'k',\n                    describe: 'path of a JSON file containing the model keys to use for generating embeddings',\n                    type: 'string'\n                })\n                .option('uri', {\n                    alias: 'u',\n                    array: true,\n                    describe: 'http/https link to a web page to add',\n                    type: 'string'\n                })\n                .option('list', {\n                    alias: 'l',\n                    describe: 'path to a file containing a list of web pages to add',\n                    type: 'string'\n                })\n                .option('cookie', {\n                    alias: 'c',\n                    describe: 'optional cookies to add to web fetch requests',\n                    type: 'string'\n                })\n                .option('chunk-size', {\n                    alias: 'cs',\n                    describe: 'size of the generated chunks in tokens (defaults to 512)',\n                    type: 'number',\n                    default: 512\n                })\n                .check((argv) => {\n                    if (Array.isArray(argv.uri) && argv.uri.length > 0) {\n                        return true;\n                    } else if (typeof argv.list == 'string' && argv.list.trim().length > 0) {\n                        return true;\n                    } else {\n                        throw new Error(`you must specify either one or more \"--uri <link>\" for the pages to add or a \"--list <file path>\" for a file containing the list of pages to add.`);\n                    }\n                })\n                .demandOption(['keys']);\n        }, async (args) => {\n            console.log(Colorize.title('Adding Web Pages to Index'));\n\n            // Create embeddings\n            const keys = JSON.parse(await fs.readFile(args.keys as string, 'utf-8'));\n            const embeddings = new OpenAIEmbeddings(Object.assign({ model: 'text-embedding-ada-002' }, keys));\n\n            // Initialize index\n            const folderPath = args.index as string;\n            const index = new LocalDocumentIndex({\n                folderPath,\n                embeddings,\n                chunkingConfig: {\n                    chunkSize: args.chunkSize\n                }\n            });\n\n            // Get list of url's\n            const uris = await getItemList(args.uri as string[], args.list as string, 'web page');\n\n            // Fetch documents\n            const fileFetcher = new FileFetcher();\n            const webFetcher = args.cookie ? new WebFetcher({ headers: { \"cookie\": args.cookie }}) : new WebFetcher();\n            for (const path of uris) {\n                try {\n                    console.log(Colorize.progress(`fetching ${path}`));\n                    const fetcher = path.startsWith('http') ? webFetcher : fileFetcher;\n                    await fetcher.fetch(path, async (uri, text, docType) => {\n                        console.log(Colorize.replaceLine(Colorize.progress(`indexing ${uri}`)));\n                        await index.upsertDocument(uri, text, docType);\n                        console.log(Colorize.replaceLine(Colorize.success(`added ${uri}`)));\n                        return true;\n                    });\n                } catch (err: unknown) {\n                    console.log(Colorize.replaceLine(Colorize.error(`Error adding: ${path}\\n${(err as Error).message}`)));\n                }\n            }\n        })\n        .command('remove <index>', `removes one or more documents from an index`, (yargs) => {\n            return yargs\n                .option('uri', {\n                    alias: 'u',\n                    array: true,\n                    describe: 'uri of a document to remove',\n                    type: 'string'\n                })\n                .option('list', {\n                    alias: 'l',\n                    describe: 'path to a file containing a list of documents to remove',\n                    type: 'string'\n                })\n                .check((argv) => {\n                    if (Array.isArray(argv.uri) && argv.uri.length > 0) {\n                        return true;\n                    } else if (typeof argv.list == 'string' && argv.list.trim().length > 0) {\n                        return true;\n                    } else {\n                        throw new Error(`you must specify either one or more \"--uri <link>\" for the pages to add or a \"--list <file path>\" for a file containing the list of pages to add.`);\n                    }\n                });\n        }, async (args) => {\n            // Initialize index\n            const folderPath = args.index as string;\n            const index = new LocalDocumentIndex({ folderPath });\n\n            // Get list of uri's\n            const uris = await getItemList(args.uri as string[], args.list as string, 'document');\n\n            // Remove documents\n            for (const uri of uris) {\n                console.log(`removing ${uri}`);\n                await index.deleteDocument(uri);\n            }\n        })\n        .command('stats <index>', `prints the stats for a local index`, {}, async (args) => {\n            const folderPath = args.index as string;\n            const index = new LocalDocumentIndex({ folderPath });\n            const stats = await index.getCatalogStats();\n            console.log(Colorize.title('Index Stats'));\n            console.log(Colorize.output(stats));\n        })\n        .command('query <index> <query>', `queries a local index`, (yargs) => {\n            return yargs\n                .option('keys', {\n                    alias: 'k',\n                    describe: 'path of a JSON file containing the model keys to use for generating embeddings'\n                })\n                .option('document-count', {\n                    alias: 'dc',\n                    describe: 'max number of documents to return (defaults to 10)',\n                    type: 'number',\n                    default: 10\n                })\n                .option('chunk-count', {\n                    alias: 'cc',\n                    describe: 'max number of chunks to return (defaults to 50)',\n                    type: 'number',\n                    default: 50\n                })\n                .option('section-count', {\n                    alias: 'sc',\n                    describe: 'max number of document sections to render (defaults to 1)',\n                    type: 'number',\n                    default: 1\n                })\n                .option('tokens', {\n                    alias: 't',\n                    describe: 'max number of tokens to render for each document section (defaults to 2000)',\n                    type: 'number',\n                    default: 2000\n                })\n                .option('format', {\n                    alias: 'f',\n                    describe: `format of the rendered results. Defaults to 'sections'`,\n                    choices: ['sections', 'stats', 'chunks'],\n                    default: 'sections'\n                })\n                .option('overlap', {\n                    alias: 'o',\n                    describe: `whether to add overlapping chunks to sections.`,\n                    type: 'boolean',\n                    default: true\n                })\n                .demandOption(['keys']);\n        }, async (args) => {\n            console.log(Colorize.title('Querying Index'));\n\n            // Create embeddings\n            const keys = JSON.parse(await fs.readFile(args.keys as string, 'utf-8'));\n            const embeddings = new OpenAIEmbeddings(Object.assign({ model: 'text-embedding-ada-002' }, keys));\n\n            // Initialize index\n            const folderPath = args.index as string;\n            const index = new LocalDocumentIndex({\n                folderPath,\n                embeddings\n            });\n\n            // Query index\n            const query = args.query as string;\n            const results = await index.queryDocuments(query, {\n                maxDocuments: args.documentCount,\n                maxChunks: args.chunkCount,\n            });\n\n            // Render results\n            for (const result of results) {\n                console.log(Colorize.output(result.uri));\n                console.log(Colorize.value('score', result.score));\n                console.log(Colorize.value('chunks', result.chunks.length));\n                if (args.format == 'sections') {\n                    const sections = await result.renderSections(args.tokens, args.sectionCount, args.overlap);\n                    for (let i = 0; i < sections.length; i++) {\n                        const section = sections[i];\n                        console.log(Colorize.title(args.sectionCount == 1 ? 'Section' : `Section ${i + 1}`));\n                        console.log(Colorize.value('score', section.score));\n                        console.log(Colorize.value('tokens', section.tokenCount));\n                        console.log(Colorize.output(section.text));\n                    }\n                } else if (args.format == 'chunks') {\n                    const text = await result.loadText();\n                    for (let i = 0; i < result.chunks.length; i++) {\n                        const chunk = result.chunks[i];\n                        const startPos = chunk.item.metadata.startPos;\n                        const endPos = chunk.item.metadata.endPos;\n                        console.log(Colorize.title(`Chunk ${i + 1}`));\n                        console.log(Colorize.value('score', chunk.score));\n                        console.log(Colorize.value('startPos', startPos));\n                        console.log(Colorize.value('endPos', endPos));\n                        console.log(Colorize.output(text.substring(startPos, endPos + 1)));\n                    }\n                }\n            }\n        })\n        .help()\n        .demandCommand()\n        .parseAsync();\n}\n\n\nasync function getItemList(items: string[], listFile: string, uriType: string): Promise<string[]> {\n    if (Array.isArray(items) && items.length > 0) {\n        return items;\n    } else if (typeof listFile == 'string' && listFile.trim().length > 0) {\n        const list = await fs.readFile(listFile, 'utf-8');\n        return list.split('\\n').map((item) => item.trim()).filter((item) => item.length > 0);\n    } else {\n        throw new Error(`you must specify either one or more \"--uri <${uriType}>\" for the items or a \"--list <file path>\" for a file containing the items.`)\n    }\n}","file":"/src/vectra-cli.ts","language":"typescript","fileHash":"72c9542ebb92f786803c9c929d38164edd2fce68103387166fcc9646d54eaf5f","hash":"72c9542ebb92f786803c9c929d38164edd2fce68103387166fcc9646d54eaf5f","processedContent":"import * as fs from 'fs/promises';\n\"\"\"\nscip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/: undefined\nscip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/: undefined\n\"\"\"\nimport yargs from \"yargs/yargs\";\nimport { hideBin } from \"yargs/helpers\";\nimport { LocalDocumentIndex } from \"./LocalDocumentIndex\";\n\"\"\"\nscip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#: This code defines a class called `LocalDocumentIndex` that manages an index file on disk and provides methods for creating, updating, and querying the index. It also includes configuration options for creating embeddings, tokenizing text, and splitting text into chunks.\nscip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/: The code defines a class called `LocalDocumentIndex` that manages an index file on disk and provides methods for creating, updating, and querying the index. It also includes configuration options for creating embeddings, tokenizing text, and splitting text into chunks.\n\"\"\"\nimport { WebFetcher } from './WebFetcher';\n\"\"\"\nscip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#: This code defines a class called WebFetcher that fetches web pages and converts them to Markdown documents using Axios and Cheerio. It also includes options to convert HTML to Markdown and summarize HTML content.\nscip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/: The code defines a class called WebFetcher that fetches web pages and converts them to Markdown documents using Axios and Cheerio. It also includes options to convert HTML to Markdown and summarize HTML content.\n\"\"\"\nimport { OpenAIEmbeddings } from './OpenAIEmbeddings';\n\"\"\"\nscip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#: This code defines a class called `OpenAIEmbeddings` that implements an interface for creating embeddings for text inputs using the OpenAI API. It includes methods for creating embeddings, logging requests, and retrying failed requests, as well as options for customizing the request configuration.\nscip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/: This code defines a class called `OpenAIEmbeddings` that implements an interface for creating embeddings for text inputs using the OpenAI API. It includes methods for creating embeddings, logging requests, and retrying failed requests, as well as options for customizing the request configuration.\n\"\"\"\nimport { Colorize } from './internals';\n\"\"\"\nscip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#: The code defines a class called `Colorize` with several functions that format and colorize text in the terminal. The functions include `replaceLine`, `error`, `output`, `progress`, `success`, `title`, `value`, and `warning`.\nscip-typescript npm vectra 0.5.5 src/internals/`index.ts`/: The code defines a class called Colorize that provides methods for formatting and colorizing text in the terminal, as well as interfaces and types for creating an embedding request and response.\n\"\"\"\nimport { FileFetcher } from './FileFetcher';\n\"\"\"\nscip-typescript npm vectra 0.5.5 src/`FileFetcher.ts`/FileFetcher#: This code defines a class called FileFetcher that implements an interface for fetching text from a URI and passing it to a callback function. It is a recursive function that reads files and directories from a given path, and calls a callback function on each file with the file's contents.\nscip-typescript npm vectra 0.5.5 src/`FileFetcher.ts`/: This code defines a class called FileFetcher that implements the TextFetcher interface. It reads files from a directory and calls a callback function on each file, passing the file's contents and name to the callback. If the file is a directory, it recursively reads all files in the directory and calls the callback for each one.\n\"\"\"\n\nexport async function run() {\n    \"\"\"This code defines a command-line interface (CLI) for managing local indexes and querying them with natural language queries. It allows users to create, delete, add, and remove documents from an index, as well as retrieve statistics and render results in different formats.\"\"\"\n    pass\n\n\nasync function getItemList(items: string[], listFile: string, uriType: string): Promise<string[]> {\n    if (Array.isArray(items) && items.length > 0) {\n        return items;\n    } else if (typeof listFile == 'string' && listFile.trim().length > 0) {\n        const list = await fs.readFile(listFile, 'utf-8');\n        return list.split('\\n').map((item) => item.trim()).filter((item) => item.length > 0);\n    } else {\n        throw new Error(`you must specify either one or more \"--uri <${uriType}>\" for the items or a \"--list <file path>\" for a file containing the items.`)\n    }\n}","documentation":"This code defines a command-line interface for managing local indexes and querying them with natural language queries. It allows users to create, delete, add, and remove documents from an index, as well as retrieve statistics and render results in different formats."}},{"key":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","attributes":{"range":[9,0,241,1],"symbol":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","content":"export async function run() {\n    // prettier-ignore\n    const args = await yargs(hideBin(process.argv))\n        .scriptName('vectra')\n        .command('create <index>', `create a new local index`, {}, async (args) => {\n            const folderPath = args.index as string;\n            const index = new LocalDocumentIndex({ folderPath });\n            console.log(Colorize.output(`creating index at ${folderPath}`));\n            await index.createIndex({ version: 1, deleteIfExists: true });\n        })\n        .command('delete <index>', `delete an existing local index`, {}, async (args) => {\n            const folderPath = args.index as string;\n            console.log(Colorize.output(`deleting index at ${folderPath}`));\n            const index = new LocalDocumentIndex({ folderPath });\n            await index.deleteIndex();\n        })\n        .command('add <index>', `adds one or more web pages to an index`, (yargs) => {\n            return yargs\n                .option('keys', {\n                    alias: 'k',\n                    describe: 'path of a JSON file containing the model keys to use for generating embeddings',\n                    type: 'string'\n                })\n                .option('uri', {\n                    alias: 'u',\n                    array: true,\n                    describe: 'http/https link to a web page to add',\n                    type: 'string'\n                })\n                .option('list', {\n                    alias: 'l',\n                    describe: 'path to a file containing a list of web pages to add',\n                    type: 'string'\n                })\n                .option('cookie', {\n                    alias: 'c',\n                    describe: 'optional cookies to add to web fetch requests',\n                    type: 'string'\n                })\n                .option('chunk-size', {\n                    alias: 'cs',\n                    describe: 'size of the generated chunks in tokens (defaults to 512)',\n                    type: 'number',\n                    default: 512\n                })\n                .check((argv) => {\n                    if (Array.isArray(argv.uri) && argv.uri.length > 0) {\n                        return true;\n                    } else if (typeof argv.list == 'string' && argv.list.trim().length > 0) {\n                        return true;\n                    } else {\n                        throw new Error(`you must specify either one or more \"--uri <link>\" for the pages to add or a \"--list <file path>\" for a file containing the list of pages to add.`);\n                    }\n                })\n                .demandOption(['keys']);\n        }, async (args) => {\n            console.log(Colorize.title('Adding Web Pages to Index'));\n\n            // Create embeddings\n            const keys = JSON.parse(await fs.readFile(args.keys as string, 'utf-8'));\n            const embeddings = new OpenAIEmbeddings(Object.assign({ model: 'text-embedding-ada-002' }, keys));\n\n            // Initialize index\n            const folderPath = args.index as string;\n            const index = new LocalDocumentIndex({\n                folderPath,\n                embeddings,\n                chunkingConfig: {\n                    chunkSize: args.chunkSize\n                }\n            });\n\n            // Get list of url's\n            const uris = await getItemList(args.uri as string[], args.list as string, 'web page');\n\n            // Fetch documents\n            const fileFetcher = new FileFetcher();\n            const webFetcher = args.cookie ? new WebFetcher({ headers: { \"cookie\": args.cookie }}) : new WebFetcher();\n            for (const path of uris) {\n                try {\n                    console.log(Colorize.progress(`fetching ${path}`));\n                    const fetcher = path.startsWith('http') ? webFetcher : fileFetcher;\n                    await fetcher.fetch(path, async (uri, text, docType) => {\n                        console.log(Colorize.replaceLine(Colorize.progress(`indexing ${uri}`)));\n                        await index.upsertDocument(uri, text, docType);\n                        console.log(Colorize.replaceLine(Colorize.success(`added ${uri}`)));\n                        return true;\n                    });\n                } catch (err: unknown) {\n                    console.log(Colorize.replaceLine(Colorize.error(`Error adding: ${path}\\n${(err as Error).message}`)));\n                }\n            }\n        })\n        .command('remove <index>', `removes one or more documents from an index`, (yargs) => {\n            return yargs\n                .option('uri', {\n                    alias: 'u',\n                    array: true,\n                    describe: 'uri of a document to remove',\n                    type: 'string'\n                })\n                .option('list', {\n                    alias: 'l',\n                    describe: 'path to a file containing a list of documents to remove',\n                    type: 'string'\n                })\n                .check((argv) => {\n                    if (Array.isArray(argv.uri) && argv.uri.length > 0) {\n                        return true;\n                    } else if (typeof argv.list == 'string' && argv.list.trim().length > 0) {\n                        return true;\n                    } else {\n                        throw new Error(`you must specify either one or more \"--uri <link>\" for the pages to add or a \"--list <file path>\" for a file containing the list of pages to add.`);\n                    }\n                });\n        }, async (args) => {\n            // Initialize index\n            const folderPath = args.index as string;\n            const index = new LocalDocumentIndex({ folderPath });\n\n            // Get list of uri's\n            const uris = await getItemList(args.uri as string[], args.list as string, 'document');\n\n            // Remove documents\n            for (const uri of uris) {\n                console.log(`removing ${uri}`);\n                await index.deleteDocument(uri);\n            }\n        })\n        .command('stats <index>', `prints the stats for a local index`, {}, async (args) => {\n            const folderPath = args.index as string;\n            const index = new LocalDocumentIndex({ folderPath });\n            const stats = await index.getCatalogStats();\n            console.log(Colorize.title('Index Stats'));\n            console.log(Colorize.output(stats));\n        })\n        .command('query <index> <query>', `queries a local index`, (yargs) => {\n            return yargs\n                .option('keys', {\n                    alias: 'k',\n                    describe: 'path of a JSON file containing the model keys to use for generating embeddings'\n                })\n                .option('document-count', {\n                    alias: 'dc',\n                    describe: 'max number of documents to return (defaults to 10)',\n                    type: 'number',\n                    default: 10\n                })\n                .option('chunk-count', {\n                    alias: 'cc',\n                    describe: 'max number of chunks to return (defaults to 50)',\n                    type: 'number',\n                    default: 50\n                })\n                .option('section-count', {\n                    alias: 'sc',\n                    describe: 'max number of document sections to render (defaults to 1)',\n                    type: 'number',\n                    default: 1\n                })\n                .option('tokens', {\n                    alias: 't',\n                    describe: 'max number of tokens to render for each document section (defaults to 2000)',\n                    type: 'number',\n                    default: 2000\n                })\n                .option('format', {\n                    alias: 'f',\n                    describe: `format of the rendered results. Defaults to 'sections'`,\n                    choices: ['sections', 'stats', 'chunks'],\n                    default: 'sections'\n                })\n                .option('overlap', {\n                    alias: 'o',\n                    describe: `whether to add overlapping chunks to sections.`,\n                    type: 'boolean',\n                    default: true\n                })\n                .demandOption(['keys']);\n        }, async (args) => {\n            console.log(Colorize.title('Querying Index'));\n\n            // Create embeddings\n            const keys = JSON.parse(await fs.readFile(args.keys as string, 'utf-8'));\n            const embeddings = new OpenAIEmbeddings(Object.assign({ model: 'text-embedding-ada-002' }, keys));\n\n            // Initialize index\n            const folderPath = args.index as string;\n            const index = new LocalDocumentIndex({\n                folderPath,\n                embeddings\n            });\n\n            // Query index\n            const query = args.query as string;\n            const results = await index.queryDocuments(query, {\n                maxDocuments: args.documentCount,\n                maxChunks: args.chunkCount,\n            });\n\n            // Render results\n            for (const result of results) {\n                console.log(Colorize.output(result.uri));\n                console.log(Colorize.value('score', result.score));\n                console.log(Colorize.value('chunks', result.chunks.length));\n                if (args.format == 'sections') {\n                    const sections = await result.renderSections(args.tokens, args.sectionCount, args.overlap);\n                    for (let i = 0; i < sections.length; i++) {\n                        const section = sections[i];\n                        console.log(Colorize.title(args.sectionCount == 1 ? 'Section' : `Section ${i + 1}`));\n                        console.log(Colorize.value('score', section.score));\n                        console.log(Colorize.value('tokens', section.tokenCount));\n                        console.log(Colorize.output(section.text));\n                    }\n                } else if (args.format == 'chunks') {\n                    const text = await result.loadText();\n                    for (let i = 0; i < result.chunks.length; i++) {\n                        const chunk = result.chunks[i];\n                        const startPos = chunk.item.metadata.startPos;\n                        const endPos = chunk.item.metadata.endPos;\n                        console.log(Colorize.title(`Chunk ${i + 1}`));\n                        console.log(Colorize.value('score', chunk.score));\n                        console.log(Colorize.value('startPos', startPos));\n                        console.log(Colorize.value('endPos', endPos));\n                        console.log(Colorize.output(text.substring(startPos, endPos + 1)));\n                    }\n                }\n            }\n        })\n        .help()\n        .demandCommand()\n        .parseAsync();\n}","file":"/src/vectra-cli.ts","language":"typescript","fileHash":"72c9542ebb92f786803c9c929d38164edd2fce68103387166fcc9646d54eaf5f","hash":"a71b0e770ecabd35d0a20cb522bd4d3ae978fc43ebfd24d2275a6e04925539b5","processedContent":"export async function run() {\n    // prettier-ignore\n    const args = await yargs(hideBin(process.argv))\n    \"\"\"\n    scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/process.: undefined\n    scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/process.: undefined\n    scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/NodeJS/Process#argv.: undefined\n    \"\"\"\n        .scriptName('vectra')\n        .command('create <index>', `create a new local index`, {}, async (args) => {\n            const folderPath = args.index as string;\n            const index = new LocalDocumentIndex({ folderPath }); #undefined\n            console.log(Colorize.output(`creating index at ${folderPath}`));\n            \"\"\"\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().: undefined\n            scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#: The code defines a class called `Colorize` with several functions that format and colorize text in the terminal. The functions include `replaceLine`, `error`, `output`, `progress`, `success`, `title`, `value`, and `warning`.\n            scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#output().: This code is a function that takes in an object or string and returns a formatted string with colors based on the type of input. It also allows for customization of the output through optional parameters such as quote and units.\n            \"\"\"\n            await index.createIndex({ version: 1, deleteIfExists: true }); #This code creates an index file and loads catalog data into memory.\n        })\n        .command('delete <index>', `delete an existing local index`, {}, async (args) => {\n            const folderPath = args.index as string;\n            console.log(Colorize.output(`deleting index at ${folderPath}`));\n            \"\"\"\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().: undefined\n            scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#: The code defines a class called `Colorize` with several functions that format and colorize text in the terminal. The functions include `replaceLine`, `error`, `output`, `progress`, `success`, `title`, `value`, and `warning`.\n            scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#output().: This code is a function that takes in an object or string and returns a formatted string with colors based on the type of input. It also allows for customization of the output through optional parameters such as quote and units.\n            \"\"\"\n            const index = new LocalDocumentIndex({ folderPath }); #undefined\n            await index.deleteIndex(); #This code deletes a folder and its contents recursively, with a maximum of 3 retries.\n        })\n        .command('add <index>', `adds one or more web pages to an index`, (yargs) => {\n            return yargs\n                .option('keys', {\n                    alias: 'k',\n                    describe: 'path of a JSON file containing the model keys to use for generating embeddings',\n                    type: 'string'\n                })\n                .option('uri', {\n                    alias: 'u',\n                    array: true,\n                    describe: 'http/https link to a web page to add',\n                    type: 'string'\n                })\n                .option('list', {\n                    alias: 'l',\n                    describe: 'path to a file containing a list of web pages to add',\n                    type: 'string'\n                })\n                .option('cookie', {\n                    alias: 'c',\n                    describe: 'optional cookies to add to web fetch requests',\n                    type: 'string'\n                })\n                .option('chunk-size', {\n                    alias: 'cs',\n                    describe: 'size of the generated chunks in tokens (defaults to 512)',\n                    type: 'number',\n                    default: 512\n                })\n                .check((argv) => {\n                    if (Array.isArray(argv.uri) && argv.uri.length > 0) {\n                        return true;\n                    } else if (typeof argv.list == 'string' && argv.list.trim().length > 0) {\n                        return true;\n                    } else {\n                        throw new Error(`you must specify either one or more \"--uri <link>\" for the pages to add or a \"--list <file path>\" for a file containing the list of pages to add.`);\n                    }\n                })\n                .demandOption(['keys']);\n        }, async (args) => {\n            console.log(Colorize.title('Adding Web Pages to Index'));\n            \"\"\"\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().: undefined\n            scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#: The code defines a class called `Colorize` with several functions that format and colorize text in the terminal. The functions include `replaceLine`, `error`, `output`, `progress`, `success`, `title`, `value`, and `warning`.\n            scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#title().: This code is a function that takes a string as an argument and returns a string with the title in a bold, purple font.\n            \"\"\"\n\n            // Create embeddings\n            const keys = JSON.parse(await fs.readFile(args.keys as string, 'utf-8'));\n            \"\"\"\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/readFile().: undefined\n            \"\"\"\n            \"\"\"\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/readFile().: undefined\n            \"\"\"\n            const embeddings = new OpenAIEmbeddings(Object.assign({ model: 'text-embedding-ada-002' }, keys)); #undefined\n\n            // Initialize index\n            const folderPath = args.index as string;\n            const index = new LocalDocumentIndex({ #undefined\n                folderPath,\n                embeddings,\n                chunkingConfig: {\n                    chunkSize: args.chunkSize\n                }\n            });\n\n            // Get list of url's\n            const uris = await getItemList(args.uri as string[], args.list as string, 'web page'); #This code defines a function called `getItemList` that takes an array of strings, a file path, and a string representing the type of URI. It returns a promise that resolves to an array of trimmed and non-empty strings read from the file or the array of items passed in.\n\n            // Fetch documents\n            const fileFetcher = new FileFetcher(); #This code defines a class called FileFetcher that implements an interface for fetching text from a URI and passing it to a callback function. It is a recursive function that reads files and directories from a given path, and calls a callback function on each file with the file's contents.\n            const webFetcher = args.cookie ? new WebFetcher({ headers: { \"cookie\": args.cookie }}) : new WebFetcher();\n            \"\"\"\n            scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#`<constructor>`().: undefined\n            scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#`<constructor>`().: undefined\n            \"\"\"\n            for (const path of uris) {\n                try {\n                    console.log(Colorize.progress(`fetching ${path}`));\n                    \"\"\"\n                    scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.: undefined\n                    scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/: undefined\n                    scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.: undefined\n                    scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().: undefined\n                    scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#: The code defines a class called `Colorize` with several functions that format and colorize text in the terminal. The functions include `replaceLine`, `error`, `output`, `progress`, `success`, `title`, `value`, and `warning`.\n                    scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#progress().: This code defines a function called \"progress\" that takes a string parameter called \"message\" and returns the same string. It's used to display progress messages in a program.\n                    \"\"\"\n                    const fetcher = path.startsWith('http') ? webFetcher : fileFetcher;\n                    await fetcher.fetch(path, async (uri, text, docType) => {\n                    \"\"\"\n                    scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#fetch().: This code fetches a web page and converts it to a Markdown document, using the Axios library to make HTTP requests and the Cheerio library to parse HTML. It also handles errors and validates the content type of the response.\n                    scip-typescript npm vectra 0.5.5 src/`FileFetcher.ts`/FileFetcher#fetch().: This code is a recursive function that reads files and directories from a given path, and calls a callback function on each file with the file's contents. It also checks if the path is a directory and recursively calls itself on all files in the directory.\n                    \"\"\"\n                        console.log(Colorize.replaceLine(Colorize.progress(`indexing ${uri}`)));\n                        \"\"\"\n                        scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.: undefined\n                        scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/: undefined\n                        scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.: undefined\n                        scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().: undefined\n                        scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#: The code defines a class called `Colorize` with several functions that format and colorize text in the terminal. The functions include `replaceLine`, `error`, `output`, `progress`, `success`, `title`, `value`, and `warning`.\n                        scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#: The code defines a class called `Colorize` with several functions that format and colorize text in the terminal. The functions include `replaceLine`, `error`, `output`, `progress`, `success`, `title`, `value`, and `warning`.\n                        scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#progress().: This code defines a function called \"progress\" that takes a string parameter called \"message\" and returns the same string. It's used to display progress messages in a program.\n                        scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#replaceLine().: This code is a function that takes a string as input and returns a new string with the first line of the original string replaced with an empty string. The purpose of this function is to clear the current line in the terminal before printing a new line.\n                        \"\"\"\n                        await index.upsertDocument(uri, text, docType); #This code is a method that upserts a document into an index, which is a data structure used to store and retrieve information. It first checks if the document exists in the index, and then it deletes the document chunks and removes the entry from the catalog. Finally, it saves the changes to disk and deletes the text and metadata files associated with the document.\n                        console.log(Colorize.replaceLine(Colorize.success(`added ${uri}`)));\n                        \"\"\"\n                        scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.: undefined\n                        scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/: undefined\n                        scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.: undefined\n                        scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().: undefined\n                        scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#: The code defines a class called `Colorize` with several functions that format and colorize text in the terminal. The functions include `replaceLine`, `error`, `output`, `progress`, `success`, `title`, `value`, and `warning`.\n                        scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#: The code defines a class called `Colorize` with several functions that format and colorize text in the terminal. The functions include `replaceLine`, `error`, `output`, `progress`, `success`, `title`, `value`, and `warning`.\n                        scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#replaceLine().: This code is a function that takes a string as input and returns a new string with the first line of the original string replaced with an empty string. The purpose of this function is to clear the current line in the terminal before printing a new line.\n                        scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#success().: This code defines a function called \"success\" that takes a string parameter called \"message\". The function returns a string with the message surrounded by ANSI escape codes to display it in green text on the terminal.\n                        \"\"\"\n                        return true;\n                    });\n                } catch (err: unknown) {\n                    console.log(Colorize.replaceLine(Colorize.error(`Error adding: ${path}\\n${(err as Error).message}`)));\n                    \"\"\"\n                    scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.: undefined\n                    scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/: undefined\n                    scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.: undefined\n                    scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().: undefined\n                    scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#: The code defines a class called `Colorize` with several functions that format and colorize text in the terminal. The functions include `replaceLine`, `error`, `output`, `progress`, `success`, `title`, `value`, and `warning`.\n                    scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#: The code defines a class called `Colorize` with several functions that format and colorize text in the terminal. The functions include `replaceLine`, `error`, `output`, `progress`, `success`, `title`, `value`, and `warning`.\n                    scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#replaceLine().: This code is a function that takes a string as input and returns a new string with the first line of the original string replaced with an empty string. The purpose of this function is to clear the current line in the terminal before printing a new line.\n                    scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#error().: This code defines a function called `error` that takes an error object or a string as input and returns a string representation of the error with a red color.\n                    \"\"\"\n                }\n            }\n        })\n        .command('remove <index>', `removes one or more documents from an index`, (yargs) => {\n            return yargs\n                .option('uri', {\n                    alias: 'u',\n                    array: true,\n                    describe: 'uri of a document to remove',\n                    type: 'string'\n                })\n                .option('list', {\n                    alias: 'l',\n                    describe: 'path to a file containing a list of documents to remove',\n                    type: 'string'\n                })\n                .check((argv) => {\n                    if (Array.isArray(argv.uri) && argv.uri.length > 0) {\n                        return true;\n                    } else if (typeof argv.list == 'string' && argv.list.trim().length > 0) {\n                        return true;\n                    } else {\n                        throw new Error(`you must specify either one or more \"--uri <link>\" for the pages to add or a \"--list <file path>\" for a file containing the list of pages to add.`);\n                    }\n                });\n        }, async (args) => {\n            // Initialize index\n            const folderPath = args.index as string;\n            const index = new LocalDocumentIndex({ folderPath }); #undefined\n\n            // Get list of uri's\n            const uris = await getItemList(args.uri as string[], args.list as string, 'document'); #This code defines a function called `getItemList` that takes an array of strings, a file path, and a string representing the type of URI. It returns a promise that resolves to an array of trimmed and non-empty strings read from the file or the array of items passed in.\n\n            // Remove documents\n            for (const uri of uris) {\n                console.log(`removing ${uri}`);\n                \"\"\"\n                scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.: undefined\n                scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/: undefined\n                scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.: undefined\n                scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().: undefined\n                \"\"\"\n                await index.deleteDocument(uri); #This code is a method that deletes a document from an index file. It first checks if the document exists in the index, and then it deletes the document chunks and removes the entry from the catalog. Finally, it saves the changes to disk and deletes the text and metadata files associated with the document.\n            }\n        })\n        .command('stats <index>', `prints the stats for a local index`, {}, async (args) => {\n            const folderPath = args.index as string;\n            const index = new LocalDocumentIndex({ folderPath }); #undefined\n            const stats = await index.getCatalogStats(); #This code retrieves the index statistics for a specific folder, including the version number, metadata configuration, and the number of items in the index.\n            console.log(Colorize.title('Index Stats'));\n            \"\"\"\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().: undefined\n            scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#: The code defines a class called `Colorize` with several functions that format and colorize text in the terminal. The functions include `replaceLine`, `error`, `output`, `progress`, `success`, `title`, `value`, and `warning`.\n            scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#title().: This code is a function that takes a string as an argument and returns a string with the title in a bold, purple font.\n            \"\"\"\n            console.log(Colorize.output(stats));\n            \"\"\"\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().: undefined\n            scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#: The code defines a class called `Colorize` with several functions that format and colorize text in the terminal. The functions include `replaceLine`, `error`, `output`, `progress`, `success`, `title`, `value`, and `warning`.\n            scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#output().: This code is a function that takes in an object or string and returns a formatted string with colors based on the type of input. It also allows for customization of the output through optional parameters such as quote and units.\n            \"\"\"\n        })\n        .command('query <index> <query>', `queries a local index`, (yargs) => {\n            return yargs\n                .option('keys', {\n                    alias: 'k',\n                    describe: 'path of a JSON file containing the model keys to use for generating embeddings'\n                })\n                .option('document-count', {\n                    alias: 'dc',\n                    describe: 'max number of documents to return (defaults to 10)',\n                    type: 'number',\n                    default: 10\n                })\n                .option('chunk-count', {\n                    alias: 'cc',\n                    describe: 'max number of chunks to return (defaults to 50)',\n                    type: 'number',\n                    default: 50\n                })\n                .option('section-count', {\n                    alias: 'sc',\n                    describe: 'max number of document sections to render (defaults to 1)',\n                    type: 'number',\n                    default: 1\n                })\n                .option('tokens', {\n                    alias: 't',\n                    describe: 'max number of tokens to render for each document section (defaults to 2000)',\n                    type: 'number',\n                    default: 2000\n                })\n                .option('format', {\n                    alias: 'f',\n                    describe: `format of the rendered results. Defaults to 'sections'`,\n                    choices: ['sections', 'stats', 'chunks'],\n                    default: 'sections'\n                })\n                .option('overlap', {\n                    alias: 'o',\n                    describe: `whether to add overlapping chunks to sections.`,\n                    type: 'boolean',\n                    default: true\n                })\n                .demandOption(['keys']);\n        }, async (args) => {\n            console.log(Colorize.title('Querying Index'));\n            \"\"\"\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().: undefined\n            scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#: The code defines a class called `Colorize` with several functions that format and colorize text in the terminal. The functions include `replaceLine`, `error`, `output`, `progress`, `success`, `title`, `value`, and `warning`.\n            scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#title().: This code is a function that takes a string as an argument and returns a string with the title in a bold, purple font.\n            \"\"\"\n\n            // Create embeddings\n            const keys = JSON.parse(await fs.readFile(args.keys as string, 'utf-8'));\n            const embeddings = new OpenAIEmbeddings(Object.assign({ model: 'text-embedding-ada-002' }, keys)); #undefined\n\n            // Initialize index\n            const folderPath = args.index as string;\n            const index = new LocalDocumentIndex({ #undefined\n                folderPath,\n                embeddings\n            });\n\n            // Query index\n            const query = args.query as string;\n            const results = await index.queryDocuments(query, { #This code defines a function called `queryDocuments` that takes in a query string and options, generates embeddings for the query, queries an index for chunks based on the embeddings, groups chunks by document, creates a document result for each document, sorts the results by score, and returns the top results.\n                maxDocuments: args.documentCount,\n                maxChunks: args.chunkCount,\n            });\n\n            // Render results\n            for (const result of results) {\n                console.log(Colorize.output(result.uri));\n                \"\"\"\n                scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.: undefined\n                scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/: undefined\n                scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.: undefined\n                scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().: undefined\n                scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#: The code defines a class called `Colorize` with several functions that format and colorize text in the terminal. The functions include `replaceLine`, `error`, `output`, `progress`, `success`, `title`, `value`, and `warning`.\n                scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#output().: This code is a function that takes in an object or string and returns a formatted string with colors based on the type of input. It also allows for customization of the output through optional parameters such as quote and units.\n                \"\"\"\n                console.log(Colorize.value('score', result.score));\n                \"\"\"\n                scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.: undefined\n                scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/: undefined\n                scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.: undefined\n                scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().: undefined\n                scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#: The code defines a class called `Colorize` with several functions that format and colorize text in the terminal. The functions include `replaceLine`, `error`, `output`, `progress`, `success`, `title`, `value`, and `warning`.\n                scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#value().: This code is a function that takes in an object or string and returns a formatted string with colors based on the type of input. It also allows for customization of the output through optional parameters such as quote and units.\n                \"\"\"\n                console.log(Colorize.value('chunks', result.chunks.length));\n                \"\"\"\n                scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.: undefined\n                scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/: undefined\n                scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.: undefined\n                scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().: undefined\n                scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#: The code defines a class called `Colorize` with several functions that format and colorize text in the terminal. The functions include `replaceLine`, `error`, `output`, `progress`, `success`, `title`, `value`, and `warning`.\n                scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#value().: This code is a function that takes in an object or string and returns a formatted string with colors based on the type of input. It also allows for customization of the output through optional parameters such as quote and units.\n                \"\"\"\n                if (args.format == 'sections') {\n                    const sections = await result.renderSections(args.tokens, args.sectionCount, args.overlap);\n                    for (let i = 0; i < sections.length; i++) {\n                        const section = sections[i];\n                        console.log(Colorize.title(args.sectionCount == 1 ? 'Section' : `Section ${i + 1}`));\n                        \"\"\"\n                        scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.: undefined\n                        scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/: undefined\n                        scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.: undefined\n                        scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().: undefined\n                        scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#: The code defines a class called `Colorize` with several functions that format and colorize text in the terminal. The functions include `replaceLine`, `error`, `output`, `progress`, `success`, `title`, `value`, and `warning`.\n                        scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#title().: This code is a function that takes a string as an argument and returns a string with the title in a bold, purple font.\n                        \"\"\"\n                        console.log(Colorize.value('score', section.score));\n                        \"\"\"\n                        scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.: undefined\n                        scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/: undefined\n                        scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.: undefined\n                        scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().: undefined\n                        scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#: The code defines a class called `Colorize` with several functions that format and colorize text in the terminal. The functions include `replaceLine`, `error`, `output`, `progress`, `success`, `title`, `value`, and `warning`.\n                        scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#value().: This code is a function that takes in an object or string and returns a formatted string with colors based on the type of input. It also allows for customization of the output through optional parameters such as quote and units.\n                        \"\"\"\n                        console.log(Colorize.value('tokens', section.tokenCount));\n                        \"\"\"\n                        scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.: undefined\n                        scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/: undefined\n                        scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.: undefined\n                        scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().: undefined\n                        scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#: The code defines a class called `Colorize` with several functions that format and colorize text in the terminal. The functions include `replaceLine`, `error`, `output`, `progress`, `success`, `title`, `value`, and `warning`.\n                        scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#value().: This code is a function that takes in an object or string and returns a formatted string with colors based on the type of input. It also allows for customization of the output through optional parameters such as quote and units.\n                        \"\"\"\n                        console.log(Colorize.output(section.text));\n                        \"\"\"\n                        scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.: undefined\n                        scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/: undefined\n                        scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.: undefined\n                        scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().: undefined\n                        scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#: The code defines a class called `Colorize` with several functions that format and colorize text in the terminal. The functions include `replaceLine`, `error`, `output`, `progress`, `success`, `title`, `value`, and `warning`.\n                        scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#output().: This code is a function that takes in an object or string and returns a formatted string with colors based on the type of input. It also allows for customization of the output through optional parameters such as quote and units.\n                        \"\"\"\n                    }\n                } else if (args.format == 'chunks') {\n                    const text = await result.loadText();\n                    for (let i = 0; i < result.chunks.length; i++) {\n                        const chunk = result.chunks[i];\n                        const startPos = chunk.item.metadata.startPos;\n                        const endPos = chunk.item.metadata.endPos;\n                        console.log(Colorize.title(`Chunk ${i + 1}`));\n                        \"\"\"\n                        scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.: undefined\n                        scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/: undefined\n                        scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.: undefined\n                        scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().: undefined\n                        scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#: The code defines a class called `Colorize` with several functions that format and colorize text in the terminal. The functions include `replaceLine`, `error`, `output`, `progress`, `success`, `title`, `value`, and `warning`.\n                        scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#title().: This code is a function that takes a string as an argument and returns a string with the title in a bold, purple font.\n                        \"\"\"\n                        console.log(Colorize.value('score', chunk.score));\n                        \"\"\"\n                        scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.: undefined\n                        scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/: undefined\n                        scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.: undefined\n                        scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().: undefined\n                        scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#: The code defines a class called `Colorize` with several functions that format and colorize text in the terminal. The functions include `replaceLine`, `error`, `output`, `progress`, `success`, `title`, `value`, and `warning`.\n                        scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#value().: This code is a function that takes in an object or string and returns a formatted string with colors based on the type of input. It also allows for customization of the output through optional parameters such as quote and units.\n                        \"\"\"\n                        console.log(Colorize.value('startPos', startPos));\n                        \"\"\"\n                        scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.: undefined\n                        scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/: undefined\n                        scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.: undefined\n                        scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().: undefined\n                        scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#: The code defines a class called `Colorize` with several functions that format and colorize text in the terminal. The functions include `replaceLine`, `error`, `output`, `progress`, `success`, `title`, `value`, and `warning`.\n                        scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#value().: This code is a function that takes in an object or string and returns a formatted string with colors based on the type of input. It also allows for customization of the output through optional parameters such as quote and units.\n                        \"\"\"\n                        console.log(Colorize.value('endPos', endPos));\n                        \"\"\"\n                        scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.: undefined\n                        scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/: undefined\n                        scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.: undefined\n                        scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().: undefined\n                        scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#: The code defines a class called `Colorize` with several functions that format and colorize text in the terminal. The functions include `replaceLine`, `error`, `output`, `progress`, `success`, `title`, `value`, and `warning`.\n                        scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#value().: This code is a function that takes in an object or string and returns a formatted string with colors based on the type of input. It also allows for customization of the output through optional parameters such as quote and units.\n                        \"\"\"\n                        console.log(Colorize.output(text.substring(startPos, endPos + 1)));\n                        \"\"\"\n                        scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.: undefined\n                        scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/: undefined\n                        scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.: undefined\n                        scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().: undefined\n                        scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#: The code defines a class called `Colorize` with several functions that format and colorize text in the terminal. The functions include `replaceLine`, `error`, `output`, `progress`, `success`, `title`, `value`, and `warning`.\n                        scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#output().: This code is a function that takes in an object or string and returns a formatted string with colors based on the type of input. It also allows for customization of the output through optional parameters such as quote and units.\n                        \"\"\"\n                    }\n                }\n            }\n        })\n        .help()\n        .demandCommand()\n        .parseAsync();\n}","documentation":"This code defines a command-line interface (CLI) for managing local indexes and querying them with natural language queries. It allows users to create, delete, add, and remove documents from an index, as well as retrieve statistics and render results in different formats."}},{"key":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/getItemList().","attributes":{"range":[244,0,253,1],"symbol":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/getItemList().","content":"async function getItemList(items: string[], listFile: string, uriType: string): Promise<string[]> {\n    if (Array.isArray(items) && items.length > 0) {\n        return items;\n    } else if (typeof listFile == 'string' && listFile.trim().length > 0) {\n        const list = await fs.readFile(listFile, 'utf-8');\n        return list.split('\\n').map((item) => item.trim()).filter((item) => item.length > 0);\n    } else {\n        throw new Error(`you must specify either one or more \"--uri <${uriType}>\" for the items or a \"--list <file path>\" for a file containing the items.`)\n    }\n}","file":"/src/vectra-cli.ts","language":"typescript","fileHash":"72c9542ebb92f786803c9c929d38164edd2fce68103387166fcc9646d54eaf5f","hash":"2e3f759aaddebcfd8fb752e733851edbb5adfc87fab6c4ca987b3fa7e5e25d63","processedContent":"async function getItemList(items: string[], listFile: string, uriType: string): Promise<string[]> {\n    if (Array.isArray(items) && items.length > 0) {\n        return items;\n    } else if (typeof listFile == 'string' && listFile.trim().length > 0) {\n        const list = await fs.readFile(listFile, 'utf-8');\n        \"\"\"\n        scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/: undefined\n        scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/readFile().: undefined\n        \"\"\"\n        return list.split('\\n').map((item) => item.trim()).filter((item) => item.length > 0);\n    } else {\n        throw new Error(`you must specify either one or more \"--uri <${uriType}>\" for the items or a \"--list <file path>\" for a file containing the items.`)\n    }\n}","documentation":"This code defines a function called `getItemList` that takes an array of strings, a file path, and a string representing the type of URI. It returns a promise that resolves to an array of trimmed and non-empty strings read from the file or the array of items passed in."}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/process.","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/process.","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/process.","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/process.","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/NodeJS/Process#argv.","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/NodeJS/Process#argv.","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#`<constructor>`().","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#`<constructor>`().","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#`<constructor>`().","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#`<constructor>`().","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#`<constructor>`().","attributes":{"symbol":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#`<constructor>`().","language":"typescript"}},{"key":"scip-typescript npm vectra 0.5.5 src/`index.ts`/","attributes":{"range":[0,0,11,0],"symbol":"scip-typescript npm vectra 0.5.5 src/`index.ts`/","content":"export * from './FileFetcher';\nexport * from './GPT3Tokenizer';\nexport * from './ItemSelector';\nexport * from './LocalIndex';\nexport * from './LocalDocument';\nexport * from './LocalDocumentIndex';\nexport * from './LocalDocumentResult';\nexport * from './OpenAIEmbeddings';\nexport * from './TextSplitter';\nexport * from './types';\nexport * from './WebFetcher';\n","file":"/src/index.ts","language":"typescript","fileHash":"bfc37db4000e9d4507f7478c57ebb49e68bc39a4508b10d92454700e381d395c","hash":"bfc37db4000e9d4507f7478c57ebb49e68bc39a4508b10d92454700e381d395c","processedContent":"export * from './FileFetcher'; #This code defines a class called FileFetcher that implements the TextFetcher interface. It reads files from a directory and calls a callback function on each file, passing the file's contents and name to the callback. If the file is a directory, it recursively reads all files in the directory and calls the callback for each one.\nexport * from './GPT3Tokenizer'; #This code defines a class called `GPT3Tokenizer` that implements an interface for tokenizing text using GPT-3's encoder. The class has two functions, `decode` and `encode`, which are not defined and return undefined.\nexport * from './ItemSelector'; #The code defines a class called ItemSelector that provides methods for filtering metadata and calculating similarities between vectors. It also defines various interfaces and types for an AI model that can create embeddings for text inputs.\nexport * from './LocalIndex'; #This code defines a class called `LocalIndex` that manages a local vector index, which is used to create, update, and query an index file on disk. It also defines various interfaces and types for an AI model that can create embeddings for text inputs.\nexport * from './LocalDocument'; #This code defines a class called LocalDocument that represents a document stored on the local file system. It has properties for the folder path, ID, and URI, as well as methods for loading metadata and text content from the file system.\nexport * from './LocalDocumentIndex'; #The code defines a class called `LocalDocumentIndex` that manages an index file on disk and provides methods for creating, updating, and querying the index. It also includes configuration options for creating embeddings, tokenizing text, and splitting text into chunks.\nexport * from './LocalDocumentResult'; #The code defines a class called LocalDocumentResult that represents a document stored on the local file system, and includes methods for loading metadata and text content, as well as checking if a file with the same name as the document ID exists in the specified folder. It also defines various interfaces and types for an AI model that can create embeddings for text inputs.\nexport * from './OpenAIEmbeddings'; #This code defines a class called `OpenAIEmbeddings` that implements an interface for creating embeddings for text inputs using the OpenAI API. It includes methods for creating embeddings, logging requests, and retrying failed requests, as well as options for customizing the request configuration.\nexport * from './TextSplitter'; #The code defines a class called `TextSplitter` that takes in a string and returns a list of strings based on certain rules, with configuration options for separators, chunk size, and overlap. Additionally, it includes a tokenizer interface for converting strings into lists of numbers and vice versa.\nexport * from './types'; #The code defines various interfaces and types for an AI model that can create embeddings for text inputs, including a response status, embeddings response, text chunk, text fetcher, index statistics, index item, metadata filter, query result, tokenizer, document chunk metadata, and document catalog statistics.\nexport * from './WebFetcher'; #The code defines a class called WebFetcher that fetches web pages and converts them to Markdown documents using Axios and Cheerio. It also includes options to convert HTML to Markdown and summarize HTML content.\n","documentation":"The code defines various classes and interfaces for working with text data, including tokenization, embedding creation, and document indexing."}}],"edges":[{"key":"geid_130_0","source":"scip-typescript npm vectra 0.5.5 src/`types.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/DocumentTextSection#","attributes":{"type":"defines","at":[170,0,174,1]}},{"key":"geid_130_1","source":"scip-typescript npm vectra 0.5.5 src/`types.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/DocumentCatalogStats#","attributes":{"type":"defines","at":[161,0,168,1]}},{"key":"geid_130_2","source":"scip-typescript npm vectra 0.5.5 src/`types.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/DocumentChunkMetadata#","attributes":{"type":"defines","at":[154,0,159,1]}},{"key":"geid_130_3","source":"scip-typescript npm vectra 0.5.5 src/`types.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/Tokenizer#","attributes":{"type":"defines","at":[149,0,152,1]}},{"key":"geid_130_4","source":"scip-typescript npm vectra 0.5.5 src/`types.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/QueryResult#","attributes":{"type":"defines","at":[144,0,147,1]}},{"key":"geid_130_5","source":"scip-typescript npm vectra 0.5.5 src/`types.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/MetadataFilter#","attributes":{"type":"defines","at":[87,0,140,1]}},{"key":"geid_130_6","source":"scip-typescript npm vectra 0.5.5 src/`types.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/IndexItem#","attributes":{"type":"defines","at":[79,0,85,1]}},{"key":"geid_130_7","source":"scip-typescript npm vectra 0.5.5 src/`types.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/IndexStats#","attributes":{"type":"defines","at":[71,0,77,1]}},{"key":"geid_130_8","source":"scip-typescript npm vectra 0.5.5 src/`types.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/TextFetcher#","attributes":{"type":"defines","at":[67,0,69,1]}},{"key":"geid_130_9","source":"scip-typescript npm vectra 0.5.5 src/`types.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/TextChunk#","attributes":{"type":"defines","at":[58,0,65,1]}},{"key":"geid_130_10","source":"scip-typescript npm vectra 0.5.5 src/`types.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/EmbeddingsResponse#","attributes":{"type":"defines","at":[31,0,56,1]}},{"key":"geid_130_11","source":"scip-typescript npm vectra 0.5.5 src/`types.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/EmbeddingsModel#","attributes":{"type":"defines","at":[5,0,17,1]}},{"key":"geid_130_12","source":"scip-typescript npm vectra 0.5.5 src/`types.ts`/EmbeddingsModel#","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/EmbeddingsResponse#","attributes":{"type":"uses","at":[16,55,16,73]}},{"key":"geid_130_13","source":"scip-typescript npm vectra 0.5.5 src/`types.ts`/EmbeddingsResponse#","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/EmbeddingsResponseStatus#","attributes":{"type":"uses","at":[35,12,35,36]}},{"key":"geid_130_14","source":"scip-typescript npm vectra 0.5.5 src/`types.ts`/IndexItem#","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/MetadataTypes#","attributes":{"type":"uses","at":[79,53,79,66]}},{"key":"geid_130_15","source":"scip-typescript npm vectra 0.5.5 src/`types.ts`/IndexItem#","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/IndexItem#[TMetadata]","attributes":{"type":"uses","at":[81,14,81,23]}},{"key":"geid_130_16","source":"scip-typescript npm vectra 0.5.5 src/`types.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/MetadataFilter#","attributes":{"type":"uses","at":[132,13,132,27]}},{"key":"geid_130_17","source":"scip-typescript npm vectra 0.5.5 src/`types.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/MetadataFilter#","attributes":{"type":"uses","at":[137,12,137,26]}},{"key":"geid_130_18","source":"scip-typescript npm vectra 0.5.5 src/`types.ts`/QueryResult#","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/MetadataTypes#","attributes":{"type":"uses","at":[144,55,144,68]}},{"key":"geid_130_19","source":"scip-typescript npm vectra 0.5.5 src/`types.ts`/QueryResult#","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/IndexItem#","attributes":{"type":"uses","at":[145,10,145,19]}},{"key":"geid_130_20","source":"scip-typescript npm vectra 0.5.5 src/`types.ts`/QueryResult#","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/QueryResult#[TMetadata]","attributes":{"type":"uses","at":[145,20,145,29]}},{"key":"geid_130_21","source":"scip-typescript npm vectra 0.5.5 src/`types.ts`/DocumentChunkMetadata#","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/MetadataTypes#","attributes":{"type":"uses","at":[158,19,158,32]}},{"key":"geid_130_22","source":"scip-typescript npm vectra 0.5.5 src/`GPT3Tokenizer.ts`/GPT3Tokenizer#","target":"scip-typescript npm vectra 0.5.5 src/`GPT3Tokenizer.ts`/GPT3Tokenizer#encode().","attributes":{"type":"defines","at":[11,4,13,5]}},{"key":"geid_130_23","source":"scip-typescript npm vectra 0.5.5 src/`GPT3Tokenizer.ts`/GPT3Tokenizer#","target":"scip-typescript npm vectra 0.5.5 src/`GPT3Tokenizer.ts`/GPT3Tokenizer#decode().","attributes":{"type":"defines","at":[7,4,9,5]}},{"key":"geid_130_24","source":"scip-typescript npm vectra 0.5.5 src/`GPT3Tokenizer.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`GPT3Tokenizer.ts`/GPT3Tokenizer#","attributes":{"type":"defines","at":[6,0,14,1]}},{"key":"geid_130_25","source":"scip-typescript npm vectra 0.5.5 src/`GPT3Tokenizer.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/Tokenizer#","attributes":{"type":"uses","at":[0,9,0,18]}},{"key":"geid_130_26","source":"scip-typescript npm vectra 0.5.5 src/`GPT3Tokenizer.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/","attributes":{"type":"uses","at":[0,26,0,35]}},{"key":"geid_130_27","source":"scip-typescript npm vectra 0.5.5 src/`GPT3Tokenizer.ts`/","target":"scip-typescript npm gpt-3-encoder 1.1.4 `index.d.ts`/`\"gpt-3-encoder\"`/encode().","attributes":{"type":"uses","at":[1,9,1,15]}},{"key":"geid_130_28","source":"scip-typescript npm vectra 0.5.5 src/`GPT3Tokenizer.ts`/","target":"scip-typescript npm gpt-3-encoder 1.1.4 `index.d.ts`/`\"gpt-3-encoder\"`/decode().","attributes":{"type":"uses","at":[1,17,1,23]}},{"key":"geid_130_29","source":"scip-typescript npm vectra 0.5.5 src/`GPT3Tokenizer.ts`/","target":"scip-typescript npm gpt-3-encoder 1.1.4 `index.d.ts`/`\"gpt-3-encoder\"`/","attributes":{"type":"uses","at":[1,31,1,46]}},{"key":"geid_130_30","source":"scip-typescript npm vectra 0.5.5 src/`GPT3Tokenizer.ts`/GPT3Tokenizer#","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/Tokenizer#","attributes":{"type":"uses","at":[6,38,6,47]}},{"key":"geid_130_31","source":"scip-typescript npm vectra 0.5.5 src/`GPT3Tokenizer.ts`/GPT3Tokenizer#decode().","target":"scip-typescript npm gpt-3-encoder 1.1.4 `index.d.ts`/`\"gpt-3-encoder\"`/decode().","attributes":{"type":"uses","at":[8,15,8,21]}},{"key":"geid_130_32","source":"scip-typescript npm vectra 0.5.5 src/`GPT3Tokenizer.ts`/GPT3Tokenizer#encode().","target":"scip-typescript npm gpt-3-encoder 1.1.4 `index.d.ts`/`\"gpt-3-encoder\"`/encode().","attributes":{"type":"uses","at":[12,15,12,21]}},{"key":"geid_130_33","source":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#","target":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#metadataFilter().","attributes":{"type":"defines","at":[104,4,156,5]}},{"key":"geid_130_34","source":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#","target":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#dotProduct().","attributes":{"type":"defines","at":[92,4,102,5]}},{"key":"geid_130_35","source":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#","target":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#select().","attributes":{"type":"defines","at":[56,4,90,5]}},{"key":"geid_130_36","source":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#","target":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#normalizedCosineSimilarity().","attributes":{"type":"defines","at":[45,4,48,5]}},{"key":"geid_130_37","source":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#","target":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#normalize().","attributes":{"type":"defines","at":[22,4,32,5]}},{"key":"geid_130_38","source":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#","target":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#cosineSimilarity().","attributes":{"type":"defines","at":[9,4,12,5]}},{"key":"geid_130_39","source":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#","attributes":{"type":"defines","at":[2,0,157,1]}},{"key":"geid_130_40","source":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/MetadataFilter#","attributes":{"type":"uses","at":[0,9,0,23]}},{"key":"geid_130_41","source":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/MetadataTypes#","attributes":{"type":"uses","at":[0,25,0,38]}},{"key":"geid_130_42","source":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/","attributes":{"type":"uses","at":[0,46,0,55]}},{"key":"geid_130_43","source":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#cosineSimilarity().","target":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#dotProduct().","attributes":{"type":"uses","at":[11,20,11,30]}},{"key":"geid_130_44","source":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#cosineSimilarity().","target":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#normalize().","attributes":{"type":"uses","at":[11,57,11,66]}},{"key":"geid_130_45","source":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#cosineSimilarity().","target":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#normalize().","attributes":{"type":"uses","at":[11,83,11,92]}},{"key":"geid_130_46","source":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#normalizedCosineSimilarity().","target":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#dotProduct().","attributes":{"type":"uses","at":[47,20,47,30]}},{"key":"geid_130_47","source":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#select().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/MetadataTypes#","attributes":{"type":"uses","at":[56,50,56,63]}},{"key":"geid_130_48","source":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#select().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/MetadataFilter#","attributes":{"type":"uses","at":[56,74,56,88]}},{"key":"geid_130_49","source":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#select().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/MetadataFilter#","attributes":{"type":"uses","at":[64,48,64,62]}},{"key":"geid_130_50","source":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#","target":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#select().","attributes":{"type":"uses","at":[64,72,64,78]}},{"key":"geid_130_51","source":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#select().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/MetadataFilter#","attributes":{"type":"uses","at":[69,47,69,61]}},{"key":"geid_130_52","source":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#","target":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#select().","attributes":{"type":"uses","at":[69,71,69,77]}},{"key":"geid_130_53","source":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#select().","target":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#metadataFilter().","attributes":{"type":"uses","at":[78,34,78,48]}},{"key":"geid_130_54","source":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#select().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/MetadataFilter#","attributes":{"type":"uses","at":[78,73,78,87]}},{"key":"geid_130_55","source":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#metadataFilter().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/MetadataTypes#","attributes":{"type":"uses","at":[104,41,104,54]}},{"key":"geid_130_56","source":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#metadataFilter().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/MetadataFilter#","attributes":{"type":"uses","at":[104,64,104,78]}},{"key":"geid_130_57","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#","attributes":{"type":"defines","at":[389,0,395,1]}},{"key":"geid_130_58","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#addItemToUpdate().","attributes":{"type":"defines","at":[325,4,386,5]}},{"key":"geid_130_59","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#loadIndexData().","attributes":{"type":"defines","at":[312,4,323,5]}},{"key":"geid_130_60","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#upsertItem().","attributes":{"type":"defines","at":[298,4,307,5]}},{"key":"geid_130_61","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#queryItems().","attributes":{"type":"defines","at":[249,4,288,5]}},{"key":"geid_130_62","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#listItemsByMetadata().","attributes":{"type":"defines","at":[234,4,237,5]}},{"key":"geid_130_63","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#listItems().","attributes":{"type":"defines","at":[222,4,225,5]}},{"key":"geid_130_64","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#isIndexCreated().","attributes":{"type":"defines","at":[206,4,213,5]}},{"key":"geid_130_65","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#insertItem().","attributes":{"type":"defines","at":[192,4,201,5]}},{"key":"geid_130_66","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#getItem().","attributes":{"type":"defines","at":[179,4,182,5]}},{"key":"geid_130_67","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#getIndexStats().","attributes":{"type":"defines","at":[165,4,172,5]}},{"key":"geid_130_68","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#endUpdate().","attributes":{"type":"defines","at":[146,4,159,5]}},{"key":"geid_130_69","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#deleteItem().","attributes":{"type":"defines","at":[125,4,139,5]}},{"key":"geid_130_70","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#deleteIndex().","attributes":{"type":"defines","at":[113,4,119,5]}},{"key":"geid_130_71","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#createIndex().","attributes":{"type":"defines","at":[80,4,106,5]}},{"key":"geid_130_72","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#cancelUpdate().","attributes":{"type":"defines","at":[70,4,72,5]}},{"key":"geid_130_73","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#beginUpdate().","attributes":{"type":"defines","at":[56,4,63,5]}},{"key":"geid_130_74","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#","attributes":{"type":"defines","at":[20,0,387,1]}},{"key":"geid_130_75","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/CreateIndexConfig#","attributes":{"type":"defines","at":[6,0,12,1]}},{"key":"geid_130_76","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/","attributes":{"type":"uses","at":[0,12,0,14]}},{"key":"geid_130_77","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/","attributes":{"type":"uses","at":[0,20,0,33]}},{"key":"geid_130_78","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/","attributes":{"type":"uses","at":[1,12,1,16]}},{"key":"geid_130_79","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path.","attributes":{"type":"uses","at":[1,12,1,16]}},{"key":"geid_130_80","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/","attributes":{"type":"uses","at":[1,22,1,28]}},{"key":"geid_130_81","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/","target":"scip-typescript npm @types/uuid 9.0.7 `index.d.ts`/v4.","attributes":{"type":"uses","at":[2,9,2,11]}},{"key":"geid_130_82","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/","target":"scip-typescript npm @types/uuid 9.0.7 `index.d.ts`/","attributes":{"type":"uses","at":[2,19,2,25]}},{"key":"geid_130_83","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#","attributes":{"type":"uses","at":[3,9,3,21]}},{"key":"geid_130_84","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/","attributes":{"type":"uses","at":[3,29,3,45]}},{"key":"geid_130_85","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/IndexItem#","attributes":{"type":"uses","at":[4,9,4,18]}},{"key":"geid_130_86","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/IndexStats#","attributes":{"type":"uses","at":[4,20,4,30]}},{"key":"geid_130_87","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/MetadataFilter#","attributes":{"type":"uses","at":[4,32,4,46]}},{"key":"geid_130_88","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/MetadataTypes#","attributes":{"type":"uses","at":[4,48,4,61]}},{"key":"geid_130_89","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/QueryResult#","attributes":{"type":"uses","at":[4,63,4,74]}},{"key":"geid_130_90","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/","attributes":{"type":"uses","at":[4,82,4,91]}},{"key":"geid_130_91","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#","attributes":{"type":"uses","at":[24,20,24,29]}},{"key":"geid_130_92","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#","attributes":{"type":"uses","at":[25,22,25,31]}},{"key":"geid_130_93","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_folderPath.","attributes":{"type":"uses","at":[33,13,33,24]}},{"key":"geid_130_94","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_indexName.","attributes":{"type":"uses","at":[34,13,34,23]}},{"key":"geid_130_95","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_folderPath.","attributes":{"type":"uses","at":[41,20,41,31]}},{"key":"geid_130_96","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_indexName.","attributes":{"type":"uses","at":[48,20,48,30]}},{"key":"geid_130_97","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#beginUpdate().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_update.","attributes":{"type":"uses","at":[57,17,57,24]}},{"key":"geid_130_98","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#beginUpdate().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#loadIndexData().","attributes":{"type":"uses","at":[61,19,61,32]}},{"key":"geid_130_99","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#beginUpdate().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_update.","attributes":{"type":"uses","at":[62,13,62,20]}},{"key":"geid_130_100","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#beginUpdate().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_data.","attributes":{"type":"uses","at":[62,46,62,51]}},{"key":"geid_130_101","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#cancelUpdate().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_update.","attributes":{"type":"uses","at":[71,13,71,20]}},{"key":"geid_130_102","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#createIndex().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/CreateIndexConfig#","attributes":{"type":"uses","at":[80,37,80,54]}},{"key":"geid_130_103","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#createIndex().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#isIndexCreated().","attributes":{"type":"uses","at":[82,23,82,37]}},{"key":"geid_130_104","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#createIndex().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/CreateIndexConfig#deleteIfExists.","attributes":{"type":"uses","at":[83,23,83,37]}},{"key":"geid_130_105","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#createIndex().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#deleteIndex().","attributes":{"type":"uses","at":[84,27,84,38]}},{"key":"geid_130_106","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#createIndex().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/","attributes":{"type":"uses","at":[92,18,92,20]}},{"key":"geid_130_107","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#createIndex().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/mkdir().","attributes":{"type":"uses","at":[92,21,92,26]}},{"key":"geid_130_108","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#createIndex().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_folderPath.","attributes":{"type":"uses","at":[92,32,92,43]}},{"key":"geid_130_109","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#createIndex().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_data.","attributes":{"type":"uses","at":[95,17,95,22]}},{"key":"geid_130_110","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#createIndex().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/CreateIndexConfig#version.","attributes":{"type":"uses","at":[96,32,96,39]}},{"key":"geid_130_111","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#createIndex().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/CreateIndexConfig#metadata_config.","attributes":{"type":"uses","at":[97,40,97,55]}},{"key":"geid_130_112","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#createIndex().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/","attributes":{"type":"uses","at":[101,18,101,20]}},{"key":"geid_130_113","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#createIndex().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/writeFile().","attributes":{"type":"uses","at":[101,21,101,30]}},{"key":"geid_130_114","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#createIndex().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#","attributes":{"type":"uses","at":[101,31,101,35]}},{"key":"geid_130_115","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#createIndex().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#join().","attributes":{"type":"uses","at":[101,36,101,40]}},{"key":"geid_130_116","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#createIndex().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_folderPath.","attributes":{"type":"uses","at":[101,46,101,57]}},{"key":"geid_130_117","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#createIndex().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_indexName.","attributes":{"type":"uses","at":[101,64,101,74]}},{"key":"geid_130_118","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#createIndex().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_data.","attributes":{"type":"uses","at":[101,97,101,102]}},{"key":"geid_130_119","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#createIndex().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#deleteIndex().","attributes":{"type":"uses","at":[103,23,103,34]}},{"key":"geid_130_120","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#deleteIndex().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_data.","attributes":{"type":"uses","at":[114,13,114,18]}},{"key":"geid_130_121","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#deleteIndex().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/","attributes":{"type":"uses","at":[115,15,115,17]}},{"key":"geid_130_122","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#deleteIndex().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/rm().","attributes":{"type":"uses","at":[115,18,115,20]}},{"key":"geid_130_123","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#deleteIndex().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_folderPath.","attributes":{"type":"uses","at":[115,26,115,37]}},{"key":"geid_130_124","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#deleteItem().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_update.","attributes":{"type":"uses","at":[126,17,126,24]}},{"key":"geid_130_125","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#deleteItem().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_update.","attributes":{"type":"uses","at":[127,31,127,38]}},{"key":"geid_130_126","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#deleteItem().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#items.","attributes":{"type":"uses","at":[127,39,127,44]}},{"key":"geid_130_127","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#deleteItem().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_update.","attributes":{"type":"uses","at":[129,21,129,28]}},{"key":"geid_130_128","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#deleteItem().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#items.","attributes":{"type":"uses","at":[129,29,129,34]}},{"key":"geid_130_129","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#deleteItem().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#beginUpdate().","attributes":{"type":"uses","at":[132,23,132,34]}},{"key":"geid_130_130","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#deleteItem().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_update.","attributes":{"type":"uses","at":[133,31,133,38]}},{"key":"geid_130_131","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#deleteItem().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#items.","attributes":{"type":"uses","at":[133,40,133,45]}},{"key":"geid_130_132","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#deleteItem().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_update.","attributes":{"type":"uses","at":[135,21,135,28]}},{"key":"geid_130_133","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#deleteItem().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#items.","attributes":{"type":"uses","at":[135,30,135,35]}},{"key":"geid_130_134","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#deleteItem().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#endUpdate().","attributes":{"type":"uses","at":[137,23,137,32]}},{"key":"geid_130_135","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#endUpdate().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_update.","attributes":{"type":"uses","at":[147,18,147,25]}},{"key":"geid_130_136","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#endUpdate().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/","attributes":{"type":"uses","at":[153,18,153,20]}},{"key":"geid_130_137","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#endUpdate().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/writeFile().","attributes":{"type":"uses","at":[153,21,153,30]}},{"key":"geid_130_138","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#endUpdate().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#","attributes":{"type":"uses","at":[153,31,153,35]}},{"key":"geid_130_139","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#endUpdate().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#join().","attributes":{"type":"uses","at":[153,36,153,40]}},{"key":"geid_130_140","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#endUpdate().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_folderPath.","attributes":{"type":"uses","at":[153,46,153,57]}},{"key":"geid_130_141","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#endUpdate().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_indexName.","attributes":{"type":"uses","at":[153,64,153,74]}},{"key":"geid_130_142","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#endUpdate().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_update.","attributes":{"type":"uses","at":[153,97,153,104]}},{"key":"geid_130_143","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#endUpdate().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_data.","attributes":{"type":"uses","at":[154,17,154,22]}},{"key":"geid_130_144","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#endUpdate().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_update.","attributes":{"type":"uses","at":[154,30,154,37]}},{"key":"geid_130_145","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#endUpdate().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_update.","attributes":{"type":"uses","at":[155,17,155,24]}},{"key":"geid_130_146","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#getIndexStats().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/IndexStats#","attributes":{"type":"uses","at":[165,42,165,52]}},{"key":"geid_130_147","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#getIndexStats().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#loadIndexData().","attributes":{"type":"uses","at":[166,19,166,32]}},{"key":"geid_130_148","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#getIndexStats().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_data.","attributes":{"type":"uses","at":[168,26,168,31]}},{"key":"geid_130_149","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#getIndexStats().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#version.","attributes":{"type":"uses","at":[168,33,168,40]}},{"key":"geid_130_150","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#getIndexStats().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_data.","attributes":{"type":"uses","at":[169,34,169,39]}},{"key":"geid_130_151","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#getIndexStats().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#metadata_config.","attributes":{"type":"uses","at":[169,41,169,56]}},{"key":"geid_130_152","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#getIndexStats().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_data.","attributes":{"type":"uses","at":[170,24,170,29]}},{"key":"geid_130_153","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#getIndexStats().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#items.","attributes":{"type":"uses","at":[170,31,170,36]}},{"key":"geid_130_154","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#getItem().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/MetadataTypes#","attributes":{"type":"uses","at":[179,51,179,64]}},{"key":"geid_130_155","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#getItem().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/IndexItem#","attributes":{"type":"uses","at":[179,88,179,97]}},{"key":"geid_130_156","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#getItem().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#getItem().[TMetadata]","attributes":{"type":"uses","at":[179,98,179,107]}},{"key":"geid_130_157","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#getItem().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#loadIndexData().","attributes":{"type":"uses","at":[180,19,180,32]}},{"key":"geid_130_158","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#getItem().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_data.","attributes":{"type":"uses","at":[181,20,181,25]}},{"key":"geid_130_159","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#getItem().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#items.","attributes":{"type":"uses","at":[181,27,181,32]}},{"key":"geid_130_160","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#insertItem().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/MetadataTypes#","attributes":{"type":"uses","at":[192,54,192,67]}},{"key":"geid_130_161","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#insertItem().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/IndexItem#","attributes":{"type":"uses","at":[192,84,192,93]}},{"key":"geid_130_162","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#insertItem().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#insertItem().[TMetadata]","attributes":{"type":"uses","at":[192,94,192,103]}},{"key":"geid_130_163","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#insertItem().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/IndexItem#","attributes":{"type":"uses","at":[192,116,192,125]}},{"key":"geid_130_164","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#insertItem().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#insertItem().[TMetadata]","attributes":{"type":"uses","at":[192,126,192,135]}},{"key":"geid_130_165","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#insertItem().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_update.","attributes":{"type":"uses","at":[193,17,193,24]}},{"key":"geid_130_166","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#insertItem().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#addItemToUpdate().","attributes":{"type":"uses","at":[194,30,194,45]}},{"key":"geid_130_167","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#insertItem().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#beginUpdate().","attributes":{"type":"uses","at":[196,23,196,34]}},{"key":"geid_130_168","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#insertItem().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#addItemToUpdate().","attributes":{"type":"uses","at":[197,39,197,54]}},{"key":"geid_130_169","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#insertItem().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#endUpdate().","attributes":{"type":"uses","at":[198,23,198,32]}},{"key":"geid_130_170","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#isIndexCreated().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/","attributes":{"type":"uses","at":[208,18,208,20]}},{"key":"geid_130_171","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#isIndexCreated().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/access().","attributes":{"type":"uses","at":[208,21,208,27]}},{"key":"geid_130_172","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#isIndexCreated().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#","attributes":{"type":"uses","at":[208,28,208,32]}},{"key":"geid_130_173","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#isIndexCreated().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#join().","attributes":{"type":"uses","at":[208,33,208,37]}},{"key":"geid_130_174","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#isIndexCreated().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_folderPath.","attributes":{"type":"uses","at":[208,43,208,54]}},{"key":"geid_130_175","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#isIndexCreated().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#`<get>indexName`().","attributes":{"type":"uses","at":[208,61,208,70]}},{"key":"geid_130_176","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#listItems().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/MetadataTypes#","attributes":{"type":"uses","at":[222,53,222,66]}},{"key":"geid_130_177","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#listItems().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/IndexItem#","attributes":{"type":"uses","at":[222,80,222,89]}},{"key":"geid_130_178","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#listItems().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#listItems().[TMetadata]","attributes":{"type":"uses","at":[222,90,222,99]}},{"key":"geid_130_179","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#listItems().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#loadIndexData().","attributes":{"type":"uses","at":[223,19,223,32]}},{"key":"geid_130_180","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#listItems().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_data.","attributes":{"type":"uses","at":[224,20,224,25]}},{"key":"geid_130_181","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#listItems().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#items.","attributes":{"type":"uses","at":[224,27,224,32]}},{"key":"geid_130_182","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#listItemsByMetadata().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/MetadataTypes#","attributes":{"type":"uses","at":[234,63,234,76]}},{"key":"geid_130_183","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#listItemsByMetadata().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/MetadataFilter#","attributes":{"type":"uses","at":[234,87,234,101]}},{"key":"geid_130_184","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#listItemsByMetadata().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/IndexItem#","attributes":{"type":"uses","at":[234,112,234,121]}},{"key":"geid_130_185","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#listItemsByMetadata().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#listItemsByMetadata().[TMetadata]","attributes":{"type":"uses","at":[234,122,234,131]}},{"key":"geid_130_186","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#listItemsByMetadata().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#loadIndexData().","attributes":{"type":"uses","at":[235,19,235,32]}},{"key":"geid_130_187","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#listItemsByMetadata().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_data.","attributes":{"type":"uses","at":[236,20,236,25]}},{"key":"geid_130_188","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#listItemsByMetadata().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#items.","attributes":{"type":"uses","at":[236,27,236,32]}},{"key":"geid_130_189","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#listItemsByMetadata().","target":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#","attributes":{"type":"uses","at":[236,45,236,57]}},{"key":"geid_130_190","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#listItemsByMetadata().","target":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#select().","attributes":{"type":"uses","at":[236,58,236,64]}},{"key":"geid_130_191","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#queryItems().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/MetadataTypes#","attributes":{"type":"uses","at":[249,54,249,67]}},{"key":"geid_130_192","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#queryItems().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/MetadataFilter#","attributes":{"type":"uses","at":[249,111,249,125]}},{"key":"geid_130_193","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#queryItems().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/QueryResult#","attributes":{"type":"uses","at":[249,136,249,147]}},{"key":"geid_130_194","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#queryItems().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#queryItems().[TMetadata]","attributes":{"type":"uses","at":[249,148,249,157]}},{"key":"geid_130_195","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#queryItems().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#loadIndexData().","attributes":{"type":"uses","at":[250,19,250,32]}},{"key":"geid_130_196","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#queryItems().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_data.","attributes":{"type":"uses","at":[253,25,253,30]}},{"key":"geid_130_197","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#queryItems().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#items.","attributes":{"type":"uses","at":[253,32,253,37]}},{"key":"geid_130_198","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#queryItems().","target":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#","attributes":{"type":"uses","at":[255,38,255,50]}},{"key":"geid_130_199","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#queryItems().","target":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#select().","attributes":{"type":"uses","at":[255,51,255,57]}},{"key":"geid_130_200","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#queryItems().","target":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#","attributes":{"type":"uses","at":[259,21,259,33]}},{"key":"geid_130_201","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#queryItems().","target":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#normalize().","attributes":{"type":"uses","at":[259,34,259,43]}},{"key":"geid_130_202","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#queryItems().","target":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#","attributes":{"type":"uses","at":[263,29,263,41]}},{"key":"geid_130_203","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#queryItems().","target":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#normalizedCosineSimilarity().","attributes":{"type":"uses","at":[263,42,263,68]}},{"key":"geid_130_204","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#queryItems().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/QueryResult#","attributes":{"type":"uses","at":[271,19,271,30]}},{"key":"geid_130_205","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#queryItems().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#queryItems().[TMetadata]","attributes":{"type":"uses","at":[271,31,271,40]}},{"key":"geid_130_206","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#queryItems().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#","attributes":{"type":"uses","at":[281,37,281,41]}},{"key":"geid_130_207","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#queryItems().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#join().","attributes":{"type":"uses","at":[281,42,281,46]}},{"key":"geid_130_208","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#queryItems().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_folderPath.","attributes":{"type":"uses","at":[281,52,281,63]}},{"key":"geid_130_209","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#queryItems().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/","attributes":{"type":"uses","at":[282,39,282,41]}},{"key":"geid_130_210","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#queryItems().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/readFile().","attributes":{"type":"uses","at":[282,42,282,50]}},{"key":"geid_130_211","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#upsertItem().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/MetadataTypes#","attributes":{"type":"uses","at":[298,54,298,67]}},{"key":"geid_130_212","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#upsertItem().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/IndexItem#","attributes":{"type":"uses","at":[298,84,298,93]}},{"key":"geid_130_213","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#upsertItem().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#upsertItem().[TMetadata]","attributes":{"type":"uses","at":[298,94,298,103]}},{"key":"geid_130_214","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#upsertItem().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/IndexItem#","attributes":{"type":"uses","at":[298,116,298,125]}},{"key":"geid_130_215","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#upsertItem().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#upsertItem().[TMetadata]","attributes":{"type":"uses","at":[298,126,298,135]}},{"key":"geid_130_216","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#upsertItem().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_update.","attributes":{"type":"uses","at":[299,17,299,24]}},{"key":"geid_130_217","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#upsertItem().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#addItemToUpdate().","attributes":{"type":"uses","at":[300,30,300,45]}},{"key":"geid_130_218","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#upsertItem().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#beginUpdate().","attributes":{"type":"uses","at":[302,23,302,34]}},{"key":"geid_130_219","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#upsertItem().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#addItemToUpdate().","attributes":{"type":"uses","at":[303,39,303,54]}},{"key":"geid_130_220","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#upsertItem().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#endUpdate().","attributes":{"type":"uses","at":[304,23,304,32]}},{"key":"geid_130_221","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#loadIndexData().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_data.","attributes":{"type":"uses","at":[313,17,313,22]}},{"key":"geid_130_222","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#loadIndexData().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#isIndexCreated().","attributes":{"type":"uses","at":[317,24,317,38]}},{"key":"geid_130_223","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#loadIndexData().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/","attributes":{"type":"uses","at":[321,27,321,29]}},{"key":"geid_130_224","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#loadIndexData().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/readFile().","attributes":{"type":"uses","at":[321,30,321,38]}},{"key":"geid_130_225","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#loadIndexData().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#","attributes":{"type":"uses","at":[321,39,321,43]}},{"key":"geid_130_226","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#loadIndexData().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#join().","attributes":{"type":"uses","at":[321,44,321,48]}},{"key":"geid_130_227","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#loadIndexData().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_folderPath.","attributes":{"type":"uses","at":[321,54,321,65]}},{"key":"geid_130_228","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#loadIndexData().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#`<get>indexName`().","attributes":{"type":"uses","at":[321,72,321,81]}},{"key":"geid_130_229","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#loadIndexData().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_data.","attributes":{"type":"uses","at":[322,13,322,18]}},{"key":"geid_130_230","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#addItemToUpdate().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/IndexItem#","attributes":{"type":"uses","at":[325,48,325,57]}},{"key":"geid_130_231","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#addItemToUpdate().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/IndexItem#","attributes":{"type":"uses","at":[325,91,325,100]}},{"key":"geid_130_232","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#addItemToUpdate().","target":"scip-typescript npm @types/uuid 9.0.7 `index.d.ts`/v4.","attributes":{"type":"uses","at":[332,30,332,32]}},{"key":"geid_130_233","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#addItemToUpdate().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_update.","attributes":{"type":"uses","at":[334,34,334,41]}},{"key":"geid_130_234","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#addItemToUpdate().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#items.","attributes":{"type":"uses","at":[334,43,334,48]}},{"key":"geid_130_235","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#addItemToUpdate().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_update.","attributes":{"type":"uses","at":[343,17,343,24]}},{"key":"geid_130_236","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#addItemToUpdate().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#metadata_config.","attributes":{"type":"uses","at":[343,26,343,41]}},{"key":"geid_130_237","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#addItemToUpdate().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#metadata_config.typeLiteral103:indexed.","attributes":{"type":"uses","at":[343,42,343,49]}},{"key":"geid_130_238","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#addItemToUpdate().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_update.","attributes":{"type":"uses","at":[343,58,343,65]}},{"key":"geid_130_239","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#addItemToUpdate().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#metadata_config.","attributes":{"type":"uses","at":[343,67,343,82]}},{"key":"geid_130_240","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#addItemToUpdate().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#metadata_config.typeLiteral103:indexed.","attributes":{"type":"uses","at":[343,83,343,90]}},{"key":"geid_130_241","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#addItemToUpdate().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_update.","attributes":{"type":"uses","at":[345,35,345,42]}},{"key":"geid_130_242","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#addItemToUpdate().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#metadata_config.","attributes":{"type":"uses","at":[345,44,345,59]}},{"key":"geid_130_243","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#addItemToUpdate().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#metadata_config.typeLiteral103:indexed.","attributes":{"type":"uses","at":[345,60,345,67]}},{"key":"geid_130_244","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#addItemToUpdate().","target":"scip-typescript npm @types/uuid 9.0.7 `index.d.ts`/v4.","attributes":{"type":"uses","at":[352,30,352,32]}},{"key":"geid_130_245","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#addItemToUpdate().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#","attributes":{"type":"uses","at":[353,33,353,37]}},{"key":"geid_130_246","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#addItemToUpdate().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#join().","attributes":{"type":"uses","at":[353,38,353,42]}},{"key":"geid_130_247","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#addItemToUpdate().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_folderPath.","attributes":{"type":"uses","at":[353,48,353,59]}},{"key":"geid_130_248","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#addItemToUpdate().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/","attributes":{"type":"uses","at":[354,18,354,20]}},{"key":"geid_130_249","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#addItemToUpdate().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/writeFile().","attributes":{"type":"uses","at":[354,21,354,30]}},{"key":"geid_130_250","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#addItemToUpdate().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/IndexItem#","attributes":{"type":"uses","at":[360,23,360,32]}},{"key":"geid_130_251","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#addItemToUpdate().","target":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#","attributes":{"type":"uses","at":[364,18,364,30]}},{"key":"geid_130_252","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#addItemToUpdate().","target":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/ItemSelector#normalize().","attributes":{"type":"uses","at":[364,31,364,40]}},{"key":"geid_130_253","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#addItemToUpdate().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/IndexItem#metadataFile.","attributes":{"type":"uses","at":[367,20,367,32]}},{"key":"geid_130_254","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#addItemToUpdate().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_update.","attributes":{"type":"uses","at":[372,34,372,41]}},{"key":"geid_130_255","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#addItemToUpdate().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#items.","attributes":{"type":"uses","at":[372,43,372,48]}},{"key":"geid_130_256","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#addItemToUpdate().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/IndexItem#metadata.","attributes":{"type":"uses","at":[374,44,374,52]}},{"key":"geid_130_257","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#addItemToUpdate().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/IndexItem#vector.","attributes":{"type":"uses","at":[375,42,375,48]}},{"key":"geid_130_258","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#addItemToUpdate().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/IndexItem#metadataFile.","attributes":{"type":"uses","at":[376,48,376,60]}},{"key":"geid_130_259","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#addItemToUpdate().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_update.","attributes":{"type":"uses","at":[379,21,379,28]}},{"key":"geid_130_260","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#addItemToUpdate().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#items.","attributes":{"type":"uses","at":[379,30,379,35]}},{"key":"geid_130_261","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#addItemToUpdate().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#_update.","attributes":{"type":"uses","at":[383,17,383,24]}},{"key":"geid_130_262","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#addItemToUpdate().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#items.","attributes":{"type":"uses","at":[383,26,383,31]}},{"key":"geid_130_263","source":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/IndexData#","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/IndexItem#","attributes":{"type":"uses","at":[394,11,394,20]}},{"key":"geid_130_264","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#getSeparators().","attributes":{"type":"defines","at":[200,4,563,5]}},{"key":"geid_130_265","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#splitBySpaces().","attributes":{"type":"defines","at":[178,4,198,5]}},{"key":"geid_130_266","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#containsAlphanumeric().","attributes":{"type":"defines","at":[169,4,176,5]}},{"key":"geid_130_267","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#combineChunks().","attributes":{"type":"defines","at":[140,4,167,5]}},{"key":"geid_130_268","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#recursiveSplit().","attributes":{"type":"defines","at":[72,4,138,5]}},{"key":"geid_130_269","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#split().","attributes":{"type":"defines","at":[44,4,70,5]}},{"key":"geid_130_270","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#","attributes":{"type":"defines","at":[14,0,564,1]}},{"key":"geid_130_271","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#","attributes":{"type":"defines","at":[5,0,12,1]}},{"key":"geid_130_272","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`GPT3Tokenizer.ts`/GPT3Tokenizer#","attributes":{"type":"uses","at":[0,9,0,22]}},{"key":"geid_130_273","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`GPT3Tokenizer.ts`/","attributes":{"type":"uses","at":[0,30,0,47]}},{"key":"geid_130_274","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/TextChunk#","attributes":{"type":"uses","at":[1,9,1,18]}},{"key":"geid_130_275","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/Tokenizer#","attributes":{"type":"uses","at":[1,20,1,29]}},{"key":"geid_130_276","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/","attributes":{"type":"uses","at":[1,37,1,46]}},{"key":"geid_130_277","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/Tokenizer#","attributes":{"type":"uses","at":[10,15,10,24]}},{"key":"geid_130_278","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#","attributes":{"type":"uses","at":[15,30,15,48]}},{"key":"geid_130_279","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#","attributes":{"type":"uses","at":[17,40,17,58]}},{"key":"geid_130_280","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#_config.","attributes":{"type":"uses","at":[18,13,18,20]}},{"key":"geid_130_281","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#","attributes":{"type":"uses","at":[22,13,22,31]}},{"key":"geid_130_282","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#_config.","attributes":{"type":"uses","at":[25,18,25,25]}},{"key":"geid_130_283","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#tokenizer.","attributes":{"type":"uses","at":[25,26,25,35]}},{"key":"geid_130_284","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#_config.","attributes":{"type":"uses","at":[26,17,26,24]}},{"key":"geid_130_285","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#tokenizer.","attributes":{"type":"uses","at":[26,25,26,34]}},{"key":"geid_130_286","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#","target":"scip-typescript npm vectra 0.5.5 src/`GPT3Tokenizer.ts`/GPT3Tokenizer#","attributes":{"type":"uses","at":[26,41,26,54]}},{"key":"geid_130_287","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#_config.","attributes":{"type":"uses","at":[30,18,30,25]}},{"key":"geid_130_288","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#separators.","attributes":{"type":"uses","at":[30,26,30,36]}},{"key":"geid_130_289","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#_config.","attributes":{"type":"uses","at":[30,45,30,52]}},{"key":"geid_130_290","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#separators.","attributes":{"type":"uses","at":[30,53,30,63]}},{"key":"geid_130_291","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#_config.","attributes":{"type":"uses","at":[31,17,31,24]}},{"key":"geid_130_292","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#separators.","attributes":{"type":"uses","at":[31,25,31,35]}},{"key":"geid_130_293","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#getSeparators().","attributes":{"type":"uses","at":[31,43,31,56]}},{"key":"geid_130_294","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#_config.","attributes":{"type":"uses","at":[31,62,31,69]}},{"key":"geid_130_295","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#docType.","attributes":{"type":"uses","at":[31,70,31,77]}},{"key":"geid_130_296","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#_config.","attributes":{"type":"uses","at":[35,17,35,24]}},{"key":"geid_130_297","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#chunkSize.","attributes":{"type":"uses","at":[35,25,35,34]}},{"key":"geid_130_298","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#_config.","attributes":{"type":"uses","at":[37,24,37,31]}},{"key":"geid_130_299","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#chunkOverlap.","attributes":{"type":"uses","at":[37,32,37,44]}},{"key":"geid_130_300","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#_config.","attributes":{"type":"uses","at":[39,24,39,31]}},{"key":"geid_130_301","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#chunkOverlap.","attributes":{"type":"uses","at":[39,32,39,44]}},{"key":"geid_130_302","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#_config.","attributes":{"type":"uses","at":[39,52,39,59]}},{"key":"geid_130_303","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#chunkSize.","attributes":{"type":"uses","at":[39,60,39,69]}},{"key":"geid_130_304","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#split().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/TextChunk#","attributes":{"type":"uses","at":[44,32,44,41]}},{"key":"geid_130_305","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#split().","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#recursiveSplit().","attributes":{"type":"uses","at":[46,28,46,42]}},{"key":"geid_130_306","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#split().","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#_config.","attributes":{"type":"uses","at":[46,54,46,61]}},{"key":"geid_130_307","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#split().","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#separators.","attributes":{"type":"uses","at":[46,62,46,72]}},{"key":"geid_130_308","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#split().","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#_config.","attributes":{"type":"uses","at":[51,49,51,56]}},{"key":"geid_130_309","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#split().","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#chunkOverlap.","attributes":{"type":"uses","at":[51,57,51,69]}},{"key":"geid_130_310","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#split().","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#_config.","attributes":{"type":"uses","at":[51,77,51,84]}},{"key":"geid_130_311","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#split().","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#chunkOverlap.","attributes":{"type":"uses","at":[51,85,51,97]}},{"key":"geid_130_312","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#split().","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#_config.","attributes":{"type":"uses","at":[59,17,59,24]}},{"key":"geid_130_313","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#split().","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#chunkOverlap.","attributes":{"type":"uses","at":[59,25,59,37]}},{"key":"geid_130_314","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#recursiveSplit().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/TextChunk#","attributes":{"type":"uses","at":[72,82,72,91]}},{"key":"geid_130_315","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#recursiveSplit().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/TextChunk#","attributes":{"type":"uses","at":[73,22,73,31]}},{"key":"geid_130_316","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#recursiveSplit().","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#splitBySpaces().","attributes":{"type":"uses","at":[82,48,82,61]}},{"key":"geid_130_317","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#recursiveSplit().","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#_config.","attributes":{"type":"uses","at":[96,25,96,32]}},{"key":"geid_130_318","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#recursiveSplit().","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#keepSeparators.","attributes":{"type":"uses","at":[96,33,96,47]}},{"key":"geid_130_319","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#recursiveSplit().","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#containsAlphanumeric().","attributes":{"type":"uses","at":[101,26,101,46]}},{"key":"geid_130_320","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#recursiveSplit().","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#_config.","attributes":{"type":"uses","at":[106,44,106,51]}},{"key":"geid_130_321","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#recursiveSplit().","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#chunkSize.","attributes":{"type":"uses","at":[106,52,106,61]}},{"key":"geid_130_322","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#recursiveSplit().","attributes":{"type":"uses","at":[108,43,108,57]}},{"key":"geid_130_323","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#recursiveSplit().","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#_config.","attributes":{"type":"uses","at":[112,40,112,47]}},{"key":"geid_130_324","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#recursiveSplit().","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#tokenizer.","attributes":{"type":"uses","at":[112,48,112,57]}},{"key":"geid_130_325","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#recursiveSplit().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/Tokenizer#encode().","attributes":{"type":"uses","at":[112,58,112,64]}},{"key":"geid_130_326","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#recursiveSplit().","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#_config.","attributes":{"type":"uses","at":[113,45,113,52]}},{"key":"geid_130_327","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#recursiveSplit().","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#chunkSize.","attributes":{"type":"uses","at":[113,53,113,62]}},{"key":"geid_130_328","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#recursiveSplit().","attributes":{"type":"uses","at":[115,47,115,61]}},{"key":"geid_130_329","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#recursiveSplit().","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#combineChunks().","attributes":{"type":"uses","at":[137,20,137,33]}},{"key":"geid_130_330","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#combineChunks().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/TextChunk#","attributes":{"type":"uses","at":[140,34,140,43]}},{"key":"geid_130_331","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#combineChunks().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/TextChunk#","attributes":{"type":"uses","at":[140,48,140,57]}},{"key":"geid_130_332","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#combineChunks().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/TextChunk#","attributes":{"type":"uses","at":[141,30,141,39]}},{"key":"geid_130_333","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#combineChunks().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/TextChunk#","attributes":{"type":"uses","at":[142,26,142,35]}},{"key":"geid_130_334","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#combineChunks().","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#_config.","attributes":{"type":"uses","at":[144,31,144,38]}},{"key":"geid_130_335","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#combineChunks().","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#keepSeparators.","attributes":{"type":"uses","at":[144,39,144,53]}},{"key":"geid_130_336","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#combineChunks().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/TextChunk#tokens.","attributes":{"type":"uses","at":[148,44,148,50]}},{"key":"geid_130_337","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#combineChunks().","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#_config.","attributes":{"type":"uses","at":[149,34,149,41]}},{"key":"geid_130_338","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#combineChunks().","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#chunkSize.","attributes":{"type":"uses","at":[149,42,149,51]}},{"key":"geid_130_339","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#combineChunks().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/TextChunk#text.","attributes":{"type":"uses","at":[154,33,154,37]}},{"key":"geid_130_340","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#combineChunks().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/TextChunk#tokens.","attributes":{"type":"uses","at":[155,33,155,39]}},{"key":"geid_130_341","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#containsAlphanumeric().","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/ALPHANUMERIC_CHARS.","attributes":{"type":"uses","at":[171,16,171,34]}},{"key":"geid_130_342","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#splitBySpaces().","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#_config.","attributes":{"type":"uses","at":[185,25,185,32]}},{"key":"geid_130_343","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#splitBySpaces().","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#tokenizer.","attributes":{"type":"uses","at":[185,33,185,42]}},{"key":"geid_130_344","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#splitBySpaces().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/Tokenizer#encode().","attributes":{"type":"uses","at":[185,43,185,49]}},{"key":"geid_130_345","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#splitBySpaces().","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#_config.","attributes":{"type":"uses","at":[185,88,185,95]}},{"key":"geid_130_346","source":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#splitBySpaces().","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#chunkSize.","attributes":{"type":"uses","at":[185,96,185,105]}},{"key":"geid_130_347","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#loadText().","attributes":{"type":"defines","at":[57,4,67,5]}},{"key":"geid_130_348","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#loadMetadata().","attributes":{"type":"defines","at":[38,4,55,5]}},{"key":"geid_130_349","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#hasMetadata().","attributes":{"type":"defines","at":[29,4,36,5]}},{"key":"geid_130_350","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#","attributes":{"type":"defines","at":[4,0,69,1]}},{"key":"geid_130_351","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/","attributes":{"type":"uses","at":[0,12,0,14]}},{"key":"geid_130_352","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/","attributes":{"type":"uses","at":[0,20,0,33]}},{"key":"geid_130_353","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/","attributes":{"type":"uses","at":[1,12,1,16]}},{"key":"geid_130_354","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path.","attributes":{"type":"uses","at":[1,12,1,16]}},{"key":"geid_130_355","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/","attributes":{"type":"uses","at":[1,22,1,28]}},{"key":"geid_130_356","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/MetadataTypes#","attributes":{"type":"uses","at":[2,9,2,22]}},{"key":"geid_130_357","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/","attributes":{"type":"uses","at":[2,30,2,39]}},{"key":"geid_130_358","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/MetadataTypes#","attributes":{"type":"uses","at":[8,37,8,50]}},{"key":"geid_130_359","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#_folderPath.","attributes":{"type":"uses","at":[12,13,12,24]}},{"key":"geid_130_360","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#_id.","attributes":{"type":"uses","at":[13,13,13,16]}},{"key":"geid_130_361","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#_uri.","attributes":{"type":"uses","at":[14,13,14,17]}},{"key":"geid_130_362","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#_folderPath.","attributes":{"type":"uses","at":[18,20,18,31]}},{"key":"geid_130_363","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#_id.","attributes":{"type":"uses","at":[22,20,22,23]}},{"key":"geid_130_364","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#_uri.","attributes":{"type":"uses","at":[26,20,26,24]}},{"key":"geid_130_365","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#hasMetadata().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/","attributes":{"type":"uses","at":[31,18,31,20]}},{"key":"geid_130_366","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#hasMetadata().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/access().","attributes":{"type":"uses","at":[31,21,31,27]}},{"key":"geid_130_367","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#hasMetadata().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#","attributes":{"type":"uses","at":[31,28,31,32]}},{"key":"geid_130_368","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#hasMetadata().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#join().","attributes":{"type":"uses","at":[31,33,31,37]}},{"key":"geid_130_369","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#hasMetadata().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#`<get>folderPath`().","attributes":{"type":"uses","at":[31,43,31,53]}},{"key":"geid_130_370","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#hasMetadata().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#`<get>id`().","attributes":{"type":"uses","at":[31,63,31,65]}},{"key":"geid_130_371","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#loadMetadata().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/MetadataTypes#","attributes":{"type":"uses","at":[38,55,38,68]}},{"key":"geid_130_372","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#loadMetadata().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#_metadata.","attributes":{"type":"uses","at":[39,17,39,26]}},{"key":"geid_130_373","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#loadMetadata().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/","attributes":{"type":"uses","at":[42,30,42,32]}},{"key":"geid_130_374","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#loadMetadata().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/readFile().","attributes":{"type":"uses","at":[42,33,42,41]}},{"key":"geid_130_375","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#loadMetadata().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#","attributes":{"type":"uses","at":[42,42,42,46]}},{"key":"geid_130_376","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#loadMetadata().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#join().","attributes":{"type":"uses","at":[42,47,42,51]}},{"key":"geid_130_377","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#loadMetadata().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#`<get>folderPath`().","attributes":{"type":"uses","at":[42,57,42,67]}},{"key":"geid_130_378","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#loadMetadata().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#`<get>id`().","attributes":{"type":"uses","at":[42,77,42,79]}},{"key":"geid_130_379","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#loadMetadata().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#`<get>uri`().","attributes":{"type":"uses","at":[44,77,44,80]}},{"key":"geid_130_380","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#loadMetadata().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#_metadata.","attributes":{"type":"uses","at":[48,21,48,30]}},{"key":"geid_130_381","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#loadMetadata().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#`<get>uri`().","attributes":{"type":"uses","at":[50,77,50,80]}},{"key":"geid_130_382","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#loadMetadata().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#_metadata.","attributes":{"type":"uses","at":[54,20,54,29]}},{"key":"geid_130_383","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#loadText().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#_text.","attributes":{"type":"uses","at":[58,17,58,22]}},{"key":"geid_130_384","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#loadText().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#_text.","attributes":{"type":"uses","at":[60,21,60,26]}},{"key":"geid_130_385","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#loadText().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/","attributes":{"type":"uses","at":[60,36,60,38]}},{"key":"geid_130_386","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#loadText().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/readFile().","attributes":{"type":"uses","at":[60,39,60,47]}},{"key":"geid_130_387","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#loadText().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#","attributes":{"type":"uses","at":[60,48,60,52]}},{"key":"geid_130_388","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#loadText().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#join().","attributes":{"type":"uses","at":[60,53,60,57]}},{"key":"geid_130_389","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#loadText().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#`<get>folderPath`().","attributes":{"type":"uses","at":[60,63,60,73]}},{"key":"geid_130_390","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#loadText().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#`<get>id`().","attributes":{"type":"uses","at":[60,83,60,85]}},{"key":"geid_130_391","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#loadText().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#`<get>uri`().","attributes":{"type":"uses","at":[62,78,62,81]}},{"key":"geid_130_392","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#loadText().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#_text.","attributes":{"type":"uses","at":[66,20,66,25]}},{"key":"geid_130_393","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/Section#","attributes":{"type":"defines","at":[217,0,221,1]}},{"key":"geid_130_394","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/SectionChunk#","attributes":{"type":"defines","at":[209,0,215,1]}},{"key":"geid_130_395","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#encodeAfterText().","attributes":{"type":"defines","at":[201,4,205,5]}},{"key":"geid_130_396","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#encodeBeforeText().","attributes":{"type":"defines","at":[195,4,199,5]}},{"key":"geid_130_397","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#renderSections().","attributes":{"type":"defines","at":[27,4,193,5]}},{"key":"geid_130_398","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#","attributes":{"type":"defines","at":[3,0,207,1]}},{"key":"geid_130_399","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#","attributes":{"type":"uses","at":[0,9,0,22]}},{"key":"geid_130_400","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/","attributes":{"type":"uses","at":[0,30,0,47]}},{"key":"geid_130_401","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/QueryResult#","attributes":{"type":"uses","at":[1,9,1,20]}},{"key":"geid_130_402","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/DocumentChunkMetadata#","attributes":{"type":"uses","at":[1,22,1,43]}},{"key":"geid_130_403","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/Tokenizer#","attributes":{"type":"uses","at":[1,45,1,54]}},{"key":"geid_130_404","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/DocumentTextSection#","attributes":{"type":"uses","at":[1,56,1,75]}},{"key":"geid_130_405","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/","attributes":{"type":"uses","at":[1,83,1,92]}},{"key":"geid_130_406","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#","attributes":{"type":"uses","at":[3,41,3,54]}},{"key":"geid_130_407","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/QueryResult#","attributes":{"type":"uses","at":[4,30,4,41]}},{"key":"geid_130_408","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/DocumentChunkMetadata#","attributes":{"type":"uses","at":[4,42,4,63]}},{"key":"geid_130_409","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/Tokenizer#","attributes":{"type":"uses","at":[5,33,5,42]}},{"key":"geid_130_410","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/QueryResult#","attributes":{"type":"uses","at":[8,76,8,87]}},{"key":"geid_130_411","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/DocumentChunkMetadata#","attributes":{"type":"uses","at":[8,88,8,109]}},{"key":"geid_130_412","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/Tokenizer#","attributes":{"type":"uses","at":[8,125,8,134]}},{"key":"geid_130_413","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#_chunks.","attributes":{"type":"uses","at":[10,13,10,20]}},{"key":"geid_130_414","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#_tokenizer.","attributes":{"type":"uses","at":[11,13,11,23]}},{"key":"geid_130_415","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#_chunks.","attributes":{"type":"uses","at":[15,13,15,20]}},{"key":"geid_130_416","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#_score.","attributes":{"type":"uses","at":[16,13,16,19]}},{"key":"geid_130_417","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#_chunks.","attributes":{"type":"uses","at":[16,35,16,42]}},{"key":"geid_130_418","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/QueryResult#","attributes":{"type":"uses","at":[19,25,19,36]}},{"key":"geid_130_419","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/DocumentChunkMetadata#","attributes":{"type":"uses","at":[19,37,19,58]}},{"key":"geid_130_420","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#_chunks.","attributes":{"type":"uses","at":[20,20,20,27]}},{"key":"geid_130_421","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#_score.","attributes":{"type":"uses","at":[24,20,24,26]}},{"key":"geid_130_422","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#renderSections().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/DocumentTextSection#","attributes":{"type":"uses","at":[27,107,27,126]}},{"key":"geid_130_423","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#renderSections().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#loadText().","attributes":{"type":"uses","at":[29,32,29,40]}},{"key":"geid_130_424","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#renderSections().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#_tokenizer.","attributes":{"type":"uses","at":[33,32,33,42]}},{"key":"geid_130_425","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#renderSections().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/Tokenizer#encode().","attributes":{"type":"uses","at":[33,43,33,49]}},{"key":"geid_130_426","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#renderSections().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/SectionChunk#","attributes":{"type":"uses","at":[51,22,51,34]}},{"key":"geid_130_427","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#renderSections().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#_chunks.","attributes":{"type":"uses","at":[51,44,51,51]}},{"key":"geid_130_428","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#renderSections().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#_tokenizer.","attributes":{"type":"uses","at":[60,33,60,43]}},{"key":"geid_130_429","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#renderSections().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/Tokenizer#encode().","attributes":{"type":"uses","at":[60,44,60,50]}},{"key":"geid_130_430","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#renderSections().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#_chunks.","attributes":{"type":"uses","at":[67,34,67,41]}},{"key":"geid_130_431","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#renderSections().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#_tokenizer.","attributes":{"type":"uses","at":[71,32,71,42]}},{"key":"geid_130_432","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#renderSections().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/Tokenizer#encode().","attributes":{"type":"uses","at":[71,43,71,49]}},{"key":"geid_130_433","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#renderSections().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#_tokenizer.","attributes":{"type":"uses","at":[73,27,73,37]}},{"key":"geid_130_434","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#renderSections().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/Tokenizer#decode().","attributes":{"type":"uses","at":[73,38,73,44]}},{"key":"geid_130_435","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#renderSections().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/Section#","attributes":{"type":"uses","at":[80,24,80,31]}},{"key":"geid_130_436","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#renderSections().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/SectionChunk#","attributes":{"type":"uses","at":[126,29,126,41]}},{"key":"geid_130_437","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#renderSections().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#_tokenizer.","attributes":{"type":"uses","at":[131,33,131,43]}},{"key":"geid_130_438","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#renderSections().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/Tokenizer#encode().","attributes":{"type":"uses","at":[131,44,131,50]}},{"key":"geid_130_439","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#renderSections().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/SectionChunk#tokenCount.","attributes":{"type":"uses","at":[138,56,138,66]}},{"key":"geid_130_440","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#renderSections().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#encodeBeforeText().","attributes":{"type":"uses","at":[150,50,150,66]}},{"key":"geid_130_441","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#renderSections().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/SectionChunk#","attributes":{"type":"uses","at":[152,37,152,49]}},{"key":"geid_130_442","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#renderSections().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#_tokenizer.","attributes":{"type":"uses","at":[153,39,153,49]}},{"key":"geid_130_443","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#renderSections().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/Tokenizer#decode().","attributes":{"type":"uses","at":[153,50,153,56]}},{"key":"geid_130_444","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#renderSections().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/SectionChunk#tokenCount.","attributes":{"type":"uses","at":[160,52,160,62]}},{"key":"geid_130_445","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#renderSections().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/SectionChunk#tokenCount.","attributes":{"type":"uses","at":[161,40,161,50]}},{"key":"geid_130_446","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#renderSections().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#encodeAfterText().","attributes":{"type":"uses","at":[166,49,166,64]}},{"key":"geid_130_447","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#renderSections().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/SectionChunk#","attributes":{"type":"uses","at":[168,37,168,49]}},{"key":"geid_130_448","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#renderSections().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#_tokenizer.","attributes":{"type":"uses","at":[169,39,169,49]}},{"key":"geid_130_449","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#renderSections().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/Tokenizer#decode().","attributes":{"type":"uses","at":[169,50,169,56]}},{"key":"geid_130_450","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#renderSections().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/SectionChunk#tokenCount.","attributes":{"type":"uses","at":[176,52,176,62]}},{"key":"geid_130_451","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#renderSections().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/SectionChunk#tokenCount.","attributes":{"type":"uses","at":[177,40,177,50]}},{"key":"geid_130_452","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#encodeBeforeText().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#_tokenizer.","attributes":{"type":"uses","at":[198,20,198,30]}},{"key":"geid_130_453","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#encodeBeforeText().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/Tokenizer#encode().","attributes":{"type":"uses","at":[198,31,198,37]}},{"key":"geid_130_454","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#encodeAfterText().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#_tokenizer.","attributes":{"type":"uses","at":[204,20,204,30]}},{"key":"geid_130_455","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#encodeAfterText().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/Tokenizer#encode().","attributes":{"type":"uses","at":[204,31,204,37]}},{"key":"geid_130_456","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/Section#","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/SectionChunk#","attributes":{"type":"uses","at":[218,12,218,24]}},{"key":"geid_130_457","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/DocumentCatalog#","attributes":{"type":"defines","at":[356,0,361,1]}},{"key":"geid_130_458","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#loadIndexData().","attributes":{"type":"defines","at":[327,4,353,5]}},{"key":"geid_130_459","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#endUpdate().","attributes":{"type":"defines","at":[314,4,325,5]}},{"key":"geid_130_460","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#cancelUpdate().","attributes":{"type":"defines","at":[309,4,312,5]}},{"key":"geid_130_461","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#beginUpdate().","attributes":{"type":"defines","at":[304,4,307,5]}},{"key":"geid_130_462","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#queryDocuments().","attributes":{"type":"defines","at":[251,4,300,5]}},{"key":"geid_130_463","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#upsertDocument().","attributes":{"type":"defines","at":[137,4,248,5]}},{"key":"geid_130_464","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#getCatalogStats().","attributes":{"type":"defines","at":[116,4,124,5]}},{"key":"geid_130_465","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#deleteDocument().","attributes":{"type":"defines","at":[70,4,114,5]}},{"key":"geid_130_466","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#createIndex().","attributes":{"type":"defines","at":[65,4,68,5]}},{"key":"geid_130_467","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#getDocumentUri().","attributes":{"type":"defines","at":[60,4,63,5]}},{"key":"geid_130_468","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#getDocumentId().","attributes":{"type":"defines","at":[55,4,58,5]}},{"key":"geid_130_469","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#isCatalogCreated().","attributes":{"type":"defines","at":[46,4,53,5]}},{"key":"geid_130_470","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#","attributes":{"type":"defines","at":[23,0,354,1]}},{"key":"geid_130_471","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndexConfig#","attributes":{"type":"defines","at":[16,0,21,1]}},{"key":"geid_130_472","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/DocumentQueryOptions#","attributes":{"type":"defines","at":[10,0,14,1]}},{"key":"geid_130_473","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/","attributes":{"type":"uses","at":[0,12,0,14]}},{"key":"geid_130_474","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/","attributes":{"type":"uses","at":[0,20,0,33]}},{"key":"geid_130_475","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/","attributes":{"type":"uses","at":[1,12,1,16]}},{"key":"geid_130_476","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path.","attributes":{"type":"uses","at":[1,12,1,16]}},{"key":"geid_130_477","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/","attributes":{"type":"uses","at":[1,22,1,28]}},{"key":"geid_130_478","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/","target":"scip-typescript npm @types/uuid 9.0.7 `index.d.ts`/v4.","attributes":{"type":"uses","at":[2,9,2,11]}},{"key":"geid_130_479","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/","target":"scip-typescript npm @types/uuid 9.0.7 `index.d.ts`/","attributes":{"type":"uses","at":[2,19,2,25]}},{"key":"geid_130_480","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`GPT3Tokenizer.ts`/GPT3Tokenizer#","attributes":{"type":"uses","at":[3,9,3,22]}},{"key":"geid_130_481","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`GPT3Tokenizer.ts`/","attributes":{"type":"uses","at":[3,30,3,47]}},{"key":"geid_130_482","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/CreateIndexConfig#","attributes":{"type":"uses","at":[4,9,4,26]}},{"key":"geid_130_483","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#","attributes":{"type":"uses","at":[4,28,4,38]}},{"key":"geid_130_484","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/","attributes":{"type":"uses","at":[4,46,4,60]}},{"key":"geid_130_485","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#","attributes":{"type":"uses","at":[5,9,5,21]}},{"key":"geid_130_486","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#","attributes":{"type":"uses","at":[5,23,5,41]}},{"key":"geid_130_487","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/","attributes":{"type":"uses","at":[5,49,5,65]}},{"key":"geid_130_488","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/MetadataFilter#","attributes":{"type":"uses","at":[6,9,6,23]}},{"key":"geid_130_489","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/EmbeddingsModel#","attributes":{"type":"uses","at":[6,25,6,40]}},{"key":"geid_130_490","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/Tokenizer#","attributes":{"type":"uses","at":[6,42,6,51]}},{"key":"geid_130_491","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/MetadataTypes#","attributes":{"type":"uses","at":[6,53,6,66]}},{"key":"geid_130_492","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/EmbeddingsResponse#","attributes":{"type":"uses","at":[6,68,6,86]}},{"key":"geid_130_493","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/QueryResult#","attributes":{"type":"uses","at":[6,88,6,99]}},{"key":"geid_130_494","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/DocumentChunkMetadata#","attributes":{"type":"uses","at":[6,101,6,122]}},{"key":"geid_130_495","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/DocumentCatalogStats#","attributes":{"type":"uses","at":[6,124,6,144]}},{"key":"geid_130_496","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/","attributes":{"type":"uses","at":[6,152,6,161]}},{"key":"geid_130_497","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#","attributes":{"type":"uses","at":[7,9,7,28]}},{"key":"geid_130_498","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/","attributes":{"type":"uses","at":[7,36,7,59]}},{"key":"geid_130_499","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#","attributes":{"type":"uses","at":[8,9,8,22]}},{"key":"geid_130_500","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/","attributes":{"type":"uses","at":[8,30,8,47]}},{"key":"geid_130_501","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/DocumentQueryOptions#","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/MetadataFilter#","attributes":{"type":"uses","at":[13,13,13,27]}},{"key":"geid_130_502","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndexConfig#","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/EmbeddingsModel#","attributes":{"type":"uses","at":[18,17,18,32]}},{"key":"geid_130_503","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndexConfig#","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/Tokenizer#","attributes":{"type":"uses","at":[19,16,19,25]}},{"key":"geid_130_504","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndexConfig#","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#","attributes":{"type":"uses","at":[20,29,20,47]}},{"key":"geid_130_505","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#","attributes":{"type":"uses","at":[23,40,23,50]}},{"key":"geid_130_506","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/EmbeddingsModel#","attributes":{"type":"uses","at":[24,35,24,50]}},{"key":"geid_130_507","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/Tokenizer#","attributes":{"type":"uses","at":[25,33,25,42]}},{"key":"geid_130_508","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#","attributes":{"type":"uses","at":[26,39,26,57]}},{"key":"geid_130_509","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/DocumentCatalog#","attributes":{"type":"uses","at":[27,23,27,38]}},{"key":"geid_130_510","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/DocumentCatalog#","attributes":{"type":"uses","at":[28,26,28,41]}},{"key":"geid_130_511","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndexConfig#","attributes":{"type":"uses","at":[31,31,31,55]}},{"key":"geid_130_512","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndexConfig#folderPath.","attributes":{"type":"uses","at":[32,21,32,31]}},{"key":"geid_130_513","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_embeddings.","attributes":{"type":"uses","at":[33,13,33,24]}},{"key":"geid_130_514","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndexConfig#embeddings.","attributes":{"type":"uses","at":[33,34,33,44]}},{"key":"geid_130_515","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_chunkingConfig.","attributes":{"type":"uses","at":[34,13,34,28]}},{"key":"geid_130_516","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#","attributes":{"type":"uses","at":[38,13,38,31]}},{"key":"geid_130_517","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndexConfig#chunkingConfig.","attributes":{"type":"uses","at":[38,40,38,54]}},{"key":"geid_130_518","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_tokenizer.","attributes":{"type":"uses","at":[39,13,39,23]}},{"key":"geid_130_519","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndexConfig#tokenizer.","attributes":{"type":"uses","at":[39,33,39,42]}},{"key":"geid_130_520","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_chunkingConfig.","attributes":{"type":"uses","at":[39,51,39,66]}},{"key":"geid_130_521","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#tokenizer.","attributes":{"type":"uses","at":[39,67,39,76]}},{"key":"geid_130_522","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#","target":"scip-typescript npm vectra 0.5.5 src/`GPT3Tokenizer.ts`/GPT3Tokenizer#","attributes":{"type":"uses","at":[39,84,39,97]}},{"key":"geid_130_523","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_chunkingConfig.","attributes":{"type":"uses","at":[40,13,40,28]}},{"key":"geid_130_524","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitterConfig#tokenizer.","attributes":{"type":"uses","at":[40,29,40,38]}},{"key":"geid_130_525","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_tokenizer.","attributes":{"type":"uses","at":[40,46,40,56]}},{"key":"geid_130_526","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#isCatalogCreated().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/","attributes":{"type":"uses","at":[48,18,48,20]}},{"key":"geid_130_527","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#isCatalogCreated().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/access().","attributes":{"type":"uses","at":[48,21,48,27]}},{"key":"geid_130_528","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#isCatalogCreated().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#","attributes":{"type":"uses","at":[48,28,48,32]}},{"key":"geid_130_529","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#isCatalogCreated().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#join().","attributes":{"type":"uses","at":[48,33,48,37]}},{"key":"geid_130_530","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#isCatalogCreated().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#`<get>folderPath`().","attributes":{"type":"uses","at":[48,43,48,53]}},{"key":"geid_130_531","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#getDocumentId().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#loadIndexData().","attributes":{"type":"uses","at":[56,19,56,32]}},{"key":"geid_130_532","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#getDocumentId().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_catalog.","attributes":{"type":"uses","at":[57,20,57,28]}},{"key":"geid_130_533","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#getDocumentId().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/DocumentCatalog#uriToId.","attributes":{"type":"uses","at":[57,30,57,37]}},{"key":"geid_130_534","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#getDocumentUri().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#loadIndexData().","attributes":{"type":"uses","at":[61,19,61,32]}},{"key":"geid_130_535","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#getDocumentUri().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_catalog.","attributes":{"type":"uses","at":[62,20,62,28]}},{"key":"geid_130_536","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#getDocumentUri().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/DocumentCatalog#idToUri.","attributes":{"type":"uses","at":[62,30,62,37]}},{"key":"geid_130_537","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#createIndex().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/CreateIndexConfig#","attributes":{"type":"uses","at":[65,38,65,55]}},{"key":"geid_130_538","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#createIndex().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#createIndex().","attributes":{"type":"uses","at":[66,20,66,31]}},{"key":"geid_130_539","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#createIndex().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#loadIndexData().","attributes":{"type":"uses","at":[67,19,67,32]}},{"key":"geid_130_540","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#deleteDocument().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#getDocumentId().","attributes":{"type":"uses","at":[72,38,72,51]}},{"key":"geid_130_541","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#deleteDocument().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#beginUpdate().","attributes":{"type":"uses","at":[78,19,78,30]}},{"key":"geid_130_542","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#deleteDocument().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#listItemsByMetadata().","attributes":{"type":"uses","at":[81,38,81,57]}},{"key":"geid_130_543","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#deleteDocument().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/DocumentChunkMetadata#","attributes":{"type":"uses","at":[81,58,81,79]}},{"key":"geid_130_544","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#deleteDocument().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#deleteItem().","attributes":{"type":"uses","at":[85,27,85,37]}},{"key":"geid_130_545","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#deleteDocument().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_newCatalog.","attributes":{"type":"uses","at":[89,24,89,35]}},{"key":"geid_130_546","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#deleteDocument().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/DocumentCatalog#uriToId.","attributes":{"type":"uses","at":[89,37,89,44]}},{"key":"geid_130_547","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#deleteDocument().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_newCatalog.","attributes":{"type":"uses","at":[90,24,90,35]}},{"key":"geid_130_548","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#deleteDocument().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/DocumentCatalog#idToUri.","attributes":{"type":"uses","at":[90,37,90,44]}},{"key":"geid_130_549","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#deleteDocument().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_newCatalog.","attributes":{"type":"uses","at":[91,17,91,28]}},{"key":"geid_130_550","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#deleteDocument().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/DocumentCatalog#count.","attributes":{"type":"uses","at":[91,30,91,35]}},{"key":"geid_130_551","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#deleteDocument().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#endUpdate().","attributes":{"type":"uses","at":[94,23,94,32]}},{"key":"geid_130_552","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#deleteDocument().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#cancelUpdate().","attributes":{"type":"uses","at":[97,17,97,29]}},{"key":"geid_130_553","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#deleteDocument().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/","attributes":{"type":"uses","at":[103,18,103,20]}},{"key":"geid_130_554","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#deleteDocument().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/unlink().","attributes":{"type":"uses","at":[103,21,103,27]}},{"key":"geid_130_555","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#deleteDocument().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#","attributes":{"type":"uses","at":[103,28,103,32]}},{"key":"geid_130_556","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#deleteDocument().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#join().","attributes":{"type":"uses","at":[103,33,103,37]}},{"key":"geid_130_557","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#deleteDocument().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#`<get>folderPath`().","attributes":{"type":"uses","at":[103,43,103,53]}},{"key":"geid_130_558","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#deleteDocument().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/","attributes":{"type":"uses","at":[110,18,110,20]}},{"key":"geid_130_559","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#deleteDocument().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/unlink().","attributes":{"type":"uses","at":[110,21,110,27]}},{"key":"geid_130_560","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#deleteDocument().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#","attributes":{"type":"uses","at":[110,28,110,32]}},{"key":"geid_130_561","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#deleteDocument().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#join().","attributes":{"type":"uses","at":[110,33,110,37]}},{"key":"geid_130_562","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#deleteDocument().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#`<get>folderPath`().","attributes":{"type":"uses","at":[110,43,110,53]}},{"key":"geid_130_563","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#getCatalogStats().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/DocumentCatalogStats#","attributes":{"type":"uses","at":[116,44,116,64]}},{"key":"geid_130_564","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#getCatalogStats().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#getIndexStats().","attributes":{"type":"uses","at":[117,33,117,46]}},{"key":"geid_130_565","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#getCatalogStats().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_catalog.","attributes":{"type":"uses","at":[119,26,119,34]}},{"key":"geid_130_566","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#getCatalogStats().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/DocumentCatalog#version.","attributes":{"type":"uses","at":[119,36,119,43]}},{"key":"geid_130_567","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#getCatalogStats().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_catalog.","attributes":{"type":"uses","at":[120,28,120,36]}},{"key":"geid_130_568","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#getCatalogStats().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/DocumentCatalog#count.","attributes":{"type":"uses","at":[120,38,120,43]}},{"key":"geid_130_569","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#upsertDocument().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/MetadataTypes#","attributes":{"type":"uses","at":[137,103,137,116]}},{"key":"geid_130_570","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#upsertDocument().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#","attributes":{"type":"uses","at":[137,128,137,141]}},{"key":"geid_130_571","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#upsertDocument().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_embeddings.","attributes":{"type":"uses","at":[139,18,139,29]}},{"key":"geid_130_572","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#upsertDocument().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#getDocumentId().","attributes":{"type":"uses","at":[144,36,144,49]}},{"key":"geid_130_573","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#upsertDocument().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#deleteDocument().","attributes":{"type":"uses","at":[147,23,147,37]}},{"key":"geid_130_574","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#upsertDocument().","target":"scip-typescript npm @types/uuid 9.0.7 `index.d.ts`/v4.","attributes":{"type":"uses","at":[150,25,150,27]}},{"key":"geid_130_575","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#upsertDocument().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_chunkingConfig.","attributes":{"type":"uses","at":[154,55,154,70]}},{"key":"geid_130_576","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#upsertDocument().","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#`<constructor>`().","attributes":{"type":"uses","at":[165,29,165,41]}},{"key":"geid_130_577","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#upsertDocument().","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/TextSplitter#split().","attributes":{"type":"uses","at":[166,32,166,37]}},{"key":"geid_130_578","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#upsertDocument().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_embeddings.","attributes":{"type":"uses","at":[174,35,174,46]}},{"key":"geid_130_579","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#upsertDocument().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/EmbeddingsModel#maxTokens.","attributes":{"type":"uses","at":[174,47,174,56]}},{"key":"geid_130_580","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#upsertDocument().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/EmbeddingsResponse#","attributes":{"type":"uses","at":[188,26,188,44]}},{"key":"geid_130_581","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#upsertDocument().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_embeddings.","attributes":{"type":"uses","at":[190,38,190,49]}},{"key":"geid_130_582","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#upsertDocument().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/EmbeddingsModel#createEmbeddings().","attributes":{"type":"uses","at":[190,50,190,66]}},{"key":"geid_130_583","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#upsertDocument().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/EmbeddingsResponse#status.","attributes":{"type":"uses","at":[196,25,196,31]}},{"key":"geid_130_584","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#upsertDocument().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/EmbeddingsResponse#message.","attributes":{"type":"uses","at":[197,73,197,80]}},{"key":"geid_130_585","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#upsertDocument().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/EmbeddingsResponse#output.","attributes":{"type":"uses","at":[201,45,201,51]}},{"key":"geid_130_586","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#upsertDocument().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#beginUpdate().","attributes":{"type":"uses","at":[207,19,207,30]}},{"key":"geid_130_587","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#upsertDocument().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/DocumentChunkMetadata#","attributes":{"type":"uses","at":[213,37,213,58]}},{"key":"geid_130_588","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#upsertDocument().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#insertItem().","attributes":{"type":"uses","at":[218,27,218,37]}},{"key":"geid_130_589","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#upsertDocument().","target":"scip-typescript npm @types/uuid 9.0.7 `index.d.ts`/v4.","attributes":{"type":"uses","at":[219,24,219,26]}},{"key":"geid_130_590","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#upsertDocument().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/","attributes":{"type":"uses","at":[227,22,227,24]}},{"key":"geid_130_591","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#upsertDocument().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/writeFile().","attributes":{"type":"uses","at":[227,25,227,34]}},{"key":"geid_130_592","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#upsertDocument().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#","attributes":{"type":"uses","at":[227,35,227,39]}},{"key":"geid_130_593","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#upsertDocument().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#join().","attributes":{"type":"uses","at":[227,40,227,44]}},{"key":"geid_130_594","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#upsertDocument().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#`<get>folderPath`().","attributes":{"type":"uses","at":[227,50,227,60]}},{"key":"geid_130_595","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#upsertDocument().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/","attributes":{"type":"uses","at":[231,18,231,20]}},{"key":"geid_130_596","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#upsertDocument().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/writeFile().","attributes":{"type":"uses","at":[231,21,231,30]}},{"key":"geid_130_597","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#upsertDocument().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#","attributes":{"type":"uses","at":[231,31,231,35]}},{"key":"geid_130_598","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#upsertDocument().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#join().","attributes":{"type":"uses","at":[231,36,231,40]}},{"key":"geid_130_599","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#upsertDocument().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#`<get>folderPath`().","attributes":{"type":"uses","at":[231,46,231,56]}},{"key":"geid_130_600","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#upsertDocument().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_newCatalog.","attributes":{"type":"uses","at":[234,17,234,28]}},{"key":"geid_130_601","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#upsertDocument().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/DocumentCatalog#uriToId.","attributes":{"type":"uses","at":[234,30,234,37]}},{"key":"geid_130_602","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#upsertDocument().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_newCatalog.","attributes":{"type":"uses","at":[235,17,235,28]}},{"key":"geid_130_603","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#upsertDocument().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/DocumentCatalog#idToUri.","attributes":{"type":"uses","at":[235,30,235,37]}},{"key":"geid_130_604","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#upsertDocument().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_newCatalog.","attributes":{"type":"uses","at":[236,17,236,28]}},{"key":"geid_130_605","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#upsertDocument().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/DocumentCatalog#count.","attributes":{"type":"uses","at":[236,30,236,35]}},{"key":"geid_130_606","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#upsertDocument().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#endUpdate().","attributes":{"type":"uses","at":[239,23,239,32]}},{"key":"geid_130_607","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#upsertDocument().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#cancelUpdate().","attributes":{"type":"uses","at":[242,17,242,29]}},{"key":"geid_130_608","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#upsertDocument().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/LocalDocument#`<constructor>`().","attributes":{"type":"uses","at":[247,19,247,32]}},{"key":"geid_130_609","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#upsertDocument().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#`<get>folderPath`().","attributes":{"type":"uses","at":[247,38,247,48]}},{"key":"geid_130_610","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#queryDocuments().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/DocumentQueryOptions#","attributes":{"type":"uses","at":[251,57,251,77]}},{"key":"geid_130_611","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#queryDocuments().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#","attributes":{"type":"uses","at":[251,88,251,107]}},{"key":"geid_130_612","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#queryDocuments().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_embeddings.","attributes":{"type":"uses","at":[253,18,253,29]}},{"key":"geid_130_613","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#queryDocuments().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/EmbeddingsResponse#","attributes":{"type":"uses","at":[264,24,264,42]}},{"key":"geid_130_614","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#queryDocuments().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_embeddings.","attributes":{"type":"uses","at":[266,36,266,47]}},{"key":"geid_130_615","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#queryDocuments().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/EmbeddingsModel#createEmbeddings().","attributes":{"type":"uses","at":[266,48,266,64]}},{"key":"geid_130_616","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#queryDocuments().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/EmbeddingsResponse#status.","attributes":{"type":"uses","at":[272,23,272,29]}},{"key":"geid_130_617","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#queryDocuments().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/EmbeddingsResponse#message.","attributes":{"type":"uses","at":[273,81,273,88]}},{"key":"geid_130_618","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#queryDocuments().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#queryItems().","attributes":{"type":"uses","at":[277,35,277,45]}},{"key":"geid_130_619","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#queryDocuments().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/DocumentChunkMetadata#","attributes":{"type":"uses","at":[277,46,277,67]}},{"key":"geid_130_620","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#queryDocuments().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/EmbeddingsResponse#output.","attributes":{"type":"uses","at":[277,80,277,86]}},{"key":"geid_130_621","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#queryDocuments().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/DocumentQueryOptions#maxChunks.","attributes":{"type":"uses","at":[277,100,277,109]}},{"key":"geid_130_622","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#queryDocuments().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/DocumentQueryOptions#filter.","attributes":{"type":"uses","at":[277,120,277,126]}},{"key":"geid_130_623","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#queryDocuments().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/QueryResult#","attributes":{"type":"uses","at":[280,54,280,65]}},{"key":"geid_130_624","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#queryDocuments().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/DocumentChunkMetadata#","attributes":{"type":"uses","at":[280,66,280,87]}},{"key":"geid_130_625","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#queryDocuments().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#","attributes":{"type":"uses","at":[290,31,290,50]}},{"key":"geid_130_626","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#queryDocuments().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#getDocumentUri().","attributes":{"type":"uses","at":[293,35,293,49]}},{"key":"geid_130_627","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#queryDocuments().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/LocalDocumentResult#`<constructor>`().","attributes":{"type":"uses","at":[294,39,294,58]}},{"key":"geid_130_628","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#queryDocuments().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#`<get>folderPath`().","attributes":{"type":"uses","at":[294,64,294,74]}},{"key":"geid_130_629","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#queryDocuments().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_tokenizer.","attributes":{"type":"uses","at":[294,106,294,116]}},{"key":"geid_130_630","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#queryDocuments().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/DocumentQueryOptions#maxDocuments.","attributes":{"type":"uses","at":[299,82,299,94]}},{"key":"geid_130_631","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#beginUpdate().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#beginUpdate().","attributes":{"type":"uses","at":[305,20,305,31]}},{"key":"geid_130_632","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#beginUpdate().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_newCatalog.","attributes":{"type":"uses","at":[306,13,306,24]}},{"key":"geid_130_633","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#beginUpdate().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_catalog.","attributes":{"type":"uses","at":[306,50,306,58]}},{"key":"geid_130_634","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#cancelUpdate().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#cancelUpdate().","attributes":{"type":"uses","at":[310,14,310,26]}},{"key":"geid_130_635","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#cancelUpdate().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_newCatalog.","attributes":{"type":"uses","at":[311,13,311,24]}},{"key":"geid_130_636","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#endUpdate().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#endUpdate().","attributes":{"type":"uses","at":[315,20,315,29]}},{"key":"geid_130_637","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#endUpdate().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/","attributes":{"type":"uses","at":[319,18,319,20]}},{"key":"geid_130_638","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#endUpdate().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/writeFile().","attributes":{"type":"uses","at":[319,21,319,30]}},{"key":"geid_130_639","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#endUpdate().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#","attributes":{"type":"uses","at":[319,31,319,35]}},{"key":"geid_130_640","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#endUpdate().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#join().","attributes":{"type":"uses","at":[319,36,319,40]}},{"key":"geid_130_641","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#endUpdate().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#`<get>folderPath`().","attributes":{"type":"uses","at":[319,46,319,56]}},{"key":"geid_130_642","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#endUpdate().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_newCatalog.","attributes":{"type":"uses","at":[319,95,319,106]}},{"key":"geid_130_643","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#endUpdate().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_catalog.","attributes":{"type":"uses","at":[320,17,320,25]}},{"key":"geid_130_644","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#endUpdate().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_newCatalog.","attributes":{"type":"uses","at":[320,33,320,44]}},{"key":"geid_130_645","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#endUpdate().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_newCatalog.","attributes":{"type":"uses","at":[321,17,321,28]}},{"key":"geid_130_646","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#loadIndexData().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#loadIndexData().","attributes":{"type":"uses","at":[328,20,328,33]}},{"key":"geid_130_647","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#loadIndexData().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_catalog.","attributes":{"type":"uses","at":[330,17,330,25]}},{"key":"geid_130_648","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#loadIndexData().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#","attributes":{"type":"uses","at":[334,28,334,32]}},{"key":"geid_130_649","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#loadIndexData().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#join().","attributes":{"type":"uses","at":[334,33,334,37]}},{"key":"geid_130_650","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#loadIndexData().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#`<get>folderPath`().","attributes":{"type":"uses","at":[334,43,334,53]}},{"key":"geid_130_651","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#loadIndexData().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#isCatalogCreated().","attributes":{"type":"uses","at":[335,23,335,39]}},{"key":"geid_130_652","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#loadIndexData().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/","attributes":{"type":"uses","at":[337,33,337,35]}},{"key":"geid_130_653","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#loadIndexData().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/readFile().","attributes":{"type":"uses","at":[337,36,337,44]}},{"key":"geid_130_654","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#loadIndexData().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_catalog.","attributes":{"type":"uses","at":[338,17,338,25]}},{"key":"geid_130_655","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#loadIndexData().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_catalog.","attributes":{"type":"uses","at":[342,21,342,29]}},{"key":"geid_130_656","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#loadIndexData().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/","attributes":{"type":"uses","at":[348,22,348,24]}},{"key":"geid_130_657","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#loadIndexData().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/writeFile().","attributes":{"type":"uses","at":[348,25,348,34]}},{"key":"geid_130_658","source":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#loadIndexData().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#_catalog.","attributes":{"type":"uses","at":[348,68,348,76]}},{"key":"geid_130_659","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/cleanContent().","attributes":{"type":"defines","at":[212,0,226,1]}},{"key":"geid_130_660","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/cell().","attributes":{"type":"defines","at":[203,0,210,1]}},{"key":"geid_130_661","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/isFirstTbody().","attributes":{"type":"defines","at":[190,0,201,1]}},{"key":"geid_130_662","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/isHeadingRow().","attributes":{"type":"defines","at":[178,0,188,1]}},{"key":"geid_130_663","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/convertTables().","attributes":{"type":"defines","at":[123,0,168,1]}},{"key":"geid_130_664","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#","target":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#htmlToMarkdown().","attributes":{"type":"defines","at":[86,4,120,5]}},{"key":"geid_130_665","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#","target":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#fetch().","attributes":{"type":"defines","at":[45,4,83,5]}},{"key":"geid_130_666","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#","attributes":{"type":"defines","at":[35,0,121,1]}},{"key":"geid_130_667","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcherConfig#","attributes":{"type":"defines","at":[28,0,33,1]}},{"key":"geid_130_668","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/","target":"scip-typescript npm axios 1.6.2 `index.d.ts`/axios.","attributes":{"type":"uses","at":[0,7,0,12]}},{"key":"geid_130_669","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/","target":"scip-typescript npm axios 1.6.2 `index.d.ts`/AxiosRequestConfig#","attributes":{"type":"uses","at":[0,16,0,34]}},{"key":"geid_130_670","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/","target":"scip-typescript npm axios 1.6.2 `index.d.ts`/","attributes":{"type":"uses","at":[0,42,0,49]}},{"key":"geid_130_671","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/TextFetcher#","attributes":{"type":"uses","at":[1,9,1,20]}},{"key":"geid_130_672","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/","attributes":{"type":"uses","at":[1,28,1,37]}},{"key":"geid_130_673","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/","target":"scip-typescript npm cheerio 1.0.0-rc.12 lib/`index.d.ts`/","attributes":{"type":"uses","at":[2,12,2,19]}},{"key":"geid_130_674","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/","target":"scip-typescript npm cheerio 1.0.0-rc.12 lib/`index.d.ts`/","attributes":{"type":"uses","at":[2,25,2,34]}},{"key":"geid_130_675","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcherConfig#","target":"scip-typescript npm axios 1.6.2 `index.d.ts`/AxiosRequestConfig#","attributes":{"type":"uses","at":[30,20,30,38]}},{"key":"geid_130_676","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/TextFetcher#","attributes":{"type":"uses","at":[35,35,35,46]}},{"key":"geid_130_677","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#","target":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcherConfig#","attributes":{"type":"uses","at":[36,30,36,46]}},{"key":"geid_130_678","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#","target":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcherConfig#","attributes":{"type":"uses","at":[38,40,38,56]}},{"key":"geid_130_679","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#","target":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#_config.","attributes":{"type":"uses","at":[39,13,39,20]}},{"key":"geid_130_680","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#","target":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcherConfig#","attributes":{"type":"uses","at":[42,13,42,29]}},{"key":"geid_130_681","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#fetch().","target":"scip-typescript npm axios 1.6.2 `index.d.ts`/axios.","attributes":{"type":"uses","at":[46,27,46,32]}},{"key":"geid_130_682","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#fetch().","target":"scip-typescript npm axios 1.6.2 `index.d.ts`/AxiosStatic#create().","attributes":{"type":"uses","at":[46,33,46,39]}},{"key":"geid_130_683","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#fetch().","target":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/DEFAULT_HEADERS.","attributes":{"type":"uses","at":[51,42,51,57]}},{"key":"geid_130_684","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#fetch().","target":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#_config.","attributes":{"type":"uses","at":[51,64,51,71]}},{"key":"geid_130_685","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#fetch().","target":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcherConfig#headers.","attributes":{"type":"uses","at":[51,72,51,79]}},{"key":"geid_130_686","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#fetch().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/global/URL#","attributes":{"type":"uses","at":[54,25,54,28]}},{"key":"geid_130_687","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#fetch().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/global/URL.","attributes":{"type":"uses","at":[54,25,54,28]}},{"key":"geid_130_688","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#fetch().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/URL#hostname.","attributes":{"type":"uses","at":[54,34,54,42]}},{"key":"geid_130_689","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#fetch().","target":"scip-typescript npm axios 1.6.2 `index.d.ts`/Axios#get().","attributes":{"type":"uses","at":[59,42,59,45]}},{"key":"geid_130_690","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#fetch().","target":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#_config.","attributes":{"type":"uses","at":[61,20,61,27]}},{"key":"geid_130_691","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#fetch().","target":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcherConfig#requestConfig.","attributes":{"type":"uses","at":[61,28,61,41]}},{"key":"geid_130_692","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#fetch().","target":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/ALLOWED_CONTENT_TYPES.","attributes":{"type":"uses","at":[70,37,70,58]}},{"key":"geid_130_693","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#fetch().","target":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#_config.","attributes":{"type":"uses","at":[76,38,76,45]}},{"key":"geid_130_694","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#fetch().","target":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcherConfig#htmlToMarkdown.","attributes":{"type":"uses","at":[76,46,76,60]}},{"key":"geid_130_695","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#fetch().","target":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#htmlToMarkdown().","attributes":{"type":"uses","at":[77,30,77,44]}},{"key":"geid_130_696","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#htmlToMarkdown().","target":"scip-typescript npm cheerio 1.0.0-rc.12 lib/`index.d.ts`/","attributes":{"type":"uses","at":[88,18,88,25]}},{"key":"geid_130_697","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#htmlToMarkdown().","target":"scip-typescript npm cheerio 1.0.0-rc.12 lib/`index.d.ts`/load.","attributes":{"type":"uses","at":[88,26,88,30]}},{"key":"geid_130_698","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#htmlToMarkdown().","target":"scip-typescript npm cheerio 1.0.0-rc.12 lib/api/`manipulation.d.ts`/remove().","attributes":{"type":"uses","at":[91,20,91,26]}},{"key":"geid_130_699","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#htmlToMarkdown().","target":"scip-typescript npm cheerio 1.0.0-rc.12 lib/api/`traversing.d.ts`/each().","attributes":{"type":"uses","at":[92,15,92,19]}},{"key":"geid_130_700","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#htmlToMarkdown().","target":"scip-typescript npm cheerio 1.0.0-rc.12 lib/api/`attributes.d.ts`/attr().","attributes":{"type":"uses","at":[94,29,94,33]}},{"key":"geid_130_701","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#htmlToMarkdown().","target":"scip-typescript npm cheerio 1.0.0-rc.12 lib/api/`attributes.d.ts`/attr().","attributes":{"type":"uses","at":[98,24,98,28]}},{"key":"geid_130_702","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#htmlToMarkdown().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/global/URL#","attributes":{"type":"uses","at":[98,41,98,44]}},{"key":"geid_130_703","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#htmlToMarkdown().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/global/URL.","attributes":{"type":"uses","at":[98,41,98,44]}},{"key":"geid_130_704","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#htmlToMarkdown().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/URL#toString().","attributes":{"type":"uses","at":[98,60,98,68]}},{"key":"geid_130_705","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#htmlToMarkdown().","target":"scip-typescript npm cheerio 1.0.0-rc.12 lib/api/`manipulation.d.ts`/html().","attributes":{"type":"uses","at":[106,31,106,35]}},{"key":"geid_130_706","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#htmlToMarkdown().","target":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/convertTables().","attributes":{"type":"uses","at":[110,8,110,21]}},{"key":"geid_130_707","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/convertTables().","target":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/cell().","attributes":{"type":"uses","at":[127,19,127,23]}},{"key":"geid_130_708","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/convertTables().","target":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/isHeadingRow().","attributes":{"type":"uses","at":[137,16,137,28]}},{"key":"geid_130_709","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/convertTables().","target":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/cell().","attributes":{"type":"uses","at":[146,35,146,39]}},{"key":"geid_130_710","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/isHeadingRow().","target":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/isFirstTbody().","attributes":{"type":"uses","at":[184,48,184,60]}},{"key":"geid_130_711","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/isHeadingRow().","target":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/every.","attributes":{"type":"uses","at":[185,12,185,17]}},{"key":"geid_130_712","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/cell().","target":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/indexOf.","attributes":{"type":"uses","at":[204,16,204,23]}},{"key":"geid_130_713","source":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/cell().","target":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/cleanContent().","attributes":{"type":"uses","at":[209,11,209,23]}},{"key":"geid_130_714","source":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#warning().","attributes":{"type":"defines","at":[59,4,62,5]}},{"key":"geid_130_715","source":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#value().","attributes":{"type":"defines","at":[55,4,57,5]}},{"key":"geid_130_716","source":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#title().","attributes":{"type":"defines","at":[51,4,53,5]}},{"key":"geid_130_717","source":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#success().","attributes":{"type":"defines","at":[47,4,49,5]}},{"key":"geid_130_718","source":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#progress().","attributes":{"type":"defines","at":[43,4,45,5]}},{"key":"geid_130_719","source":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#output().","attributes":{"type":"defines","at":[18,4,41,5]}},{"key":"geid_130_720","source":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#error().","attributes":{"type":"defines","at":[10,4,16,5]}},{"key":"geid_130_721","source":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#replaceLine().","attributes":{"type":"defines","at":[6,4,8,5]}},{"key":"geid_130_722","source":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#","attributes":{"type":"defines","at":[5,0,63,1]}},{"key":"geid_130_723","source":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/require.","attributes":{"type":"uses","at":[0,18,0,25]}},{"key":"geid_130_724","source":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#output().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/colorizer.","attributes":{"type":"uses","at":[22,19,22,28]}},{"key":"geid_130_725","source":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#value().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#","attributes":{"type":"uses","at":[56,28,56,36]}},{"key":"geid_130_726","source":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#value().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#output().","attributes":{"type":"uses","at":[56,37,56,43]}},{"key":"geid_130_727","source":"scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/","target":"scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/CreateEmbeddingResponseUsage#","attributes":{"type":"defines","at":[37,0,40,1]}},{"key":"geid_130_728","source":"scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/","target":"scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/CreateEmbeddingResponseDataInner#","attributes":{"type":"defines","at":[28,0,32,1]}},{"key":"geid_130_729","source":"scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/","target":"scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/CreateEmbeddingResponse#","attributes":{"type":"defines","at":[18,0,23,1]}},{"key":"geid_130_730","source":"scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/","target":"scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/OpenAICreateEmbeddingRequest#","attributes":{"type":"defines","at":[11,0,13,1]}},{"key":"geid_130_731","source":"scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/","target":"scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/CreateEmbeddingRequest#","attributes":{"type":"defines","at":[3,0,6,1]}},{"key":"geid_130_732","source":"scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/CreateEmbeddingRequest#","target":"scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/CreateEmbeddingRequestInput#","attributes":{"type":"uses","at":[4,11,4,38]}},{"key":"geid_130_733","source":"scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/OpenAICreateEmbeddingRequest#","target":"scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/CreateEmbeddingRequest#","attributes":{"type":"uses","at":[11,54,11,76]}},{"key":"geid_130_734","source":"scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/CreateEmbeddingResponse#","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Array#","attributes":{"type":"uses","at":[21,10,21,15]}},{"key":"geid_130_735","source":"scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/CreateEmbeddingResponse#","target":"scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/CreateEmbeddingResponseDataInner#","attributes":{"type":"uses","at":[21,16,21,48]}},{"key":"geid_130_736","source":"scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/CreateEmbeddingResponse#","target":"scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/CreateEmbeddingResponseUsage#","attributes":{"type":"uses","at":[22,11,22,39]}},{"key":"geid_130_737","source":"scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/CreateEmbeddingResponseDataInner#","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Array#","attributes":{"type":"uses","at":[31,15,31,20]}},{"key":"geid_130_738","source":"scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Array#","attributes":{"type":"uses","at":[45,42,45,47]}},{"key":"geid_130_739","source":"scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Array#","attributes":{"type":"uses","at":[45,55,45,60]}},{"key":"geid_130_740","source":"scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Array#","attributes":{"type":"uses","at":[45,71,45,76]}},{"key":"geid_130_741","source":"scip-typescript npm vectra 0.5.5 src/internals/`index.ts`/","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/","attributes":{"type":"uses","at":[0,14,0,26]}},{"key":"geid_130_742","source":"scip-typescript npm vectra 0.5.5 src/internals/`index.ts`/","target":"scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/","attributes":{"type":"uses","at":[1,14,1,23]}},{"key":"geid_130_743","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#post().","attributes":{"type":"defines","at":[219,4,255,5]}},{"key":"geid_130_744","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddingRequest().","attributes":{"type":"defines","at":[198,4,214,5]}},{"key":"geid_130_745","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddings().","attributes":{"type":"defines","at":[166,4,193,5]}},{"key":"geid_130_746","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#","attributes":{"type":"defines","at":[105,0,256,1]}},{"key":"geid_130_747","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/AzureOpenAIEmbeddingsOptions#","attributes":{"type":"defines","at":[79,0,99,1]}},{"key":"geid_130_748","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddingsOptions#","attributes":{"type":"defines","at":[48,0,74,1]}},{"key":"geid_130_749","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OSSEmbeddingsOptions#","attributes":{"type":"defines","at":[31,0,43,1]}},{"key":"geid_130_750","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/BaseOpenAIEmbeddingsOptions#","attributes":{"type":"defines","at":[5,0,25,1]}},{"key":"geid_130_751","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/","target":"scip-typescript npm axios 1.6.2 `index.d.ts`/axios.","attributes":{"type":"uses","at":[0,7,0,12]}},{"key":"geid_130_752","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/","target":"scip-typescript npm axios 1.6.2 `index.d.ts`/AxiosInstance#","attributes":{"type":"uses","at":[0,16,0,29]}},{"key":"geid_130_753","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/","target":"scip-typescript npm axios 1.6.2 `index.d.ts`/AxiosResponse#","attributes":{"type":"uses","at":[0,31,0,44]}},{"key":"geid_130_754","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/","target":"scip-typescript npm axios 1.6.2 `index.d.ts`/AxiosRequestConfig#","attributes":{"type":"uses","at":[0,46,0,64]}},{"key":"geid_130_755","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/","target":"scip-typescript npm axios 1.6.2 `index.d.ts`/","attributes":{"type":"uses","at":[0,72,0,79]}},{"key":"geid_130_756","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/EmbeddingsModel#","attributes":{"type":"uses","at":[1,9,1,24]}},{"key":"geid_130_757","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/EmbeddingsResponse#","attributes":{"type":"uses","at":[1,26,1,44]}},{"key":"geid_130_758","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/","attributes":{"type":"uses","at":[1,52,1,61]}},{"key":"geid_130_759","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/","target":"scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/CreateEmbeddingRequest#","attributes":{"type":"uses","at":[2,9,2,31]}},{"key":"geid_130_760","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/","target":"scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/CreateEmbeddingResponse#","attributes":{"type":"uses","at":[2,33,2,56]}},{"key":"geid_130_761","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/","target":"scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/OpenAICreateEmbeddingRequest#","attributes":{"type":"uses","at":[2,58,2,86]}},{"key":"geid_130_762","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/","target":"scip-typescript npm vectra 0.5.5 src/internals/`index.ts`/","attributes":{"type":"uses","at":[2,94,2,107]}},{"key":"geid_130_763","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#","attributes":{"type":"uses","at":[3,9,3,17]}},{"key":"geid_130_764","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/","target":"scip-typescript npm vectra 0.5.5 src/internals/`index.ts`/","attributes":{"type":"uses","at":[3,25,3,38]}},{"key":"geid_130_765","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/BaseOpenAIEmbeddingsOptions#","target":"scip-typescript npm axios 1.6.2 `index.d.ts`/AxiosRequestConfig#","attributes":{"type":"uses","at":[24,20,24,38]}},{"key":"geid_130_766","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OSSEmbeddingsOptions#","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/BaseOpenAIEmbeddingsOptions#","attributes":{"type":"uses","at":[31,46,31,73]}},{"key":"geid_130_767","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddingsOptions#","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/BaseOpenAIEmbeddingsOptions#","attributes":{"type":"uses","at":[48,49,48,76]}},{"key":"geid_130_768","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/AzureOpenAIEmbeddingsOptions#","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/BaseOpenAIEmbeddingsOptions#","attributes":{"type":"uses","at":[79,54,79,81]}},{"key":"geid_130_769","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/EmbeddingsModel#","attributes":{"type":"uses","at":[105,41,105,56]}},{"key":"geid_130_770","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#","target":"scip-typescript npm axios 1.6.2 `index.d.ts`/AxiosInstance#","attributes":{"type":"uses","at":[106,34,106,47]}},{"key":"geid_130_771","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/ClientType#","attributes":{"type":"uses","at":[107,34,107,44]}},{"key":"geid_130_772","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OSSEmbeddingsOptions#","attributes":{"type":"uses","at":[116,29,116,49]}},{"key":"geid_130_773","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddingsOptions#","attributes":{"type":"uses","at":[116,50,116,73]}},{"key":"geid_130_774","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/AzureOpenAIEmbeddingsOptions#","attributes":{"type":"uses","at":[116,74,116,102]}},{"key":"geid_130_775","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OSSEmbeddingsOptions#","attributes":{"type":"uses","at":[122,32,122,52]}},{"key":"geid_130_776","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddingsOptions#","attributes":{"type":"uses","at":[122,53,122,76]}},{"key":"geid_130_777","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/AzureOpenAIEmbeddingsOptions#","attributes":{"type":"uses","at":[122,77,122,105]}},{"key":"geid_130_778","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/AzureOpenAIEmbeddingsOptions#","attributes":{"type":"uses","at":[124,24,124,52]}},{"key":"geid_130_779","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/AzureOpenAIEmbeddingsOptions#azureApiKey.","attributes":{"type":"uses","at":[124,54,124,65]}},{"key":"geid_130_780","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#_clientType.","attributes":{"type":"uses","at":[125,17,125,28]}},{"key":"geid_130_781","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/ClientType#","attributes":{"type":"uses","at":[125,31,125,41]}},{"key":"geid_130_782","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/ClientType#AzureOpenAI.","attributes":{"type":"uses","at":[125,42,125,53]}},{"key":"geid_130_783","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#options.","attributes":{"type":"uses","at":[126,17,126,24]}},{"key":"geid_130_784","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/AzureOpenAIEmbeddingsOptions#","attributes":{"type":"uses","at":[129,27,129,55]}},{"key":"geid_130_785","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#options.","attributes":{"type":"uses","at":[132,32,132,39]}},{"key":"geid_130_786","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/AzureOpenAIEmbeddingsOptions#azureEndpoint.","attributes":{"type":"uses","at":[132,40,132,53]}},{"key":"geid_130_787","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#options.","attributes":{"type":"uses","at":[141,17,141,24]}},{"key":"geid_130_788","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/AzureOpenAIEmbeddingsOptions#azureEndpoint.","attributes":{"type":"uses","at":[141,25,141,38]}},{"key":"geid_130_789","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OSSEmbeddingsOptions#","attributes":{"type":"uses","at":[142,31,142,51]}},{"key":"geid_130_790","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OSSEmbeddingsOptions#ossModel.","attributes":{"type":"uses","at":[142,53,142,61]}},{"key":"geid_130_791","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#_clientType.","attributes":{"type":"uses","at":[143,17,143,28]}},{"key":"geid_130_792","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/ClientType#","attributes":{"type":"uses","at":[143,31,143,41]}},{"key":"geid_130_793","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/ClientType#OSS.","attributes":{"type":"uses","at":[143,42,143,45]}},{"key":"geid_130_794","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#options.","attributes":{"type":"uses","at":[144,17,144,24]}},{"key":"geid_130_795","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OSSEmbeddingsOptions#","attributes":{"type":"uses","at":[146,27,146,47]}},{"key":"geid_130_796","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#_clientType.","attributes":{"type":"uses","at":[148,17,148,28]}},{"key":"geid_130_797","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/ClientType#","attributes":{"type":"uses","at":[148,31,148,41]}},{"key":"geid_130_798","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/ClientType#OpenAI.","attributes":{"type":"uses","at":[148,42,148,48]}},{"key":"geid_130_799","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#options.","attributes":{"type":"uses","at":[149,17,149,24]}},{"key":"geid_130_800","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddingsOptions#","attributes":{"type":"uses","at":[151,27,151,50]}},{"key":"geid_130_801","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#_httpClient.","attributes":{"type":"uses","at":[155,13,155,24]}},{"key":"geid_130_802","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#","target":"scip-typescript npm axios 1.6.2 `index.d.ts`/axios.","attributes":{"type":"uses","at":[155,27,155,32]}},{"key":"geid_130_803","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#","target":"scip-typescript npm axios 1.6.2 `index.d.ts`/AxiosStatic#create().","attributes":{"type":"uses","at":[155,33,155,39]}},{"key":"geid_130_804","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddings().","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/EmbeddingsResponse#","attributes":{"type":"uses","at":[166,70,166,88]}},{"key":"geid_130_805","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddings().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#options.","attributes":{"type":"uses","at":[167,17,167,24]}},{"key":"geid_130_806","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddings().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/BaseOpenAIEmbeddingsOptions#logRequests.","attributes":{"type":"uses","at":[167,25,167,36]}},{"key":"geid_130_807","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddings().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.","attributes":{"type":"uses","at":[168,12,168,19]}},{"key":"geid_130_808","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddings().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/","attributes":{"type":"uses","at":[168,12,168,19]}},{"key":"geid_130_809","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddings().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.","attributes":{"type":"uses","at":[168,12,168,19]}},{"key":"geid_130_810","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddings().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().","attributes":{"type":"uses","at":[168,20,168,23]}},{"key":"geid_130_811","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddings().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#","attributes":{"type":"uses","at":[168,24,168,32]}},{"key":"geid_130_812","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddings().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#title().","attributes":{"type":"uses","at":[168,33,168,38]}},{"key":"geid_130_813","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddings().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.","attributes":{"type":"uses","at":[169,12,169,19]}},{"key":"geid_130_814","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddings().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/","attributes":{"type":"uses","at":[169,12,169,19]}},{"key":"geid_130_815","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddings().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.","attributes":{"type":"uses","at":[169,12,169,19]}},{"key":"geid_130_816","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddings().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().","attributes":{"type":"uses","at":[169,20,169,23]}},{"key":"geid_130_817","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddings().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#","attributes":{"type":"uses","at":[169,24,169,32]}},{"key":"geid_130_818","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddings().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#output().","attributes":{"type":"uses","at":[169,33,169,39]}},{"key":"geid_130_819","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddings().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddingRequest().","attributes":{"type":"uses","at":[173,36,173,58]}},{"key":"geid_130_820","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddings().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#options.","attributes":{"type":"uses","at":[177,17,177,24]}},{"key":"geid_130_821","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddings().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/BaseOpenAIEmbeddingsOptions#logRequests.","attributes":{"type":"uses","at":[177,25,177,36]}},{"key":"geid_130_822","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddings().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.","attributes":{"type":"uses","at":[178,12,178,19]}},{"key":"geid_130_823","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddings().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/","attributes":{"type":"uses","at":[178,12,178,19]}},{"key":"geid_130_824","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddings().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.","attributes":{"type":"uses","at":[178,12,178,19]}},{"key":"geid_130_825","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddings().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().","attributes":{"type":"uses","at":[178,20,178,23]}},{"key":"geid_130_826","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddings().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#","attributes":{"type":"uses","at":[178,24,178,32]}},{"key":"geid_130_827","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddings().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#title().","attributes":{"type":"uses","at":[178,33,178,38]}},{"key":"geid_130_828","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddings().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.","attributes":{"type":"uses","at":[179,12,179,19]}},{"key":"geid_130_829","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddings().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/","attributes":{"type":"uses","at":[179,12,179,19]}},{"key":"geid_130_830","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddings().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.","attributes":{"type":"uses","at":[179,12,179,19]}},{"key":"geid_130_831","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddings().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().","attributes":{"type":"uses","at":[179,20,179,23]}},{"key":"geid_130_832","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddings().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#","attributes":{"type":"uses","at":[179,24,179,32]}},{"key":"geid_130_833","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddings().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#value().","attributes":{"type":"uses","at":[179,33,179,38]}},{"key":"geid_130_834","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddings().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.","attributes":{"type":"uses","at":[180,12,180,19]}},{"key":"geid_130_835","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddings().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/","attributes":{"type":"uses","at":[180,12,180,19]}},{"key":"geid_130_836","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddings().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.","attributes":{"type":"uses","at":[180,12,180,19]}},{"key":"geid_130_837","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddings().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().","attributes":{"type":"uses","at":[180,20,180,23]}},{"key":"geid_130_838","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddings().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#","attributes":{"type":"uses","at":[180,24,180,32]}},{"key":"geid_130_839","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddings().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#value().","attributes":{"type":"uses","at":[180,33,180,38]}},{"key":"geid_130_840","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddings().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.","attributes":{"type":"uses","at":[181,12,181,19]}},{"key":"geid_130_841","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddings().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/","attributes":{"type":"uses","at":[181,12,181,19]}},{"key":"geid_130_842","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddings().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.","attributes":{"type":"uses","at":[181,12,181,19]}},{"key":"geid_130_843","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddings().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().","attributes":{"type":"uses","at":[181,20,181,23]}},{"key":"geid_130_844","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddings().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#","attributes":{"type":"uses","at":[181,24,181,32]}},{"key":"geid_130_845","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddings().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#output().","attributes":{"type":"uses","at":[181,33,181,39]}},{"key":"geid_130_846","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddingRequest().","target":"scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/CreateEmbeddingRequest#","attributes":{"type":"uses","at":[198,46,198,68]}},{"key":"geid_130_847","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddingRequest().","target":"scip-typescript npm axios 1.6.2 `index.d.ts`/AxiosResponse#","attributes":{"type":"uses","at":[198,79,198,92]}},{"key":"geid_130_848","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddingRequest().","target":"scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/CreateEmbeddingResponse#","attributes":{"type":"uses","at":[198,93,198,116]}},{"key":"geid_130_849","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddingRequest().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#_clientType.","attributes":{"type":"uses","at":[199,17,199,28]}},{"key":"geid_130_850","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddingRequest().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/ClientType#","attributes":{"type":"uses","at":[199,32,199,42]}},{"key":"geid_130_851","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddingRequest().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/ClientType#AzureOpenAI.","attributes":{"type":"uses","at":[199,43,199,54]}},{"key":"geid_130_852","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddingRequest().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#options.","attributes":{"type":"uses","at":[200,33,200,40]}},{"key":"geid_130_853","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddingRequest().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/AzureOpenAIEmbeddingsOptions#","attributes":{"type":"uses","at":[200,44,200,72]}},{"key":"geid_130_854","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddingRequest().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/AzureOpenAIEmbeddingsOptions#azureEndpoint.","attributes":{"type":"uses","at":[201,35,201,48]}},{"key":"geid_130_855","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddingRequest().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/AzureOpenAIEmbeddingsOptions#azureDeployment.","attributes":{"type":"uses","at":[201,79,201,94]}},{"key":"geid_130_856","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddingRequest().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/AzureOpenAIEmbeddingsOptions#azureApiVersion.","attributes":{"type":"uses","at":[201,129,201,144]}},{"key":"geid_130_857","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddingRequest().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#post().","attributes":{"type":"uses","at":[202,24,202,28]}},{"key":"geid_130_858","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddingRequest().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#_clientType.","attributes":{"type":"uses","at":[203,24,203,35]}},{"key":"geid_130_859","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddingRequest().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/ClientType#","attributes":{"type":"uses","at":[203,39,203,49]}},{"key":"geid_130_860","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddingRequest().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/ClientType#OSS.","attributes":{"type":"uses","at":[203,50,203,53]}},{"key":"geid_130_861","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddingRequest().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#options.","attributes":{"type":"uses","at":[204,33,204,40]}},{"key":"geid_130_862","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddingRequest().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OSSEmbeddingsOptions#","attributes":{"type":"uses","at":[204,44,204,64]}},{"key":"geid_130_863","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddingRequest().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OSSEmbeddingsOptions#ossEndpoint.","attributes":{"type":"uses","at":[205,35,205,46]}},{"key":"geid_130_864","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddingRequest().","target":"scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/OpenAICreateEmbeddingRequest#","attributes":{"type":"uses","at":[206,24,206,52]}},{"key":"geid_130_865","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddingRequest().","target":"scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/OpenAICreateEmbeddingRequest#model.","attributes":{"type":"uses","at":[206,54,206,59]}},{"key":"geid_130_866","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddingRequest().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OSSEmbeddingsOptions#ossModel.","attributes":{"type":"uses","at":[206,70,206,78]}},{"key":"geid_130_867","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddingRequest().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#post().","attributes":{"type":"uses","at":[207,24,207,28]}},{"key":"geid_130_868","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddingRequest().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#options.","attributes":{"type":"uses","at":[209,33,209,40]}},{"key":"geid_130_869","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddingRequest().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddingsOptions#","attributes":{"type":"uses","at":[209,44,209,67]}},{"key":"geid_130_870","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddingRequest().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddingsOptions#endpoint.","attributes":{"type":"uses","at":[210,35,210,43]}},{"key":"geid_130_871","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddingRequest().","target":"scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/OpenAICreateEmbeddingRequest#","attributes":{"type":"uses","at":[211,24,211,52]}},{"key":"geid_130_872","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddingRequest().","target":"scip-typescript npm vectra 0.5.5 src/internals/`types.ts`/OpenAICreateEmbeddingRequest#model.","attributes":{"type":"uses","at":[211,54,211,59]}},{"key":"geid_130_873","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddingRequest().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddingsOptions#model.","attributes":{"type":"uses","at":[211,70,211,75]}},{"key":"geid_130_874","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#createEmbeddingRequest().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#post().","attributes":{"type":"uses","at":[212,24,212,28]}},{"key":"geid_130_875","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#post().","target":"scip-typescript npm axios 1.6.2 `index.d.ts`/AxiosResponse#","attributes":{"type":"uses","at":[219,84,219,97]}},{"key":"geid_130_876","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#post().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#post().[TData]","attributes":{"type":"uses","at":[219,98,219,103]}},{"key":"geid_130_877","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#post().","target":"scip-typescript npm axios 1.6.2 `index.d.ts`/AxiosRequestConfig#","attributes":{"type":"uses","at":[221,29,221,47]}},{"key":"geid_130_878","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#post().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#options.","attributes":{"type":"uses","at":[221,73,221,80]}},{"key":"geid_130_879","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#post().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/BaseOpenAIEmbeddingsOptions#requestConfig.","attributes":{"type":"uses","at":[221,81,221,94]}},{"key":"geid_130_880","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#post().","target":"scip-typescript npm axios 1.6.2 `index.d.ts`/AxiosRequestConfig#headers.","attributes":{"type":"uses","at":[224,27,224,34]}},{"key":"geid_130_881","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#post().","target":"scip-typescript npm axios 1.6.2 `index.d.ts`/AxiosRequestConfig#headers.","attributes":{"type":"uses","at":[225,26,225,33]}},{"key":"geid_130_882","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#post().","target":"scip-typescript npm axios 1.6.2 `index.d.ts`/AxiosRequestConfig#headers.","attributes":{"type":"uses","at":[227,27,227,34]}},{"key":"geid_130_883","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#post().","target":"scip-typescript npm axios 1.6.2 `index.d.ts`/AxiosRequestConfig#headers.","attributes":{"type":"uses","at":[228,26,228,33]}},{"key":"geid_130_884","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#post().","target":"scip-typescript npm axios 1.6.2 `index.d.ts`/AxiosRequestConfig#headers.","attributes":{"type":"uses","at":[230,27,230,34]}},{"key":"geid_130_885","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#post().","target":"scip-typescript npm axios 1.6.2 `index.d.ts`/AxiosRequestConfig#headers.","attributes":{"type":"uses","at":[231,26,231,33]}},{"key":"geid_130_886","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#post().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#UserAgent.","attributes":{"type":"uses","at":[231,55,231,64]}},{"key":"geid_130_887","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#post().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#_clientType.","attributes":{"type":"uses","at":[233,17,233,28]}},{"key":"geid_130_888","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#post().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/ClientType#","attributes":{"type":"uses","at":[233,32,233,42]}},{"key":"geid_130_889","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#post().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/ClientType#AzureOpenAI.","attributes":{"type":"uses","at":[233,43,233,54]}},{"key":"geid_130_890","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#post().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#options.","attributes":{"type":"uses","at":[234,33,234,40]}},{"key":"geid_130_891","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#post().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/AzureOpenAIEmbeddingsOptions#","attributes":{"type":"uses","at":[234,44,234,72]}},{"key":"geid_130_892","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#post().","target":"scip-typescript npm axios 1.6.2 `index.d.ts`/AxiosRequestConfig#headers.","attributes":{"type":"uses","at":[235,26,235,33]}},{"key":"geid_130_893","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#post().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/AzureOpenAIEmbeddingsOptions#azureApiKey.","attributes":{"type":"uses","at":[235,55,235,66]}},{"key":"geid_130_894","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#post().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#_clientType.","attributes":{"type":"uses","at":[236,24,236,35]}},{"key":"geid_130_895","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#post().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/ClientType#","attributes":{"type":"uses","at":[236,39,236,49]}},{"key":"geid_130_896","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#post().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/ClientType#OpenAI.","attributes":{"type":"uses","at":[236,50,236,56]}},{"key":"geid_130_897","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#post().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#options.","attributes":{"type":"uses","at":[237,33,237,40]}},{"key":"geid_130_898","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#post().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddingsOptions#","attributes":{"type":"uses","at":[237,44,237,67]}},{"key":"geid_130_899","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#post().","target":"scip-typescript npm axios 1.6.2 `index.d.ts`/AxiosRequestConfig#headers.","attributes":{"type":"uses","at":[238,26,238,33]}},{"key":"geid_130_900","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#post().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddingsOptions#apiKey.","attributes":{"type":"uses","at":[238,71,238,77]}},{"key":"geid_130_901","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#post().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddingsOptions#organization.","attributes":{"type":"uses","at":[239,24,239,36]}},{"key":"geid_130_902","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#post().","target":"scip-typescript npm axios 1.6.2 `index.d.ts`/AxiosRequestConfig#headers.","attributes":{"type":"uses","at":[240,30,240,37]}},{"key":"geid_130_903","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#post().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddingsOptions#organization.","attributes":{"type":"uses","at":[240,71,240,83]}},{"key":"geid_130_904","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#post().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#_httpClient.","attributes":{"type":"uses","at":[245,36,245,47]}},{"key":"geid_130_905","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#post().","target":"scip-typescript npm axios 1.6.2 `index.d.ts`/Axios#post().","attributes":{"type":"uses","at":[245,48,245,52]}},{"key":"geid_130_906","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#post().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#options.","attributes":{"type":"uses","at":[248,57,248,64]}},{"key":"geid_130_907","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#post().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/BaseOpenAIEmbeddingsOptions#retryPolicy.","attributes":{"type":"uses","at":[248,65,248,76]}},{"key":"geid_130_908","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#post().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#options.","attributes":{"type":"uses","at":[248,99,248,106]}},{"key":"geid_130_909","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#post().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/BaseOpenAIEmbeddingsOptions#retryPolicy.","attributes":{"type":"uses","at":[248,107,248,118]}},{"key":"geid_130_910","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#post().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#options.","attributes":{"type":"uses","at":[249,31,249,38]}},{"key":"geid_130_911","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#post().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/BaseOpenAIEmbeddingsOptions#retryPolicy.","attributes":{"type":"uses","at":[249,39,249,50]}},{"key":"geid_130_912","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#post().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`timers.d.ts`/`\"timers\"`/global/setTimeout().","attributes":{"type":"uses","at":[250,43,250,53]}},{"key":"geid_130_913","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#post().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`timers.d.ts`/`\"timers\"`/global/setTimeout/","attributes":{"type":"uses","at":[250,43,250,53]}},{"key":"geid_130_914","source":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#post().","attributes":{"type":"uses","at":[251,24,251,28]}},{"key":"geid_130_915","source":"scip-typescript npm vectra 0.5.5 src/`FileFetcher.ts`/FileFetcher#","target":"scip-typescript npm vectra 0.5.5 src/`FileFetcher.ts`/FileFetcher#fetch().","attributes":{"type":"defines","at":[5,4,29,5]}},{"key":"geid_130_916","source":"scip-typescript npm vectra 0.5.5 src/`FileFetcher.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`FileFetcher.ts`/FileFetcher#","attributes":{"type":"defines","at":[4,0,30,1]}},{"key":"geid_130_917","source":"scip-typescript npm vectra 0.5.5 src/`FileFetcher.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/TextFetcher#","attributes":{"type":"uses","at":[0,9,0,20]}},{"key":"geid_130_918","source":"scip-typescript npm vectra 0.5.5 src/`FileFetcher.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/","attributes":{"type":"uses","at":[0,28,0,37]}},{"key":"geid_130_919","source":"scip-typescript npm vectra 0.5.5 src/`FileFetcher.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/","attributes":{"type":"uses","at":[1,12,1,14]}},{"key":"geid_130_920","source":"scip-typescript npm vectra 0.5.5 src/`FileFetcher.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/","attributes":{"type":"uses","at":[1,20,1,33]}},{"key":"geid_130_921","source":"scip-typescript npm vectra 0.5.5 src/`FileFetcher.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/","attributes":{"type":"uses","at":[2,12,2,16]}},{"key":"geid_130_922","source":"scip-typescript npm vectra 0.5.5 src/`FileFetcher.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path.","attributes":{"type":"uses","at":[2,12,2,16]}},{"key":"geid_130_923","source":"scip-typescript npm vectra 0.5.5 src/`FileFetcher.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/","attributes":{"type":"uses","at":[2,22,2,28]}},{"key":"geid_130_924","source":"scip-typescript npm vectra 0.5.5 src/`FileFetcher.ts`/FileFetcher#","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/TextFetcher#","attributes":{"type":"uses","at":[4,36,4,47]}},{"key":"geid_130_925","source":"scip-typescript npm vectra 0.5.5 src/`FileFetcher.ts`/FileFetcher#fetch().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/","attributes":{"type":"uses","at":[9,31,9,33]}},{"key":"geid_130_926","source":"scip-typescript npm vectra 0.5.5 src/`FileFetcher.ts`/FileFetcher#fetch().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/stat().","attributes":{"type":"uses","at":[9,34,9,38]}},{"key":"geid_130_927","source":"scip-typescript npm vectra 0.5.5 src/`FileFetcher.ts`/FileFetcher#fetch().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/","attributes":{"type":"uses","at":[17,32,17,34]}},{"key":"geid_130_928","source":"scip-typescript npm vectra 0.5.5 src/`FileFetcher.ts`/FileFetcher#fetch().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/readdir().","attributes":{"type":"uses","at":[17,35,17,42]}},{"key":"geid_130_929","source":"scip-typescript npm vectra 0.5.5 src/`FileFetcher.ts`/FileFetcher#fetch().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#","attributes":{"type":"uses","at":[19,33,19,37]}},{"key":"geid_130_930","source":"scip-typescript npm vectra 0.5.5 src/`FileFetcher.ts`/FileFetcher#fetch().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#join().","attributes":{"type":"uses","at":[19,38,19,42]}},{"key":"geid_130_931","source":"scip-typescript npm vectra 0.5.5 src/`FileFetcher.ts`/FileFetcher#","target":"scip-typescript npm vectra 0.5.5 src/`FileFetcher.ts`/FileFetcher#fetch().","attributes":{"type":"uses","at":[20,27,20,32]}},{"key":"geid_130_932","source":"scip-typescript npm vectra 0.5.5 src/`FileFetcher.ts`/FileFetcher#fetch().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/","attributes":{"type":"uses","at":[25,31,25,33]}},{"key":"geid_130_933","source":"scip-typescript npm vectra 0.5.5 src/`FileFetcher.ts`/FileFetcher#fetch().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/readFile().","attributes":{"type":"uses","at":[25,34,25,42]}},{"key":"geid_130_934","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/getItemList().","attributes":{"type":"defines","at":[244,0,253,1]}},{"key":"geid_130_935","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","attributes":{"type":"defines","at":[9,0,241,1]}},{"key":"geid_130_936","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/","attributes":{"type":"uses","at":[0,12,0,14]}},{"key":"geid_130_937","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/","attributes":{"type":"uses","at":[0,20,0,33]}},{"key":"geid_130_938","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#","attributes":{"type":"uses","at":[3,9,3,27]}},{"key":"geid_130_939","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/","attributes":{"type":"uses","at":[3,35,3,57]}},{"key":"geid_130_940","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#","attributes":{"type":"uses","at":[4,9,4,19]}},{"key":"geid_130_941","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/","attributes":{"type":"uses","at":[4,27,4,41]}},{"key":"geid_130_942","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#","attributes":{"type":"uses","at":[5,9,5,25]}},{"key":"geid_130_943","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/","attributes":{"type":"uses","at":[5,33,5,53]}},{"key":"geid_130_944","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#","attributes":{"type":"uses","at":[6,9,6,17]}},{"key":"geid_130_945","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/","target":"scip-typescript npm vectra 0.5.5 src/internals/`index.ts`/","attributes":{"type":"uses","at":[6,25,6,38]}},{"key":"geid_130_946","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`FileFetcher.ts`/FileFetcher#","attributes":{"type":"uses","at":[7,9,7,20]}},{"key":"geid_130_947","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`FileFetcher.ts`/","attributes":{"type":"uses","at":[7,28,7,43]}},{"key":"geid_130_948","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/process.","attributes":{"type":"uses","at":[11,37,11,44]}},{"key":"geid_130_949","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/process.","attributes":{"type":"uses","at":[11,37,11,44]}},{"key":"geid_130_950","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/NodeJS/Process#argv.","attributes":{"type":"uses","at":[11,45,11,49]}},{"key":"geid_130_951","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#`<constructor>`().","attributes":{"type":"uses","at":[15,30,15,48]}},{"key":"geid_130_952","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.","attributes":{"type":"uses","at":[16,12,16,19]}},{"key":"geid_130_953","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/","attributes":{"type":"uses","at":[16,12,16,19]}},{"key":"geid_130_954","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.","attributes":{"type":"uses","at":[16,12,16,19]}},{"key":"geid_130_955","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().","attributes":{"type":"uses","at":[16,20,16,23]}},{"key":"geid_130_956","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#","attributes":{"type":"uses","at":[16,24,16,32]}},{"key":"geid_130_957","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#output().","attributes":{"type":"uses","at":[16,33,16,39]}},{"key":"geid_130_958","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#createIndex().","attributes":{"type":"uses","at":[17,24,17,35]}},{"key":"geid_130_959","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.","attributes":{"type":"uses","at":[21,12,21,19]}},{"key":"geid_130_960","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/","attributes":{"type":"uses","at":[21,12,21,19]}},{"key":"geid_130_961","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.","attributes":{"type":"uses","at":[21,12,21,19]}},{"key":"geid_130_962","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().","attributes":{"type":"uses","at":[21,20,21,23]}},{"key":"geid_130_963","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#","attributes":{"type":"uses","at":[21,24,21,32]}},{"key":"geid_130_964","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#output().","attributes":{"type":"uses","at":[21,33,21,39]}},{"key":"geid_130_965","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#`<constructor>`().","attributes":{"type":"uses","at":[22,30,22,48]}},{"key":"geid_130_966","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/LocalIndex#deleteIndex().","attributes":{"type":"uses","at":[23,24,23,35]}},{"key":"geid_130_967","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.","attributes":{"type":"uses","at":[65,12,65,19]}},{"key":"geid_130_968","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/","attributes":{"type":"uses","at":[65,12,65,19]}},{"key":"geid_130_969","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.","attributes":{"type":"uses","at":[65,12,65,19]}},{"key":"geid_130_970","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().","attributes":{"type":"uses","at":[65,20,65,23]}},{"key":"geid_130_971","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#","attributes":{"type":"uses","at":[65,24,65,32]}},{"key":"geid_130_972","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#title().","attributes":{"type":"uses","at":[65,33,65,38]}},{"key":"geid_130_973","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/","attributes":{"type":"uses","at":[68,42,68,44]}},{"key":"geid_130_974","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/readFile().","attributes":{"type":"uses","at":[68,45,68,53]}},{"key":"geid_130_975","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#`<constructor>`().","attributes":{"type":"uses","at":[69,35,69,51]}},{"key":"geid_130_976","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#`<constructor>`().","attributes":{"type":"uses","at":[73,30,73,48]}},{"key":"geid_130_977","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/getItemList().","attributes":{"type":"uses","at":[82,31,82,42]}},{"key":"geid_130_978","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/`FileFetcher.ts`/FileFetcher#","attributes":{"type":"uses","at":[85,36,85,47]}},{"key":"geid_130_979","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#`<constructor>`().","attributes":{"type":"uses","at":[86,49,86,59]}},{"key":"geid_130_980","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#`<constructor>`().","attributes":{"type":"uses","at":[86,105,86,115]}},{"key":"geid_130_981","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.","attributes":{"type":"uses","at":[89,20,89,27]}},{"key":"geid_130_982","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/","attributes":{"type":"uses","at":[89,20,89,27]}},{"key":"geid_130_983","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.","attributes":{"type":"uses","at":[89,20,89,27]}},{"key":"geid_130_984","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().","attributes":{"type":"uses","at":[89,28,89,31]}},{"key":"geid_130_985","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#","attributes":{"type":"uses","at":[89,32,89,40]}},{"key":"geid_130_986","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#progress().","attributes":{"type":"uses","at":[89,41,89,49]}},{"key":"geid_130_987","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/WebFetcher#fetch().","attributes":{"type":"uses","at":[91,34,91,39]}},{"key":"geid_130_988","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/`FileFetcher.ts`/FileFetcher#fetch().","attributes":{"type":"uses","at":[91,34,91,39]}},{"key":"geid_130_989","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.","attributes":{"type":"uses","at":[92,24,92,31]}},{"key":"geid_130_990","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/","attributes":{"type":"uses","at":[92,24,92,31]}},{"key":"geid_130_991","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.","attributes":{"type":"uses","at":[92,24,92,31]}},{"key":"geid_130_992","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().","attributes":{"type":"uses","at":[92,32,92,35]}},{"key":"geid_130_993","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#","attributes":{"type":"uses","at":[92,36,92,44]}},{"key":"geid_130_994","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#replaceLine().","attributes":{"type":"uses","at":[92,45,92,56]}},{"key":"geid_130_995","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#","attributes":{"type":"uses","at":[92,57,92,65]}},{"key":"geid_130_996","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#progress().","attributes":{"type":"uses","at":[92,66,92,74]}},{"key":"geid_130_997","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#upsertDocument().","attributes":{"type":"uses","at":[93,36,93,50]}},{"key":"geid_130_998","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.","attributes":{"type":"uses","at":[94,24,94,31]}},{"key":"geid_130_999","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/","attributes":{"type":"uses","at":[94,24,94,31]}},{"key":"geid_130_1000","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.","attributes":{"type":"uses","at":[94,24,94,31]}},{"key":"geid_130_1001","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().","attributes":{"type":"uses","at":[94,32,94,35]}},{"key":"geid_130_1002","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#","attributes":{"type":"uses","at":[94,36,94,44]}},{"key":"geid_130_1003","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#replaceLine().","attributes":{"type":"uses","at":[94,45,94,56]}},{"key":"geid_130_1004","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#","attributes":{"type":"uses","at":[94,57,94,65]}},{"key":"geid_130_1005","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#success().","attributes":{"type":"uses","at":[94,66,94,73]}},{"key":"geid_130_1006","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.","attributes":{"type":"uses","at":[98,20,98,27]}},{"key":"geid_130_1007","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/","attributes":{"type":"uses","at":[98,20,98,27]}},{"key":"geid_130_1008","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.","attributes":{"type":"uses","at":[98,20,98,27]}},{"key":"geid_130_1009","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().","attributes":{"type":"uses","at":[98,28,98,31]}},{"key":"geid_130_1010","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#","attributes":{"type":"uses","at":[98,32,98,40]}},{"key":"geid_130_1011","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#replaceLine().","attributes":{"type":"uses","at":[98,41,98,52]}},{"key":"geid_130_1012","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#","attributes":{"type":"uses","at":[98,53,98,61]}},{"key":"geid_130_1013","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#error().","attributes":{"type":"uses","at":[98,62,98,67]}},{"key":"geid_130_1014","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#`<constructor>`().","attributes":{"type":"uses","at":[127,30,127,48]}},{"key":"geid_130_1015","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/getItemList().","attributes":{"type":"uses","at":[130,31,130,42]}},{"key":"geid_130_1016","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.","attributes":{"type":"uses","at":[134,16,134,23]}},{"key":"geid_130_1017","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/","attributes":{"type":"uses","at":[134,16,134,23]}},{"key":"geid_130_1018","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.","attributes":{"type":"uses","at":[134,16,134,23]}},{"key":"geid_130_1019","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().","attributes":{"type":"uses","at":[134,24,134,27]}},{"key":"geid_130_1020","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#deleteDocument().","attributes":{"type":"uses","at":[135,28,135,42]}},{"key":"geid_130_1021","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#`<constructor>`().","attributes":{"type":"uses","at":[140,30,140,48]}},{"key":"geid_130_1022","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#getCatalogStats().","attributes":{"type":"uses","at":[141,38,141,53]}},{"key":"geid_130_1023","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.","attributes":{"type":"uses","at":[142,12,142,19]}},{"key":"geid_130_1024","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/","attributes":{"type":"uses","at":[142,12,142,19]}},{"key":"geid_130_1025","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.","attributes":{"type":"uses","at":[142,12,142,19]}},{"key":"geid_130_1026","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().","attributes":{"type":"uses","at":[142,20,142,23]}},{"key":"geid_130_1027","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#","attributes":{"type":"uses","at":[142,24,142,32]}},{"key":"geid_130_1028","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#title().","attributes":{"type":"uses","at":[142,33,142,38]}},{"key":"geid_130_1029","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.","attributes":{"type":"uses","at":[143,12,143,19]}},{"key":"geid_130_1030","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/","attributes":{"type":"uses","at":[143,12,143,19]}},{"key":"geid_130_1031","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.","attributes":{"type":"uses","at":[143,12,143,19]}},{"key":"geid_130_1032","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().","attributes":{"type":"uses","at":[143,20,143,23]}},{"key":"geid_130_1033","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#","attributes":{"type":"uses","at":[143,24,143,32]}},{"key":"geid_130_1034","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#output().","attributes":{"type":"uses","at":[143,33,143,39]}},{"key":"geid_130_1035","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.","attributes":{"type":"uses","at":[189,12,189,19]}},{"key":"geid_130_1036","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/","attributes":{"type":"uses","at":[189,12,189,19]}},{"key":"geid_130_1037","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.","attributes":{"type":"uses","at":[189,12,189,19]}},{"key":"geid_130_1038","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().","attributes":{"type":"uses","at":[189,20,189,23]}},{"key":"geid_130_1039","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#","attributes":{"type":"uses","at":[189,24,189,32]}},{"key":"geid_130_1040","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#title().","attributes":{"type":"uses","at":[189,33,189,38]}},{"key":"geid_130_1041","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/","attributes":{"type":"uses","at":[192,42,192,44]}},{"key":"geid_130_1042","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/readFile().","attributes":{"type":"uses","at":[192,45,192,53]}},{"key":"geid_130_1043","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/OpenAIEmbeddings#`<constructor>`().","attributes":{"type":"uses","at":[193,35,193,51]}},{"key":"geid_130_1044","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#`<constructor>`().","attributes":{"type":"uses","at":[197,30,197,48]}},{"key":"geid_130_1045","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/LocalDocumentIndex#queryDocuments().","attributes":{"type":"uses","at":[204,40,204,54]}},{"key":"geid_130_1046","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.","attributes":{"type":"uses","at":[211,16,211,23]}},{"key":"geid_130_1047","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/","attributes":{"type":"uses","at":[211,16,211,23]}},{"key":"geid_130_1048","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.","attributes":{"type":"uses","at":[211,16,211,23]}},{"key":"geid_130_1049","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().","attributes":{"type":"uses","at":[211,24,211,27]}},{"key":"geid_130_1050","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#","attributes":{"type":"uses","at":[211,28,211,36]}},{"key":"geid_130_1051","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#output().","attributes":{"type":"uses","at":[211,37,211,43]}},{"key":"geid_130_1052","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.","attributes":{"type":"uses","at":[212,16,212,23]}},{"key":"geid_130_1053","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/","attributes":{"type":"uses","at":[212,16,212,23]}},{"key":"geid_130_1054","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.","attributes":{"type":"uses","at":[212,16,212,23]}},{"key":"geid_130_1055","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().","attributes":{"type":"uses","at":[212,24,212,27]}},{"key":"geid_130_1056","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#","attributes":{"type":"uses","at":[212,28,212,36]}},{"key":"geid_130_1057","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#value().","attributes":{"type":"uses","at":[212,37,212,42]}},{"key":"geid_130_1058","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.","attributes":{"type":"uses","at":[213,16,213,23]}},{"key":"geid_130_1059","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/","attributes":{"type":"uses","at":[213,16,213,23]}},{"key":"geid_130_1060","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.","attributes":{"type":"uses","at":[213,16,213,23]}},{"key":"geid_130_1061","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().","attributes":{"type":"uses","at":[213,24,213,27]}},{"key":"geid_130_1062","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#","attributes":{"type":"uses","at":[213,28,213,36]}},{"key":"geid_130_1063","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#value().","attributes":{"type":"uses","at":[213,37,213,42]}},{"key":"geid_130_1064","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.","attributes":{"type":"uses","at":[218,24,218,31]}},{"key":"geid_130_1065","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/","attributes":{"type":"uses","at":[218,24,218,31]}},{"key":"geid_130_1066","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.","attributes":{"type":"uses","at":[218,24,218,31]}},{"key":"geid_130_1067","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().","attributes":{"type":"uses","at":[218,32,218,35]}},{"key":"geid_130_1068","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#","attributes":{"type":"uses","at":[218,36,218,44]}},{"key":"geid_130_1069","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#title().","attributes":{"type":"uses","at":[218,45,218,50]}},{"key":"geid_130_1070","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.","attributes":{"type":"uses","at":[219,24,219,31]}},{"key":"geid_130_1071","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/","attributes":{"type":"uses","at":[219,24,219,31]}},{"key":"geid_130_1072","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.","attributes":{"type":"uses","at":[219,24,219,31]}},{"key":"geid_130_1073","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().","attributes":{"type":"uses","at":[219,32,219,35]}},{"key":"geid_130_1074","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#","attributes":{"type":"uses","at":[219,36,219,44]}},{"key":"geid_130_1075","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#value().","attributes":{"type":"uses","at":[219,45,219,50]}},{"key":"geid_130_1076","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.","attributes":{"type":"uses","at":[220,24,220,31]}},{"key":"geid_130_1077","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/","attributes":{"type":"uses","at":[220,24,220,31]}},{"key":"geid_130_1078","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.","attributes":{"type":"uses","at":[220,24,220,31]}},{"key":"geid_130_1079","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().","attributes":{"type":"uses","at":[220,32,220,35]}},{"key":"geid_130_1080","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#","attributes":{"type":"uses","at":[220,36,220,44]}},{"key":"geid_130_1081","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#value().","attributes":{"type":"uses","at":[220,45,220,50]}},{"key":"geid_130_1082","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.","attributes":{"type":"uses","at":[221,24,221,31]}},{"key":"geid_130_1083","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/","attributes":{"type":"uses","at":[221,24,221,31]}},{"key":"geid_130_1084","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.","attributes":{"type":"uses","at":[221,24,221,31]}},{"key":"geid_130_1085","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().","attributes":{"type":"uses","at":[221,32,221,35]}},{"key":"geid_130_1086","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#","attributes":{"type":"uses","at":[221,36,221,44]}},{"key":"geid_130_1087","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#output().","attributes":{"type":"uses","at":[221,45,221,51]}},{"key":"geid_130_1088","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.","attributes":{"type":"uses","at":[229,24,229,31]}},{"key":"geid_130_1089","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/","attributes":{"type":"uses","at":[229,24,229,31]}},{"key":"geid_130_1090","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.","attributes":{"type":"uses","at":[229,24,229,31]}},{"key":"geid_130_1091","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().","attributes":{"type":"uses","at":[229,32,229,35]}},{"key":"geid_130_1092","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#","attributes":{"type":"uses","at":[229,36,229,44]}},{"key":"geid_130_1093","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#title().","attributes":{"type":"uses","at":[229,45,229,50]}},{"key":"geid_130_1094","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.","attributes":{"type":"uses","at":[230,24,230,31]}},{"key":"geid_130_1095","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/","attributes":{"type":"uses","at":[230,24,230,31]}},{"key":"geid_130_1096","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.","attributes":{"type":"uses","at":[230,24,230,31]}},{"key":"geid_130_1097","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().","attributes":{"type":"uses","at":[230,32,230,35]}},{"key":"geid_130_1098","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#","attributes":{"type":"uses","at":[230,36,230,44]}},{"key":"geid_130_1099","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#value().","attributes":{"type":"uses","at":[230,45,230,50]}},{"key":"geid_130_1100","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.","attributes":{"type":"uses","at":[231,24,231,31]}},{"key":"geid_130_1101","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/","attributes":{"type":"uses","at":[231,24,231,31]}},{"key":"geid_130_1102","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.","attributes":{"type":"uses","at":[231,24,231,31]}},{"key":"geid_130_1103","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().","attributes":{"type":"uses","at":[231,32,231,35]}},{"key":"geid_130_1104","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#","attributes":{"type":"uses","at":[231,36,231,44]}},{"key":"geid_130_1105","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#value().","attributes":{"type":"uses","at":[231,45,231,50]}},{"key":"geid_130_1106","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.","attributes":{"type":"uses","at":[232,24,232,31]}},{"key":"geid_130_1107","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/","attributes":{"type":"uses","at":[232,24,232,31]}},{"key":"geid_130_1108","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.","attributes":{"type":"uses","at":[232,24,232,31]}},{"key":"geid_130_1109","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().","attributes":{"type":"uses","at":[232,32,232,35]}},{"key":"geid_130_1110","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#","attributes":{"type":"uses","at":[232,36,232,44]}},{"key":"geid_130_1111","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#value().","attributes":{"type":"uses","at":[232,45,232,50]}},{"key":"geid_130_1112","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.","attributes":{"type":"uses","at":[233,24,233,31]}},{"key":"geid_130_1113","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/","attributes":{"type":"uses","at":[233,24,233,31]}},{"key":"geid_130_1114","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.","attributes":{"type":"uses","at":[233,24,233,31]}},{"key":"geid_130_1115","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#log().","attributes":{"type":"uses","at":[233,32,233,35]}},{"key":"geid_130_1116","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#","attributes":{"type":"uses","at":[233,36,233,44]}},{"key":"geid_130_1117","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/run().","target":"scip-typescript npm vectra 0.5.5 src/internals/`Colorize.ts`/Colorize#output().","attributes":{"type":"uses","at":[233,45,233,51]}},{"key":"geid_130_1118","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/getItemList().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/","attributes":{"type":"uses","at":[248,27,248,29]}},{"key":"geid_130_1119","source":"scip-typescript npm vectra 0.5.5 src/`vectra-cli.ts`/getItemList().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/fs/`promises.d.ts`/`\"fs/promises\"`/readFile().","attributes":{"type":"uses","at":[248,30,248,38]}},{"key":"geid_130_1120","source":"scip-typescript npm vectra 0.5.5 src/`index.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`FileFetcher.ts`/","attributes":{"type":"uses","at":[0,14,0,29]}},{"key":"geid_130_1121","source":"scip-typescript npm vectra 0.5.5 src/`index.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`GPT3Tokenizer.ts`/","attributes":{"type":"uses","at":[1,14,1,31]}},{"key":"geid_130_1122","source":"scip-typescript npm vectra 0.5.5 src/`index.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`ItemSelector.ts`/","attributes":{"type":"uses","at":[2,14,2,30]}},{"key":"geid_130_1123","source":"scip-typescript npm vectra 0.5.5 src/`index.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`LocalIndex.ts`/","attributes":{"type":"uses","at":[3,14,3,28]}},{"key":"geid_130_1124","source":"scip-typescript npm vectra 0.5.5 src/`index.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocument.ts`/","attributes":{"type":"uses","at":[4,14,4,31]}},{"key":"geid_130_1125","source":"scip-typescript npm vectra 0.5.5 src/`index.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentIndex.ts`/","attributes":{"type":"uses","at":[5,14,5,36]}},{"key":"geid_130_1126","source":"scip-typescript npm vectra 0.5.5 src/`index.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`LocalDocumentResult.ts`/","attributes":{"type":"uses","at":[6,14,6,37]}},{"key":"geid_130_1127","source":"scip-typescript npm vectra 0.5.5 src/`index.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`OpenAIEmbeddings.ts`/","attributes":{"type":"uses","at":[7,14,7,34]}},{"key":"geid_130_1128","source":"scip-typescript npm vectra 0.5.5 src/`index.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`TextSplitter.ts`/","attributes":{"type":"uses","at":[8,14,8,30]}},{"key":"geid_130_1129","source":"scip-typescript npm vectra 0.5.5 src/`index.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`types.ts`/","attributes":{"type":"uses","at":[9,14,9,23]}},{"key":"geid_130_1130","source":"scip-typescript npm vectra 0.5.5 src/`index.ts`/","target":"scip-typescript npm vectra 0.5.5 src/`WebFetcher.ts`/","attributes":{"type":"uses","at":[10,14,10,28]}}]}