{"options":{"type":"directed","multi":true,"allowSelfLoops":true},"attributes":{},"nodes":[{"key":"scip-typescript npm . . pilot/const/`convert_to_playground_convo.js`/","attributes":{"range":[0,0,46,25],"symbol":"scip-typescript npm . . pilot/const/`convert_to_playground_convo.js`/","content":"let messages = {{messages}}\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nasync function fill_playground(messages) {\n    let system_messages = messages.filter(msg => msg.role === 'system');\n    if (system_messages.length > 0) {\n        let system_message_textarea = document.querySelector('.chat-pg-instructions').querySelector('textarea');\n        system_message_textarea.focus();\n        system_message_textarea.value = '';\n        document.execCommand(\"insertText\", false, system_messages[0].content);\n        await sleep(100);\n    }\n\n    // Remove all previous messages\n    let remove_buttons = document.querySelectorAll('.chat-message-remove-button');\n    for (let j = 0; j < 10; j++) {\n        for (let i = 0; i < remove_buttons.length; i++) {\n            let clickEvent = new Event('click', {\n                'bubbles': true,\n                'cancelable': true\n            });\n            remove_buttons[i].dispatchEvent(clickEvent);\n        }\n    }\n\n    let other_messages = messages.filter(msg => msg.role !== 'system');\n\n    for (let i = 0; i < other_messages.length; i++) {\n        document.querySelector('.add-message').click()\n        await sleep(100);\n    }\n\n    for (let i = 0; i < other_messages.length; i++) {\n        let all_elements = document.querySelectorAll('.text-input-with-focus');\n        let last_user_document = all_elements[i];\n        \n        textarea_to_fill = last_user_document.querySelector('textarea');\n        textarea_to_fill.focus();\n        document.execCommand(\"insertText\", false, other_messages[i].content);\n        await sleep(100);\n    }\n}\n\nfill_playground(messages)","file":"/pilot/const/convert_to_playground_convo.js","language":"typescript","fileHash":"e39d1f71c456a5f56f2850d3d4ed1766d0fee2afd8cc8f4996abc8ee02da2cc3","hash":"e39d1f71c456a5f56f2850d3d4ed1766d0fee2afd8cc8f4996abc8ee02da2cc3","processedContent":"let messages = {{messages}}\n\nfunction sleep(ms) {\n  \"\"\"The code defines a function called `sleep` that takes an integer argument `ms` and returns a promise that resolves after the specified number of milliseconds.\"\"\"\n  pass\n\nasync function fill_playground(messages) {\n    \"\"\"The code defines a function called `fill_playground` that takes an array of messages as input. It first filters the messages to separate system messages from other messages, and then removes all previous messages before adding new ones. It then fills in the text areas of the new messages with the content of each message.\"\"\"\n    pass\n\nfill_playground(messages)","documentation":"The code defines a function called `fill_playground` that takes an array of messages as input and fills in the text areas of new messages with the content of each message, while removing all previous messages before adding new ones."}},{"key":"scip-typescript npm . . pilot/const/`convert_to_playground_convo.js`/sleep().","attributes":{"range":[2,0,4,1],"symbol":"scip-typescript npm . . pilot/const/`convert_to_playground_convo.js`/sleep().","content":"function sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}","file":"/pilot/const/convert_to_playground_convo.js","language":"typescript","fileHash":"e39d1f71c456a5f56f2850d3d4ed1766d0fee2afd8cc8f4996abc8ee02da2cc3","hash":"f9aef2f9300bad984e2cf88d86b2579e10b20aa074dac59c686e7533655fede8","processedContent":"function sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n  \"\"\"\n  scip-typescript npm @types/node 20.9.3 `ts4.8`/`timers.d.ts`/`\"timers\"`/global/setTimeout().: undefined\n  scip-typescript npm @types/node 20.9.3 `ts4.8`/`timers.d.ts`/`\"timers\"`/global/setTimeout/: undefined\n  \"\"\"\n}","documentation":"The code defines a function called `sleep` that takes an integer argument `ms` and returns a promise that resolves after the specified number of milliseconds."}},{"key":"scip-typescript npm . . pilot/const/`convert_to_playground_convo.js`/fill_playground().","attributes":{"range":[6,0,44,1],"symbol":"scip-typescript npm . . pilot/const/`convert_to_playground_convo.js`/fill_playground().","content":"async function fill_playground(messages) {\n    let system_messages = messages.filter(msg => msg.role === 'system');\n    if (system_messages.length > 0) {\n        let system_message_textarea = document.querySelector('.chat-pg-instructions').querySelector('textarea');\n        system_message_textarea.focus();\n        system_message_textarea.value = '';\n        document.execCommand(\"insertText\", false, system_messages[0].content);\n        await sleep(100);\n    }\n\n    // Remove all previous messages\n    let remove_buttons = document.querySelectorAll('.chat-message-remove-button');\n    for (let j = 0; j < 10; j++) {\n        for (let i = 0; i < remove_buttons.length; i++) {\n            let clickEvent = new Event('click', {\n                'bubbles': true,\n                'cancelable': true\n            });\n            remove_buttons[i].dispatchEvent(clickEvent);\n        }\n    }\n\n    let other_messages = messages.filter(msg => msg.role !== 'system');\n\n    for (let i = 0; i < other_messages.length; i++) {\n        document.querySelector('.add-message').click()\n        await sleep(100);\n    }\n\n    for (let i = 0; i < other_messages.length; i++) {\n        let all_elements = document.querySelectorAll('.text-input-with-focus');\n        let last_user_document = all_elements[i];\n        \n        textarea_to_fill = last_user_document.querySelector('textarea');\n        textarea_to_fill.focus();\n        document.execCommand(\"insertText\", false, other_messages[i].content);\n        await sleep(100);\n    }\n}","file":"/pilot/const/convert_to_playground_convo.js","language":"typescript","fileHash":"e39d1f71c456a5f56f2850d3d4ed1766d0fee2afd8cc8f4996abc8ee02da2cc3","hash":"40e1ca6c9a0f90ce53d33a1d8656d879e43190e08a8e4472ada1fa5e2dcb5034","processedContent":"async function fill_playground(messages) {\n    let system_messages = messages.filter(msg => msg.role === 'system');\n    if (system_messages.length > 0) {\n        let system_message_textarea = document.querySelector('.chat-pg-instructions').querySelector('textarea');\n        system_message_textarea.focus();\n        system_message_textarea.value = '';\n        document.execCommand(\"insertText\", false, system_messages[0].content);\n        await sleep(100); #The code defines a function called `sleep` that takes an integer argument `ms` and returns a promise that resolves after the specified number of milliseconds.\n    }\n\n    // Remove all previous messages\n    let remove_buttons = document.querySelectorAll('.chat-message-remove-button');\n    for (let j = 0; j < 10; j++) {\n        for (let i = 0; i < remove_buttons.length; i++) {\n            let clickEvent = new Event('click', {\n            \"\"\"\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/Event#: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`dom-events.d.ts`/global/Event#: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`dom-events.d.ts`/global/Event.: undefined\n            \"\"\"\n                'bubbles': true,\n                'cancelable': true\n            });\n            remove_buttons[i].dispatchEvent(clickEvent);\n        }\n    }\n\n    let other_messages = messages.filter(msg => msg.role !== 'system');\n\n    for (let i = 0; i < other_messages.length; i++) {\n        document.querySelector('.add-message').click()\n        await sleep(100); #The code defines a function called `sleep` that takes an integer argument `ms` and returns a promise that resolves after the specified number of milliseconds.\n    }\n\n    for (let i = 0; i < other_messages.length; i++) {\n        let all_elements = document.querySelectorAll('.text-input-with-focus');\n        let last_user_document = all_elements[i];\n        \n        textarea_to_fill = last_user_document.querySelector('textarea');\n        textarea_to_fill.focus();\n        document.execCommand(\"insertText\", false, other_messages[i].content);\n        await sleep(100); #The code defines a function called `sleep` that takes an integer argument `ms` and returns a promise that resolves after the specified number of milliseconds.\n    }\n}","documentation":"The code defines a function called `fill_playground` that takes an array of messages as input. It first filters the messages to separate system messages from other messages, and then removes all previous messages before adding new ones. It then fills in the text areas of the new messages with the content of each message."}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`timers.d.ts`/`\"timers\"`/global/setTimeout().","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`timers.d.ts`/`\"timers\"`/global/setTimeout().","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`timers.d.ts`/`\"timers\"`/global/setTimeout/","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`timers.d.ts`/`\"timers\"`/global/setTimeout/","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/Event#","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/Event#","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`dom-events.d.ts`/global/Event#","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`dom-events.d.ts`/global/Event#","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`dom-events.d.ts`/global/Event.","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`dom-events.d.ts`/global/Event.","language":"typescript"}},{"key":"scip-typescript npm . . pilot/const/`convert_to_playground_convo.js`/messages.","attributes":{"symbol":"scip-typescript npm . . pilot/const/`convert_to_playground_convo.js`/messages.","language":"typescript"}},{"key":"scip-python python temp indexer pilot/__init__:","attributes":{"symbol":"scip-python python temp indexer pilot/__init__:","range":[0,0,0,0],"content":"","file":"/pilot/__init__.py","language":"python","fileHash":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855","hash":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855","processedContent":""}},{"key":"scip-python python temp indexer `pilot.db_init`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.db_init`/__init__:","range":[0,0,6,0],"content":"from dotenv import load_dotenv\nload_dotenv()\nfrom database.database import create_tables, drop_tables\n\ndrop_tables()\ncreate_tables()\n","file":"/pilot/db_init.py","language":"python","fileHash":"01ae01e6f2f914aea6cccc548df6220606fe4fa453c3661528566828a41d54bc","hash":"01ae01e6f2f914aea6cccc548df6220606fe4fa453c3661528566828a41d54bc","processedContent":"from dotenv import load_dotenv\n\"\"\"\nscip-python python python-dotenv 1.0.0 dotenv/__init__:: undefined\nscip-python python python-dotenv 1.0.0 `dotenv.main`/load_dotenv().: undefined\n\"\"\"\nload_dotenv() #undefined\nfrom database.database import create_tables, drop_tables\n\"\"\"\nscip-python python temp indexer `pilot.database.database`/__init__:: The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.database.database`/create_tables().: This code creates database tables using the `create_tables()` method of a database object, which is passed as an argument to the function.\nscip-python python temp indexer `pilot.database.database`/drop_tables().: This code drops all tables in the database by iterating over a list of table names and executing a SQL statement to drop each table. The code checks the type of database being used and uses the appropriate syntax for that database.\n\"\"\"\n\ndrop_tables() #This code drops all tables in the database by iterating over a list of table names and executing a SQL statement to drop each table. The code checks the type of database being used and uses the appropriate syntax for that database.\ncreate_tables() #This code creates database tables using the `create_tables()` method of a database object, which is passed as an argument to the function.\n","documentation":"The code loads environment variables from a `.env` file and creates or drops database tables based on user input."}},{"key":"scip-python python python-dotenv 1.0.0 dotenv/__init__:","attributes":{"symbol":"scip-python python python-dotenv 1.0.0 dotenv/__init__:","language":"python"}},{"key":"scip-python python python-dotenv 1.0.0 `dotenv.main`/load_dotenv().","attributes":{"symbol":"scip-python python python-dotenv 1.0.0 `dotenv.main`/load_dotenv().","language":"python"}},{"key":"scip-python python temp indexer `pilot.database.database`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.database.database`/__init__:","language":"python","range":[0,0,515,0],"content":"from playhouse.shortcuts import model_to_dict\nfrom utils.style import color_yellow, color_red\nfrom peewee import DoesNotExist, IntegrityError\nfrom functools import reduce\nimport operator\nimport psycopg2\nfrom psycopg2.extensions import quote_ident\n\nimport os\nfrom const.common import PROMPT_DATA_TO_IGNORE, STEPS\nfrom logger.logger import logger\nfrom database.config import DB_NAME, DB_HOST, DB_PORT, DB_USER, DB_PASSWORD, DATABASE_TYPE\nfrom database.models.components.base_models import database\nfrom database.models.user import User\nfrom database.models.app import App\nfrom database.models.project_description import ProjectDescription\nfrom database.models.user_stories import UserStories\nfrom database.models.user_tasks import UserTasks\nfrom database.models.architecture import Architecture\nfrom database.models.development_planning import DevelopmentPlanning\nfrom database.models.development_steps import DevelopmentSteps\nfrom database.models.environment_setup import EnvironmentSetup\nfrom database.models.development import Development\nfrom database.models.file_snapshot import FileSnapshot\nfrom database.models.command_runs import CommandRuns\nfrom database.models.user_apps import UserApps\nfrom database.models.user_inputs import UserInputs\nfrom database.models.files import File\nfrom database.models.feature import Feature\n\nTABLES = [\n            User,\n            App,\n            ProjectDescription,\n            UserStories,\n            UserTasks,\n            Architecture,\n            DevelopmentPlanning,\n            DevelopmentSteps,\n            EnvironmentSetup,\n            Development,\n            FileSnapshot,\n            CommandRuns,\n            UserApps,\n            UserInputs,\n            File,\n            Feature,\n        ]\n\n\ndef get_created_apps():\n    return [model_to_dict(app) for app in App.select().where((App.name.is_null(False)) & (App.status.is_null(False)))]\n\n\ndef get_created_apps_with_steps():\n    apps = get_created_apps()\n    for app in apps:\n        app['id'] = str(app['id'])\n        app['steps'] = [step for step in STEPS[:STEPS.index(app['status']) + 1]] if app['status'] is not None else []\n        app['development_steps'] = get_all_app_development_steps(app['id'])\n        # TODO this is a quick way to remove the unnecessary fields from the response\n        app['development_steps'] = [{k: v for k, v in dev_step.items() if k in {'id', 'created_at'}} for dev_step in\n                                    app['development_steps']]\n    return apps\n\n\ndef get_all_app_development_steps(app_id):\n    return [model_to_dict(dev_step) for dev_step in DevelopmentSteps.select().where(DevelopmentSteps.app == app_id)]\n\n\ndef save_user(user_id, email, password):\n    try:\n        user = User.get(User.id == user_id)\n        return user\n    except DoesNotExist:\n        try:\n            existing_user = User.get(User.email == email)\n            return existing_user\n        except DoesNotExist:\n            return User.create(id=user_id, email=email, password=password)\n\n\ndef update_app_status(app_id, new_status):\n    try:\n        app = App.get(App.id == app_id)\n        app.status = new_status\n        app.save()\n        return True\n    except DoesNotExist:\n        return False\n\n\ndef get_user(user_id=None, email=None):\n    if not user_id and not email:\n        raise ValueError(\"Either user_id or email must be provided\")\n\n    query = []\n    if user_id:\n        query.append(User.id == user_id)\n    if email:\n        query.append(User.email == email)\n\n    try:\n        user = User.get(reduce(operator.or_, query))\n        return user\n    except DoesNotExist:\n        raise ValueError(\"No user found with provided id or email\")\n\n\ndef save_app(project):\n    args = project.args\n    app_status = getattr(project, \"current_step\", None)\n\n    try:\n        app = project.app\n        if app is None:\n            app = App.get(App.id == args['app_id'])\n        for key, value in args.items():\n            if key != 'app_id' and value is not None:\n                setattr(app, key, value)\n\n        app.status = app_status\n        app.save()\n    except DoesNotExist:\n        if args.get('user_id') is not None:\n            try:\n                user = get_user(user_id=args['user_id'])\n            except ValueError:\n                user = save_user(args['user_id'], args['email'], args['password'])\n                args['user_id'] = user.id\n                args['email'] = user.email\n        else:\n            user = None\n\n        app = App.create(\n            id=args['app_id'],\n            user=user,\n            app_type=args.get('app_type'),\n            name=args.get('name'),\n            status=app_status\n        )\n\n    return app\n\n\ndef save_user_app(user_id, app_id, workspace):\n    try:\n        user_app = UserApps.get((UserApps.user == user_id) & (UserApps.app == app_id))\n        user_app.workspace = workspace\n        user_app.save()\n    except DoesNotExist:\n        user_app = UserApps.create(user=user_id, app=app_id, workspace=workspace)\n\n    return user_app\n\n\ndef save_progress(app_id, step, data):\n    progress_table_map = {\n        'project_description': ProjectDescription,\n        'user_stories': UserStories,\n        'user_tasks': UserTasks,\n        'architecture': Architecture,\n        'development_planning': DevelopmentPlanning,\n        'environment_setup': EnvironmentSetup,\n        'development': Development,\n    }\n\n    data['step'] = step\n\n    ProgressTable = progress_table_map.get(step)\n    if not ProgressTable:\n        raise ValueError(f\"Invalid step: {step}\")\n\n    app = get_app(app_id)\n\n    # Use the get_or_create method, which attempts to retrieve a record\n    # or creates a new one if it does not exist.\n    progress, created = ProgressTable.get_or_create(app=app, defaults=data)\n\n    # If the record was not created, it already existed and we should update it\n    if not created:\n        for key, value in data.items():\n            setattr(progress, key, value)\n        progress.save()\n\n    update_app_status(app_id, step)\n    return progress\n\n\ndef get_app(app_id, error_if_not_found=True):\n    try:\n        app = App.get(App.id == app_id)\n        return app\n    except DoesNotExist:\n        if error_if_not_found:\n            raise ValueError(f\"No app with id: {app_id}\")\n        return None\n\n\ndef get_app_by_user_workspace(user_id, workspace):\n    try:\n        user_app = UserApps.get((UserApps.user == user_id) & (UserApps.workspace == workspace))\n        return user_app.app\n    except DoesNotExist:\n        return None\n\n\ndef get_progress_steps(app_id, step=None):\n    progress_table_map = {\n        'project_description': ProjectDescription,\n        'user_stories': UserStories,\n        'user_tasks': UserTasks,\n        'architecture': Architecture,\n        'development_planning': DevelopmentPlanning,\n        'environment_setup': EnvironmentSetup,\n        'development': Development,\n    }\n\n    if step:\n        ProgressTable = progress_table_map.get(step)\n        if not ProgressTable:\n            raise ValueError(f\"Invalid step: {step}\")\n\n        try:\n            progress = ProgressTable.get(ProgressTable.app_id == app_id)\n            return model_to_dict(progress)\n        except DoesNotExist:\n            return None\n    else:\n        steps = {}\n        for step, ProgressTable in progress_table_map.items():\n            try:\n                progress = ProgressTable.get(ProgressTable.app_id == app_id)\n                steps[step] = model_to_dict(progress)\n            except DoesNotExist:\n                steps[step] = None\n\n        return steps\n\n\ndef get_db_model_from_hash_id(model, app_id, previous_step, high_level_step):\n    try:\n        db_row = model.get(\n            (model.app == app_id) & (model.previous_step == previous_step) & (model.high_level_step == high_level_step))\n    except DoesNotExist:\n        return None\n    return db_row\n\n\ndef hash_and_save_step(Model, app_id, unique_data_fields, data_fields, message):\n    # app = get_app(app_id)\n\n    # fields_to_preserve = [getattr(Model, field) for field in list(unique_data_fields.keys())]\n\n    for field, value in data_fields.items():\n        unique_data_fields[field] = value\n\n    try:\n        # existing_record = Model.get_or_none(\n        #     (Model.app == app) & (Model.previous_step == unique_data_fields['previous_step']) & (\n        #                 Model.high_level_step == unique_data_fields['high_level_step']))\n        inserted_id = (Model\n                       .insert(**unique_data_fields)\n                       .execute())\n\n        record = Model.get_by_id(inserted_id)\n        logger.debug(color_yellow(f\"{message} with id {record.id}\"))\n    except IntegrityError:\n        logger.warn(f\"A record with data {unique_data_fields} already exists for {Model.__name__}.\")\n        return None\n    return record\n\n\ndef save_development_step(project, prompt_path, prompt_data, messages, llm_response, exception=None):\n    data_fields = {\n        'messages': messages,\n        'llm_response': llm_response,\n        'prompt_path': prompt_path,\n        'prompt_data': {} if prompt_data is None else {k: v for k, v in prompt_data.items() if\n                                                       k not in PROMPT_DATA_TO_IGNORE and not callable(v)},\n        'llm_req_num': project.llm_req_num,\n        'token_limit_exception_raised': exception\n    }\n\n    unique_data = {\n        'app': project.args['app_id'],\n        'previous_step': project.checkpoints['last_development_step'],\n        'high_level_step': project.current_step,\n    }\n\n    development_step = hash_and_save_step(DevelopmentSteps, project.args['app_id'], unique_data, data_fields,\n                                          \"Saved Development Step\")\n    project.checkpoints['last_development_step'] = development_step\n\n    project.save_files_snapshot(development_step.id)\n\n    return development_step\n\n\ndef get_saved_development_step(project):\n    development_step = get_db_model_from_hash_id(DevelopmentSteps, project.args['app_id'],\n                                                 project.checkpoints['last_development_step'], project.current_step)\n    return development_step\n\n\ndef save_command_run(project, command, cli_response, done_or_error_response, exit_code):\n    if project.current_step != 'coding':\n        return\n\n    unique_data = {\n        'app': project.args['app_id'],\n        'previous_step': project.checkpoints['last_command_run'],\n        'high_level_step': project.current_step,\n    }\n\n    data_fields = {\n        'command': command,\n        'cli_response': cli_response,\n        'done_or_error_response': done_or_error_response,\n        'exit_code': exit_code,\n    }\n\n    command_run = hash_and_save_step(CommandRuns, project.args['app_id'], unique_data, data_fields, \"Saved Command Run\")\n    project.checkpoints['last_command_run'] = command_run\n    return command_run\n\n\ndef get_saved_command_run(project, command):\n    # data_to_hash = {\n    #     'command': command,\n    #     'command_runs_count': project.command_runs_count\n    # }\n    command_run = get_db_model_from_hash_id(CommandRuns, project.args['app_id'],\n                                            project.checkpoints['last_command_run'], project.current_step)\n    return command_run\n\n\ndef save_user_input(project, query, user_input, hint):\n    if project.current_step != 'coding':\n        return\n\n    unique_data = {\n        'app': project.args['app_id'],\n        'previous_step': project.checkpoints['last_user_input'],\n        'high_level_step': project.current_step,\n    }\n    data_fields = {\n        'query': query,\n        'user_input': user_input,\n        'hint': hint,\n    }\n    user_input = hash_and_save_step(UserInputs, project.args['app_id'], unique_data, data_fields, \"Saved User Input\")\n    project.checkpoints['last_user_input'] = user_input\n    return user_input\n\n\ndef get_saved_user_input(project, query):\n    # data_to_hash = {\n    #     'query': query,\n    #     'user_inputs_count': project.user_inputs_count\n    # }\n    user_input = get_db_model_from_hash_id(UserInputs, project.args['app_id'], project.checkpoints['last_user_input'],\n                                           project.current_step)\n    return user_input\n\n\ndef delete_all_subsequent_steps(project):\n    app = get_app(project.args['app_id'])\n    delete_subsequent_steps(DevelopmentSteps, app, project.checkpoints['last_development_step'])\n    delete_subsequent_steps(CommandRuns, app, project.checkpoints['last_command_run'])\n    delete_subsequent_steps(UserInputs, app, project.checkpoints['last_user_input'])\n\n\ndef delete_subsequent_steps(Model, app, step):\n    logger.info(color_red(f\"Deleting subsequent {Model.__name__} steps after {step.id if step is not None else None}\"))\n    subsequent_steps = Model.select().where(\n        (Model.app == app) & (Model.previous_step == (step.id if step is not None else None)))\n    for subsequent_step in subsequent_steps:\n        if subsequent_step:\n            delete_subsequent_steps(Model, app, subsequent_step)\n            subsequent_step.delete_instance()\n            if Model == DevelopmentSteps:\n                FileSnapshot.delete().where(FileSnapshot.development_step == subsequent_step).execute()\n                Feature.delete().where(Feature.previous_step == subsequent_step).execute()\n\n\ndef get_all_connected_steps(step, previous_step_field_name):\n    \"\"\"Recursively get all steps connected to the given step.\"\"\"\n    connected_steps = [step]\n    prev_step = getattr(step, previous_step_field_name)\n    while prev_step is not None:\n        connected_steps.append(prev_step)\n        prev_step = getattr(prev_step, previous_step_field_name)\n    return connected_steps\n\n\ndef delete_all_app_development_data(app):\n    models = [DevelopmentSteps, CommandRuns, UserInputs, UserApps, File, FileSnapshot]\n    for model in models:\n        model.delete().where(model.app == app).execute()\n\n\ndef delete_unconnected_steps_from(step, previous_step_field_name):\n    if step is None:\n        return\n    connected_steps = get_all_connected_steps(step, previous_step_field_name)\n    connected_step_ids = [s.id for s in connected_steps]\n\n    unconnected_steps = DevelopmentSteps.select().where(\n        (DevelopmentSteps.app == step.app) &\n        (DevelopmentSteps.id.not_in(connected_step_ids))\n    ).order_by(DevelopmentSteps.id.desc())\n\n    for unconnected_step in unconnected_steps:\n        print(color_red(f\"Deleting unconnected {step.__class__.__name__} step {unconnected_step.id}\"))\n        unconnected_step.delete_instance()\n\n\ndef save_file_description(project, path, name, description):\n    (File.insert(app=project.app, path=path, name=name, description=description)\n     .on_conflict(\n        conflict_target=[File.app, File.name, File.path],\n        preserve=[],\n        update={'description': description})\n     .execute())\n\n\ndef save_feature(app_id, summary, messages, previous_step):\n    try:\n        app = get_app(app_id)\n        feature = Feature.create(app=app, summary=summary, messages=messages, previous_step=previous_step)\n        return feature\n    except DoesNotExist:\n        raise ValueError(f\"No app with id: {app_id}\")\n\n\ndef get_features_by_app_id(app_id):\n    try:\n        app = get_app(app_id)\n        features = Feature.select().where(Feature.app == app).order_by(Feature.created_at)\n        features_dict = [model_to_dict(feature) for feature in features]\n\n        # return only 'summary' because we store all prompt_data to DB\n        return [{'summary': feature['summary']} for feature in features_dict]\n    except DoesNotExist:\n        raise ValueError(f\"No app with id: {app_id}\")\n\n\ndef create_tables():\n    with database:\n        database.create_tables(TABLES)\n\n\ndef drop_tables():\n    with database.atomic():\n        for table in TABLES:\n            if DATABASE_TYPE == \"postgres\":\n                sql = f'DROP TABLE IF EXISTS \"{table._meta.table_name}\" CASCADE'\n            elif DATABASE_TYPE == \"sqlite\":\n                sql = f'DROP TABLE IF EXISTS \"{table._meta.table_name}\"'\n            else:\n                raise ValueError(f\"Unsupported DATABASE_TYPE: {DATABASE_TYPE}\")\n\n            database.execute_sql(sql)\n\n\ndef database_exists():\n    try:\n        database.connect()\n        database.close()\n        return True\n    except Exception:\n        return False\n\n\ndef create_database():\n    if DATABASE_TYPE == \"postgres\":\n        # Connect to the default 'postgres' database to create a new database\n        conn = psycopg2.connect(\n            dbname='postgres',\n            user=DB_USER,\n            password=DB_PASSWORD,\n            host=DB_HOST,\n            port=DB_PORT\n        )\n        conn.autocommit = True\n        cursor = conn.cursor()\n\n        # Safely quote the database name\n        safe_db_name = quote_ident(DB_NAME, conn)\n\n        # Use the safely quoted database name in the SQL query\n        cursor.execute(f\"CREATE DATABASE {safe_db_name}\")\n\n        cursor.close()\n        conn.close()\n    else:\n        pass\n\n\ndef tables_exist():\n    if DATABASE_TYPE == \"postgres\":\n        for table in TABLES:\n            try:\n                database.get_tables().index(table._meta.table_name)\n            except ValueError:\n                return False\n    else:\n        pass\n    return True\n\n\nif __name__ == \"__main__\":\n    drop_tables()\n    create_tables()\n","file":"/pilot/database/database.py","fileHash":"7a2937cca61d82ac90b45d666e171cf8718df858e5a2768ff637119946d81787","hash":"7a2937cca61d82ac90b45d666e171cf8718df858e5a2768ff637119946d81787","processedContent":"from playhouse.shortcuts import model_to_dict #undefined\nfrom utils.style import color_yellow, color_red\n\"\"\"\nscip-python python temp indexer `pilot.utils.style`/__init__:: This code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.utils.style`/color_yellow.: undefined\nscip-python python temp indexer `pilot.utils.style`/color_red.: undefined\n\"\"\"\nfrom peewee import DoesNotExist, IntegrityError #undefined\nfrom functools import reduce\n\"\"\"\nscip-python python python-stdlib 3.11 functools/__init__:: undefined\nscip-python python python-stdlib 3.11 functools/reduce().: undefined\n\"\"\"\nimport operator #undefined\nimport psycopg2\nfrom psycopg2.extensions import quote_ident #undefined\n\nimport os #undefined\nfrom const.common import PROMPT_DATA_TO_IGNORE, STEPS\n\"\"\"\nscip-python python temp indexer `pilot.const.common`/__init__:: This code defines a set of constants and variables used in the project, including a list of folders to ignore during certain operations.\nscip-python python temp indexer `pilot.const.common`/PROMPT_DATA_TO_IGNORE.: undefined\nscip-python python temp indexer `pilot.const.common`/STEPS.: undefined\n\"\"\"\nfrom logger.logger import logger\n\"\"\"\nscip-python python temp indexer `pilot.logger.logger`/__init__:: This code sets up a custom logger for an application, which filters sensitive information from log records and removes ANSI escape sequences.\nscip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n\"\"\"\nfrom database.config import DB_NAME, DB_HOST, DB_PORT, DB_USER, DB_PASSWORD, DATABASE_TYPE\n\"\"\"\nscip-python python temp indexer `pilot.database.config`/__init__:: The code defines environment variables for a database connection, using the `os.getenv()` function to retrieve the values from the operating system environment.\nscip-python python temp indexer `pilot.database.config`/DB_NAME.: undefined\nscip-python python temp indexer `pilot.database.config`/DB_HOST.: undefined\nscip-python python temp indexer `pilot.database.config`/DB_PORT.: undefined\nscip-python python temp indexer `pilot.database.config`/DB_USER.: undefined\nscip-python python temp indexer `pilot.database.config`/DB_PASSWORD.: undefined\nscip-python python temp indexer `pilot.database.config`/DATABASE_TYPE.: undefined\n\"\"\"\nfrom database.models.components.base_models import database\n\"\"\"\nscip-python python temp indexer `pilot.database.models.components.base_models`/__init__:: The code defines a base model class for a database, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes functions to create a PostgreSQL or SQLite database connection based on the environment variable `DATABASE_TYPE`.\nscip-python python temp indexer `pilot.database.models.components.base_models`/database.: undefined\n\"\"\"\nfrom database.models.user import User\n\"\"\"\nscip-python python temp indexer `pilot.database.models.user`/__init__:: The code defines a base model class for a database and a user entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used.\nscip-python python temp indexer `pilot.database.models.user`/User#: This code defines a base model class for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The Meta class sets the database to be used.\n\"\"\"\nfrom database.models.app import App\n\"\"\"\nscip-python python temp indexer `pilot.database.models.app`/__init__:: The code defines a base model class for an application, with fields for a user ID, app type, name, and status. It also includes a ForeignKeyField to the User model and a CharField for each of these fields.\nscip-python python temp indexer `pilot.database.models.app`/App#: This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n\"\"\"\nfrom database.models.project_description import ProjectDescription\n\"\"\"\nscip-python python temp indexer `pilot.database.models.project_description`/__init__:: This code defines a model class called ProgressStep in Django, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\nscip-python python temp indexer `pilot.database.models.project_description`/ProjectDescription#: This code defines a model class called ProgressStep in Django, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n\"\"\"\nfrom database.models.user_stories import UserStories\n\"\"\"\nscip-python python temp indexer `pilot.database.models.user_stories`/__init__:: The code defines a Django model class called UserStories, which includes fields for a user entity and a custom JSON field for storing and retrieving JSON data in the database.\nscip-python python temp indexer `pilot.database.models.user_stories`/UserStories#: This code defines a model class called UserStories in Django, which includes fields for a user entity and custom JSON field for storing and retrieving JSON data in the database.\n\"\"\"\nfrom database.models.user_tasks import UserTasks\n\"\"\"\nscip-python python temp indexer `pilot.database.models.user_tasks`/__init__:: The code defines a Django model class called UserTasks, which includes fields for a user entity and a custom JSON field for storing and retrieving data in the database.\nscip-python python temp indexer `pilot.database.models.user_tasks`/UserTasks#: This code defines a model class called UserTasks in Django, which includes fields for a user entity and custom JSON field for storing and retrieving data in the database.\n\"\"\"\nfrom database.models.architecture import Architecture\n\"\"\"\nscip-python python temp indexer `pilot.database.models.architecture`/__init__:: The code defines a model class called ProgressStep in Django, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\nscip-python python temp indexer `pilot.database.models.architecture`/Architecture#: This code defines a model class called ProgressStep in Django, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The code also defines custom field types in Django called JSONField, which allow for storing and retrieving JSON data in the database, and it uses the json.loads() method to convert the value to JSON format.\n\"\"\"\nfrom database.models.development_planning import DevelopmentPlanning\n\"\"\"\nscip-python python temp indexer `pilot.database.models.development_planning`/__init__:: The code defines a model class called DevelopmentPlanning in Django, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\nscip-python python temp indexer `pilot.database.models.development_planning`/DevelopmentPlanning#: This code defines a model class called DevelopmentPlanning in Django, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The code also defines custom field types in Django called JSONField, which allow for storing and retrieving JSON data in the database, and it uses the json.loads() method to convert the value to JSON format.\n\"\"\"\nfrom database.models.development_steps import DevelopmentSteps\n\"\"\"\nscip-python python temp indexer `pilot.database.models.development_steps`/__init__:: The code defines a model for the development steps table in a database, with fields for an ID, creation and update timestamps, and a foreign key to the app entity. It also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\nscip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#: This code defines a model for the development steps table in the database. It includes fields for an ID, creation and update timestamps, and a foreign key to the app entity. The model also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\n\"\"\"\nfrom database.models.environment_setup import EnvironmentSetup\n\"\"\"\nscip-python python temp indexer `pilot.database.models.environment_setup`/__init__:: The code defines a model class called ProgressStep in Django, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\nscip-python python temp indexer `pilot.database.models.environment_setup`/EnvironmentSetup#: This code defines a model class called ProgressStep in Django, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n\"\"\"\nfrom database.models.development import Development\n\"\"\"\nscip-python python temp indexer `pilot.database.models.development`/__init__:: This code defines a model class called ProgressStep in Django, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\nscip-python python temp indexer `pilot.database.models.development`/Development#: This code defines a model class called ProgressStep in Django, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n\"\"\"\nfrom database.models.file_snapshot import FileSnapshot\n\"\"\"\nscip-python python temp indexer `pilot.database.models.file_snapshot`/__init__:: The code defines a base model class for a database, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes functions to create a PostgreSQL or SQLite database connection based on the environment variable `DATABASE_TYPE`.\nscip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#: This code defines a model for a file snapshot entity in a database, with fields for an ID, creation and update timestamps, and foreign keys to other entities such as apps, development steps, and files. It also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\n\"\"\"\nfrom database.models.command_runs import CommandRuns\n\"\"\"\nscip-python python temp indexer `pilot.database.models.command_runs`/__init__:: The code defines a model for storing information about command runs, including the app that ran the command, the command itself, and the response from the command. It also includes fields for tracking the previous step and high-level step of the command run.\nscip-python python temp indexer `pilot.database.models.command_runs`/CommandRuns#: This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n\"\"\"\nfrom database.models.user_apps import UserApps\n\"\"\"\nscip-python python temp indexer `pilot.database.models.user_apps`/__init__:: The code defines a base model class for an app entity and a user entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used.\nscip-python python temp indexer `pilot.database.models.user_apps`/UserApps#: This code defines a base model class for an app entity that includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also defines a base model class for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The Meta class sets the database to be used.\n\"\"\"\nfrom database.models.user_inputs import UserInputs\n\"\"\"\nscip-python python temp indexer `pilot.database.models.user_inputs`/__init__:: The code defines a model class for user inputs, with fields for an ID, app, query, user input, hint, previous step, and high-level step. It also includes a ForeignKeyField to the App model and a CharField for each of these fields.\nscip-python python temp indexer `pilot.database.models.user_inputs`/UserInputs#: This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n\"\"\"\nfrom database.models.files import File\n\"\"\"\nscip-python python temp indexer `pilot.database.models.files`/__init__:: The code defines a base model class for an app entity with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\nscip-python python temp indexer `pilot.database.models.files`/File#: This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n\"\"\"\nfrom database.models.feature import Feature\n\"\"\"\nscip-python python temp indexer `pilot.database.models.feature`/__init__:: The code defines a model for a feature entity in a database, with fields for an ID, creation and update timestamps, and a foreign key to the app entity. It also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\nscip-python python temp indexer `pilot.database.models.feature`/Feature#: This code defines a model for the development steps table in the database, with fields for an ID, creation and update timestamps, and a foreign key to the app entity. It also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\n\"\"\"\n\nTABLES = [\n            User, #This code defines a base model class for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The Meta class sets the database to be used.\n            App, #This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n            ProjectDescription, #This code defines a model class called ProgressStep in Django, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n            UserStories, #This code defines a model class called UserStories in Django, which includes fields for a user entity and custom JSON field for storing and retrieving JSON data in the database.\n            UserTasks, #This code defines a model class called UserTasks in Django, which includes fields for a user entity and custom JSON field for storing and retrieving data in the database.\n            Architecture, #This code defines a model class called ProgressStep in Django, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The code also defines custom field types in Django called JSONField, which allow for storing and retrieving JSON data in the database, and it uses the json.loads() method to convert the value to JSON format.\n            DevelopmentPlanning, #This code defines a model class called DevelopmentPlanning in Django, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The code also defines custom field types in Django called JSONField, which allow for storing and retrieving JSON data in the database, and it uses the json.loads() method to convert the value to JSON format.\n            DevelopmentSteps, #This code defines a model for the development steps table in the database. It includes fields for an ID, creation and update timestamps, and a foreign key to the app entity. The model also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\n            EnvironmentSetup, #This code defines a model class called ProgressStep in Django, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n            Development, #This code defines a model class called ProgressStep in Django, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n            FileSnapshot, #This code defines a model for a file snapshot entity in a database, with fields for an ID, creation and update timestamps, and foreign keys to other entities such as apps, development steps, and files. It also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\n            CommandRuns, #This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n            UserApps, #This code defines a base model class for an app entity that includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also defines a base model class for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The Meta class sets the database to be used.\n            UserInputs, #This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n            File, #This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n            Feature, #This code defines a model for the development steps table in the database, with fields for an ID, creation and update timestamps, and a foreign key to the app entity. It also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\n        ]\n\n\ndef get_created_apps():\n    \"\"\"This code retrieves a list of apps that have a name and status, using the SQLAlchemy ORM to query the database.\"\"\"\n    pass\n\n\ndef get_created_apps_with_steps():\n    \"\"\"This code retrieves a list of apps with their corresponding development steps, based on the app's status and ID.\"\"\"\n    pass\n\n\ndef get_all_app_development_steps(app_id):\n    \"\"\"This code retrieves all development steps for a specific app based on its ID.\"\"\"\n    pass\n\n\ndef save_user(user_id, email, password):\n    \"\"\"This code defines a function called `save_user` that takes in three parameters: `user_id`, `email`, and `password`. The function first tries to retrieve a user with the given `user_id` from the database. If the user is not found, it then tries to retrieve a user with the given `email` address. If no user is found with that email, a new user is created with the given `user_id`, `email`, and `password`.\"\"\"\n    pass\n\n\ndef update_app_status(app_id, new_status):\n    \"\"\"This code updates the status of an app in the database. It retrieves the app with the specified ID, sets its status to the new status provided, and saves the changes. If the app does not exist, it returns False.\"\"\"\n    pass\n\n\ndef get_user(user_id=None, email=None):\n    \"\"\"This code defines a function called `get_user` that retrieves a user from a database based on either a user ID or an email address. It checks for the presence of either parameter and raises an error if neither is provided. If both are provided, it uses the `or_` operator to create a query that retrieves the user based on either the ID or email.\"\"\"\n    pass\n\n\ndef save_app(project):\n    \"\"\"This code defines a function called `save_app` that saves an app entity to a database. It retrieves the app entity based on its ID, and then updates its fields with the values provided in the `args` dictionary. If the app entity does not exist, it creates a new one.\"\"\"\n    pass\n\n\ndef save_user_app(user_id, app_id, workspace):\n    \"\"\"This code defines a function called `save_user_app` that takes three arguments: `user_id`, `app_id`, and `workspace`. It checks if a user-app relationship exists for the given user and app IDs, and if not, it creates one. If the relationship does exist, it updates the workspace field for the existing record.\"\"\"\n    pass\n\n\ndef save_progress(app_id, step, data):\n    \"\"\"This code defines a function called `save_progress` that saves progress data for an app in a database. It retrieves the app entity from the database based on its ID, creates or updates a record in a table based on the step provided, and updates the status of the app in the database.\"\"\"\n    pass\n\n\ndef get_app(app_id, error_if_not_found=True):\n    \"\"\"This code defines a function called `get_app` that retrieves an app entity from the database based on its ID. It also includes error handling to raise a ValueError if the app is not found.\"\"\"\n    pass\n\n\ndef get_app_by_user_workspace(user_id, workspace):\n    \"\"\"This code defines a function called `get_app_by_user_workspace` that retrieves an app entity based on a user ID and workspace. It does this by querying the `UserApps` model, which is a base model class for an app entity that includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. The function returns the retrieved app entity or None if it doesn't exist.\"\"\"\n    pass\n\n\ndef get_progress_steps(app_id, step=None):\n    \"\"\"This code defines a function called `get_progress_steps` that retrieves progress steps for a given application ID. It uses a dictionary to map progress step names to their corresponding model classes, and it returns a dictionary of progress steps with their corresponding data.\"\"\"\n    pass\n\n\ndef get_db_model_from_hash_id(model, app_id, previous_step, high_level_step):\n    \"\"\"This code retrieves a database row from a model based on three parameters: app_id, previous_step, and high_level_step. It does this by using the get() method of the model class, which returns the row if it exists, or None if it doesn't.\"\"\"\n    pass\n\n\ndef hash_and_save_step(Model, app_id, unique_data_fields, data_fields, message):\n    \"\"\"This code defines a function called `hash_and_save_step` that takes in several parameters and performs a series of operations to save data to a database. The function first checks if a record with the same data already exists, and if so, it logs a warning message. If no record exists, it creates a new one and returns it.\"\"\"\n    pass\n\n\ndef save_development_step(project, prompt_path, prompt_data, messages, llm_response, exception=None):\n    \"\"\"This code defines a function called `save_development_step` that saves data to a database. It first checks if a record with the same data already exists, and if so, it logs a warning message. If no record exists, it creates a new one and returns it.\"\"\"\n    pass\n\n\ndef get_saved_development_step(project):\n    \"\"\"This code retrieves a development step from the database based on three parameters: app ID, previous step, and high-level step. It does this by using the get() method of the model class, which returns the row if it exists, or None if it doesn't.\"\"\"\n    pass\n\n\ndef save_command_run(project, command, cli_response, done_or_error_response, exit_code):\n    \"\"\"This code defines a function called `save_command_run` that saves data to a database. It first checks if a record with the same data already exists, and if so, logs a warning message. If no record exists, it creates a new one and returns it.\"\"\"\n    pass\n\n\ndef get_saved_command_run(project, command):\n    \"\"\"This code retrieves a database row from a model based on three parameters: app_id, previous_step, and high_level_step.\"\"\"\n    pass\n\n\ndef save_user_input(project, query, user_input, hint):\n    \"\"\"This code defines a function called `save_user_input` that takes in several parameters and saves data to a database. It first checks if a record with the same data already exists, and if so, it logs a warning message. If no record exists, it creates a new one and returns it.\"\"\"\n    pass\n\n\ndef get_saved_user_input(project, query):\n    \"\"\"This code retrieves a database row from a model based on three parameters: app_id, previous_step, and high_level_step.\"\"\"\n    pass\n\n\ndef delete_all_subsequent_steps(project):\n    \"\"\"This code deletes all subsequent steps in a development process after a specific step, including any file snapshots or features associated with those steps.\"\"\"\n    pass\n\n\ndef delete_subsequent_steps(Model, app, step):\n    \"\"\"This code deletes all subsequent steps in a development process after a specific step, including any file snapshots or features associated with those steps.\"\"\"\n    pass\n\n\ndef get_all_connected_steps(step, previous_step_field_name):\n    \"\"\"This code recursively retrieves all steps connected to a given step, by following the previous step field name.\"\"\"\n    pass\n\n\ndef delete_all_app_development_data(app):\n    \"\"\"This code deletes all data related to a specific app from the database, including development steps, command runs, user inputs, user apps, files, and file snapshots.\"\"\"\n    pass\n\n\ndef delete_unconnected_steps_from(step, previous_step_field_name):\n    \"\"\"This code retrieves all steps connected to a given step, and then deletes any unconnected steps from the database.\"\"\"\n    pass\n\n\ndef save_file_description(project, path, name, description):\n    \"\"\"This code defines a base model class for an app entity with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\"\"\"\n    pass\n\n\ndef save_feature(app_id, summary, messages, previous_step):\n    \"\"\"This code defines a function called `save_feature` that creates a new feature entity in the database based on the input parameters. It retrieves an app entity from the database using the `get_app` function, and then creates a new feature entity with the given summary, messages, and previous step. The function also includes error handling to raise a ValueError if the app is not found.\"\"\"\n    pass\n\n\ndef get_features_by_app_id(app_id):\n    \"\"\"This code defines a function called `get_features_by_app_id` that retrieves a list of features from the database based on an app ID. It includes error handling to raise a ValueError if the app is not found.\"\"\"\n    pass\n\n\ndef create_tables():\n    \"\"\"This code creates database tables using the `create_tables()` method of a database object, which is passed as an argument to the function.\"\"\"\n    pass\n\n\ndef drop_tables():\n    \"\"\"This code drops all tables in the database by iterating over a list of table names and executing a SQL statement to drop each table. The code checks the type of database being used and uses the appropriate syntax for that database.\"\"\"\n    pass\n\n\ndef database_exists():\n    \"\"\"This code checks if a database connection can be established. If it can, it returns True, indicating that the database exists. If not, it returns False, indicating that the database does not exist.\"\"\"\n    pass\n\n\ndef create_database():\n    \"\"\"This code creates a new database in PostgreSQL if the database type is \"postgres\".\"\"\"\n    pass\n\n\ndef tables_exist():\n    \"\"\"This code checks if a set of tables exist in a database. It does this by iterating over a list of table names and checking if they exist in the database using the `get_tables()` method. If any of the tables are missing, the function returns `False`. Otherwise, it returns `True`.\"\"\"\n    pass\n\n\nif __name__ == \"__main__\": #undefined\n    drop_tables() #This code drops all tables in the database by iterating over a list of table names and executing a SQL statement to drop each table. The code checks the type of database being used and uses the appropriate syntax for that database.\n    create_tables() #This code creates database tables using the `create_tables()` method of a database object, which is passed as an argument to the function.\n","documentation":"The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt."}},{"key":"scip-python python temp indexer `pilot.database.database`/create_tables().","attributes":{"symbol":"scip-python python temp indexer `pilot.database.database`/create_tables().","language":"python","range":[448,0,450,38],"content":"def create_tables():\n    with database:\n        database.create_tables(TABLES)","file":"/pilot/database/database.py","fileHash":"7a2937cca61d82ac90b45d666e171cf8718df858e5a2768ff637119946d81787","hash":"5776e9d23bbba5dd4c4dbff93126d89740957813b002f4d33570bda4d10f912e","processedContent":"def create_tables():\n    with database: #undefined\n        database.create_tables(TABLES)","documentation":"This code creates database tables using the `create_tables()` method of a database object, which is passed as an argument to the function."}},{"key":"scip-python python temp indexer `pilot.database.database`/drop_tables().","attributes":{"symbol":"scip-python python temp indexer `pilot.database.database`/drop_tables().","language":"python","range":[453,0,463,37],"content":"def drop_tables():\n    with database.atomic():\n        for table in TABLES:\n            if DATABASE_TYPE == \"postgres\":\n                sql = f'DROP TABLE IF EXISTS \"{table._meta.table_name}\" CASCADE'\n            elif DATABASE_TYPE == \"sqlite\":\n                sql = f'DROP TABLE IF EXISTS \"{table._meta.table_name}\"'\n            else:\n                raise ValueError(f\"Unsupported DATABASE_TYPE: {DATABASE_TYPE}\")\n\n            database.execute_sql(sql)","file":"/pilot/database/database.py","fileHash":"7a2937cca61d82ac90b45d666e171cf8718df858e5a2768ff637119946d81787","hash":"19985d582ca228cc208bcac79ad9580708fac0d303e6cb0d7e756c74b73717a3","processedContent":"def drop_tables():\n    with database.atomic(): #undefined\n        for table in TABLES: #undefined\n            if DATABASE_TYPE == \"postgres\": #undefined\n                sql = f'DROP TABLE IF EXISTS \"{table._meta.table_name}\" CASCADE'\n            elif DATABASE_TYPE == \"sqlite\": #undefined\n                sql = f'DROP TABLE IF EXISTS \"{table._meta.table_name}\"'\n            else:\n                raise ValueError(f\"Unsupported DATABASE_TYPE: {DATABASE_TYPE}\") #undefined\n\n            database.execute_sql(sql)","documentation":"This code drops all tables in the database by iterating over a list of table names and executing a SQL statement to drop each table. The code checks the type of database being used and uses the appropriate syntax for that database."}},{"key":"scip-python python temp indexer `pilot.instructions.comment`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.instructions.comment`/__init__:","range":[0,0,65,0],"content":"    # init CLI\n    # 1. show the type of the app that needs to be created\n    # 1.c ask user to press enter if it's ok, or to add the type of the app they want\n        # if it's not ok, check if the wanted app CAN be created\n            # if it can, print confirmation message and continue\n            # if it can't, print error message and exit\n    # 2. ask user for the main definition of the app\n    # start the processing queue\n\n\n# 2. show the user flow of the app\n# 2.c ask user to press enter if it's ok, or to add the user flow they want\n    # ask for input until they just press enter\n    # recompute the user flow and ask again\n# 3. show the COMPONENTS of the app\n    # 3.1 frontend\n    # 3.2 backend\n    # 3.3 database\n    # 3.4 config\n    # 3.x ask user to press enter if it's ok, or to add the components they want\n        # ask for input until they just press enter\n        # recompute the components and ask again\n# 4. break down the FILES that need to be created to support each of the components\n    # ask user to press enter if it's ok, or to add the files they want\n        # ask for input until they just press enter\n        # recompute the files and ask again\n# 5. loop through components (IMPORTANT!!!)\n    # 5.1 loop through use cases\n        # 5.1.1 for each case in each component, break down the files, functions and dependencies that need to be created\n            # each function will have a description\n            # in each loop, we will send all the previous files and functions so that LLM can change them if needed\n# 6. break down the tests that need to be created\n    # in the prompt, send all the files and functions\n    # start from the high level tests and go down to the unit tests\n    # 6.1 ask user to press enter if it's ok, or to add the tests they want\n        # ask for input until they just press enter\n        # recompute the tests and ask again\n# 7. write the tests\n# 8. write the files for each test\n# 9. run each created test once the code is written\n    # start from low level tests and do the high level tests last\n    # track which test is related to which code\n    # GPT should first say which functions will it use for a test and then we check if any of those functions is already written and if so, we send it to LLM to change it\n    # track code coverage and increase to get to 100%\n    # if the code requires something from config, ask the user to add it\n    # if the code requires\n    # when files overlap, ask LLM to combine them\n# 10. try debugging 5 times\n    # 10.1 if it doesn't work, ask the user to debug (!!!IMPORTANT!!!)\n        # show them the explanations\n        # ask for input if they want to enter something and retry 5 debugging attempts\n# 11. create build/run script\n# 12. RUN THE APP\n\n\n# 4. show the components of the app setup\n    # a. installation process\n    # b. configuration process\n    # c. running process\n    # d. building process\n    # e. testing process\n\n\n# comments\n# 1. Možemo koristiti dodatni model koji će izvlačiti iz GPT responsea što treba pokrenuti, što treba updateati, koji komentar složiti, etc. - da ne trebamo i to učiti originalni model in context\n","file":"/pilot/instructions.comment.py","language":"python","fileHash":"6737ad079e05c42e5788d2cad5a0668276798a0c421dd4a2bbed6feb0539cf57","hash":"6737ad079e05c42e5788d2cad5a0668276798a0c421dd4a2bbed6feb0539cf57","processedContent":"    # init CLI\n    # 1. show the type of the app that needs to be created\n    # 1.c ask user to press enter if it's ok, or to add the type of the app they want\n        # if it's not ok, check if the wanted app CAN be created\n            # if it can, print confirmation message and continue\n            # if it can't, print error message and exit\n    # 2. ask user for the main definition of the app\n    # start the processing queue\n\n\n# 2. show the user flow of the app\n# 2.c ask user to press enter if it's ok, or to add the user flow they want\n    # ask for input until they just press enter\n    # recompute the user flow and ask again\n# 3. show the COMPONENTS of the app\n    # 3.1 frontend\n    # 3.2 backend\n    # 3.3 database\n    # 3.4 config\n    # 3.x ask user to press enter if it's ok, or to add the components they want\n        # ask for input until they just press enter\n        # recompute the components and ask again\n# 4. break down the FILES that need to be created to support each of the components\n    # ask user to press enter if it's ok, or to add the files they want\n        # ask for input until they just press enter\n        # recompute the files and ask again\n# 5. loop through components (IMPORTANT!!!)\n    # 5.1 loop through use cases\n        # 5.1.1 for each case in each component, break down the files, functions and dependencies that need to be created\n            # each function will have a description\n            # in each loop, we will send all the previous files and functions so that LLM can change them if needed\n# 6. break down the tests that need to be created\n    # in the prompt, send all the files and functions\n    # start from the high level tests and go down to the unit tests\n    # 6.1 ask user to press enter if it's ok, or to add the tests they want\n        # ask for input until they just press enter\n        # recompute the tests and ask again\n# 7. write the tests\n# 8. write the files for each test\n# 9. run each created test once the code is written\n    # start from low level tests and do the high level tests last\n    # track which test is related to which code\n    # GPT should first say which functions will it use for a test and then we check if any of those functions is already written and if so, we send it to LLM to change it\n    # track code coverage and increase to get to 100%\n    # if the code requires something from config, ask the user to add it\n    # if the code requires\n    # when files overlap, ask LLM to combine them\n# 10. try debugging 5 times\n    # 10.1 if it doesn't work, ask the user to debug (!!!IMPORTANT!!!)\n        # show them the explanations\n        # ask for input if they want to enter something and retry 5 debugging attempts\n# 11. create build/run script\n# 12. RUN THE APP\n\n\n# 4. show the components of the app setup\n    # a. installation process\n    # b. configuration process\n    # c. running process\n    # d. building process\n    # e. testing process\n\n\n# comments\n# 1. Možemo koristiti dodatni model koji će izvlačiti iz GPT responsea što treba pokrenuti, što treba updateati, koji komentar složiti, etc. - da ne trebamo i to učiti originalni model in context\n","documentation":"The code is a step-by-step guide for creating a new application, starting with user input and ending with running the app. It includes prompts for user feedback and validation throughout the process."}},{"key":"scip-python python temp indexer `pilot.main`/init().","attributes":{"range":[21,0,34,20],"symbol":"scip-python python temp indexer `pilot.main`/init().","content":"def init():\n    # Check if the \"euclid\" database exists, if not, create it\n    if not database_exists():\n        create_database()\n\n    # Check if the tables exist, if not, create them\n    if not tables_exist():\n        create_tables()\n\n    arguments = get_arguments()\n\n    logger.info('Starting with args: %s', arguments)\n\n    return arguments","file":"/pilot/main.py","language":"python","fileHash":"5342d99869e01e9d1d8b5fd913c673c1a75be6f635ecbe347e14e5948a89ee89","hash":"51098e1ff94b5fc64c1cfbb01c4a7a8850f7a4dc86792549f560b74ae319de02","processedContent":"def init():\n    # Check if the \"euclid\" database exists, if not, create it\n    if not database_exists(): #This code checks if a database connection can be established. If it can, it returns True, indicating that the database exists. If not, it returns False, indicating that the database does not exist.\n        create_database() #This code creates a new database in PostgreSQL if the database type is \"postgres\".\n\n    # Check if the tables exist, if not, create them\n    if not tables_exist(): #This code checks if a set of tables exist in a database. It does this by iterating over a list of table names and checking if they exist in the database using the `get_tables()` method. If any of the tables are missing, the function returns `False`. Otherwise, it returns `True`.\n        create_tables() #This code creates database tables using the `create_tables()` method of a database object, which is passed as an argument to the function.\n\n    arguments = get_arguments() #The code defines a function called `get_arguments()` that retrieves command-line arguments and sets up the environment for the Pilot app. It checks for the presence of certain arguments, such as `app_id`, `workspace`, and `step`, and sets default values if they are not provided. It also handles errors and prints messages to the console.\n\n    logger.info('Starting with args: %s', arguments)\n    \"\"\"\n    scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n    scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n    \"\"\"\n\n    return arguments","documentation":"The code checks if a database and tables exist, creates them if necessary, and retrieves command-line arguments to set up the environment for the Pilot app."}},{"key":"scip-python python temp indexer `pilot.main`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.main`/__init__:","range":[0,0,89,0],"content":"# main.py\nfrom __future__ import print_function, unicode_literals\nimport builtins\nimport os\n\nimport sys\nimport traceback\nfrom dotenv import load_dotenv\nload_dotenv()\n\nfrom utils.style import color_red\nfrom utils.custom_print import get_custom_print\nfrom helpers.Project import Project\nfrom utils.arguments import get_arguments\nfrom utils.exit import exit_gpt_pilot\nfrom logger.logger import logger\nfrom database.database import database_exists, create_database, tables_exist, create_tables, get_created_apps_with_steps\n\nfrom utils.settings import settings, loader\nfrom utils.telemetry import telemetry\n\ndef init():\n    # Check if the \"euclid\" database exists, if not, create it\n    if not database_exists():\n        create_database()\n\n    # Check if the tables exist, if not, create them\n    if not tables_exist():\n        create_tables()\n\n    arguments = get_arguments()\n\n    logger.info('Starting with args: %s', arguments)\n\n    return arguments\n\n\nif __name__ == \"__main__\":\n    ask_feedback = True\n    project = None\n    run_exit_fn = True\n    try:\n        # sys.argv.append('--ux-test=' + 'continue_development')\n\n        args = init()\n\n        builtins.print, ipc_client_instance = get_custom_print(args)\n\n\n        if '--api-key' in args:\n            os.environ[\"OPENAI_API_KEY\"] = args['--api-key']\n        if '--get-created-apps-with-steps' in args:\n            if ipc_client_instance is not None:\n                print({ 'db_data': get_created_apps_with_steps() }, type='info')\n            else:\n                print('----------------------------------------------------------------------------------------')\n                print('app_id                                step                 dev_step  name')\n                print('----------------------------------------------------------------------------------------')\n                print('\\n'.join(f\"{app['id']}: {app['status']:20}      \"\n                                f\"{'' if len(app['development_steps']) == 0 else app['development_steps'][-1]['id']:3}\"\n                                f\"  {app['name']}\" for app in get_created_apps_with_steps()))\n                run_exit_fn = False\n        elif '--ux-test' in args:\n            from test.ux_tests import run_test\n            run_test(args['--ux-test'], args)\n            run_exit_fn = False\n        else:\n            if settings.telemetry is None:\n                telemetry.setup()\n                loader.save(\"telemetry\")\n\n            if args.get(\"app_id\"):\n                telemetry.set(\"is_continuation\", True)\n\n            # TODO get checkpoint from database and fill the project with it\n            project = Project(args, ipc_client_instance=ipc_client_instance)\n            project.start()\n            project.finish()\n            telemetry.set(\"end_result\", \"success\")\n    except Exception:\n        print(color_red('---------- GPT PILOT EXITING WITH ERROR ----------'))\n        traceback.print_exc()\n        print(color_red('--------------------------------------------------'))\n        ask_feedback = False\n        telemetry.set(\"end_result\", \"failure\")\n    finally:\n        if run_exit_fn:\n            exit_gpt_pilot(project, ask_feedback)\n        sys.exit(0)\n","file":"/pilot/main.py","language":"python","fileHash":"5342d99869e01e9d1d8b5fd913c673c1a75be6f635ecbe347e14e5948a89ee89","hash":"5342d99869e01e9d1d8b5fd913c673c1a75be6f635ecbe347e14e5948a89ee89","processedContent":"# main.py\nfrom __future__ import print_function, unicode_literals\n\"\"\"\nscip-python python python-stdlib 3.11 __future__/__init__:: undefined\nscip-python python python-stdlib 3.11 __future__/print_function.print_function.: undefined\nscip-python python python-stdlib 3.11 __future__/unicode_literals.unicode_literals.: undefined\n\"\"\"\nimport builtins\nimport os #undefined\n\nimport sys #undefined\nimport traceback #undefined\nfrom dotenv import load_dotenv\n\"\"\"\nscip-python python python-dotenv 1.0.0 dotenv/__init__:: undefined\nscip-python python python-dotenv 1.0.0 `dotenv.main`/load_dotenv().: undefined\n\"\"\"\nload_dotenv() #undefined\n\nfrom utils.style import color_red\n\"\"\"\nscip-python python temp indexer `pilot.utils.style`/__init__:: This code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.utils.style`/color_red.: undefined\n\"\"\"\nfrom utils.custom_print import get_custom_print\n\"\"\"\nscip-python python temp indexer `pilot.utils.custom_print`/__init__:: The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.utils.custom_print`/get_custom_print().: This code defines a function called `get_custom_print` that returns a tuple of two functions: `print_to_external_process` and `local_print`. The first function sends a message to an external process over a network connection, while the second function prints the message to the console.\n\"\"\"\nfrom helpers.Project import Project\n\"\"\"\nscip-python python temp indexer `pilot.helpers.project`/__init__:: The code defines a Python class called \"Project\" that represents a software development project, with functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\nscip-python python temp indexer `pilot.helpers.project`/Project#: The code defines a class called \"Project\" that represents a software development project. It includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\n\"\"\"\nfrom utils.arguments import get_arguments\n\"\"\"\nscip-python python temp indexer `pilot.utils.arguments`/__init__:: The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.utils.arguments`/get_arguments().: The code defines a function called `get_arguments()` that retrieves command-line arguments and sets up the environment for the Pilot app. It checks for the presence of certain arguments, such as `app_id`, `workspace`, and `step`, and sets default values if they are not provided. It also handles errors and prints messages to the console.\n\"\"\"\nfrom utils.exit import exit_gpt_pilot\n\"\"\"\nscip-python python temp indexer `pilot.utils.exit`/__init__:: The code defines a command-line interface for executing commands and interacting with a language model. It includes functions for running commands, checking their output, and handling errors, as well as functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model.\nscip-python python temp indexer `pilot.utils.exit`/exit_gpt_pilot().: The code defines a function called `exit_gpt_pilot` that terminates running processes, calculates a unique identifier for the current installation directory, sends telemetry data to a remote API, and stores user input in a database.\n\"\"\"\nfrom logger.logger import logger\n\"\"\"\nscip-python python temp indexer `pilot.logger.logger`/__init__:: This code sets up a custom logger for an application, which filters sensitive information from log records and removes ANSI escape sequences.\nscip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n\"\"\"\nfrom database.database import database_exists, create_database, tables_exist, create_tables, get_created_apps_with_steps\n\"\"\"\nscip-python python temp indexer `pilot.database.database`/__init__:: The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.database.database`/database_exists().: This code checks if a database connection can be established. If it can, it returns True, indicating that the database exists. If not, it returns False, indicating that the database does not exist.\nscip-python python temp indexer `pilot.database.database`/create_database().: This code creates a new database in PostgreSQL if the database type is \"postgres\".\nscip-python python temp indexer `pilot.database.database`/tables_exist().: This code checks if a set of tables exist in a database. It does this by iterating over a list of table names and checking if they exist in the database using the `get_tables()` method. If any of the tables are missing, the function returns `False`. Otherwise, it returns `True`.\nscip-python python temp indexer `pilot.database.database`/create_tables().: This code creates database tables using the `create_tables()` method of a database object, which is passed as an argument to the function.\nscip-python python temp indexer `pilot.database.database`/get_created_apps_with_steps().: This code retrieves a list of apps with their corresponding development steps, based on the app's status and ID.\n\"\"\"\n\nfrom utils.settings import settings, loader\n\"\"\"\nscip-python python temp indexer `pilot.utils.settings`/__init__:: This code defines a class called `Settings` that holds all the settings for an application, and a class called `Loader` that loads and saves application settings from a JSON file. It also updates the settings with values from environment variables and command line arguments.\nscip-python python temp indexer `pilot.utils.settings`/settings.: undefined\nscip-python python temp indexer `pilot.utils.settings`/loader.: undefined\n\"\"\"\nfrom utils.telemetry import telemetry\n\"\"\"\nscip-python python temp indexer `pilot.utils.telemetry`/__init__:: This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server.\nscip-python python temp indexer `pilot.utils.telemetry`/telemetry.: undefined\n\"\"\"\n\ndef init():\n    \"\"\"The code checks if a database and tables exist, creates them if necessary, and retrieves command-line arguments to set up the environment for the Pilot app.\"\"\"\n    pass\n\n\nif __name__ == \"__main__\": #undefined\n    ask_feedback = True\n    project = None\n    run_exit_fn = True\n    try:\n        # sys.argv.append('--ux-test=' + 'continue_development')\n\n        args = init() #The code checks if a database and tables exist, creates them if necessary, and retrieves command-line arguments to set up the environment for the Pilot app.\n\n        builtins.print, ipc_client_instance = get_custom_print(args)\n        \"\"\"\n        scip-python python temp indexer `pilot.utils.custom_print`/get_custom_print().: This code defines a function called `get_custom_print` that returns a tuple of two functions: `print_to_external_process` and `local_print`. The first function sends a message to an external process over a network connection, while the second function prints the message to the console.\n        scip-python python temp indexer `pilot.main`/args.: undefined\n        \"\"\"\n\n\n        if '--api-key' in args: #undefined\n            os.environ[\"OPENAI_API_KEY\"] = args['--api-key']\n            \"\"\"\n            scip-python python python-stdlib 3.11 os/__init__:: undefined\n            scip-python python temp indexer `pilot.main`/args.: undefined\n            scip-python python python-stdlib 3.11 os/environ.environ.: undefined\n            \"\"\"\n        if '--get-created-apps-with-steps' in args: #undefined\n            if ipc_client_instance is not None: #undefined\n                print({ 'db_data': get_created_apps_with_steps() }, type='info') #This code retrieves a list of apps with their corresponding development steps, based on the app's status and ID.\n            else:\n                print('----------------------------------------------------------------------------------------')\n                print('app_id                                step                 dev_step  name')\n                print('----------------------------------------------------------------------------------------')\n                print('\\n'.join(f\"{app['id']}: {app['status']:20}      \"\n                                f\"{'' if len(app['development_steps']) == 0 else app['development_steps'][-1]['id']:3}\"\n                                f\"  {app['name']}\" for app in get_created_apps_with_steps())) #This code retrieves a list of apps with their corresponding development steps, based on the app's status and ID.\n                run_exit_fn = False #undefined\n        elif '--ux-test' in args: #undefined\n            from test.ux_tests import run_test\n            \"\"\"\n            scip-python python temp indexer `pilot.test.ux_tests`/__init__:: This code defines a function called \"run_test\" that takes two arguments and checks if the test is defined in a dictionary of available tests, and if so, runs it by calling the corresponding function with the given arguments.\n            scip-python python temp indexer `pilot.test.ux_tests`/run_test().: This code defines a function called \"run_test\" that takes two arguments: a string representing the name of a UX test, and a dictionary of arguments to be passed to the test. The function then checks if the test is defined in a dictionary of available tests, and if so, runs it by calling the corresponding function with the given arguments. If the test is not found, it prints an error message.\n            \"\"\"\n            run_test(args['--ux-test'], args)\n            \"\"\"\n            scip-python python temp indexer `pilot.main`/args.: undefined\n            scip-python python temp indexer `pilot.main`/args.: undefined\n            scip-python python temp indexer `pilot.test.ux_tests`/run_test().: This code defines a function called \"run_test\" that takes two arguments: a string representing the name of a UX test, and a dictionary of arguments to be passed to the test. The function then checks if the test is defined in a dictionary of available tests, and if so, runs it by calling the corresponding function with the given arguments. If the test is not found, it prints an error message.\n            \"\"\"\n            run_exit_fn = False\n        else:\n            if settings.telemetry is None: #undefined\n                telemetry.setup()\n                \"\"\"\n                scip-python python temp indexer `pilot.utils.telemetry`/telemetry.: undefined\n                scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#setup().: This code sets up a new unique telemetry ID and default phone-home endpoint. It should only be called once at initial GPT-Pilot setup.\n                \"\"\"\n                loader.save(\"telemetry\")\n                \"\"\"\n                scip-python python temp indexer `pilot.utils.settings`/loader.: undefined\n                scip-python python temp indexer `pilot.utils.settings`/Loader#save().: This code defines a `save()` method that updates the config file with only the settings listed in the `args` parameter, while preserving any existing settings that might have been overridden from environment variables or command line arguments.\n                \"\"\"\n\n            if args.get(\"app_id\"): #undefined\n                telemetry.set(\"is_continuation\", True) #undefined\n\n            # TODO get checkpoint from database and fill the project with it\n            project = Project(args, ipc_client_instance=ipc_client_instance)\n            \"\"\"\n            scip-python python temp indexer `pilot.helpers.project`/Project#: The code defines a class called \"Project\" that represents a software development project. It includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\n            scip-python python temp indexer `pilot.main`/args.: undefined\n            scip-python python temp indexer `pilot.main`/ipc_client_instance.: undefined\n            scip-python python temp indexer `pilot.main`/project.: undefined\n            \"\"\"\n            project.start()\n            \"\"\"\n            scip-python python temp indexer `pilot.main`/project.: undefined\n            scip-python python temp indexer `pilot.helpers.project`/Project#start().: The code defines a class called \"Project\" that represents a software development project. It includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\n            \"\"\"\n            project.finish()\n            \"\"\"\n            scip-python python temp indexer `pilot.main`/project.: undefined\n            scip-python python temp indexer `pilot.helpers.project`/Project#finish().: This code defines a function called `finish` that retrieves user input from a database, styles the question, and saves the response to the database. It also logs the question and answer to a logger.\n            \"\"\"\n            telemetry.set(\"end_result\", \"success\") #undefined\n    except Exception:\n        print(color_red('---------- GPT PILOT EXITING WITH ERROR ----------')) #undefined\n        traceback.print_exc()\n        \"\"\"\n        scip-python python python-stdlib 3.11 traceback/__init__:: undefined\n        scip-python python python-stdlib 3.11 traceback/print_exc().: undefined\n        \"\"\"\n        print(color_red('--------------------------------------------------')) #undefined\n        ask_feedback = False #undefined\n        telemetry.set(\"end_result\", \"failure\") #undefined\n    finally:\n        if run_exit_fn: #undefined\n            exit_gpt_pilot(project, ask_feedback)\n            \"\"\"\n            scip-python python temp indexer `pilot.utils.exit`/exit_gpt_pilot().: The code defines a function called `exit_gpt_pilot` that terminates running processes, calculates a unique identifier for the current installation directory, sends telemetry data to a remote API, and stores user input in a database.\n            scip-python python temp indexer `pilot.main`/project.: undefined\n            scip-python python temp indexer `pilot.main`/ask_feedback.: undefined\n            \"\"\"\n        sys.exit(0) #undefined\n","documentation":"The code is a Python script that sets up a custom logger, checks for the existence of a database and tables, creates them if necessary, and retrieves command-line arguments to set up the environment for the Pilot app. It also defines a class called \"Project\" that represents a software development project, and includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks."}},{"key":"scip-python python python-stdlib 3.11 __future__/__init__:","attributes":{"symbol":"scip-python python python-stdlib 3.11 __future__/__init__:","language":"python"}},{"key":"scip-python python python-stdlib 3.11 __future__/print_function.print_function.","attributes":{"symbol":"scip-python python python-stdlib 3.11 __future__/print_function.print_function.","language":"python"}},{"key":"scip-python python python-stdlib 3.11 __future__/unicode_literals.unicode_literals.","attributes":{"symbol":"scip-python python python-stdlib 3.11 __future__/unicode_literals.unicode_literals.","language":"python"}},{"key":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"symbol":"scip-python python python-stdlib 3.11 os/__init__:","language":"python"}},{"key":"scip-python python python-stdlib 3.11 sys/__init__:","attributes":{"symbol":"scip-python python python-stdlib 3.11 sys/__init__:","language":"python"}},{"key":"scip-python python python-stdlib 3.11 traceback/__init__:","attributes":{"symbol":"scip-python python python-stdlib 3.11 traceback/__init__:","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.style`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.style`/__init__:","language":"python","range":[0,0,172,0],"content":"from colorama import Fore, Style as ColoramaStyle, init\r\nfrom enum import Enum\r\nfrom questionary import Style\r\n\r\n# Initialize colorama. Ensures that ANSI codes work on Windows systems.\r\ninit(autoreset=True)\r\n\r\n\r\nclass Theme(Enum):\r\n    \"\"\"\r\n    Enum representing themes, which can be either DARK or LIGHT.\r\n    \"\"\"\r\n    DARK = 'dark'\r\n    LIGHT = 'light'\r\n    YELLOW = 'yellow'\r\n\r\n\r\nclass ColorName(Enum):\r\n    \"\"\"\r\n    Enum representing color names and their corresponding ANSI color codes.\r\n    Each color has a normal and a light version, indicated by the two elements in the tuple.\r\n    \"\"\"\r\n    RED = (Fore.RED, Fore.LIGHTRED_EX)\r\n    GREEN = (Fore.GREEN, Fore.LIGHTGREEN_EX)\r\n    YELLOW = (Fore.YELLOW, Fore.LIGHTYELLOW_EX)\r\n    BLUE = (Fore.BLUE, Fore.LIGHTBLUE_EX)\r\n    CYAN = (Fore.CYAN, Fore.LIGHTCYAN_EX)\r\n    WHITE = (Fore.WHITE, Fore.LIGHTWHITE_EX)\r\n\r\n\r\nTHEME_STYLES = {\r\n    # Style configurations for DARK theme\r\n    Theme.DARK: Style.from_dict({\r\n        'question': '#FFFFFF bold',  # the color and style of the question - White\r\n        'answer': '#FF910A bold',  # the color and style of the answer - Dark Orange / Pumpkin\r\n        'pointer': '#FF4500 bold',  # the color and style of the pointer - Orange Red\r\n        'highlighted': '#63CD91 bold',  # the color and style of the highlighted option - Medium Aquamarine\r\n        'instruction': '#FFFF00 bold'  # the color and style of the instruction - Yellow\r\n    }),\r\n    # Style configurations for LIGHT theme\r\n    Theme.LIGHT: Style.from_dict({\r\n        'question': '#000000 bold',  # the color and style of the question - Black\r\n        'answer': '#FFB74D bold',  # the color and style of the answer - Light Orange\r\n        'pointer': '#FF7043 bold',  # the color and style of the pointer - Light Red\r\n        'highlighted': '#AED581 bold',  # the color and style of the highlighted option - Light Green\r\n        'instruction': '#757575 bold'  # the color and style of the instruction - Grey\r\n    }),\r\n    # Style configurations for LIGHT theme\r\n    Theme.YELLOW: Style.from_dict({\r\n        'question': '#FFFF00 bold',  # the color and style of the question - Black\r\n        'answer': '#FFB74D bold',  # the color and style of the answer - Light Orange\r\n        'pointer': '#FF7043 bold',  # the color and style of the pointer - Light Red\r\n    })\r\n}\r\n\r\n\r\nclass ThemeStyle:\r\n    \"\"\"\r\n    Class that provides style configurations for DARK and LIGHT themes.\r\n    \"\"\"\r\n\r\n    def __init__(self, theme):\r\n        \"\"\"\r\n        Initializes a ThemeStyle instance.\r\n\r\n        Args:\r\n            theme (Theme): An enum member indicating the theme to use.\r\n        \"\"\"\r\n        self.theme = theme\r\n\r\n    def get_style(self):\r\n        \"\"\"\r\n        Returns the Style configuration for the current theme.\r\n\r\n        Returns:\r\n            questionary.Style: The Style instance for the current theme.\r\n        \"\"\"\r\n        return THEME_STYLES[self.theme]\r\n\r\n\r\nclass StyleConfig:\r\n    \"\"\"\r\n    Class to manage the application's style and color configurations.\r\n    \"\"\"\r\n\r\n    def __init__(self, theme: Theme = Theme.DARK):\r\n        \"\"\"\r\n        Initializes a StyleConfig instance.\r\n\r\n        Args:\r\n            theme (Theme, optional): The initial theme to use. Defaults to Theme.DARK.\r\n        \"\"\"\r\n        self.theme_style = ThemeStyle(theme)\r\n        self.theme = theme\r\n\r\n    def get_style(self):\r\n        \"\"\"\r\n        Retrieves the Style configuration from the theme_style instance.\r\n\r\n        Returns:\r\n            questionary.Style: The Style configuration.\r\n        \"\"\"\r\n        return self.theme_style.get_style()\r\n\r\n    def get_color(self, color_name: ColorName):\r\n        \"\"\"\r\n        Retrieves the ANSI color code for the provided color_name, taking into account the current theme.\r\n\r\n        Args:\r\n            color_name (ColorName): Enum member indicating the desired color.\r\n\r\n        Returns:\r\n            str: The ANSI color code.\r\n        \"\"\"\r\n        return color_name.value[self.theme == Theme.LIGHT]\r\n\r\n    def set_theme(self, theme: Theme):\r\n        \"\"\"\r\n        Updates the theme of both the StyleConfig and its theme_style instance.\r\n\r\n        Args:\r\n            theme (Theme): Enum member indicating the new theme.\r\n        \"\"\"\r\n        self.theme = theme\r\n        self.theme_style.theme = theme\r\n\r\n\r\ndef get_color_function(color_name: ColorName, bold: bool = False):\r\n    \"\"\"\r\n    Returns a function that colorizes text using the provided color_name and optionally makes it bold.\r\n\r\n    Args:\r\n        color_name (ColorName): Enum member indicating the color to use.\r\n        bold (bool, optional): If True, the returned function will bold text. Defaults to False.\r\n\r\n    Returns:\r\n        Callable[[str], str]: A function that takes a string and returns it colorized.\r\n    \"\"\"\r\n\r\n    def color_func(text: str) -> str:\r\n        \"\"\"\r\n        Colorizes the input text using the color and boldness provided when `get_color_function` was called.\r\n\r\n        Args:\r\n            text (str): The text to colorize.\r\n\r\n        Returns:\r\n            str: The colorized text.\r\n        \"\"\"\r\n        color = style_config.get_color(color_name)\r\n        style = ColoramaStyle.BRIGHT if bold else \"\"\r\n        reset = ColoramaStyle.RESET_ALL  # Reset code to reset the color\r\n        return f'{color}{style}{text}{reset}'\r\n\r\n    return color_func\r\n\r\n\r\nstyle_config = StyleConfig()\r\n\r\n# Dynamically generate color functions\r\ncolor_red = get_color_function(ColorName.RED)\r\ncolor_red_bold = get_color_function(ColorName.RED, True)\r\ncolor_green = get_color_function(ColorName.GREEN)\r\ncolor_green_bold = get_color_function(ColorName.GREEN, True)\r\ncolor_yellow = get_color_function(ColorName.YELLOW)\r\ncolor_yellow_bold = get_color_function(ColorName.YELLOW, True)\r\ncolor_blue = get_color_function(ColorName.BLUE)\r\ncolor_blue_bold = get_color_function(ColorName.BLUE, True)\r\ncolor_cyan = get_color_function(ColorName.CYAN)\r\ncolor_cyan_bold = get_color_function(ColorName.CYAN, True)\r\ncolor_white = get_color_function(ColorName.WHITE)\r\ncolor_white_bold = get_color_function(ColorName.WHITE, True)\r\n","file":"/pilot/utils/style.py","fileHash":"33e7fefaa7ec7f2c2886680d98d91761ef9d5b339dcbe55923c17e4bb3475750","hash":"33e7fefaa7ec7f2c2886680d98d91761ef9d5b339dcbe55923c17e4bb3475750","processedContent":"from colorama import Fore, Style as ColoramaStyle, init\r\n\"\"\"\nscip-python python colorama 0.4.6 colorama/__init__:: undefined\nscip-python python colorama 0.4.6 `colorama.ansi`/Fore.Fore.: undefined\nscip-python python colorama 0.4.6 `colorama.ansi`/Style.Style.: undefined\nscip-python python colorama 0.4.6 `colorama.initialise`/init().: undefined\n\"\"\"\nfrom enum import Enum\r\n\"\"\"\nscip-python python python-stdlib 3.11 enum/__init__:: undefined\nscip-python python python-stdlib 3.11 enum/Enum#: undefined\n\"\"\"\nfrom questionary import Style\r #The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\n\r\n# Initialize colorama. Ensures that ANSI codes work on Windows systems.\r\ninit(autoreset=True)\r #undefined\n\r\n\r\nclass Theme(Enum):\r\n    \"\"\"This code defines an Enum class called Theme, which represents themes that can be either DARK or LIGHT.\"\"\"\n    pass\n\r\n\r\nclass ColorName(Enum):\r\n    \"\"\"This code defines an enumeration called `ColorName` that represents different colors and their corresponding ANSI color codes. The enumeration has six elements, each of which is a tuple containing two values: the normal and light versions of a color.\"\"\"\n    pass\n\r\n\r\nTHEME_STYLES = {\r\n    # Style configurations for DARK theme\r\n    Theme.DARK: Style.from_dict({\r\n    \"\"\"\n    scip-python python temp indexer `pilot.utils.style`/Theme#: This code defines an Enum class called Theme, which represents themes that can be either DARK or LIGHT.\n    scip-python python temp indexer `pilot.utils.style`/Theme#DARK.: undefined\n    \"\"\"\n        'question': '#FFFFFF bold',  # the color and style of the question - White\r\n        'answer': '#FF910A bold',  # the color and style of the answer - Dark Orange / Pumpkin\r\n        'pointer': '#FF4500 bold',  # the color and style of the pointer - Orange Red\r\n        'highlighted': '#63CD91 bold',  # the color and style of the highlighted option - Medium Aquamarine\r\n        'instruction': '#FFFF00 bold'  # the color and style of the instruction - Yellow\r\n    }),\r\n    # Style configurations for LIGHT theme\r\n    Theme.LIGHT: Style.from_dict({\r\n    \"\"\"\n    scip-python python temp indexer `pilot.utils.style`/Theme#: This code defines an Enum class called Theme, which represents themes that can be either DARK or LIGHT.\n    scip-python python temp indexer `pilot.utils.style`/Theme#LIGHT.: undefined\n    \"\"\"\n        'question': '#000000 bold',  # the color and style of the question - Black\r\n        'answer': '#FFB74D bold',  # the color and style of the answer - Light Orange\r\n        'pointer': '#FF7043 bold',  # the color and style of the pointer - Light Red\r\n        'highlighted': '#AED581 bold',  # the color and style of the highlighted option - Light Green\r\n        'instruction': '#757575 bold'  # the color and style of the instruction - Grey\r\n    }),\r\n    # Style configurations for LIGHT theme\r\n    Theme.YELLOW: Style.from_dict({\r\n    \"\"\"\n    scip-python python temp indexer `pilot.utils.style`/Theme#: This code defines an Enum class called Theme, which represents themes that can be either DARK or LIGHT.\n    scip-python python temp indexer `pilot.utils.style`/Theme#YELLOW.: undefined\n    \"\"\"\n        'question': '#FFFF00 bold',  # the color and style of the question - Black\r\n        'answer': '#FFB74D bold',  # the color and style of the answer - Light Orange\r\n        'pointer': '#FF7043 bold',  # the color and style of the pointer - Light Red\r\n    })\r\n}\r\n\r\n\r\nclass ThemeStyle:\r\n    \"\"\"This code defines a class called ThemeStyle that provides style configurations for DARK and LIGHT themes. The class has an initializer method that takes a theme parameter, which is an enum member indicating the theme to use. The get_style method returns the Style instance for the current theme.\"\"\"\n    pass\n\r\n\r\nclass StyleConfig:\r\n    \"\"\"This code defines a class called StyleConfig that manages the application's style and color configurations. It initializes a theme style based on a provided theme parameter, retrieves the Style configuration from a theme_style instance, and provides functions to retrieve ANSI color codes for given color names based on the current theme.\"\"\"\n    pass\n\r\n\r\ndef get_color_function(color_name: ColorName, bold: bool = False):\r\n    \"\"\"This code defines a function called `get_color_function` that takes two arguments: `color_name` and `bold`. It returns a function that colorizes text using the provided color name and optionally makes it bold.\"\"\"\n    pass\n\r\n\r\nstyle_config = StyleConfig()\r #This code defines a class called StyleConfig that manages the application's style and color configurations. It initializes a theme style based on a provided theme parameter, retrieves the Style configuration from a theme_style instance, and provides functions to retrieve ANSI color codes for given color names based on the current theme.\n\r\n# Dynamically generate color functions\r\ncolor_red = get_color_function(ColorName.RED)\r\n\"\"\"\nscip-python python temp indexer `pilot.utils.style`/get_color_function().: This code defines a function called `get_color_function` that takes two arguments: `color_name` and `bold`. It returns a function that colorizes text using the provided color name and optionally makes it bold.\nscip-python python temp indexer `pilot.utils.style`/ColorName#: This code defines an enumeration called `ColorName` that represents different colors and their corresponding ANSI color codes. The enumeration has six elements, each of which is a tuple containing two values: the normal and light versions of a color.\nscip-python python temp indexer `pilot.utils.style`/ColorName#RED.: undefined\n\"\"\"\ncolor_red_bold = get_color_function(ColorName.RED, True)\r\n\"\"\"\nscip-python python temp indexer `pilot.utils.style`/get_color_function().: This code defines a function called `get_color_function` that takes two arguments: `color_name` and `bold`. It returns a function that colorizes text using the provided color name and optionally makes it bold.\nscip-python python temp indexer `pilot.utils.style`/ColorName#: This code defines an enumeration called `ColorName` that represents different colors and their corresponding ANSI color codes. The enumeration has six elements, each of which is a tuple containing two values: the normal and light versions of a color.\nscip-python python temp indexer `pilot.utils.style`/ColorName#RED.: undefined\n\"\"\"\ncolor_green = get_color_function(ColorName.GREEN)\r\n\"\"\"\nscip-python python temp indexer `pilot.utils.style`/get_color_function().: This code defines a function called `get_color_function` that takes two arguments: `color_name` and `bold`. It returns a function that colorizes text using the provided color name and optionally makes it bold.\nscip-python python temp indexer `pilot.utils.style`/ColorName#: This code defines an enumeration called `ColorName` that represents different colors and their corresponding ANSI color codes. The enumeration has six elements, each of which is a tuple containing two values: the normal and light versions of a color.\nscip-python python temp indexer `pilot.utils.style`/ColorName#GREEN.: undefined\n\"\"\"\ncolor_green_bold = get_color_function(ColorName.GREEN, True)\r\n\"\"\"\nscip-python python temp indexer `pilot.utils.style`/get_color_function().: This code defines a function called `get_color_function` that takes two arguments: `color_name` and `bold`. It returns a function that colorizes text using the provided color name and optionally makes it bold.\nscip-python python temp indexer `pilot.utils.style`/ColorName#: This code defines an enumeration called `ColorName` that represents different colors and their corresponding ANSI color codes. The enumeration has six elements, each of which is a tuple containing two values: the normal and light versions of a color.\nscip-python python temp indexer `pilot.utils.style`/ColorName#GREEN.: undefined\n\"\"\"\ncolor_yellow = get_color_function(ColorName.YELLOW)\r\n\"\"\"\nscip-python python temp indexer `pilot.utils.style`/get_color_function().: This code defines a function called `get_color_function` that takes two arguments: `color_name` and `bold`. It returns a function that colorizes text using the provided color name and optionally makes it bold.\nscip-python python temp indexer `pilot.utils.style`/ColorName#: This code defines an enumeration called `ColorName` that represents different colors and their corresponding ANSI color codes. The enumeration has six elements, each of which is a tuple containing two values: the normal and light versions of a color.\nscip-python python temp indexer `pilot.utils.style`/ColorName#YELLOW.: undefined\n\"\"\"\ncolor_yellow_bold = get_color_function(ColorName.YELLOW, True)\r\n\"\"\"\nscip-python python temp indexer `pilot.utils.style`/get_color_function().: This code defines a function called `get_color_function` that takes two arguments: `color_name` and `bold`. It returns a function that colorizes text using the provided color name and optionally makes it bold.\nscip-python python temp indexer `pilot.utils.style`/ColorName#: This code defines an enumeration called `ColorName` that represents different colors and their corresponding ANSI color codes. The enumeration has six elements, each of which is a tuple containing two values: the normal and light versions of a color.\nscip-python python temp indexer `pilot.utils.style`/ColorName#YELLOW.: undefined\n\"\"\"\ncolor_blue = get_color_function(ColorName.BLUE)\r\n\"\"\"\nscip-python python temp indexer `pilot.utils.style`/get_color_function().: This code defines a function called `get_color_function` that takes two arguments: `color_name` and `bold`. It returns a function that colorizes text using the provided color name and optionally makes it bold.\nscip-python python temp indexer `pilot.utils.style`/ColorName#: This code defines an enumeration called `ColorName` that represents different colors and their corresponding ANSI color codes. The enumeration has six elements, each of which is a tuple containing two values: the normal and light versions of a color.\nscip-python python temp indexer `pilot.utils.style`/ColorName#BLUE.: undefined\n\"\"\"\ncolor_blue_bold = get_color_function(ColorName.BLUE, True)\r\n\"\"\"\nscip-python python temp indexer `pilot.utils.style`/get_color_function().: This code defines a function called `get_color_function` that takes two arguments: `color_name` and `bold`. It returns a function that colorizes text using the provided color name and optionally makes it bold.\nscip-python python temp indexer `pilot.utils.style`/ColorName#: This code defines an enumeration called `ColorName` that represents different colors and their corresponding ANSI color codes. The enumeration has six elements, each of which is a tuple containing two values: the normal and light versions of a color.\nscip-python python temp indexer `pilot.utils.style`/ColorName#BLUE.: undefined\n\"\"\"\ncolor_cyan = get_color_function(ColorName.CYAN)\r\n\"\"\"\nscip-python python temp indexer `pilot.utils.style`/get_color_function().: This code defines a function called `get_color_function` that takes two arguments: `color_name` and `bold`. It returns a function that colorizes text using the provided color name and optionally makes it bold.\nscip-python python temp indexer `pilot.utils.style`/ColorName#: This code defines an enumeration called `ColorName` that represents different colors and their corresponding ANSI color codes. The enumeration has six elements, each of which is a tuple containing two values: the normal and light versions of a color.\nscip-python python temp indexer `pilot.utils.style`/ColorName#CYAN.: undefined\n\"\"\"\ncolor_cyan_bold = get_color_function(ColorName.CYAN, True)\r\n\"\"\"\nscip-python python temp indexer `pilot.utils.style`/get_color_function().: This code defines a function called `get_color_function` that takes two arguments: `color_name` and `bold`. It returns a function that colorizes text using the provided color name and optionally makes it bold.\nscip-python python temp indexer `pilot.utils.style`/ColorName#: This code defines an enumeration called `ColorName` that represents different colors and their corresponding ANSI color codes. The enumeration has six elements, each of which is a tuple containing two values: the normal and light versions of a color.\nscip-python python temp indexer `pilot.utils.style`/ColorName#CYAN.: undefined\n\"\"\"\ncolor_white = get_color_function(ColorName.WHITE)\r\n\"\"\"\nscip-python python temp indexer `pilot.utils.style`/get_color_function().: This code defines a function called `get_color_function` that takes two arguments: `color_name` and `bold`. It returns a function that colorizes text using the provided color name and optionally makes it bold.\nscip-python python temp indexer `pilot.utils.style`/ColorName#: This code defines an enumeration called `ColorName` that represents different colors and their corresponding ANSI color codes. The enumeration has six elements, each of which is a tuple containing two values: the normal and light versions of a color.\nscip-python python temp indexer `pilot.utils.style`/ColorName#WHITE.: undefined\n\"\"\"\ncolor_white_bold = get_color_function(ColorName.WHITE, True)\r\n\"\"\"\nscip-python python temp indexer `pilot.utils.style`/get_color_function().: This code defines a function called `get_color_function` that takes two arguments: `color_name` and `bold`. It returns a function that colorizes text using the provided color name and optionally makes it bold.\nscip-python python temp indexer `pilot.utils.style`/ColorName#: This code defines an enumeration called `ColorName` that represents different colors and their corresponding ANSI color codes. The enumeration has six elements, each of which is a tuple containing two values: the normal and light versions of a color.\nscip-python python temp indexer `pilot.utils.style`/ColorName#WHITE.: undefined\n\"\"\"\n","documentation":"This code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt."}},{"key":"scip-python python temp indexer `pilot.utils.style`/color_red.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.style`/color_red.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.custom_print`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.custom_print`/__init__:","language":"python","range":[0,0,40,0],"content":"import builtins\r\nfrom helpers.ipc import IPCClient\r\nfrom const.ipc import MESSAGE_TYPE, LOCAL_IGNORE_MESSAGE_TYPES\r\n\r\n\r\ndef get_custom_print(args):\r\n    built_in_print = builtins.print\r\n\r\n    def print_to_external_process(*args, **kwargs):\r\n        # message = \" \".join(map(str, args))\r\n        message = args[0]\r\n\r\n        if 'type' not in kwargs:\r\n            kwargs['type'] = 'verbose'\r\n        elif kwargs['type'] == MESSAGE_TYPE['local']:\r\n            local_print(*args, **kwargs)\r\n            return\r\n\r\n        ipc_client_instance.send({\r\n            'type': MESSAGE_TYPE[kwargs['type']],\r\n            'content': message,\r\n        })\r\n        if kwargs['type'] == MESSAGE_TYPE['user_input_request']:\r\n            return ipc_client_instance.listen()\r\n\r\n    def local_print(*args, **kwargs):\r\n        message = \" \".join(map(str, args))\r\n        if 'type' in kwargs:\r\n            if kwargs['type'] in LOCAL_IGNORE_MESSAGE_TYPES:\r\n                return\r\n            del kwargs['type']\r\n\r\n        built_in_print(message, **kwargs)\r\n\r\n    ipc_client_instance = None\r\n    if '--external-log-process-port' in args:\r\n        ipc_client_instance = IPCClient(args['--external-log-process-port'])\r\n        return print_to_external_process, ipc_client_instance\r\n    else:\r\n        return local_print, ipc_client_instance\r\n","file":"/pilot/utils/custom_print.py","fileHash":"b444ebb5505cf48276b4e98d66d58bbee2158a98241200cb04b6f8269aed02f4","hash":"b444ebb5505cf48276b4e98d66d58bbee2158a98241200cb04b6f8269aed02f4","processedContent":"import builtins\r\nfrom helpers.ipc import IPCClient\r\n\"\"\"\nscip-python python temp indexer `pilot.helpers.ipc`/__init__:: This code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.helpers.ipc`/IPCClient#: This code defines a class called `IPCClient` that establishes a socket connection to a local process and listens for incoming messages. It also defines functions to handle requests and send data to the client.\n\"\"\"\nfrom const.ipc import MESSAGE_TYPE, LOCAL_IGNORE_MESSAGE_TYPES\r\n\"\"\"\nscip-python python temp indexer `pilot.const.ipc`/__init__:: This code defines a dictionary called `MESSAGE_TYPE` that contains various types of messages that can be sent between the server and the extension. The dictionary also defines a list of message types that should be ignored when running the extension locally.\nscip-python python temp indexer `pilot.const.ipc`/MESSAGE_TYPE.: undefined\nscip-python python temp indexer `pilot.const.ipc`/LOCAL_IGNORE_MESSAGE_TYPES.: undefined\n\"\"\"\n\r\n\r\ndef get_custom_print(args):\r\n    \"\"\"This code defines a function called `get_custom_print` that returns a tuple of two functions: `print_to_external_process` and `local_print`. The first function sends a message to an external process over a network connection, while the second function prints the message to the console.\"\"\"\n    pass\n","documentation":"The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt."}},{"key":"scip-python python temp indexer `pilot.utils.custom_print`/get_custom_print().","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.custom_print`/get_custom_print().","language":"python","range":[5,0,39,47],"content":"def get_custom_print(args):\r\n    built_in_print = builtins.print\r\n\r\n    def print_to_external_process(*args, **kwargs):\r\n        # message = \" \".join(map(str, args))\r\n        message = args[0]\r\n\r\n        if 'type' not in kwargs:\r\n            kwargs['type'] = 'verbose'\r\n        elif kwargs['type'] == MESSAGE_TYPE['local']:\r\n            local_print(*args, **kwargs)\r\n            return\r\n\r\n        ipc_client_instance.send({\r\n            'type': MESSAGE_TYPE[kwargs['type']],\r\n            'content': message,\r\n        })\r\n        if kwargs['type'] == MESSAGE_TYPE['user_input_request']:\r\n            return ipc_client_instance.listen()\r\n\r\n    def local_print(*args, **kwargs):\r\n        message = \" \".join(map(str, args))\r\n        if 'type' in kwargs:\r\n            if kwargs['type'] in LOCAL_IGNORE_MESSAGE_TYPES:\r\n                return\r\n            del kwargs['type']\r\n\r\n        built_in_print(message, **kwargs)\r\n\r\n    ipc_client_instance = None\r\n    if '--external-log-process-port' in args:\r\n        ipc_client_instance = IPCClient(args['--external-log-process-port'])\r\n        return print_to_external_process, ipc_client_instance\r\n    else:\r\n        return local_print, ipc_client_instance","file":"/pilot/utils/custom_print.py","fileHash":"b444ebb5505cf48276b4e98d66d58bbee2158a98241200cb04b6f8269aed02f4","hash":"11d94b3912aca624d1dd021e998ff5dbd2238bd5220c667f4457700bdfa3c984","processedContent":"def get_custom_print(args):\r\n    built_in_print = builtins.print\r\n\r\n    def print_to_external_process(*args, **kwargs):\r\n        \"\"\"This code defines a function called `print_to_external_process` that sends a message to an external process over a network connection. The function first serializes the message into a JSON-compatible string and then sends the length of the serialized data in bytes followed by the actual data.\"\"\"\n        pass\n\r\n    def local_print(*args, **kwargs):\r\n        \"\"\"This code defines a local print function that takes in arguments and prints them to the console. It also allows for additional keyword arguments to be passed, such as the type of message to print. The function checks if the type is in a list of ignored types and returns early if it is. Otherwise, it calls the built-in print function with the message and any additional keyword arguments.\"\"\"\n        pass\n\r\n    ipc_client_instance = None\r\n    if '--external-log-process-port' in args:\r\n        ipc_client_instance = IPCClient(args['--external-log-process-port'])\r #This code defines a class called `IPCClient` that establishes a socket connection to a local process and listens for incoming messages. It also defines functions to handle requests and send data to the client.\n        return print_to_external_process, ipc_client_instance\r\n    else:\r\n        return local_print, ipc_client_instance","documentation":"This code defines a function called `get_custom_print` that returns a tuple of two functions: `print_to_external_process` and `local_print`. The first function sends a message to an external process over a network connection, while the second function prints the message to the console."}},{"key":"scip-python python temp indexer `pilot.helpers.project`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.project`/__init__:","language":"python","range":[0,0,458,0],"content":"import json\nimport os\nfrom pathlib import Path\nimport re\nfrom typing import Tuple\n\nfrom const.messages import CHECK_AND_CONTINUE, AFFIRMATIVE_ANSWERS, NEGATIVE_ANSWERS\nfrom utils.style import color_yellow_bold, color_cyan, color_white_bold, color_green\nfrom const.common import IGNORE_FOLDERS, STEPS\nfrom database.database import delete_unconnected_steps_from, delete_all_app_development_data, update_app_status\nfrom const.ipc import MESSAGE_TYPE\nfrom prompts.prompts import ask_user\nfrom helpers.exceptions.TokenLimitError import TokenLimitError\nfrom utils.questionary import styled_text\nfrom helpers.files import get_directory_contents, get_file_contents, clear_directory, update_file\nfrom helpers.cli import build_directory_tree\nfrom helpers.agents.TechLead import TechLead\nfrom helpers.agents.Developer import Developer\nfrom helpers.agents.Architect import Architect\nfrom helpers.agents.ProductOwner import ProductOwner\nfrom helpers.agents.TechnicalWriter import TechnicalWriter\n\nfrom database.models.development_steps import DevelopmentSteps\nfrom database.models.file_snapshot import FileSnapshot\nfrom database.models.files import File\nfrom logger.logger import logger\nfrom utils.dot_gpt_pilot import DotGptPilot\n\nfrom utils.telemetry import telemetry\n\nclass Project:\n    def __init__(self, args, name=None, project_description=None, clarifications=None, user_stories=None,\n                 user_tasks=None, architecture=None, development_plan=None, current_step=None, ipc_client_instance=None,\n                 enable_dot_pilot_gpt=True):\n        \"\"\"\n        Initialize a project.\n\n        Args:\n            args (dict): Project arguments - app_id, (app_type, name), user_id, email, password, step\n            name (str, optional): Project name. Default is None.\n            description (str, optional): Project description. Default is None.\n            user_stories (list, optional): List of user stories. Default is None.\n            user_tasks (list, optional): List of user tasks. Default is None.\n            architecture (str, optional): Project architecture. Default is None.\n            development_plan (str, optional): Development plan. Default is None.\n            current_step (str, optional): Current step in the project. Default is None.\n        \"\"\"\n        self.args = args\n        self.llm_req_num = 0\n        self.command_runs_count = 0\n        self.user_inputs_count = 0\n        self.checkpoints = {\n            'last_user_input': None,\n            'last_command_run': None,\n            'last_development_step': None,\n        }\n        # TODO make flexible\n        self.root_path = ''\n        self.skip_until_dev_step = None\n        self.skip_steps = None\n        self.main_prompt = None\n        self.files = []\n        self.continuing_project = args.get('continuing_project', False)\n\n        self.ipc_client_instance = ipc_client_instance\n\n        # self.restore_files({dev_step_id_to_start_from})\n\n        self.finished = False\n        self.current_step = current_step\n        self.name = name\n        self.project_description = project_description\n        self.clarifications = clarifications\n        self.user_stories = user_stories\n        self.user_tasks = user_tasks\n        self.architecture = architecture\n        self.development_plan = development_plan\n        self.dot_pilot_gpt = DotGptPilot(log_chat_completions=enable_dot_pilot_gpt)\n\n    def set_root_path(self, root_path: str):\n        self.root_path = root_path\n        self.dot_pilot_gpt.with_root_path(root_path)\n\n    def start(self):\n        \"\"\"\n        Start the project.\n        \"\"\"\n        telemetry.start()\n        self.project_manager = ProductOwner(self)\n        self.project_manager.get_project_description()\n\n        self.project_manager.get_user_stories()\n        # self.user_tasks = self.project_manager.get_user_tasks()\n\n        self.architect = Architect(self)\n        self.architect.get_architecture()\n\n        self.developer = Developer(self)\n        self.developer.set_up_environment()\n        self.technical_writer = TechnicalWriter(self)\n\n        self.tech_lead = TechLead(self)\n        self.tech_lead.create_development_plan()\n\n        # TODO move to constructor eventually\n        if self.args['step'] is not None and STEPS.index(self.args['step']) < STEPS.index('coding'):\n            clear_directory(self.root_path)\n            delete_all_app_development_data(self.args['app_id'])\n            self.skip_steps = False\n\n        if 'skip_until_dev_step' in self.args:\n            self.skip_until_dev_step = self.args['skip_until_dev_step']\n            if self.args['skip_until_dev_step'] == '0':\n                clear_directory(self.root_path)\n                delete_all_app_development_data(self.args['app_id'])\n                self.skip_steps = False\n            elif self.skip_until_dev_step is not None:\n                should_overwrite_files = None\n                while should_overwrite_files is None or should_overwrite_files.lower() not in AFFIRMATIVE_ANSWERS + NEGATIVE_ANSWERS:\n                    print('yes/no', type='button')\n                    should_overwrite_files = styled_text(\n                        self,\n                        \"Can I overwrite any changes that you might have made to the project since last running GPT Pilot (y/n)?\",\n                        ignore_user_input_count=True\n                    )\n\n                    logger.info('should_overwrite_files: %s', should_overwrite_files)\n                    if should_overwrite_files in NEGATIVE_ANSWERS:\n                        break\n                    elif should_overwrite_files in AFFIRMATIVE_ANSWERS:\n                        FileSnapshot.delete().where(\n                            FileSnapshot.app == self.app and FileSnapshot.development_step == self.skip_until_dev_step).execute()\n                        self.save_files_snapshot(self.skip_until_dev_step)\n                        break\n        # TODO END\n\n        self.dot_pilot_gpt.write_project(self)\n        print(json.dumps({\n            \"project_stage\": \"coding\"\n        }), type='info')\n        self.developer.start_coding()\n\n    def finish(self):\n        \"\"\"\n        Finish the project.\n        \"\"\"\n        while True:\n            feature_description = ask_user(self, \"Project is finished! Do you want to add any features or changes? \"\n                                                 \"If yes, describe it here and if no, just press ENTER\",\n                                           require_some_input=False)\n\n            if feature_description == '':\n                return\n\n            self.tech_lead.create_feature_plan(feature_description)\n            self.developer.start_coding()\n            self.tech_lead.create_feature_summary(feature_description)\n\n    def get_directory_tree(self, with_descriptions=False):\n        \"\"\"\n        Get the directory tree of the project.\n\n        Args:\n            with_descriptions (bool, optional): Whether to include descriptions. Default is False.\n\n        Returns:\n            dict: The directory tree.\n        \"\"\"\n        # files = {}\n        # if with_descriptions and False:\n        #     files = File.select().where(File.app_id == self.args['app_id'])\n        #     files = {snapshot.name: snapshot for snapshot in files}\n        # return build_directory_tree_with_descriptions(self.root_path, ignore=IGNORE_FOLDERS, files=files, add_descriptions=False)\n        return build_directory_tree(self.root_path, ignore=IGNORE_FOLDERS)\n\n    def get_test_directory_tree(self):\n        \"\"\"\n        Get the directory tree of the tests.\n\n        Returns:\n            dict: The directory tree of tests.\n        \"\"\"\n        # TODO remove hardcoded path\n        return build_directory_tree(self.root_path + '/tests', ignore=IGNORE_FOLDERS)\n\n    def get_all_coded_files(self):\n        \"\"\"\n        Get all coded files in the project.\n\n        Returns:\n            list: A list of coded files.\n        \"\"\"\n        files = File.select().where(File.app_id == self.args['app_id'])\n\n        # TODO temoprary fix to eliminate files that are not in the project\n        files = [file for file in files if len(FileSnapshot.select().where(FileSnapshot.file_id == file.id)) > 0]\n        # TODO END\n\n        files = self.get_files([file.path + '/' + file.name for file in files])\n\n        # Don't send contents of binary files\n        for file in files:\n            if not isinstance(file[\"content\"], str):\n                file[\"content\"] = f\"<<binary file, {len(file['content'])} bytes>>\"\n\n        # TODO temoprary fix to eliminate files that are not in the project\n        files = [file for file in files if file['content'] != '']\n        # TODO END\n\n        return files\n\n    def get_files(self, files):\n        \"\"\"\n        Get file contents.\n\n        Args:\n            files (list): List of file paths.\n\n        Returns:\n            list: A list of files with content.\n        \"\"\"\n        files_with_content = []\n        for file_path in files:\n            try:\n                # TODO path is sometimes relative and sometimes absolute - fix at one point\n                _, full_path = self.get_full_file_path(file_path, file_path)\n                file_data = get_file_contents(full_path, self.root_path)\n            except ValueError:\n                file_data = {\"path\": file_path, \"content\": ''}\n\n            files_with_content.append(file_data)\n        return files_with_content\n\n    def find_input_required_lines(self, file_content):\n        \"\"\"\n        Parses the provided string (representing file content) and returns a list of tuples containing\n        the line number and line content for lines that contain the text 'INPUT_REQUIRED'.\n\n        :param file_content: The string content of the file.\n        :return: A list of tuples (line number, line content).\n        \"\"\"\n        lines_with_input_required = []\n        lines = file_content.split('\\n')\n\n        for line_number, line in enumerate(lines, start=1):\n            if 'INPUT_REQUIRED' in line:\n                lines_with_input_required.append((line_number, line.strip()))\n\n        return lines_with_input_required\n\n    def save_file(self, data):\n        \"\"\"\n        Save a file.\n\n        Args:\n            data: { name: 'hello.py', path: 'path/to/hello.py', content: 'print(\"Hello!\")' }\n        \"\"\"\n\n        name = data['name'] if 'name' in data and data['name'] != '' else os.path.basename(data['path'])\n        path = data['path'] if 'path' in data else name\n\n        path, full_path = self.get_full_file_path(path, name)\n        update_file(full_path, data['content'])\n        if full_path not in self.files:\n            self.files.append(full_path)\n\n        (File.insert(app=self.app, path=path, name=name, full_path=full_path)\n         .on_conflict(\n            conflict_target=[File.app, File.name, File.path],\n            preserve=[],\n            update={'name': name, 'path': path, 'full_path': full_path})\n         .execute())\n\n        if not self.skip_steps:\n            inputs_required = self.find_input_required_lines(data['content'])\n            for line_number, line_content in inputs_required:\n                user_input = None\n                print(color_yellow_bold(f'Input required on line {line_number}:\\n{line_content}') + '\\n')\n                while user_input is None or user_input.lower() not in AFFIRMATIVE_ANSWERS + ['continue']:\n                    print({'path': full_path, 'line': line_number}, type='openFile')\n                    print('continue', type='button')\n                    user_input = styled_text(\n                        self,\n                        f'Please open the file {data[\"path\"]} on the line {line_number} and add the required input. Once you\\'re done, type \"y\" to continue.',\n                        ignore_user_input_count=True\n                    )\n\n    def get_full_file_path(self, file_path: str, file_name: str) -> Tuple[str, str]:\n        \"\"\"\n        Combine file path and name into a full file path.\n\n        :param file_path: File path.\n        :param file_name: File name.\n        :return: (file_path, absolute_path) pair.\n\n        Tries to combine the two in a way that makes most sense, even if the given path\n        have some shared components.\n        \"\"\"\n        def normalize_path(path: str) -> Tuple[str, str]:\n            \"\"\"\n            Normalizes a path (see rules in comments) and returns (directory, basename) pair.\n\n            :param path: Path to normalize.\n            :return: (directory, basename) pair.\n\n            Directory component may be empty if the path is considered to be a\n            file name. Basename component may be empty if the path is considered\n            to be a directory name.\n            \"\"\"\n\n            # Normalize path to use os-specific separator (as GPT may output paths\n            # with / even if we're on Windows)\n            path = str(Path(path))\n\n            # If a path references user's home directory (~), we only care about\n            # the relative part within it (assume ~ is meant to be the project path).\n            # Examples:\n            # - /Users/zvonimirsabljic/Development/~/pilot/server.js -> /pilot/server.js\n            # - ~/pilot/server.js -> /pilot/server.js\n            if \"~\" in path:\n                path = path.split(\"~\")[-1]\n\n            # If the path explicitly references the current directory, remove it so we\n            # can nicely use it for joins later.\n            if path == \".\" or path.startswith(f\".{os.path.sep}\"):\n                path = path[1:]\n\n            # If the path is absolute, we only care about the relative part within\n            # the project directory (assume the project directory is the root).\n            # Examples:\n            # - /Users/zvonimirsabljic/Development/copilot/pilot/server.js -> /pilot/server.js\n            # - /pilot/server.js -> /pilot/server.js\n            # - C:\\Users\\zvonimirsabljic\\Development\\copilot\\pilot\\server.js -> \\pilot\\server.js\n            path = path.replace(self.root_path, '')\n\n            # If the final component of the path doesn't have a file extension,\n            # assume it's a directory and add a final (back)slash.\n            # Examples:\n            # - /pilot/server.js -> /pilot/server.js\n            # - /pilot -> /pilot/\n            # - \\pilot\\server.js -> \\pilot\\server.js\n            # - \\pilot -> \\pilot\\\n            base = os.path.basename(path)\n            if base and \".\" not in base:\n                path += os.path.sep\n\n            # In case we're in Windows and dealing with full paths, remove the drive letter.\n            _, path = os.path.splitdrive(path)\n\n            # We want all paths to start with / (or \\\\ in Windows)\n            if not path.startswith(os.path.sep):\n                path = os.path.sep + path\n\n            return os.path.split(path)\n\n        head_path, tail_path = normalize_path(file_path)\n        head_name, tail_name = normalize_path(file_name)\n\n        # Prefer directory path from the first argument (file_path), and\n        # prefer the file name from the second argument (file_name).\n        final_file_path = head_path if head_path != '' else head_name\n        final_file_name = tail_name if tail_name != '' else tail_path\n\n        # If the directory is contained in the second argument (file_name),\n        # use that (as it might include additional subdirectories).\n        if head_path in head_name:\n            final_file_path = head_name\n\n        # Try to combine the directory and file name from the two arguments\n        # in the way that makes the most sensible output.\n        if final_file_path != head_name and head_name not in head_path:\n            if '.' in tail_path:\n                final_file_path = head_name + head_path\n            else:\n                final_file_path = head_path + head_name\n\n        if final_file_path == '':\n            final_file_path = os.path.sep\n\n        final_absolute_path = os.path.join(self.root_path, final_file_path[1:], final_file_name)\n        return final_file_path, final_absolute_path\n\n\n    def save_files_snapshot(self, development_step_id):\n        files = get_directory_contents(self.root_path, ignore=IGNORE_FOLDERS)\n        development_step, created = DevelopmentSteps.get_or_create(id=development_step_id)\n\n        for file in files:\n            print(color_cyan(f'Saving file {file[\"full_path\"]}'))\n            # TODO this can be optimized so we don't go to the db each time\n            file_in_db, created = File.get_or_create(\n                app=self.app,\n                name=file['name'],\n                path=file['path'],\n                full_path=file['full_path'],\n            )\n\n            file_snapshot, created = FileSnapshot.get_or_create(\n                app=self.app,\n                development_step=development_step,\n                file=file_in_db,\n                defaults={'content': file.get('content', '')}\n            )\n            file_snapshot.content = file['content']\n            file_snapshot.save()\n\n    def restore_files(self, development_step_id):\n        development_step = DevelopmentSteps.get(DevelopmentSteps.id == development_step_id)\n        file_snapshots = FileSnapshot.select().where(FileSnapshot.development_step == development_step)\n\n        clear_directory(self.root_path, IGNORE_FOLDERS + self.files)\n        for file_snapshot in file_snapshots:\n            update_file(file_snapshot.file.full_path, file_snapshot.content)\n            if file_snapshot.file.full_path not in self.files:\n                self.files.append(file_snapshot.file.full_path)\n\n    def delete_all_steps_except_current_branch(self):\n        delete_unconnected_steps_from(self.checkpoints['last_development_step'], 'previous_step')\n        delete_unconnected_steps_from(self.checkpoints['last_command_run'], 'previous_step')\n        delete_unconnected_steps_from(self.checkpoints['last_user_input'], 'previous_step')\n\n    def ask_for_human_intervention(self, message, description=None, cbs={}, convo=None, is_root_task=False):\n        answer = ''\n        question = color_yellow_bold(message)\n\n        if description is not None:\n            question += '\\n' + '-' * 100 + '\\n' + color_white_bold(description) + '\\n' + '-' * 100 + '\\n'\n\n        reset_branch_id = None if convo is None else convo.save_branch()\n\n        while answer.lower() != 'continue':\n            print('continue', type='button')\n            answer = ask_user(self, CHECK_AND_CONTINUE,\n                              require_some_input=False,\n                              hint=question)\n\n            try:\n                if answer.lower() in cbs:\n                    return cbs[answer.lower()](convo)\n                elif answer != '':\n                    return {'user_input': answer}\n            except TokenLimitError as e:\n                if is_root_task and answer.lower() not in cbs and answer != '':\n                    convo.load_branch(reset_branch_id)\n                    return {'user_input': answer}\n                else:\n                    raise e\n\n    def log(self, text, message_type):\n        if self.ipc_client_instance is None or self.ipc_client_instance.client is None:\n            print(text)\n        else:\n            self.ipc_client_instance.send({\n                'type': MESSAGE_TYPE[message_type],\n                'content': str(text),\n            })\n            if message_type == MESSAGE_TYPE['user_input_request']:\n                return self.ipc_client_instance.listen()\n","file":"/pilot/helpers/Project.py","fileHash":"4d8215b25fa6dfe61adc429af601243ce7ae701549bb568ae1e5b9dd3ba7bac8","hash":"4d8215b25fa6dfe61adc429af601243ce7ae701549bb568ae1e5b9dd3ba7bac8","processedContent":"import json #undefined\nimport os #undefined\nfrom pathlib import Path\n\"\"\"\nscip-python python python-stdlib 3.11 pathlib/__init__:: undefined\nscip-python python python-stdlib 3.11 pathlib/Path#: undefined\n\"\"\"\nimport re #undefined\nfrom typing import Tuple\n\"\"\"\nscip-python python python-stdlib 3.11 typing/__init__:: undefined\nscip-python python python-stdlib 3.11 typing/Tuple.: undefined\n\"\"\"\n\nfrom const.messages import CHECK_AND_CONTINUE, AFFIRMATIVE_ANSWERS, NEGATIVE_ANSWERS\n\"\"\"\nscip-python python temp indexer `pilot.const.messages`/__init__:: This code defines a set of constants that are used to control the flow of a program. The first constant, `CHECK_AND_CONTINUE`, is a message that is displayed when something goes wrong and the user needs to be prompted to continue. The second constant, `WHEN_USER_DONE`, is a message that is displayed when the user is finished with a task and needs to be prompted to continue. The third and fourth constants, `AFFIRMATIVE_ANSWERS` and `NEGATIVE_ANSWERS`, define sets of strings that are used to determine whether a user's response indicates affirmative or negative sentiment.\nscip-python python temp indexer `pilot.const.messages`/CHECK_AND_CONTINUE.: undefined\nscip-python python temp indexer `pilot.const.messages`/AFFIRMATIVE_ANSWERS.: undefined\nscip-python python temp indexer `pilot.const.messages`/NEGATIVE_ANSWERS.: undefined\n\"\"\"\nfrom utils.style import color_yellow_bold, color_cyan, color_white_bold, color_green\n\"\"\"\nscip-python python temp indexer `pilot.utils.style`/__init__:: This code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.utils.style`/color_yellow_bold.: undefined\nscip-python python temp indexer `pilot.utils.style`/color_cyan.: undefined\nscip-python python temp indexer `pilot.utils.style`/color_white_bold.: undefined\nscip-python python temp indexer `pilot.utils.style`/color_green.: undefined\n\"\"\"\nfrom const.common import IGNORE_FOLDERS, STEPS\n\"\"\"\nscip-python python temp indexer `pilot.const.common`/__init__:: This code defines a set of constants and variables used in the project, including a list of folders to ignore during certain operations.\nscip-python python temp indexer `pilot.const.common`/IGNORE_FOLDERS.: undefined\nscip-python python temp indexer `pilot.const.common`/STEPS.: undefined\n\"\"\"\nfrom database.database import delete_unconnected_steps_from, delete_all_app_development_data, update_app_status\n\"\"\"\nscip-python python temp indexer `pilot.database.database`/__init__:: The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.database.database`/delete_unconnected_steps_from().: This code retrieves all steps connected to a given step, and then deletes any unconnected steps from the database.\nscip-python python temp indexer `pilot.database.database`/delete_all_app_development_data().: This code deletes all data related to a specific app from the database, including development steps, command runs, user inputs, user apps, files, and file snapshots.\nscip-python python temp indexer `pilot.database.database`/update_app_status().: This code updates the status of an app in the database. It retrieves the app with the specified ID, sets its status to the new status provided, and saves the changes. If the app does not exist, it returns False.\n\"\"\"\nfrom const.ipc import MESSAGE_TYPE\n\"\"\"\nscip-python python temp indexer `pilot.const.ipc`/__init__:: This code defines a dictionary called `MESSAGE_TYPE` that contains various types of messages that can be sent between the server and the extension. The dictionary also defines a list of message types that should be ignored when running the extension locally.\nscip-python python temp indexer `pilot.const.ipc`/MESSAGE_TYPE.: undefined\n\"\"\"\nfrom prompts.prompts import ask_user\n\"\"\"\nscip-python python temp indexer `pilot.prompts.prompts`/__init__:: The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.prompts.prompts`/ask_user().: This code defines a function called `ask_user` that retrieves user input from a database, styles the question, and saves the response to the database. It also logs the question and answer to a logger.\n\"\"\"\nfrom helpers.exceptions.TokenLimitError import TokenLimitError\n\"\"\"\nscip-python python temp indexer `pilot.helpers.exceptions.tokenlimiterror`/__init__:: This code defines constants for the maximum number of tokens allowed in a GPT model and the minimum number of tokens required for a response. It also sets the maximum number of questions that can be asked and the response when the conversation is complete.\nscip-python python temp indexer `pilot.helpers.exceptions.tokenlimiterror`/TokenLimitError#: This code defines a custom exception class called `TokenLimitError` that is raised when the number of tokens in a message exceeds the maximum allowed by the GPT model. The class takes two arguments: `tokens_in_messages` and `max_tokens`, which represent the number of tokens in the message and the maximum number of tokens allowed, respectively. The `__init__` method sets the instance variables and calls the parent class's constructor with a formatted error message.\n\"\"\"\nfrom utils.questionary import styled_text\n\"\"\"\nscip-python python temp indexer `pilot.utils.questionary`/__init__:: The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.utils.questionary`/styled_text().: This code defines a function called `styled_text` that retrieves user input from a database, styles the question, and saves the response to the database.\n\"\"\"\nfrom helpers.files import get_directory_contents, get_file_contents, clear_directory, update_file\n\"\"\"\nscip-python python temp indexer `pilot.helpers.files`/__init__:: The code defines a series of functions for working with files and directories, including updating a file's content, retrieving the contents of a file or directory, and deleting files and empty subdirectories.\nscip-python python temp indexer `pilot.helpers.files`/get_directory_contents().: This code defines a function called `get_directory_contents` that takes two parameters: `directory` and `ignore`. It returns a list of file objects as returned by `get_file_contents`, which includes the file name, relative path, content (as a string or bytes object), and full path. The function uses `os.walk()` to traverse the directory and its subdirectories, and it ignores files or folders in the `ignore` list.\nscip-python python temp indexer `pilot.helpers.files`/get_file_contents().: This code defines a function called `get_file_contents` that takes two parameters: `path` and `project_root_path`. It returns an object with four keys: `name`, `path`, `content`, and `full_path`. The function first tries to read the file using UTF-8 encoding, but if that fails, it treats the file as a binary file. It then returns the file name, relative path, content (as a string or bytes object), and full path as values in the object.\nscip-python python temp indexer `pilot.helpers.files`/clear_directory().: This code defines a function called `clear_directory` that takes a directory path and an optional list of files or folders to ignore. It recursively traverses the directory and its subdirectories, deleting all files and empty subdirectories except for those in the ignore list.\nscip-python python temp indexer `pilot.helpers.files`/update_file().: This code updates a file with new content. It creates any necessary intermediate directories, writes the file using UTF-8 encoding if it's text, and prints a success message.\n\"\"\"\nfrom helpers.cli import build_directory_tree\n\"\"\"\nscip-python python temp indexer `pilot.helpers.cli`/__init__:: The code defines a command-line interface (CLI) that allows users to execute commands and interact with a language model. It includes functions for running commands, checking their output, and handling errors.\nscip-python python temp indexer `pilot.helpers.cli`/build_directory_tree().: This code defines a function called `build_directory_tree` that takes in a directory path and returns a string representation of the directory tree structure. The function uses the `os` module to list the items in the directory, sort them, and then recursively call itself for each subdirectory, building the tree structure.\n\"\"\"\nfrom helpers.agents.TechLead import TechLead\n\"\"\"\nscip-python python temp indexer `pilot.helpers.agents.techlead`/__init__:: The code defines a class called \"TechLead\" that represents a person working on a specific project, and includes functions for retrieving progress data, updating the status of the app in the database, and saving the development plan for the app.\nscip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#: This code defines a class called \"TechLead\" that represents a person who is working on a specific project. The class has two attributes: \"role\" and \"project\". The \"role\" attribute specifies the type of work the agent is doing, and the \"project\" attribute specifies the project they are working on. The class also defines several functions, including `create_development_plan`, `create_feature_plan`, and `create_feature_summary`, which retrieve progress data for an app from a database, update the status of the app in the database, and save the development plan for the app.\n\"\"\"\nfrom helpers.agents.Developer import Developer\n\"\"\"\nscip-python python temp indexer `pilot.helpers.agents.developer`/__init__:: The code defines a class called \"Developer\" that represents a person working on a specific project, and includes functions for implementing tasks, running commands, and handling human intervention during the development process.\nscip-python python temp indexer `pilot.helpers.agents.developer`/Developer#: The code defines a class called \"Developer\" that represents a person working on a specific project. It has functions for implementing tasks, running commands, and handling human intervention during the development process.\n\"\"\"\nfrom helpers.agents.Architect import Architect\n\"\"\"\nscip-python python temp indexer `pilot.helpers.agents.architect`/__init__:: The code defines a class called \"Architect\" that represents a person working on a specific project, with attributes for role and project. It also includes functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model.\nscip-python python temp indexer `pilot.helpers.agents.architect`/Architect#: This code defines a class called \"Architect\" that represents a person who is working on a specific project. The class has two attributes: \"role\" and \"project\". The \"role\" attribute specifies the type of work the agent is doing, and the \"project\" attribute specifies the project they are working on. The class also has a constructor that initializes an object with a role (architect) and a project, and sets the object's convo_architecture attribute to None.\n\"\"\"\nfrom helpers.agents.ProductOwner import ProductOwner\n\"\"\"\nscip-python python temp indexer `pilot.helpers.agents.productowner`/__init__:: The code defines a series of functions and classes for a chatbot application that allows users to create and customize their own apps. It includes functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model.\nscip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#: The code defines a class called \"ProductOwner\" that inherits from another class called \"User\". It initializes the object with a project parameter and sets the user's role to \"product_owner\". The class includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\n\"\"\"\nfrom helpers.agents.TechnicalWriter import TechnicalWriter\n\"\"\"\nscip-python python temp indexer `pilot.helpers.agents.technicalwriter`/__init__:: The code defines a class called \"TechnicalWriter\" that generates documentation for a project. It includes functions for creating LICENSE and README files, as well as API documentation based on the project's details.\nscip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#: The code defines a class called \"TechnicalWriter\" that generates documentation for a project. It creates a LICENSE file, README.md file, and API documentation based on the project's details.\n\"\"\"\n\nfrom database.models.development_steps import DevelopmentSteps\n\"\"\"\nscip-python python temp indexer `pilot.database.models.development_steps`/__init__:: The code defines a model for the development steps table in a database, with fields for an ID, creation and update timestamps, and a foreign key to the app entity. It also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\nscip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#: This code defines a model for the development steps table in the database. It includes fields for an ID, creation and update timestamps, and a foreign key to the app entity. The model also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\n\"\"\"\nfrom database.models.file_snapshot import FileSnapshot\n\"\"\"\nscip-python python temp indexer `pilot.database.models.file_snapshot`/__init__:: The code defines a base model class for a database, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes functions to create a PostgreSQL or SQLite database connection based on the environment variable `DATABASE_TYPE`.\nscip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#: This code defines a model for a file snapshot entity in a database, with fields for an ID, creation and update timestamps, and foreign keys to other entities such as apps, development steps, and files. It also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\n\"\"\"\nfrom database.models.files import File\n\"\"\"\nscip-python python temp indexer `pilot.database.models.files`/__init__:: The code defines a base model class for an app entity with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\nscip-python python temp indexer `pilot.database.models.files`/File#: This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n\"\"\"\nfrom logger.logger import logger\n\"\"\"\nscip-python python temp indexer `pilot.logger.logger`/__init__:: This code sets up a custom logger for an application, which filters sensitive information from log records and removes ANSI escape sequences.\nscip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n\"\"\"\nfrom utils.dot_gpt_pilot import DotGptPilot\n\"\"\"\nscip-python python temp indexer `pilot.utils.dot_gpt_pilot`/__init__:: The code defines a class called `DotGptPilot` that manages the `.gpt-pilot` directory and creates folders for chat logs and log files.\nscip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#: The code defines a class called `DotGptPilot` that manages the `.gpt-pilot` directory. It has several functions, including `with_root_path`, `chat_log_folder`, and `log_chat_completion`. These functions create folders and log chat completion data to YAML or JSON files.\n\"\"\"\n\nfrom utils.telemetry import telemetry\n\"\"\"\nscip-python python temp indexer `pilot.utils.telemetry`/__init__:: This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server.\nscip-python python temp indexer `pilot.utils.telemetry`/telemetry.: undefined\n\"\"\"\n\nclass Project:\n    \"\"\"The code defines a class called \"Project\" that represents a software development project. It includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\"\"\"\n    pass\n","documentation":"The code defines a Python class called \"Project\" that represents a software development project, with functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks."}},{"key":"scip-python python temp indexer `pilot.helpers.project`/Project#","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.project`/Project#","language":"python","range":[30,0,457,56],"content":"class Project:\n    def __init__(self, args, name=None, project_description=None, clarifications=None, user_stories=None,\n                 user_tasks=None, architecture=None, development_plan=None, current_step=None, ipc_client_instance=None,\n                 enable_dot_pilot_gpt=True):\n        \"\"\"\n        Initialize a project.\n\n        Args:\n            args (dict): Project arguments - app_id, (app_type, name), user_id, email, password, step\n            name (str, optional): Project name. Default is None.\n            description (str, optional): Project description. Default is None.\n            user_stories (list, optional): List of user stories. Default is None.\n            user_tasks (list, optional): List of user tasks. Default is None.\n            architecture (str, optional): Project architecture. Default is None.\n            development_plan (str, optional): Development plan. Default is None.\n            current_step (str, optional): Current step in the project. Default is None.\n        \"\"\"\n        self.args = args\n        self.llm_req_num = 0\n        self.command_runs_count = 0\n        self.user_inputs_count = 0\n        self.checkpoints = {\n            'last_user_input': None,\n            'last_command_run': None,\n            'last_development_step': None,\n        }\n        # TODO make flexible\n        self.root_path = ''\n        self.skip_until_dev_step = None\n        self.skip_steps = None\n        self.main_prompt = None\n        self.files = []\n        self.continuing_project = args.get('continuing_project', False)\n\n        self.ipc_client_instance = ipc_client_instance\n\n        # self.restore_files({dev_step_id_to_start_from})\n\n        self.finished = False\n        self.current_step = current_step\n        self.name = name\n        self.project_description = project_description\n        self.clarifications = clarifications\n        self.user_stories = user_stories\n        self.user_tasks = user_tasks\n        self.architecture = architecture\n        self.development_plan = development_plan\n        self.dot_pilot_gpt = DotGptPilot(log_chat_completions=enable_dot_pilot_gpt)\n\n    def set_root_path(self, root_path: str):\n        self.root_path = root_path\n        self.dot_pilot_gpt.with_root_path(root_path)\n\n    def start(self):\n        \"\"\"\n        Start the project.\n        \"\"\"\n        telemetry.start()\n        self.project_manager = ProductOwner(self)\n        self.project_manager.get_project_description()\n\n        self.project_manager.get_user_stories()\n        # self.user_tasks = self.project_manager.get_user_tasks()\n\n        self.architect = Architect(self)\n        self.architect.get_architecture()\n\n        self.developer = Developer(self)\n        self.developer.set_up_environment()\n        self.technical_writer = TechnicalWriter(self)\n\n        self.tech_lead = TechLead(self)\n        self.tech_lead.create_development_plan()\n\n        # TODO move to constructor eventually\n        if self.args['step'] is not None and STEPS.index(self.args['step']) < STEPS.index('coding'):\n            clear_directory(self.root_path)\n            delete_all_app_development_data(self.args['app_id'])\n            self.skip_steps = False\n\n        if 'skip_until_dev_step' in self.args:\n            self.skip_until_dev_step = self.args['skip_until_dev_step']\n            if self.args['skip_until_dev_step'] == '0':\n                clear_directory(self.root_path)\n                delete_all_app_development_data(self.args['app_id'])\n                self.skip_steps = False\n            elif self.skip_until_dev_step is not None:\n                should_overwrite_files = None\n                while should_overwrite_files is None or should_overwrite_files.lower() not in AFFIRMATIVE_ANSWERS + NEGATIVE_ANSWERS:\n                    print('yes/no', type='button')\n                    should_overwrite_files = styled_text(\n                        self,\n                        \"Can I overwrite any changes that you might have made to the project since last running GPT Pilot (y/n)?\",\n                        ignore_user_input_count=True\n                    )\n\n                    logger.info('should_overwrite_files: %s', should_overwrite_files)\n                    if should_overwrite_files in NEGATIVE_ANSWERS:\n                        break\n                    elif should_overwrite_files in AFFIRMATIVE_ANSWERS:\n                        FileSnapshot.delete().where(\n                            FileSnapshot.app == self.app and FileSnapshot.development_step == self.skip_until_dev_step).execute()\n                        self.save_files_snapshot(self.skip_until_dev_step)\n                        break\n        # TODO END\n\n        self.dot_pilot_gpt.write_project(self)\n        print(json.dumps({\n            \"project_stage\": \"coding\"\n        }), type='info')\n        self.developer.start_coding()\n\n    def finish(self):\n        \"\"\"\n        Finish the project.\n        \"\"\"\n        while True:\n            feature_description = ask_user(self, \"Project is finished! Do you want to add any features or changes? \"\n                                                 \"If yes, describe it here and if no, just press ENTER\",\n                                           require_some_input=False)\n\n            if feature_description == '':\n                return\n\n            self.tech_lead.create_feature_plan(feature_description)\n            self.developer.start_coding()\n            self.tech_lead.create_feature_summary(feature_description)\n\n    def get_directory_tree(self, with_descriptions=False):\n        \"\"\"\n        Get the directory tree of the project.\n\n        Args:\n            with_descriptions (bool, optional): Whether to include descriptions. Default is False.\n\n        Returns:\n            dict: The directory tree.\n        \"\"\"\n        # files = {}\n        # if with_descriptions and False:\n        #     files = File.select().where(File.app_id == self.args['app_id'])\n        #     files = {snapshot.name: snapshot for snapshot in files}\n        # return build_directory_tree_with_descriptions(self.root_path, ignore=IGNORE_FOLDERS, files=files, add_descriptions=False)\n        return build_directory_tree(self.root_path, ignore=IGNORE_FOLDERS)\n\n    def get_test_directory_tree(self):\n        \"\"\"\n        Get the directory tree of the tests.\n\n        Returns:\n            dict: The directory tree of tests.\n        \"\"\"\n        # TODO remove hardcoded path\n        return build_directory_tree(self.root_path + '/tests', ignore=IGNORE_FOLDERS)\n\n    def get_all_coded_files(self):\n        \"\"\"\n        Get all coded files in the project.\n\n        Returns:\n            list: A list of coded files.\n        \"\"\"\n        files = File.select().where(File.app_id == self.args['app_id'])\n\n        # TODO temoprary fix to eliminate files that are not in the project\n        files = [file for file in files if len(FileSnapshot.select().where(FileSnapshot.file_id == file.id)) > 0]\n        # TODO END\n\n        files = self.get_files([file.path + '/' + file.name for file in files])\n\n        # Don't send contents of binary files\n        for file in files:\n            if not isinstance(file[\"content\"], str):\n                file[\"content\"] = f\"<<binary file, {len(file['content'])} bytes>>\"\n\n        # TODO temoprary fix to eliminate files that are not in the project\n        files = [file for file in files if file['content'] != '']\n        # TODO END\n\n        return files\n\n    def get_files(self, files):\n        \"\"\"\n        Get file contents.\n\n        Args:\n            files (list): List of file paths.\n\n        Returns:\n            list: A list of files with content.\n        \"\"\"\n        files_with_content = []\n        for file_path in files:\n            try:\n                # TODO path is sometimes relative and sometimes absolute - fix at one point\n                _, full_path = self.get_full_file_path(file_path, file_path)\n                file_data = get_file_contents(full_path, self.root_path)\n            except ValueError:\n                file_data = {\"path\": file_path, \"content\": ''}\n\n            files_with_content.append(file_data)\n        return files_with_content\n\n    def find_input_required_lines(self, file_content):\n        \"\"\"\n        Parses the provided string (representing file content) and returns a list of tuples containing\n        the line number and line content for lines that contain the text 'INPUT_REQUIRED'.\n\n        :param file_content: The string content of the file.\n        :return: A list of tuples (line number, line content).\n        \"\"\"\n        lines_with_input_required = []\n        lines = file_content.split('\\n')\n\n        for line_number, line in enumerate(lines, start=1):\n            if 'INPUT_REQUIRED' in line:\n                lines_with_input_required.append((line_number, line.strip()))\n\n        return lines_with_input_required\n\n    def save_file(self, data):\n        \"\"\"\n        Save a file.\n\n        Args:\n            data: { name: 'hello.py', path: 'path/to/hello.py', content: 'print(\"Hello!\")' }\n        \"\"\"\n\n        name = data['name'] if 'name' in data and data['name'] != '' else os.path.basename(data['path'])\n        path = data['path'] if 'path' in data else name\n\n        path, full_path = self.get_full_file_path(path, name)\n        update_file(full_path, data['content'])\n        if full_path not in self.files:\n            self.files.append(full_path)\n\n        (File.insert(app=self.app, path=path, name=name, full_path=full_path)\n         .on_conflict(\n            conflict_target=[File.app, File.name, File.path],\n            preserve=[],\n            update={'name': name, 'path': path, 'full_path': full_path})\n         .execute())\n\n        if not self.skip_steps:\n            inputs_required = self.find_input_required_lines(data['content'])\n            for line_number, line_content in inputs_required:\n                user_input = None\n                print(color_yellow_bold(f'Input required on line {line_number}:\\n{line_content}') + '\\n')\n                while user_input is None or user_input.lower() not in AFFIRMATIVE_ANSWERS + ['continue']:\n                    print({'path': full_path, 'line': line_number}, type='openFile')\n                    print('continue', type='button')\n                    user_input = styled_text(\n                        self,\n                        f'Please open the file {data[\"path\"]} on the line {line_number} and add the required input. Once you\\'re done, type \"y\" to continue.',\n                        ignore_user_input_count=True\n                    )\n\n    def get_full_file_path(self, file_path: str, file_name: str) -> Tuple[str, str]:\n        \"\"\"\n        Combine file path and name into a full file path.\n\n        :param file_path: File path.\n        :param file_name: File name.\n        :return: (file_path, absolute_path) pair.\n\n        Tries to combine the two in a way that makes most sense, even if the given path\n        have some shared components.\n        \"\"\"\n        def normalize_path(path: str) -> Tuple[str, str]:\n            \"\"\"\n            Normalizes a path (see rules in comments) and returns (directory, basename) pair.\n\n            :param path: Path to normalize.\n            :return: (directory, basename) pair.\n\n            Directory component may be empty if the path is considered to be a\n            file name. Basename component may be empty if the path is considered\n            to be a directory name.\n            \"\"\"\n\n            # Normalize path to use os-specific separator (as GPT may output paths\n            # with / even if we're on Windows)\n            path = str(Path(path))\n\n            # If a path references user's home directory (~), we only care about\n            # the relative part within it (assume ~ is meant to be the project path).\n            # Examples:\n            # - /Users/zvonimirsabljic/Development/~/pilot/server.js -> /pilot/server.js\n            # - ~/pilot/server.js -> /pilot/server.js\n            if \"~\" in path:\n                path = path.split(\"~\")[-1]\n\n            # If the path explicitly references the current directory, remove it so we\n            # can nicely use it for joins later.\n            if path == \".\" or path.startswith(f\".{os.path.sep}\"):\n                path = path[1:]\n\n            # If the path is absolute, we only care about the relative part within\n            # the project directory (assume the project directory is the root).\n            # Examples:\n            # - /Users/zvonimirsabljic/Development/copilot/pilot/server.js -> /pilot/server.js\n            # - /pilot/server.js -> /pilot/server.js\n            # - C:\\Users\\zvonimirsabljic\\Development\\copilot\\pilot\\server.js -> \\pilot\\server.js\n            path = path.replace(self.root_path, '')\n\n            # If the final component of the path doesn't have a file extension,\n            # assume it's a directory and add a final (back)slash.\n            # Examples:\n            # - /pilot/server.js -> /pilot/server.js\n            # - /pilot -> /pilot/\n            # - \\pilot\\server.js -> \\pilot\\server.js\n            # - \\pilot -> \\pilot\\\n            base = os.path.basename(path)\n            if base and \".\" not in base:\n                path += os.path.sep\n\n            # In case we're in Windows and dealing with full paths, remove the drive letter.\n            _, path = os.path.splitdrive(path)\n\n            # We want all paths to start with / (or \\\\ in Windows)\n            if not path.startswith(os.path.sep):\n                path = os.path.sep + path\n\n            return os.path.split(path)\n\n        head_path, tail_path = normalize_path(file_path)\n        head_name, tail_name = normalize_path(file_name)\n\n        # Prefer directory path from the first argument (file_path), and\n        # prefer the file name from the second argument (file_name).\n        final_file_path = head_path if head_path != '' else head_name\n        final_file_name = tail_name if tail_name != '' else tail_path\n\n        # If the directory is contained in the second argument (file_name),\n        # use that (as it might include additional subdirectories).\n        if head_path in head_name:\n            final_file_path = head_name\n\n        # Try to combine the directory and file name from the two arguments\n        # in the way that makes the most sensible output.\n        if final_file_path != head_name and head_name not in head_path:\n            if '.' in tail_path:\n                final_file_path = head_name + head_path\n            else:\n                final_file_path = head_path + head_name\n\n        if final_file_path == '':\n            final_file_path = os.path.sep\n\n        final_absolute_path = os.path.join(self.root_path, final_file_path[1:], final_file_name)\n        return final_file_path, final_absolute_path\n\n\n    def save_files_snapshot(self, development_step_id):\n        files = get_directory_contents(self.root_path, ignore=IGNORE_FOLDERS)\n        development_step, created = DevelopmentSteps.get_or_create(id=development_step_id)\n\n        for file in files:\n            print(color_cyan(f'Saving file {file[\"full_path\"]}'))\n            # TODO this can be optimized so we don't go to the db each time\n            file_in_db, created = File.get_or_create(\n                app=self.app,\n                name=file['name'],\n                path=file['path'],\n                full_path=file['full_path'],\n            )\n\n            file_snapshot, created = FileSnapshot.get_or_create(\n                app=self.app,\n                development_step=development_step,\n                file=file_in_db,\n                defaults={'content': file.get('content', '')}\n            )\n            file_snapshot.content = file['content']\n            file_snapshot.save()\n\n    def restore_files(self, development_step_id):\n        development_step = DevelopmentSteps.get(DevelopmentSteps.id == development_step_id)\n        file_snapshots = FileSnapshot.select().where(FileSnapshot.development_step == development_step)\n\n        clear_directory(self.root_path, IGNORE_FOLDERS + self.files)\n        for file_snapshot in file_snapshots:\n            update_file(file_snapshot.file.full_path, file_snapshot.content)\n            if file_snapshot.file.full_path not in self.files:\n                self.files.append(file_snapshot.file.full_path)\n\n    def delete_all_steps_except_current_branch(self):\n        delete_unconnected_steps_from(self.checkpoints['last_development_step'], 'previous_step')\n        delete_unconnected_steps_from(self.checkpoints['last_command_run'], 'previous_step')\n        delete_unconnected_steps_from(self.checkpoints['last_user_input'], 'previous_step')\n\n    def ask_for_human_intervention(self, message, description=None, cbs={}, convo=None, is_root_task=False):\n        answer = ''\n        question = color_yellow_bold(message)\n\n        if description is not None:\n            question += '\\n' + '-' * 100 + '\\n' + color_white_bold(description) + '\\n' + '-' * 100 + '\\n'\n\n        reset_branch_id = None if convo is None else convo.save_branch()\n\n        while answer.lower() != 'continue':\n            print('continue', type='button')\n            answer = ask_user(self, CHECK_AND_CONTINUE,\n                              require_some_input=False,\n                              hint=question)\n\n            try:\n                if answer.lower() in cbs:\n                    return cbs[answer.lower()](convo)\n                elif answer != '':\n                    return {'user_input': answer}\n            except TokenLimitError as e:\n                if is_root_task and answer.lower() not in cbs and answer != '':\n                    convo.load_branch(reset_branch_id)\n                    return {'user_input': answer}\n                else:\n                    raise e\n\n    def log(self, text, message_type):\n        if self.ipc_client_instance is None or self.ipc_client_instance.client is None:\n            print(text)\n        else:\n            self.ipc_client_instance.send({\n                'type': MESSAGE_TYPE[message_type],\n                'content': str(text),\n            })\n            if message_type == MESSAGE_TYPE['user_input_request']:\n                return self.ipc_client_instance.listen()","file":"/pilot/helpers/Project.py","fileHash":"4d8215b25fa6dfe61adc429af601243ce7ae701549bb568ae1e5b9dd3ba7bac8","hash":"cfbbc0f15eadf24862f6cd5e4a3a8f80be1b152f46c20486be67f43bf6d2d811","processedContent":"class Project:\n    def __init__(self, args, name=None, project_description=None, clarifications=None, user_stories=None,\n                 \"\"\"This code defines a class that initializes a project, including setting up the project's name, description, and other metadata. It also sets up the project's architecture, development plan, and current step, as well as some internal variables used for tracking the project's progress.\"\"\"\n                 pass\n\n    def set_root_path(self, root_path: str):\n        \"\"\"This code sets the root path for a file system, allowing the program to access files and directories within that path.\"\"\"\n        pass\n\n    def start(self):\n        \"\"\"The code defines a class called \"Project\" that represents a software development project. It includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\"\"\"\n        pass\n\n    def finish(self):\n        \"\"\"This code defines a function called `finish` that retrieves user input from a database, styles the question, and saves the response to the database. It also logs the question and answer to a logger.\"\"\"\n        pass\n\n    def get_directory_tree(self, with_descriptions=False):\n        \"\"\"This code defines a function called `get_directory_tree` that returns a dictionary representing the directory tree of a project. The function takes an optional argument `with_descriptions` to include file descriptions in the output.\"\"\"\n        pass\n\n    def get_test_directory_tree(self):\n        \"\"\"This code defines a function called `get_test_directory_tree` that returns a dictionary representing the directory tree of tests. It does this by calling the `build_directory_tree` function with the root path of the tests and a list of folders to ignore.\"\"\"\n        pass\n\n    def get_all_coded_files(self):\n        \"\"\"This code defines a function called `get_all_coded_files` that retrieves all files in a project and returns them as a list of dictionaries, each containing the file's path, contents, and other metadata.\"\"\"\n        pass\n\n    def get_files(self, files):\n        \"\"\"This code defines a function called `get_files` that takes a list of file paths as an argument and returns a list of files with their contents. It first tries to read the file using UTF-8 encoding, but if that fails, it treats the file as a binary file.\"\"\"\n        pass\n\n    def find_input_required_lines(self, file_content):\n        \"\"\"This code defines a function that takes a string representing file content and returns a list of tuples containing the line number and line content for lines that contain the text \"INPUT_REQUIRED\".\"\"\"\n        pass\n\n    def save_file(self, data):\n        \"\"\"The code defines a function called `save_file` that takes a dictionary of file data as an argument. It creates a new file with the given name and content, and updates the file's path if necessary. The function also retrieves user input for any lines that contain the text \"INPUT_REQUIRED\" and saves it to the database.\"\"\"\n        pass\n\n    def get_full_file_path(self, file_path: str, file_name: str) -> Tuple[str, str]:\n        \"\"\"This code takes two arguments, a file path and a file name, and combines them into a full file path while considering the directory structure. It also normalizes the path by removing unnecessary components and ensuring that the final component has a file extension.\"\"\"\n        pass\n\n\n    def save_files_snapshot(self, development_step_id):\n        \"\"\"The code defines a function called `save_files_snapshot` that saves the contents of files in a directory to a database. It also creates a development step entity in the database and saves file snapshots for each file in the directory.\"\"\"\n        pass\n\n    def restore_files(self, development_step_id):\n        \"\"\"The code defines a function called `restore_files` that takes a development step ID as an argument. It retrieves the file snapshots associated with the development step, clears the project directory of any existing files, and then updates each file snapshot's file with its content.\"\"\"\n        pass\n\n    def delete_all_steps_except_current_branch(self):\n        \"\"\"This code deletes all steps in the database that are not connected to the current step, which is determined by the `last_development_step`, `last_command_run`, and `last_user_input` checkpoints.\"\"\"\n        pass\n\n    def ask_for_human_intervention(self, message, description=None, cbs={}, convo=None, is_root_task=False):\n        \"\"\"This code defines a function called `ask_user` that retrieves user input from a database, styles the question, and saves the response to the database. It also logs the question and answer to a logger.\"\"\"\n        pass\n\n    def log(self, text, message_type):\n        if self.ipc_client_instance is None or self.ipc_client_instance.client is None:\n            print(text)\n        else:\n            self.ipc_client_instance.send({\n                'type': MESSAGE_TYPE[message_type],\n                'content': str(text),\n            })\n            if message_type == MESSAGE_TYPE['user_input_request']:\n                return self.ipc_client_instance.listen()","documentation":"The code defines a class called \"Project\" that represents a software development project. It includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks."}},{"key":"scip-python python temp indexer `pilot.utils.arguments`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.arguments`/__init__:","language":"python","range":[0,0,111,0],"content":"import hashlib\nimport os\nimport re\nimport sys\nimport uuid\nfrom getpass import getuser\nfrom database.database import get_app, get_app_by_user_workspace\nfrom utils.style import color_green_bold, style_config\nfrom utils.utils import should_execute_step\nfrom const.common import STEPS\n\n\ndef get_arguments():\n    # The first element in sys.argv is the name of the script itself.\n    # Any additional elements are the arguments passed from the command line.\n    args = sys.argv[1:]\n\n    # Create an empty dictionary to store the key-value pairs.\n    arguments = {\n        'continuing_project': False\n    }\n\n    # Loop through the arguments and parse them as key-value pairs.\n    for arg in args:\n        if '=' in arg:\n            key, value = arg.split('=', 1)\n            arguments[key] = value\n        else:\n            arguments[arg] = True\n\n    theme_mapping = {'light': style_config.theme.LIGHT, 'dark': style_config.theme.DARK}\n    theme_value = arguments.get('theme', 'dark')\n    style_config.set_theme(theme=theme_mapping.get(theme_value, style_config.theme.DARK))\n\n    if 'user_id' not in arguments:\n        arguments['user_id'] = username_to_uuid(getuser())\n\n    app = None\n    if 'workspace' in arguments:\n        arguments['workspace'] = os.path.abspath(arguments['workspace'])\n        app = get_app_by_user_workspace(arguments['user_id'], arguments['workspace'])\n        if app is not None:\n            arguments['app_id'] = str(app.id)\n            arguments['continuing_project'] = True\n    else:\n        arguments['workspace'] = None\n\n    if 'app_id' in arguments:\n        if app is None:\n            app = get_app(arguments['app_id'])\n\n        arguments['app_type'] = app.app_type\n        arguments['name'] = app.name\n        arguments['status'] = app.status\n        arguments['continuing_project'] = True\n        if 'step' not in arguments or ('step' in arguments and not should_execute_step(arguments['step'], app.status)):\n            arguments['step'] = 'finished' if app.status == 'finished' else STEPS[STEPS.index(app.status) + 1]\n\n        print(color_green_bold('\\n------------------ LOADING PROJECT ----------------------'))\n        print(color_green_bold(f'{app.name} (app_id={arguments[\"app_id\"]})'))\n        print(color_green_bold('--------------------------------------------------------------\\n'))\n\n    elif '--get-created-apps-with-steps' not in args:\n        arguments['app_id'] = str(uuid.uuid4())\n        print(color_green_bold('\\n------------------ STARTING NEW PROJECT ----------------------'))\n        print(\"If you wish to continue with this project in future run:\")\n        print(color_green_bold(f'python {sys.argv[0]} app_id={arguments[\"app_id\"]}'))\n        print(color_green_bold('--------------------------------------------------------------\\n'))\n\n    if 'email' not in arguments:\n        arguments['email'] = get_email()\n\n    if 'password' not in arguments:\n        arguments['password'] = 'password'\n\n    if 'step' not in arguments:\n        arguments['step'] = None\n\n    return arguments\n\n\ndef get_email():\n    # Attempt to get email from .gitconfig\n    gitconfig_path = os.path.expanduser('~/.gitconfig')\n\n    if os.path.exists(gitconfig_path):\n        with open(gitconfig_path, 'r', encoding=\"utf-8\") as file:\n            content = file.read()\n\n            # Use regex to search for email address\n            email_match = re.search(r'email\\s*=\\s*([\\w\\.-]+@[\\w\\.-]+)', content)\n\n            if email_match:\n                return email_match.group(1)\n\n    # If not found, return a UUID\n    # todo change email so its not uuid4 but make sure to fix storing of development steps where\n    #  1 user can have multiple apps. In that case each app should have its own development steps\n    return str(uuid.uuid4())\n\n\n# TODO can we make BaseModel.id a CharField with default=uuid4?\ndef username_to_uuid(username):\n    \"\"\"\n    Creates a consistent UUID from a username\n    :param username:\n    :return:\n    \"\"\"\n    sha1 = hashlib.sha1(username.encode()).hexdigest()\n    uuid_str = \"{}-{}-{}-{}-{}\".format(sha1[:8], sha1[8:12], sha1[12:16], sha1[16:20], sha1[20:32])\n    return str(uuid.UUID(uuid_str))\n","file":"/pilot/utils/arguments.py","fileHash":"1fb9c708bed0af886d7c0613f91d00bddb8a9d144f9e4a3681ba9fe9c09580ed","hash":"1fb9c708bed0af886d7c0613f91d00bddb8a9d144f9e4a3681ba9fe9c09580ed","processedContent":"import hashlib #undefined\nimport os #undefined\nimport re #undefined\nimport sys #undefined\nimport uuid #undefined\nfrom getpass import getuser\n\"\"\"\nscip-python python python-stdlib 3.11 getpass/__init__:: undefined\nscip-python python python-stdlib 3.11 getpass/getuser().: undefined\n\"\"\"\nfrom database.database import get_app, get_app_by_user_workspace\n\"\"\"\nscip-python python temp indexer `pilot.database.database`/__init__:: The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.database.database`/get_app().: This code defines a function called `get_app` that retrieves an app entity from the database based on its ID. It also includes error handling to raise a ValueError if the app is not found.\nscip-python python temp indexer `pilot.database.database`/get_app_by_user_workspace().: This code defines a function called `get_app_by_user_workspace` that retrieves an app entity based on a user ID and workspace. It does this by querying the `UserApps` model, which is a base model class for an app entity that includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. The function returns the retrieved app entity or None if it doesn't exist.\n\"\"\"\nfrom utils.style import color_green_bold, style_config\n\"\"\"\nscip-python python temp indexer `pilot.utils.style`/__init__:: This code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.utils.style`/color_green_bold.: undefined\nscip-python python temp indexer `pilot.utils.style`/style_config.: undefined\n\"\"\"\nfrom utils.utils import should_execute_step\n\"\"\"\nscip-python python temp indexer `pilot.utils.utils`/__init__:: The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.utils.utils`/should_execute_step().: This code checks if the current step should be executed based on the argument passed in and the current step. It returns true if the current step is greater than or equal to the argument step.\n\"\"\"\nfrom const.common import STEPS\n\"\"\"\nscip-python python temp indexer `pilot.const.common`/__init__:: This code defines a set of constants and variables used in the project, including a list of folders to ignore during certain operations.\nscip-python python temp indexer `pilot.const.common`/STEPS.: undefined\n\"\"\"\n\n\ndef get_arguments():\n    \"\"\"The code defines a function called `get_arguments()` that retrieves command-line arguments and sets up the environment for the Pilot app. It checks for the presence of certain arguments, such as `app_id`, `workspace`, and `step`, and sets default values if they are not provided. It also handles errors and prints messages to the console.\"\"\"\n    pass\n\n\ndef get_email():\n    \"\"\"This code defines a function called `get_email()` that attempts to retrieve the user's email address from their `.gitconfig` file. If the email is not found, it returns a UUID instead.\"\"\"\n    pass\n\n\n# TODO can we make BaseModel.id a CharField with default=uuid4?\ndef username_to_uuid(username):\n    \"\"\"This code takes a username as input and generates a consistent UUID based on the SHA-1 hash of the username.\"\"\"\n    pass\n","documentation":"The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt."}},{"key":"scip-python python temp indexer `pilot.utils.arguments`/get_arguments().","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.arguments`/get_arguments().","language":"python","range":[12,0,78,20],"content":"def get_arguments():\n    # The first element in sys.argv is the name of the script itself.\n    # Any additional elements are the arguments passed from the command line.\n    args = sys.argv[1:]\n\n    # Create an empty dictionary to store the key-value pairs.\n    arguments = {\n        'continuing_project': False\n    }\n\n    # Loop through the arguments and parse them as key-value pairs.\n    for arg in args:\n        if '=' in arg:\n            key, value = arg.split('=', 1)\n            arguments[key] = value\n        else:\n            arguments[arg] = True\n\n    theme_mapping = {'light': style_config.theme.LIGHT, 'dark': style_config.theme.DARK}\n    theme_value = arguments.get('theme', 'dark')\n    style_config.set_theme(theme=theme_mapping.get(theme_value, style_config.theme.DARK))\n\n    if 'user_id' not in arguments:\n        arguments['user_id'] = username_to_uuid(getuser())\n\n    app = None\n    if 'workspace' in arguments:\n        arguments['workspace'] = os.path.abspath(arguments['workspace'])\n        app = get_app_by_user_workspace(arguments['user_id'], arguments['workspace'])\n        if app is not None:\n            arguments['app_id'] = str(app.id)\n            arguments['continuing_project'] = True\n    else:\n        arguments['workspace'] = None\n\n    if 'app_id' in arguments:\n        if app is None:\n            app = get_app(arguments['app_id'])\n\n        arguments['app_type'] = app.app_type\n        arguments['name'] = app.name\n        arguments['status'] = app.status\n        arguments['continuing_project'] = True\n        if 'step' not in arguments or ('step' in arguments and not should_execute_step(arguments['step'], app.status)):\n            arguments['step'] = 'finished' if app.status == 'finished' else STEPS[STEPS.index(app.status) + 1]\n\n        print(color_green_bold('\\n------------------ LOADING PROJECT ----------------------'))\n        print(color_green_bold(f'{app.name} (app_id={arguments[\"app_id\"]})'))\n        print(color_green_bold('--------------------------------------------------------------\\n'))\n\n    elif '--get-created-apps-with-steps' not in args:\n        arguments['app_id'] = str(uuid.uuid4())\n        print(color_green_bold('\\n------------------ STARTING NEW PROJECT ----------------------'))\n        print(\"If you wish to continue with this project in future run:\")\n        print(color_green_bold(f'python {sys.argv[0]} app_id={arguments[\"app_id\"]}'))\n        print(color_green_bold('--------------------------------------------------------------\\n'))\n\n    if 'email' not in arguments:\n        arguments['email'] = get_email()\n\n    if 'password' not in arguments:\n        arguments['password'] = 'password'\n\n    if 'step' not in arguments:\n        arguments['step'] = None\n\n    return arguments","file":"/pilot/utils/arguments.py","fileHash":"1fb9c708bed0af886d7c0613f91d00bddb8a9d144f9e4a3681ba9fe9c09580ed","hash":"cf20dbba31108c6f02a27aa968a4d21f7e69c49a759f83068f35158a2f3db712","processedContent":"def get_arguments():\n    # The first element in sys.argv is the name of the script itself.\n    # Any additional elements are the arguments passed from the command line.\n    args = sys.argv[1:]\n    \"\"\"\n    scip-python python python-stdlib 3.11 sys/__init__:: undefined\n    scip-python python python-stdlib 3.11 sys/argv.argv.: undefined\n    \"\"\"\n\n    # Create an empty dictionary to store the key-value pairs.\n    arguments = {\n        'continuing_project': False\n    }\n\n    # Loop through the arguments and parse them as key-value pairs.\n    for arg in args:\n        if '=' in arg:\n            key, value = arg.split('=', 1)\n            arguments[key] = value\n        else:\n            arguments[arg] = True\n\n    theme_mapping = {'light': style_config.theme.LIGHT, 'dark': style_config.theme.DARK}\n    \"\"\"\n    scip-python python temp indexer `pilot.utils.style`/style_config.: undefined\n    scip-python python temp indexer `pilot.utils.style`/style_config.: undefined\n    scip-python python temp indexer `pilot.utils.style`/StyleConfig#theme.: undefined\n    scip-python python temp indexer `pilot.utils.style`/StyleConfig#theme.: undefined\n    scip-python python temp indexer `pilot.utils.style`/Theme#LIGHT.: undefined\n    scip-python python temp indexer `pilot.utils.style`/Theme#DARK.: undefined\n    \"\"\"\n    theme_value = arguments.get('theme', 'dark')\n    style_config.set_theme(theme=theme_mapping.get(theme_value, style_config.theme.DARK))\n    \"\"\"\n    scip-python python temp indexer `pilot.utils.style`/style_config.: undefined\n    scip-python python temp indexer `pilot.utils.style`/style_config.: undefined\n    scip-python python temp indexer `pilot.utils.style`/StyleConfig#theme.: undefined\n    scip-python python temp indexer `pilot.utils.style`/Theme#DARK.: undefined\n    scip-python python temp indexer `pilot.utils.style`/StyleConfig#set_theme().: This code updates the theme of a StyleConfig object by setting its theme attribute to a new value and also updating the theme attribute of its theme_style instance.\n    \"\"\"\n\n    if 'user_id' not in arguments:\n        arguments['user_id'] = username_to_uuid(getuser())\n        \"\"\"\n        scip-python python temp indexer `pilot.utils.arguments`/username_to_uuid().: This code takes a username as input and generates a consistent UUID based on the SHA-1 hash of the username.\n        scip-python python python-stdlib 3.11 getpass/getuser().: undefined\n        \"\"\"\n\n    app = None\n    if 'workspace' in arguments:\n        arguments['workspace'] = os.path.abspath(arguments['workspace'])\n        \"\"\"\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/path.: undefined\n        scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n        \"\"\"\n        app = get_app_by_user_workspace(arguments['user_id'], arguments['workspace']) #This code defines a function called `get_app_by_user_workspace` that retrieves an app entity based on a user ID and workspace. It does this by querying the `UserApps` model, which is a base model class for an app entity that includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. The function returns the retrieved app entity or None if it doesn't exist.\n        if app is not None:\n            arguments['app_id'] = str(app.id)\n            arguments['continuing_project'] = True\n    else:\n        arguments['workspace'] = None\n\n    if 'app_id' in arguments:\n        if app is None:\n            app = get_app(arguments['app_id']) #This code defines a function called `get_app` that retrieves an app entity from the database based on its ID. It also includes error handling to raise a ValueError if the app is not found.\n\n        arguments['app_type'] = app.app_type\n        arguments['name'] = app.name\n        arguments['status'] = app.status\n        arguments['continuing_project'] = True\n        if 'step' not in arguments or ('step' in arguments and not should_execute_step(arguments['step'], app.status)): #This code checks if the current step should be executed based on the argument passed in and the current step. It returns true if the current step is greater than or equal to the argument step.\n            arguments['step'] = 'finished' if app.status == 'finished' else STEPS[STEPS.index(app.status) + 1]\n            \"\"\"\n            scip-python python temp indexer `pilot.const.common`/STEPS.: undefined\n            scip-python python temp indexer `pilot.const.common`/STEPS.: undefined\n            \"\"\"\n\n        print(color_green_bold('\\n------------------ LOADING PROJECT ----------------------')) #undefined\n        print(color_green_bold(f'{app.name} (app_id={arguments[\"app_id\"]})')) #undefined\n        print(color_green_bold('--------------------------------------------------------------\\n')) #undefined\n\n    elif '--get-created-apps-with-steps' not in args:\n        arguments['app_id'] = str(uuid.uuid4())\n        \"\"\"\n        scip-python python python-stdlib 3.11 uuid/__init__:: undefined\n        scip-python python python-stdlib 3.11 uuid/uuid4().: undefined\n        \"\"\"\n        print(color_green_bold('\\n------------------ STARTING NEW PROJECT ----------------------')) #undefined\n        print(\"If you wish to continue with this project in future run:\")\n        print(color_green_bold(f'python {sys.argv[0]} app_id={arguments[\"app_id\"]}'))\n        \"\"\"\n        scip-python python python-stdlib 3.11 sys/__init__:: undefined\n        scip-python python python-stdlib 3.11 sys/argv.argv.: undefined\n        scip-python python temp indexer `pilot.utils.style`/color_green_bold.: undefined\n        \"\"\"\n        print(color_green_bold('--------------------------------------------------------------\\n')) #undefined\n\n    if 'email' not in arguments:\n        arguments['email'] = get_email() #This code defines a function called `get_email()` that attempts to retrieve the user's email address from their `.gitconfig` file. If the email is not found, it returns a UUID instead.\n\n    if 'password' not in arguments:\n        arguments['password'] = 'password'\n\n    if 'step' not in arguments:\n        arguments['step'] = None\n\n    return arguments","documentation":"The code defines a function called `get_arguments()` that retrieves command-line arguments and sets up the environment for the Pilot app. It checks for the presence of certain arguments, such as `app_id`, `workspace`, and `step`, and sets default values if they are not provided. It also handles errors and prints messages to the console."}},{"key":"scip-python python temp indexer `pilot.utils.exit`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.exit`/__init__:","language":"python","range":[0,0,115,0],"content":"# exit.py\nimport os\nimport hashlib\nimport requests\n\nfrom helpers.cli import terminate_running_processes\nfrom utils.questionary import styled_text\n\nfrom utils.telemetry import telemetry\n\ndef send_telemetry(path_id):\n\n    # Prepare the telemetry data\n    telemetry_data = {\n        \"pathId\": path_id,\n        \"event\": \"pilot-exit\"\n    }\n\n    try:\n        response = requests.post(\"https://api.pythagora.io/telemetry\", json=telemetry_data)\n        response.raise_for_status()\n    except requests.RequestException as err:\n        print(f\"Failed to send telemetry data: {err}\")\n\n\ndef send_feedback(feedback, path_id):\n    \"\"\"Send the collected feedback to the endpoint.\"\"\"\n    # Prepare the feedback data (you can adjust the structure as per your backend needs)\n    feedback_data = {\n        \"pathId\": path_id,\n        \"data\": feedback,\n        \"event\": \"pilot-feedback\"\n    }\n\n    try:\n        response = requests.post(\"https://api.pythagora.io/telemetry\", json=feedback_data)\n        response.raise_for_status()\n    except requests.RequestException as err:\n        print(f\"Failed to send feedback data: {err}\")\n\n\ndef get_path_id():\n    # Calculate the SHA-256 hash of the installation directory\n    installation_directory = os.path.abspath(os.path.join(os.getcwd(), \"..\"))\n    return hashlib.sha256(installation_directory.encode()).hexdigest()\n\n\ndef ask_to_store_prompt(project, path_id):\n    init_prompt = project.main_prompt if project is not None and project.main_prompt else None\n    if init_prompt is None:\n        return\n\n    # Prepare the prompt data\n    telemetry_data = {\n        \"pathId\": path_id,\n        \"event\": \"pilot-prompt\",\n        \"data\": init_prompt\n    }\n    question = ('We would appreciate if you let us store your initial app prompt. If you are OK with that, please just '\n                'press ENTER')\n\n    try:\n        answer = styled_text(project, question, ignore_user_input_count=True)\n        if answer == '':\n            telemetry.set(\"initial_prompt\", init_prompt)\n            response = requests.post(\"https://api.pythagora.io/telemetry\", json=telemetry_data)\n            response.raise_for_status()\n    except requests.RequestException as err:\n        print(f\"Failed to store prompt: {err}\")\n\n\ndef ask_user_feedback(project, path_id, ask_feedback):\n    question = ('Were you able to create any app that works? Please write any feedback you have or just press ENTER to exit:')\n    feedback = None\n    if ask_feedback:\n        feedback = styled_text(project, question, ignore_user_input_count=True)\n    if feedback:  # only send if user provided feedback\n        telemetry.set(\"user_feedback\", feedback)\n        send_feedback(feedback, path_id)\n\n\ndef ask_user_email(project, path_id, ask_feedback):\n    if not ask_feedback:\n        return False\n\n    question = (\n        \"How did GPT Pilot do? We'd love to talk with you and hear your thoughts. \"\n        \"If you'd like to be contacted by us, please provide your email address, or just press ENTER to exit:\"\n    )\n    feedback = styled_text(project, question, ignore_user_input_count=True)\n    if feedback:  # only send if user provided feedback\n        telemetry.set(\"user_contact\", feedback)\n        return True\n    return False\n\ndef exit_gpt_pilot(project, ask_feedback=True):\n    terminate_running_processes()\n    path_id = get_path_id()\n\n    send_telemetry(path_id)\n\n    ask_to_store_prompt(project, path_id)\n\n    ask_user_email(project, path_id, ask_feedback)\n\n    # TODO: Turned off for now because we're asking for email, and we don't want to\n    # annoy people.\n    # ask_user_feedback(project, path_id, ask_feedback)\n\n    telemetry.set(\"num_commands\", project.command_runs_count if project is not None else 0)\n    telemetry.set(\"num_inputs\", project.user_inputs_count if project is not None else 0)\n\n    telemetry.send()\n\n    print('Exit', type='exit')\n","file":"/pilot/utils/exit.py","fileHash":"3b8525daaf8fa3f98b7777614195b181a4cbf7b9ba4ab7b9749e7a78e7ae6ddd","hash":"3b8525daaf8fa3f98b7777614195b181a4cbf7b9ba4ab7b9749e7a78e7ae6ddd","processedContent":"# exit.py\nimport os #undefined\nimport hashlib #undefined\nimport requests #undefined\n\nfrom helpers.cli import terminate_running_processes\n\"\"\"\nscip-python python temp indexer `pilot.helpers.cli`/__init__:: The code defines a command-line interface (CLI) that allows users to execute commands and interact with a language model. It includes functions for running commands, checking their output, and handling errors.\nscip-python python temp indexer `pilot.helpers.cli`/terminate_running_processes().: This code terminates running processes by iterating over a list of running processes and calling the `terminate_process` function for each process.\n\"\"\"\nfrom utils.questionary import styled_text\n\"\"\"\nscip-python python temp indexer `pilot.utils.questionary`/__init__:: The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.utils.questionary`/styled_text().: This code defines a function called `styled_text` that retrieves user input from a database, styles the question, and saves the response to the database.\n\"\"\"\n\nfrom utils.telemetry import telemetry\n\"\"\"\nscip-python python temp indexer `pilot.utils.telemetry`/__init__:: This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server.\nscip-python python temp indexer `pilot.utils.telemetry`/telemetry.: undefined\n\"\"\"\n\ndef send_telemetry(path_id):\n    \"\"\"This code sends telemetry data to a remote API when the pilot exits the vehicle. It prepares the data and sends it using the `requests` library, handling any errors that may occur during the request.\"\"\"\n    pass\n\n\ndef send_feedback(feedback, path_id):\n    \"\"\"This code sends collected feedback to a remote endpoint using the `requests` library. It prepares the data and sends it as a JSON payload, handling any errors that may occur during the request.\"\"\"\n    pass\n\n\ndef get_path_id():\n    \"\"\"This code calculates a unique identifier for the current installation directory by hashing the absolute path of the directory using SHA-256.\"\"\"\n    pass\n\n\ndef ask_to_store_prompt(project, path_id):\n    \"\"\"This code is asking the user if they want to store their initial app prompt. If they agree, it sends the prompt to a database and stores it for future use.\"\"\"\n    pass\n\n\ndef ask_user_feedback(project, path_id, ask_feedback):\n    \"\"\"This code defines a function called `ask_user_feedback` that retrieves user input from a database, styles the question, and saves the response to the database.\"\"\"\n    pass\n\n\ndef ask_user_email(project, path_id, ask_feedback):\n    \"\"\"This code defines a function called `ask_user_email` that retrieves user input from a database, styles the question, and saves the response to the database.\"\"\"\n    pass\n\ndef exit_gpt_pilot(project, ask_feedback=True):\n    \"\"\"The code defines a function called `exit_gpt_pilot` that terminates running processes, calculates a unique identifier for the current installation directory, sends telemetry data to a remote API, and stores user input in a database.\"\"\"\n    pass\n","documentation":"The code defines a command-line interface for executing commands and interacting with a language model. It includes functions for running commands, checking their output, and handling errors, as well as functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model."}},{"key":"scip-python python temp indexer `pilot.utils.exit`/exit_gpt_pilot().","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.exit`/exit_gpt_pilot().","language":"python","range":[95,0,114,30],"content":"def exit_gpt_pilot(project, ask_feedback=True):\n    terminate_running_processes()\n    path_id = get_path_id()\n\n    send_telemetry(path_id)\n\n    ask_to_store_prompt(project, path_id)\n\n    ask_user_email(project, path_id, ask_feedback)\n\n    # TODO: Turned off for now because we're asking for email, and we don't want to\n    # annoy people.\n    # ask_user_feedback(project, path_id, ask_feedback)\n\n    telemetry.set(\"num_commands\", project.command_runs_count if project is not None else 0)\n    telemetry.set(\"num_inputs\", project.user_inputs_count if project is not None else 0)\n\n    telemetry.send()\n\n    print('Exit', type='exit')","file":"/pilot/utils/exit.py","fileHash":"3b8525daaf8fa3f98b7777614195b181a4cbf7b9ba4ab7b9749e7a78e7ae6ddd","hash":"e2352d66e991882e7feadae12a73a514f53a75d4ed346a1f4930c96776d0c1f8","processedContent":"def exit_gpt_pilot(project, ask_feedback=True):\n    terminate_running_processes() #This code terminates running processes by iterating over a list of running processes and calling the `terminate_process` function for each process.\n    path_id = get_path_id() #This code calculates a unique identifier for the current installation directory by hashing the absolute path of the directory using SHA-256.\n\n    send_telemetry(path_id) #This code sends telemetry data to a remote API when the pilot exits the vehicle. It prepares the data and sends it using the `requests` library, handling any errors that may occur during the request.\n\n    ask_to_store_prompt(project, path_id) #This code is asking the user if they want to store their initial app prompt. If they agree, it sends the prompt to a database and stores it for future use.\n\n    ask_user_email(project, path_id, ask_feedback) #This code defines a function called `ask_user_email` that retrieves user input from a database, styles the question, and saves the response to the database.\n\n    # TODO: Turned off for now because we're asking for email, and we don't want to\n    # annoy people.\n    # ask_user_feedback(project, path_id, ask_feedback)\n\n    telemetry.set(\"num_commands\", project.command_runs_count if project is not None else 0) #undefined\n    telemetry.set(\"num_inputs\", project.user_inputs_count if project is not None else 0) #undefined\n\n    telemetry.send()\n    \"\"\"\n    scip-python python temp indexer `pilot.utils.telemetry`/telemetry.: undefined\n    scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#send().: This code sends telemetry data to a phone-home endpoint, with the ability to clear all telemetry data after sending it.\n    \"\"\"\n\n    print('Exit', type='exit')","documentation":"The code defines a function called `exit_gpt_pilot` that terminates running processes, calculates a unique identifier for the current installation directory, sends telemetry data to a remote API, and stores user input in a database."}},{"key":"scip-python python temp indexer `pilot.logger.logger`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.logger.logger`/__init__:","language":"python","range":[0,0,61,0],"content":"import os\nimport re\nimport logging\n\n\ndef setup_logger():\n    # Create a custom format for your logs\n    log_format = \"%(asctime)s [%(filename)s:%(lineno)s - %(funcName)20s() ] %(levelname)s: %(message)s\"\n\n    # Create a log handler for file output\n    file_handler = logging.FileHandler(\n        filename=os.path.join(os.path.dirname(__file__), 'debug.log'),\n        mode='w',\n        encoding='utf-8',\n    )\n\n    # Apply the custom format to the handler\n    formatter = logging.Formatter(log_format)\n    file_handler.setFormatter(formatter)\n    # file_handler.addFilter(lambda record: record.levelno <= logging.INFO)\n    file_handler.addFilter(filter_sensitive_fields)\n\n    # Create a logger and add the handler\n    logger = logging.getLogger()\n    logger.addHandler(file_handler)\n\n    if os.getenv('DEBUG') == 'true':\n        logger.setLevel(logging.DEBUG)\n    else:\n        logger.setLevel(logging.INFO)\n\n    return logger\n\n\nsensitive_fields = ['--api-key', 'password']\n\n\ndef filter_sensitive_fields(record):\n    # TODO: also remove escape sequences for colors, bold etc\n    if isinstance(record.args, dict):  # check if args is a dictionary\n        args = record.args.copy()\n        for field in sensitive_fields:\n            if field in args:\n                args[field] = '*****'\n        record.args = args\n\n    elif isinstance(record.args, tuple):  # check if args is a tuple\n        args_list = list(record.args)\n        # Convert the tuple to a list and replace sensitive fields\n        args_list = ['*****' if arg in sensitive_fields else arg for arg in args_list]\n        record.args = tuple(args_list)\n\n    # Remove ANSI escape sequences - colours & bold\n    # Peewee passes a tuple as record.msg\n    if isinstance(record.msg, str):\n        record.msg = re.sub(r'\\x1B(?:[@-Z\\\\-_]|\\[[0-?]*[ -/]*[@-~])', '', record.msg)\n\n    return True\n\n\nlogger = setup_logger()\n","file":"/pilot/logger/logger.py","fileHash":"fd5e0d6270076a253a46194786594e122f1988ef416a372733b2b434d1b85847","hash":"fd5e0d6270076a253a46194786594e122f1988ef416a372733b2b434d1b85847","processedContent":"import os #undefined\nimport re #undefined\nimport logging #undefined\n\n\ndef setup_logger():\n    \"\"\"This code sets up a custom logger for the application. It creates a file handler that writes logs to a file, applies a custom format to the handler, and adds the handler to a logger. The logger is then returned for use in the application.\"\"\"\n    pass\n\n\nsensitive_fields = ['--api-key', 'password']\n\n\ndef filter_sensitive_fields(record):\n    \"\"\"This code is a filter function that removes sensitive information from log records. It checks if the record's arguments are a dictionary or a tuple, and replaces any matching fields with asterisks. Additionally, it removes ANSI escape sequences from the message.\"\"\"\n    pass\n\n\nlogger = setup_logger() #This code sets up a custom logger for the application. It creates a file handler that writes logs to a file, applies a custom format to the handler, and adds the handler to a logger. The logger is then returned for use in the application.\n","documentation":"This code sets up a custom logger for an application, which filters sensitive information from log records and removes ANSI escape sequences."}},{"key":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"symbol":"scip-python python temp indexer `pilot.logger.logger`/logger.","language":"python"}},{"key":"scip-python python temp indexer `pilot.database.database`/database_exists().","attributes":{"symbol":"scip-python python temp indexer `pilot.database.database`/database_exists().","language":"python","range":[466,0,472,20],"content":"def database_exists():\n    try:\n        database.connect()\n        database.close()\n        return True\n    except Exception:\n        return False","file":"/pilot/database/database.py","fileHash":"7a2937cca61d82ac90b45d666e171cf8718df858e5a2768ff637119946d81787","hash":"312f1c4d5c941da04cfa4d07377d444e6ee7482360a2572def771e87ba74c5d2","processedContent":"def database_exists():\n    try:\n        database.connect() #undefined\n        database.close() #undefined\n        return True\n    except Exception:\n        return False","documentation":"This code checks if a database connection can be established. If it can, it returns True, indicating that the database exists. If not, it returns False, indicating that the database does not exist."}},{"key":"scip-python python temp indexer `pilot.database.database`/create_database().","attributes":{"symbol":"scip-python python temp indexer `pilot.database.database`/create_database().","language":"python","range":[475,0,497,12],"content":"def create_database():\n    if DATABASE_TYPE == \"postgres\":\n        # Connect to the default 'postgres' database to create a new database\n        conn = psycopg2.connect(\n            dbname='postgres',\n            user=DB_USER,\n            password=DB_PASSWORD,\n            host=DB_HOST,\n            port=DB_PORT\n        )\n        conn.autocommit = True\n        cursor = conn.cursor()\n\n        # Safely quote the database name\n        safe_db_name = quote_ident(DB_NAME, conn)\n\n        # Use the safely quoted database name in the SQL query\n        cursor.execute(f\"CREATE DATABASE {safe_db_name}\")\n\n        cursor.close()\n        conn.close()\n    else:\n        pass","file":"/pilot/database/database.py","fileHash":"7a2937cca61d82ac90b45d666e171cf8718df858e5a2768ff637119946d81787","hash":"20d5981bc61e9c967250f8f7d9777b12d905556add1fa93a12495fdaf47fda04","processedContent":"def create_database():\n    if DATABASE_TYPE == \"postgres\": #undefined\n        # Connect to the default 'postgres' database to create a new database\n        conn = psycopg2.connect(\n            dbname='postgres',\n            user=DB_USER, #undefined\n            password=DB_PASSWORD, #undefined\n            host=DB_HOST, #undefined\n            port=DB_PORT #undefined\n        )\n        conn.autocommit = True\n        cursor = conn.cursor()\n\n        # Safely quote the database name\n        safe_db_name = quote_ident(DB_NAME, conn) #undefined\n\n        # Use the safely quoted database name in the SQL query\n        cursor.execute(f\"CREATE DATABASE {safe_db_name}\")\n\n        cursor.close()\n        conn.close()\n    else:\n        pass","documentation":"This code creates a new database in PostgreSQL if the database type is \"postgres\"."}},{"key":"scip-python python temp indexer `pilot.database.database`/tables_exist().","attributes":{"symbol":"scip-python python temp indexer `pilot.database.database`/tables_exist().","language":"python","range":[500,0,509,15],"content":"def tables_exist():\n    if DATABASE_TYPE == \"postgres\":\n        for table in TABLES:\n            try:\n                database.get_tables().index(table._meta.table_name)\n            except ValueError:\n                return False\n    else:\n        pass\n    return True","file":"/pilot/database/database.py","fileHash":"7a2937cca61d82ac90b45d666e171cf8718df858e5a2768ff637119946d81787","hash":"c82459dc6d83da5f1f51fbd44b11bef2c2617d5a94e814f55bb956a65a076ec4","processedContent":"def tables_exist():\n    if DATABASE_TYPE == \"postgres\": #undefined\n        for table in TABLES: #undefined\n            try:\n                database.get_tables().index(table._meta.table_name) #undefined\n            except ValueError:\n                return False\n    else:\n        pass\n    return True","documentation":"This code checks if a set of tables exist in a database. It does this by iterating over a list of table names and checking if they exist in the database using the `get_tables()` method. If any of the tables are missing, the function returns `False`. Otherwise, it returns `True`."}},{"key":"scip-python python temp indexer `pilot.database.database`/get_created_apps_with_steps().","attributes":{"symbol":"scip-python python temp indexer `pilot.database.database`/get_created_apps_with_steps().","language":"python","range":[54,0,63,15],"content":"def get_created_apps_with_steps():\n    apps = get_created_apps()\n    for app in apps:\n        app['id'] = str(app['id'])\n        app['steps'] = [step for step in STEPS[:STEPS.index(app['status']) + 1]] if app['status'] is not None else []\n        app['development_steps'] = get_all_app_development_steps(app['id'])\n        # TODO this is a quick way to remove the unnecessary fields from the response\n        app['development_steps'] = [{k: v for k, v in dev_step.items() if k in {'id', 'created_at'}} for dev_step in\n                                    app['development_steps']]\n    return apps","file":"/pilot/database/database.py","fileHash":"7a2937cca61d82ac90b45d666e171cf8718df858e5a2768ff637119946d81787","hash":"95f793908881fbb34ae2202f8b2db417b7a44f829ef874adfd33833e89073edb","processedContent":"def get_created_apps_with_steps():\n    apps = get_created_apps() #This code retrieves a list of apps that have a name and status, using the SQLAlchemy ORM to query the database.\n    for app in apps:\n        app['id'] = str(app['id'])\n        app['steps'] = [step for step in STEPS[:STEPS.index(app['status']) + 1]] if app['status'] is not None else []\n        \"\"\"\n        scip-python python temp indexer `pilot.const.common`/STEPS.: undefined\n        scip-python python temp indexer `pilot.const.common`/STEPS.: undefined\n        \"\"\"\n        app['development_steps'] = get_all_app_development_steps(app['id']) #This code retrieves all development steps for a specific app based on its ID.\n        # TODO this is a quick way to remove the unnecessary fields from the response\n        app['development_steps'] = [{k: v for k, v in dev_step.items() if k in {'id', 'created_at'}} for dev_step in\n                                    app['development_steps']]\n    return apps","documentation":"This code retrieves a list of apps with their corresponding development steps, based on the app's status and ID."}},{"key":"scip-python python temp indexer `pilot.utils.settings`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.settings`/__init__:","language":"python","range":[0,0,330,0],"content":"import json\nfrom logging import getLogger\nfrom os import getenv, makedirs\nfrom pathlib import Path\nimport sys\nfrom typing import Any, Optional\n\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\nlog = getLogger(__name__)\n\nAVAILABLE_SETTINGS = [\n    \"telemetry\",\n    \"openai_api_key\",\n]\n\n\nclass Settings:\n    \"\"\"\n    Application settings\n\n    This object holds all the settings for the application, whether they are\n    loaded from the config file, set via environment variables or the command\n    line arguments.\n\n    Available settings are listed in the `AVAILABLE_SETTINGS` list.\n\n    This is a singleton object, use it by importing the instance\n    directly from the module:\n\n    >>> from utils.settings import settings\n\n    To get a setting:\n\n    >>> settings.openai_api_key\n\n    To get all settings as a dictionary:\n\n    >>> dict(settings)\n\n    To set (update) one setting:\n\n    >>> settings.openai_api_key = \"test_key\"\n\n    To update multiple settings at once:\n\n    >>> settings.update(openai_api_key=\"test_key\", telemetry=None)\n\n    Note: updating settings will not save them to the config file.\n    To do that, use the `loader.save()` method:\n\n    >>> from utils.settings import loader\n    >>> loader.save(\"openai_api_key\", \"telemetry\")\n\n    To see all available settings:\n\n    >>> from utils.settings import AVAILABLE_SETTINGS\n    >>> print(AVAILABLE_SETTINGS)\n    \"\"\"\n\n    # Available settings.\n    __slots__ = AVAILABLE_SETTINGS\n\n    def __init__(self, **kwargs):\n        for key in self.__slots__:\n            setattr(self, key, None)\n\n        self.update(**kwargs)\n\n    def __iter__(self):\n        for key in self.__slots__:\n            yield key, getattr(self, key)\n\n    def update(self, **kwargs):\n        \"\"\"\n        Update settings.\n\n        :param kwargs: settings to update (name=value)\n        \"\"\"\n        for key, value in kwargs.items():\n            try:\n                setattr(self, key, value)\n            except AttributeError:\n                log.warning(f\"Ignoring unknown setting: {key}\")\n\n\nclass Loader:\n    \"\"\"\n    Loader for application settings.\n\n    The app settings are stored in a JSON file in the config directory.\n\n    The config directory is determined by the following rules:\n    * If the XDG_CONFIG_HOME environment variable is set (desktop Linux), use that.\n    * If the APPDATA environment variable is set (Windows), use that.\n    * Otherwise, use the POSIX default ~/.<app-name> (MacOS, server Linux).\n\n    Settings from the config file can be overriden by environment variables\n    (all caps) or command line arguments.\n\n    This is a singleton object, use it by importing the instance directly\n    from the module:\n\n    >>> from utils.settings import loader\n\n    This will load the settings automatically.\n\n    To get the config file location:\n\n    >>> from utils.settings import config_path\n    >>> print(config_path)\n\n    To get the current version of GPT Pilot:\n\n    >>> from utils.settings import version\n    >>> print(version)\n    \"\"\"\n\n    APP_NAME = \"GPT Pilot\"\n\n    def __init__(self, settings: Settings):\n        self.config_dir = self.resolve_config_dir()\n        self.config_path = self.config_dir / \"config.json\"\n        self.settings = settings\n\n    def load(self):\n        \"\"\"\n        Load settings from the config file, environment\n        variables and the command-line arguments.\n        \"\"\"\n        self.settings.update(**self._load_config())\n        self.update_settings_from_env(self.settings)\n        self.update_settings_from_args(self.settings)\n\n    @classmethod\n    def resolve_config_dir(cls) -> Path:\n        \"\"\"\n        Figure out where to store the config file(s).\n\n        :return: path to the desired location config directory\n\n        See the clas docstring for details on how the config directory is\n        determined.\n        \"\"\"\n        posix_app_name = cls.APP_NAME.replace(\" \", \"-\").lower()\n\n        xdg_config_home = getenv(\"XDG_CONFIG_HOME\")\n        if xdg_config_home:\n            return Path(xdg_config_home) / Path(posix_app_name)\n\n        if sys.platform == \"win32\" and getenv(\"APPDATA\"):\n            return Path(getenv(\"APPDATA\")) / Path(cls.APP_NAME)\n\n        return Path(\"~\").expanduser() / Path(f\".{posix_app_name}\")\n\n    def _load_config(self) -> dict[str, Any]:\n        \"\"\"\n        Load settings from the config file.\n\n        :returns: dict of settings loaded from the config file\n\n        If the file doesn't exist or there is an error loading the\n        config file, an empty settings dict will be returned.\n\n        This is a low-level method used automatically by `Loader.load()`.\n        \"\"\"\n\n        if not self.config_path.exists():\n            log.debug(f\"Config file not found: {self.config_path}\")\n            return {}\n\n        log.debug(f\"Loading settings from config file: {self.config_path}\")\n        try:\n            with open(self.config_path, \"r\", encoding=\"utf-8\") as fp:\n                return json.load(fp)\n        except Exception as e:\n            log.error(\n                f\"Error loading config file {self.config_path}: {e}\", exc_info=True\n            )\n            return {}\n\n    def _save_config(self, config: dict[str, Any]):\n        \"\"\"\n        Save provided settings to the config file.\n\n        :param config: dict of settings to save\n\n        This is a low-level method that will overwrite the entire\n        config with what's passed in. You should probably use\n        `update()` instead.\n        \"\"\"\n\n        if not self.config_dir.exists():\n            log.debug(f\"Creating config directory: {self.config_dir}\")\n            makedirs(self.config_dir, exist_ok=True)\n\n        log.debug(f\"Saving settings to config file: {self.config_path}\")\n        with open(self.config_path, \"w\", encoding=\"utf-8\") as fp:\n            json.dump(config, fp, indent=2, sort_keys=True)\n\n    def save(self, *args: list[str]):\n        \"\"\"\n        Save one or more settings to the config file, creating it\n        if neccessary.\n\n        :param args: list of setting names to set\n\n        This method will update the current config file with\n        *ONLY* the settings listed here.\n\n        The reason we don't want to store all settings is that some\n        might have been overridden from environment variables or\n        command line arguments, that might be temporary.\n\n        We don't want to overwrite the config file with those\n        (potentially temporary) values.\n        \"\"\"\n\n        settings_from_config = self._load_config()\n        for key in args:\n            try:\n                value = getattr(self.settings, key)\n                settings_from_config[key] = value\n            except AttributeError:\n                pass\n\n        self._save_config(settings_from_config)\n\n    def update_settings_from_env(self, settings: Settings):\n        \"\"\"\n        Update settings from environment variables.\n\n        :param settings: Settings object to update in-place\n\n        Note that environment variable names are hardcoded here,\n        because they're not always the same as the setting names.\n        \"\"\"\n        # Telemetry (see utils.telemetry)\n        telemetry_id = getenv(\"TELEMETRY_ID\")\n        telemetry_endpoint = getenv(\"TELEMETRY_ENDPOINT\")\n\n        if settings.telemetry is None and (telemetry_id or telemetry_endpoint):\n            settings.telemetry = {}\n\n        if telemetry_id:\n            settings.telemetry[\"id\"] = telemetry_id\n        if telemetry_endpoint:\n            settings.telemetry[\"endpoint\"] = telemetry_endpoint\n\n        # OpenAI API key\n        openai_api_key = getenv(\"OPENAI_API_KEY\")\n        settings.openai_api_key = openai_api_key\n\n    def update_settings_from_args(self, _settings: Settings):\n        \"\"\"\n        Update settings from command line arguments.\n\n        :param settings: Settings object to update in-place\n\n        Note: this is not implemented yet, and currently does nothing.\n        \"\"\"\n        # TODO: implement this\n        pass\n\n\ndef get_git_commit() -> Optional[str]:\n    \"\"\"\n    Return the current git commit (if running from a repo).\n\n    :return: commit hash or None if not running from a git repo\n    \"\"\"\n    git_dir = Path(__file__).parent.parent.parent / \".git\"\n    if not git_dir.is_dir():\n        return None\n\n    git_head = git_dir / \"HEAD\"\n    if not git_head.is_file():\n        return None\n\n    with open(git_head, \"r\", encoding=\"utf-8\") as fp:\n        ref = fp.read().strip()\n        if ref.startswith(\"ref: \"):\n            ref = ref[5:]\n            with open(git_dir / ref, \"r\", encoding=\"utf-8\") as fp:\n                return fp.read().strip()\n        else:\n            return ref\n\n\ndef get_package_version() -> str:\n    \"\"\"\n    Get package version.\n\n    Note: until we have the packaging set up, this always returns \"0.0.0\".\n\n    :return: package version as defined in setup.py or pyproject.toml\n    \"\"\"\n    return \"0.0.0\"\n\n\ndef get_version() -> str:\n    \"\"\"\n    Find and return the current version of GPT Pilot.\n\n    The version string is built from the package version and the current\n    git commit hash (if running from a git repo).\n\n    Example: 0.0.0-gitbf01c19\n\n    :return: version string\n    \"\"\"\n\n    version = get_package_version()\n    commit = get_git_commit()\n    if commit:\n        version = version + \"-git\" + commit[:7]\n\n    return version\n\n\nversion = get_version()\nsettings = Settings()\nloader = Loader(settings)\nloader.load()\nconfig_path = loader.config_path\n\n\n__all__ = [\"version\", \"settings\", \"loader\", \"config_path\"]\n","file":"/pilot/utils/settings.py","fileHash":"0501193abe2886d78c5a219d5b99d381aba84fcb86ace5b8a56046be5874e0d6","hash":"0501193abe2886d78c5a219d5b99d381aba84fcb86ace5b8a56046be5874e0d6","processedContent":"import json #undefined\nfrom logging import getLogger\n\"\"\"\nscip-python python python-stdlib 3.11 logging/__init__:: undefined\nscip-python python python-stdlib 3.11 logging/getLogger().: undefined\n\"\"\"\nfrom os import getenv, makedirs\n\"\"\"\nscip-python python python-stdlib 3.11 os/__init__:: undefined\nscip-python python python-stdlib 3.11 os/getenv().: undefined\nscip-python python python-stdlib 3.11 os/makedirs().: undefined\n\"\"\"\nfrom pathlib import Path\n\"\"\"\nscip-python python python-stdlib 3.11 pathlib/__init__:: undefined\nscip-python python python-stdlib 3.11 pathlib/Path#: undefined\n\"\"\"\nimport sys #undefined\nfrom typing import Any, Optional\n\"\"\"\nscip-python python python-stdlib 3.11 typing/__init__:: undefined\nscip-python python python-stdlib 3.11 typing/Any.: undefined\nscip-python python python-stdlib 3.11 typing/Optional.: undefined\n\"\"\"\n\nfrom dotenv import load_dotenv\n\"\"\"\nscip-python python python-dotenv 1.0.0 dotenv/__init__:: undefined\nscip-python python python-dotenv 1.0.0 `dotenv.main`/load_dotenv().: undefined\n\"\"\"\n\nload_dotenv() #undefined\n\nlog = getLogger(__name__)\n\"\"\"\nscip-python python python-stdlib 3.11 logging/getLogger().: undefined\nscip-python python temp indexer `pilot.utils.settings`/: undefined\n\"\"\"\n\nAVAILABLE_SETTINGS = [\n    \"telemetry\",\n    \"openai_api_key\",\n]\n\n\nclass Settings:\n    \"\"\"This code defines a class called `Settings` that holds all the settings for an application. It allows you to get, set, and update settings using a simple API.\"\"\"\n    pass\n\n\nclass Loader:\n    \"\"\"This code defines a class called `Loader` that loads and saves application settings from a JSON file. It also updates the settings with values from environment variables and command line arguments.\"\"\"\n    pass\n\n\ndef get_git_commit() -> Optional[str]:\n    \"\"\"This code defines a function called `get_git_commit()` that returns the current git commit hash if the program is running from a git repository. It does this by reading the `HEAD` file in the `.git` directory and returning the contents of the file, which should be the commit hash. If the program is not running from a git repository, it returns `None`.\"\"\"\n    pass\n\n\ndef get_package_version() -> str:\n    \"\"\"This code defines a function called `get_package_version` that returns the version of the package as defined in the setup.py or pyproject.toml file.\"\"\"\n    pass\n\n\ndef get_version() -> str:\n    \"\"\"This code defines a function called `get_version()` that returns the current version of GPT Pilot, which is built from the package version and the current git commit hash (if running from a git repository).\"\"\"\n    pass\n\n\nversion = get_version() #This code defines a function called `get_version()` that returns the current version of GPT Pilot, which is built from the package version and the current git commit hash (if running from a git repository).\nsettings = Settings() #This code defines a class called `Settings` that holds all the settings for an application. It allows you to get, set, and update settings using a simple API.\nloader = Loader(settings)\n\"\"\"\nscip-python python temp indexer `pilot.utils.settings`/Loader#: This code defines a class called `Loader` that loads and saves application settings from a JSON file. It also updates the settings with values from environment variables and command line arguments.\nscip-python python temp indexer `pilot.utils.settings`/settings.: undefined\n\"\"\"\nloader.load()\n\"\"\"\nscip-python python temp indexer `pilot.utils.settings`/loader.: undefined\nscip-python python temp indexer `pilot.utils.settings`/Loader#load().: This code defines a method called `load` that loads settings from a JSON file, environment variables, and command-line arguments. It updates the settings of an object with valid values and logs a warning message if invalid settings are passed.\n\"\"\"\nconfig_path = loader.config_path\n\"\"\"\nscip-python python temp indexer `pilot.utils.settings`/loader.: undefined\nscip-python python temp indexer `pilot.utils.settings`/Loader#config_path.: undefined\n\"\"\"\n\n\n__all__ = [\"version\", \"settings\", \"loader\", \"config_path\"]\n","documentation":"This code defines a class called `Settings` that holds all the settings for an application, and a class called `Loader` that loads and saves application settings from a JSON file. It also updates the settings with values from environment variables and command line arguments."}},{"key":"scip-python python temp indexer `pilot.utils.settings`/settings.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.settings`/settings.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.settings`/loader.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.settings`/loader.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.telemetry`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.telemetry`/__init__:","language":"python","range":[0,0,234,0],"content":"from logging import getLogger\nimport sys\nimport time\nfrom typing import Any\nfrom uuid import uuid4\n\nimport requests\n\nfrom .settings import settings, version, config_path\n\nlog = getLogger(__name__)\n\n\nclass Telemetry:\n    \"\"\"\n    Anonymous telemetry.\n\n    See ../../docs/TELEMETRY.md for more information on what is collected\n    and how to disable it on a configuration level.\n\n    This class is a singleton, use the `telemetry` global variable to access it:\n\n    >>> from utils.telemetry import telemetry\n\n    To set up telemetry (only once, at GPT-Pilot setup), use the\n    `telemetry.setup()` method:\n\n    >>> telemetry.setup()\n\n    To record start of application creation process:\n\n    >>> telemetry.start()\n\n    To record data or increase counters:\n\n    >>> telemetry.set(\"model\", \"gpt-4\")\n    >>> telemetry.inc(\"num_llm_requests\", 5)\n\n    To stop recording and send the data:\n\n    >>> telemetry.stop()\n    >>> telemetry.send()\n\n    Note: all methods are no-ops if telemetry is not enabled.\n    \"\"\"\n\n    DEFAULT_ENDPOINT = \"https://api.pythagora.io/telemetry\"\n\n    def __init__(self):\n        self.enabled = False\n        self.telemetry_id = None\n        self.endpoint = None\n        self.clear_data()\n\n        if settings.telemetry is not None:\n            self.enabled = settings.telemetry.get(\"enabled\", False)\n            self.telemetry_id = settings.telemetry.get(\"id\")\n            self.endpoint = settings.telemetry.get(\"endpoint\")\n\n        if self.enabled:\n            log.debug(\n                f\"Anonymous telemetry enabled (id={self.telemetry_id}), \"\n                f\"configure or disable it in {config_path}\"\n            )\n\n    def clear_data(self):\n        \"\"\"\n        Reset all telemetry data to default values.\n        \"\"\"\n        self.data = {\n            # System platform\n            \"platform\": sys.platform,\n            # Python version used for GPT Pilot\n            \"python_version\": sys.version,\n            # GPT Pilot version\n            \"pilot_version\": version,\n            # LLM used\n            \"model\": None,\n            # Initial prompt\n            \"initial_prompt\": None,\n            # Number of LLM requests made\n            \"num_llm_requests\": 0,\n            # Number of tokens used for LLM requests\n            \"num_llm_tokens\": 0,\n            # Number of development steps\n            \"num_steps\": 0,\n            # Number of commands run during development\n            \"num_commands\": 0,\n            # Number of times a human input was required during development\n            \"num_inputs\": 0,\n            # Number of seconds elapsed during development\n            \"elapsed_time\": 0,\n            # End result of development (\"success\", \"failure\", or None if interrupted)\n            \"end_result\": None,\n            # Whether the project is continuation of a previous project\n            \"is_continuation\": False,\n            # Optional user feedback\n            \"user_feedback\": None,\n            # Optional user contact email\n            \"user_contact\": None,\n        }\n        if sys.platform == \"linux\":\n            try:\n                import distro\n                self.data[\"linux_distro\"] = distro.name(pretty=True)\n            except Exception as err:\n                log.debug(f\"Error getting Linux distribution info: {err}\", exc_info=True)\n\n        self.start_time = None\n        self.end_time = None\n\n    def setup(self):\n        \"\"\"\n        Set up a new unique telemetry ID and default phone-home endpoint.\n\n        This should only be called once at initial GPT-Pilot setup.\n        \"\"\"\n        if self.enabled:\n            log.debug(\"Telemetry already set up, not doing anything\")\n            return\n\n        self.telemetry_id = f\"telemetry-{uuid4()}\"\n        self.endpoint = self.DEFAULT_ENDPOINT\n        self.enabled = True\n        log.debug(\n            f\"Telemetry.setup(): setting up anonymous telemetry (id={self.telemetry_id})\"\n        )\n\n        settings.telemetry = {\n            \"id\": self.telemetry_id,\n            \"endpoint\": self.endpoint,\n            \"enabled\": self.enabled,\n        }\n\n    def set(self, name: str, value: Any):\n        \"\"\"\n        Set a telemetry data field to a value.\n\n        :param name: name of the telemetry data field\n        :param value: value to set the field to\n\n        Note: only known data fields may be set, see `Telemetry.clear_data()` for a list.\n        \"\"\"\n        if not self.enabled:\n            return\n\n        if name not in self.data:\n            log.error(\n                f\"Telemetry.record(): ignoring unknown telemetry data field: {name}\"\n            )\n            return\n\n        self.data[name] = value\n\n    def inc(self, name: str, value: int = 1):\n        \"\"\"\n        Increase a telemetry data field by a value.\n\n        :param name: name of the telemetry data field\n        :param value: value to increase the field by (default: 1)\n\n        Note: only known data fields may be increased, see `Telemetry.clear_data()` for a list.\n        \"\"\"\n        if not self.enabled:\n            return\n\n        if name not in self.data:\n            log.error(\n                f\"Telemetry.increase(): ignoring unknown telemetry data field: {name}\"\n            )\n            return\n\n        self.data[name] += value\n\n    def start(self):\n        \"\"\"\n        Record start of application creation process.\n        \"\"\"\n        if not self.enabled:\n            return\n\n        self.start_time = time.time()\n        self.end_time = None\n\n    def stop(self):\n        \"\"\"\n        Record end of application creation process.\n        \"\"\"\n        if not self.enabled:\n            return\n\n        if self.start_time is None:\n            log.error(\"Telemetry.stop(): cannot stop telemetry, it was never started\")\n            return\n\n        self.end_time = time.time()\n        self.data[\"elapsed_time\"] = self.end_time - self.start_time\n\n    def send(self, event:str = \"pilot-telemetry\"):\n        \"\"\"\n        Send telemetry data to the phone-home endpoint.\n\n        Note: this method clears all telemetry data after sending it.\n        \"\"\"\n        if not self.enabled:\n            return\n\n        if self.endpoint is None:\n            log.error(\"Telemetry.send(): cannot send telemetry, no endpoint configured\")\n            return\n\n        if self.start_time is not None and self.end_time is None:\n            self.stop()\n\n        payload = {\n            \"pathId\": self.telemetry_id,\n            \"event\": event,\n            \"data\": self.data,\n        }\n\n        log.debug(\n            f\"Telemetry.send(): sending anonymous telemetry data to {self.endpoint}\"\n        )\n        try:\n            requests.post(self.endpoint, json=payload)\n        except Exception as e:\n            log.error(\n                f\"Telemetry.send(): failed to send telemetry data: {e}\", exc_info=True\n            )\n        finally:\n            self.clear_data()\n\n\ntelemetry = Telemetry()\n","file":"/pilot/utils/telemetry.py","fileHash":"500b9e782c148aa6137a800cd6924871cd09de08b047ebfbb66ad8b67400a963","hash":"500b9e782c148aa6137a800cd6924871cd09de08b047ebfbb66ad8b67400a963","processedContent":"from logging import getLogger\n\"\"\"\nscip-python python python-stdlib 3.11 logging/__init__:: undefined\nscip-python python python-stdlib 3.11 logging/getLogger().: undefined\n\"\"\"\nimport sys #undefined\nimport time #undefined\nfrom typing import Any\n\"\"\"\nscip-python python python-stdlib 3.11 typing/__init__:: undefined\nscip-python python python-stdlib 3.11 typing/Any.: undefined\n\"\"\"\nfrom uuid import uuid4\n\"\"\"\nscip-python python python-stdlib 3.11 uuid/__init__:: undefined\nscip-python python python-stdlib 3.11 uuid/uuid4().: undefined\n\"\"\"\n\nimport requests #undefined\n\nfrom .settings import settings, version, config_path\n\"\"\"\nscip-python python temp indexer `pilot.utils.settings`/__init__:: This code defines a class called `Settings` that holds all the settings for an application, and a class called `Loader` that loads and saves application settings from a JSON file. It also updates the settings with values from environment variables and command line arguments.\nscip-python python temp indexer `pilot.utils.settings`/settings.: undefined\nscip-python python temp indexer `pilot.utils.settings`/version.: undefined\nscip-python python temp indexer `pilot.utils.settings`/config_path.: undefined\n\"\"\"\n\nlog = getLogger(__name__)\n\"\"\"\nscip-python python python-stdlib 3.11 logging/getLogger().: undefined\nscip-python python temp indexer `pilot.utils.telemetry`/: undefined\n\"\"\"\n\n\nclass Telemetry:\n    \"\"\"This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled.\"\"\"\n    pass\n\n\ntelemetry = Telemetry() #This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled.\n","documentation":"This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server."}},{"key":"scip-python python temp indexer `pilot.utils.telemetry`/telemetry.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.telemetry`/telemetry.","language":"python"}},{"key":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"symbol":"scip-python python python-stdlib 3.11 logging/Logger#info().","language":"python"}},{"key":"scip-python python temp indexer `pilot.main`/","attributes":{"symbol":"scip-python python temp indexer `pilot.main`/","language":"python"}},{"key":"scip-python python temp indexer `pilot.main`/args.","attributes":{"symbol":"scip-python python temp indexer `pilot.main`/args.","language":"python"}},{"key":"scip-python python python-stdlib 3.11 os/environ.environ.","attributes":{"symbol":"scip-python python python-stdlib 3.11 os/environ.environ.","language":"python"}},{"key":"scip-python python temp indexer `pilot.main`/ipc_client_instance.","attributes":{"symbol":"scip-python python temp indexer `pilot.main`/ipc_client_instance.","language":"python"}},{"key":"scip-python python temp indexer `pilot.main`/run_exit_fn.","attributes":{"symbol":"scip-python python temp indexer `pilot.main`/run_exit_fn.","language":"python"}},{"key":"scip-python python temp indexer `pilot.test.ux_tests`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.test.ux_tests`/__init__:","language":"python","range":[0,0,20,0],"content":"# from .run_command_until_success import run_command_until_success\r\nfrom .cli_execute_command import cli_execute_command\r\nfrom .Dev_continue_development import test_continue_development\r\nfrom .utils import use_args\r\n\r\n\r\ndef run_test(test_name: str, args):\r\n    print(f'Running UX test \"{test_name}\"...')\r\n\r\n    tests = {\r\n        # 'run_command_until_success': run_command_until_success,\r\n        'cli_execute_command': cli_execute_command,\r\n        'continue_development': test_continue_development,\r\n    }\r\n\r\n    if test_name in tests:\r\n        use_args(args)\r\n        return tests[test_name]()\r\n\r\n    print(f'UX test \"{test_name}\" not found')\r\n","file":"/pilot/test/ux_tests/__init__.py","fileHash":"0b4ae9e7086168de4b5f59d744542c6bb6203f1551b387b002698b7f1a42e3a5","hash":"0b4ae9e7086168de4b5f59d744542c6bb6203f1551b387b002698b7f1a42e3a5","processedContent":"# from .run_command_until_success import run_command_until_success\r\nfrom .cli_execute_command import cli_execute_command\r\n\"\"\"\nscip-python python temp indexer cli_execute_command/__init__:: undefined\nscip-python python temp indexer cli_execute_command/__init__:: undefined\n\"\"\"\nfrom .Dev_continue_development import test_continue_development\r\n\"\"\"\nscip-python python temp indexer `pilot.test.ux_tests.dev_continue_development`/__init__:: The code defines a class called \"Developer\" that allows users to continue developing an app by asking for feedback on the current iteration and then executing the next task in the development plan.\nscip-python python temp indexer `pilot.test.ux_tests.dev_continue_development`/test_continue_development().: The code defines a class called \"Developer\" that allows users to continue developing an app by asking for feedback on the current iteration and then executing the next task in the development plan.\n\"\"\"\nfrom .utils import use_args\r #undefined\n\r\n\r\ndef run_test(test_name: str, args):\r\n    \"\"\"This code defines a function called \"run_test\" that takes two arguments: a string representing the name of a UX test, and a dictionary of arguments to be passed to the test. The function then checks if the test is defined in a dictionary of available tests, and if so, runs it by calling the corresponding function with the given arguments. If the test is not found, it prints an error message.\"\"\"\n    pass\n","documentation":"This code defines a function called \"run_test\" that takes two arguments and checks if the test is defined in a dictionary of available tests, and if so, runs it by calling the corresponding function with the given arguments."}},{"key":"scip-python python temp indexer `pilot.test.ux_tests`/run_test().","attributes":{"symbol":"scip-python python temp indexer `pilot.test.ux_tests`/run_test().","language":"python","range":[6,0,19,45],"content":"def run_test(test_name: str, args):\r\n    print(f'Running UX test \"{test_name}\"...')\r\n\r\n    tests = {\r\n        # 'run_command_until_success': run_command_until_success,\r\n        'cli_execute_command': cli_execute_command,\r\n        'continue_development': test_continue_development,\r\n    }\r\n\r\n    if test_name in tests:\r\n        use_args(args)\r\n        return tests[test_name]()\r\n\r\n    print(f'UX test \"{test_name}\" not found')","file":"/pilot/test/ux_tests/__init__.py","fileHash":"0b4ae9e7086168de4b5f59d744542c6bb6203f1551b387b002698b7f1a42e3a5","hash":"1652efe4d7893ac70b0707da1b66fdb882ec856892cae52287c7977d6e6a97dd","processedContent":"def run_test(test_name: str, args):\r\n    print(f'Running UX test \"{test_name}\"...')\r\n\r\n    tests = {\r\n        # 'run_command_until_success': run_command_until_success,\r\n        'cli_execute_command': cli_execute_command,\r #undefined\n        'continue_development': test_continue_development,\r #The code defines a class called \"Developer\" that allows users to continue developing an app by asking for feedback on the current iteration and then executing the next task in the development plan.\n    }\r\n\r\n    if test_name in tests:\r\n        use_args(args)\r\n        return tests[test_name]()\r\n\r\n    print(f'UX test \"{test_name}\" not found')","documentation":"This code defines a function called \"run_test\" that takes two arguments: a string representing the name of a UX test, and a dictionary of arguments to be passed to the test. The function then checks if the test is defined in a dictionary of available tests, and if so, runs it by calling the corresponding function with the given arguments. If the test is not found, it prints an error message."}},{"key":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#setup().","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#setup().","language":"python","range":[111,4,132,9],"content":"def setup(self):\n        \"\"\"\n        Set up a new unique telemetry ID and default phone-home endpoint.\n\n        This should only be called once at initial GPT-Pilot setup.\n        \"\"\"\n        if self.enabled:\n            log.debug(\"Telemetry already set up, not doing anything\")\n            return\n\n        self.telemetry_id = f\"telemetry-{uuid4()}\"\n        self.endpoint = self.DEFAULT_ENDPOINT\n        self.enabled = True\n        log.debug(\n            f\"Telemetry.setup(): setting up anonymous telemetry (id={self.telemetry_id})\"\n        )\n\n        settings.telemetry = {\n            \"id\": self.telemetry_id,\n            \"endpoint\": self.endpoint,\n            \"enabled\": self.enabled,\n        }","file":"/pilot/utils/telemetry.py","fileHash":"500b9e782c148aa6137a800cd6924871cd09de08b047ebfbb66ad8b67400a963","hash":"140d341ee4561c66418f1ad4bc468a57d4677852bdb04991f49bccb745378434","processedContent":"def setup(self):\n        \"\"\"\n        Set up a new unique telemetry ID and default phone-home endpoint.\n\n        This should only be called once at initial GPT-Pilot setup.\n        \"\"\"\n        if self.enabled: #undefined\n            log.debug(\"Telemetry already set up, not doing anything\")\n            \"\"\"\n            scip-python python temp indexer `pilot.utils.telemetry`/log.: undefined\n            scip-python python python-stdlib 3.11 logging/Logger#debug().: undefined\n            \"\"\"\n            return\n\n        self.telemetry_id = f\"telemetry-{uuid4()}\"\n        \"\"\"\n        scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#telemetry_id.: undefined\n        scip-python python python-stdlib 3.11 uuid/uuid4().: undefined\n        \"\"\"\n        self.endpoint = self.DEFAULT_ENDPOINT\n        \"\"\"\n        scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#endpoint.: undefined\n        scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#DEFAULT_ENDPOINT.: undefined\n        \"\"\"\n        self.enabled = True #undefined\n        log.debug(\n        \"\"\"\n        scip-python python temp indexer `pilot.utils.telemetry`/log.: undefined\n        scip-python python python-stdlib 3.11 logging/Logger#debug().: undefined\n        \"\"\"\n            f\"Telemetry.setup(): setting up anonymous telemetry (id={self.telemetry_id})\" #undefined\n        )\n\n        settings.telemetry = { #undefined\n            \"id\": self.telemetry_id, #undefined\n            \"endpoint\": self.endpoint, #undefined\n            \"enabled\": self.enabled, #undefined\n        }","documentation":"This code sets up a new unique telemetry ID and default phone-home endpoint. It should only be called once at initial GPT-Pilot setup."}},{"key":"scip-python python temp indexer `pilot.utils.settings`/Loader#save().","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.settings`/Loader#save().","language":"python","range":[202,4,228,47],"content":"def save(self, *args: list[str]):\n        \"\"\"\n        Save one or more settings to the config file, creating it\n        if neccessary.\n\n        :param args: list of setting names to set\n\n        This method will update the current config file with\n        *ONLY* the settings listed here.\n\n        The reason we don't want to store all settings is that some\n        might have been overridden from environment variables or\n        command line arguments, that might be temporary.\n\n        We don't want to overwrite the config file with those\n        (potentially temporary) values.\n        \"\"\"\n\n        settings_from_config = self._load_config()\n        for key in args:\n            try:\n                value = getattr(self.settings, key)\n                settings_from_config[key] = value\n            except AttributeError:\n                pass\n\n        self._save_config(settings_from_config)","file":"/pilot/utils/settings.py","fileHash":"0501193abe2886d78c5a219d5b99d381aba84fcb86ace5b8a56046be5874e0d6","hash":"d9e3249081c3fb944e6c542565272a9a485adc2004fd110e57b27f160843f94d","processedContent":"def save(self, *args: list[str]):\n        \"\"\"\n        Save one or more settings to the config file, creating it\n        if neccessary.\n\n        :param args: list of setting names to set\n\n        This method will update the current config file with\n        *ONLY* the settings listed here.\n\n        The reason we don't want to store all settings is that some\n        might have been overridden from environment variables or\n        command line arguments, that might be temporary.\n\n        We don't want to overwrite the config file with those\n        (potentially temporary) values.\n        \"\"\"\n\n        settings_from_config = self._load_config() #This code defines a function called `_load_config()` that loads settings from a JSON file. If the file doesn't exist or there's an error loading the config file, an empty settings dict is returned.\n        for key in args:\n            try:\n                value = getattr(self.settings, key) #undefined\n                settings_from_config[key] = value\n            except AttributeError:\n                pass\n\n        self._save_config(settings_from_config)","documentation":"This code defines a `save()` method that updates the config file with only the settings listed in the `args` parameter, while preserving any existing settings that might have been overridden from environment variables or command line arguments."}},{"key":"scip-python python temp indexer `pilot.main`/project.","attributes":{"symbol":"scip-python python temp indexer `pilot.main`/project.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","language":"python","range":[83,4,140,37],"content":"def start(self):\n        \"\"\"\n        Start the project.\n        \"\"\"\n        telemetry.start()\n        self.project_manager = ProductOwner(self)\n        self.project_manager.get_project_description()\n\n        self.project_manager.get_user_stories()\n        # self.user_tasks = self.project_manager.get_user_tasks()\n\n        self.architect = Architect(self)\n        self.architect.get_architecture()\n\n        self.developer = Developer(self)\n        self.developer.set_up_environment()\n        self.technical_writer = TechnicalWriter(self)\n\n        self.tech_lead = TechLead(self)\n        self.tech_lead.create_development_plan()\n\n        # TODO move to constructor eventually\n        if self.args['step'] is not None and STEPS.index(self.args['step']) < STEPS.index('coding'):\n            clear_directory(self.root_path)\n            delete_all_app_development_data(self.args['app_id'])\n            self.skip_steps = False\n\n        if 'skip_until_dev_step' in self.args:\n            self.skip_until_dev_step = self.args['skip_until_dev_step']\n            if self.args['skip_until_dev_step'] == '0':\n                clear_directory(self.root_path)\n                delete_all_app_development_data(self.args['app_id'])\n                self.skip_steps = False\n            elif self.skip_until_dev_step is not None:\n                should_overwrite_files = None\n                while should_overwrite_files is None or should_overwrite_files.lower() not in AFFIRMATIVE_ANSWERS + NEGATIVE_ANSWERS:\n                    print('yes/no', type='button')\n                    should_overwrite_files = styled_text(\n                        self,\n                        \"Can I overwrite any changes that you might have made to the project since last running GPT Pilot (y/n)?\",\n                        ignore_user_input_count=True\n                    )\n\n                    logger.info('should_overwrite_files: %s', should_overwrite_files)\n                    if should_overwrite_files in NEGATIVE_ANSWERS:\n                        break\n                    elif should_overwrite_files in AFFIRMATIVE_ANSWERS:\n                        FileSnapshot.delete().where(\n                            FileSnapshot.app == self.app and FileSnapshot.development_step == self.skip_until_dev_step).execute()\n                        self.save_files_snapshot(self.skip_until_dev_step)\n                        break\n        # TODO END\n\n        self.dot_pilot_gpt.write_project(self)\n        print(json.dumps({\n            \"project_stage\": \"coding\"\n        }), type='info')\n        self.developer.start_coding()","file":"/pilot/helpers/Project.py","fileHash":"4d8215b25fa6dfe61adc429af601243ce7ae701549bb568ae1e5b9dd3ba7bac8","hash":"aab201a1279a5a64a91f772349df77b9c6a5a5f107f73a594b65c74e464abb7f","processedContent":"def start(self):\n        \"\"\"\n        Start the project.\n        \"\"\"\n        telemetry.start()\n        \"\"\"\n        scip-python python temp indexer `pilot.utils.telemetry`/telemetry.: undefined\n        scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#start().: This code records the start of an application creation process by setting a start time variable to the current time.\n        \"\"\"\n        self.project_manager = ProductOwner(self) #The code defines a class called \"ProductOwner\" that inherits from another class called \"User\". It initializes the object with a project parameter and sets the user's role to \"product_owner\". The class includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\n        self.project_manager.get_project_description()\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.project`/Project#project_manager.: undefined\n        scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().: This code defines a function called `get_project_description` that retrieves and generates project descriptions for apps based on user input. It includes error handling, progress tracking, and app data generation.\n        \"\"\"\n\n        self.project_manager.get_user_stories()\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.project`/Project#project_manager.: undefined\n        scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_stories().: The code defines a function called `get_user_stories` that retrieves user stories from the agent based on the current step and app ID. It also saves progress data in a database.\n        \"\"\"\n        # self.user_tasks = self.project_manager.get_user_tasks()\n\n        self.architect = Architect(self) #This code defines a class called \"Architect\" that represents a person who is working on a specific project. The class has two attributes: \"role\" and \"project\". The \"role\" attribute specifies the type of work the agent is doing, and the \"project\" attribute specifies the project they are working on. The class also has a constructor that initializes an object with a role (architect) and a project, and sets the object's convo_architecture attribute to None.\n        self.architect.get_architecture()\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.project`/Project#architect.: undefined\n        scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#get_architecture().: This code defines a function called `get_architecture` that retrieves and updates project architecture data for an app based on user input. It uses a conversation with the user to gather information about the app's architecture, and then saves the data to a database.\n        \"\"\"\n\n        self.developer = Developer(self) #The code defines a class called \"Developer\" that represents a person working on a specific project. It has functions for implementing tasks, running commands, and handling human intervention during the development process.\n        self.developer.set_up_environment()\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.project`/Project#developer.: undefined\n        scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#set_up_environment().: This code sets up the environment for a project by installing the necessary technologies and saving the progress in a database.\n        \"\"\"\n        self.technical_writer = TechnicalWriter(self) #The code defines a class called \"TechnicalWriter\" that generates documentation for a project. It creates a LICENSE file, README.md file, and API documentation based on the project's details.\n\n        self.tech_lead = TechLead(self) #This code defines a class called \"TechLead\" that represents a person who is working on a specific project. The class has two attributes: \"role\" and \"project\". The \"role\" attribute specifies the type of work the agent is doing, and the \"project\" attribute specifies the project they are working on. The class also defines several functions, including `create_development_plan`, `create_feature_plan`, and `create_feature_summary`, which retrieve progress data for an app from a database, update the status of the app in the database, and save the development plan for the app.\n        self.tech_lead.create_development_plan()\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.project`/Project#tech_lead.: undefined\n        scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_development_plan().: The code defines a function called `create_development_plan` that retrieves progress data for an app from a database, updates the status of the app in the database, and saves the development plan for the app.\n        \"\"\"\n\n        # TODO move to constructor eventually\n        if self.args['step'] is not None and STEPS.index(self.args['step']) < STEPS.index('coding'):\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.project`/Project#args.: undefined\n        scip-python python temp indexer `pilot.helpers.project`/Project#args.: undefined\n        scip-python python temp indexer `pilot.const.common`/STEPS.: undefined\n        scip-python python temp indexer `pilot.const.common`/STEPS.: undefined\n        \"\"\"\n            clear_directory(self.root_path)\n            \"\"\"\n            scip-python python temp indexer `pilot.helpers.files`/clear_directory().: This code defines a function called `clear_directory` that takes a directory path and an optional list of files or folders to ignore. It recursively traverses the directory and its subdirectories, deleting all files and empty subdirectories except for those in the ignore list.\n            scip-python python temp indexer `pilot.helpers.project`/Project#root_path.: undefined\n            \"\"\"\n            delete_all_app_development_data(self.args['app_id'])\n            \"\"\"\n            scip-python python temp indexer `pilot.helpers.project`/Project#args.: undefined\n            scip-python python temp indexer `pilot.database.database`/delete_all_app_development_data().: This code deletes all data related to a specific app from the database, including development steps, command runs, user inputs, user apps, files, and file snapshots.\n            \"\"\"\n            self.skip_steps = False #undefined\n\n        if 'skip_until_dev_step' in self.args: #undefined\n            self.skip_until_dev_step = self.args['skip_until_dev_step']\n            \"\"\"\n            scip-python python temp indexer `pilot.helpers.project`/Project#args.: undefined\n            scip-python python temp indexer `pilot.helpers.project`/Project#skip_until_dev_step.: undefined\n            \"\"\"\n            if self.args['skip_until_dev_step'] == '0': #undefined\n                clear_directory(self.root_path)\n                \"\"\"\n                scip-python python temp indexer `pilot.helpers.files`/clear_directory().: This code defines a function called `clear_directory` that takes a directory path and an optional list of files or folders to ignore. It recursively traverses the directory and its subdirectories, deleting all files and empty subdirectories except for those in the ignore list.\n                scip-python python temp indexer `pilot.helpers.project`/Project#root_path.: undefined\n                \"\"\"\n                delete_all_app_development_data(self.args['app_id'])\n                \"\"\"\n                scip-python python temp indexer `pilot.helpers.project`/Project#args.: undefined\n                scip-python python temp indexer `pilot.database.database`/delete_all_app_development_data().: This code deletes all data related to a specific app from the database, including development steps, command runs, user inputs, user apps, files, and file snapshots.\n                \"\"\"\n                self.skip_steps = False #undefined\n            elif self.skip_until_dev_step is not None: #undefined\n                should_overwrite_files = None\n                while should_overwrite_files is None or should_overwrite_files.lower() not in AFFIRMATIVE_ANSWERS + NEGATIVE_ANSWERS:\n                \"\"\"\n                scip-python python temp indexer `pilot.const.messages`/AFFIRMATIVE_ANSWERS.: undefined\n                scip-python python temp indexer `pilot.const.messages`/NEGATIVE_ANSWERS.: undefined\n                \"\"\"\n                    print('yes/no', type='button')\n                    should_overwrite_files = styled_text( #This code defines a function called `styled_text` that retrieves user input from a database, styles the question, and saves the response to the database.\n                        self,\n                        \"Can I overwrite any changes that you might have made to the project since last running GPT Pilot (y/n)?\",\n                        ignore_user_input_count=True\n                    )\n\n                    logger.info('should_overwrite_files: %s', should_overwrite_files)\n                    \"\"\"\n                    scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n                    scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n                    \"\"\"\n                    if should_overwrite_files in NEGATIVE_ANSWERS: #undefined\n                        break\n                    elif should_overwrite_files in AFFIRMATIVE_ANSWERS: #undefined\n                        FileSnapshot.delete().where( #This code defines a model for a file snapshot entity in a database, with fields for an ID, creation and update timestamps, and foreign keys to other entities such as apps, development steps, and files. It also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\n                            FileSnapshot.app == self.app and FileSnapshot.development_step == self.skip_until_dev_step).execute()\n                            \"\"\"\n                            scip-python python temp indexer `pilot.helpers.project`/Project#skip_until_dev_step.: undefined\n                            scip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#: This code defines a model for a file snapshot entity in a database, with fields for an ID, creation and update timestamps, and foreign keys to other entities such as apps, development steps, and files. It also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\n                            scip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#: This code defines a model for a file snapshot entity in a database, with fields for an ID, creation and update timestamps, and foreign keys to other entities such as apps, development steps, and files. It also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\n                            scip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#app.: undefined\n                            scip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#development_step.: undefined\n                            \"\"\"\n                        self.save_files_snapshot(self.skip_until_dev_step)\n                        \"\"\"\n                        scip-python python temp indexer `pilot.helpers.project`/Project#skip_until_dev_step.: undefined\n                        scip-python python temp indexer `pilot.helpers.project`/Project#save_files_snapshot().: The code defines a function called `save_files_snapshot` that saves the contents of files in a directory to a database. It also creates a development step entity in the database and saves file snapshots for each file in the directory.\n                        \"\"\"\n                        break\n        # TODO END\n\n        self.dot_pilot_gpt.write_project(self)\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.project`/Project#dot_pilot_gpt.: undefined\n        scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#write_project().: This code defines a function called `write_project` that takes a project object as an argument and writes its data to a YAML file. The function checks if the project's name is defined, and if so, it creates a dictionary with the project's name, description, user stories, architecture, and development plan. It then opens a file in the `dot_gpt_pilot_path` directory and uses the `yaml.safe_dump` function to write the data to the file.\n        \"\"\"\n        print(json.dumps({\n        \"\"\"\n        scip-python python python-stdlib 3.11 json/__init__:: undefined\n        scip-python python python-stdlib 3.11 json/dumps().: undefined\n        \"\"\"\n            \"project_stage\": \"coding\"\n        }), type='info')\n        self.developer.start_coding()","documentation":"The code defines a class called \"Project\" that represents a software development project. It includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks."}},{"key":"scip-python python temp indexer `pilot.helpers.project`/Project#finish().","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.project`/Project#finish().","language":"python","range":[142,4,156,70],"content":"def finish(self):\n        \"\"\"\n        Finish the project.\n        \"\"\"\n        while True:\n            feature_description = ask_user(self, \"Project is finished! Do you want to add any features or changes? \"\n                                                 \"If yes, describe it here and if no, just press ENTER\",\n                                           require_some_input=False)\n\n            if feature_description == '':\n                return\n\n            self.tech_lead.create_feature_plan(feature_description)\n            self.developer.start_coding()\n            self.tech_lead.create_feature_summary(feature_description)","file":"/pilot/helpers/Project.py","fileHash":"4d8215b25fa6dfe61adc429af601243ce7ae701549bb568ae1e5b9dd3ba7bac8","hash":"31dd41ff13232032162920ec4ab67717f84dc47d57030e119a4c6b2b5b96723d","processedContent":"def finish(self):\n        \"\"\"\n        Finish the project.\n        \"\"\"\n        while True:\n            feature_description = ask_user(self, \"Project is finished! Do you want to add any features or changes? \" #This code defines a function called `ask_user` that retrieves user input from a database, styles the question, and saves the response to the database. It also logs the question and answer to a logger.\n                                                 \"If yes, describe it here and if no, just press ENTER\",\n                                           require_some_input=False)\n\n            if feature_description == '':\n                return\n\n            self.tech_lead.create_feature_plan(feature_description)\n            \"\"\"\n            scip-python python temp indexer `pilot.helpers.project`/Project#tech_lead.: undefined\n            scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_feature_plan().: The code defines a function called `create_feature_plan` that retrieves a list of features from the database based on an app ID, and then sends a message in a conversation to retrieve a prompt template for feature development.\n            \"\"\"\n            self.developer.start_coding()\n            \"\"\"\n            scip-python python temp indexer `pilot.helpers.project`/Project#developer.: undefined\n            scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#start_coding().: This code is a part of a larger program that automates the development process for an app. It checks the status of the app, updates the status in the database, and then starts the development process by printing a message to the console and logging a message to a file.\n            \"\"\"\n            self.tech_lead.create_feature_summary(feature_description)","documentation":"This code defines a function called `finish` that retrieves user input from a database, styles the question, and saves the response to the database. It also logs the question and answer to a logger."}},{"key":"scip-python python python-stdlib 3.11 traceback/print_exc().","attributes":{"symbol":"scip-python python python-stdlib 3.11 traceback/print_exc().","language":"python"}},{"key":"scip-python python temp indexer `pilot.main`/ask_feedback.","attributes":{"symbol":"scip-python python temp indexer `pilot.main`/ask_feedback.","language":"python"}},{"key":"scip-python python temp indexer `pilot.test_main_e2e`/test_init().","attributes":{"range":[12,0,21,34],"symbol":"scip-python python temp indexer `pilot.test_main_e2e`/test_init().","content":"def test_init():\r\n    # When\r\n    args = init()\r\n\r\n    # Then\r\n    for field in ['app_id', 'user_id', 'email']:\r\n        assert args[field] is not None\r\n\r\n    for field in ['workspace', 'step']:\r\n        assert args[field] is None","file":"/pilot/test_main_e2e.py","language":"python","fileHash":"a475c346e7af301d9cff87ebe67d3b5aff389220e4a8c119df9cf07c30277852","hash":"674a2ed7e45e18a3ffb66018e158a67249097aacae1e426c971b0ed05e4cf159","processedContent":"def test_init():\r\n    # When\r\n    args = init()\r #The code checks if a database and tables exist, creates them if necessary, and retrieves command-line arguments to set up the environment for the Pilot app.\n\r\n    # Then\r\n    for field in ['app_id', 'user_id', 'email']:\r\n        assert args[field] is not None\r\n\r\n    for field in ['workspace', 'step']:\r\n        assert args[field] is None","documentation":"This code checks if a database and tables exist, creates them if necessary, and retrieves command-line arguments to set up the environment for the Pilot app."}},{"key":"scip-python python temp indexer `pilot.test_main_e2e`/test_end_to_end().","attributes":{"range":[24,0,59,23],"symbol":"scip-python python temp indexer `pilot.test_main_e2e`/test_end_to_end().","content":"@pytest.mark.slow\r\n@pytest.mark.uses_tokens\r\n@pytest.mark.skip(reason=\"Uses lots of tokens\")\r\n@pytest.mark.parametrize(\"endpoint, model\", [\r\n    (\"OPENAI\", \"gpt-4\"),\r\n    (\"OPENROUTER\", \"openai/gpt-3.5-turbo\"),\r\n    (\"OPENROUTER\", \"meta-llama/codellama-34b-instruct\"),\r\n    (\"OPENROUTER\", \"google/palm-2-chat-bison\"),\r\n    (\"OPENROUTER\", \"google/palm-2-codechat-bison\"),\r\n    # TODO: See https://github.com/1rgs/jsonformer-claude/blob/main/jsonformer_claude/main.py\r\n    #           https://github.com/guidance-ai/guidance - token healing\r\n    (\"OPENROUTER\", \"anthropic/claude-2\"),\r\n])\r\ndef test_end_to_end(endpoint, model, monkeypatch):\r\n    # Given\r\n    monkeypatch.setenv('ENDPOINT', endpoint)\r\n    monkeypatch.setenv('MODEL_NAME', model)\r\n\r\n    create_tables()\r\n    args = init()\r\n    builtins.print, ipc_client_instance = get_custom_print(args)\r\n    project = Project(args)\r\n    mock_questionary = MockQuestionary([\r\n        'Test App',\r\n        'A web-based chat app',\r\n        # 5 clarifying questions\r\n        'Users can send direct messages to each other but with no group chat functionality',\r\n        'No authentication is required at this stage',\r\n        'Use your best judgement',\r\n        'Use your best judgement',\r\n        'Use your best judgement',\r\n    ])\r\n\r\n    # When\r\n    with patch('utils.questionary.questionary', mock_questionary):\r\n        project.start()","file":"/pilot/test_main_e2e.py","language":"python","fileHash":"a475c346e7af301d9cff87ebe67d3b5aff389220e4a8c119df9cf07c30277852","hash":"a54679f0a82b8f0e3dac4061c66744da3f5727afc4879da3dd563e2a04fc46ab","processedContent":"@pytest.mark.slow\r\n@pytest.mark.uses_tokens\r\n@pytest.mark.skip(reason=\"Uses lots of tokens\")\r\n@pytest.mark.parametrize(\"endpoint, model\", [\r\n    (\"OPENAI\", \"gpt-4\"),\r\n    (\"OPENROUTER\", \"openai/gpt-3.5-turbo\"),\r\n    (\"OPENROUTER\", \"meta-llama/codellama-34b-instruct\"),\r\n    (\"OPENROUTER\", \"google/palm-2-chat-bison\"),\r\n    (\"OPENROUTER\", \"google/palm-2-codechat-bison\"),\r\n    # TODO: See https://github.com/1rgs/jsonformer-claude/blob/main/jsonformer_claude/main.py\r\n    #           https://github.com/guidance-ai/guidance - token healing\r\n    (\"OPENROUTER\", \"anthropic/claude-2\"),\r\n])\r\ndef test_end_to_end(endpoint, model, monkeypatch):\r\n    # Given\r\n    monkeypatch.setenv('ENDPOINT', endpoint)\r\n    monkeypatch.setenv('MODEL_NAME', model)\r\n\r\n    create_tables()\r #This code creates database tables using the `create_tables()` method of a database object, which is passed as an argument to the function.\n    args = init()\r #The code checks if a database and tables exist, creates them if necessary, and retrieves command-line arguments to set up the environment for the Pilot app.\n    builtins.print, ipc_client_instance = get_custom_print(args)\r #This code defines a function called `get_custom_print` that returns a tuple of two functions: `print_to_external_process` and `local_print`. The first function sends a message to an external process over a network connection, while the second function prints the message to the console.\n    project = Project(args)\r #The code defines a class called \"Project\" that represents a software development project. It includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\n    mock_questionary = MockQuestionary([\r #This code defines a class called \"MockQuestionary\" that allows users to ask questions and receive answers in a mock interview setting. The class has several methods, including \"__init__\", \"text\", \"ask\", and \"unsafe_ask\". The purpose of the code is to provide a way to simulate a user asking questions and receiving answers in a mock interview setting.\n        'Test App',\r\n        'A web-based chat app',\r\n        # 5 clarifying questions\r\n        'Users can send direct messages to each other but with no group chat functionality',\r\n        'No authentication is required at this stage',\r\n        'Use your best judgement',\r\n        'Use your best judgement',\r\n        'Use your best judgement',\r\n    ])\r\n\r\n    # When\r\n    with patch('utils.questionary.questionary', mock_questionary):\r\n        project.start()","documentation":"The code defines a test function that creates database tables, retrieves command-line arguments, and initializes a class called \"Project\" to simulate a software development project. It also defines a class called \"MockQuestionary\" to simulate a user asking questions in a mock interview setting."}},{"key":"scip-python python temp indexer `pilot.test_main_e2e`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.test_main_e2e`/__init__:","range":[0,0,61,0],"content":"import builtins\r\nimport pytest\r\nfrom unittest.mock import patch\r\nfrom dotenv import load_dotenv\r\nload_dotenv()\r\n\r\nfrom database.database import create_tables\r\nfrom helpers.Project import Project\r\nfrom test.mock_questionary import MockQuestionary\r\nfrom .main import init, get_custom_print\r\n\r\n\r\ndef test_init():\r\n    # When\r\n    args = init()\r\n\r\n    # Then\r\n    for field in ['app_id', 'user_id', 'email']:\r\n        assert args[field] is not None\r\n\r\n    for field in ['workspace', 'step']:\r\n        assert args[field] is None\r\n\r\n\r\n@pytest.mark.slow\r\n@pytest.mark.uses_tokens\r\n@pytest.mark.skip(reason=\"Uses lots of tokens\")\r\n@pytest.mark.parametrize(\"endpoint, model\", [\r\n    (\"OPENAI\", \"gpt-4\"),\r\n    (\"OPENROUTER\", \"openai/gpt-3.5-turbo\"),\r\n    (\"OPENROUTER\", \"meta-llama/codellama-34b-instruct\"),\r\n    (\"OPENROUTER\", \"google/palm-2-chat-bison\"),\r\n    (\"OPENROUTER\", \"google/palm-2-codechat-bison\"),\r\n    # TODO: See https://github.com/1rgs/jsonformer-claude/blob/main/jsonformer_claude/main.py\r\n    #           https://github.com/guidance-ai/guidance - token healing\r\n    (\"OPENROUTER\", \"anthropic/claude-2\"),\r\n])\r\ndef test_end_to_end(endpoint, model, monkeypatch):\r\n    # Given\r\n    monkeypatch.setenv('ENDPOINT', endpoint)\r\n    monkeypatch.setenv('MODEL_NAME', model)\r\n\r\n    create_tables()\r\n    args = init()\r\n    builtins.print, ipc_client_instance = get_custom_print(args)\r\n    project = Project(args)\r\n    mock_questionary = MockQuestionary([\r\n        'Test App',\r\n        'A web-based chat app',\r\n        # 5 clarifying questions\r\n        'Users can send direct messages to each other but with no group chat functionality',\r\n        'No authentication is required at this stage',\r\n        'Use your best judgement',\r\n        'Use your best judgement',\r\n        'Use your best judgement',\r\n    ])\r\n\r\n    # When\r\n    with patch('utils.questionary.questionary', mock_questionary):\r\n        project.start()\r\n\r\n","file":"/pilot/test_main_e2e.py","language":"python","fileHash":"a475c346e7af301d9cff87ebe67d3b5aff389220e4a8c119df9cf07c30277852","hash":"a475c346e7af301d9cff87ebe67d3b5aff389220e4a8c119df9cf07c30277852","processedContent":"import builtins\r\nimport pytest\r\nfrom unittest.mock import patch\r #undefined\nfrom dotenv import load_dotenv\r\n\"\"\"\nscip-python python python-dotenv 1.0.0 dotenv/__init__:: undefined\nscip-python python python-dotenv 1.0.0 `dotenv.main`/load_dotenv().: undefined\n\"\"\"\nload_dotenv()\r #undefined\n\r\nfrom database.database import create_tables\r\n\"\"\"\nscip-python python temp indexer `pilot.database.database`/__init__:: The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.database.database`/create_tables().: This code creates database tables using the `create_tables()` method of a database object, which is passed as an argument to the function.\n\"\"\"\nfrom helpers.Project import Project\r\n\"\"\"\nscip-python python temp indexer `pilot.helpers.project`/__init__:: The code defines a Python class called \"Project\" that represents a software development project, with functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\nscip-python python temp indexer `pilot.helpers.project`/Project#: The code defines a class called \"Project\" that represents a software development project. It includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\n\"\"\"\nfrom test.mock_questionary import MockQuestionary\r\n\"\"\"\nscip-python python temp indexer `pilot.test.mock_questionary`/__init__:: This code defines a class called \"MockQuestionary\" that allows users to ask questions and receive answers in a mock interview setting.\nscip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#: This code defines a class called \"MockQuestionary\" that allows users to ask questions and receive answers in a mock interview setting. The class has several methods, including \"__init__\", \"text\", \"ask\", and \"unsafe_ask\". The purpose of the code is to provide a way to simulate a user asking questions and receiving answers in a mock interview setting.\n\"\"\"\nfrom .main import init, get_custom_print\r\n\"\"\"\nscip-python python temp indexer `pilot.main`/__init__:: The code is a Python script that sets up a custom logger, checks for the existence of a database and tables, creates them if necessary, and retrieves command-line arguments to set up the environment for the Pilot app. It also defines a class called \"Project\" that represents a software development project, and includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\nscip-python python temp indexer `pilot.main`/init().: The code checks if a database and tables exist, creates them if necessary, and retrieves command-line arguments to set up the environment for the Pilot app.\nscip-python python temp indexer `pilot.utils.custom_print`/get_custom_print().: This code defines a function called `get_custom_print` that returns a tuple of two functions: `print_to_external_process` and `local_print`. The first function sends a message to an external process over a network connection, while the second function prints the message to the console.\n\"\"\"\n\r\n\r\ndef test_init():\r\n    \"\"\"This code checks if a database and tables exist, creates them if necessary, and retrieves command-line arguments to set up the environment for the Pilot app.\"\"\"\n    pass\n\r\n\r\n@pytest.mark.slow\r\n@pytest.mark.uses_tokens\r\n@pytest.mark.skip(reason=\"Uses lots of tokens\")\r\n@pytest.mark.parametrize(\"endpoint, model\", [\r\n    (\"OPENAI\", \"gpt-4\"),\r\n    (\"OPENROUTER\", \"openai/gpt-3.5-turbo\"),\r\n    (\"OPENROUTER\", \"meta-llama/codellama-34b-instruct\"),\r\n    (\"OPENROUTER\", \"google/palm-2-chat-bison\"),\r\n    (\"OPENROUTER\", \"google/palm-2-codechat-bison\"),\r\n    # TODO: See https://github.com/1rgs/jsonformer-claude/blob/main/jsonformer_claude/main.py\r\n    #           https://github.com/guidance-ai/guidance - token healing\r\n    (\"OPENROUTER\", \"anthropic/claude-2\"),\r\n])\r\ndef test_end_to_end(endpoint, model, monkeypatch):\r\n    \"\"\"The code defines a test function that creates database tables, retrieves command-line arguments, and initializes a class called \"Project\" to simulate a software development project. It also defines a class called \"MockQuestionary\" to simulate a user asking questions in a mock interview setting.\"\"\"\n    pass\n\r\n","documentation":"The code is a Python script that sets up a custom logger, checks for the existence of a database and tables, creates them if necessary, and retrieves command-line arguments to set up the environment for the Pilot app. It also defines a class called \"Project\" that represents a software development project, and includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks."}},{"key":"scip-python python python-stdlib 3.11 `unittest.mock`/__init__:","attributes":{"symbol":"scip-python python python-stdlib 3.11 `unittest.mock`/__init__:","language":"python"}},{"key":"scip-python python temp indexer `pilot.test.mock_questionary`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.test.mock_questionary`/__init__:","language":"python","range":[0,0,32,0],"content":"class MockQuestionary:\r\n    def __init__(self, answers=None, initial_state='project_description'):\r\n        if answers is None:\r\n            answers = []\r\n        self.answers = iter(answers)\r\n        self.state = initial_state\r\n\r\n    class Style:\r\n        def __init__(self, *args, **kwargs):\r\n            pass\r\n\r\n    def text(self, question: str, style=None):\r\n        print('AI: ' + question)\r\n        if question.startswith('User Story'):\r\n            self.state = 'user_stories'\r\n        elif question.endswith('write \"DONE\"'):\r\n            self.state = 'DONE'\r\n        return self\r\n\r\n    def ask(self):\r\n        return self.unsafe_ask()\r\n\r\n    def unsafe_ask(self):\r\n        if self.state == 'user_stories':\r\n            answer = ''\r\n        elif self.state == 'DONE':\r\n            answer = 'DONE'\r\n        else:  # if self.state == 'project_description':\r\n            answer = next(self.answers, '')\r\n\r\n        print('User:', answer)\r\n        return answer\r\n","file":"/pilot/test/mock_questionary.py","fileHash":"28c1a02faa514227838895a5ee4f9e85c6642177152b23eae06edb4615d9f5f9","hash":"28c1a02faa514227838895a5ee4f9e85c6642177152b23eae06edb4615d9f5f9","processedContent":"class MockQuestionary:\r\n    \"\"\"This code defines a class called \"MockQuestionary\" that allows users to ask questions and receive answers in a mock interview setting. The class has several methods, including \"__init__\", \"text\", \"ask\", and \"unsafe_ask\". The purpose of the code is to provide a way to simulate a user asking questions and receiving answers in a mock interview setting.\"\"\"\n    pass\n","documentation":"This code defines a class called \"MockQuestionary\" that allows users to ask questions and receive answers in a mock interview setting."}},{"key":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#","attributes":{"symbol":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#","language":"python","range":[0,0,31,21],"content":"class MockQuestionary:\r\n    def __init__(self, answers=None, initial_state='project_description'):\r\n        if answers is None:\r\n            answers = []\r\n        self.answers = iter(answers)\r\n        self.state = initial_state\r\n\r\n    class Style:\r\n        def __init__(self, *args, **kwargs):\r\n            pass\r\n\r\n    def text(self, question: str, style=None):\r\n        print('AI: ' + question)\r\n        if question.startswith('User Story'):\r\n            self.state = 'user_stories'\r\n        elif question.endswith('write \"DONE\"'):\r\n            self.state = 'DONE'\r\n        return self\r\n\r\n    def ask(self):\r\n        return self.unsafe_ask()\r\n\r\n    def unsafe_ask(self):\r\n        if self.state == 'user_stories':\r\n            answer = ''\r\n        elif self.state == 'DONE':\r\n            answer = 'DONE'\r\n        else:  # if self.state == 'project_description':\r\n            answer = next(self.answers, '')\r\n\r\n        print('User:', answer)\r\n        return answer","file":"/pilot/test/mock_questionary.py","fileHash":"28c1a02faa514227838895a5ee4f9e85c6642177152b23eae06edb4615d9f5f9","hash":"8ce5defd8ef0f7272ce03e0fcf4943e4cf368eff0ec873d4f47babc3aa9432d0","processedContent":"class MockQuestionary:\r\n    def __init__(self, answers=None, initial_state='project_description'):\r\n        \"\"\"This code defines a function that initializes an object with a list of answers and sets the initial state to \"project_description\".\"\"\"\n        pass\n\r\n    class Style:\r\n        \"\"\"This code defines a class called \"Style\" that initializes an instance of the class with no arguments.\"\"\"\n        pass\n\r\n    def text(self, question: str, style=None):\r\n        \"\"\"This code defines a function called \"text\" that takes in a string parameter called \"question\" and returns an instance of the class. The function prints a message to the console and sets the state of the object to either \"user_stories\" or \"DONE\" depending on the value of the \"question\" parameter.\"\"\"\n        pass\n\r\n    def ask(self):\r\n        \"\"\"This code defines a function called \"ask\" that returns the result of another function called \"unsafe_ask\". The purpose of this code is to provide a way to safely call the \"unsafe_ask\" function while still allowing it to be overridden in subclasses.\"\"\"\n        pass\n\r\n    def unsafe_ask(self):\r\n        if self.state == 'user_stories':\r\n            answer = ''\r\n        elif self.state == 'DONE':\r\n            answer = 'DONE'\r\n        else:  # if self.state == 'project_description':\r\n            answer = next(self.answers, '')\r\n\r\n        print('User:', answer)\r\n        return answer","documentation":"This code defines a class called \"MockQuestionary\" that allows users to ask questions and receive answers in a mock interview setting. The class has several methods, including \"__init__\", \"text\", \"ask\", and \"unsafe_ask\". The purpose of the code is to provide a way to simulate a user asking questions and receiving answers in a mock interview setting."}},{"key":"scip-python python temp indexer `pilot.const.code_execution`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.const.code_execution`/__init__:","range":[0,0,5,0],"content":"MAX_COMMAND_DEBUG_TRIES = 3\nMAX_RECUSION_LAYER = 3\nMIN_COMMAND_RUN_TIME = 2000\nMAX_COMMAND_RUN_TIME = 30000\nMAX_COMMAND_OUTPUT_LENGTH = 2000\n","file":"/pilot/const/code_execution.py","language":"python","fileHash":"9b833f696c894d769b8949641dac58f7fd68aa5e1d156a9164797b02379dfdaa","hash":"9b833f696c894d769b8949641dac58f7fd68aa5e1d156a9164797b02379dfdaa","processedContent":"MAX_COMMAND_DEBUG_TRIES = 3\nMAX_RECUSION_LAYER = 3\nMIN_COMMAND_RUN_TIME = 2000\nMAX_COMMAND_RUN_TIME = 30000\nMAX_COMMAND_OUTPUT_LENGTH = 2000\n","documentation":"This code defines some constants that control the behavior of a command-line interface. The MAX_COMMAND_DEBUG_TRIES constant determines how many times the CLI will attempt to debug a command before giving up. The MAX_RECUSION_LAYER constant sets the maximum number of layers of recursion that the CLI will allow. The MIN_COMMAND_RUN_TIME and MAX_COMMAND_RUN_TIME constants set the minimum and maximum amount of time, in milliseconds, that a command can take to run. Finally, the MAX_COMMAND_OUTPUT_LENGTH constant sets the maximum length, in characters, of the output that the CLI will display for a command."}},{"key":"scip-python python temp indexer `pilot.const.common`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.const.common`/__init__:","range":[0,0,42,0],"content":"import os\n\n\nAPP_TYPES = ['Web App', 'Script', 'Mobile App', 'Chrome Extension']\nROLES = {\n    'product_owner': ['project_description', 'user_stories', 'user_tasks'],\n    'architect': ['architecture'],\n    'tech_lead': ['development_planning'],\n    'full_stack_developer': ['coding'],\n    'dev_ops': ['environment_setup'],\n    'code_monkey': ['coding']\n}\nSTEPS = [\n    'project_description',\n    'user_stories',\n    'user_tasks',\n    'architecture',\n    'environment_setup',\n    'development_planning',\n    'coding',\n    'finished'\n]\n\nadditional_ignore_folders = os.environ.get('IGNORE_FOLDERS', '').split(',')\n\n# TODO: rename to IGNORE_PATHS as it also contains files\nIGNORE_FOLDERS = [\n    '.git',\n    '.gpt-pilot',\n    '.idea',\n    '.vscode',\n    '.DS_Store',\n    '__pycache__',\n    'node_modules',\n    'package-lock.json',\n    'venv',\n    'dist',\n    'build',\n    'target'\n] + [folder for folder in additional_ignore_folders if folder]\n\nPROMPT_DATA_TO_IGNORE = {'directory_tree', 'name'}\n","file":"/pilot/const/common.py","language":"python","fileHash":"d82779ce3469d9a0fffd4a4dcf15989cc524a72a2f64169854a9121fe892afee","hash":"d82779ce3469d9a0fffd4a4dcf15989cc524a72a2f64169854a9121fe892afee","processedContent":"import os #undefined\n\n\nAPP_TYPES = ['Web App', 'Script', 'Mobile App', 'Chrome Extension']\nROLES = {\n    'product_owner': ['project_description', 'user_stories', 'user_tasks'],\n    'architect': ['architecture'],\n    'tech_lead': ['development_planning'],\n    'full_stack_developer': ['coding'],\n    'dev_ops': ['environment_setup'],\n    'code_monkey': ['coding']\n}\nSTEPS = [\n    'project_description',\n    'user_stories',\n    'user_tasks',\n    'architecture',\n    'environment_setup',\n    'development_planning',\n    'coding',\n    'finished'\n]\n\nadditional_ignore_folders = os.environ.get('IGNORE_FOLDERS', '').split(',')\n\"\"\"\nscip-python python python-stdlib 3.11 os/__init__:: undefined\nscip-python python python-stdlib 3.11 os/environ.environ.: undefined\nscip-python python python-stdlib 3.11 typing/Mapping#get().: undefined\n\"\"\"\n\n# TODO: rename to IGNORE_PATHS as it also contains files\nIGNORE_FOLDERS = [\n    '.git',\n    '.gpt-pilot',\n    '.idea',\n    '.vscode',\n    '.DS_Store',\n    '__pycache__',\n    'node_modules',\n    'package-lock.json',\n    'venv',\n    'dist',\n    'build',\n    'target'\n] + [folder for folder in additional_ignore_folders if folder] #undefined\n\nPROMPT_DATA_TO_IGNORE = {'directory_tree', 'name'}\n","documentation":"This code defines a set of constants and variables used in the project, including a list of folders to ignore during certain operations."}},{"key":"scip-python python python-stdlib 3.11 typing/Mapping#get().","attributes":{"symbol":"scip-python python python-stdlib 3.11 typing/Mapping#get().","language":"python"}},{"key":"scip-python python temp indexer `pilot.const.common`/additional_ignore_folders.","attributes":{"symbol":"scip-python python temp indexer `pilot.const.common`/additional_ignore_folders.","language":"python"}},{"key":"scip-python python temp indexer `pilot.const.function_calls`/process_user_stories().","attributes":{"range":[0,0,1,18],"symbol":"scip-python python temp indexer `pilot.const.function_calls`/process_user_stories().","content":"def process_user_stories(stories):\n    return stories","file":"/pilot/const/function_calls.py","language":"python","fileHash":"da5314674757c169e37d70cb62f8b91b7d15bf648143650a3ad79c4729ddf779","hash":"20c31786ca50e24e04ee2405ff319841ec4a6d66dc750a01794ab3243d13edac","processedContent":"def process_user_stories(stories):\n    return stories","documentation":"This code takes a list of user stories and returns the same list without any changes. It's a simple function that doesn't perform any complex operations, but it's still important to understand how it works in the context of the larger system."}},{"key":"scip-python python temp indexer `pilot.const.function_calls`/process_user_tasks().","attributes":{"range":[4,0,5,16],"symbol":"scip-python python temp indexer `pilot.const.function_calls`/process_user_tasks().","content":"def process_user_tasks(tasks):\n    return tasks","file":"/pilot/const/function_calls.py","language":"python","fileHash":"da5314674757c169e37d70cb62f8b91b7d15bf648143650a3ad79c4729ddf779","hash":"e5fe47e68b94b28b8bf7fd38489c260bcdf039abb5d4495a357859209c0bf3b9","processedContent":"def process_user_tasks(tasks):\n    return tasks","documentation":"This code processes a list of user tasks and returns the same list."}},{"key":"scip-python python temp indexer `pilot.const.function_calls`/process_os_technologies().","attributes":{"range":[8,0,9,23],"symbol":"scip-python python temp indexer `pilot.const.function_calls`/process_os_technologies().","content":"def process_os_technologies(technologies):\n    return technologies","file":"/pilot/const/function_calls.py","language":"python","fileHash":"da5314674757c169e37d70cb62f8b91b7d15bf648143650a3ad79c4729ddf779","hash":"7e9c6aa18511bfd50cad39ad38c3c8ce9fe48a93710d09049d81c43705eb1e51","processedContent":"def process_os_technologies(technologies):\n    return technologies","documentation":"This code takes a list of technologies and returns the same list without any changes. It's a simple function that doesn't perform any complex operations, making it easy to understand and maintain."}},{"key":"scip-python python temp indexer `pilot.const.function_calls`/run_commands().","attributes":{"range":[12,0,13,19],"symbol":"scip-python python temp indexer `pilot.const.function_calls`/run_commands().","content":"def run_commands(commands):\n    return commands","file":"/pilot/const/function_calls.py","language":"python","fileHash":"da5314674757c169e37d70cb62f8b91b7d15bf648143650a3ad79c4729ddf779","hash":"80a0f540a5506466726ab001de266427fa3350df246a23bf362072f7f74fd272","processedContent":"def run_commands(commands):\n    return commands","documentation":"This code defines a function called `run_commands` that takes a list of commands as an argument and returns the same list. The purpose of this function is to execute the commands in the list and return the results."}},{"key":"scip-python python temp indexer `pilot.const.function_calls`/return_files().","attributes":{"range":[16,0,18,16],"symbol":"scip-python python temp indexer `pilot.const.function_calls`/return_files().","content":"def return_files(files):\n    # TODO get file\n    return files","file":"/pilot/const/function_calls.py","language":"python","fileHash":"da5314674757c169e37d70cb62f8b91b7d15bf648143650a3ad79c4729ddf779","hash":"460faf55320d310cddd1fa93a07077c344af1f89fd4fcc67eeec239b8365fbc0","processedContent":"def return_files(files):\n    # TODO get file\n    return files","documentation":"This code defines a function called `return_files` that takes a list of files as an argument and returns the same list. The function does not perform any actual file operations, but rather serves as a placeholder for future development."}},{"key":"scip-python python temp indexer `pilot.const.function_calls`/return_array_from_prompt().","attributes":{"range":[21,0,39,5],"symbol":"scip-python python temp indexer `pilot.const.function_calls`/return_array_from_prompt().","content":"def return_array_from_prompt(name_plural, name_singular, return_var_name):\n    return {\n        'name': f'process_{name_plural.replace(\" \", \"_\")}',\n        'description': f\"Print the list of {name_plural} that are created.\",\n        'parameters': {\n            'type': 'object',\n            \"properties\": {\n                f\"{return_var_name}\": {\n                    \"type\": \"array\",\n                    \"description\": f\"List of {name_plural}.\",\n                    \"items\": {\n                        \"type\": \"string\",\n                        \"description\": f\"{name_singular}\"\n                    },\n                },\n            },\n            \"required\": [return_var_name],\n        },\n    }","file":"/pilot/const/function_calls.py","language":"python","fileHash":"da5314674757c169e37d70cb62f8b91b7d15bf648143650a3ad79c4729ddf779","hash":"826835f5d2985ed6bba45baa71985a01159998e280726d75b4d99d35aa9bb94a","processedContent":"def return_array_from_prompt(name_plural, name_singular, return_var_name):\n    return {\n        'name': f'process_{name_plural.replace(\" \", \"_\")}',\n        'description': f\"Print the list of {name_plural} that are created.\",\n        'parameters': {\n            'type': 'object',\n            \"properties\": {\n                f\"{return_var_name}\": {\n                    \"type\": \"array\",\n                    \"description\": f\"List of {name_plural}.\",\n                    \"items\": {\n                        \"type\": \"string\",\n                        \"description\": f\"{name_singular}\"\n                    },\n                },\n            },\n            \"required\": [return_var_name],\n        },\n    }","documentation":"This code defines a function that returns an array of strings, where each string represents a specific type of object. The function takes three parameters: the plural name of the object, the singular name of the object, and the name of the variable to return the array in. The function's description is also defined, which explains what the function does and what it returns."}},{"key":"scip-python python temp indexer `pilot.const.function_calls`/command_definition().","attributes":{"range":[42,0,72,5],"symbol":"scip-python python temp indexer `pilot.const.function_calls`/command_definition().","content":"def command_definition(description_command='A single command that needs to be executed.',\n                       description_timeout=\n                       'Timeout in milliseconds that represent the approximate time this command takes to finish. '\n                       'If you need to run a command that doesnt\\'t finish by itself (eg. a command to run an app), '\n                       'set the timeout to to a value long enough to determine that it has started successfully and provide a command_id. '\n                       'If you need to create a directory that doesn\\'t exist and is not the root project directory, '\n                       'always create it by running a command `mkdir`'):\n    return {\n        'type': 'object',\n        'description': 'Command that needs to be run to complete the current task. This should be used only if the task is of a type \"command\".',\n        'properties': {\n            'command': {\n                'type': 'string',\n                'description': description_command,\n            },\n            'timeout': {\n                'type': 'number',\n                'description': description_timeout,\n            },\n            'success_message': {\n                'type': 'string',\n                'description': 'A message to look for in the output of the command to determine if successful or not.',\n            },\n            'command_id': {\n                'type': 'string',\n                'description': 'If the process needs to continue running after the command is executed provide '\n                               'a unique command identifier which you can use to kill the process later.',\n            }\n        },\n        'required': ['command', 'timeout'],\n    }","file":"/pilot/const/function_calls.py","language":"python","fileHash":"da5314674757c169e37d70cb62f8b91b7d15bf648143650a3ad79c4729ddf779","hash":"676a6e013b4c185de140b2bf00e04d021518b62c22f7fc975e480a33ecd1d411","processedContent":"def command_definition(description_command='A single command that needs to be executed.',\n                       description_timeout=\n                       'Timeout in milliseconds that represent the approximate time this command takes to finish. '\n                       'If you need to run a command that doesnt\\'t finish by itself (eg. a command to run an app), '\n                       'set the timeout to to a value long enough to determine that it has started successfully and provide a command_id. '\n                       'If you need to create a directory that doesn\\'t exist and is not the root project directory, '\n                       'always create it by running a command `mkdir`'):\n    return {\n        'type': 'object',\n        'description': 'Command that needs to be run to complete the current task. This should be used only if the task is of a type \"command\".',\n        'properties': {\n            'command': {\n                'type': 'string',\n                'description': description_command,\n            },\n            'timeout': {\n                'type': 'number',\n                'description': description_timeout,\n            },\n            'success_message': {\n                'type': 'string',\n                'description': 'A message to look for in the output of the command to determine if successful or not.',\n            },\n            'command_id': {\n                'type': 'string',\n                'description': 'If the process needs to continue running after the command is executed provide '\n                               'a unique command identifier which you can use to kill the process later.',\n            }\n        },\n        'required': ['command', 'timeout'],\n    }","documentation":"This code defines a command object that contains information about a command to be executed, including the command itself, a timeout, and optional success message and command ID."}},{"key":"scip-python python temp indexer `pilot.const.function_calls`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.const.function_calls`/__init__:","range":[0,0,672,1],"content":"def process_user_stories(stories):\n    return stories\n\n\ndef process_user_tasks(tasks):\n    return tasks\n\n\ndef process_os_technologies(technologies):\n    return technologies\n\n\ndef run_commands(commands):\n    return commands\n\n\ndef return_files(files):\n    # TODO get file\n    return files\n\n\ndef return_array_from_prompt(name_plural, name_singular, return_var_name):\n    return {\n        'name': f'process_{name_plural.replace(\" \", \"_\")}',\n        'description': f\"Print the list of {name_plural} that are created.\",\n        'parameters': {\n            'type': 'object',\n            \"properties\": {\n                f\"{return_var_name}\": {\n                    \"type\": \"array\",\n                    \"description\": f\"List of {name_plural}.\",\n                    \"items\": {\n                        \"type\": \"string\",\n                        \"description\": f\"{name_singular}\"\n                    },\n                },\n            },\n            \"required\": [return_var_name],\n        },\n    }\n\n\ndef command_definition(description_command='A single command that needs to be executed.',\n                       description_timeout=\n                       'Timeout in milliseconds that represent the approximate time this command takes to finish. '\n                       'If you need to run a command that doesnt\\'t finish by itself (eg. a command to run an app), '\n                       'set the timeout to to a value long enough to determine that it has started successfully and provide a command_id. '\n                       'If you need to create a directory that doesn\\'t exist and is not the root project directory, '\n                       'always create it by running a command `mkdir`'):\n    return {\n        'type': 'object',\n        'description': 'Command that needs to be run to complete the current task. This should be used only if the task is of a type \"command\".',\n        'properties': {\n            'command': {\n                'type': 'string',\n                'description': description_command,\n            },\n            'timeout': {\n                'type': 'number',\n                'description': description_timeout,\n            },\n            'success_message': {\n                'type': 'string',\n                'description': 'A message to look for in the output of the command to determine if successful or not.',\n            },\n            'command_id': {\n                'type': 'string',\n                'description': 'If the process needs to continue running after the command is executed provide '\n                               'a unique command identifier which you can use to kill the process later.',\n            }\n        },\n        'required': ['command', 'timeout'],\n    }\n\n\nUSER_STORIES = {\n    'definitions': [\n        return_array_from_prompt('user stories', 'user story', 'stories')\n    ],\n    'functions': {\n        'process_user_stories': process_user_stories\n    },\n}\n\nUSER_TASKS = {\n    'definitions': [\n        return_array_from_prompt('user tasks', 'user task', 'tasks')\n    ],\n    'functions': {\n        'process_user_tasks': process_user_tasks\n    },\n}\n\nARCHITECTURE = {\n    'definitions': [\n        return_array_from_prompt('technologies', 'technology', 'technologies')\n    ],\n    'functions': {\n        'process_technologies': lambda technologies: technologies\n    },\n}\n\nFILTER_OS_TECHNOLOGIES = {\n    'definitions': [\n        return_array_from_prompt('os specific technologies', 'os specific technology', 'technologies')\n    ],\n    'functions': {\n        'process_os_specific_technologies': process_os_technologies\n    },\n}\n\nINSTALL_TECH = {\n    'definitions': [\n        return_array_from_prompt('os specific technologies', 'os specific technology', 'technologies')\n    ],\n    'functions': {\n        'process_os_specific_technologies': process_os_technologies\n    },\n}\n\nCOMMANDS_TO_RUN = {\n    'definitions': [\n        return_array_from_prompt('commands', 'command', 'commands')\n    ],\n    'functions': {\n        'process_commands': run_commands\n    },\n}\n\nCOMMAND_TO_RUN = {\n    'definitions': [\n        {\n            'name': 'command_to_run',\n            'description': 'Command that starts the app.',\n            'parameters': command_definition(\"Command that starts the app. If app can't be started for some reason, return command as empty string ''.\"),\n        },\n    ],\n    'functions': {\n        'process_commands': run_commands\n    },\n}\n\nDEV_TASKS_BREAKDOWN = {\n    'definitions': [\n        {\n            'name': 'break_down_development_task',\n            'description': 'Breaks down the development task into smaller steps that need to be done to implement the entire task.',\n            'parameters': {\n                'type': 'object',\n                \"properties\": {\n                    \"tasks\": {\n                        'type': 'array',\n                        'description': 'List of smaller development steps that need to be done to complete the entire task.',\n                        'items': {\n                            'type': 'object',\n                            'description': 'A smaller development step that needs to be done to complete the entire task.  Remember, if you need to run a command that doesn\\'t finish by itself (eg. a command to run an app), put the timeout to 3000 milliseconds. If you need to create a directory that doesn\\'t exist and is not the root project directory, always create it by running a command `mkdir`',\n                            'properties': {\n                                'type': {\n                                    'type': 'string',\n                                    'enum': ['command', 'code_change', 'human_intervention'],\n                                    'description': 'Type of the development step that needs to be done to complete the entire task.',\n                                },\n                                'command': command_definition('A single command that needs to be executed.', 'Timeout in milliseconds that represent the approximate time the command takes to finish. This should be used only if the task is of a type \"command\". If you need to run a command that doesn\\'t finish by itself (eg. a command to run an app), put the timeout to 3000 milliseconds. Remember, this is not in seconds but in milliseconds so likely it always needs to be greater than 1000.'),\n                                'code_change_description': {\n                                    'type': 'string',\n                                    'description': 'Description of a the development step that needs to be done. This should be used only if the task is of a type \"code_change\" and it should thoroughly describe what needs to be done to implement the code change for a single file - it cannot include changes for multiple files.',\n                                },\n                                'human_intervention_description': {\n                                    'type': 'string',\n                                    'description': 'Description of a task that requires a human to do.',\n                                },\n                            },\n                            'required': ['type'],\n                        }\n                    }\n                },\n                \"required\": ['tasks'],\n            },\n        },\n    ],\n    'functions': {\n        'break_down_development_task': lambda tasks: tasks\n    },\n}\n\nIMPLEMENT_TASK = {\n    'definitions': [\n        {\n            'name': 'parse_development_task',\n            'description': 'Breaks down the development task into smaller steps that need to be done to implement the entire task.',\n            'parameters': {\n                'type': 'object',\n                \"properties\": {\n                    \"tasks\": {\n                        'type': 'array',\n                        'description': 'List of smaller development steps that need to be done to complete the entire task.',\n                        'items': {\n                            'type': 'object',\n                            'description': 'A smaller development step that needs to be done to complete the entire task.  Remember, if you need to run a command that doesn\\'t finish by itself (eg. a command to run an  If you need to create a directory that doesn\\'t exist and is not the root project directory, always create it by running a command `mkdir`',\n                            'properties': {\n                                'type': {\n                                    'type': 'string',\n                                    'enum': ['command', 'code_change', 'human_intervention'],\n                                    'description': 'Type of the development step that needs to be done to complete the entire task.',\n                                },\n                                'command': command_definition(),\n                                'code_change': {\n                                    'type': 'object',\n                                    'description': 'A code change that needs to be implemented. This should be used only if the task is of a type \"code_change\".',\n                                    'properties': {\n                                        'name': {\n                                            'type': 'string',\n                                            'description': 'Name of the file that needs to be implemented.',\n                                        },\n                                        'path': {\n                                            'type': 'string',\n                                            'description': 'Full path of the file with the file name that needs to be implemented.',\n                                        },\n                                        'content': {\n                                            'type': 'string',\n                                            'description': 'Full content of the file that needs to be implemented. **IMPORTANT**When you want to add a comment that tells the user to add the previous implementation at that place, make sure that the comment starts with `[OLD CODE]` and add a description of what old code should be inserted here. For example, `[OLD CODE] Login route`.',\n                                        },\n                                    },\n                                    'required': ['name', 'path', 'content'],\n                                },\n                                'human_intervention_description': {\n                                    'type': 'string',\n                                    'description': 'Description of a step in debugging this issue when there is a human intervention needed. This should be used only if the task is of a type \"human_intervention\".',\n                                },\n                            },\n                            'required': ['type'],\n                        }\n                    }\n                },\n                \"required\": ['tasks'],\n            },\n        },\n    ],\n    'functions': {\n        'parse_development_task': lambda tasks: tasks\n    },\n}\n\nDEV_STEPS = {\n    'definitions': [\n        {\n            'name': 'break_down_development_task',\n            'description': 'Breaks down the development task into smaller steps that need to be done to implement the entire task.',\n            'parameters': {\n                'type': 'object',\n                \"properties\": {\n                    \"tasks\": {\n                        'type': 'array',\n                        'description': 'List of development steps that need to be done to complete the entire task.',\n                        'items': {\n                            'type': 'object',\n                            'description': 'Development step that needs to be done to complete the entire task.',\n                            'properties': {\n                                'type': {\n                                    'type': 'string',\n                                    'description': 'Type of the development step that needs to be done to complete the entire task - it can be \"command\" or \"code_change\".',\n                                },\n                                'description': {\n                                    'type': 'string',\n                                    'description': 'Description of the development step that needs to be done.',\n                                },\n                            },\n                            'required': ['type', 'description'],\n                        }\n                    }\n                },\n                \"required\": ['tasks'],\n            },\n        },\n        {\n            'name': 'run_commands',\n            'description': 'Run all commands in the given list. Each command needs to be a single command that can be executed.',\n            'parameters': {\n                'type': 'object',\n                \"properties\": {\n                    \"commands\": {\n                        'type': 'array',\n                        'description': 'List of commands that need to be run to complete the currrent task. Each command cannot be anything other than a single CLI command that can be independetly run.',\n                        'items': {\n                            'type': 'string',\n                            'description': 'A single command that needs to be run to complete the current task.',\n                        }\n                    }\n                },\n                \"required\": ['commands'],\n            },\n        },\n        {\n            'name': 'process_code_changes',\n            'description': 'Implements all the code changes outlined in the description.',\n            'parameters': {\n                'type': 'object',\n                \"properties\": {\n                    \"code_change_description\": {\n                        'type': 'string',\n                        'description': 'A detailed description of what needs to be done to implement all the code changes from the task.',\n                    }\n                },\n                \"required\": ['code_change_description'],\n            },\n        },\n        {\n            'name': 'get_files',\n            'description': 'Returns development files that are currently implemented so that they can be analized and so that changes can be appropriatelly made.',\n            'parameters': {\n                'type': 'object',\n                'properties': {\n                    'files': {\n                        'type': 'array',\n                        'description': 'List of files that need to be analyzed to implement the required changes.',\n                        'items': {\n                            'type': 'string',\n                            'description': 'A single file name that needs to be analized to implement the reqired changes. Remember, this is a file name with path relative to the project root. For example, if a file path is `{{project_root}}/models/model.py`, this value needs to be `models/model.py`.',\n                        }\n                    }\n                },\n                'required': ['files'],\n            },\n        }\n    ],\n    'functions': {\n        'break_down_development_task': lambda tasks: (tasks, 'more_tasks'),\n        'run_commands': lambda commands: (commands, 'run_commands'),\n        'process_code_changes': lambda code_change_description: (code_change_description, 'code_changes'),\n        'get_files': return_files\n    },\n}\n\nCODE_CHANGES = {\n    'definitions': [\n        {\n            'name': 'break_down_development_task',\n            'description': 'Implements all the smaller tasks that need to be done to complete the entire development task.',\n            'parameters': {\n                'type': 'object',\n                \"properties\": {\n                    \"tasks\": {\n                        'type': 'array',\n                        'description': 'List of smaller development steps that need to be done to complete the entire task.',\n                        'items': {\n                            'type': 'object',\n                            'description': 'A smaller development step that needs to be done to complete the entire task.  Remember, if you need to run a command that doesn\\'t finish by itself (eg. a command to run an app), put the timeout to 3000 milliseconds. If you need to create a directory that doesn\\'t exist and is not the root project directory, always create it by running a command `mkdir`',\n                            'properties': {\n                                'type': {\n                                    'type': 'string',\n                                    'enum': ['command', 'code_change'],\n                                    'description': 'Type of the development step that needs to be done to complete the entire task.',\n                                },\n                                'command': command_definition('Command that needs to be run to complete the current task. This should be used only if the task is of a type \"command\".', 'Timeout in milliseconds that represent the approximate time the command takes to finish. This should be used only if the task is of a type \"command\". If you need to run a command that doesn\\'t finish by itself (eg. a command to run an app), put the timeout to 3000 milliseconds. Remember, this is not in seconds but in milliseconds so likely it always needs to be greater than 1000.'),\n                                'code_change_description': {\n                                    'type': 'string',\n                                    'description': 'Description of a the development step that needs to be done. This should be used only if the task is of a type \"code_change\" and it should thoroughly describe what needs to be done to implement the code change.',\n                                },\n                            },\n                            'required': ['type'],\n                        }\n                    }\n                },\n                \"required\": ['tasks'],\n            },\n        }\n    ],\n    'functions': {\n        'break_down_development_task': lambda tasks: tasks,\n    },\n}\n\nDEVELOPMENT_PLAN = {\n    'definitions': [{\n        'name': 'implement_development_plan',\n        'description': 'Implements the development plan.',\n        'parameters': {\n            'type': 'object',\n            \"properties\": {\n                \"plan\": {\n                    \"type\": \"array\",\n                    \"description\": 'List of development tasks that need to be done to implement the entire plan.',\n                    \"items\": {\n                        \"type\": \"object\",\n                        'description': 'Development task that needs to be done to implement the entire plan.',\n                        'properties': {\n                            'description': {\n                                'type': 'string',\n                                'description': 'Description of the development task that needs to be done to implement the entire plan.',\n                            },\n                            'programmatic_goal': {\n                                'type': 'string',\n                                'description': 'Detailed description of programmatic goal. Programmatic goal that will determine if a task can be marked as done from a programmatic perspective (this will result in an automated test that is run before the task is sent to you for a review). All details previously specified by user that are important for this task must be included in this programmatic goal.',\n                            },\n                            'user_review_goal': {\n                                'type': 'string',\n                                'description': 'User review goal that will determine if a task is done or not, but from a user perspective since it will be reviewed by a human.',\n                            }\n                        },\n                        'required': ['description', 'programmatic_goal', 'user_review_goal'],\n                    },\n                },\n            },\n            \"required\": ['plan'],\n        },\n    }],\n    'functions': {\n        'implement_development_plan': lambda plan: plan\n    },\n}\n\nEXECUTE_COMMANDS = {\n    'definitions': [{\n        'name': 'execute_commands',\n        'description': 'Executes a list of commands. ',\n        'parameters': {\n            'type': 'object',\n            'properties': {\n                'commands': {\n                    'type': 'array',\n                    'description': 'List of commands that need to be executed.  Remember, if you need to run a command that doesn\\'t finish by itself (eg. a command to run an app), put the timeout to 3000 milliseconds. If you need to create a directory that doesn\\'t exist and is not the root project directory, always create it by running a command `mkdir`',\n                    'items': command_definition('A single command that needs to be executed.',\n                                                'Timeout in milliseconds that represent the approximate time this command takes to finish. If you need to run a command that doesn\\'t finish by itself (eg. a command to run an app), put the timeout to 3000 milliseconds.')\n                }\n            },\n            'required': ['commands'],\n        },\n    }],\n    'functions': {\n        'execute_commands': lambda commands: commands\n    }\n}\n\nGET_FILES = {\n    'definitions': [{\n        'name': 'get_files',\n        'description': 'Returns development files that are currently implemented so that they can be analized and so that changes can be appropriatelly made.',\n        'parameters': {\n            'type': 'object',\n            'properties': {\n                'files': {\n                    'type': 'array',\n                    'description': 'List of files that need to be analized to implement the reqired changes. Any file name in this array MUST be from the directory tree listed in the previous message.',\n                    'items': {\n                        'type': 'string',\n                        'description': 'A single file name that needs to be analized to implement the reqired changes. Remember, this is a file name with path relative to the project root. For example, if a file path is `{{project_root}}/models/model.py`, this value needs to be `models/model.py`. This file name MUST be listed in the directory from the previous message.',\n                    }\n                }\n            },\n            'required': ['files'],\n        },\n    }],\n    'functions': {\n        'get_files': lambda files: files\n    }\n}\n\nIMPLEMENT_CHANGES = {\n    'definitions': [{\n        'name': 'save_files',\n        'description': 'Iterates over the files passed to this function and saves them on the disk.',\n        'parameters': {\n            'type': 'object',\n            'properties': {\n                'files': {\n                    'type': 'array',\n                    'description': 'List of files that need to be saved.',\n                    'items': {\n                        'type': 'object',\n                        'properties': {\n                            'name': {\n                                'type': 'string',\n                                'description': 'Name of the file that needs to be saved on the disk.',\n                            },\n                            'path': {\n                                'type': 'string',\n                                'description': 'Full path of the file with the file name that needs to be saved.',\n                            },\n                            'content': {\n                                'type': 'string',\n                                'description': 'Full content of the file that needs to be saved on the disk. **IMPORTANT**When you want to add a comment that tells the user to add the previous implementation at that place, make sure that the comment starts with `[OLD CODE]` and add a description of what old code should be inserted here. For example, `[OLD CODE] Login route`.',\n                            },\n                            'description': {\n                                'type': 'string',\n                                'description': 'Description of the file that needs to be saved on the disk. This description doesn\\'t need to explain what is being done currently in this task but rather what is the idea behind this file - what do we want to put in this file in the future. Write the description ONLY if this is the first time this file is being saved. If this file already exists on the disk, leave this field empty.',\n                            },\n                        },\n                        'required': ['name', 'path', 'content'],\n                    }\n                }\n            },\n            'required': ['files'],\n        },\n    }],\n    'functions': {\n        'save_files': lambda files: files\n    },\n    'to_message': lambda files: [\n        f'File `{file[\"name\"]}` saved to the disk and currently looks like this:\\n```\\n{file[\"content\"]}\\n```' for file\n        in files]\n}\n\nGET_TEST_TYPE = {\n    'definitions': [{\n        'name': 'test_changes',\n        'description': 'Tests the changes based on the test type.',\n        'parameters': {\n            'type': 'object',\n            'properties': {\n                'type': {\n                    'type': 'string',\n                    'description': 'Type of a test that needs to be run. If this is just an intermediate step in getting a task done, put `no_test` as the type and we\\'ll just go onto the next task without testing.',\n                    'enum': ['command_test', 'manual_test', 'no_test']\n                },\n                'command': command_definition('Command that needs to be run to test the changes.', 'Timeout in milliseconds that represent the approximate time this command takes to finish. If you need to run a command that doesn\\'t finish by itself (eg. a command to run an app), put the timeout to 3000 milliseconds. If you need to create a directory that doesn\\'t exist and is not the root project directory, always create it by running a command `mkdir`'),\n                # 'automated_test_description': {\n                #     'type': 'string',\n                #     'description': 'Description of an automated test that needs to be run to test the changes. This should be used only if the test type is \"automated_test\" and it should thoroughly describe what needs to be done to implement the automated test so that when someone looks at this test can know exactly what needs to be done to implement this automated test.',\n                # },\n                'manual_test_description': {\n                    'type': 'string',\n                    'description': 'Description of a manual test that needs to be run to test the changes. This should be used only if the test type is \"manual_test\".',\n                }\n            },\n            'required': ['type'],\n        },\n    }],\n    'functions': {\n        'test_changes': lambda type, command=None, automated_test_description=None, manual_test_description=None: (\n            type, command, automated_test_description, manual_test_description)\n    }\n}\n\nDEBUG_STEPS_BREAKDOWN = {\n    'definitions': [\n        {\n            'name': 'start_debugging',\n            'description': 'Starts the debugging process based on the list of steps that need to be done to debug the problem.',\n            'parameters': {\n                'type': 'object',\n                'properties': {\n                    'thoughts': {\n                        'type': 'string',\n                        'description': 'Thoughts that you have about the problem that you are trying to debug.'\n                    },\n                    'reasoning': {\n                        'type': 'string',\n                    },\n                    'steps': {\n                        'type': 'array',\n                        'description': 'List of steps that need to be done to debug the problem.',\n                        'items': {\n                            'type': 'object',\n                            'description': 'A single step that needs to be done to get closer to debugging this issue.  Remember, if you need to run a command that doesn\\'t finish by itself (eg. a command to run an app), put the timeout to 3000 milliseconds. If you need to create a directory that doesn\\'t exist and is not the root project directory, always create it by running a command `mkdir`',\n                            'properties': {\n                                'type': {\n                                    'type': 'string',\n                                    'enum': ['command', 'code_change', 'human_intervention'],\n                                    'description': 'Type of the step that needs to be done to debug this issue.',\n                                },\n                                'command': command_definition('Command that needs to be run to debug this issue.', 'Timeout in milliseconds that represent the approximate time this command takes to finish. If you need to run a command that doesn\\'t finish by itself (eg. a command to run an app), put the timeout to 3000 milliseconds.'),\n                                'code_change_description': {\n                                    'type': 'string',\n                                    'description': 'Description of a step in debugging this issue when there are code changes required. This should be used only if the task is of a type \"code_change\" and it should thoroughly describe what needs to be done to implement the code change for a single file - it cannot include changes for multiple files.',\n                                },\n                                'human_intervention_description': {\n                                    'type': 'string',\n                                    'description': 'Description of a step in debugging this issue when there is a human intervention needed. This should be used only if the task is of a type \"human_intervention\".',\n                                },\n                                \"need_to_see_output\": {\n                                    'type': 'boolean',\n                                    'description': 'Set to `true` if the definition of subsequent steps may need to change after you see the output of a successful execution of this step. '\n                                                   'For example, if the purpose of a command is to check the status of a service or contents of a file before deciding how to proceed then this flag should be set to `true`. '\n                                                   'If subsequent steps can be executed as long as this step is successful, then this flag does not need to be set.',\n                                },\n                                \"check_if_fixed\": {\n                                    'type': 'boolean',\n                                    'description': 'Flag that indicates if the original command that triggered the error that\\'s being debugged should be tried after this step to check if the error is fixed. If you think that the original command `delete node_modules/ && delete package-lock.json` will pass after this step, then this flag should be set to TRUE and if you think that the original command will still fail after this step, then this flag should be set to `false`.',\n                                }\n                            },\n                            'required': ['type', 'check_if_fixed'],\n                        }\n                    }\n                },\n                \"required\": ['thoughts', 'reasoning', 'steps'],\n            },\n        },\n    ],\n    'functions': {\n        'start_debugging': lambda steps: steps\n    },\n}\n\nGET_MISSING_SNIPPETS = {\n    'definitions': [{\n        'name': 'get_missing_snippets',\n        'description': 'Gets the list of snippets that are missing from the code.',\n        'parameters': {\n            'type': 'object',\n            'properties': {\n                'snippets': {\n                    'type': 'array',\n                    'description': 'List of snippets that are missing from the code.',\n                    'items': {\n                        'type': 'object',\n                        'properties': {\n                            'comment_label': {\n                                'type': 'string',\n                                'description': 'Comment label that identifies the snippet that needs to be inserted.',\n                            },\n                            'snippet': {\n                                'type': 'string',\n                                'description': 'The code from earlier in this conversation that needs to be inserted instead of the comment. **IMPORTANT** You always need to write the entire snippet, and under no circumstances should you ever leave any part of the code snippet unwritten. **IMPORTANT** Every single line of code that exists in the place where the comment lives right now should be replaced. **IMPORTANT** Do not include any code that is above or below the comment but only the code that should be in the position of the comment. **IMPORTANT** Make sure that you write the entire snippet that should be inserted in the place of the comment_label, including all control structures, error handling, and any other relevant logic that was in the original code.',\n                            },\n                            'file_path': {\n                                'type': 'string',\n                                'description': 'Path to the file where the snippet needs to be inserted.',\n                            }\n                        },\n                        'required': ['comment_label', 'snippet', 'file_path'],\n                    }\n                }\n            },\n            'required': ['snippets'],\n        },\n    }],\n}\n\nGET_FULLY_CODED_FILE = {\n    'definitions': [{\n        'name': 'get_fully_coded_file',\n        'description': 'Gets the fully coded file.',\n        'parameters': {\n            'type': 'object',\n            'properties': {\n                'file_content': {\n                    'type': 'string',\n                    'description': 'Fully coded file. This contains only the lines of code and no other text.',\n                }\n            },\n            'required': ['file_content'],\n        },\n    }],\n    'functions': {\n        'get_fully_coded_file': lambda file: file\n    },\n}\n\n\nGET_DOCUMENTATION_FILE = {\n    'definitions': [{\n        'name': 'get_documentation_file',\n        'description': 'Gets the full content of requested documentation file.',\n        'parameters': {\n            'type': 'object',\n            'properties': {\n                'name': {\n                    'type': 'string',\n                    'description': 'Name of the documentation file that needs to be saved on the disk.',\n                },\n                'path': {\n                    'type': 'string',\n                    'description': 'Relative path of the documentation file with the file name that needs to be saved.',\n                },\n                'content': {\n                    'type': 'string',\n                    'description': 'Full content of the documentation file that needs to be saved on the disk. **IMPORTANT**When you want to add a comment that tells the user to add the previous implementation at that place, make sure that the comment starts with `[OLD CODE]` and add a description of what old code should be inserted here. For example, `[OLD CODE] Login route`.',\n                },\n            },\n            'required': ['name', 'path', 'content'],\n        },\n    }],\n}","file":"/pilot/const/function_calls.py","language":"python","fileHash":"da5314674757c169e37d70cb62f8b91b7d15bf648143650a3ad79c4729ddf779","hash":"da5314674757c169e37d70cb62f8b91b7d15bf648143650a3ad79c4729ddf779","processedContent":"def process_user_stories(stories):\n    \"\"\"This code takes a list of user stories and returns the same list without any changes. It's a simple function that doesn't perform any complex operations, but it's still important to understand how it works in the context of the larger system.\"\"\"\n    pass\n\n\ndef process_user_tasks(tasks):\n    \"\"\"This code processes a list of user tasks and returns the same list.\"\"\"\n    pass\n\n\ndef process_os_technologies(technologies):\n    \"\"\"This code takes a list of technologies and returns the same list without any changes. It's a simple function that doesn't perform any complex operations, making it easy to understand and maintain.\"\"\"\n    pass\n\n\ndef run_commands(commands):\n    \"\"\"This code defines a function called `run_commands` that takes a list of commands as an argument and returns the same list. The purpose of this function is to execute the commands in the list and return the results.\"\"\"\n    pass\n\n\ndef return_files(files):\n    \"\"\"This code defines a function called `return_files` that takes a list of files as an argument and returns the same list. The function does not perform any actual file operations, but rather serves as a placeholder for future development.\"\"\"\n    pass\n\n\ndef return_array_from_prompt(name_plural, name_singular, return_var_name):\n    \"\"\"This code defines a function that returns an array of strings, where each string represents a specific type of object. The function takes three parameters: the plural name of the object, the singular name of the object, and the name of the variable to return the array in. The function's description is also defined, which explains what the function does and what it returns.\"\"\"\n    pass\n\n\ndef command_definition(description_command='A single command that needs to be executed.',\n                       \"\"\"This code defines a command object that contains information about a command to be executed, including the command itself, a timeout, and optional success message and command ID.\"\"\"\n                       pass\n\n\nUSER_STORIES = {\n    'definitions': [\n        return_array_from_prompt('user stories', 'user story', 'stories') #This code defines a function that returns an array of strings, where each string represents a specific type of object. The function takes three parameters: the plural name of the object, the singular name of the object, and the name of the variable to return the array in. The function's description is also defined, which explains what the function does and what it returns.\n    ],\n    'functions': {\n        'process_user_stories': process_user_stories #This code takes a list of user stories and returns the same list without any changes. It's a simple function that doesn't perform any complex operations, but it's still important to understand how it works in the context of the larger system.\n    },\n}\n\nUSER_TASKS = {\n    'definitions': [\n        return_array_from_prompt('user tasks', 'user task', 'tasks') #This code defines a function that returns an array of strings, where each string represents a specific type of object. The function takes three parameters: the plural name of the object, the singular name of the object, and the name of the variable to return the array in. The function's description is also defined, which explains what the function does and what it returns.\n    ],\n    'functions': {\n        'process_user_tasks': process_user_tasks #This code processes a list of user tasks and returns the same list.\n    },\n}\n\nARCHITECTURE = {\n    'definitions': [\n        return_array_from_prompt('technologies', 'technology', 'technologies') #This code defines a function that returns an array of strings, where each string represents a specific type of object. The function takes three parameters: the plural name of the object, the singular name of the object, and the name of the variable to return the array in. The function's description is also defined, which explains what the function does and what it returns.\n    ],\n    'functions': {\n        'process_technologies': lambda technologies: technologies\n    },\n}\n\nFILTER_OS_TECHNOLOGIES = {\n    'definitions': [\n        return_array_from_prompt('os specific technologies', 'os specific technology', 'technologies') #This code defines a function that returns an array of strings, where each string represents a specific type of object. The function takes three parameters: the plural name of the object, the singular name of the object, and the name of the variable to return the array in. The function's description is also defined, which explains what the function does and what it returns.\n    ],\n    'functions': {\n        'process_os_specific_technologies': process_os_technologies #This code takes a list of technologies and returns the same list without any changes. It's a simple function that doesn't perform any complex operations, making it easy to understand and maintain.\n    },\n}\n\nINSTALL_TECH = {\n    'definitions': [\n        return_array_from_prompt('os specific technologies', 'os specific technology', 'technologies') #This code defines a function that returns an array of strings, where each string represents a specific type of object. The function takes three parameters: the plural name of the object, the singular name of the object, and the name of the variable to return the array in. The function's description is also defined, which explains what the function does and what it returns.\n    ],\n    'functions': {\n        'process_os_specific_technologies': process_os_technologies #This code takes a list of technologies and returns the same list without any changes. It's a simple function that doesn't perform any complex operations, making it easy to understand and maintain.\n    },\n}\n\nCOMMANDS_TO_RUN = {\n    'definitions': [\n        return_array_from_prompt('commands', 'command', 'commands') #This code defines a function that returns an array of strings, where each string represents a specific type of object. The function takes three parameters: the plural name of the object, the singular name of the object, and the name of the variable to return the array in. The function's description is also defined, which explains what the function does and what it returns.\n    ],\n    'functions': {\n        'process_commands': run_commands #This code defines a function called `run_commands` that takes a list of commands as an argument and returns the same list. The purpose of this function is to execute the commands in the list and return the results.\n    },\n}\n\nCOMMAND_TO_RUN = {\n    'definitions': [\n        {\n            'name': 'command_to_run',\n            'description': 'Command that starts the app.',\n            'parameters': command_definition(\"Command that starts the app. If app can't be started for some reason, return command as empty string ''.\"), #This code defines a command object that contains information about a command to be executed, including the command itself, a timeout, and optional success message and command ID.\n        },\n    ],\n    'functions': {\n        'process_commands': run_commands #This code defines a function called `run_commands` that takes a list of commands as an argument and returns the same list. The purpose of this function is to execute the commands in the list and return the results.\n    },\n}\n\nDEV_TASKS_BREAKDOWN = {\n    'definitions': [\n        {\n            'name': 'break_down_development_task',\n            'description': 'Breaks down the development task into smaller steps that need to be done to implement the entire task.',\n            'parameters': {\n                'type': 'object',\n                \"properties\": {\n                    \"tasks\": {\n                        'type': 'array',\n                        'description': 'List of smaller development steps that need to be done to complete the entire task.',\n                        'items': {\n                            'type': 'object',\n                            'description': 'A smaller development step that needs to be done to complete the entire task.  Remember, if you need to run a command that doesn\\'t finish by itself (eg. a command to run an app), put the timeout to 3000 milliseconds. If you need to create a directory that doesn\\'t exist and is not the root project directory, always create it by running a command `mkdir`',\n                            'properties': {\n                                'type': {\n                                    'type': 'string',\n                                    'enum': ['command', 'code_change', 'human_intervention'],\n                                    'description': 'Type of the development step that needs to be done to complete the entire task.',\n                                },\n                                'command': command_definition('A single command that needs to be executed.', 'Timeout in milliseconds that represent the approximate time the command takes to finish. This should be used only if the task is of a type \"command\". If you need to run a command that doesn\\'t finish by itself (eg. a command to run an app), put the timeout to 3000 milliseconds. Remember, this is not in seconds but in milliseconds so likely it always needs to be greater than 1000.'), #This code defines a command object that contains information about a command to be executed, including the command itself, a timeout, and optional success message and command ID.\n                                'code_change_description': {\n                                    'type': 'string',\n                                    'description': 'Description of a the development step that needs to be done. This should be used only if the task is of a type \"code_change\" and it should thoroughly describe what needs to be done to implement the code change for a single file - it cannot include changes for multiple files.',\n                                },\n                                'human_intervention_description': {\n                                    'type': 'string',\n                                    'description': 'Description of a task that requires a human to do.',\n                                },\n                            },\n                            'required': ['type'],\n                        }\n                    }\n                },\n                \"required\": ['tasks'],\n            },\n        },\n    ],\n    'functions': {\n        'break_down_development_task': lambda tasks: tasks\n    },\n}\n\nIMPLEMENT_TASK = {\n    'definitions': [\n        {\n            'name': 'parse_development_task',\n            'description': 'Breaks down the development task into smaller steps that need to be done to implement the entire task.',\n            'parameters': {\n                'type': 'object',\n                \"properties\": {\n                    \"tasks\": {\n                        'type': 'array',\n                        'description': 'List of smaller development steps that need to be done to complete the entire task.',\n                        'items': {\n                            'type': 'object',\n                            'description': 'A smaller development step that needs to be done to complete the entire task.  Remember, if you need to run a command that doesn\\'t finish by itself (eg. a command to run an  If you need to create a directory that doesn\\'t exist and is not the root project directory, always create it by running a command `mkdir`',\n                            'properties': {\n                                'type': {\n                                    'type': 'string',\n                                    'enum': ['command', 'code_change', 'human_intervention'],\n                                    'description': 'Type of the development step that needs to be done to complete the entire task.',\n                                },\n                                'command': command_definition(), #This code defines a command object that contains information about a command to be executed, including the command itself, a timeout, and optional success message and command ID.\n                                'code_change': {\n                                    'type': 'object',\n                                    'description': 'A code change that needs to be implemented. This should be used only if the task is of a type \"code_change\".',\n                                    'properties': {\n                                        'name': {\n                                            'type': 'string',\n                                            'description': 'Name of the file that needs to be implemented.',\n                                        },\n                                        'path': {\n                                            'type': 'string',\n                                            'description': 'Full path of the file with the file name that needs to be implemented.',\n                                        },\n                                        'content': {\n                                            'type': 'string',\n                                            'description': 'Full content of the file that needs to be implemented. **IMPORTANT**When you want to add a comment that tells the user to add the previous implementation at that place, make sure that the comment starts with `[OLD CODE]` and add a description of what old code should be inserted here. For example, `[OLD CODE] Login route`.',\n                                        },\n                                    },\n                                    'required': ['name', 'path', 'content'],\n                                },\n                                'human_intervention_description': {\n                                    'type': 'string',\n                                    'description': 'Description of a step in debugging this issue when there is a human intervention needed. This should be used only if the task is of a type \"human_intervention\".',\n                                },\n                            },\n                            'required': ['type'],\n                        }\n                    }\n                },\n                \"required\": ['tasks'],\n            },\n        },\n    ],\n    'functions': {\n        'parse_development_task': lambda tasks: tasks\n    },\n}\n\nDEV_STEPS = {\n    'definitions': [\n        {\n            'name': 'break_down_development_task',\n            'description': 'Breaks down the development task into smaller steps that need to be done to implement the entire task.',\n            'parameters': {\n                'type': 'object',\n                \"properties\": {\n                    \"tasks\": {\n                        'type': 'array',\n                        'description': 'List of development steps that need to be done to complete the entire task.',\n                        'items': {\n                            'type': 'object',\n                            'description': 'Development step that needs to be done to complete the entire task.',\n                            'properties': {\n                                'type': {\n                                    'type': 'string',\n                                    'description': 'Type of the development step that needs to be done to complete the entire task - it can be \"command\" or \"code_change\".',\n                                },\n                                'description': {\n                                    'type': 'string',\n                                    'description': 'Description of the development step that needs to be done.',\n                                },\n                            },\n                            'required': ['type', 'description'],\n                        }\n                    }\n                },\n                \"required\": ['tasks'],\n            },\n        },\n        {\n            'name': 'run_commands',\n            'description': 'Run all commands in the given list. Each command needs to be a single command that can be executed.',\n            'parameters': {\n                'type': 'object',\n                \"properties\": {\n                    \"commands\": {\n                        'type': 'array',\n                        'description': 'List of commands that need to be run to complete the currrent task. Each command cannot be anything other than a single CLI command that can be independetly run.',\n                        'items': {\n                            'type': 'string',\n                            'description': 'A single command that needs to be run to complete the current task.',\n                        }\n                    }\n                },\n                \"required\": ['commands'],\n            },\n        },\n        {\n            'name': 'process_code_changes',\n            'description': 'Implements all the code changes outlined in the description.',\n            'parameters': {\n                'type': 'object',\n                \"properties\": {\n                    \"code_change_description\": {\n                        'type': 'string',\n                        'description': 'A detailed description of what needs to be done to implement all the code changes from the task.',\n                    }\n                },\n                \"required\": ['code_change_description'],\n            },\n        },\n        {\n            'name': 'get_files',\n            'description': 'Returns development files that are currently implemented so that they can be analized and so that changes can be appropriatelly made.',\n            'parameters': {\n                'type': 'object',\n                'properties': {\n                    'files': {\n                        'type': 'array',\n                        'description': 'List of files that need to be analyzed to implement the required changes.',\n                        'items': {\n                            'type': 'string',\n                            'description': 'A single file name that needs to be analized to implement the reqired changes. Remember, this is a file name with path relative to the project root. For example, if a file path is `{{project_root}}/models/model.py`, this value needs to be `models/model.py`.',\n                        }\n                    }\n                },\n                'required': ['files'],\n            },\n        }\n    ],\n    'functions': {\n        'break_down_development_task': lambda tasks: (tasks, 'more_tasks'),\n        'run_commands': lambda commands: (commands, 'run_commands'),\n        'process_code_changes': lambda code_change_description: (code_change_description, 'code_changes'),\n        'get_files': return_files #This code defines a function called `return_files` that takes a list of files as an argument and returns the same list. The function does not perform any actual file operations, but rather serves as a placeholder for future development.\n    },\n}\n\nCODE_CHANGES = {\n    'definitions': [\n        {\n            'name': 'break_down_development_task',\n            'description': 'Implements all the smaller tasks that need to be done to complete the entire development task.',\n            'parameters': {\n                'type': 'object',\n                \"properties\": {\n                    \"tasks\": {\n                        'type': 'array',\n                        'description': 'List of smaller development steps that need to be done to complete the entire task.',\n                        'items': {\n                            'type': 'object',\n                            'description': 'A smaller development step that needs to be done to complete the entire task.  Remember, if you need to run a command that doesn\\'t finish by itself (eg. a command to run an app), put the timeout to 3000 milliseconds. If you need to create a directory that doesn\\'t exist and is not the root project directory, always create it by running a command `mkdir`',\n                            'properties': {\n                                'type': {\n                                    'type': 'string',\n                                    'enum': ['command', 'code_change'],\n                                    'description': 'Type of the development step that needs to be done to complete the entire task.',\n                                },\n                                'command': command_definition('Command that needs to be run to complete the current task. This should be used only if the task is of a type \"command\".', 'Timeout in milliseconds that represent the approximate time the command takes to finish. This should be used only if the task is of a type \"command\". If you need to run a command that doesn\\'t finish by itself (eg. a command to run an app), put the timeout to 3000 milliseconds. Remember, this is not in seconds but in milliseconds so likely it always needs to be greater than 1000.'), #This code defines a command object that contains information about a command to be executed, including the command itself, a timeout, and optional success message and command ID.\n                                'code_change_description': {\n                                    'type': 'string',\n                                    'description': 'Description of a the development step that needs to be done. This should be used only if the task is of a type \"code_change\" and it should thoroughly describe what needs to be done to implement the code change.',\n                                },\n                            },\n                            'required': ['type'],\n                        }\n                    }\n                },\n                \"required\": ['tasks'],\n            },\n        }\n    ],\n    'functions': {\n        'break_down_development_task': lambda tasks: tasks,\n    },\n}\n\nDEVELOPMENT_PLAN = {\n    'definitions': [{\n        'name': 'implement_development_plan',\n        'description': 'Implements the development plan.',\n        'parameters': {\n            'type': 'object',\n            \"properties\": {\n                \"plan\": {\n                    \"type\": \"array\",\n                    \"description\": 'List of development tasks that need to be done to implement the entire plan.',\n                    \"items\": {\n                        \"type\": \"object\",\n                        'description': 'Development task that needs to be done to implement the entire plan.',\n                        'properties': {\n                            'description': {\n                                'type': 'string',\n                                'description': 'Description of the development task that needs to be done to implement the entire plan.',\n                            },\n                            'programmatic_goal': {\n                                'type': 'string',\n                                'description': 'Detailed description of programmatic goal. Programmatic goal that will determine if a task can be marked as done from a programmatic perspective (this will result in an automated test that is run before the task is sent to you for a review). All details previously specified by user that are important for this task must be included in this programmatic goal.',\n                            },\n                            'user_review_goal': {\n                                'type': 'string',\n                                'description': 'User review goal that will determine if a task is done or not, but from a user perspective since it will be reviewed by a human.',\n                            }\n                        },\n                        'required': ['description', 'programmatic_goal', 'user_review_goal'],\n                    },\n                },\n            },\n            \"required\": ['plan'],\n        },\n    }],\n    'functions': {\n        'implement_development_plan': lambda plan: plan\n    },\n}\n\nEXECUTE_COMMANDS = {\n    'definitions': [{\n        'name': 'execute_commands',\n        'description': 'Executes a list of commands. ',\n        'parameters': {\n            'type': 'object',\n            'properties': {\n                'commands': {\n                    'type': 'array',\n                    'description': 'List of commands that need to be executed.  Remember, if you need to run a command that doesn\\'t finish by itself (eg. a command to run an app), put the timeout to 3000 milliseconds. If you need to create a directory that doesn\\'t exist and is not the root project directory, always create it by running a command `mkdir`',\n                    'items': command_definition('A single command that needs to be executed.', #This code defines a command object that contains information about a command to be executed, including the command itself, a timeout, and optional success message and command ID.\n                                                'Timeout in milliseconds that represent the approximate time this command takes to finish. If you need to run a command that doesn\\'t finish by itself (eg. a command to run an app), put the timeout to 3000 milliseconds.')\n                }\n            },\n            'required': ['commands'],\n        },\n    }],\n    'functions': {\n        'execute_commands': lambda commands: commands\n    }\n}\n\nGET_FILES = {\n    'definitions': [{\n        'name': 'get_files',\n        'description': 'Returns development files that are currently implemented so that they can be analized and so that changes can be appropriatelly made.',\n        'parameters': {\n            'type': 'object',\n            'properties': {\n                'files': {\n                    'type': 'array',\n                    'description': 'List of files that need to be analized to implement the reqired changes. Any file name in this array MUST be from the directory tree listed in the previous message.',\n                    'items': {\n                        'type': 'string',\n                        'description': 'A single file name that needs to be analized to implement the reqired changes. Remember, this is a file name with path relative to the project root. For example, if a file path is `{{project_root}}/models/model.py`, this value needs to be `models/model.py`. This file name MUST be listed in the directory from the previous message.',\n                    }\n                }\n            },\n            'required': ['files'],\n        },\n    }],\n    'functions': {\n        'get_files': lambda files: files\n    }\n}\n\nIMPLEMENT_CHANGES = {\n    'definitions': [{\n        'name': 'save_files',\n        'description': 'Iterates over the files passed to this function and saves them on the disk.',\n        'parameters': {\n            'type': 'object',\n            'properties': {\n                'files': {\n                    'type': 'array',\n                    'description': 'List of files that need to be saved.',\n                    'items': {\n                        'type': 'object',\n                        'properties': {\n                            'name': {\n                                'type': 'string',\n                                'description': 'Name of the file that needs to be saved on the disk.',\n                            },\n                            'path': {\n                                'type': 'string',\n                                'description': 'Full path of the file with the file name that needs to be saved.',\n                            },\n                            'content': {\n                                'type': 'string',\n                                'description': 'Full content of the file that needs to be saved on the disk. **IMPORTANT**When you want to add a comment that tells the user to add the previous implementation at that place, make sure that the comment starts with `[OLD CODE]` and add a description of what old code should be inserted here. For example, `[OLD CODE] Login route`.',\n                            },\n                            'description': {\n                                'type': 'string',\n                                'description': 'Description of the file that needs to be saved on the disk. This description doesn\\'t need to explain what is being done currently in this task but rather what is the idea behind this file - what do we want to put in this file in the future. Write the description ONLY if this is the first time this file is being saved. If this file already exists on the disk, leave this field empty.',\n                            },\n                        },\n                        'required': ['name', 'path', 'content'],\n                    }\n                }\n            },\n            'required': ['files'],\n        },\n    }],\n    'functions': {\n        'save_files': lambda files: files\n    },\n    'to_message': lambda files: [\n        f'File `{file[\"name\"]}` saved to the disk and currently looks like this:\\n```\\n{file[\"content\"]}\\n```' for file\n        in files]\n}\n\nGET_TEST_TYPE = {\n    'definitions': [{\n        'name': 'test_changes',\n        'description': 'Tests the changes based on the test type.',\n        'parameters': {\n            'type': 'object',\n            'properties': {\n                'type': {\n                    'type': 'string',\n                    'description': 'Type of a test that needs to be run. If this is just an intermediate step in getting a task done, put `no_test` as the type and we\\'ll just go onto the next task without testing.',\n                    'enum': ['command_test', 'manual_test', 'no_test']\n                },\n                'command': command_definition('Command that needs to be run to test the changes.', 'Timeout in milliseconds that represent the approximate time this command takes to finish. If you need to run a command that doesn\\'t finish by itself (eg. a command to run an app), put the timeout to 3000 milliseconds. If you need to create a directory that doesn\\'t exist and is not the root project directory, always create it by running a command `mkdir`'), #This code defines a command object that contains information about a command to be executed, including the command itself, a timeout, and optional success message and command ID.\n                # 'automated_test_description': {\n                #     'type': 'string',\n                #     'description': 'Description of an automated test that needs to be run to test the changes. This should be used only if the test type is \"automated_test\" and it should thoroughly describe what needs to be done to implement the automated test so that when someone looks at this test can know exactly what needs to be done to implement this automated test.',\n                # },\n                'manual_test_description': {\n                    'type': 'string',\n                    'description': 'Description of a manual test that needs to be run to test the changes. This should be used only if the test type is \"manual_test\".',\n                }\n            },\n            'required': ['type'],\n        },\n    }],\n    'functions': {\n        'test_changes': lambda type, command=None, automated_test_description=None, manual_test_description=None: (\n            type, command, automated_test_description, manual_test_description)\n    }\n}\n\nDEBUG_STEPS_BREAKDOWN = {\n    'definitions': [\n        {\n            'name': 'start_debugging',\n            'description': 'Starts the debugging process based on the list of steps that need to be done to debug the problem.',\n            'parameters': {\n                'type': 'object',\n                'properties': {\n                    'thoughts': {\n                        'type': 'string',\n                        'description': 'Thoughts that you have about the problem that you are trying to debug.'\n                    },\n                    'reasoning': {\n                        'type': 'string',\n                    },\n                    'steps': {\n                        'type': 'array',\n                        'description': 'List of steps that need to be done to debug the problem.',\n                        'items': {\n                            'type': 'object',\n                            'description': 'A single step that needs to be done to get closer to debugging this issue.  Remember, if you need to run a command that doesn\\'t finish by itself (eg. a command to run an app), put the timeout to 3000 milliseconds. If you need to create a directory that doesn\\'t exist and is not the root project directory, always create it by running a command `mkdir`',\n                            'properties': {\n                                'type': {\n                                    'type': 'string',\n                                    'enum': ['command', 'code_change', 'human_intervention'],\n                                    'description': 'Type of the step that needs to be done to debug this issue.',\n                                },\n                                'command': command_definition('Command that needs to be run to debug this issue.', 'Timeout in milliseconds that represent the approximate time this command takes to finish. If you need to run a command that doesn\\'t finish by itself (eg. a command to run an app), put the timeout to 3000 milliseconds.'), #This code defines a command object that contains information about a command to be executed, including the command itself, a timeout, and optional success message and command ID.\n                                'code_change_description': {\n                                    'type': 'string',\n                                    'description': 'Description of a step in debugging this issue when there are code changes required. This should be used only if the task is of a type \"code_change\" and it should thoroughly describe what needs to be done to implement the code change for a single file - it cannot include changes for multiple files.',\n                                },\n                                'human_intervention_description': {\n                                    'type': 'string',\n                                    'description': 'Description of a step in debugging this issue when there is a human intervention needed. This should be used only if the task is of a type \"human_intervention\".',\n                                },\n                                \"need_to_see_output\": {\n                                    'type': 'boolean',\n                                    'description': 'Set to `true` if the definition of subsequent steps may need to change after you see the output of a successful execution of this step. '\n                                                   'For example, if the purpose of a command is to check the status of a service or contents of a file before deciding how to proceed then this flag should be set to `true`. '\n                                                   'If subsequent steps can be executed as long as this step is successful, then this flag does not need to be set.',\n                                },\n                                \"check_if_fixed\": {\n                                    'type': 'boolean',\n                                    'description': 'Flag that indicates if the original command that triggered the error that\\'s being debugged should be tried after this step to check if the error is fixed. If you think that the original command `delete node_modules/ && delete package-lock.json` will pass after this step, then this flag should be set to TRUE and if you think that the original command will still fail after this step, then this flag should be set to `false`.',\n                                }\n                            },\n                            'required': ['type', 'check_if_fixed'],\n                        }\n                    }\n                },\n                \"required\": ['thoughts', 'reasoning', 'steps'],\n            },\n        },\n    ],\n    'functions': {\n        'start_debugging': lambda steps: steps\n    },\n}\n\nGET_MISSING_SNIPPETS = {\n    'definitions': [{\n        'name': 'get_missing_snippets',\n        'description': 'Gets the list of snippets that are missing from the code.',\n        'parameters': {\n            'type': 'object',\n            'properties': {\n                'snippets': {\n                    'type': 'array',\n                    'description': 'List of snippets that are missing from the code.',\n                    'items': {\n                        'type': 'object',\n                        'properties': {\n                            'comment_label': {\n                                'type': 'string',\n                                'description': 'Comment label that identifies the snippet that needs to be inserted.',\n                            },\n                            'snippet': {\n                                'type': 'string',\n                                'description': 'The code from earlier in this conversation that needs to be inserted instead of the comment. **IMPORTANT** You always need to write the entire snippet, and under no circumstances should you ever leave any part of the code snippet unwritten. **IMPORTANT** Every single line of code that exists in the place where the comment lives right now should be replaced. **IMPORTANT** Do not include any code that is above or below the comment but only the code that should be in the position of the comment. **IMPORTANT** Make sure that you write the entire snippet that should be inserted in the place of the comment_label, including all control structures, error handling, and any other relevant logic that was in the original code.',\n                            },\n                            'file_path': {\n                                'type': 'string',\n                                'description': 'Path to the file where the snippet needs to be inserted.',\n                            }\n                        },\n                        'required': ['comment_label', 'snippet', 'file_path'],\n                    }\n                }\n            },\n            'required': ['snippets'],\n        },\n    }],\n}\n\nGET_FULLY_CODED_FILE = {\n    'definitions': [{\n        'name': 'get_fully_coded_file',\n        'description': 'Gets the fully coded file.',\n        'parameters': {\n            'type': 'object',\n            'properties': {\n                'file_content': {\n                    'type': 'string',\n                    'description': 'Fully coded file. This contains only the lines of code and no other text.',\n                }\n            },\n            'required': ['file_content'],\n        },\n    }],\n    'functions': {\n        'get_fully_coded_file': lambda file: file\n    },\n}\n\n\nGET_DOCUMENTATION_FILE = {\n    'definitions': [{\n        'name': 'get_documentation_file',\n        'description': 'Gets the full content of requested documentation file.',\n        'parameters': {\n            'type': 'object',\n            'properties': {\n                'name': {\n                    'type': 'string',\n                    'description': 'Name of the documentation file that needs to be saved on the disk.',\n                },\n                'path': {\n                    'type': 'string',\n                    'description': 'Relative path of the documentation file with the file name that needs to be saved.',\n                },\n                'content': {\n                    'type': 'string',\n                    'description': 'Full content of the documentation file that needs to be saved on the disk. **IMPORTANT**When you want to add a comment that tells the user to add the previous implementation at that place, make sure that the comment starts with `[OLD CODE]` and add a description of what old code should be inserted here. For example, `[OLD CODE] Login route`.',\n                },\n            },\n            'required': ['name', 'path', 'content'],\n        },\n    }],\n}","documentation":"The code is a collection of functions and definitions that are used to implement various tasks in a development process. It includes functions for processing user stories, tasks, technologies, commands, and files, as well as definitions for breaking down development tasks into smaller steps and implementing code changes."}},{"key":"scip-python python temp indexer `pilot.const.ipc`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.const.ipc`/__init__:","range":[0,0,22,1],"content":"MESSAGE_TYPE = {\n    'verbose': 'verbose',\n    'stream': 'stream',\n    'user_input_request': 'user_input_request',   # Displayed above the\n    'hint': 'hint',                        # Hint text, eg \"Do you want to add anything else? If not, just press ENTER.\"\n    'info': 'info',                        # JSON data can be sent to progress `progress_stage`\n    'local': 'local',\n    'run_command': 'run_command',          # Command to run server needed for extension only\n    'project_folder_name': 'project_folder_name',  # Project folder name for extension only\n    'button': 'button',                    # Button text for extension only\n    'exit': 'exit',                        # Exit message to let extension know we are done\n    'ipc': 'ipc',                          # Regular print message that is for extension only\n    'openFile': 'openFile',                # Open a file in extension\n}\n\nLOCAL_IGNORE_MESSAGE_TYPES = [\n    'info',\n    'project_folder_name',\n    'button',\n    'exit',\n    'ipc',\n    'openFile',\n]","file":"/pilot/const/ipc.py","language":"python","fileHash":"090027217f62004006a2fe1607021c04dec2551b904a126ad271939864c4cd0d","hash":"090027217f62004006a2fe1607021c04dec2551b904a126ad271939864c4cd0d","processedContent":"MESSAGE_TYPE = {\n    'verbose': 'verbose',\n    'stream': 'stream',\n    'user_input_request': 'user_input_request',   # Displayed above the\n    'hint': 'hint',                        # Hint text, eg \"Do you want to add anything else? If not, just press ENTER.\"\n    'info': 'info',                        # JSON data can be sent to progress `progress_stage`\n    'local': 'local',\n    'run_command': 'run_command',          # Command to run server needed for extension only\n    'project_folder_name': 'project_folder_name',  # Project folder name for extension only\n    'button': 'button',                    # Button text for extension only\n    'exit': 'exit',                        # Exit message to let extension know we are done\n    'ipc': 'ipc',                          # Regular print message that is for extension only\n    'openFile': 'openFile',                # Open a file in extension\n}\n\nLOCAL_IGNORE_MESSAGE_TYPES = [\n    'info',\n    'project_folder_name',\n    'button',\n    'exit',\n    'ipc',\n    'openFile',\n]","documentation":"This code defines a dictionary called `MESSAGE_TYPE` that contains various types of messages that can be sent between the server and the extension. The dictionary also defines a list of message types that should be ignored when running the extension locally."}},{"key":"scip-python python temp indexer `pilot.const.llm`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.const.llm`/__init__:","range":[0,0,4,33],"content":"import os\nMAX_GPT_MODEL_TOKENS = int(os.getenv('MAX_TOKENS', 8192))\nMIN_TOKENS_FOR_GPT_RESPONSE = 600\nMAX_QUESTIONS = 5\nEND_RESPONSE = \"EVERYTHING_CLEAR\"","file":"/pilot/const/llm.py","language":"python","fileHash":"6d573bba343ee634ce458b5bc69a11c1631b35bb0aa9ca01eb6ccf047f72a6ac","hash":"6d573bba343ee634ce458b5bc69a11c1631b35bb0aa9ca01eb6ccf047f72a6ac","processedContent":"import os #undefined\nMAX_GPT_MODEL_TOKENS = int(os.getenv('MAX_TOKENS', 8192))\n\"\"\"\nscip-python python python-stdlib 3.11 os/__init__:: undefined\nscip-python python python-stdlib 3.11 os/getenv().: undefined\n\"\"\"\nMIN_TOKENS_FOR_GPT_RESPONSE = 600\nMAX_QUESTIONS = 5\nEND_RESPONSE = \"EVERYTHING_CLEAR\"","documentation":"This code defines constants for the maximum number of tokens allowed in a GPT model and the minimum number of tokens required for a response. It also sets the maximum number of questions that can be asked and the response when the conversation is complete."}},{"key":"scip-python python python-stdlib 3.11 os/getenv().","attributes":{"symbol":"scip-python python python-stdlib 3.11 os/getenv().","language":"python"}},{"key":"scip-python python temp indexer `pilot.const.messages`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.const.messages`/__init__:","range":[0,0,3,38],"content":"CHECK_AND_CONTINUE = 'If something is wrong, tell me or type \"continue\" to continue.'\nWHEN_USER_DONE = 'Once you\\'re done, type \"continue\"'\nAFFIRMATIVE_ANSWERS = ['', 'y', 'yes', 'ok', 'okay', 'sure']\nNEGATIVE_ANSWERS = ['n', 'no', 'skip']","file":"/pilot/const/messages.py","language":"python","fileHash":"e488b4fa76a60e608081312c9c66824bd4d4432fcf14c8c2c426e072541fb22c","hash":"e488b4fa76a60e608081312c9c66824bd4d4432fcf14c8c2c426e072541fb22c","processedContent":"CHECK_AND_CONTINUE = 'If something is wrong, tell me or type \"continue\" to continue.'\nWHEN_USER_DONE = 'Once you\\'re done, type \"continue\"'\nAFFIRMATIVE_ANSWERS = ['', 'y', 'yes', 'ok', 'okay', 'sure']\nNEGATIVE_ANSWERS = ['n', 'no', 'skip']","documentation":"This code defines a set of constants that are used to control the flow of a program. The first constant, `CHECK_AND_CONTINUE`, is a message that is displayed when something goes wrong and the user needs to be prompted to continue. The second constant, `WHEN_USER_DONE`, is a message that is displayed when the user is finished with a task and needs to be prompted to continue. The third and fourth constants, `AFFIRMATIVE_ANSWERS` and `NEGATIVE_ANSWERS`, define sets of strings that are used to determine whether a user's response indicates affirmative or negative sentiment."}},{"key":"scip-python python temp indexer `pilot.database`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.database`/__init__:","range":[0,0,1,0],"content":"from .database import database_exists, create_database, save_app\r\n","file":"/pilot/database/__init__.py","language":"python","fileHash":"6f6f95f1ee112a5cad1242d170f9fb72b20fed9f57a13523a88e9ad69be231c9","hash":"6f6f95f1ee112a5cad1242d170f9fb72b20fed9f57a13523a88e9ad69be231c9","processedContent":"from .database import database_exists, create_database, save_app\r\n\"\"\"\nscip-python python temp indexer `pilot.database.database`/__init__:: The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.database.database`/database_exists().: This code checks if a database connection can be established. If it can, it returns True, indicating that the database exists. If not, it returns False, indicating that the database does not exist.\nscip-python python temp indexer `pilot.database.database`/create_database().: This code creates a new database in PostgreSQL if the database type is \"postgres\".\nscip-python python temp indexer `pilot.database.database`/save_app().: This code defines a function called `save_app` that saves an app entity to a database. It retrieves the app entity based on its ID, and then updates its fields with the values provided in the `args` dictionary. If the app entity does not exist, it creates a new one.\n\"\"\"\n","documentation":"The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt."}},{"key":"scip-python python temp indexer `pilot.database.database`/save_app().","attributes":{"symbol":"scip-python python temp indexer `pilot.database.database`/save_app().","language":"python","range":[109,0,142,14],"content":"def save_app(project):\n    args = project.args\n    app_status = getattr(project, \"current_step\", None)\n\n    try:\n        app = project.app\n        if app is None:\n            app = App.get(App.id == args['app_id'])\n        for key, value in args.items():\n            if key != 'app_id' and value is not None:\n                setattr(app, key, value)\n\n        app.status = app_status\n        app.save()\n    except DoesNotExist:\n        if args.get('user_id') is not None:\n            try:\n                user = get_user(user_id=args['user_id'])\n            except ValueError:\n                user = save_user(args['user_id'], args['email'], args['password'])\n                args['user_id'] = user.id\n                args['email'] = user.email\n        else:\n            user = None\n\n        app = App.create(\n            id=args['app_id'],\n            user=user,\n            app_type=args.get('app_type'),\n            name=args.get('name'),\n            status=app_status\n        )\n\n    return app","file":"/pilot/database/database.py","fileHash":"7a2937cca61d82ac90b45d666e171cf8718df858e5a2768ff637119946d81787","hash":"a2a1329043c5e9823cd6e7bfdce31aab49c1d1013359c76298f563ea1ce4165e","processedContent":"def save_app(project):\n    args = project.args\n    app_status = getattr(project, \"current_step\", None)\n\n    try:\n        app = project.app\n        if app is None:\n            app = App.get(App.id == args['app_id'])\n            \"\"\"\n            scip-python python temp indexer `pilot.database.models.app`/App#: This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n            scip-python python temp indexer `pilot.database.models.app`/App#: This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n            scip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#id.: undefined\n            \"\"\"\n        for key, value in args.items():\n            if key != 'app_id' and value is not None:\n                setattr(app, key, value)\n\n        app.status = app_status\n        app.save()\n    except DoesNotExist:\n        if args.get('user_id') is not None:\n            try:\n                user = get_user(user_id=args['user_id']) #This code defines a function called `get_user` that retrieves a user from a database based on either a user ID or an email address. It checks for the presence of either parameter and raises an error if neither is provided. If both are provided, it uses the `or_` operator to create a query that retrieves the user based on either the ID or email.\n            except ValueError:\n                user = save_user(args['user_id'], args['email'], args['password']) #This code defines a function called `save_user` that takes in three parameters: `user_id`, `email`, and `password`. The function first tries to retrieve a user with the given `user_id` from the database. If the user is not found, it then tries to retrieve a user with the given `email` address. If no user is found with that email, a new user is created with the given `user_id`, `email`, and `password`.\n                args['user_id'] = user.id\n                args['email'] = user.email\n        else:\n            user = None\n\n        app = App.create( #This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n            id=args['app_id'],\n            user=user,\n            app_type=args.get('app_type'),\n            name=args.get('name'),\n            status=app_status\n        )\n\n    return app","documentation":"This code defines a function called `save_app` that saves an app entity to a database. It retrieves the app entity based on its ID, and then updates its fields with the values provided in the `args` dictionary. If the app entity does not exist, it creates a new one."}},{"key":"scip-python python temp indexer `pilot.database.config`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.database.config`/__init__:","range":[0,0,8,0],"content":"import os\n\nDATABASE_TYPE = os.getenv(\"DATABASE_TYPE\", \"sqlite\")\nDB_NAME = os.getenv(\"DB_NAME\")\nDB_HOST = os.getenv(\"DB_HOST\")\nDB_PORT = os.getenv(\"DB_PORT\")\nDB_USER = os.getenv(\"DB_USER\")\nDB_PASSWORD = os.getenv(\"DB_PASSWORD\")\n","file":"/pilot/database/config.py","language":"python","fileHash":"a627ec43289fb0a236cbacee537dbe45b99500bfd499bf7a383c783d167c36a2","hash":"a627ec43289fb0a236cbacee537dbe45b99500bfd499bf7a383c783d167c36a2","processedContent":"import os #undefined\n\nDATABASE_TYPE = os.getenv(\"DATABASE_TYPE\", \"sqlite\")\n\"\"\"\nscip-python python python-stdlib 3.11 os/__init__:: undefined\nscip-python python python-stdlib 3.11 os/getenv().: undefined\n\"\"\"\nDB_NAME = os.getenv(\"DB_NAME\")\n\"\"\"\nscip-python python python-stdlib 3.11 os/__init__:: undefined\nscip-python python python-stdlib 3.11 os/getenv().: undefined\n\"\"\"\nDB_HOST = os.getenv(\"DB_HOST\")\n\"\"\"\nscip-python python python-stdlib 3.11 os/__init__:: undefined\nscip-python python python-stdlib 3.11 os/getenv().: undefined\n\"\"\"\nDB_PORT = os.getenv(\"DB_PORT\")\n\"\"\"\nscip-python python python-stdlib 3.11 os/__init__:: undefined\nscip-python python python-stdlib 3.11 os/getenv().: undefined\n\"\"\"\nDB_USER = os.getenv(\"DB_USER\")\n\"\"\"\nscip-python python python-stdlib 3.11 os/__init__:: undefined\nscip-python python python-stdlib 3.11 os/getenv().: undefined\n\"\"\"\nDB_PASSWORD = os.getenv(\"DB_PASSWORD\")\n\"\"\"\nscip-python python python-stdlib 3.11 os/__init__:: undefined\nscip-python python python-stdlib 3.11 os/getenv().: undefined\n\"\"\"\n","documentation":"The code defines environment variables for a database connection, using the `os.getenv()` function to retrieve the values from the operating system environment."}},{"key":"scip-python python temp indexer `pilot.database.database`/get_created_apps().","attributes":{"range":[50,0,51,118],"symbol":"scip-python python temp indexer `pilot.database.database`/get_created_apps().","content":"def get_created_apps():\n    return [model_to_dict(app) for app in App.select().where((App.name.is_null(False)) & (App.status.is_null(False)))]","file":"/pilot/database/database.py","language":"python","fileHash":"7a2937cca61d82ac90b45d666e171cf8718df858e5a2768ff637119946d81787","hash":"7af916840c9c407b0ae71f59f95affe409de3e452dab9dd175b3784155b729dc","processedContent":"def get_created_apps():\n    return [model_to_dict(app) for app in App.select().where((App.name.is_null(False)) & (App.status.is_null(False)))]","documentation":"This code retrieves a list of apps that have a name and status, using the SQLAlchemy ORM to query the database."}},{"key":"scip-python python temp indexer `pilot.database.database`/get_all_app_development_steps().","attributes":{"range":[66,0,67,116],"symbol":"scip-python python temp indexer `pilot.database.database`/get_all_app_development_steps().","content":"def get_all_app_development_steps(app_id):\n    return [model_to_dict(dev_step) for dev_step in DevelopmentSteps.select().where(DevelopmentSteps.app == app_id)]","file":"/pilot/database/database.py","language":"python","fileHash":"7a2937cca61d82ac90b45d666e171cf8718df858e5a2768ff637119946d81787","hash":"ece80cd56b3dcbdb42e4f373d922eb1f99d0ad6fa9e444e52c15e798cdd956f2","processedContent":"def get_all_app_development_steps(app_id):\n    return [model_to_dict(dev_step) for dev_step in DevelopmentSteps.select().where(DevelopmentSteps.app == app_id)]","documentation":"This code retrieves all development steps for a specific app based on its ID."}},{"key":"scip-python python temp indexer `pilot.database.database`/save_user().","attributes":{"range":[70,0,79,74],"symbol":"scip-python python temp indexer `pilot.database.database`/save_user().","content":"def save_user(user_id, email, password):\n    try:\n        user = User.get(User.id == user_id)\n        return user\n    except DoesNotExist:\n        try:\n            existing_user = User.get(User.email == email)\n            return existing_user\n        except DoesNotExist:\n            return User.create(id=user_id, email=email, password=password)","file":"/pilot/database/database.py","language":"python","fileHash":"7a2937cca61d82ac90b45d666e171cf8718df858e5a2768ff637119946d81787","hash":"ebe580aa2ac8be49a99c7f6c3e7fc04636473fe9bdb5d8b2a4019c1ce5234c84","processedContent":"def save_user(user_id, email, password):\n    try:\n        user = User.get(User.id == user_id)\n        \"\"\"\n        scip-python python temp indexer `pilot.database.models.user`/User#: This code defines a base model class for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The Meta class sets the database to be used.\n        scip-python python temp indexer `pilot.database.models.user`/User#: This code defines a base model class for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The Meta class sets the database to be used.\n        scip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#id.: undefined\n        \"\"\"\n        return user\n    except DoesNotExist:\n        try:\n            existing_user = User.get(User.email == email)\n            \"\"\"\n            scip-python python temp indexer `pilot.database.models.user`/User#: This code defines a base model class for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The Meta class sets the database to be used.\n            scip-python python temp indexer `pilot.database.models.user`/User#: This code defines a base model class for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The Meta class sets the database to be used.\n            scip-python python temp indexer `pilot.database.models.user`/User#email.: undefined\n            \"\"\"\n            return existing_user\n        except DoesNotExist:\n            return User.create(id=user_id, email=email, password=password)","documentation":"This code defines a function called `save_user` that takes in three parameters: `user_id`, `email`, and `password`. The function first tries to retrieve a user with the given `user_id` from the database. If the user is not found, it then tries to retrieve a user with the given `email` address. If no user is found with that email, a new user is created with the given `user_id`, `email`, and `password`."}},{"key":"scip-python python temp indexer `pilot.database.database`/update_app_status().","attributes":{"range":[82,0,89,20],"symbol":"scip-python python temp indexer `pilot.database.database`/update_app_status().","content":"def update_app_status(app_id, new_status):\n    try:\n        app = App.get(App.id == app_id)\n        app.status = new_status\n        app.save()\n        return True\n    except DoesNotExist:\n        return False","file":"/pilot/database/database.py","language":"python","fileHash":"7a2937cca61d82ac90b45d666e171cf8718df858e5a2768ff637119946d81787","hash":"22ab7d2aacaa46ba3d10b9225ade95c1ca15252a2be8eb2f6046193307100d1e","processedContent":"def update_app_status(app_id, new_status):\n    try:\n        app = App.get(App.id == app_id)\n        \"\"\"\n        scip-python python temp indexer `pilot.database.models.app`/App#: This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n        scip-python python temp indexer `pilot.database.models.app`/App#: This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n        scip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#id.: undefined\n        \"\"\"\n        app.status = new_status\n        app.save()\n        return True\n    except DoesNotExist:\n        return False","documentation":"This code updates the status of an app in the database. It retrieves the app with the specified ID, sets its status to the new status provided, and saves the changes. If the app does not exist, it returns False."}},{"key":"scip-python python temp indexer `pilot.database.database`/get_user().","attributes":{"range":[92,0,106,67],"symbol":"scip-python python temp indexer `pilot.database.database`/get_user().","content":"def get_user(user_id=None, email=None):\n    if not user_id and not email:\n        raise ValueError(\"Either user_id or email must be provided\")\n\n    query = []\n    if user_id:\n        query.append(User.id == user_id)\n    if email:\n        query.append(User.email == email)\n\n    try:\n        user = User.get(reduce(operator.or_, query))\n        return user\n    except DoesNotExist:\n        raise ValueError(\"No user found with provided id or email\")","file":"/pilot/database/database.py","language":"python","fileHash":"7a2937cca61d82ac90b45d666e171cf8718df858e5a2768ff637119946d81787","hash":"cd07dc9fb844c4ce34c786cf0dcf41c2d652b42bdb89e65a8ed4c0395baa6108","processedContent":"def get_user(user_id=None, email=None):\n    if not user_id and not email:\n        raise ValueError(\"Either user_id or email must be provided\")\n\n    query = []\n    if user_id:\n        query.append(User.id == user_id)\n        \"\"\"\n        scip-python python temp indexer `pilot.database.models.user`/User#: This code defines a base model class for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The Meta class sets the database to be used.\n        scip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#id.: undefined\n        \"\"\"\n    if email:\n        query.append(User.email == email)\n        \"\"\"\n        scip-python python temp indexer `pilot.database.models.user`/User#: This code defines a base model class for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The Meta class sets the database to be used.\n        scip-python python temp indexer `pilot.database.models.user`/User#email.: undefined\n        \"\"\"\n\n    try:\n        user = User.get(reduce(operator.or_, query))\n        \"\"\"\n        scip-python python temp indexer `pilot.database.models.user`/User#: This code defines a base model class for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The Meta class sets the database to be used.\n        scip-python python python-stdlib 3.11 functools/reduce().: undefined\n        scip-python python python-stdlib 3.11 operator/__init__:: undefined\n        scip-python python python-stdlib 3.11 _operator/or_().: undefined\n        \"\"\"\n        return user\n    except DoesNotExist:\n        raise ValueError(\"No user found with provided id or email\")","documentation":"This code defines a function called `get_user` that retrieves a user from a database based on either a user ID or an email address. It checks for the presence of either parameter and raises an error if neither is provided. If both are provided, it uses the `or_` operator to create a query that retrieves the user based on either the ID or email."}},{"key":"scip-python python temp indexer `pilot.database.database`/save_user_app().","attributes":{"range":[145,0,153,19],"symbol":"scip-python python temp indexer `pilot.database.database`/save_user_app().","content":"def save_user_app(user_id, app_id, workspace):\n    try:\n        user_app = UserApps.get((UserApps.user == user_id) & (UserApps.app == app_id))\n        user_app.workspace = workspace\n        user_app.save()\n    except DoesNotExist:\n        user_app = UserApps.create(user=user_id, app=app_id, workspace=workspace)\n\n    return user_app","file":"/pilot/database/database.py","language":"python","fileHash":"7a2937cca61d82ac90b45d666e171cf8718df858e5a2768ff637119946d81787","hash":"d4e5c3af7e458e022cd09792dd4e8eb7d09eb7a98e7935af4ba259b6eee7beb6","processedContent":"def save_user_app(user_id, app_id, workspace):\n    try:\n        user_app = UserApps.get((UserApps.user == user_id) & (UserApps.app == app_id))\n        \"\"\"\n        scip-python python temp indexer `pilot.database.models.user_apps`/UserApps#: This code defines a base model class for an app entity that includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also defines a base model class for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The Meta class sets the database to be used.\n        scip-python python temp indexer `pilot.database.models.user_apps`/UserApps#: This code defines a base model class for an app entity that includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also defines a base model class for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The Meta class sets the database to be used.\n        scip-python python temp indexer `pilot.database.models.user_apps`/UserApps#: This code defines a base model class for an app entity that includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also defines a base model class for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The Meta class sets the database to be used.\n        scip-python python temp indexer `pilot.database.models.user_apps`/UserApps#user.: undefined\n        scip-python python temp indexer `pilot.database.models.user_apps`/UserApps#app.: undefined\n        \"\"\"\n        user_app.workspace = workspace\n        user_app.save()\n    except DoesNotExist:\n        user_app = UserApps.create(user=user_id, app=app_id, workspace=workspace) #This code defines a base model class for an app entity that includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also defines a base model class for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The Meta class sets the database to be used.\n\n    return user_app","documentation":"This code defines a function called `save_user_app` that takes three arguments: `user_id`, `app_id`, and `workspace`. It checks if a user-app relationship exists for the given user and app IDs, and if not, it creates one. If the relationship does exist, it updates the workspace field for the existing record."}},{"key":"scip-python python temp indexer `pilot.database.database`/save_progress().","attributes":{"range":[156,0,186,19],"symbol":"scip-python python temp indexer `pilot.database.database`/save_progress().","content":"def save_progress(app_id, step, data):\n    progress_table_map = {\n        'project_description': ProjectDescription,\n        'user_stories': UserStories,\n        'user_tasks': UserTasks,\n        'architecture': Architecture,\n        'development_planning': DevelopmentPlanning,\n        'environment_setup': EnvironmentSetup,\n        'development': Development,\n    }\n\n    data['step'] = step\n\n    ProgressTable = progress_table_map.get(step)\n    if not ProgressTable:\n        raise ValueError(f\"Invalid step: {step}\")\n\n    app = get_app(app_id)\n\n    # Use the get_or_create method, which attempts to retrieve a record\n    # or creates a new one if it does not exist.\n    progress, created = ProgressTable.get_or_create(app=app, defaults=data)\n\n    # If the record was not created, it already existed and we should update it\n    if not created:\n        for key, value in data.items():\n            setattr(progress, key, value)\n        progress.save()\n\n    update_app_status(app_id, step)\n    return progress","file":"/pilot/database/database.py","language":"python","fileHash":"7a2937cca61d82ac90b45d666e171cf8718df858e5a2768ff637119946d81787","hash":"68c17a439cb3073ddff1312717970aff2fbb05a3bc3d249a4f863eb1e2178cb7","processedContent":"def save_progress(app_id, step, data):\n    progress_table_map = {\n        'project_description': ProjectDescription, #This code defines a model class called ProgressStep in Django, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n        'user_stories': UserStories, #This code defines a model class called UserStories in Django, which includes fields for a user entity and custom JSON field for storing and retrieving JSON data in the database.\n        'user_tasks': UserTasks, #This code defines a model class called UserTasks in Django, which includes fields for a user entity and custom JSON field for storing and retrieving data in the database.\n        'architecture': Architecture, #This code defines a model class called ProgressStep in Django, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The code also defines custom field types in Django called JSONField, which allow for storing and retrieving JSON data in the database, and it uses the json.loads() method to convert the value to JSON format.\n        'development_planning': DevelopmentPlanning, #This code defines a model class called DevelopmentPlanning in Django, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The code also defines custom field types in Django called JSONField, which allow for storing and retrieving JSON data in the database, and it uses the json.loads() method to convert the value to JSON format.\n        'environment_setup': EnvironmentSetup, #This code defines a model class called ProgressStep in Django, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n        'development': Development, #This code defines a model class called ProgressStep in Django, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n    }\n\n    data['step'] = step\n\n    ProgressTable = progress_table_map.get(step)\n    if not ProgressTable:\n        raise ValueError(f\"Invalid step: {step}\")\n\n    app = get_app(app_id) #This code defines a function called `get_app` that retrieves an app entity from the database based on its ID. It also includes error handling to raise a ValueError if the app is not found.\n\n    # Use the get_or_create method, which attempts to retrieve a record\n    # or creates a new one if it does not exist.\n    progress, created = ProgressTable.get_or_create(app=app, defaults=data)\n\n    # If the record was not created, it already existed and we should update it\n    if not created:\n        for key, value in data.items():\n            setattr(progress, key, value)\n        progress.save()\n\n    update_app_status(app_id, step) #This code updates the status of an app in the database. It retrieves the app with the specified ID, sets its status to the new status provided, and saves the changes. If the app does not exist, it returns False.\n    return progress","documentation":"This code defines a function called `save_progress` that saves progress data for an app in a database. It retrieves the app entity from the database based on its ID, creates or updates a record in a table based on the step provided, and updates the status of the app in the database."}},{"key":"scip-python python temp indexer `pilot.database.database`/get_app().","attributes":{"range":[189,0,196,19],"symbol":"scip-python python temp indexer `pilot.database.database`/get_app().","content":"def get_app(app_id, error_if_not_found=True):\n    try:\n        app = App.get(App.id == app_id)\n        return app\n    except DoesNotExist:\n        if error_if_not_found:\n            raise ValueError(f\"No app with id: {app_id}\")\n        return None","file":"/pilot/database/database.py","language":"python","fileHash":"7a2937cca61d82ac90b45d666e171cf8718df858e5a2768ff637119946d81787","hash":"620d913e08ea42750f5ee9ff2cc5acc26c72cb9611ff5ab4471d7fff2c074d00","processedContent":"def get_app(app_id, error_if_not_found=True):\n    try:\n        app = App.get(App.id == app_id)\n        \"\"\"\n        scip-python python temp indexer `pilot.database.models.app`/App#: This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n        scip-python python temp indexer `pilot.database.models.app`/App#: This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n        scip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#id.: undefined\n        \"\"\"\n        return app\n    except DoesNotExist:\n        if error_if_not_found:\n            raise ValueError(f\"No app with id: {app_id}\")\n        return None","documentation":"This code defines a function called `get_app` that retrieves an app entity from the database based on its ID. It also includes error handling to raise a ValueError if the app is not found."}},{"key":"scip-python python temp indexer `pilot.database.database`/get_app_by_user_workspace().","attributes":{"range":[199,0,204,19],"symbol":"scip-python python temp indexer `pilot.database.database`/get_app_by_user_workspace().","content":"def get_app_by_user_workspace(user_id, workspace):\n    try:\n        user_app = UserApps.get((UserApps.user == user_id) & (UserApps.workspace == workspace))\n        return user_app.app\n    except DoesNotExist:\n        return None","file":"/pilot/database/database.py","language":"python","fileHash":"7a2937cca61d82ac90b45d666e171cf8718df858e5a2768ff637119946d81787","hash":"455be931c8aa72edb11abcd8a1112fe72e9cd6920216f472678ee700988343e6","processedContent":"def get_app_by_user_workspace(user_id, workspace):\n    try:\n        user_app = UserApps.get((UserApps.user == user_id) & (UserApps.workspace == workspace))\n        \"\"\"\n        scip-python python temp indexer `pilot.database.models.user_apps`/UserApps#: This code defines a base model class for an app entity that includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also defines a base model class for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The Meta class sets the database to be used.\n        scip-python python temp indexer `pilot.database.models.user_apps`/UserApps#: This code defines a base model class for an app entity that includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also defines a base model class for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The Meta class sets the database to be used.\n        scip-python python temp indexer `pilot.database.models.user_apps`/UserApps#: This code defines a base model class for an app entity that includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also defines a base model class for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The Meta class sets the database to be used.\n        scip-python python temp indexer `pilot.database.models.user_apps`/UserApps#user.: undefined\n        scip-python python temp indexer `pilot.database.models.user_apps`/UserApps#workspace.: undefined\n        \"\"\"\n        return user_app.app\n    except DoesNotExist:\n        return None","documentation":"This code defines a function called `get_app_by_user_workspace` that retrieves an app entity based on a user ID and workspace. It does this by querying the `UserApps` model, which is a base model class for an app entity that includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. The function returns the retrieved app entity or None if it doesn't exist."}},{"key":"scip-python python temp indexer `pilot.database.database`/get_progress_steps().","attributes":{"range":[207,0,237,20],"symbol":"scip-python python temp indexer `pilot.database.database`/get_progress_steps().","content":"def get_progress_steps(app_id, step=None):\n    progress_table_map = {\n        'project_description': ProjectDescription,\n        'user_stories': UserStories,\n        'user_tasks': UserTasks,\n        'architecture': Architecture,\n        'development_planning': DevelopmentPlanning,\n        'environment_setup': EnvironmentSetup,\n        'development': Development,\n    }\n\n    if step:\n        ProgressTable = progress_table_map.get(step)\n        if not ProgressTable:\n            raise ValueError(f\"Invalid step: {step}\")\n\n        try:\n            progress = ProgressTable.get(ProgressTable.app_id == app_id)\n            return model_to_dict(progress)\n        except DoesNotExist:\n            return None\n    else:\n        steps = {}\n        for step, ProgressTable in progress_table_map.items():\n            try:\n                progress = ProgressTable.get(ProgressTable.app_id == app_id)\n                steps[step] = model_to_dict(progress)\n            except DoesNotExist:\n                steps[step] = None\n\n        return steps","file":"/pilot/database/database.py","language":"python","fileHash":"7a2937cca61d82ac90b45d666e171cf8718df858e5a2768ff637119946d81787","hash":"6bf9b81250827ac2b6902273653ad1156009e2ebe2a391c10a80fbec878ee764","processedContent":"def get_progress_steps(app_id, step=None):\n    progress_table_map = {\n        'project_description': ProjectDescription, #This code defines a model class called ProgressStep in Django, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n        'user_stories': UserStories, #This code defines a model class called UserStories in Django, which includes fields for a user entity and custom JSON field for storing and retrieving JSON data in the database.\n        'user_tasks': UserTasks, #This code defines a model class called UserTasks in Django, which includes fields for a user entity and custom JSON field for storing and retrieving data in the database.\n        'architecture': Architecture, #This code defines a model class called ProgressStep in Django, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The code also defines custom field types in Django called JSONField, which allow for storing and retrieving JSON data in the database, and it uses the json.loads() method to convert the value to JSON format.\n        'development_planning': DevelopmentPlanning, #This code defines a model class called DevelopmentPlanning in Django, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The code also defines custom field types in Django called JSONField, which allow for storing and retrieving JSON data in the database, and it uses the json.loads() method to convert the value to JSON format.\n        'environment_setup': EnvironmentSetup, #This code defines a model class called ProgressStep in Django, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n        'development': Development, #This code defines a model class called ProgressStep in Django, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n    }\n\n    if step:\n        ProgressTable = progress_table_map.get(step)\n        if not ProgressTable:\n            raise ValueError(f\"Invalid step: {step}\")\n\n        try:\n            progress = ProgressTable.get(ProgressTable.app_id == app_id)\n            return model_to_dict(progress)\n        except DoesNotExist:\n            return None\n    else:\n        steps = {}\n        for step, ProgressTable in progress_table_map.items():\n            try:\n                progress = ProgressTable.get(ProgressTable.app_id == app_id)\n                steps[step] = model_to_dict(progress)\n            except DoesNotExist:\n                steps[step] = None\n\n        return steps","documentation":"This code defines a function called `get_progress_steps` that retrieves progress steps for a given application ID. It uses a dictionary to map progress step names to their corresponding model classes, and it returns a dictionary of progress steps with their corresponding data."}},{"key":"scip-python python temp indexer `pilot.database.database`/get_db_model_from_hash_id().","attributes":{"range":[240,0,246,17],"symbol":"scip-python python temp indexer `pilot.database.database`/get_db_model_from_hash_id().","content":"def get_db_model_from_hash_id(model, app_id, previous_step, high_level_step):\n    try:\n        db_row = model.get(\n            (model.app == app_id) & (model.previous_step == previous_step) & (model.high_level_step == high_level_step))\n    except DoesNotExist:\n        return None\n    return db_row","file":"/pilot/database/database.py","language":"python","fileHash":"7a2937cca61d82ac90b45d666e171cf8718df858e5a2768ff637119946d81787","hash":"453ff04508e90948a80c6f1a1f5f969fcf18f6ce7fbb3b9295749cf7f0d1c2b4","processedContent":"def get_db_model_from_hash_id(model, app_id, previous_step, high_level_step):\n    try:\n        db_row = model.get(\n            (model.app == app_id) & (model.previous_step == previous_step) & (model.high_level_step == high_level_step))\n    except DoesNotExist:\n        return None\n    return db_row","documentation":"This code retrieves a database row from a model based on three parameters: app_id, previous_step, and high_level_step. It does this by using the get() method of the model class, which returns the row if it exists, or None if it doesn't."}},{"key":"scip-python python temp indexer `pilot.database.database`/hash_and_save_step().","attributes":{"range":[249,0,270,17],"symbol":"scip-python python temp indexer `pilot.database.database`/hash_and_save_step().","content":"def hash_and_save_step(Model, app_id, unique_data_fields, data_fields, message):\n    # app = get_app(app_id)\n\n    # fields_to_preserve = [getattr(Model, field) for field in list(unique_data_fields.keys())]\n\n    for field, value in data_fields.items():\n        unique_data_fields[field] = value\n\n    try:\n        # existing_record = Model.get_or_none(\n        #     (Model.app == app) & (Model.previous_step == unique_data_fields['previous_step']) & (\n        #                 Model.high_level_step == unique_data_fields['high_level_step']))\n        inserted_id = (Model\n                       .insert(**unique_data_fields)\n                       .execute())\n\n        record = Model.get_by_id(inserted_id)\n        logger.debug(color_yellow(f\"{message} with id {record.id}\"))\n    except IntegrityError:\n        logger.warn(f\"A record with data {unique_data_fields} already exists for {Model.__name__}.\")\n        return None\n    return record","file":"/pilot/database/database.py","language":"python","fileHash":"7a2937cca61d82ac90b45d666e171cf8718df858e5a2768ff637119946d81787","hash":"bea354b77a681bff1b3259997f4e5b148b81dbe8911c53111dff3912cac0b23d","processedContent":"def hash_and_save_step(Model, app_id, unique_data_fields, data_fields, message):\n    # app = get_app(app_id)\n\n    # fields_to_preserve = [getattr(Model, field) for field in list(unique_data_fields.keys())]\n\n    for field, value in data_fields.items():\n        unique_data_fields[field] = value\n\n    try:\n        # existing_record = Model.get_or_none(\n        #     (Model.app == app) & (Model.previous_step == unique_data_fields['previous_step']) & (\n        #                 Model.high_level_step == unique_data_fields['high_level_step']))\n        inserted_id = (Model\n                       .insert(**unique_data_fields)\n                       .execute())\n\n        record = Model.get_by_id(inserted_id)\n        logger.debug(color_yellow(f\"{message} with id {record.id}\"))\n        \"\"\"\n        scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n        scip-python python python-stdlib 3.11 logging/Logger#debug().: undefined\n        scip-python python temp indexer `pilot.utils.style`/color_yellow.: undefined\n        \"\"\"\n    except IntegrityError:\n        logger.warn(f\"A record with data {unique_data_fields} already exists for {Model.__name__}.\")\n        \"\"\"\n        scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n        scip-python python python-stdlib 3.11 logging/Logger#warn().: undefined\n        \"\"\"\n        return None\n    return record","documentation":"This code defines a function called `hash_and_save_step` that takes in several parameters and performs a series of operations to save data to a database. The function first checks if a record with the same data already exists, and if so, it logs a warning message. If no record exists, it creates a new one and returns it."}},{"key":"scip-python python temp indexer `pilot.database.database`/save_development_step().","attributes":{"range":[273,0,296,27],"symbol":"scip-python python temp indexer `pilot.database.database`/save_development_step().","content":"def save_development_step(project, prompt_path, prompt_data, messages, llm_response, exception=None):\n    data_fields = {\n        'messages': messages,\n        'llm_response': llm_response,\n        'prompt_path': prompt_path,\n        'prompt_data': {} if prompt_data is None else {k: v for k, v in prompt_data.items() if\n                                                       k not in PROMPT_DATA_TO_IGNORE and not callable(v)},\n        'llm_req_num': project.llm_req_num,\n        'token_limit_exception_raised': exception\n    }\n\n    unique_data = {\n        'app': project.args['app_id'],\n        'previous_step': project.checkpoints['last_development_step'],\n        'high_level_step': project.current_step,\n    }\n\n    development_step = hash_and_save_step(DevelopmentSteps, project.args['app_id'], unique_data, data_fields,\n                                          \"Saved Development Step\")\n    project.checkpoints['last_development_step'] = development_step\n\n    project.save_files_snapshot(development_step.id)\n\n    return development_step","file":"/pilot/database/database.py","language":"python","fileHash":"7a2937cca61d82ac90b45d666e171cf8718df858e5a2768ff637119946d81787","hash":"22b1a368ca293b80a2c88b4e0218e5dd629250c8d58641aabed4dae9573cde33","processedContent":"def save_development_step(project, prompt_path, prompt_data, messages, llm_response, exception=None):\n    data_fields = {\n        'messages': messages,\n        'llm_response': llm_response,\n        'prompt_path': prompt_path,\n        'prompt_data': {} if prompt_data is None else {k: v for k, v in prompt_data.items() if\n                                                       k not in PROMPT_DATA_TO_IGNORE and not callable(v)}, #undefined\n        'llm_req_num': project.llm_req_num,\n        'token_limit_exception_raised': exception\n    }\n\n    unique_data = {\n        'app': project.args['app_id'],\n        'previous_step': project.checkpoints['last_development_step'],\n        'high_level_step': project.current_step,\n    }\n\n    development_step = hash_and_save_step(DevelopmentSteps, project.args['app_id'], unique_data, data_fields,\n    \"\"\"\n    scip-python python temp indexer `pilot.database.database`/hash_and_save_step().: This code defines a function called `hash_and_save_step` that takes in several parameters and performs a series of operations to save data to a database. The function first checks if a record with the same data already exists, and if so, it logs a warning message. If no record exists, it creates a new one and returns it.\n    scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#: This code defines a model for the development steps table in the database. It includes fields for an ID, creation and update timestamps, and a foreign key to the app entity. The model also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\n    \"\"\"\n                                          \"Saved Development Step\")\n    project.checkpoints['last_development_step'] = development_step\n\n    project.save_files_snapshot(development_step.id)\n\n    return development_step","documentation":"This code defines a function called `save_development_step` that saves data to a database. It first checks if a record with the same data already exists, and if so, it logs a warning message. If no record exists, it creates a new one and returns it."}},{"key":"scip-python python temp indexer `pilot.database.database`/get_saved_development_step().","attributes":{"range":[299,0,302,27],"symbol":"scip-python python temp indexer `pilot.database.database`/get_saved_development_step().","content":"def get_saved_development_step(project):\n    development_step = get_db_model_from_hash_id(DevelopmentSteps, project.args['app_id'],\n                                                 project.checkpoints['last_development_step'], project.current_step)\n    return development_step","file":"/pilot/database/database.py","language":"python","fileHash":"7a2937cca61d82ac90b45d666e171cf8718df858e5a2768ff637119946d81787","hash":"0c81d288e8bef772e29981a27341e3eb983abd4531d30672e12e2d36ab538e04","processedContent":"def get_saved_development_step(project):\n    development_step = get_db_model_from_hash_id(DevelopmentSteps, project.args['app_id'],\n    \"\"\"\n    scip-python python temp indexer `pilot.database.database`/get_db_model_from_hash_id().: This code retrieves a database row from a model based on three parameters: app_id, previous_step, and high_level_step. It does this by using the get() method of the model class, which returns the row if it exists, or None if it doesn't.\n    scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#: This code defines a model for the development steps table in the database. It includes fields for an ID, creation and update timestamps, and a foreign key to the app entity. The model also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\n    \"\"\"\n                                                 project.checkpoints['last_development_step'], project.current_step)\n    return development_step","documentation":"This code retrieves a development step from the database based on three parameters: app ID, previous step, and high-level step. It does this by using the get() method of the model class, which returns the row if it exists, or None if it doesn't."}},{"key":"scip-python python temp indexer `pilot.database.database`/save_command_run().","attributes":{"range":[305,0,324,22],"symbol":"scip-python python temp indexer `pilot.database.database`/save_command_run().","content":"def save_command_run(project, command, cli_response, done_or_error_response, exit_code):\n    if project.current_step != 'coding':\n        return\n\n    unique_data = {\n        'app': project.args['app_id'],\n        'previous_step': project.checkpoints['last_command_run'],\n        'high_level_step': project.current_step,\n    }\n\n    data_fields = {\n        'command': command,\n        'cli_response': cli_response,\n        'done_or_error_response': done_or_error_response,\n        'exit_code': exit_code,\n    }\n\n    command_run = hash_and_save_step(CommandRuns, project.args['app_id'], unique_data, data_fields, \"Saved Command Run\")\n    project.checkpoints['last_command_run'] = command_run\n    return command_run","file":"/pilot/database/database.py","language":"python","fileHash":"7a2937cca61d82ac90b45d666e171cf8718df858e5a2768ff637119946d81787","hash":"9c8aca8510e0452791b9ddba9af070f3c21a7e54505b849af6115275f0701155","processedContent":"def save_command_run(project, command, cli_response, done_or_error_response, exit_code):\n    if project.current_step != 'coding':\n        return\n\n    unique_data = {\n        'app': project.args['app_id'],\n        'previous_step': project.checkpoints['last_command_run'],\n        'high_level_step': project.current_step,\n    }\n\n    data_fields = {\n        'command': command,\n        'cli_response': cli_response,\n        'done_or_error_response': done_or_error_response,\n        'exit_code': exit_code,\n    }\n\n    command_run = hash_and_save_step(CommandRuns, project.args['app_id'], unique_data, data_fields, \"Saved Command Run\")\n    \"\"\"\n    scip-python python temp indexer `pilot.database.database`/hash_and_save_step().: This code defines a function called `hash_and_save_step` that takes in several parameters and performs a series of operations to save data to a database. The function first checks if a record with the same data already exists, and if so, it logs a warning message. If no record exists, it creates a new one and returns it.\n    scip-python python temp indexer `pilot.database.models.command_runs`/CommandRuns#: This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n    \"\"\"\n    project.checkpoints['last_command_run'] = command_run\n    return command_run","documentation":"This code defines a function called `save_command_run` that saves data to a database. It first checks if a record with the same data already exists, and if so, logs a warning message. If no record exists, it creates a new one and returns it."}},{"key":"scip-python python temp indexer `pilot.database.database`/get_saved_command_run().","attributes":{"range":[327,0,334,22],"symbol":"scip-python python temp indexer `pilot.database.database`/get_saved_command_run().","content":"def get_saved_command_run(project, command):\n    # data_to_hash = {\n    #     'command': command,\n    #     'command_runs_count': project.command_runs_count\n    # }\n    command_run = get_db_model_from_hash_id(CommandRuns, project.args['app_id'],\n                                            project.checkpoints['last_command_run'], project.current_step)\n    return command_run","file":"/pilot/database/database.py","language":"python","fileHash":"7a2937cca61d82ac90b45d666e171cf8718df858e5a2768ff637119946d81787","hash":"776cd9e971ba9f57e9abdcf17267569f72f82205625afc900d784fe59c3851fe","processedContent":"def get_saved_command_run(project, command):\n    # data_to_hash = {\n    #     'command': command,\n    #     'command_runs_count': project.command_runs_count\n    # }\n    command_run = get_db_model_from_hash_id(CommandRuns, project.args['app_id'],\n    \"\"\"\n    scip-python python temp indexer `pilot.database.database`/get_db_model_from_hash_id().: This code retrieves a database row from a model based on three parameters: app_id, previous_step, and high_level_step. It does this by using the get() method of the model class, which returns the row if it exists, or None if it doesn't.\n    scip-python python temp indexer `pilot.database.models.command_runs`/CommandRuns#: This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n    \"\"\"\n                                            project.checkpoints['last_command_run'], project.current_step)\n    return command_run","documentation":"This code retrieves a database row from a model based on three parameters: app_id, previous_step, and high_level_step."}},{"key":"scip-python python temp indexer `pilot.database.database`/save_user_input().","attributes":{"range":[337,0,353,21],"symbol":"scip-python python temp indexer `pilot.database.database`/save_user_input().","content":"def save_user_input(project, query, user_input, hint):\n    if project.current_step != 'coding':\n        return\n\n    unique_data = {\n        'app': project.args['app_id'],\n        'previous_step': project.checkpoints['last_user_input'],\n        'high_level_step': project.current_step,\n    }\n    data_fields = {\n        'query': query,\n        'user_input': user_input,\n        'hint': hint,\n    }\n    user_input = hash_and_save_step(UserInputs, project.args['app_id'], unique_data, data_fields, \"Saved User Input\")\n    project.checkpoints['last_user_input'] = user_input\n    return user_input","file":"/pilot/database/database.py","language":"python","fileHash":"7a2937cca61d82ac90b45d666e171cf8718df858e5a2768ff637119946d81787","hash":"f5cac3a34c41dbdc401f6eaecdb0bac9df97087a80fc7fabf90ec9e658b0b3ac","processedContent":"def save_user_input(project, query, user_input, hint):\n    if project.current_step != 'coding':\n        return\n\n    unique_data = {\n        'app': project.args['app_id'],\n        'previous_step': project.checkpoints['last_user_input'],\n        'high_level_step': project.current_step,\n    }\n    data_fields = {\n        'query': query,\n        'user_input': user_input,\n        'hint': hint,\n    }\n    user_input = hash_and_save_step(UserInputs, project.args['app_id'], unique_data, data_fields, \"Saved User Input\")\n    \"\"\"\n    scip-python python temp indexer `pilot.database.database`/hash_and_save_step().: This code defines a function called `hash_and_save_step` that takes in several parameters and performs a series of operations to save data to a database. The function first checks if a record with the same data already exists, and if so, it logs a warning message. If no record exists, it creates a new one and returns it.\n    scip-python python temp indexer `pilot.database.models.user_inputs`/UserInputs#: This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n    \"\"\"\n    project.checkpoints['last_user_input'] = user_input\n    return user_input","documentation":"This code defines a function called `save_user_input` that takes in several parameters and saves data to a database. It first checks if a record with the same data already exists, and if so, it logs a warning message. If no record exists, it creates a new one and returns it."}},{"key":"scip-python python temp indexer `pilot.database.database`/get_saved_user_input().","attributes":{"range":[356,0,363,21],"symbol":"scip-python python temp indexer `pilot.database.database`/get_saved_user_input().","content":"def get_saved_user_input(project, query):\n    # data_to_hash = {\n    #     'query': query,\n    #     'user_inputs_count': project.user_inputs_count\n    # }\n    user_input = get_db_model_from_hash_id(UserInputs, project.args['app_id'], project.checkpoints['last_user_input'],\n                                           project.current_step)\n    return user_input","file":"/pilot/database/database.py","language":"python","fileHash":"7a2937cca61d82ac90b45d666e171cf8718df858e5a2768ff637119946d81787","hash":"862c6d74a1d22df613c1c3dc2eb4cb712e4812524867e720a16d1ae83012c253","processedContent":"def get_saved_user_input(project, query):\n    # data_to_hash = {\n    #     'query': query,\n    #     'user_inputs_count': project.user_inputs_count\n    # }\n    user_input = get_db_model_from_hash_id(UserInputs, project.args['app_id'], project.checkpoints['last_user_input'],\n    \"\"\"\n    scip-python python temp indexer `pilot.database.database`/get_db_model_from_hash_id().: This code retrieves a database row from a model based on three parameters: app_id, previous_step, and high_level_step. It does this by using the get() method of the model class, which returns the row if it exists, or None if it doesn't.\n    scip-python python temp indexer `pilot.database.models.user_inputs`/UserInputs#: This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n    \"\"\"\n                                           project.current_step)\n    return user_input","documentation":"This code retrieves a database row from a model based on three parameters: app_id, previous_step, and high_level_step."}},{"key":"scip-python python temp indexer `pilot.database.database`/delete_all_subsequent_steps().","attributes":{"range":[366,0,370,84],"symbol":"scip-python python temp indexer `pilot.database.database`/delete_all_subsequent_steps().","content":"def delete_all_subsequent_steps(project):\n    app = get_app(project.args['app_id'])\n    delete_subsequent_steps(DevelopmentSteps, app, project.checkpoints['last_development_step'])\n    delete_subsequent_steps(CommandRuns, app, project.checkpoints['last_command_run'])\n    delete_subsequent_steps(UserInputs, app, project.checkpoints['last_user_input'])","file":"/pilot/database/database.py","language":"python","fileHash":"7a2937cca61d82ac90b45d666e171cf8718df858e5a2768ff637119946d81787","hash":"a7ddf15c34a2f9e1ac1d6c57c9f167fc072d1e89614df1b3ffe42af5f41069de","processedContent":"def delete_all_subsequent_steps(project):\n    app = get_app(project.args['app_id']) #This code defines a function called `get_app` that retrieves an app entity from the database based on its ID. It also includes error handling to raise a ValueError if the app is not found.\n    delete_subsequent_steps(DevelopmentSteps, app, project.checkpoints['last_development_step'])\n    \"\"\"\n    scip-python python temp indexer `pilot.database.database`/delete_subsequent_steps().: This code deletes all subsequent steps in a development process after a specific step, including any file snapshots or features associated with those steps.\n    scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#: This code defines a model for the development steps table in the database. It includes fields for an ID, creation and update timestamps, and a foreign key to the app entity. The model also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\n    \"\"\"\n    delete_subsequent_steps(CommandRuns, app, project.checkpoints['last_command_run'])\n    \"\"\"\n    scip-python python temp indexer `pilot.database.database`/delete_subsequent_steps().: This code deletes all subsequent steps in a development process after a specific step, including any file snapshots or features associated with those steps.\n    scip-python python temp indexer `pilot.database.models.command_runs`/CommandRuns#: This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n    \"\"\"\n    delete_subsequent_steps(UserInputs, app, project.checkpoints['last_user_input'])","documentation":"This code deletes all subsequent steps in a development process after a specific step, including any file snapshots or features associated with those steps."}},{"key":"scip-python python temp indexer `pilot.database.database`/delete_subsequent_steps().","attributes":{"range":[373,0,383,90],"symbol":"scip-python python temp indexer `pilot.database.database`/delete_subsequent_steps().","content":"def delete_subsequent_steps(Model, app, step):\n    logger.info(color_red(f\"Deleting subsequent {Model.__name__} steps after {step.id if step is not None else None}\"))\n    subsequent_steps = Model.select().where(\n        (Model.app == app) & (Model.previous_step == (step.id if step is not None else None)))\n    for subsequent_step in subsequent_steps:\n        if subsequent_step:\n            delete_subsequent_steps(Model, app, subsequent_step)\n            subsequent_step.delete_instance()\n            if Model == DevelopmentSteps:\n                FileSnapshot.delete().where(FileSnapshot.development_step == subsequent_step).execute()\n                Feature.delete().where(Feature.previous_step == subsequent_step).execute()","file":"/pilot/database/database.py","language":"python","fileHash":"7a2937cca61d82ac90b45d666e171cf8718df858e5a2768ff637119946d81787","hash":"078ab430cf5573746d34c3c5ea2ec05f485672abc3fd140dd714291c86aeb133","processedContent":"def delete_subsequent_steps(Model, app, step):\n    logger.info(color_red(f\"Deleting subsequent {Model.__name__} steps after {step.id if step is not None else None}\"))\n    \"\"\"\n    scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n    scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n    scip-python python temp indexer `pilot.utils.style`/color_red.: undefined\n    \"\"\"\n    subsequent_steps = Model.select().where(\n        (Model.app == app) & (Model.previous_step == (step.id if step is not None else None)))\n    for subsequent_step in subsequent_steps:\n        if subsequent_step:\n            delete_subsequent_steps(Model, app, subsequent_step)\n            subsequent_step.delete_instance()\n            if Model == DevelopmentSteps: #This code defines a model for the development steps table in the database. It includes fields for an ID, creation and update timestamps, and a foreign key to the app entity. The model also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\n                FileSnapshot.delete().where(FileSnapshot.development_step == subsequent_step).execute()\n                \"\"\"\n                scip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#: This code defines a model for a file snapshot entity in a database, with fields for an ID, creation and update timestamps, and foreign keys to other entities such as apps, development steps, and files. It also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\n                scip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#: This code defines a model for a file snapshot entity in a database, with fields for an ID, creation and update timestamps, and foreign keys to other entities such as apps, development steps, and files. It also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\n                scip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#development_step.: undefined\n                \"\"\"\n                Feature.delete().where(Feature.previous_step == subsequent_step).execute()","documentation":"This code deletes all subsequent steps in a development process after a specific step, including any file snapshots or features associated with those steps."}},{"key":"scip-python python temp indexer `pilot.database.database`/get_all_connected_steps().","attributes":{"range":[386,0,393,26],"symbol":"scip-python python temp indexer `pilot.database.database`/get_all_connected_steps().","content":"def get_all_connected_steps(step, previous_step_field_name):\n    \"\"\"Recursively get all steps connected to the given step.\"\"\"\n    connected_steps = [step]\n    prev_step = getattr(step, previous_step_field_name)\n    while prev_step is not None:\n        connected_steps.append(prev_step)\n        prev_step = getattr(prev_step, previous_step_field_name)\n    return connected_steps","file":"/pilot/database/database.py","language":"python","fileHash":"7a2937cca61d82ac90b45d666e171cf8718df858e5a2768ff637119946d81787","hash":"fe016e4b917ad6609f565fdb962ba71ca17c94ef9ac579c4e641b49f403dcf1d","processedContent":"def get_all_connected_steps(step, previous_step_field_name):\n    \"\"\"Recursively get all steps connected to the given step.\"\"\"\n    connected_steps = [step]\n    prev_step = getattr(step, previous_step_field_name)\n    while prev_step is not None:\n        connected_steps.append(prev_step)\n        prev_step = getattr(prev_step, previous_step_field_name)\n    return connected_steps","documentation":"This code recursively retrieves all steps connected to a given step, by following the previous step field name."}},{"key":"scip-python python temp indexer `pilot.database.database`/delete_all_app_development_data().","attributes":{"range":[396,0,399,56],"symbol":"scip-python python temp indexer `pilot.database.database`/delete_all_app_development_data().","content":"def delete_all_app_development_data(app):\n    models = [DevelopmentSteps, CommandRuns, UserInputs, UserApps, File, FileSnapshot]\n    for model in models:\n        model.delete().where(model.app == app).execute()","file":"/pilot/database/database.py","language":"python","fileHash":"7a2937cca61d82ac90b45d666e171cf8718df858e5a2768ff637119946d81787","hash":"15e12b78abf7fb2c1b21ae6c52d7e8c3c65436b57834fe8c20ad464b5ea67c65","processedContent":"def delete_all_app_development_data(app):\n    models = [DevelopmentSteps, CommandRuns, UserInputs, UserApps, File, FileSnapshot]\n    \"\"\"\n    scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#: This code defines a model for the development steps table in the database. It includes fields for an ID, creation and update timestamps, and a foreign key to the app entity. The model also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\n    scip-python python temp indexer `pilot.database.models.command_runs`/CommandRuns#: This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n    scip-python python temp indexer `pilot.database.models.user_inputs`/UserInputs#: This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n    scip-python python temp indexer `pilot.database.models.user_apps`/UserApps#: This code defines a base model class for an app entity that includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also defines a base model class for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The Meta class sets the database to be used.\n    scip-python python temp indexer `pilot.database.models.files`/File#: This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n    scip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#: This code defines a model for a file snapshot entity in a database, with fields for an ID, creation and update timestamps, and foreign keys to other entities such as apps, development steps, and files. It also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\n    \"\"\"\n    for model in models:\n        model.delete().where(model.app == app).execute()","documentation":"This code deletes all data related to a specific app from the database, including development steps, command runs, user inputs, user apps, files, and file snapshots."}},{"key":"scip-python python temp indexer `pilot.database.database`/delete_unconnected_steps_from().","attributes":{"range":[402,0,415,42],"symbol":"scip-python python temp indexer `pilot.database.database`/delete_unconnected_steps_from().","content":"def delete_unconnected_steps_from(step, previous_step_field_name):\n    if step is None:\n        return\n    connected_steps = get_all_connected_steps(step, previous_step_field_name)\n    connected_step_ids = [s.id for s in connected_steps]\n\n    unconnected_steps = DevelopmentSteps.select().where(\n        (DevelopmentSteps.app == step.app) &\n        (DevelopmentSteps.id.not_in(connected_step_ids))\n    ).order_by(DevelopmentSteps.id.desc())\n\n    for unconnected_step in unconnected_steps:\n        print(color_red(f\"Deleting unconnected {step.__class__.__name__} step {unconnected_step.id}\"))\n        unconnected_step.delete_instance()","file":"/pilot/database/database.py","language":"python","fileHash":"7a2937cca61d82ac90b45d666e171cf8718df858e5a2768ff637119946d81787","hash":"a5058251b306888254843fecff5c07b0e0fe3e2474cd1185f0f21da0a419f3bb","processedContent":"def delete_unconnected_steps_from(step, previous_step_field_name):\n    if step is None:\n        return\n    connected_steps = get_all_connected_steps(step, previous_step_field_name) #This code recursively retrieves all steps connected to a given step, by following the previous step field name.\n    connected_step_ids = [s.id for s in connected_steps]\n\n    unconnected_steps = DevelopmentSteps.select().where( #This code defines a model for the development steps table in the database. It includes fields for an ID, creation and update timestamps, and a foreign key to the app entity. The model also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\n        (DevelopmentSteps.app == step.app) &\n        \"\"\"\n        scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#: This code defines a model for the development steps table in the database. It includes fields for an ID, creation and update timestamps, and a foreign key to the app entity. The model also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\n        scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#app.: undefined\n        \"\"\"\n        (DevelopmentSteps.id.not_in(connected_step_ids))\n        \"\"\"\n        scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#: This code defines a model for the development steps table in the database. It includes fields for an ID, creation and update timestamps, and a foreign key to the app entity. The model also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\n        scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#id.: undefined\n        \"\"\"\n    ).order_by(DevelopmentSteps.id.desc())\n    \"\"\"\n    scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#: This code defines a model for the development steps table in the database. It includes fields for an ID, creation and update timestamps, and a foreign key to the app entity. The model also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\n    scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#id.: undefined\n    \"\"\"\n\n    for unconnected_step in unconnected_steps:\n        print(color_red(f\"Deleting unconnected {step.__class__.__name__} step {unconnected_step.id}\")) #undefined\n        unconnected_step.delete_instance()","documentation":"This code retrieves all steps connected to a given step, and then deletes any unconnected steps from the database."}},{"key":"scip-python python temp indexer `pilot.database.database`/save_file_description().","attributes":{"range":[418,0,424,16],"symbol":"scip-python python temp indexer `pilot.database.database`/save_file_description().","content":"def save_file_description(project, path, name, description):\n    (File.insert(app=project.app, path=path, name=name, description=description)\n     .on_conflict(\n        conflict_target=[File.app, File.name, File.path],\n        preserve=[],\n        update={'description': description})\n     .execute())","file":"/pilot/database/database.py","language":"python","fileHash":"7a2937cca61d82ac90b45d666e171cf8718df858e5a2768ff637119946d81787","hash":"0be6108c03f0fe516d780324a0fd89afae265141af5892627a671b4b09dbee15","processedContent":"def save_file_description(project, path, name, description):\n    (File.insert(app=project.app, path=path, name=name, description=description) #This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n     .on_conflict(\n        conflict_target=[File.app, File.name, File.path],\n        \"\"\"\n        scip-python python temp indexer `pilot.database.models.files`/File#: This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n        scip-python python temp indexer `pilot.database.models.files`/File#: This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n        scip-python python temp indexer `pilot.database.models.files`/File#: This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n        scip-python python temp indexer `pilot.database.models.files`/File#app.: undefined\n        scip-python python temp indexer `pilot.database.models.files`/File#name.: undefined\n        scip-python python temp indexer `pilot.database.models.files`/File#path.: undefined\n        \"\"\"\n        preserve=[],\n        update={'description': description})\n     .execute())","documentation":"This code defines a base model class for an app entity with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update."}},{"key":"scip-python python temp indexer `pilot.database.database`/save_feature().","attributes":{"range":[427,0,433,53],"symbol":"scip-python python temp indexer `pilot.database.database`/save_feature().","content":"def save_feature(app_id, summary, messages, previous_step):\n    try:\n        app = get_app(app_id)\n        feature = Feature.create(app=app, summary=summary, messages=messages, previous_step=previous_step)\n        return feature\n    except DoesNotExist:\n        raise ValueError(f\"No app with id: {app_id}\")","file":"/pilot/database/database.py","language":"python","fileHash":"7a2937cca61d82ac90b45d666e171cf8718df858e5a2768ff637119946d81787","hash":"4a52b17dc575c22f2765f458995d6321f51a520db42c3577a05994a055506dea","processedContent":"def save_feature(app_id, summary, messages, previous_step):\n    try:\n        app = get_app(app_id) #This code defines a function called `get_app` that retrieves an app entity from the database based on its ID. It also includes error handling to raise a ValueError if the app is not found.\n        feature = Feature.create(app=app, summary=summary, messages=messages, previous_step=previous_step) #This code defines a model for the development steps table in the database, with fields for an ID, creation and update timestamps, and a foreign key to the app entity. It also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\n        return feature\n    except DoesNotExist:\n        raise ValueError(f\"No app with id: {app_id}\")","documentation":"This code defines a function called `save_feature` that creates a new feature entity in the database based on the input parameters. It retrieves an app entity from the database using the `get_app` function, and then creates a new feature entity with the given summary, messages, and previous step. The function also includes error handling to raise a ValueError if the app is not found."}},{"key":"scip-python python temp indexer `pilot.database.database`/get_features_by_app_id().","attributes":{"range":[436,0,445,53],"symbol":"scip-python python temp indexer `pilot.database.database`/get_features_by_app_id().","content":"def get_features_by_app_id(app_id):\n    try:\n        app = get_app(app_id)\n        features = Feature.select().where(Feature.app == app).order_by(Feature.created_at)\n        features_dict = [model_to_dict(feature) for feature in features]\n\n        # return only 'summary' because we store all prompt_data to DB\n        return [{'summary': feature['summary']} for feature in features_dict]\n    except DoesNotExist:\n        raise ValueError(f\"No app with id: {app_id}\")","file":"/pilot/database/database.py","language":"python","fileHash":"7a2937cca61d82ac90b45d666e171cf8718df858e5a2768ff637119946d81787","hash":"df60044c43e8de627af55cf0ea06c0fbf718b32a9ca48e817d272bfc372c7d4f","processedContent":"def get_features_by_app_id(app_id):\n    try:\n        app = get_app(app_id) #This code defines a function called `get_app` that retrieves an app entity from the database based on its ID. It also includes error handling to raise a ValueError if the app is not found.\n        features = Feature.select().where(Feature.app == app).order_by(Feature.created_at)\n        \"\"\"\n        scip-python python temp indexer `pilot.database.models.feature`/Feature#: This code defines a model for the development steps table in the database, with fields for an ID, creation and update timestamps, and a foreign key to the app entity. It also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\n        scip-python python temp indexer `pilot.database.models.feature`/Feature#: This code defines a model for the development steps table in the database, with fields for an ID, creation and update timestamps, and a foreign key to the app entity. It also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\n        scip-python python temp indexer `pilot.database.models.feature`/Feature#: This code defines a model for the development steps table in the database, with fields for an ID, creation and update timestamps, and a foreign key to the app entity. It also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\n        scip-python python temp indexer `pilot.database.models.feature`/Feature#app.: undefined\n        scip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#created_at.: undefined\n        \"\"\"\n        features_dict = [model_to_dict(feature) for feature in features]\n\n        # return only 'summary' because we store all prompt_data to DB\n        return [{'summary': feature['summary']} for feature in features_dict]\n    except DoesNotExist:\n        raise ValueError(f\"No app with id: {app_id}\")","documentation":"This code defines a function called `get_features_by_app_id` that retrieves a list of features from the database based on an app ID. It includes error handling to raise a ValueError if the app is not found."}},{"key":"scip-python python temp indexer `playhouse.shortcuts`/__init__:","attributes":{"symbol":"scip-python python temp indexer `playhouse.shortcuts`/__init__:","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.style`/color_yellow.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.style`/color_yellow.","language":"python"}},{"key":"scip-python python temp indexer peewee/__init__:","attributes":{"symbol":"scip-python python temp indexer peewee/__init__:","language":"python"}},{"key":"scip-python python python-stdlib 3.11 functools/__init__:","attributes":{"symbol":"scip-python python python-stdlib 3.11 functools/__init__:","language":"python"}},{"key":"scip-python python python-stdlib 3.11 functools/reduce().","attributes":{"symbol":"scip-python python python-stdlib 3.11 functools/reduce().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 operator/__init__:","attributes":{"symbol":"scip-python python python-stdlib 3.11 operator/__init__:","language":"python"}},{"key":"scip-python python temp indexer `psycopg2.extensions`/__init__:","attributes":{"symbol":"scip-python python temp indexer `psycopg2.extensions`/__init__:","language":"python"}},{"key":"scip-python python temp indexer `pilot.const.common`/PROMPT_DATA_TO_IGNORE.","attributes":{"symbol":"scip-python python temp indexer `pilot.const.common`/PROMPT_DATA_TO_IGNORE.","language":"python"}},{"key":"scip-python python temp indexer `pilot.const.common`/STEPS.","attributes":{"symbol":"scip-python python temp indexer `pilot.const.common`/STEPS.","language":"python"}},{"key":"scip-python python temp indexer `pilot.database.config`/DB_NAME.","attributes":{"symbol":"scip-python python temp indexer `pilot.database.config`/DB_NAME.","language":"python"}},{"key":"scip-python python temp indexer `pilot.database.config`/DB_HOST.","attributes":{"symbol":"scip-python python temp indexer `pilot.database.config`/DB_HOST.","language":"python"}},{"key":"scip-python python temp indexer `pilot.database.config`/DB_PORT.","attributes":{"symbol":"scip-python python temp indexer `pilot.database.config`/DB_PORT.","language":"python"}},{"key":"scip-python python temp indexer `pilot.database.config`/DB_USER.","attributes":{"symbol":"scip-python python temp indexer `pilot.database.config`/DB_USER.","language":"python"}},{"key":"scip-python python temp indexer `pilot.database.config`/DB_PASSWORD.","attributes":{"symbol":"scip-python python temp indexer `pilot.database.config`/DB_PASSWORD.","language":"python"}},{"key":"scip-python python temp indexer `pilot.database.config`/DATABASE_TYPE.","attributes":{"symbol":"scip-python python temp indexer `pilot.database.config`/DATABASE_TYPE.","language":"python"}},{"key":"scip-python python temp indexer `pilot.database.models.components.base_models`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.components.base_models`/__init__:","language":"python","range":[0,0,23,0],"content":"from peewee import Model, UUIDField, DateTimeField\nfrom datetime import datetime\nfrom uuid import uuid4\n\nfrom database.config import DATABASE_TYPE\nfrom database.connection.postgres import get_postgres_database\nfrom database.connection.sqlite import get_sqlite_database\n\n\n# Establish connection to the database\nif DATABASE_TYPE == \"postgres\":\n    database = get_postgres_database()\nelse:\n    database = get_sqlite_database()\n\n\nclass BaseModel(Model):\n    id = UUIDField(primary_key=True, default=uuid4)\n    created_at = DateTimeField(default=datetime.now)\n    updated_at = DateTimeField(default=datetime.now)\n\n    class Meta:\n        database = database\n","file":"/pilot/database/models/components/base_models.py","fileHash":"d7c25ab98d3a3a4c8a16c2669b1d6a37c0b6be04b10a4a18250cf1e4c6a3a9d4","hash":"d7c25ab98d3a3a4c8a16c2669b1d6a37c0b6be04b10a4a18250cf1e4c6a3a9d4","processedContent":"from peewee import Model, UUIDField, DateTimeField #undefined\nfrom datetime import datetime\n\"\"\"\nscip-python python python-stdlib 3.11 datetime/__init__:: undefined\nscip-python python python-stdlib 3.11 datetime/datetime#: undefined\n\"\"\"\nfrom uuid import uuid4\n\"\"\"\nscip-python python python-stdlib 3.11 uuid/__init__:: undefined\nscip-python python python-stdlib 3.11 uuid/uuid4().: undefined\n\"\"\"\n\nfrom database.config import DATABASE_TYPE\n\"\"\"\nscip-python python temp indexer `pilot.database.config`/__init__:: The code defines environment variables for a database connection, using the `os.getenv()` function to retrieve the values from the operating system environment.\nscip-python python temp indexer `pilot.database.config`/DATABASE_TYPE.: undefined\n\"\"\"\nfrom database.connection.postgres import get_postgres_database\n\"\"\"\nscip-python python temp indexer `pilot.database.connection.postgres`/__init__:: The code defines a function to create a PostgreSQL database using the psycopg2 library, and another function to get a PostgreSQL database object.\nscip-python python temp indexer `pilot.database.connection.postgres`/get_postgres_database().: This code defines a function that returns a PostgreSQL database object, which can be used to interact with a PostgreSQL database.\n\"\"\"\nfrom database.connection.sqlite import get_sqlite_database\n\"\"\"\nscip-python python temp indexer `pilot.database.connection.sqlite`/__init__:: The code defines a function that returns an instance of the SqliteDatabase class, which is used to interact with a local SQLite database.\nscip-python python temp indexer `pilot.database.connection.sqlite`/get_sqlite_database().: This code defines a function that returns an instance of the SqliteDatabase class, which is used to interact with a local SQLite database.\n\"\"\"\n\n\n# Establish connection to the database\nif DATABASE_TYPE == \"postgres\": #undefined\n    database = get_postgres_database() #This code defines a function that returns a PostgreSQL database object, which can be used to interact with a PostgreSQL database.\nelse:\n    database = get_sqlite_database()\n    \"\"\"\n    scip-python python temp indexer `pilot.database.connection.sqlite`/get_sqlite_database().: This code defines a function that returns an instance of the SqliteDatabase class, which is used to interact with a local SQLite database.\n    scip-python python temp indexer `pilot.database.models.components.base_models`/database.: undefined\n    \"\"\"\n\n\nclass BaseModel(Model):\n    \"\"\"This code defines a base model class that includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used.\"\"\"\n    pass\n","documentation":"The code defines a base model class for a database, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes functions to create a PostgreSQL or SQLite database connection based on the environment variable `DATABASE_TYPE`."}},{"key":"scip-python python temp indexer `pilot.database.models.components.base_models`/database.","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.components.base_models`/database.","language":"python"}},{"key":"scip-python python temp indexer `pilot.database.models.user`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.user`/__init__:","language":"python","range":[0,0,8,0],"content":"from peewee import CharField\n\nfrom database.models.components.base_models import BaseModel\n\n\nclass User(BaseModel):\n    email = CharField(unique=True)\n    password = CharField()\n","file":"/pilot/database/models/user.py","fileHash":"9743d554804d517903c343767b09bf6b86ab3e39f9e140c46b2b4a9caf9dca43","hash":"9743d554804d517903c343767b09bf6b86ab3e39f9e140c46b2b4a9caf9dca43","processedContent":"from peewee import CharField #undefined\n\nfrom database.models.components.base_models import BaseModel\n\"\"\"\nscip-python python temp indexer `pilot.database.models.components.base_models`/__init__:: The code defines a base model class for a database, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes functions to create a PostgreSQL or SQLite database connection based on the environment variable `DATABASE_TYPE`.\nscip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#: This code defines a base model class that includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used.\n\"\"\"\n\n\nclass User(BaseModel):\n    \"\"\"This code defines a base model class for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The Meta class sets the database to be used.\"\"\"\n    pass\n","documentation":"The code defines a base model class for a database and a user entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used."}},{"key":"scip-python python temp indexer `pilot.database.models.user`/User#","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.user`/User#","language":"python","range":[5,0,7,26],"content":"class User(BaseModel):\n    email = CharField(unique=True)\n    password = CharField()","file":"/pilot/database/models/user.py","fileHash":"9743d554804d517903c343767b09bf6b86ab3e39f9e140c46b2b4a9caf9dca43","hash":"aa91b4eafbac40edc7db6b054efd24ef133751005eb33e60b754a4f1969e4d82","processedContent":"class User(BaseModel): #This code defines a base model class that includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used.\n    email = CharField(unique=True)\n    password = CharField()","documentation":"This code defines a base model class for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The Meta class sets the database to be used."}},{"key":"scip-python python temp indexer `pilot.database.models.app`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.app`/__init__:","language":"python","range":[0,0,10,33],"content":"from peewee import ForeignKeyField, CharField\n\nfrom database.models.components.base_models import BaseModel\nfrom database.models.user import User\n\n\nclass App(BaseModel):\n    user = ForeignKeyField(User, backref='apps')\n    app_type = CharField(null=True)\n    name = CharField(null=True)\n    status = CharField(null=True)","file":"/pilot/database/models/app.py","fileHash":"c47023863876c4a572c5eb6c27f9b54431964c116731246ac20b16ce6b8e1ae0","hash":"c47023863876c4a572c5eb6c27f9b54431964c116731246ac20b16ce6b8e1ae0","processedContent":"from peewee import ForeignKeyField, CharField #undefined\n\nfrom database.models.components.base_models import BaseModel\n\"\"\"\nscip-python python temp indexer `pilot.database.models.components.base_models`/__init__:: The code defines a base model class for a database, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes functions to create a PostgreSQL or SQLite database connection based on the environment variable `DATABASE_TYPE`.\nscip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#: This code defines a base model class that includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used.\n\"\"\"\nfrom database.models.user import User\n\"\"\"\nscip-python python temp indexer `pilot.database.models.user`/__init__:: The code defines a base model class for a database and a user entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used.\nscip-python python temp indexer `pilot.database.models.user`/User#: This code defines a base model class for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The Meta class sets the database to be used.\n\"\"\"\n\n\nclass App(BaseModel):\n    user = ForeignKeyField(User, backref='apps')\n    app_type = CharField(null=True)\n    name = CharField(null=True)\n    status = CharField(null=True)","documentation":"The code defines a base model class for an application, with fields for a user ID, app type, name, and status. It also includes a ForeignKeyField to the User model and a CharField for each of these fields."}},{"key":"scip-python python temp indexer `pilot.database.models.app`/App#","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.app`/App#","language":"python","range":[6,0,10,33],"content":"class App(BaseModel):\n    user = ForeignKeyField(User, backref='apps')\n    app_type = CharField(null=True)\n    name = CharField(null=True)\n    status = CharField(null=True)","file":"/pilot/database/models/app.py","fileHash":"c47023863876c4a572c5eb6c27f9b54431964c116731246ac20b16ce6b8e1ae0","hash":"b5b06f17e8179d2cf26f623ed5c13bcafbfd8e66244b555420a01d6a5c56bb73","processedContent":"class App(BaseModel): #This code defines a base model class that includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used.\n    user = ForeignKeyField(User, backref='apps') #This code defines a base model class for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The Meta class sets the database to be used.\n    app_type = CharField(null=True)\n    name = CharField(null=True)\n    status = CharField(null=True)","documentation":"This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update."}},{"key":"scip-python python temp indexer `pilot.database.models.project_description`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.project_description`/__init__:","language":"python","range":[0,0,10,0],"content":"from peewee import TextField\nfrom database.models.components.progress_step import ProgressStep\n\n\nclass ProjectDescription(ProgressStep):\n    prompt = TextField()\n    summary = TextField()\n\n    class Meta:\n        table_name = 'project_description'\n","file":"/pilot/database/models/project_description.py","fileHash":"919aac71ebbd9be03820c4507431e9f9eef6cb7775721bc7264e375326d0cb6a","hash":"919aac71ebbd9be03820c4507431e9f9eef6cb7775721bc7264e375326d0cb6a","processedContent":"from peewee import TextField #undefined\nfrom database.models.components.progress_step import ProgressStep\n\"\"\"\nscip-python python temp indexer `pilot.database.models.components.progress_step`/__init__:: The code defines a model class called ProgressStep, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\nscip-python python temp indexer `pilot.database.models.components.progress_step`/ProgressStep#: This code defines a model class called ProgressStep, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The code also defines custom field types in Django called JSONField, which allow for storing and retrieving JSON data in the database, and it uses the json.loads() method to convert the value to JSON format.\n\"\"\"\n\n\nclass ProjectDescription(ProgressStep):\n    \"\"\"This code defines a model class called ProgressStep in Django, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\"\"\"\n    pass\n","documentation":"This code defines a model class called ProgressStep in Django, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update."}},{"key":"scip-python python temp indexer `pilot.database.models.project_description`/ProjectDescription#","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.project_description`/ProjectDescription#","language":"python","range":[4,0,9,42],"content":"class ProjectDescription(ProgressStep):\n    prompt = TextField()\n    summary = TextField()\n\n    class Meta:\n        table_name = 'project_description'","file":"/pilot/database/models/project_description.py","fileHash":"919aac71ebbd9be03820c4507431e9f9eef6cb7775721bc7264e375326d0cb6a","hash":"8bd2e1c6b26f4609c8a2e539fefa7d649822a5c0e3958f029adee0075cf96cc9","processedContent":"class ProjectDescription(ProgressStep): #This code defines a model class called ProgressStep, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The code also defines custom field types in Django called JSONField, which allow for storing and retrieving JSON data in the database, and it uses the json.loads() method to convert the value to JSON format.\n    prompt = TextField()\n    summary = TextField()\n\n    class Meta:\n        table_name = 'project_description'","documentation":"This code defines a model class called ProgressStep in Django, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update."}},{"key":"scip-python python temp indexer `pilot.database.models.user_stories`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.user_stories`/__init__:","language":"python","range":[0,0,13,0],"content":"from database.config import DATABASE_TYPE\nfrom database.models.components.progress_step import ProgressStep\nfrom database.models.components.sqlite_middlewares import JSONField\nfrom playhouse.postgres_ext import BinaryJSONField\n\n\nclass UserStories(ProgressStep):\n    if DATABASE_TYPE == 'postgres':\n        user_stories = BinaryJSONField()\n    else:\n        user_stories = JSONField()  # Custom JSON field for SQLite\n    class Meta:\n        table_name = 'user_stories'\n","file":"/pilot/database/models/user_stories.py","fileHash":"b16c8ef59e705218adceaf4c4d233b9999de130f332cc8b121671fcee7845e8d","hash":"b16c8ef59e705218adceaf4c4d233b9999de130f332cc8b121671fcee7845e8d","processedContent":"from database.config import DATABASE_TYPE\n\"\"\"\nscip-python python temp indexer `pilot.database.config`/__init__:: The code defines environment variables for a database connection, using the `os.getenv()` function to retrieve the values from the operating system environment.\nscip-python python temp indexer `pilot.database.config`/DATABASE_TYPE.: undefined\n\"\"\"\nfrom database.models.components.progress_step import ProgressStep\n\"\"\"\nscip-python python temp indexer `pilot.database.models.components.progress_step`/__init__:: The code defines a model class called ProgressStep, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\nscip-python python temp indexer `pilot.database.models.components.progress_step`/ProgressStep#: This code defines a model class called ProgressStep, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The code also defines custom field types in Django called JSONField, which allow for storing and retrieving JSON data in the database, and it uses the json.loads() method to convert the value to JSON format.\n\"\"\"\nfrom database.models.components.sqlite_middlewares import JSONField\n\"\"\"\nscip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/__init__:: This code defines a custom field type in Django called JSONField, which allows for storing and retrieving JSON data in the database.\nscip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#: This code defines a custom field type in Django called JSONField. It allows for storing and retrieving JSON data in the database, and it uses the json.loads() method to convert the value to JSON format.\n\"\"\"\nfrom playhouse.postgres_ext import BinaryJSONField #undefined\n\n\nclass UserStories(ProgressStep):\n    \"\"\"This code defines a model class called UserStories in Django, which includes fields for a user entity and custom JSON field for storing and retrieving JSON data in the database.\"\"\"\n    pass\n","documentation":"The code defines a Django model class called UserStories, which includes fields for a user entity and a custom JSON field for storing and retrieving JSON data in the database."}},{"key":"scip-python python temp indexer `pilot.database.models.user_stories`/UserStories#","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.user_stories`/UserStories#","language":"python","range":[6,0,12,35],"content":"class UserStories(ProgressStep):\n    if DATABASE_TYPE == 'postgres':\n        user_stories = BinaryJSONField()\n    else:\n        user_stories = JSONField()  # Custom JSON field for SQLite\n    class Meta:\n        table_name = 'user_stories'","file":"/pilot/database/models/user_stories.py","fileHash":"b16c8ef59e705218adceaf4c4d233b9999de130f332cc8b121671fcee7845e8d","hash":"8018cbefaffc50113b1230d337c1fdd729763a9e1d46d9b7d91c702f02548b60","processedContent":"class UserStories(ProgressStep): #This code defines a model class called ProgressStep, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The code also defines custom field types in Django called JSONField, which allow for storing and retrieving JSON data in the database, and it uses the json.loads() method to convert the value to JSON format.\n    if DATABASE_TYPE == 'postgres': #undefined\n        user_stories = BinaryJSONField()\n    else:\n        user_stories = JSONField()  # Custom JSON field for SQLite\n        \"\"\"\n        scip-python python temp indexer `pilot.database.models.user_stories`/UserStories#user_stories.: undefined\n        scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#: This code defines a custom field type in Django called JSONField. It allows for storing and retrieving JSON data in the database, and it uses the json.loads() method to convert the value to JSON format.\n        \"\"\"\n    class Meta:\n        table_name = 'user_stories'","documentation":"This code defines a model class called UserStories in Django, which includes fields for a user entity and custom JSON field for storing and retrieving JSON data in the database."}},{"key":"scip-python python temp indexer `pilot.database.models.user_tasks`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.user_tasks`/__init__:","language":"python","range":[0,0,14,0],"content":"from database.config import DATABASE_TYPE\nfrom database.models.components.progress_step import ProgressStep\nfrom database.models.components.sqlite_middlewares import JSONField\nfrom playhouse.postgres_ext import BinaryJSONField\n\n\nclass UserTasks(ProgressStep):\n    if DATABASE_TYPE == 'postgres':\n        user_tasks = BinaryJSONField()\n    else:\n        user_tasks = JSONField()  # Custom JSON field for SQLite\n\n    class Meta:\n        table_name = 'user_tasks'\n","file":"/pilot/database/models/user_tasks.py","fileHash":"307a1cd7c81517a3dba28b5bac30b7a1d24021b349b5bf769a21cd9285f15cda","hash":"307a1cd7c81517a3dba28b5bac30b7a1d24021b349b5bf769a21cd9285f15cda","processedContent":"from database.config import DATABASE_TYPE\n\"\"\"\nscip-python python temp indexer `pilot.database.config`/__init__:: The code defines environment variables for a database connection, using the `os.getenv()` function to retrieve the values from the operating system environment.\nscip-python python temp indexer `pilot.database.config`/DATABASE_TYPE.: undefined\n\"\"\"\nfrom database.models.components.progress_step import ProgressStep\n\"\"\"\nscip-python python temp indexer `pilot.database.models.components.progress_step`/__init__:: The code defines a model class called ProgressStep, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\nscip-python python temp indexer `pilot.database.models.components.progress_step`/ProgressStep#: This code defines a model class called ProgressStep, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The code also defines custom field types in Django called JSONField, which allow for storing and retrieving JSON data in the database, and it uses the json.loads() method to convert the value to JSON format.\n\"\"\"\nfrom database.models.components.sqlite_middlewares import JSONField\n\"\"\"\nscip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/__init__:: This code defines a custom field type in Django called JSONField, which allows for storing and retrieving JSON data in the database.\nscip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#: This code defines a custom field type in Django called JSONField. It allows for storing and retrieving JSON data in the database, and it uses the json.loads() method to convert the value to JSON format.\n\"\"\"\nfrom playhouse.postgres_ext import BinaryJSONField #undefined\n\n\nclass UserTasks(ProgressStep):\n    \"\"\"This code defines a model class called UserTasks in Django, which includes fields for a user entity and custom JSON field for storing and retrieving data in the database.\"\"\"\n    pass\n","documentation":"The code defines a Django model class called UserTasks, which includes fields for a user entity and a custom JSON field for storing and retrieving data in the database."}},{"key":"scip-python python temp indexer `pilot.database.models.user_tasks`/UserTasks#","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.user_tasks`/UserTasks#","language":"python","range":[6,0,13,33],"content":"class UserTasks(ProgressStep):\n    if DATABASE_TYPE == 'postgres':\n        user_tasks = BinaryJSONField()\n    else:\n        user_tasks = JSONField()  # Custom JSON field for SQLite\n\n    class Meta:\n        table_name = 'user_tasks'","file":"/pilot/database/models/user_tasks.py","fileHash":"307a1cd7c81517a3dba28b5bac30b7a1d24021b349b5bf769a21cd9285f15cda","hash":"17648cd3446c59f87659603adf752004747f3da77745b5bc06373dfdaf0a22ea","processedContent":"class UserTasks(ProgressStep): #This code defines a model class called ProgressStep, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The code also defines custom field types in Django called JSONField, which allow for storing and retrieving JSON data in the database, and it uses the json.loads() method to convert the value to JSON format.\n    if DATABASE_TYPE == 'postgres': #undefined\n        user_tasks = BinaryJSONField()\n    else:\n        user_tasks = JSONField()  # Custom JSON field for SQLite\n        \"\"\"\n        scip-python python temp indexer `pilot.database.models.user_tasks`/UserTasks#user_tasks.: undefined\n        scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#: This code defines a custom field type in Django called JSONField. It allows for storing and retrieving JSON data in the database, and it uses the json.loads() method to convert the value to JSON format.\n        \"\"\"\n\n    class Meta:\n        table_name = 'user_tasks'","documentation":"This code defines a model class called UserTasks in Django, which includes fields for a user entity and custom JSON field for storing and retrieving data in the database."}},{"key":"scip-python python temp indexer `pilot.database.models.architecture`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.architecture`/__init__:","language":"python","range":[0,0,15,0],"content":"# from peewee import\nfrom database.config import DATABASE_TYPE\nfrom database.models.components.progress_step import ProgressStep\nfrom database.models.components.sqlite_middlewares import JSONField\nfrom playhouse.postgres_ext import BinaryJSONField\n\n\nclass Architecture(ProgressStep):\n    if DATABASE_TYPE == 'postgres':\n        architecture = BinaryJSONField()\n    else:\n        architecture = JSONField()  # Custom JSON field for SQLite\n\n    class Meta:\n        table_name = 'architecture'\n","file":"/pilot/database/models/architecture.py","fileHash":"fd596a9a918b19d618b92e4ba1414580e7e3b8b6038b5ba0fd20d752f2a588e4","hash":"fd596a9a918b19d618b92e4ba1414580e7e3b8b6038b5ba0fd20d752f2a588e4","processedContent":"# from peewee import\nfrom database.config import DATABASE_TYPE\n\"\"\"\nscip-python python temp indexer `pilot.database.config`/__init__:: The code defines environment variables for a database connection, using the `os.getenv()` function to retrieve the values from the operating system environment.\nscip-python python temp indexer `pilot.database.config`/DATABASE_TYPE.: undefined\n\"\"\"\nfrom database.models.components.progress_step import ProgressStep\n\"\"\"\nscip-python python temp indexer `pilot.database.models.components.progress_step`/__init__:: The code defines a model class called ProgressStep, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\nscip-python python temp indexer `pilot.database.models.components.progress_step`/ProgressStep#: This code defines a model class called ProgressStep, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The code also defines custom field types in Django called JSONField, which allow for storing and retrieving JSON data in the database, and it uses the json.loads() method to convert the value to JSON format.\n\"\"\"\nfrom database.models.components.sqlite_middlewares import JSONField\n\"\"\"\nscip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/__init__:: This code defines a custom field type in Django called JSONField, which allows for storing and retrieving JSON data in the database.\nscip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#: This code defines a custom field type in Django called JSONField. It allows for storing and retrieving JSON data in the database, and it uses the json.loads() method to convert the value to JSON format.\n\"\"\"\nfrom playhouse.postgres_ext import BinaryJSONField #undefined\n\n\nclass Architecture(ProgressStep):\n    \"\"\"This code defines a model class called ProgressStep in Django, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The code also defines custom field types in Django called JSONField, which allow for storing and retrieving JSON data in the database, and it uses the json.loads() method to convert the value to JSON format.\"\"\"\n    pass\n","documentation":"The code defines a model class called ProgressStep in Django, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update."}},{"key":"scip-python python temp indexer `pilot.database.models.architecture`/Architecture#","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.architecture`/Architecture#","language":"python","range":[7,0,14,35],"content":"class Architecture(ProgressStep):\n    if DATABASE_TYPE == 'postgres':\n        architecture = BinaryJSONField()\n    else:\n        architecture = JSONField()  # Custom JSON field for SQLite\n\n    class Meta:\n        table_name = 'architecture'","file":"/pilot/database/models/architecture.py","fileHash":"fd596a9a918b19d618b92e4ba1414580e7e3b8b6038b5ba0fd20d752f2a588e4","hash":"ee66eb826dff858b953fe7b2f510c19a8fe1ec54950a18d8a1abeed832060677","processedContent":"class Architecture(ProgressStep): #This code defines a model class called ProgressStep, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The code also defines custom field types in Django called JSONField, which allow for storing and retrieving JSON data in the database, and it uses the json.loads() method to convert the value to JSON format.\n    if DATABASE_TYPE == 'postgres': #undefined\n        architecture = BinaryJSONField()\n    else:\n        architecture = JSONField()  # Custom JSON field for SQLite\n        \"\"\"\n        scip-python python temp indexer `pilot.database.models.architecture`/Architecture#architecture.: undefined\n        scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#: This code defines a custom field type in Django called JSONField. It allows for storing and retrieving JSON data in the database, and it uses the json.loads() method to convert the value to JSON format.\n        \"\"\"\n\n    class Meta:\n        table_name = 'architecture'","documentation":"This code defines a model class called ProgressStep in Django, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The code also defines custom field types in Django called JSONField, which allow for storing and retrieving JSON data in the database, and it uses the json.loads() method to convert the value to JSON format."}},{"key":"scip-python python temp indexer `pilot.database.models.development_planning`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.development_planning`/__init__:","language":"python","range":[0,0,14,0],"content":"from database.config import DATABASE_TYPE\nfrom database.models.components.progress_step import ProgressStep\nfrom database.models.components.sqlite_middlewares import JSONField\nfrom playhouse.postgres_ext import BinaryJSONField\n\n\nclass DevelopmentPlanning(ProgressStep):\n    if DATABASE_TYPE == 'postgres':\n        development_plan = BinaryJSONField()\n    else:\n        development_plan = JSONField()  # Custom JSON field for SQLite\n\n    class Meta:\n        table_name = 'development_planning'\n","file":"/pilot/database/models/development_planning.py","fileHash":"019406fce9f36106a24eb3d6d29a1b46d8cb7997dcf581f6fa1089a20e838d34","hash":"019406fce9f36106a24eb3d6d29a1b46d8cb7997dcf581f6fa1089a20e838d34","processedContent":"from database.config import DATABASE_TYPE\n\"\"\"\nscip-python python temp indexer `pilot.database.config`/__init__:: The code defines environment variables for a database connection, using the `os.getenv()` function to retrieve the values from the operating system environment.\nscip-python python temp indexer `pilot.database.config`/DATABASE_TYPE.: undefined\n\"\"\"\nfrom database.models.components.progress_step import ProgressStep\n\"\"\"\nscip-python python temp indexer `pilot.database.models.components.progress_step`/__init__:: The code defines a model class called ProgressStep, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\nscip-python python temp indexer `pilot.database.models.components.progress_step`/ProgressStep#: This code defines a model class called ProgressStep, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The code also defines custom field types in Django called JSONField, which allow for storing and retrieving JSON data in the database, and it uses the json.loads() method to convert the value to JSON format.\n\"\"\"\nfrom database.models.components.sqlite_middlewares import JSONField\n\"\"\"\nscip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/__init__:: This code defines a custom field type in Django called JSONField, which allows for storing and retrieving JSON data in the database.\nscip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#: This code defines a custom field type in Django called JSONField. It allows for storing and retrieving JSON data in the database, and it uses the json.loads() method to convert the value to JSON format.\n\"\"\"\nfrom playhouse.postgres_ext import BinaryJSONField #undefined\n\n\nclass DevelopmentPlanning(ProgressStep):\n    \"\"\"This code defines a model class called DevelopmentPlanning in Django, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The code also defines custom field types in Django called JSONField, which allow for storing and retrieving JSON data in the database, and it uses the json.loads() method to convert the value to JSON format.\"\"\"\n    pass\n","documentation":"The code defines a model class called DevelopmentPlanning in Django, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update."}},{"key":"scip-python python temp indexer `pilot.database.models.development_planning`/DevelopmentPlanning#","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.development_planning`/DevelopmentPlanning#","language":"python","range":[6,0,13,43],"content":"class DevelopmentPlanning(ProgressStep):\n    if DATABASE_TYPE == 'postgres':\n        development_plan = BinaryJSONField()\n    else:\n        development_plan = JSONField()  # Custom JSON field for SQLite\n\n    class Meta:\n        table_name = 'development_planning'","file":"/pilot/database/models/development_planning.py","fileHash":"019406fce9f36106a24eb3d6d29a1b46d8cb7997dcf581f6fa1089a20e838d34","hash":"fa65740e4a6b8cb31d2b9aa05982f705b08b17995f76aa1251ce6c21b6803e2c","processedContent":"class DevelopmentPlanning(ProgressStep): #This code defines a model class called ProgressStep, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The code also defines custom field types in Django called JSONField, which allow for storing and retrieving JSON data in the database, and it uses the json.loads() method to convert the value to JSON format.\n    if DATABASE_TYPE == 'postgres': #undefined\n        development_plan = BinaryJSONField()\n    else:\n        development_plan = JSONField()  # Custom JSON field for SQLite\n        \"\"\"\n        scip-python python temp indexer `pilot.database.models.development_planning`/DevelopmentPlanning#development_plan.: undefined\n        scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#: This code defines a custom field type in Django called JSONField. It allows for storing and retrieving JSON data in the database, and it uses the json.loads() method to convert the value to JSON format.\n        \"\"\"\n\n    class Meta:\n        table_name = 'development_planning'","documentation":"This code defines a model class called DevelopmentPlanning in Django, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The code also defines custom field types in Django called JSONField, which allow for storing and retrieving JSON data in the database, and it uses the json.loads() method to convert the value to JSON format."}},{"key":"scip-python python temp indexer `pilot.database.models.development_steps`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.development_steps`/__init__:","language":"python","range":[0,0,32,0],"content":"from peewee import ForeignKeyField, AutoField, TextField, IntegerField, CharField\nfrom database.config import DATABASE_TYPE\nfrom database.models.components.base_models import BaseModel\nfrom database.models.app import App\nfrom database.models.components.sqlite_middlewares import JSONField\nfrom playhouse.postgres_ext import BinaryJSONField\n\n\nclass DevelopmentSteps(BaseModel):\n    id = AutoField()  # This will serve as the primary key\n    app = ForeignKeyField(App, on_delete='CASCADE')\n    prompt_path = TextField(null=True)\n    llm_req_num = IntegerField(null=True)\n    token_limit_exception_raised = TextField(null=True)\n\n    if DATABASE_TYPE == 'postgres':\n        messages = BinaryJSONField(null=True)\n        llm_response = BinaryJSONField(null=False)\n        prompt_data = BinaryJSONField(null=True)\n    else:\n        messages = JSONField(null=True)  # Custom JSON field for SQLite\n        llm_response = JSONField(null=False)  # Custom JSON field for SQLite\n        prompt_data = JSONField(null=True)\n\n    previous_step = ForeignKeyField('self', null=True, column_name='previous_step')\n    high_level_step = CharField(null=True)\n\n    class Meta:\n        table_name = 'development_steps'\n        indexes = (\n            (('app', 'previous_step', 'high_level_step'), True),\n        )\n","file":"/pilot/database/models/development_steps.py","fileHash":"20ba96b7f16b0d8e496ca094d54619c122dbaf00fc2e8f82dd4053226ce0944e","hash":"20ba96b7f16b0d8e496ca094d54619c122dbaf00fc2e8f82dd4053226ce0944e","processedContent":"from peewee import ForeignKeyField, AutoField, TextField, IntegerField, CharField #undefined\nfrom database.config import DATABASE_TYPE\n\"\"\"\nscip-python python temp indexer `pilot.database.config`/__init__:: The code defines environment variables for a database connection, using the `os.getenv()` function to retrieve the values from the operating system environment.\nscip-python python temp indexer `pilot.database.config`/DATABASE_TYPE.: undefined\n\"\"\"\nfrom database.models.components.base_models import BaseModel\n\"\"\"\nscip-python python temp indexer `pilot.database.models.components.base_models`/__init__:: The code defines a base model class for a database, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes functions to create a PostgreSQL or SQLite database connection based on the environment variable `DATABASE_TYPE`.\nscip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#: This code defines a base model class that includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used.\n\"\"\"\nfrom database.models.app import App\n\"\"\"\nscip-python python temp indexer `pilot.database.models.app`/__init__:: The code defines a base model class for an application, with fields for a user ID, app type, name, and status. It also includes a ForeignKeyField to the User model and a CharField for each of these fields.\nscip-python python temp indexer `pilot.database.models.app`/App#: This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n\"\"\"\nfrom database.models.components.sqlite_middlewares import JSONField\n\"\"\"\nscip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/__init__:: This code defines a custom field type in Django called JSONField, which allows for storing and retrieving JSON data in the database.\nscip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#: This code defines a custom field type in Django called JSONField. It allows for storing and retrieving JSON data in the database, and it uses the json.loads() method to convert the value to JSON format.\n\"\"\"\nfrom playhouse.postgres_ext import BinaryJSONField #undefined\n\n\nclass DevelopmentSteps(BaseModel):\n    \"\"\"This code defines a model for the development steps table in the database. It includes fields for an ID, creation and update timestamps, and a foreign key to the app entity. The model also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\"\"\"\n    pass\n","documentation":"The code defines a model for the development steps table in a database, with fields for an ID, creation and update timestamps, and a foreign key to the app entity. It also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field."}},{"key":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#","language":"python","range":[8,0,31,9],"content":"class DevelopmentSteps(BaseModel):\n    id = AutoField()  # This will serve as the primary key\n    app = ForeignKeyField(App, on_delete='CASCADE')\n    prompt_path = TextField(null=True)\n    llm_req_num = IntegerField(null=True)\n    token_limit_exception_raised = TextField(null=True)\n\n    if DATABASE_TYPE == 'postgres':\n        messages = BinaryJSONField(null=True)\n        llm_response = BinaryJSONField(null=False)\n        prompt_data = BinaryJSONField(null=True)\n    else:\n        messages = JSONField(null=True)  # Custom JSON field for SQLite\n        llm_response = JSONField(null=False)  # Custom JSON field for SQLite\n        prompt_data = JSONField(null=True)\n\n    previous_step = ForeignKeyField('self', null=True, column_name='previous_step')\n    high_level_step = CharField(null=True)\n\n    class Meta:\n        table_name = 'development_steps'\n        indexes = (\n            (('app', 'previous_step', 'high_level_step'), True),\n        )","file":"/pilot/database/models/development_steps.py","fileHash":"20ba96b7f16b0d8e496ca094d54619c122dbaf00fc2e8f82dd4053226ce0944e","hash":"40290d4d5c8fcc49472e165cbf20bdebdb36e6ea75c21a900dc61648b5eb80c4","processedContent":"class DevelopmentSteps(BaseModel): #This code defines a base model class that includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used.\n    id = AutoField()  # This will serve as the primary key\n    app = ForeignKeyField(App, on_delete='CASCADE') #This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n    prompt_path = TextField(null=True)\n    llm_req_num = IntegerField(null=True)\n    token_limit_exception_raised = TextField(null=True)\n\n    if DATABASE_TYPE == 'postgres': #undefined\n        messages = BinaryJSONField(null=True)\n        llm_response = BinaryJSONField(null=False)\n        prompt_data = BinaryJSONField(null=True)\n    else:\n        messages = JSONField(null=True)  # Custom JSON field for SQLite\n        \"\"\"\n        scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#messages.: undefined\n        scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#: This code defines a custom field type in Django called JSONField. It allows for storing and retrieving JSON data in the database, and it uses the json.loads() method to convert the value to JSON format.\n        \"\"\"\n        llm_response = JSONField(null=False)  # Custom JSON field for SQLite\n        \"\"\"\n        scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#: This code defines a custom field type in Django called JSONField. It allows for storing and retrieving JSON data in the database, and it uses the json.loads() method to convert the value to JSON format.\n        scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#llm_response.: undefined\n        \"\"\"\n        prompt_data = JSONField(null=True)\n        \"\"\"\n        scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#: This code defines a custom field type in Django called JSONField. It allows for storing and retrieving JSON data in the database, and it uses the json.loads() method to convert the value to JSON format.\n        scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#prompt_data.: undefined\n        \"\"\"\n\n    previous_step = ForeignKeyField('self', null=True, column_name='previous_step')\n    high_level_step = CharField(null=True)\n\n    class Meta:\n        table_name = 'development_steps'\n        indexes = (\n            (('app', 'previous_step', 'high_level_step'), True),\n        )","documentation":"This code defines a model for the development steps table in the database. It includes fields for an ID, creation and update timestamps, and a foreign key to the app entity. The model also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field."}},{"key":"scip-python python temp indexer `pilot.database.models.environment_setup`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.environment_setup`/__init__:","language":"python","range":[0,0,6,0],"content":"from database.models.components.progress_step import ProgressStep\n\n\nclass EnvironmentSetup(ProgressStep):\n    class Meta:\n        table_name = 'environment_setup'\n","file":"/pilot/database/models/environment_setup.py","fileHash":"12ac77c1d28174fb9a70213f522e1231aed88333a9410fdf67d88d58a80bc210","hash":"12ac77c1d28174fb9a70213f522e1231aed88333a9410fdf67d88d58a80bc210","processedContent":"from database.models.components.progress_step import ProgressStep\n\"\"\"\nscip-python python temp indexer `pilot.database.models.components.progress_step`/__init__:: The code defines a model class called ProgressStep, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\nscip-python python temp indexer `pilot.database.models.components.progress_step`/ProgressStep#: This code defines a model class called ProgressStep, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The code also defines custom field types in Django called JSONField, which allow for storing and retrieving JSON data in the database, and it uses the json.loads() method to convert the value to JSON format.\n\"\"\"\n\n\nclass EnvironmentSetup(ProgressStep):\n    \"\"\"This code defines a model class called ProgressStep in Django, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\"\"\"\n    pass\n","documentation":"The code defines a model class called ProgressStep in Django, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update."}},{"key":"scip-python python temp indexer `pilot.database.models.environment_setup`/EnvironmentSetup#","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.environment_setup`/EnvironmentSetup#","language":"python","range":[3,0,5,40],"content":"class EnvironmentSetup(ProgressStep):\n    class Meta:\n        table_name = 'environment_setup'","file":"/pilot/database/models/environment_setup.py","fileHash":"12ac77c1d28174fb9a70213f522e1231aed88333a9410fdf67d88d58a80bc210","hash":"deb9b12751f2061137c35506595652e79a267425f3de79620dd3d6b58a691793","processedContent":"class EnvironmentSetup(ProgressStep): #This code defines a model class called ProgressStep, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The code also defines custom field types in Django called JSONField, which allow for storing and retrieving JSON data in the database, and it uses the json.loads() method to convert the value to JSON format.\n    class Meta:\n        table_name = 'environment_setup'","documentation":"This code defines a model class called ProgressStep in Django, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update."}},{"key":"scip-python python temp indexer `pilot.database.models.development`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.development`/__init__:","language":"python","range":[0,0,6,0],"content":"from database.models.components.progress_step import ProgressStep\n\n\nclass Development(ProgressStep):\n    class Meta:\n        table_name = 'development'\n","file":"/pilot/database/models/development.py","fileHash":"4477164fa75b0b9fdaefc02bd7002f55f750dc58b695bd35d1ea762d287bb9cd","hash":"4477164fa75b0b9fdaefc02bd7002f55f750dc58b695bd35d1ea762d287bb9cd","processedContent":"from database.models.components.progress_step import ProgressStep\n\"\"\"\nscip-python python temp indexer `pilot.database.models.components.progress_step`/__init__:: The code defines a model class called ProgressStep, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\nscip-python python temp indexer `pilot.database.models.components.progress_step`/ProgressStep#: This code defines a model class called ProgressStep, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The code also defines custom field types in Django called JSONField, which allow for storing and retrieving JSON data in the database, and it uses the json.loads() method to convert the value to JSON format.\n\"\"\"\n\n\nclass Development(ProgressStep):\n    \"\"\"This code defines a model class called ProgressStep in Django, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\"\"\"\n    pass\n","documentation":"This code defines a model class called ProgressStep in Django, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update."}},{"key":"scip-python python temp indexer `pilot.database.models.development`/Development#","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.development`/Development#","language":"python","range":[3,0,5,34],"content":"class Development(ProgressStep):\n    class Meta:\n        table_name = 'development'","file":"/pilot/database/models/development.py","fileHash":"4477164fa75b0b9fdaefc02bd7002f55f750dc58b695bd35d1ea762d287bb9cd","hash":"5ac2ddeee217b08ca1f54341d241e9ffc99784424573702a5becf5551e07270a","processedContent":"class Development(ProgressStep): #This code defines a model class called ProgressStep, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The code also defines custom field types in Django called JSONField, which allow for storing and retrieving JSON data in the database, and it uses the json.loads() method to convert the value to JSON format.\n    class Meta:\n        table_name = 'development'","documentation":"This code defines a model class called ProgressStep in Django, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update."}},{"key":"scip-python python temp indexer `pilot.database.models.file_snapshot`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.file_snapshot`/__init__:","language":"python","range":[0,0,46,0],"content":"import logging\n\nfrom peewee import ForeignKeyField, BlobField\n\nfrom database.models.components.base_models import BaseModel\nfrom database.models.development_steps import DevelopmentSteps\nfrom database.models.app import App\nfrom database.models.files import File\n\nlog = logging.getLogger(__name__)\n\n\nclass SmartBlobField(BlobField):\n    \"\"\"\n    A binary blob field that can also accept/return utf-8 strings.\n\n    This is a temporary workaround for the fact that we're passing either binary\n    or string contents to the database. Once this is cleaned up, we should only\n    accept binary content and explcitily convert from/to strings as needed.\n    \"\"\"\n\n    def db_value(self, value):\n        if isinstance(value, str):\n            log.warning(\"FileSnapshot content is a string, expected bytes, working around it.\")\n            value = value.encode(\"utf-8\")\n        return super().db_value(value)\n\n    def python_value(self, value):\n        val = bytes(super().python_value(value))\n        try:\n            return val.decode(\"utf-8\")\n        except UnicodeDecodeError:\n            return val\n\n\nclass FileSnapshot(BaseModel):\n    app = ForeignKeyField(App, on_delete='CASCADE')\n    development_step = ForeignKeyField(DevelopmentSteps, backref='files', on_delete='CASCADE')\n    file = ForeignKeyField(File, on_delete='CASCADE', null=True)\n    content = SmartBlobField()\n\n    class Meta:\n        table_name = 'file_snapshot'\n        indexes = (\n            (('development_step', 'file'), True),\n        )\n","file":"/pilot/database/models/file_snapshot.py","fileHash":"89101027010a30dc19158cb70020c57012d9d7adb058a8d55dad119a24d869c5","hash":"89101027010a30dc19158cb70020c57012d9d7adb058a8d55dad119a24d869c5","processedContent":"import logging #undefined\n\nfrom peewee import ForeignKeyField, BlobField #undefined\n\nfrom database.models.components.base_models import BaseModel\n\"\"\"\nscip-python python temp indexer `pilot.database.models.components.base_models`/__init__:: The code defines a base model class for a database, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes functions to create a PostgreSQL or SQLite database connection based on the environment variable `DATABASE_TYPE`.\nscip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#: This code defines a base model class that includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used.\n\"\"\"\nfrom database.models.development_steps import DevelopmentSteps\n\"\"\"\nscip-python python temp indexer `pilot.database.models.development_steps`/__init__:: The code defines a model for the development steps table in a database, with fields for an ID, creation and update timestamps, and a foreign key to the app entity. It also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\nscip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#: This code defines a model for the development steps table in the database. It includes fields for an ID, creation and update timestamps, and a foreign key to the app entity. The model also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\n\"\"\"\nfrom database.models.app import App\n\"\"\"\nscip-python python temp indexer `pilot.database.models.app`/__init__:: The code defines a base model class for an application, with fields for a user ID, app type, name, and status. It also includes a ForeignKeyField to the User model and a CharField for each of these fields.\nscip-python python temp indexer `pilot.database.models.app`/App#: This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n\"\"\"\nfrom database.models.files import File\n\"\"\"\nscip-python python temp indexer `pilot.database.models.files`/__init__:: The code defines a base model class for an app entity with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\nscip-python python temp indexer `pilot.database.models.files`/File#: This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n\"\"\"\n\nlog = logging.getLogger(__name__)\n\"\"\"\nscip-python python python-stdlib 3.11 logging/__init__:: undefined\nscip-python python python-stdlib 3.11 logging/getLogger().: undefined\nscip-python python temp indexer `pilot.database.models.file_snapshot`/: undefined\n\"\"\"\n\n\nclass SmartBlobField(BlobField):\n    \"\"\"This code defines a custom field for storing binary data in a database, which can also accept and return UTF-8 strings. It's a temporary workaround until the underlying issue is fixed.\"\"\"\n    pass\n\n\nclass FileSnapshot(BaseModel):\n    \"\"\"This code defines a model for a file snapshot entity in a database, with fields for an ID, creation and update timestamps, and foreign keys to other entities such as apps, development steps, and files. It also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\"\"\"\n    pass\n","documentation":"The code defines a base model class for a database, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes functions to create a PostgreSQL or SQLite database connection based on the environment variable `DATABASE_TYPE`."}},{"key":"scip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#","language":"python","range":[35,0,45,9],"content":"class FileSnapshot(BaseModel):\n    app = ForeignKeyField(App, on_delete='CASCADE')\n    development_step = ForeignKeyField(DevelopmentSteps, backref='files', on_delete='CASCADE')\n    file = ForeignKeyField(File, on_delete='CASCADE', null=True)\n    content = SmartBlobField()\n\n    class Meta:\n        table_name = 'file_snapshot'\n        indexes = (\n            (('development_step', 'file'), True),\n        )","file":"/pilot/database/models/file_snapshot.py","fileHash":"89101027010a30dc19158cb70020c57012d9d7adb058a8d55dad119a24d869c5","hash":"526fd6284072f2c238d262fd1e1bae2bd0c9e6f3849b09283ad418adab6a62e5","processedContent":"class FileSnapshot(BaseModel): #This code defines a base model class that includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used.\n    app = ForeignKeyField(App, on_delete='CASCADE') #This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n    development_step = ForeignKeyField(DevelopmentSteps, backref='files', on_delete='CASCADE') #This code defines a model for the development steps table in the database. It includes fields for an ID, creation and update timestamps, and a foreign key to the app entity. The model also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\n    file = ForeignKeyField(File, on_delete='CASCADE', null=True) #This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n    content = SmartBlobField() #This code defines a custom field for storing binary data in a database, which can also accept and return UTF-8 strings. It's a temporary workaround until the underlying issue is fixed.\n\n    class Meta:\n        table_name = 'file_snapshot'\n        indexes = (\n            (('development_step', 'file'), True),\n        )","documentation":"This code defines a model for a file snapshot entity in a database, with fields for an ID, creation and update timestamps, and foreign keys to other entities such as apps, development steps, and files. It also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field."}},{"key":"scip-python python temp indexer `pilot.database.models.command_runs`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.command_runs`/__init__:","language":"python","range":[0,0,20,9],"content":"from peewee import AutoField, ForeignKeyField, TextField, CharField, IntegerField\n\nfrom database.models.components.base_models import BaseModel\nfrom database.models.app import App\n\n\nclass CommandRuns(BaseModel):\n    id = AutoField()\n    app = ForeignKeyField(App, on_delete='CASCADE')\n    command = TextField(null=True)\n    cli_response = TextField(null=True)\n    done_or_error_response = TextField(null=True)\n    exit_code = IntegerField(null=True)\n    previous_step = ForeignKeyField('self', null=True, column_name='previous_step')\n    high_level_step = CharField(null=True)\n\n    class Meta:\n        table_name = 'command_runs'\n        indexes = (\n            (('app', 'previous_step', 'high_level_step'), True),\n        )","file":"/pilot/database/models/command_runs.py","fileHash":"8820282f75671328093f28e6e33f20a78b921fca28ecb5b3c90823c8fd862c69","hash":"8820282f75671328093f28e6e33f20a78b921fca28ecb5b3c90823c8fd862c69","processedContent":"from peewee import AutoField, ForeignKeyField, TextField, CharField, IntegerField #undefined\n\nfrom database.models.components.base_models import BaseModel\n\"\"\"\nscip-python python temp indexer `pilot.database.models.components.base_models`/__init__:: The code defines a base model class for a database, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes functions to create a PostgreSQL or SQLite database connection based on the environment variable `DATABASE_TYPE`.\nscip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#: This code defines a base model class that includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used.\n\"\"\"\nfrom database.models.app import App\n\"\"\"\nscip-python python temp indexer `pilot.database.models.app`/__init__:: The code defines a base model class for an application, with fields for a user ID, app type, name, and status. It also includes a ForeignKeyField to the User model and a CharField for each of these fields.\nscip-python python temp indexer `pilot.database.models.app`/App#: This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n\"\"\"\n\n\nclass CommandRuns(BaseModel):\n    id = AutoField()\n    app = ForeignKeyField(App, on_delete='CASCADE')\n    command = TextField(null=True)\n    cli_response = TextField(null=True)\n    done_or_error_response = TextField(null=True)\n    exit_code = IntegerField(null=True)\n    previous_step = ForeignKeyField('self', null=True, column_name='previous_step')\n    high_level_step = CharField(null=True)\n\n    class Meta:\n        table_name = 'command_runs'\n        indexes = (\n            (('app', 'previous_step', 'high_level_step'), True),\n        )","documentation":"The code defines a model for storing information about command runs, including the app that ran the command, the command itself, and the response from the command. It also includes fields for tracking the previous step and high-level step of the command run."}},{"key":"scip-python python temp indexer `pilot.database.models.command_runs`/CommandRuns#","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.command_runs`/CommandRuns#","language":"python","range":[6,0,20,9],"content":"class CommandRuns(BaseModel):\n    id = AutoField()\n    app = ForeignKeyField(App, on_delete='CASCADE')\n    command = TextField(null=True)\n    cli_response = TextField(null=True)\n    done_or_error_response = TextField(null=True)\n    exit_code = IntegerField(null=True)\n    previous_step = ForeignKeyField('self', null=True, column_name='previous_step')\n    high_level_step = CharField(null=True)\n\n    class Meta:\n        table_name = 'command_runs'\n        indexes = (\n            (('app', 'previous_step', 'high_level_step'), True),\n        )","file":"/pilot/database/models/command_runs.py","fileHash":"8820282f75671328093f28e6e33f20a78b921fca28ecb5b3c90823c8fd862c69","hash":"2347a335a3a9820fbb05b1104d8c8e4137b0e988407c630adc017e90ffd31f1d","processedContent":"class CommandRuns(BaseModel): #This code defines a base model class that includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used.\n    id = AutoField()\n    app = ForeignKeyField(App, on_delete='CASCADE') #This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n    command = TextField(null=True)\n    cli_response = TextField(null=True)\n    done_or_error_response = TextField(null=True)\n    exit_code = IntegerField(null=True)\n    previous_step = ForeignKeyField('self', null=True, column_name='previous_step')\n    high_level_step = CharField(null=True)\n\n    class Meta:\n        table_name = 'command_runs'\n        indexes = (\n            (('app', 'previous_step', 'high_level_step'), True),\n        )","documentation":"This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update."}},{"key":"scip-python python temp indexer `pilot.database.models.user_apps`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.user_apps`/__init__:","language":"python","range":[0,0,18,0],"content":"from peewee import AutoField, CharField, ForeignKeyField\n\nfrom database.models.components.base_models import BaseModel\nfrom database.models.app import App\nfrom database.models.user import User\n\n\nclass UserApps(BaseModel):\n    id = AutoField()\n    app = ForeignKeyField(App, on_delete='CASCADE')\n    user = ForeignKeyField(User, on_delete='CASCADE')\n    workspace = CharField(null=True)\n\n    class Meta:\n        table_name = 'user_apps'\n        indexes = (\n            (('app', 'user'), True),\n        )\n","file":"/pilot/database/models/user_apps.py","fileHash":"98b78d04e85744c6343a05d50caac2ca61571e1e4727327e28a8699233fa3312","hash":"98b78d04e85744c6343a05d50caac2ca61571e1e4727327e28a8699233fa3312","processedContent":"from peewee import AutoField, CharField, ForeignKeyField #undefined\n\nfrom database.models.components.base_models import BaseModel\n\"\"\"\nscip-python python temp indexer `pilot.database.models.components.base_models`/__init__:: The code defines a base model class for a database, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes functions to create a PostgreSQL or SQLite database connection based on the environment variable `DATABASE_TYPE`.\nscip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#: This code defines a base model class that includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used.\n\"\"\"\nfrom database.models.app import App\n\"\"\"\nscip-python python temp indexer `pilot.database.models.app`/__init__:: The code defines a base model class for an application, with fields for a user ID, app type, name, and status. It also includes a ForeignKeyField to the User model and a CharField for each of these fields.\nscip-python python temp indexer `pilot.database.models.app`/App#: This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n\"\"\"\nfrom database.models.user import User\n\"\"\"\nscip-python python temp indexer `pilot.database.models.user`/__init__:: The code defines a base model class for a database and a user entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used.\nscip-python python temp indexer `pilot.database.models.user`/User#: This code defines a base model class for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The Meta class sets the database to be used.\n\"\"\"\n\n\nclass UserApps(BaseModel):\n    \"\"\"This code defines a base model class for an app entity that includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also defines a base model class for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The Meta class sets the database to be used.\"\"\"\n    pass\n","documentation":"The code defines a base model class for an app entity and a user entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used."}},{"key":"scip-python python temp indexer `pilot.database.models.user_apps`/UserApps#","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.user_apps`/UserApps#","language":"python","range":[7,0,17,9],"content":"class UserApps(BaseModel):\n    id = AutoField()\n    app = ForeignKeyField(App, on_delete='CASCADE')\n    user = ForeignKeyField(User, on_delete='CASCADE')\n    workspace = CharField(null=True)\n\n    class Meta:\n        table_name = 'user_apps'\n        indexes = (\n            (('app', 'user'), True),\n        )","file":"/pilot/database/models/user_apps.py","fileHash":"98b78d04e85744c6343a05d50caac2ca61571e1e4727327e28a8699233fa3312","hash":"f9d07d6f9505991e841a20ceebae30373b0d812f8db62be856605814d2e50215","processedContent":"class UserApps(BaseModel): #This code defines a base model class that includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used.\n    id = AutoField()\n    app = ForeignKeyField(App, on_delete='CASCADE') #This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n    user = ForeignKeyField(User, on_delete='CASCADE') #This code defines a base model class for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The Meta class sets the database to be used.\n    workspace = CharField(null=True)\n\n    class Meta:\n        table_name = 'user_apps'\n        indexes = (\n            (('app', 'user'), True),\n        )","documentation":"This code defines a base model class for an app entity that includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also defines a base model class for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The Meta class sets the database to be used."}},{"key":"scip-python python temp indexer `pilot.database.models.user_inputs`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.user_inputs`/__init__:","language":"python","range":[0,0,19,9],"content":"from peewee import AutoField, ForeignKeyField, TextField, CharField\n\nfrom database.models.components.base_models import BaseModel\nfrom database.models.app import App\n\n\nclass UserInputs(BaseModel):\n    id = AutoField()\n    app = ForeignKeyField(App, on_delete='CASCADE')\n    query = TextField(null=True)\n    user_input = TextField(null=True)\n    hint = TextField(null=True)\n    previous_step = ForeignKeyField('self', null=True, column_name='previous_step')\n    high_level_step = CharField(null=True)\n\n    class Meta:\n        table_name = 'user_inputs'\n        indexes = (\n            (('app', 'previous_step', 'high_level_step'), True),\n        )","file":"/pilot/database/models/user_inputs.py","fileHash":"aa208352ed0fd3bb69e76cf12cd59a282649ddb4d639a0d871ff2dc7cbe4aa7f","hash":"aa208352ed0fd3bb69e76cf12cd59a282649ddb4d639a0d871ff2dc7cbe4aa7f","processedContent":"from peewee import AutoField, ForeignKeyField, TextField, CharField #undefined\n\nfrom database.models.components.base_models import BaseModel\n\"\"\"\nscip-python python temp indexer `pilot.database.models.components.base_models`/__init__:: The code defines a base model class for a database, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes functions to create a PostgreSQL or SQLite database connection based on the environment variable `DATABASE_TYPE`.\nscip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#: This code defines a base model class that includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used.\n\"\"\"\nfrom database.models.app import App\n\"\"\"\nscip-python python temp indexer `pilot.database.models.app`/__init__:: The code defines a base model class for an application, with fields for a user ID, app type, name, and status. It also includes a ForeignKeyField to the User model and a CharField for each of these fields.\nscip-python python temp indexer `pilot.database.models.app`/App#: This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n\"\"\"\n\n\nclass UserInputs(BaseModel):\n    id = AutoField()\n    app = ForeignKeyField(App, on_delete='CASCADE')\n    query = TextField(null=True)\n    user_input = TextField(null=True)\n    hint = TextField(null=True)\n    previous_step = ForeignKeyField('self', null=True, column_name='previous_step')\n    high_level_step = CharField(null=True)\n\n    class Meta:\n        table_name = 'user_inputs'\n        indexes = (\n            (('app', 'previous_step', 'high_level_step'), True),\n        )","documentation":"The code defines a model class for user inputs, with fields for an ID, app, query, user input, hint, previous step, and high-level step. It also includes a ForeignKeyField to the App model and a CharField for each of these fields."}},{"key":"scip-python python temp indexer `pilot.database.models.user_inputs`/UserInputs#","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.user_inputs`/UserInputs#","language":"python","range":[6,0,19,9],"content":"class UserInputs(BaseModel):\n    id = AutoField()\n    app = ForeignKeyField(App, on_delete='CASCADE')\n    query = TextField(null=True)\n    user_input = TextField(null=True)\n    hint = TextField(null=True)\n    previous_step = ForeignKeyField('self', null=True, column_name='previous_step')\n    high_level_step = CharField(null=True)\n\n    class Meta:\n        table_name = 'user_inputs'\n        indexes = (\n            (('app', 'previous_step', 'high_level_step'), True),\n        )","file":"/pilot/database/models/user_inputs.py","fileHash":"aa208352ed0fd3bb69e76cf12cd59a282649ddb4d639a0d871ff2dc7cbe4aa7f","hash":"c9c9c76a72ad80153663b0d1aefa8a9f65a0c8a0cf90b204690c4229cf8003f3","processedContent":"class UserInputs(BaseModel): #This code defines a base model class that includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used.\n    id = AutoField()\n    app = ForeignKeyField(App, on_delete='CASCADE') #This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n    query = TextField(null=True)\n    user_input = TextField(null=True)\n    hint = TextField(null=True)\n    previous_step = ForeignKeyField('self', null=True, column_name='previous_step')\n    high_level_step = CharField(null=True)\n\n    class Meta:\n        table_name = 'user_inputs'\n        indexes = (\n            (('app', 'previous_step', 'high_level_step'), True),\n        )","documentation":"This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update."}},{"key":"scip-python python temp indexer `pilot.database.models.files`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.files`/__init__:","language":"python","range":[0,0,18,0],"content":"from peewee import AutoField, CharField, TextField, ForeignKeyField\n\nfrom database.models.components.base_models import BaseModel\nfrom database.models.app import App\n\n\nclass File(BaseModel):\n    id = AutoField()\n    app = ForeignKeyField(App, on_delete='CASCADE')\n    name = CharField()\n    path = CharField()\n    full_path = CharField()\n    description = TextField(null=True)\n\n    class Meta:\n        indexes = (\n            (('app', 'name', 'path'), True),\n        )\n","file":"/pilot/database/models/files.py","fileHash":"becb5a55ce20b6b1bd3d2fe1a2561455d9e8b9f81dee2d0a38d6bfa117663a0c","hash":"becb5a55ce20b6b1bd3d2fe1a2561455d9e8b9f81dee2d0a38d6bfa117663a0c","processedContent":"from peewee import AutoField, CharField, TextField, ForeignKeyField #undefined\n\nfrom database.models.components.base_models import BaseModel\n\"\"\"\nscip-python python temp indexer `pilot.database.models.components.base_models`/__init__:: The code defines a base model class for a database, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes functions to create a PostgreSQL or SQLite database connection based on the environment variable `DATABASE_TYPE`.\nscip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#: This code defines a base model class that includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used.\n\"\"\"\nfrom database.models.app import App\n\"\"\"\nscip-python python temp indexer `pilot.database.models.app`/__init__:: The code defines a base model class for an application, with fields for a user ID, app type, name, and status. It also includes a ForeignKeyField to the User model and a CharField for each of these fields.\nscip-python python temp indexer `pilot.database.models.app`/App#: This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n\"\"\"\n\n\nclass File(BaseModel):\n    \"\"\"This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\"\"\"\n    pass\n","documentation":"The code defines a base model class for an app entity with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update."}},{"key":"scip-python python temp indexer `pilot.database.models.files`/File#","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.files`/File#","language":"python","range":[6,0,17,9],"content":"class File(BaseModel):\n    id = AutoField()\n    app = ForeignKeyField(App, on_delete='CASCADE')\n    name = CharField()\n    path = CharField()\n    full_path = CharField()\n    description = TextField(null=True)\n\n    class Meta:\n        indexes = (\n            (('app', 'name', 'path'), True),\n        )","file":"/pilot/database/models/files.py","fileHash":"becb5a55ce20b6b1bd3d2fe1a2561455d9e8b9f81dee2d0a38d6bfa117663a0c","hash":"d81a273208e3fac06cce38aeb12bccd390173f4314f1e6a3ca53c97307ec518f","processedContent":"class File(BaseModel): #This code defines a base model class that includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used.\n    id = AutoField()\n    app = ForeignKeyField(App, on_delete='CASCADE') #This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n    name = CharField()\n    path = CharField()\n    full_path = CharField()\n    description = TextField(null=True)\n\n    class Meta:\n        indexes = (\n            (('app', 'name', 'path'), True),\n        )","documentation":"This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update."}},{"key":"scip-python python temp indexer `pilot.database.models.feature`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.feature`/__init__:","language":"python","range":[0,0,21,0],"content":"from peewee import ForeignKeyField, CharField, BooleanField, DateTimeField\nfrom database.config import DATABASE_TYPE\nfrom database.models.components.base_models import BaseModel\nfrom database.models.app import App\nfrom database.models.development_steps import DevelopmentSteps\nfrom database.models.components.sqlite_middlewares import JSONField\nfrom playhouse.postgres_ext import BinaryJSONField\n\n\nclass Feature(BaseModel):\n    app = ForeignKeyField(App, backref='feature', on_delete='CASCADE')\n    summary = CharField()\n\n    if DATABASE_TYPE == 'postgres':\n        messages = BinaryJSONField(null=True)\n    else:\n        messages = JSONField(null=True)\n\n    previous_step = ForeignKeyField(DevelopmentSteps, column_name='previous_step')\n    completed = BooleanField(default=False)\n    completed_at = DateTimeField(null=True)\n","file":"/pilot/database/models/feature.py","fileHash":"4309c4ff88c9488c7c2efb659a21b411802b22ea36e9040cf6ce5ce174bf9264","hash":"4309c4ff88c9488c7c2efb659a21b411802b22ea36e9040cf6ce5ce174bf9264","processedContent":"from peewee import ForeignKeyField, CharField, BooleanField, DateTimeField #undefined\nfrom database.config import DATABASE_TYPE\n\"\"\"\nscip-python python temp indexer `pilot.database.config`/__init__:: The code defines environment variables for a database connection, using the `os.getenv()` function to retrieve the values from the operating system environment.\nscip-python python temp indexer `pilot.database.config`/DATABASE_TYPE.: undefined\n\"\"\"\nfrom database.models.components.base_models import BaseModel\n\"\"\"\nscip-python python temp indexer `pilot.database.models.components.base_models`/__init__:: The code defines a base model class for a database, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes functions to create a PostgreSQL or SQLite database connection based on the environment variable `DATABASE_TYPE`.\nscip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#: This code defines a base model class that includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used.\n\"\"\"\nfrom database.models.app import App\n\"\"\"\nscip-python python temp indexer `pilot.database.models.app`/__init__:: The code defines a base model class for an application, with fields for a user ID, app type, name, and status. It also includes a ForeignKeyField to the User model and a CharField for each of these fields.\nscip-python python temp indexer `pilot.database.models.app`/App#: This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n\"\"\"\nfrom database.models.development_steps import DevelopmentSteps\n\"\"\"\nscip-python python temp indexer `pilot.database.models.development_steps`/__init__:: The code defines a model for the development steps table in a database, with fields for an ID, creation and update timestamps, and a foreign key to the app entity. It also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\nscip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#: This code defines a model for the development steps table in the database. It includes fields for an ID, creation and update timestamps, and a foreign key to the app entity. The model also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\n\"\"\"\nfrom database.models.components.sqlite_middlewares import JSONField\n\"\"\"\nscip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/__init__:: This code defines a custom field type in Django called JSONField, which allows for storing and retrieving JSON data in the database.\nscip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#: This code defines a custom field type in Django called JSONField. It allows for storing and retrieving JSON data in the database, and it uses the json.loads() method to convert the value to JSON format.\n\"\"\"\nfrom playhouse.postgres_ext import BinaryJSONField #undefined\n\n\nclass Feature(BaseModel):\n    \"\"\"This code defines a model for the development steps table in the database, with fields for an ID, creation and update timestamps, and a foreign key to the app entity. It also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\"\"\"\n    pass\n","documentation":"The code defines a model for a feature entity in a database, with fields for an ID, creation and update timestamps, and a foreign key to the app entity. It also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field."}},{"key":"scip-python python temp indexer `pilot.database.models.feature`/Feature#","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.feature`/Feature#","language":"python","range":[9,0,20,43],"content":"class Feature(BaseModel):\n    app = ForeignKeyField(App, backref='feature', on_delete='CASCADE')\n    summary = CharField()\n\n    if DATABASE_TYPE == 'postgres':\n        messages = BinaryJSONField(null=True)\n    else:\n        messages = JSONField(null=True)\n\n    previous_step = ForeignKeyField(DevelopmentSteps, column_name='previous_step')\n    completed = BooleanField(default=False)\n    completed_at = DateTimeField(null=True)","file":"/pilot/database/models/feature.py","fileHash":"4309c4ff88c9488c7c2efb659a21b411802b22ea36e9040cf6ce5ce174bf9264","hash":"1e00545ae529e1ab52d3a6c5348a3d34b713131b92492360e50b11b8f4c47772","processedContent":"class Feature(BaseModel): #This code defines a base model class that includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used.\n    app = ForeignKeyField(App, backref='feature', on_delete='CASCADE') #This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n    summary = CharField()\n\n    if DATABASE_TYPE == 'postgres': #undefined\n        messages = BinaryJSONField(null=True)\n    else:\n        messages = JSONField(null=True)\n        \"\"\"\n        scip-python python temp indexer `pilot.database.models.feature`/Feature#messages.: undefined\n        scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#: This code defines a custom field type in Django called JSONField. It allows for storing and retrieving JSON data in the database, and it uses the json.loads() method to convert the value to JSON format.\n        \"\"\"\n\n    previous_step = ForeignKeyField(DevelopmentSteps, column_name='previous_step') #This code defines a model for the development steps table in the database. It includes fields for an ID, creation and update timestamps, and a foreign key to the app entity. The model also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\n    completed = BooleanField(default=False)\n    completed_at = DateTimeField(null=True)","documentation":"This code defines a model for the development steps table in the database, with fields for an ID, creation and update timestamps, and a foreign key to the app entity. It also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field."}},{"key":"scip-python python temp indexer `pilot.database.models.app`/App#name.","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.app`/App#name.","language":"python"}},{"key":"scip-python python temp indexer `pilot.database.models.app`/App#status.","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.app`/App#status.","language":"python"}},{"key":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#app.","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#app.","language":"python"}},{"key":"scip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#id.","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#id.","language":"python"}},{"key":"scip-python python temp indexer `pilot.database.models.user`/User#email.","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.user`/User#email.","language":"python"}},{"key":"scip-python python python-stdlib 3.11 _operator/or_().","attributes":{"symbol":"scip-python python python-stdlib 3.11 _operator/or_().","language":"python"}},{"key":"scip-python python temp indexer `pilot.database.models.user_apps`/UserApps#user.","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.user_apps`/UserApps#user.","language":"python"}},{"key":"scip-python python temp indexer `pilot.database.models.user_apps`/UserApps#app.","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.user_apps`/UserApps#app.","language":"python"}},{"key":"scip-python python temp indexer `pilot.database.models.user_apps`/UserApps#workspace.","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.user_apps`/UserApps#workspace.","language":"python"}},{"key":"scip-python python python-stdlib 3.11 logging/Logger#debug().","attributes":{"symbol":"scip-python python python-stdlib 3.11 logging/Logger#debug().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 logging/Logger#warn().","attributes":{"symbol":"scip-python python python-stdlib 3.11 logging/Logger#warn().","language":"python"}},{"key":"scip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#development_step.","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#development_step.","language":"python"}},{"key":"scip-python python temp indexer `pilot.database.models.feature`/Feature#previous_step.","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.feature`/Feature#previous_step.","language":"python"}},{"key":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#id.","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#id.","language":"python"}},{"key":"scip-python python temp indexer `pilot.database.models.files`/File#app.","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.files`/File#app.","language":"python"}},{"key":"scip-python python temp indexer `pilot.database.models.files`/File#name.","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.files`/File#name.","language":"python"}},{"key":"scip-python python temp indexer `pilot.database.models.files`/File#path.","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.files`/File#path.","language":"python"}},{"key":"scip-python python temp indexer `pilot.database.models.feature`/Feature#app.","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.feature`/Feature#app.","language":"python"}},{"key":"scip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#created_at.","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#created_at.","language":"python"}},{"key":"scip-python python temp indexer `pilot.database.database`/TABLES.","attributes":{"symbol":"scip-python python temp indexer `pilot.database.database`/TABLES.","language":"python"}},{"key":"scip-python python temp indexer `pilot.database.database`/","attributes":{"symbol":"scip-python python temp indexer `pilot.database.database`/","language":"python"}},{"key":"scip-python python temp indexer `pilot.database.connection.postgres`/get_postgres_database().","attributes":{"range":[5,0,6,102],"symbol":"scip-python python temp indexer `pilot.database.connection.postgres`/get_postgres_database().","content":"def get_postgres_database():\n    return PostgresqlDatabase(DB_NAME, user=DB_USER, password=DB_PASSWORD, host=DB_HOST, port=DB_PORT)","file":"/pilot/database/connection/postgres.py","language":"python","fileHash":"00c3cd5788f3919f312ce1e0cf24af54286b03f810efb1d866f083241e137fe4","hash":"f7331e589ed2e4f13ee090dd8802b29742f7fddaed4e92fbbe7bf1a63468d7b6","processedContent":"def get_postgres_database():\n    return PostgresqlDatabase(DB_NAME, user=DB_USER, password=DB_PASSWORD, host=DB_HOST, port=DB_PORT)","documentation":"This code defines a function that returns a PostgreSQL database object, which can be used to interact with a PostgreSQL database."}},{"key":"scip-python python temp indexer `pilot.database.connection.postgres`/create_postgres_database().","attributes":{"range":[8,0,21,16],"symbol":"scip-python python temp indexer `pilot.database.connection.postgres`/create_postgres_database().","content":"def create_postgres_database():\n    conn = psycopg2.connect(\n        dbname='postgres',\n        user=DB_USER,\n        password=DB_PASSWORD,\n        host=DB_HOST,\n        port=DB_PORT\n    )\n    conn.autocommit = True\n    cursor = conn.cursor()\n    safe_db_name = quote_ident(DB_NAME, conn)\n    cursor.execute(f\"CREATE DATABASE {safe_db_name}\")\n    cursor.close()\n    conn.close()","file":"/pilot/database/connection/postgres.py","language":"python","fileHash":"00c3cd5788f3919f312ce1e0cf24af54286b03f810efb1d866f083241e137fe4","hash":"69b135b64678c89b01d576fff8956daffd70b5154f42d0ac59d60677d816afd8","processedContent":"def create_postgres_database():\n    conn = psycopg2.connect(\n        dbname='postgres',\n        user=DB_USER, #undefined\n        password=DB_PASSWORD, #undefined\n        host=DB_HOST, #undefined\n        port=DB_PORT #undefined\n    )\n    conn.autocommit = True\n    cursor = conn.cursor()\n    safe_db_name = quote_ident(DB_NAME, conn) #undefined\n    cursor.execute(f\"CREATE DATABASE {safe_db_name}\")\n    cursor.close()\n    conn.close()","documentation":"This code creates a PostgreSQL database using the psycopg2 library. It connects to the PostgreSQL server, sets the autocommit mode to True, creates a cursor object, and then creates a new database with a safe name."}},{"key":"scip-python python temp indexer `pilot.database.connection.postgres`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.database.connection.postgres`/__init__:","range":[0,0,22,0],"content":"import psycopg2\nfrom peewee import PostgresqlDatabase\nfrom psycopg2.extensions import quote_ident\nfrom database.config import DB_NAME, DB_HOST, DB_PORT, DB_USER, DB_PASSWORD\n\ndef get_postgres_database():\n    return PostgresqlDatabase(DB_NAME, user=DB_USER, password=DB_PASSWORD, host=DB_HOST, port=DB_PORT)\n\ndef create_postgres_database():\n    conn = psycopg2.connect(\n        dbname='postgres',\n        user=DB_USER,\n        password=DB_PASSWORD,\n        host=DB_HOST,\n        port=DB_PORT\n    )\n    conn.autocommit = True\n    cursor = conn.cursor()\n    safe_db_name = quote_ident(DB_NAME, conn)\n    cursor.execute(f\"CREATE DATABASE {safe_db_name}\")\n    cursor.close()\n    conn.close()\n","file":"/pilot/database/connection/postgres.py","language":"python","fileHash":"00c3cd5788f3919f312ce1e0cf24af54286b03f810efb1d866f083241e137fe4","hash":"00c3cd5788f3919f312ce1e0cf24af54286b03f810efb1d866f083241e137fe4","processedContent":"import psycopg2\nfrom peewee import PostgresqlDatabase #undefined\nfrom psycopg2.extensions import quote_ident #undefined\nfrom database.config import DB_NAME, DB_HOST, DB_PORT, DB_USER, DB_PASSWORD\n\"\"\"\nscip-python python temp indexer `pilot.database.config`/__init__:: The code defines environment variables for a database connection, using the `os.getenv()` function to retrieve the values from the operating system environment.\nscip-python python temp indexer `pilot.database.config`/DB_NAME.: undefined\nscip-python python temp indexer `pilot.database.config`/DB_HOST.: undefined\nscip-python python temp indexer `pilot.database.config`/DB_PORT.: undefined\nscip-python python temp indexer `pilot.database.config`/DB_USER.: undefined\nscip-python python temp indexer `pilot.database.config`/DB_PASSWORD.: undefined\n\"\"\"\n\ndef get_postgres_database():\n    \"\"\"This code defines a function that returns a PostgreSQL database object, which can be used to interact with a PostgreSQL database.\"\"\"\n    pass\n\ndef create_postgres_database():\n    \"\"\"This code creates a PostgreSQL database using the psycopg2 library. It connects to the PostgreSQL server, sets the autocommit mode to True, creates a cursor object, and then creates a new database with a safe name.\"\"\"\n    pass\n","documentation":"The code defines a function to create a PostgreSQL database using the psycopg2 library, and another function to get a PostgreSQL database object."}},{"key":"scip-python python temp indexer `pilot.database.connection.sqlite`/get_sqlite_database().","attributes":{"range":[3,0,4,34],"symbol":"scip-python python temp indexer `pilot.database.connection.sqlite`/get_sqlite_database().","content":"def get_sqlite_database():\n    return SqliteDatabase(DB_NAME)","file":"/pilot/database/connection/sqlite.py","language":"python","fileHash":"7e6444ec53bb174b8b40c320d77f99ac6e5426c9cdb6e1c6f1bc9335c0a158a4","hash":"e320ae09f9aba485e64553c92ec6d7ee203a8e4ea8ba69cfd02d267dfbe5d5c2","processedContent":"def get_sqlite_database():\n    return SqliteDatabase(DB_NAME)","documentation":"This code defines a function that returns an instance of the SqliteDatabase class, which is used to interact with a local SQLite database."}},{"key":"scip-python python temp indexer `pilot.database.connection.sqlite`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.database.connection.sqlite`/__init__:","range":[0,0,5,0],"content":"from peewee import SqliteDatabase\nfrom database.config import DB_NAME\n\ndef get_sqlite_database():\n    return SqliteDatabase(DB_NAME)\n","file":"/pilot/database/connection/sqlite.py","language":"python","fileHash":"7e6444ec53bb174b8b40c320d77f99ac6e5426c9cdb6e1c6f1bc9335c0a158a4","hash":"7e6444ec53bb174b8b40c320d77f99ac6e5426c9cdb6e1c6f1bc9335c0a158a4","processedContent":"from peewee import SqliteDatabase #undefined\nfrom database.config import DB_NAME\n\"\"\"\nscip-python python temp indexer `pilot.database.config`/__init__:: The code defines environment variables for a database connection, using the `os.getenv()` function to retrieve the values from the operating system environment.\nscip-python python temp indexer `pilot.database.config`/DB_NAME.: undefined\n\"\"\"\n\ndef get_sqlite_database():\n    \"\"\"This code defines a function that returns an instance of the SqliteDatabase class, which is used to interact with a local SQLite database.\"\"\"\n    pass\n","documentation":"The code defines a function that returns an instance of the SqliteDatabase class, which is used to interact with a local SQLite database."}},{"key":"scip-python python temp indexer `pilot.database.models`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models`/__init__:","range":[0,0,0,0],"content":"","file":"/pilot/database/models/__init__.py","language":"python","fileHash":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855","hash":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855","processedContent":""}},{"key":"scip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#","language":"python","range":[16,0,22,27],"content":"class BaseModel(Model):\n    id = UUIDField(primary_key=True, default=uuid4)\n    created_at = DateTimeField(default=datetime.now)\n    updated_at = DateTimeField(default=datetime.now)\n\n    class Meta:\n        database = database","file":"/pilot/database/models/components/base_models.py","fileHash":"d7c25ab98d3a3a4c8a16c2669b1d6a37c0b6be04b10a4a18250cf1e4c6a3a9d4","hash":"83d2ba15096636aa1abec174571bd18087008ecd2791939bb2e1b1a234f57acd","processedContent":"class BaseModel(Model):\n    id = UUIDField(primary_key=True, default=uuid4) #undefined\n    created_at = DateTimeField(default=datetime.now)\n    \"\"\"\n    scip-python python python-stdlib 3.11 datetime/datetime#: undefined\n    scip-python python python-stdlib 3.11 datetime/datetime#now().: undefined\n    \"\"\"\n    updated_at = DateTimeField(default=datetime.now)\n    \"\"\"\n    scip-python python python-stdlib 3.11 datetime/datetime#: undefined\n    scip-python python python-stdlib 3.11 datetime/datetime#now().: undefined\n    \"\"\"\n\n    class Meta:\n        database = database","documentation":"This code defines a base model class that includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used."}},{"key":"scip-python python temp indexer `pilot.database.models.architecture`/Architecture#Meta#","attributes":{"range":[13,4,14,35],"symbol":"scip-python python temp indexer `pilot.database.models.architecture`/Architecture#Meta#","content":"class Meta:\n        table_name = 'architecture'","file":"/pilot/database/models/architecture.py","language":"python","fileHash":"fd596a9a918b19d618b92e4ba1414580e7e3b8b6038b5ba0fd20d752f2a588e4","hash":"cb597be32ec07574b767f0e7fe8f82b7da3a6823083846b84756096cbc249409","processedContent":"class Meta:\n        table_name = 'architecture'","documentation":"This code defines a class called \"Meta\" that specifies the name of the table in the database where the data for this class will be stored."}},{"key":"scip-python python temp indexer `pilot.database.models.components.progress_step`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.components.progress_step`/__init__:","language":"python","range":[0,0,23,0],"content":"from peewee import ForeignKeyField, CharField, BooleanField, DateTimeField\nfrom database.config import DATABASE_TYPE\nfrom database.models.components.base_models import BaseModel\nfrom database.models.app import App\nfrom database.models.components.sqlite_middlewares import JSONField\nfrom playhouse.postgres_ext import BinaryJSONField\n\n\nclass ProgressStep(BaseModel):\n    app = ForeignKeyField(App, primary_key=True, on_delete='CASCADE')\n    step = CharField()\n\n    if DATABASE_TYPE == 'postgres':\n        app_data = BinaryJSONField()\n        data = BinaryJSONField(null=True)\n        messages = BinaryJSONField(null=True)\n    else:\n        app_data = JSONField()\n        data = JSONField(null=True)\n        messages = JSONField(null=True)\n\n    completed = BooleanField(default=False)\n    completed_at = DateTimeField(null=True)\n","file":"/pilot/database/models/components/progress_step.py","fileHash":"2e87449d0761ccaceea6b1b5920431c8785a2c2b641124eaafa474c3c0d11d19","hash":"2e87449d0761ccaceea6b1b5920431c8785a2c2b641124eaafa474c3c0d11d19","processedContent":"from peewee import ForeignKeyField, CharField, BooleanField, DateTimeField #undefined\nfrom database.config import DATABASE_TYPE\n\"\"\"\nscip-python python temp indexer `pilot.database.config`/__init__:: The code defines environment variables for a database connection, using the `os.getenv()` function to retrieve the values from the operating system environment.\nscip-python python temp indexer `pilot.database.config`/DATABASE_TYPE.: undefined\n\"\"\"\nfrom database.models.components.base_models import BaseModel\n\"\"\"\nscip-python python temp indexer `pilot.database.models.components.base_models`/__init__:: The code defines a base model class for a database, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes functions to create a PostgreSQL or SQLite database connection based on the environment variable `DATABASE_TYPE`.\nscip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#: This code defines a base model class that includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used.\n\"\"\"\nfrom database.models.app import App\n\"\"\"\nscip-python python temp indexer `pilot.database.models.app`/__init__:: The code defines a base model class for an application, with fields for a user ID, app type, name, and status. It also includes a ForeignKeyField to the User model and a CharField for each of these fields.\nscip-python python temp indexer `pilot.database.models.app`/App#: This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n\"\"\"\nfrom database.models.components.sqlite_middlewares import JSONField\n\"\"\"\nscip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/__init__:: This code defines a custom field type in Django called JSONField, which allows for storing and retrieving JSON data in the database.\nscip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#: This code defines a custom field type in Django called JSONField. It allows for storing and retrieving JSON data in the database, and it uses the json.loads() method to convert the value to JSON format.\n\"\"\"\nfrom playhouse.postgres_ext import BinaryJSONField #undefined\n\n\nclass ProgressStep(BaseModel):\n    \"\"\"This code defines a model class called ProgressStep, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The code also defines custom field types in Django called JSONField, which allow for storing and retrieving JSON data in the database, and it uses the json.loads() method to convert the value to JSON format.\"\"\"\n    pass\n","documentation":"The code defines a model class called ProgressStep, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update."}},{"key":"scip-python python temp indexer `pilot.database.models.components.progress_step`/ProgressStep#","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.components.progress_step`/ProgressStep#","language":"python","range":[8,0,22,43],"content":"class ProgressStep(BaseModel):\n    app = ForeignKeyField(App, primary_key=True, on_delete='CASCADE')\n    step = CharField()\n\n    if DATABASE_TYPE == 'postgres':\n        app_data = BinaryJSONField()\n        data = BinaryJSONField(null=True)\n        messages = BinaryJSONField(null=True)\n    else:\n        app_data = JSONField()\n        data = JSONField(null=True)\n        messages = JSONField(null=True)\n\n    completed = BooleanField(default=False)\n    completed_at = DateTimeField(null=True)","file":"/pilot/database/models/components/progress_step.py","fileHash":"2e87449d0761ccaceea6b1b5920431c8785a2c2b641124eaafa474c3c0d11d19","hash":"ec1305e2ff32981e47d16de3745e0ce965a6578a6d37f0daf25676af9758f76f","processedContent":"class ProgressStep(BaseModel): #This code defines a base model class that includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used.\n    app = ForeignKeyField(App, primary_key=True, on_delete='CASCADE') #This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n    step = CharField()\n\n    if DATABASE_TYPE == 'postgres': #undefined\n        app_data = BinaryJSONField()\n        data = BinaryJSONField(null=True)\n        messages = BinaryJSONField(null=True)\n    else:\n        app_data = JSONField()\n        \"\"\"\n        scip-python python temp indexer `pilot.database.models.components.progress_step`/ProgressStep#app_data.: undefined\n        scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#: This code defines a custom field type in Django called JSONField. It allows for storing and retrieving JSON data in the database, and it uses the json.loads() method to convert the value to JSON format.\n        \"\"\"\n        data = JSONField(null=True)\n        \"\"\"\n        scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#: This code defines a custom field type in Django called JSONField. It allows for storing and retrieving JSON data in the database, and it uses the json.loads() method to convert the value to JSON format.\n        scip-python python temp indexer `pilot.database.models.components.progress_step`/ProgressStep#data.: undefined\n        \"\"\"\n        messages = JSONField(null=True)\n        \"\"\"\n        scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#: This code defines a custom field type in Django called JSONField. It allows for storing and retrieving JSON data in the database, and it uses the json.loads() method to convert the value to JSON format.\n        scip-python python temp indexer `pilot.database.models.components.progress_step`/ProgressStep#messages.: undefined\n        \"\"\"\n\n    completed = BooleanField(default=False)\n    completed_at = DateTimeField(null=True)","documentation":"This code defines a model class called ProgressStep, which includes fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The code also defines custom field types in Django called JSONField, which allow for storing and retrieving JSON data in the database, and it uses the json.loads() method to convert the value to JSON format."}},{"key":"scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/__init__:","language":"python","range":[0,0,14,0],"content":"import json\nfrom peewee import TextField\n\n\nclass JSONField(TextField):\n    def python_value(self, value):\n        if value is not None:\n            return json.loads(value)\n        return value\n\n    def db_value(self, value):\n        if value is not None:\n            return json.dumps(value)\n        return value\n","file":"/pilot/database/models/components/sqlite_middlewares.py","fileHash":"600b455f04ef1ff59d70c4954fac5f1baa408fcafb48513a32ac3f0cd2127484","hash":"600b455f04ef1ff59d70c4954fac5f1baa408fcafb48513a32ac3f0cd2127484","processedContent":"import json #undefined\nfrom peewee import TextField #undefined\n\n\nclass JSONField(TextField):\n    \"\"\"This code defines a custom field type in Django called JSONField. It allows for storing and retrieving JSON data in the database, and it uses the json.loads() method to convert the value to JSON format.\"\"\"\n    pass\n","documentation":"This code defines a custom field type in Django called JSONField, which allows for storing and retrieving JSON data in the database."}},{"key":"scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#","language":"python","range":[4,0,13,20],"content":"class JSONField(TextField):\n    def python_value(self, value):\n        if value is not None:\n            return json.loads(value)\n        return value\n\n    def db_value(self, value):\n        if value is not None:\n            return json.dumps(value)\n        return value","file":"/pilot/database/models/components/sqlite_middlewares.py","fileHash":"600b455f04ef1ff59d70c4954fac5f1baa408fcafb48513a32ac3f0cd2127484","hash":"6f026453e8eeba29259e8c3a996166dbeef75a550f479071b87bcffc12cb3f25","processedContent":"class JSONField(TextField):\n    def python_value(self, value):\n        \"\"\"This code is a function that takes a value as input and returns it in JSON format if the value is not None. It uses the json.loads() method to convert the value to JSON.\"\"\"\n        pass\n\n    def db_value(self, value):\n        if value is not None:\n            return json.dumps(value)\n        return value","documentation":"This code defines a custom field type in Django called JSONField. It allows for storing and retrieving JSON data in the database, and it uses the json.loads() method to convert the value to JSON format."}},{"key":"scip-python python temp indexer `playhouse.postgres_ext`/__init__:","attributes":{"symbol":"scip-python python temp indexer `playhouse.postgres_ext`/__init__:","language":"python"}},{"key":"scip-python python temp indexer `pilot.database.models.architecture`/Architecture#architecture.","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.architecture`/Architecture#architecture.","language":"python"}},{"key":"scip-python python temp indexer `pilot.database.models.command_runs`/CommandRuns#Meta#","attributes":{"range":[16,4,20,9],"symbol":"scip-python python temp indexer `pilot.database.models.command_runs`/CommandRuns#Meta#","content":"class Meta:\n        table_name = 'command_runs'\n        indexes = (\n            (('app', 'previous_step', 'high_level_step'), True),\n        )","file":"/pilot/database/models/command_runs.py","language":"python","fileHash":"8820282f75671328093f28e6e33f20a78b921fca28ecb5b3c90823c8fd862c69","hash":"47cfbd4ee13b1c951be1591ce9a689f51016f134464df7f87404cd9e140b843d","processedContent":"class Meta:\n        table_name = 'command_runs'\n        indexes = (\n            (('app', 'previous_step', 'high_level_step'), True),\n        )","documentation":"This code defines a class called \"Meta\" that contains information about the table name and indexes for a database table called \"command_runs\"."}},{"key":"scip-python python temp indexer `pilot.database.models.development`/Development#Meta#","attributes":{"range":[4,4,5,34],"symbol":"scip-python python temp indexer `pilot.database.models.development`/Development#Meta#","content":"class Meta:\n        table_name = 'development'","file":"/pilot/database/models/development.py","language":"python","fileHash":"4477164fa75b0b9fdaefc02bd7002f55f750dc58b695bd35d1ea762d287bb9cd","hash":"451492c3cecd7de2ecac3d7d8ca9f4df06abc5dd340f8c712c75e53dc13d8660","processedContent":"class Meta:\n        table_name = 'development'","documentation":"This code defines a class called \"Meta\" that sets the table name to \"development\"."}},{"key":"scip-python python temp indexer `pilot.database.models.development_planning`/DevelopmentPlanning#Meta#","attributes":{"range":[12,4,13,43],"symbol":"scip-python python temp indexer `pilot.database.models.development_planning`/DevelopmentPlanning#Meta#","content":"class Meta:\n        table_name = 'development_planning'","file":"/pilot/database/models/development_planning.py","language":"python","fileHash":"019406fce9f36106a24eb3d6d29a1b46d8cb7997dcf581f6fa1089a20e838d34","hash":"7b580c9638f035ce7d5c6fcf566b883c130d2bce9bbbcfe20a02198305859929","processedContent":"class Meta:\n        table_name = 'development_planning'","documentation":"This code defines a class called \"Meta\" that specifies the name of a database table for storing development planning data."}},{"key":"scip-python python temp indexer `pilot.database.models.development_planning`/DevelopmentPlanning#development_plan.","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.development_planning`/DevelopmentPlanning#development_plan.","language":"python"}},{"key":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#Meta#","attributes":{"range":[27,4,31,9],"symbol":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#Meta#","content":"class Meta:\n        table_name = 'development_steps'\n        indexes = (\n            (('app', 'previous_step', 'high_level_step'), True),\n        )","file":"/pilot/database/models/development_steps.py","language":"python","fileHash":"20ba96b7f16b0d8e496ca094d54619c122dbaf00fc2e8f82dd4053226ce0944e","hash":"63bebbe3c7d4939715edea91052fc446c41a2f10973f98957c69d23de149764a","processedContent":"class Meta:\n        table_name = 'development_steps'\n        indexes = (\n            (('app', 'previous_step', 'high_level_step'), True),\n        )","documentation":"This code defines a class called \"Meta\" that contains information about the table name and indexes for a database table called \"development_steps\"."}},{"key":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#messages.","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#messages.","language":"python"}},{"key":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#llm_response.","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#llm_response.","language":"python"}},{"key":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#prompt_data.","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#prompt_data.","language":"python"}},{"key":"scip-python python temp indexer `pilot.database.models.environment_setup`/EnvironmentSetup#Meta#","attributes":{"range":[4,4,5,40],"symbol":"scip-python python temp indexer `pilot.database.models.environment_setup`/EnvironmentSetup#Meta#","content":"class Meta:\n        table_name = 'environment_setup'","file":"/pilot/database/models/environment_setup.py","language":"python","fileHash":"12ac77c1d28174fb9a70213f522e1231aed88333a9410fdf67d88d58a80bc210","hash":"22a6e8a53a908fb4e6e7f86889e5648a23eef6e2a2c0b48e7987896ac5cfc6c7","processedContent":"class Meta:\n        table_name = 'environment_setup'","documentation":"This code defines a class called Meta, which is used to store metadata about the environment setup. The table_name attribute specifies the name of the database table that will be used to store this metadata."}},{"key":"scip-python python temp indexer `pilot.database.models.feature`/Feature#messages.","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.feature`/Feature#messages.","language":"python"}},{"key":"scip-python python temp indexer `pilot.database.models.file_snapshot`/SmartBlobField#","attributes":{"range":[12,0,32,22],"symbol":"scip-python python temp indexer `pilot.database.models.file_snapshot`/SmartBlobField#","content":"class SmartBlobField(BlobField):\n    \"\"\"\n    A binary blob field that can also accept/return utf-8 strings.\n\n    This is a temporary workaround for the fact that we're passing either binary\n    or string contents to the database. Once this is cleaned up, we should only\n    accept binary content and explcitily convert from/to strings as needed.\n    \"\"\"\n\n    def db_value(self, value):\n        if isinstance(value, str):\n            log.warning(\"FileSnapshot content is a string, expected bytes, working around it.\")\n            value = value.encode(\"utf-8\")\n        return super().db_value(value)\n\n    def python_value(self, value):\n        val = bytes(super().python_value(value))\n        try:\n            return val.decode(\"utf-8\")\n        except UnicodeDecodeError:\n            return val","file":"/pilot/database/models/file_snapshot.py","language":"python","fileHash":"89101027010a30dc19158cb70020c57012d9d7adb058a8d55dad119a24d869c5","hash":"e3d6582aa7bfb40ed3e45323ff1b2f6ba65563111309257e374074af6b1d6a31","processedContent":"class SmartBlobField(BlobField):\n    \"\"\"\n    A binary blob field that can also accept/return utf-8 strings.\n\n    This is a temporary workaround for the fact that we're passing either binary\n    or string contents to the database. Once this is cleaned up, we should only\n    accept binary content and explcitily convert from/to strings as needed.\n    \"\"\"\n\n    def db_value(self, value):\n        \"\"\"This code is a function that takes a value and returns a database-compatible version of it. If the value is a string, it logs a warning and encodes it as UTF-8 bytes before returning it.\"\"\"\n        pass\n\n    def python_value(self, value):\n        val = bytes(super().python_value(value))\n        try:\n            return val.decode(\"utf-8\")\n        except UnicodeDecodeError:\n            return val","documentation":"This code defines a custom field for storing binary data in a database, which can also accept and return UTF-8 strings. It's a temporary workaround until the underlying issue is fixed."}},{"key":"scip-python python temp indexer `pilot.database.models.file_snapshot`/SmartBlobField#db_value().","attributes":{"range":[21,4,25,38],"symbol":"scip-python python temp indexer `pilot.database.models.file_snapshot`/SmartBlobField#db_value().","content":"def db_value(self, value):\n        if isinstance(value, str):\n            log.warning(\"FileSnapshot content is a string, expected bytes, working around it.\")\n            value = value.encode(\"utf-8\")\n        return super().db_value(value)","file":"/pilot/database/models/file_snapshot.py","language":"python","fileHash":"89101027010a30dc19158cb70020c57012d9d7adb058a8d55dad119a24d869c5","hash":"ee71e3196b7665495449d73689671dd4d688c9bc2c2488eae2560d42eb0a3a27","processedContent":"def db_value(self, value):\n        if isinstance(value, str):\n            log.warning(\"FileSnapshot content is a string, expected bytes, working around it.\")\n            \"\"\"\n            scip-python python temp indexer `pilot.database.models.file_snapshot`/log.: undefined\n            scip-python python python-stdlib 3.11 logging/Logger#warning().: undefined\n            \"\"\"\n            value = value.encode(\"utf-8\")\n        return super().db_value(value)","documentation":"This code is a function that takes a value and returns a database-compatible version of it. If the value is a string, it logs a warning and encodes it as UTF-8 bytes before returning it."}},{"key":"scip-python python temp indexer `pilot.database.models.file_snapshot`/SmartBlobField#python_value().","attributes":{"range":[27,4,32,22],"symbol":"scip-python python temp indexer `pilot.database.models.file_snapshot`/SmartBlobField#python_value().","content":"def python_value(self, value):\n        val = bytes(super().python_value(value))\n        try:\n            return val.decode(\"utf-8\")\n        except UnicodeDecodeError:\n            return val","file":"/pilot/database/models/file_snapshot.py","language":"python","fileHash":"89101027010a30dc19158cb70020c57012d9d7adb058a8d55dad119a24d869c5","hash":"4e0a58bd38e96d5da7e89d2cf5679236c340ada30576ba5e660a5465ab6f3651","processedContent":"def python_value(self, value):\n        val = bytes(super().python_value(value))\n        try:\n            return val.decode(\"utf-8\")\n        except UnicodeDecodeError:\n            return val","documentation":"This code is a Python function that takes a value as input and returns its string representation. It first calls the superclass's python_value method to get the value's bytes representation, then tries to decode it as UTF-8. If the decoding fails, it returns the original bytes object."}},{"key":"scip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#Meta#","attributes":{"range":[41,4,45,9],"symbol":"scip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#Meta#","content":"class Meta:\n        table_name = 'file_snapshot'\n        indexes = (\n            (('development_step', 'file'), True),\n        )","file":"/pilot/database/models/file_snapshot.py","language":"python","fileHash":"89101027010a30dc19158cb70020c57012d9d7adb058a8d55dad119a24d869c5","hash":"b50998242cc369c21c45cb35078886272a3b56c386fd2f913af855758a439146","processedContent":"class Meta:\n        table_name = 'file_snapshot'\n        indexes = (\n            (('development_step', 'file'), True),\n        )","documentation":"This code defines a class called \"Meta\" that contains information about the table name and indexes for a database table called \"file_snapshot\"."}},{"key":"scip-python python python-stdlib 3.11 logging/__init__:","attributes":{"symbol":"scip-python python python-stdlib 3.11 logging/__init__:","language":"python"}},{"key":"scip-python python python-stdlib 3.11 logging/getLogger().","attributes":{"symbol":"scip-python python python-stdlib 3.11 logging/getLogger().","language":"python"}},{"key":"scip-python python temp indexer `pilot.database.models.file_snapshot`/","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.file_snapshot`/","language":"python"}},{"key":"scip-python python temp indexer `pilot.database.models.file_snapshot`/log.","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.file_snapshot`/log.","language":"python"}},{"key":"scip-python python python-stdlib 3.11 logging/Logger#warning().","attributes":{"symbol":"scip-python python python-stdlib 3.11 logging/Logger#warning().","language":"python"}},{"key":"scip-python python temp indexer `pilot.database.models.files`/File#Meta#","attributes":{"range":[14,4,17,9],"symbol":"scip-python python temp indexer `pilot.database.models.files`/File#Meta#","content":"class Meta:\n        indexes = (\n            (('app', 'name', 'path'), True),\n        )","file":"/pilot/database/models/files.py","language":"python","fileHash":"becb5a55ce20b6b1bd3d2fe1a2561455d9e8b9f81dee2d0a38d6bfa117663a0c","hash":"9539073419c600f8af74107efb78f37137d7a6a84ebc445a838ff3788d249631","processedContent":"class Meta:\n        indexes = (\n            (('app', 'name', 'path'), True),\n        )","documentation":"This code defines an index for a database table, which allows for efficient searching and retrieval of data based on the values of the \"app\", \"name\", and \"path\" columns."}},{"key":"scip-python python temp indexer `pilot.database.models.project_description`/ProjectDescription#Meta#","attributes":{"range":[8,4,9,42],"symbol":"scip-python python temp indexer `pilot.database.models.project_description`/ProjectDescription#Meta#","content":"class Meta:\n        table_name = 'project_description'","file":"/pilot/database/models/project_description.py","language":"python","fileHash":"919aac71ebbd9be03820c4507431e9f9eef6cb7775721bc7264e375326d0cb6a","hash":"1be840eeaf575d53821c444b169fdf443cb0c052518c40bca910e843da88b805","processedContent":"class Meta:\n        table_name = 'project_description'","documentation":"This code defines a class called \"Meta\" that specifies the name of a database table called \"project_description\"."}},{"key":"scip-python python temp indexer `pilot.database.models.user_apps`/UserApps#Meta#","attributes":{"range":[13,4,17,9],"symbol":"scip-python python temp indexer `pilot.database.models.user_apps`/UserApps#Meta#","content":"class Meta:\n        table_name = 'user_apps'\n        indexes = (\n            (('app', 'user'), True),\n        )","file":"/pilot/database/models/user_apps.py","language":"python","fileHash":"98b78d04e85744c6343a05d50caac2ca61571e1e4727327e28a8699233fa3312","hash":"40ee54175900a332e46ad7dd698858b16dc383fa0a3e1e768c95a38c68f9a8a0","processedContent":"class Meta:\n        table_name = 'user_apps'\n        indexes = (\n            (('app', 'user'), True),\n        )","documentation":"This code defines a class called \"Meta\" that contains information about the table name and indexes for a database table."}},{"key":"scip-python python temp indexer `pilot.database.models.user_inputs`/UserInputs#Meta#","attributes":{"range":[15,4,19,9],"symbol":"scip-python python temp indexer `pilot.database.models.user_inputs`/UserInputs#Meta#","content":"class Meta:\n        table_name = 'user_inputs'\n        indexes = (\n            (('app', 'previous_step', 'high_level_step'), True),\n        )","file":"/pilot/database/models/user_inputs.py","language":"python","fileHash":"aa208352ed0fd3bb69e76cf12cd59a282649ddb4d639a0d871ff2dc7cbe4aa7f","hash":"b605ef3e5fa81d8f19eeb3825b6b0fe124355514a04d489f26557d3f669d334f","processedContent":"class Meta:\n        table_name = 'user_inputs'\n        indexes = (\n            (('app', 'previous_step', 'high_level_step'), True),\n        )","documentation":"This code defines a class called \"Meta\" that contains information about the table name and indexes for a database table called \"user_inputs\"."}},{"key":"scip-python python temp indexer `pilot.database.models.user_stories`/UserStories#Meta#","attributes":{"range":[11,4,12,35],"symbol":"scip-python python temp indexer `pilot.database.models.user_stories`/UserStories#Meta#","content":"class Meta:\n        table_name = 'user_stories'","file":"/pilot/database/models/user_stories.py","language":"python","fileHash":"b16c8ef59e705218adceaf4c4d233b9999de130f332cc8b121671fcee7845e8d","hash":"105096f6938b0bb0f4c65afb538568cbaa38b1f7896f1a3fd6c43372a89c49a5","processedContent":"class Meta:\n        table_name = 'user_stories'","documentation":"This code defines a class called \"Meta\" that specifies the name of a database table called \"user_stories\"."}},{"key":"scip-python python temp indexer `pilot.database.models.user_stories`/UserStories#user_stories.","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.user_stories`/UserStories#user_stories.","language":"python"}},{"key":"scip-python python temp indexer `pilot.database.models.user_tasks`/UserTasks#Meta#","attributes":{"range":[12,4,13,33],"symbol":"scip-python python temp indexer `pilot.database.models.user_tasks`/UserTasks#Meta#","content":"class Meta:\n        table_name = 'user_tasks'","file":"/pilot/database/models/user_tasks.py","language":"python","fileHash":"307a1cd7c81517a3dba28b5bac30b7a1d24021b349b5bf769a21cd9285f15cda","hash":"fd896845e719881048584bcc45b6e0529a1f9580940ff3e6a009b8afa12b6ba0","processedContent":"class Meta:\n        table_name = 'user_tasks'","documentation":"This code defines a class called \"Meta\" that specifies the name of the table in the database where user tasks are stored."}},{"key":"scip-python python temp indexer `pilot.database.models.user_tasks`/UserTasks#user_tasks.","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.user_tasks`/UserTasks#user_tasks.","language":"python"}},{"key":"scip-python python temp indexer `pilot.database.models.components`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.components`/__init__:","range":[0,0,0,0],"content":"","file":"/pilot/database/models/components/__init__.py","language":"python","fileHash":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855","hash":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855","processedContent":""}},{"key":"scip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#Meta#","attributes":{"range":[21,4,22,27],"symbol":"scip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#Meta#","content":"class Meta:\n        database = database","file":"/pilot/database/models/components/base_models.py","language":"python","fileHash":"d7c25ab98d3a3a4c8a16c2669b1d6a37c0b6be04b10a4a18250cf1e4c6a3a9d4","hash":"289c2d04f0fd2f514826cc6f249432b78344b511b442b5950039afce45c408d1","processedContent":"class Meta:\n        database = database","documentation":"This code defines a class called \"Meta\" that contains a variable called \"database\" that is set to the value of the \"database\" variable passed in as an argument."}},{"key":"scip-python python python-stdlib 3.11 datetime/__init__:","attributes":{"symbol":"scip-python python python-stdlib 3.11 datetime/__init__:","language":"python"}},{"key":"scip-python python python-stdlib 3.11 datetime/datetime#","attributes":{"symbol":"scip-python python python-stdlib 3.11 datetime/datetime#","language":"python"}},{"key":"scip-python python python-stdlib 3.11 uuid/__init__:","attributes":{"symbol":"scip-python python python-stdlib 3.11 uuid/__init__:","language":"python"}},{"key":"scip-python python python-stdlib 3.11 uuid/uuid4().","attributes":{"symbol":"scip-python python python-stdlib 3.11 uuid/uuid4().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 datetime/datetime#now().","attributes":{"symbol":"scip-python python python-stdlib 3.11 datetime/datetime#now().","language":"python"}},{"key":"scip-python python temp indexer `pilot.database.models.components.progress_step`/ProgressStep#app_data.","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.components.progress_step`/ProgressStep#app_data.","language":"python"}},{"key":"scip-python python temp indexer `pilot.database.models.components.progress_step`/ProgressStep#data.","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.components.progress_step`/ProgressStep#data.","language":"python"}},{"key":"scip-python python temp indexer `pilot.database.models.components.progress_step`/ProgressStep#messages.","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.components.progress_step`/ProgressStep#messages.","language":"python"}},{"key":"scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#python_value().","attributes":{"range":[5,4,8,20],"symbol":"scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#python_value().","content":"def python_value(self, value):\n        if value is not None:\n            return json.loads(value)\n        return value","file":"/pilot/database/models/components/sqlite_middlewares.py","language":"python","fileHash":"600b455f04ef1ff59d70c4954fac5f1baa408fcafb48513a32ac3f0cd2127484","hash":"24f853be44530f7f0dd39d9f17ca298b744c7038b7b1dbfbcc080da3869b0bd9","processedContent":"def python_value(self, value):\n        if value is not None:\n            return json.loads(value)\n            \"\"\"\n            scip-python python python-stdlib 3.11 json/__init__:: undefined\n            scip-python python python-stdlib 3.11 json/loads().: undefined\n            \"\"\"\n        return value","documentation":"This code is a function that takes a value as input and returns it in JSON format if the value is not None. It uses the json.loads() method to convert the value to JSON."}},{"key":"scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#db_value().","attributes":{"range":[10,4,13,20],"symbol":"scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#db_value().","content":"def db_value(self, value):\n        if value is not None:\n            return json.dumps(value)\n        return value","file":"/pilot/database/models/components/sqlite_middlewares.py","language":"python","fileHash":"600b455f04ef1ff59d70c4954fac5f1baa408fcafb48513a32ac3f0cd2127484","hash":"e0b3660c76b0308b61bdaac3c5262877f54faa126478ef61976b3c3f733fae0a","processedContent":"def db_value(self, value):\n        if value is not None:\n            return json.dumps(value)\n            \"\"\"\n            scip-python python python-stdlib 3.11 json/__init__:: undefined\n            scip-python python python-stdlib 3.11 json/dumps().: undefined\n            \"\"\"\n        return value","documentation":"This code is a function that takes a value and returns it as a JSON string if it's not None. It uses the `json` module to perform the conversion."}},{"key":"scip-python python python-stdlib 3.11 json/__init__:","attributes":{"symbol":"scip-python python python-stdlib 3.11 json/__init__:","language":"python"}},{"key":"scip-python python python-stdlib 3.11 json/loads().","attributes":{"symbol":"scip-python python python-stdlib 3.11 json/loads().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 json/dumps().","attributes":{"symbol":"scip-python python python-stdlib 3.11 json/dumps().","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.agent`/Agent#","attributes":{"range":[0,0,3,30],"symbol":"scip-python python temp indexer `pilot.helpers.agent`/Agent#","content":"class Agent:\n    def __init__(self, role, project):\n        self.role = role\n        self.project = project","file":"/pilot/helpers/Agent.py","language":"python","fileHash":"36aa4ec7bcbe9cf3148e2c60be8f396037291c3366b25f8daca401c8027ca1f7","hash":"36aa4ec7bcbe9cf3148e2c60be8f396037291c3366b25f8daca401c8027ca1f7","processedContent":"class Agent:\n    def __init__(self, role, project):\n        self.role = role\n        self.project = project","documentation":"This code defines a class called \"Agent\" that represents a person who is working on a specific project. The class has two attributes: \"role\" and \"project\". The \"role\" attribute specifies the type of work the agent is doing, and the \"project\" attribute specifies the project they are working on."}},{"key":"scip-python python temp indexer `pilot.helpers.agent`/Agent#__init__().","attributes":{"range":[1,4,3,30],"symbol":"scip-python python temp indexer `pilot.helpers.agent`/Agent#__init__().","content":"def __init__(self, role, project):\n        self.role = role\n        self.project = project","file":"/pilot/helpers/Agent.py","language":"python","fileHash":"36aa4ec7bcbe9cf3148e2c60be8f396037291c3366b25f8daca401c8027ca1f7","hash":"a0bb4e1588ad767a60c72f7db26ca8f1bd5c1e3322309a0123e5ee3e999a4904","processedContent":"def __init__(self, role, project):\n        self.role = role\n        self.project = project","documentation":"This code defines a constructor for a class that initializes an object with a role and a project."}},{"key":"scip-python python temp indexer `pilot.helpers.agent`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agent`/__init__:","range":[0,0,3,30],"content":"class Agent:\n    def __init__(self, role, project):\n        self.role = role\n        self.project = project","file":"/pilot/helpers/Agent.py","language":"python","fileHash":"36aa4ec7bcbe9cf3148e2c60be8f396037291c3366b25f8daca401c8027ca1f7","hash":"36aa4ec7bcbe9cf3148e2c60be8f396037291c3366b25f8daca401c8027ca1f7","processedContent":"class Agent:\n    def __init__(self, role, project):\n        self.role = role\n        self.project = project","documentation":"This code defines a class called \"Agent\" that represents a person who is working on a specific project. The class has two attributes: \"role\" and \"project\". The \"role\" attribute specifies the type of work the agent is doing, and the \"project\" attribute specifies the project they are working on."}},{"key":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","attributes":{"range":[17,0,301,27],"symbol":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","content":"class AgentConvo:\n    \"\"\"\n    Represents a conversation with an agent.\n\n    Args:\n        agent: An instance of the agent participating in the conversation.\n    \"\"\"\n\n    def __init__(self, agent):\n        # [{'role': 'system'|'user'|'assistant', 'content': ''}, ...]\n        self.messages: list[dict] = []\n        self.branches = {}\n        self.log_to_user = True\n        self.agent = agent\n        self.high_level_step = self.agent.project.current_step\n\n        # add system message\n        system_message = get_sys_message(self.agent.role, self.agent.project.args)\n        logger.info('\\n>>>>>>>>>> System Prompt >>>>>>>>>>\\n%s\\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>',\n                    system_message['content'])\n        self.messages.append(system_message)\n\n    def send_message(self, prompt_path=None, prompt_data=None, function_calls: FunctionCallSet = None, should_log_message=True):\n        \"\"\"\n        Sends a message in the conversation.\n\n        Args:\n            prompt_path: The path to a prompt.\n            prompt_data: Data associated with the prompt.\n            function_calls: Optional function calls to be included in the message.\n            should_log_message: Flag if final response should be logged.\n        Returns:\n            The response from the agent.\n        \"\"\"\n        # craft message\n        self.construct_and_add_message_from_prompt(prompt_path, prompt_data)\n\n        # TODO: move this if block (and the other below) to Developer agent - https://github.com/Pythagora-io/gpt-pilot/issues/91#issuecomment-1751964079\n        # check if we already have the LLM response saved\n        if self.agent.__class__.__name__ == 'Developer':\n            self.agent.project.llm_req_num += 1\n        development_step = get_saved_development_step(self.agent.project)\n        if development_step is not None and self.agent.project.skip_steps:\n            # if we do, use it\n            print(color_yellow(f'Restoring development step with id {development_step.id}'))\n            self.agent.project.checkpoints['last_development_step'] = development_step\n            self.agent.project.restore_files(development_step.id)\n            response = development_step.llm_response\n            self.messages = development_step.messages\n\n            if self.agent.project.skip_until_dev_step and str(\n                    development_step.id) == self.agent.project.skip_until_dev_step:\n                self.agent.project.skip_steps = False\n                delete_all_subsequent_steps(self.agent.project)\n\n                if 'delete_unrelated_steps' in self.agent.project.args and self.agent.project.args[\n                    'delete_unrelated_steps']:\n                    self.agent.project.delete_all_steps_except_current_branch()\n            else:\n                should_log_message = True\n\n            if development_step.token_limit_exception_raised:\n                raise TokenLimitError(development_step.token_limit_exception_raised)\n        else:\n            # if we don't, get the response from LLM\n            try:\n                self.agent.project.skip_steps = False  # todo this is quick fix for flag that shows if we fully loaded project, should be implemented properly\n                self.replace_files()\n                response = create_gpt_chat_completion(self.messages, self.high_level_step, self.agent.project,\n                                                      function_calls=function_calls)\n            except TokenLimitError as e:\n                save_development_step(self.agent.project, prompt_path, prompt_data, self.messages, '', str(e))\n                raise e\n\n            # TODO: move this code to Developer agent - https://github.com/Pythagora-io/gpt-pilot/issues/91#issuecomment-1751964079\n            if hasattr(self.agent, 'save_dev_steps') and self.agent.save_dev_steps:\n                save_development_step(self.agent.project, prompt_path, prompt_data, self.messages, response)\n\n        # TODO handle errors from OpenAI\n        # It's complicated because calling functions are expecting different types of responses - string or tuple\n        # https://github.com/Pythagora-io/gpt-pilot/issues/165 & #91\n        if response == {}:\n            logger.error('Aborting with \"OpenAI API error happened\"')\n            raise Exception(\"OpenAI API error happened.\")\n\n        response = parse_agent_response(response, function_calls)\n        message_content = self.format_message_content(response, function_calls)\n\n        # TODO we need to specify the response when there is a function called\n        # TODO maybe we can have a specific function that creates the GPT response from the function call\n        logger.info('\\n>>>>>>>>>> Assistant Prompt >>>>>>>>>>\\n%s\\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>',\n                    message_content)\n        self.messages.append({\"role\": \"assistant\", \"content\": message_content})\n        if should_log_message:\n            self.log_message(message_content)\n\n        return response\n\n    def format_message_content(self, response, function_calls):\n        # TODO remove this once the database is set up properly\n        if isinstance(response, str):\n            return response\n        else:\n            # string_response = []\n            # for key, value in response.items():\n            #     string_response.append(f'# {key}')\n            #\n            #     if isinstance(value, list):\n            #         if 'to_message' in function_calls:\n            #             string_response.append(function_calls['to_message'](value))\n            #         elif len(value) > 0 and isinstance(value[0], dict):\n            #             string_response.extend([\n            #                 f'##{i}\\n' + array_of_objects_to_string(d)\n            #                 for i, d in enumerate(value)\n            #             ])\n            #         else:\n            #             string_response.extend(['- ' + r for r in value])\n            #     else:\n            #         string_response.append(str(value))\n            #\n            # return '\\n'.join(string_response)\n            return json.dumps(response)\n        # TODO END\n\n    def continuous_conversation(self, prompt_path, prompt_data, function_calls=None):\n        \"\"\"\n        Conducts a continuous conversation with the agent.\n\n        Args:\n            prompt_path: The path to a prompt.\n            prompt_data: Data associated with the prompt.\n            function_calls: Optional function calls to be included in the conversation.\n\n        Returns:\n            List of accepted messages in the conversation.\n        \"\"\"\n        self.log_to_user = False\n        accepted_messages = []\n        response = self.send_message(prompt_path, prompt_data, function_calls)\n\n        # Continue conversation until GPT response equals END_RESPONSE\n        while response != END_RESPONSE:\n            user_message = ask_user(self.agent.project,\n                                    'Do you want to add anything else? If not, just press ENTER.',\n                                    hint=response,\n                                    require_some_input=False)\n\n            if user_message == \"\":\n                accepted_messages.append(response)\n\n            logger.info('\\n>>>>>>>>>> User Message >>>>>>>>>>\\n%s\\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', user_message)\n            self.messages.append({\"role\": \"user\", \"content\": user_message})\n            response = self.send_message(None, None, function_calls)\n\n        self.log_to_user = True\n        return accepted_messages\n\n    def save_branch(self, branch_name=None):\n        if branch_name is None:\n            branch_name = str(uuid.uuid4())\n        self.branches[branch_name] = self.messages.copy()\n        return branch_name\n\n    def load_branch(self, branch_name, reload_files=True):\n        self.messages = self.branches[branch_name].copy()\n        if reload_files:\n            # TODO make this more flexible - with every message, save metadata so every time we load a branch, reconstruct all messages from scratch\n            self.replace_files()\n\n    def replace_files(self):\n        files = self.agent.project.get_all_coded_files()\n        for msg in self.messages:\n            if msg['role'] == 'user':\n                for file in files:\n                    msg['content'] = self.replace_file_content(msg['content'], f\"{file['path']}/{file['name']}\", file['content'])\n\n    def escape_specials(self, s):\n        s = s.replace(\"\\\\\", \"\\\\\\\\\")\n\n        # List of sequences to preserve\n        sequences_to_preserve = [\n            # todo check if needed \"\\\\\\\\\",  # Backslash - note: probably not eg. paths on Windows\n            \"\\\\'\",  # Single quote\n            '\\\\\"',  # Double quote\n            # todo check if needed '\\\\a',  # ASCII Bell (BEL)\n            # todo check if needed '\\\\b',  # ASCII Backspace (BS) - note: different from regex \\b\n            # todo check if needed '\\\\f',  # ASCII Formfeed (FF)\n            '\\\\n',  # ASCII Linefeed (LF)\n            # todo check if needed '\\\\r',  # ASCII Carriage Return (CR)\n            '\\\\t',  # ASCII Horizontal Tab (TAB)\n            # todo check if needed '\\\\v'  # ASCII Vertical Tab (VT)\n        ]\n\n        for seq in sequences_to_preserve:\n            s = s.replace('\\\\\\\\' + seq[-1], seq)\n        return s\n\n    def replace_file_content(self, message, file_path, new_content):\n        pattern = rf'\\*\\*{re.escape(file_path)}\\*\\*:\\n```\\n(.*?)\\n```'\n\n        # Escape special characters in new_content for the sake of regex replacement\n        new_content_escaped = self.escape_specials(new_content)\n        file_path_escaped = self.escape_specials(file_path)\n\n        new_section_content = f'**{file_path_escaped}**\\n```\\n{new_content_escaped}\\n```'\n\n        updated_message, num_replacements = re.subn(pattern, new_section_content, message, flags=re.DOTALL)\n\n        if num_replacements == 0:\n            return message\n\n        return updated_message\n\n    def convo_length(self):\n        return len([msg for msg in self.messages if msg['role'] != 'system'])\n\n    def log_message(self, content):\n        \"\"\"\n        Logs a message in the conversation.\n\n        Args:\n            content: The content of the message to be logged.\n        \"\"\"\n        print_msg = capitalize_first_word_with_underscores(self.high_level_step)\n        if self.log_to_user:\n            if self.agent.project.checkpoints['last_development_step'] is not None:\n                dev_step_msg = f'\\nDev step {str(self.agent.project.checkpoints[\"last_development_step\"])}\\n'\n                print(color_yellow_bold(dev_step_msg), end='')\n                logger.info(dev_step_msg)\n            print(f\"\\n{content}\\n\", type='local')\n        logger.info(f\"{print_msg}: {content}\\n\")\n\n    def to_context_prompt(self):\n        logger.info(f'to_context_prompt({self.agent.project.current_step})')\n\n        # TODO: get dependencies & versions from the project (package.json, requirements.txt, pom.xml, etc.)\n        # Ideally, the LLM could do this, and we update it on load & whenever the file changes\n        # ...or LLM generates a script for `.gpt-pilot/get_dependencies` that we run\n        # https://github.com/Pythagora-io/gpt-pilot/issues/189\n        return get_prompt('development/context.prompt', {\n            'directory_tree': self.agent.project.get_directory_tree(),\n            'running_processes': running_processes,\n        })\n\n    def to_playground(self):\n        # Internal function to help debugging in OpenAI Playground, not to be used in production\n        with open('const/convert_to_playground_convo.js', 'r', encoding='utf-8') as file:\n            content = file.read()\n        process = subprocess.Popen('pbcopy', stdin=subprocess.PIPE)\n        process.communicate(content.replace('{{messages}}', str(self.messages)).encode('utf-8'))\n\n    def remove_last_x_messages(self, x):\n        logger.info('removing last %d messages: %s', x, self.messages[-x:])\n        self.messages = self.messages[:-x]\n\n    def construct_and_add_message_from_prompt(self, prompt_path, prompt_data):\n        if prompt_path is not None and prompt_data is not None:\n            prompt = get_prompt(prompt_path, prompt_data)\n            logger.info('\\n>>>>>>>>>> User Prompt >>>>>>>>>>\\n%s\\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', prompt)\n            self.messages.append({\"role\": \"user\", \"content\": prompt})\n\n    def get_additional_info_from_user(self, function_calls: FunctionCallSet = None):\n        \"\"\"\n        Asks user if he wants to make any changes to last message in conversation.\n\n        Args:\n            function_calls: Optional function calls to be included in the message.\n\n        Returns:\n            The response from the agent OR None if user didn't ask for change.\n        \"\"\"\n        llm_response = None\n        while True:\n            print(color_yellow(\n                \"Please check this message and say what needs to be changed. If everything is ok just press ENTER\", ))\n            changes = ask_user(self.agent.project, self.messages[-1]['content'], require_some_input=False)\n            if changes.lower() == '':\n                break\n\n            llm_response = self.send_message('utils/update.prompt',\n                                             {'changes': changes},\n                                             function_calls)\n\n        logger.info('Getting additional info from user done')\n        return llm_response","file":"/pilot/helpers/AgentConvo.py","language":"python","fileHash":"732b273be5c37ca65d74076efa00f7219d0dbe3735357188b52721ee8714dc9f","hash":"d7c6cb71d8db856515ec2262800adde697cbd2ad075a526bfe35583c791239ff","processedContent":"class AgentConvo:\n    \"\"\"\n    Represents a conversation with an agent.\n\n    Args:\n        agent: An instance of the agent participating in the conversation.\n    \"\"\"\n\n    def __init__(self, agent):\n        \"\"\"This code defines a function called `get_sys_message` that retrieves and renders a system message based on the provided role. The message is rendered using a prompt template stored in a dictionary called `prompts_components`.\"\"\"\n        pass\n\n    def send_message(self, prompt_path=None, prompt_data=None, function_calls: FunctionCallSet = None, should_log_message=True):\n        \"\"\"The code defines a function called `send_message` that sends a message in a conversation, retrieving and rendering a prompt template based on the provided name, and then appending the rendered content to a list of messages. It also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\"\"\"\n        pass\n\n    def format_message_content(self, response, function_calls):\n        \"\"\"This code formats a message response from a database query. It checks if the response is a string and returns it directly, otherwise it converts the response to a JSON string using the `json` module.\"\"\"\n        pass\n        # TODO END\n\n    def continuous_conversation(self, prompt_path, prompt_data, function_calls=None):\n        \"\"\"The code defines a function called `continuous_conversation` that conducts a continuous conversation with the agent, allowing the user to add additional messages until the GPT response equals END_RESPONSE.\"\"\"\n        pass\n\n    def save_branch(self, branch_name=None):\n        \"\"\"This code defines a function called `save_branch` that creates a new branch in an agent conversation. It takes an optional argument `branch_name`, which defaults to a randomly generated UUID if not provided. The function then copies the current message list into the new branch and returns the branch name.\"\"\"\n        pass\n\n    def load_branch(self, branch_name, reload_files=True):\n        \"\"\"This code defines a function called `load_branch` that loads a branch of messages from a dictionary called `branches`. It also copies the messages from the loaded branch to a variable called `messages`. If the `reload_files` parameter is set to `True`, it replaces the files with the new messages.\"\"\"\n        pass\n\n    def replace_files(self):\n        \"\"\"This code replaces file content in a project based on user messages. It retrieves all coded files from the project, loops through each message, and if the message role is \"user\", it replaces the file content with the new content.\"\"\"\n        pass\n\n    def escape_specials(self, s):\n        \"\"\"This code is a method that takes a string and replaces certain special characters with their escaped versions. It does this by first replacing all backslashes with double backslashes, then replacing specific sequences of characters with their escaped versions. The goal is to ensure that the resulting string can be safely used in various contexts without causing issues.\"\"\"\n        pass\n\n    def replace_file_content(self, message, file_path, new_content):\n        \"\"\"This code replaces the content of a file in a message with a new version, while preserving the original formatting and syntax.\"\"\"\n        pass\n\n    def convo_length(self):\n        \"\"\"This code calculates the length of a conversation by counting the number of messages that are not from the system.\"\"\"\n        pass\n\n    def log_message(self, content):\n        \"\"\"This code logs a message in the conversation, capitalizing the first word and keeping the rest of the words unchanged. It also includes a checkpoint to log the development step if it's not None.\"\"\"\n        pass\n\n    def to_context_prompt(self):\n        \"\"\"This code defines a function called `to_context_prompt` that retrieves and renders a prompt template based on the provided name. It uses Jinja2 to render the templates with no variables, and stores the rendered content in a dictionary called `prompts_components`.\"\"\"\n        pass\n\n    def to_playground(self):\n        \"\"\"This code is a function that helps with debugging in OpenAI Playground. It reads a file, replaces a placeholder with the current messages, and then writes the result to the clipboard.\"\"\"\n        pass\n\n    def remove_last_x_messages(self, x):\n        \"\"\"This code removes the last x messages from a list of messages.\"\"\"\n        pass\n\n    def construct_and_add_message_from_prompt(self, prompt_path, prompt_data):\n        \"\"\"This code defines a function called `construct_and_add_message_from_prompt` that retrieves and renders a prompt template based on the provided name, and then appends the rendered content to a list of messages.\"\"\"\n        pass\n\n    def get_additional_info_from_user(self, function_calls: FunctionCallSet = None):\n        \"\"\"\n        Asks user if he wants to make any changes to last message in conversation.\n\n        Args:\n            function_calls: Optional function calls to be included in the message.\n\n        Returns:\n            The response from the agent OR None if user didn't ask for change.\n        \"\"\"\n        llm_response = None\n        while True:\n            print(color_yellow(\n                \"Please check this message and say what needs to be changed. If everything is ok just press ENTER\", ))\n            changes = ask_user(self.agent.project, self.messages[-1]['content'], require_some_input=False)\n            if changes.lower() == '':\n                break\n\n            llm_response = self.send_message('utils/update.prompt',\n                                             {'changes': changes},\n                                             function_calls)\n\n        logger.info('Getting additional info from user done')\n        return llm_response","documentation":"This code defines a class called `AgentConvo` that represents a conversation with an agent. It includes functions for sending and receiving messages, as well as formatting and rendering prompts. The code also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model."}},{"key":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#__init__().","attributes":{"range":[25,4,37,44],"symbol":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#__init__().","content":"def __init__(self, agent):\n        # [{'role': 'system'|'user'|'assistant', 'content': ''}, ...]\n        self.messages: list[dict] = []\n        self.branches = {}\n        self.log_to_user = True\n        self.agent = agent\n        self.high_level_step = self.agent.project.current_step\n\n        # add system message\n        system_message = get_sys_message(self.agent.role, self.agent.project.args)\n        logger.info('\\n>>>>>>>>>> System Prompt >>>>>>>>>>\\n%s\\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>',\n                    system_message['content'])\n        self.messages.append(system_message)","file":"/pilot/helpers/AgentConvo.py","language":"python","fileHash":"732b273be5c37ca65d74076efa00f7219d0dbe3735357188b52721ee8714dc9f","hash":"3b0df9d6ca1548ff09c4deb7d66d3fd1aee2b436487477df530ce144b7561ae5","processedContent":"def __init__(self, agent):\n        # [{'role': 'system'|'user'|'assistant', 'content': ''}, ...]\n        self.messages: list[dict] = []\n        self.branches = {}\n        self.log_to_user = True\n        self.agent = agent\n        self.high_level_step = self.agent.project.current_step #undefined\n\n        # add system message\n        system_message = get_sys_message(self.agent.role, self.agent.project.args)\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#agent.: undefined\n        scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#agent.: undefined\n        scip-python python temp indexer `pilot.utils.utils`/get_sys_message().: This code defines a function called `get_sys_message` that retrieves and renders a system message based on the provided role. The message is rendered using a prompt template stored in a dictionary called `prompts_components`.\n        \"\"\"\n        logger.info('\\n>>>>>>>>>> System Prompt >>>>>>>>>>\\n%s\\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>',\n        \"\"\"\n        scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n        scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n        \"\"\"\n                    system_message['content'])\n        self.messages.append(system_message)","documentation":"This code defines a function called `get_sys_message` that retrieves and renders a system message based on the provided role. The message is rendered using a prompt template stored in a dictionary called `prompts_components`."}},{"key":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","attributes":{"range":[39,4,113,23],"symbol":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","content":"def send_message(self, prompt_path=None, prompt_data=None, function_calls: FunctionCallSet = None, should_log_message=True):\n        \"\"\"\n        Sends a message in the conversation.\n\n        Args:\n            prompt_path: The path to a prompt.\n            prompt_data: Data associated with the prompt.\n            function_calls: Optional function calls to be included in the message.\n            should_log_message: Flag if final response should be logged.\n        Returns:\n            The response from the agent.\n        \"\"\"\n        # craft message\n        self.construct_and_add_message_from_prompt(prompt_path, prompt_data)\n\n        # TODO: move this if block (and the other below) to Developer agent - https://github.com/Pythagora-io/gpt-pilot/issues/91#issuecomment-1751964079\n        # check if we already have the LLM response saved\n        if self.agent.__class__.__name__ == 'Developer':\n            self.agent.project.llm_req_num += 1\n        development_step = get_saved_development_step(self.agent.project)\n        if development_step is not None and self.agent.project.skip_steps:\n            # if we do, use it\n            print(color_yellow(f'Restoring development step with id {development_step.id}'))\n            self.agent.project.checkpoints['last_development_step'] = development_step\n            self.agent.project.restore_files(development_step.id)\n            response = development_step.llm_response\n            self.messages = development_step.messages\n\n            if self.agent.project.skip_until_dev_step and str(\n                    development_step.id) == self.agent.project.skip_until_dev_step:\n                self.agent.project.skip_steps = False\n                delete_all_subsequent_steps(self.agent.project)\n\n                if 'delete_unrelated_steps' in self.agent.project.args and self.agent.project.args[\n                    'delete_unrelated_steps']:\n                    self.agent.project.delete_all_steps_except_current_branch()\n            else:\n                should_log_message = True\n\n            if development_step.token_limit_exception_raised:\n                raise TokenLimitError(development_step.token_limit_exception_raised)\n        else:\n            # if we don't, get the response from LLM\n            try:\n                self.agent.project.skip_steps = False  # todo this is quick fix for flag that shows if we fully loaded project, should be implemented properly\n                self.replace_files()\n                response = create_gpt_chat_completion(self.messages, self.high_level_step, self.agent.project,\n                                                      function_calls=function_calls)\n            except TokenLimitError as e:\n                save_development_step(self.agent.project, prompt_path, prompt_data, self.messages, '', str(e))\n                raise e\n\n            # TODO: move this code to Developer agent - https://github.com/Pythagora-io/gpt-pilot/issues/91#issuecomment-1751964079\n            if hasattr(self.agent, 'save_dev_steps') and self.agent.save_dev_steps:\n                save_development_step(self.agent.project, prompt_path, prompt_data, self.messages, response)\n\n        # TODO handle errors from OpenAI\n        # It's complicated because calling functions are expecting different types of responses - string or tuple\n        # https://github.com/Pythagora-io/gpt-pilot/issues/165 & #91\n        if response == {}:\n            logger.error('Aborting with \"OpenAI API error happened\"')\n            raise Exception(\"OpenAI API error happened.\")\n\n        response = parse_agent_response(response, function_calls)\n        message_content = self.format_message_content(response, function_calls)\n\n        # TODO we need to specify the response when there is a function called\n        # TODO maybe we can have a specific function that creates the GPT response from the function call\n        logger.info('\\n>>>>>>>>>> Assistant Prompt >>>>>>>>>>\\n%s\\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>',\n                    message_content)\n        self.messages.append({\"role\": \"assistant\", \"content\": message_content})\n        if should_log_message:\n            self.log_message(message_content)\n\n        return response","file":"/pilot/helpers/AgentConvo.py","language":"python","fileHash":"732b273be5c37ca65d74076efa00f7219d0dbe3735357188b52721ee8714dc9f","hash":"1e8dd3378c8bb6e2cd4fe69294bc1674dade18459b90de53389d164c5397511a","processedContent":"def send_message(self, prompt_path=None, prompt_data=None, function_calls: FunctionCallSet = None, should_log_message=True):\n        \"\"\"\n        Sends a message in the conversation.\n\n        Args:\n            prompt_path: The path to a prompt.\n            prompt_data: Data associated with the prompt.\n            function_calls: Optional function calls to be included in the message.\n            should_log_message: Flag if final response should be logged.\n        Returns:\n            The response from the agent.\n        \"\"\"\n        # craft message\n        self.construct_and_add_message_from_prompt(prompt_path, prompt_data) #This code defines a function called `construct_and_add_message_from_prompt` that retrieves and renders a prompt template based on the provided name, and then appends the rendered content to a list of messages.\n\n        # TODO: move this if block (and the other below) to Developer agent - https://github.com/Pythagora-io/gpt-pilot/issues/91#issuecomment-1751964079\n        # check if we already have the LLM response saved\n        if self.agent.__class__.__name__ == 'Developer': #undefined\n            self.agent.project.llm_req_num += 1 #undefined\n        development_step = get_saved_development_step(self.agent.project)\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#agent.: undefined\n        scip-python python temp indexer `pilot.database.database`/get_saved_development_step().: This code retrieves a development step from the database based on three parameters: app ID, previous step, and high-level step. It does this by using the get() method of the model class, which returns the row if it exists, or None if it doesn't.\n        \"\"\"\n        if development_step is not None and self.agent.project.skip_steps: #undefined\n            # if we do, use it\n            print(color_yellow(f'Restoring development step with id {development_step.id}')) #undefined\n            self.agent.project.checkpoints['last_development_step'] = development_step #undefined\n            self.agent.project.restore_files(development_step.id) #undefined\n            response = development_step.llm_response\n            self.messages = development_step.messages #undefined\n\n            if self.agent.project.skip_until_dev_step and str( #undefined\n                    development_step.id) == self.agent.project.skip_until_dev_step: #undefined\n                self.agent.project.skip_steps = False #undefined\n                delete_all_subsequent_steps(self.agent.project)\n                \"\"\"\n                scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#agent.: undefined\n                scip-python python temp indexer `pilot.database.database`/delete_all_subsequent_steps().: This code deletes all subsequent steps in a development process after a specific step, including any file snapshots or features associated with those steps.\n                \"\"\"\n\n                if 'delete_unrelated_steps' in self.agent.project.args and self.agent.project.args[\n                \"\"\"\n                scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#agent.: undefined\n                scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#agent.: undefined\n                \"\"\"\n                    'delete_unrelated_steps']:\n                    self.agent.project.delete_all_steps_except_current_branch() #undefined\n            else:\n                should_log_message = True\n\n            if development_step.token_limit_exception_raised:\n                raise TokenLimitError(development_step.token_limit_exception_raised) #This code defines a custom exception class called `TokenLimitError` that is raised when the number of tokens in a message exceeds the maximum allowed by the GPT model. The class takes two arguments: `tokens_in_messages` and `max_tokens`, which represent the number of tokens in the message and the maximum number of tokens allowed, respectively. The `__init__` method sets the instance variables and calls the parent class's constructor with a formatted error message.\n        else:\n            # if we don't, get the response from LLM\n            try:\n                self.agent.project.skip_steps = False  # todo this is quick fix for flag that shows if we fully loaded project, should be implemented properly #undefined\n                self.replace_files() #This code replaces file content in a project based on user messages. It retrieves all coded files from the project, loops through each message, and if the message role is \"user\", it replaces the file content with the new content.\n                response = create_gpt_chat_completion(self.messages, self.high_level_step, self.agent.project,\n                \"\"\"\n                scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#agent.: undefined\n                scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#messages.: undefined\n                scip-python python temp indexer `pilot.utils.llm_connection`/create_gpt_chat_completion().: This code defines a function called `create_gpt_chat_completion` that takes in a list of messages, a request type, and a project. It then uses the OpenAI GPT language model to generate a response based on the input messages. The function also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n                scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#high_level_step.: undefined\n                \"\"\"\n                                                      function_calls=function_calls)\n            except TokenLimitError as e: #This code defines a custom exception class called `TokenLimitError` that is raised when the number of tokens in a message exceeds the maximum allowed by the GPT model. The class takes two arguments: `tokens_in_messages` and `max_tokens`, which represent the number of tokens in the message and the maximum number of tokens allowed, respectively. The `__init__` method sets the instance variables and calls the parent class's constructor with a formatted error message.\n                save_development_step(self.agent.project, prompt_path, prompt_data, self.messages, '', str(e))\n                \"\"\"\n                scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#agent.: undefined\n                scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#messages.: undefined\n                scip-python python temp indexer `pilot.database.database`/save_development_step().: This code defines a function called `save_development_step` that saves data to a database. It first checks if a record with the same data already exists, and if so, it logs a warning message. If no record exists, it creates a new one and returns it.\n                \"\"\"\n                raise e\n\n            # TODO: move this code to Developer agent - https://github.com/Pythagora-io/gpt-pilot/issues/91#issuecomment-1751964079\n            if hasattr(self.agent, 'save_dev_steps') and self.agent.save_dev_steps:\n            \"\"\"\n            scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#agent.: undefined\n            scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#agent.: undefined\n            \"\"\"\n                save_development_step(self.agent.project, prompt_path, prompt_data, self.messages, response)\n                \"\"\"\n                scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#agent.: undefined\n                scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#messages.: undefined\n                scip-python python temp indexer `pilot.database.database`/save_development_step().: This code defines a function called `save_development_step` that saves data to a database. It first checks if a record with the same data already exists, and if so, it logs a warning message. If no record exists, it creates a new one and returns it.\n                \"\"\"\n\n        # TODO handle errors from OpenAI\n        # It's complicated because calling functions are expecting different types of responses - string or tuple\n        # https://github.com/Pythagora-io/gpt-pilot/issues/165 & #91\n        if response == {}:\n            logger.error('Aborting with \"OpenAI API error happened\"')\n            \"\"\"\n            scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n            scip-python python python-stdlib 3.11 logging/Logger#error().: undefined\n            \"\"\"\n            raise Exception(\"OpenAI API error happened.\")\n\n        response = parse_agent_response(response, function_calls) #This code defines a function called \"parse_agent_response\" that takes two arguments: \"response\" and \"function_calls\". If \"function_calls\" is not None, the function returns the response as a JSON object. Otherwise, it returns the response as a string.\n        message_content = self.format_message_content(response, function_calls) #This code formats a message response from a database query. It checks if the response is a string and returns it directly, otherwise it converts the response to a JSON string using the `json` module.\n\n        # TODO we need to specify the response when there is a function called\n        # TODO maybe we can have a specific function that creates the GPT response from the function call\n        logger.info('\\n>>>>>>>>>> Assistant Prompt >>>>>>>>>>\\n%s\\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>',\n        \"\"\"\n        scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n        scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n        \"\"\"\n                    message_content)\n        self.messages.append({\"role\": \"assistant\", \"content\": message_content}) #undefined\n        if should_log_message:\n            self.log_message(message_content) #This code logs a message in the conversation, capitalizing the first word and keeping the rest of the words unchanged. It also includes a checkpoint to log the development step if it's not None.\n\n        return response","documentation":"The code defines a function called `send_message` that sends a message in a conversation, retrieving and rendering a prompt template based on the provided name, and then appending the rendered content to a list of messages. It also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model."}},{"key":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#format_message_content().","attributes":{"range":[115,4,138,39],"symbol":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#format_message_content().","content":"def format_message_content(self, response, function_calls):\n        # TODO remove this once the database is set up properly\n        if isinstance(response, str):\n            return response\n        else:\n            # string_response = []\n            # for key, value in response.items():\n            #     string_response.append(f'# {key}')\n            #\n            #     if isinstance(value, list):\n            #         if 'to_message' in function_calls:\n            #             string_response.append(function_calls['to_message'](value))\n            #         elif len(value) > 0 and isinstance(value[0], dict):\n            #             string_response.extend([\n            #                 f'##{i}\\n' + array_of_objects_to_string(d)\n            #                 for i, d in enumerate(value)\n            #             ])\n            #         else:\n            #             string_response.extend(['- ' + r for r in value])\n            #     else:\n            #         string_response.append(str(value))\n            #\n            # return '\\n'.join(string_response)\n            return json.dumps(response)","file":"/pilot/helpers/AgentConvo.py","language":"python","fileHash":"732b273be5c37ca65d74076efa00f7219d0dbe3735357188b52721ee8714dc9f","hash":"20cb26ac13fdc7a58680989916d6425cc3ae8baf5cffa7cfea6d87b5f0681990","processedContent":"def format_message_content(self, response, function_calls):\n        # TODO remove this once the database is set up properly\n        if isinstance(response, str):\n            return response\n        else:\n            # string_response = []\n            # for key, value in response.items():\n            #     string_response.append(f'# {key}')\n            #\n            #     if isinstance(value, list):\n            #         if 'to_message' in function_calls:\n            #             string_response.append(function_calls['to_message'](value))\n            #         elif len(value) > 0 and isinstance(value[0], dict):\n            #             string_response.extend([\n            #                 f'##{i}\\n' + array_of_objects_to_string(d)\n            #                 for i, d in enumerate(value)\n            #             ])\n            #         else:\n            #             string_response.extend(['- ' + r for r in value])\n            #     else:\n            #         string_response.append(str(value))\n            #\n            # return '\\n'.join(string_response)\n            return json.dumps(response)","documentation":"This code formats a message response from a database query. It checks if the response is a string and returns it directly, otherwise it converts the response to a JSON string using the `json` module."}},{"key":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#continuous_conversation().","attributes":{"range":[141,4,172,32],"symbol":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#continuous_conversation().","content":"def continuous_conversation(self, prompt_path, prompt_data, function_calls=None):\n        \"\"\"\n        Conducts a continuous conversation with the agent.\n\n        Args:\n            prompt_path: The path to a prompt.\n            prompt_data: Data associated with the prompt.\n            function_calls: Optional function calls to be included in the conversation.\n\n        Returns:\n            List of accepted messages in the conversation.\n        \"\"\"\n        self.log_to_user = False\n        accepted_messages = []\n        response = self.send_message(prompt_path, prompt_data, function_calls)\n\n        # Continue conversation until GPT response equals END_RESPONSE\n        while response != END_RESPONSE:\n            user_message = ask_user(self.agent.project,\n                                    'Do you want to add anything else? If not, just press ENTER.',\n                                    hint=response,\n                                    require_some_input=False)\n\n            if user_message == \"\":\n                accepted_messages.append(response)\n\n            logger.info('\\n>>>>>>>>>> User Message >>>>>>>>>>\\n%s\\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', user_message)\n            self.messages.append({\"role\": \"user\", \"content\": user_message})\n            response = self.send_message(None, None, function_calls)\n\n        self.log_to_user = True\n        return accepted_messages","file":"/pilot/helpers/AgentConvo.py","language":"python","fileHash":"732b273be5c37ca65d74076efa00f7219d0dbe3735357188b52721ee8714dc9f","hash":"f5759d880cc5383dd50765732c79321df1b420b0ccb0381fb241100a51e2b62c","processedContent":"def continuous_conversation(self, prompt_path, prompt_data, function_calls=None):\n        \"\"\"\n        Conducts a continuous conversation with the agent.\n\n        Args:\n            prompt_path: The path to a prompt.\n            prompt_data: Data associated with the prompt.\n            function_calls: Optional function calls to be included in the conversation.\n\n        Returns:\n            List of accepted messages in the conversation.\n        \"\"\"\n        self.log_to_user = False #undefined\n        accepted_messages = []\n        response = self.send_message(prompt_path, prompt_data, function_calls) #The code defines a function called `send_message` that sends a message in a conversation, retrieving and rendering a prompt template based on the provided name, and then appending the rendered content to a list of messages. It also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n\n        # Continue conversation until GPT response equals END_RESPONSE\n        while response != END_RESPONSE: #undefined\n            user_message = ask_user(self.agent.project,\n            \"\"\"\n            scip-python python temp indexer `pilot.prompts.prompts`/ask_user().: This code defines a function called `ask_user` that retrieves user input from a database, styles the question, and saves the response to the database. It also logs the question and answer to a logger.\n            scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#agent.: undefined\n            \"\"\"\n                                    'Do you want to add anything else? If not, just press ENTER.',\n                                    hint=response,\n                                    require_some_input=False)\n\n            if user_message == \"\":\n                accepted_messages.append(response)\n\n            logger.info('\\n>>>>>>>>>> User Message >>>>>>>>>>\\n%s\\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', user_message)\n            \"\"\"\n            scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n            scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n            \"\"\"\n            self.messages.append({\"role\": \"user\", \"content\": user_message}) #undefined\n            response = self.send_message(None, None, function_calls) #The code defines a function called `send_message` that sends a message in a conversation, retrieving and rendering a prompt template based on the provided name, and then appending the rendered content to a list of messages. It also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n\n        self.log_to_user = True #undefined\n        return accepted_messages","documentation":"The code defines a function called `continuous_conversation` that conducts a continuous conversation with the agent, allowing the user to add additional messages until the GPT response equals END_RESPONSE."}},{"key":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#save_branch().","attributes":{"range":[174,4,178,26],"symbol":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#save_branch().","content":"def save_branch(self, branch_name=None):\n        if branch_name is None:\n            branch_name = str(uuid.uuid4())\n        self.branches[branch_name] = self.messages.copy()\n        return branch_name","file":"/pilot/helpers/AgentConvo.py","language":"python","fileHash":"732b273be5c37ca65d74076efa00f7219d0dbe3735357188b52721ee8714dc9f","hash":"f7352351602f1d9479d801354f5b7792b24a2e7ca84258af19921e8b3d9aa3c6","processedContent":"def save_branch(self, branch_name=None):\n        if branch_name is None:\n            branch_name = str(uuid.uuid4())\n            \"\"\"\n            scip-python python python-stdlib 3.11 uuid/__init__:: undefined\n            scip-python python python-stdlib 3.11 uuid/uuid4().: undefined\n            \"\"\"\n        self.branches[branch_name] = self.messages.copy()\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#branches.: undefined\n        scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#messages.: undefined\n        \"\"\"\n        return branch_name","documentation":"This code defines a function called `save_branch` that creates a new branch in an agent conversation. It takes an optional argument `branch_name`, which defaults to a randomly generated UUID if not provided. The function then copies the current message list into the new branch and returns the branch name."}},{"key":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#load_branch().","attributes":{"range":[180,4,184,32],"symbol":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#load_branch().","content":"def load_branch(self, branch_name, reload_files=True):\n        self.messages = self.branches[branch_name].copy()\n        if reload_files:\n            # TODO make this more flexible - with every message, save metadata so every time we load a branch, reconstruct all messages from scratch\n            self.replace_files()","file":"/pilot/helpers/AgentConvo.py","language":"python","fileHash":"732b273be5c37ca65d74076efa00f7219d0dbe3735357188b52721ee8714dc9f","hash":"f25559df0f60e88ba2fff3652924b4e2477d06e453549874c0984ce3693dc384","processedContent":"def load_branch(self, branch_name, reload_files=True):\n        self.messages = self.branches[branch_name].copy()\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#messages.: undefined\n        scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#branches.: undefined\n        \"\"\"\n        if reload_files:\n            # TODO make this more flexible - with every message, save metadata so every time we load a branch, reconstruct all messages from scratch\n            self.replace_files()","documentation":"This code defines a function called `load_branch` that loads a branch of messages from a dictionary called `branches`. It also copies the messages from the loaded branch to a variable called `messages`. If the `reload_files` parameter is set to `True`, it replaces the files with the new messages."}},{"key":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#replace_files().","attributes":{"range":[186,4,191,129],"symbol":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#replace_files().","content":"def replace_files(self):\n        files = self.agent.project.get_all_coded_files()\n        for msg in self.messages:\n            if msg['role'] == 'user':\n                for file in files:\n                    msg['content'] = self.replace_file_content(msg['content'], f\"{file['path']}/{file['name']}\", file['content'])","file":"/pilot/helpers/AgentConvo.py","language":"python","fileHash":"732b273be5c37ca65d74076efa00f7219d0dbe3735357188b52721ee8714dc9f","hash":"d35c860d712f690410515754fcf050fa15ca5943dd89ee8cc9e0fea67e9bb8a5","processedContent":"def replace_files(self):\n        files = self.agent.project.get_all_coded_files() #undefined\n        for msg in self.messages: #undefined\n            if msg['role'] == 'user':\n                for file in files:\n                    msg['content'] = self.replace_file_content(msg['content'], f\"{file['path']}/{file['name']}\", file['content'])","documentation":"This code replaces file content in a project based on user messages. It retrieves all coded files from the project, loops through each message, and if the message role is \"user\", it replaces the file content with the new content."}},{"key":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#escape_specials().","attributes":{"range":[193,4,212,16],"symbol":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#escape_specials().","content":"def escape_specials(self, s):\n        s = s.replace(\"\\\\\", \"\\\\\\\\\")\n\n        # List of sequences to preserve\n        sequences_to_preserve = [\n            # todo check if needed \"\\\\\\\\\",  # Backslash - note: probably not eg. paths on Windows\n            \"\\\\'\",  # Single quote\n            '\\\\\"',  # Double quote\n            # todo check if needed '\\\\a',  # ASCII Bell (BEL)\n            # todo check if needed '\\\\b',  # ASCII Backspace (BS) - note: different from regex \\b\n            # todo check if needed '\\\\f',  # ASCII Formfeed (FF)\n            '\\\\n',  # ASCII Linefeed (LF)\n            # todo check if needed '\\\\r',  # ASCII Carriage Return (CR)\n            '\\\\t',  # ASCII Horizontal Tab (TAB)\n            # todo check if needed '\\\\v'  # ASCII Vertical Tab (VT)\n        ]\n\n        for seq in sequences_to_preserve:\n            s = s.replace('\\\\\\\\' + seq[-1], seq)\n        return s","file":"/pilot/helpers/AgentConvo.py","language":"python","fileHash":"732b273be5c37ca65d74076efa00f7219d0dbe3735357188b52721ee8714dc9f","hash":"23400c1d4e6e0c67514320ce890ca0a58be9e19a53e6ab53e7c92685d091f146","processedContent":"def escape_specials(self, s):\n        s = s.replace(\"\\\\\", \"\\\\\\\\\")\n\n        # List of sequences to preserve\n        sequences_to_preserve = [\n            # todo check if needed \"\\\\\\\\\",  # Backslash - note: probably not eg. paths on Windows\n            \"\\\\'\",  # Single quote\n            '\\\\\"',  # Double quote\n            # todo check if needed '\\\\a',  # ASCII Bell (BEL)\n            # todo check if needed '\\\\b',  # ASCII Backspace (BS) - note: different from regex \\b\n            # todo check if needed '\\\\f',  # ASCII Formfeed (FF)\n            '\\\\n',  # ASCII Linefeed (LF)\n            # todo check if needed '\\\\r',  # ASCII Carriage Return (CR)\n            '\\\\t',  # ASCII Horizontal Tab (TAB)\n            # todo check if needed '\\\\v'  # ASCII Vertical Tab (VT)\n        ]\n\n        for seq in sequences_to_preserve:\n            s = s.replace('\\\\\\\\' + seq[-1], seq)\n        return s","documentation":"This code is a method that takes a string and replaces certain special characters with their escaped versions. It does this by first replacing all backslashes with double backslashes, then replacing specific sequences of characters with their escaped versions. The goal is to ensure that the resulting string can be safely used in various contexts without causing issues."}},{"key":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#replace_file_content().","attributes":{"range":[214,4,228,30],"symbol":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#replace_file_content().","content":"def replace_file_content(self, message, file_path, new_content):\n        pattern = rf'\\*\\*{re.escape(file_path)}\\*\\*:\\n```\\n(.*?)\\n```'\n\n        # Escape special characters in new_content for the sake of regex replacement\n        new_content_escaped = self.escape_specials(new_content)\n        file_path_escaped = self.escape_specials(file_path)\n\n        new_section_content = f'**{file_path_escaped}**\\n```\\n{new_content_escaped}\\n```'\n\n        updated_message, num_replacements = re.subn(pattern, new_section_content, message, flags=re.DOTALL)\n\n        if num_replacements == 0:\n            return message\n\n        return updated_message","file":"/pilot/helpers/AgentConvo.py","language":"python","fileHash":"732b273be5c37ca65d74076efa00f7219d0dbe3735357188b52721ee8714dc9f","hash":"f8001c1e70f81e290611b8b7a112b619f99b3c587b7f3614a06d3198eeab38fc","processedContent":"def replace_file_content(self, message, file_path, new_content):\n        pattern = rf'\\*\\*{re.escape(file_path)}\\*\\*:\\n```\\n(.*?)\\n```'\n        \"\"\"\n        scip-python python python-stdlib 3.11 re/__init__:: undefined\n        scip-python python python-stdlib 3.11 re/escape().: undefined\n        \"\"\"\n\n        # Escape special characters in new_content for the sake of regex replacement\n        new_content_escaped = self.escape_specials(new_content) #This code is a method that takes a string and replaces certain special characters with their escaped versions. It does this by first replacing all backslashes with double backslashes, then replacing specific sequences of characters with their escaped versions. The goal is to ensure that the resulting string can be safely used in various contexts without causing issues.\n        file_path_escaped = self.escape_specials(file_path) #This code is a method that takes a string and replaces certain special characters with their escaped versions. It does this by first replacing all backslashes with double backslashes, then replacing specific sequences of characters with their escaped versions. The goal is to ensure that the resulting string can be safely used in various contexts without causing issues.\n\n        new_section_content = f'**{file_path_escaped}**\\n```\\n{new_content_escaped}\\n```'\n\n        updated_message, num_replacements = re.subn(pattern, new_section_content, message, flags=re.DOTALL)\n        \"\"\"\n        scip-python python python-stdlib 3.11 re/__init__:: undefined\n        scip-python python python-stdlib 3.11 re/__init__:: undefined\n        scip-python python python-stdlib 3.11 re/subn().: undefined\n        scip-python python python-stdlib 3.11 re/DOTALL.: undefined\n        \"\"\"\n\n        if num_replacements == 0:\n            return message\n\n        return updated_message","documentation":"This code replaces the content of a file in a message with a new version, while preserving the original formatting and syntax."}},{"key":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#convo_length().","attributes":{"range":[230,4,231,77],"symbol":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#convo_length().","content":"def convo_length(self):\n        return len([msg for msg in self.messages if msg['role'] != 'system'])","file":"/pilot/helpers/AgentConvo.py","language":"python","fileHash":"732b273be5c37ca65d74076efa00f7219d0dbe3735357188b52721ee8714dc9f","hash":"dee2483fbafa59718e939207572037ddfdb35ab166494b96cddecdd46788a83d","processedContent":"def convo_length(self):\n        return len([msg for msg in self.messages if msg['role'] != 'system'])","documentation":"This code calculates the length of a conversation by counting the number of messages that are not from the system."}},{"key":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#log_message().","attributes":{"range":[233,4,247,48],"symbol":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#log_message().","content":"def log_message(self, content):\n        \"\"\"\n        Logs a message in the conversation.\n\n        Args:\n            content: The content of the message to be logged.\n        \"\"\"\n        print_msg = capitalize_first_word_with_underscores(self.high_level_step)\n        if self.log_to_user:\n            if self.agent.project.checkpoints['last_development_step'] is not None:\n                dev_step_msg = f'\\nDev step {str(self.agent.project.checkpoints[\"last_development_step\"])}\\n'\n                print(color_yellow_bold(dev_step_msg), end='')\n                logger.info(dev_step_msg)\n            print(f\"\\n{content}\\n\", type='local')\n        logger.info(f\"{print_msg}: {content}\\n\")","file":"/pilot/helpers/AgentConvo.py","language":"python","fileHash":"732b273be5c37ca65d74076efa00f7219d0dbe3735357188b52721ee8714dc9f","hash":"9eb0f01a3bca9485268eaea3706b30c0ebac11efea7239ced6b9d660c3f5625f","processedContent":"def log_message(self, content):\n        \"\"\"\n        Logs a message in the conversation.\n\n        Args:\n            content: The content of the message to be logged.\n        \"\"\"\n        print_msg = capitalize_first_word_with_underscores(self.high_level_step)\n        \"\"\"\n        scip-python python temp indexer `pilot.utils.utils`/capitalize_first_word_with_underscores().: This code takes a string with underscores and capitalizes the first word while keeping the rest of the words unchanged.\n        scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#high_level_step.: undefined\n        \"\"\"\n        if self.log_to_user: #undefined\n            if self.agent.project.checkpoints['last_development_step'] is not None: #undefined\n                dev_step_msg = f'\\nDev step {str(self.agent.project.checkpoints[\"last_development_step\"])}\\n' #undefined\n                print(color_yellow_bold(dev_step_msg), end='') #undefined\n                logger.info(dev_step_msg)\n                \"\"\"\n                scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n                scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n                \"\"\"\n            print(f\"\\n{content}\\n\", type='local')\n        logger.info(f\"{print_msg}: {content}\\n\")","documentation":"This code logs a message in the conversation, capitalizing the first word and keeping the rest of the words unchanged. It also includes a checkpoint to log the development step if it's not None."}},{"key":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#to_context_prompt().","attributes":{"range":[249,4,259,10],"symbol":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#to_context_prompt().","content":"def to_context_prompt(self):\n        logger.info(f'to_context_prompt({self.agent.project.current_step})')\n\n        # TODO: get dependencies & versions from the project (package.json, requirements.txt, pom.xml, etc.)\n        # Ideally, the LLM could do this, and we update it on load & whenever the file changes\n        # ...or LLM generates a script for `.gpt-pilot/get_dependencies` that we run\n        # https://github.com/Pythagora-io/gpt-pilot/issues/189\n        return get_prompt('development/context.prompt', {\n            'directory_tree': self.agent.project.get_directory_tree(),\n            'running_processes': running_processes,\n        })","file":"/pilot/helpers/AgentConvo.py","language":"python","fileHash":"732b273be5c37ca65d74076efa00f7219d0dbe3735357188b52721ee8714dc9f","hash":"22678b7fae6bdfa00f623f8829af0af214fe5f57f6b64b313a40ca329ebb5f20","processedContent":"def to_context_prompt(self):\n        logger.info(f'to_context_prompt({self.agent.project.current_step})')\n        \"\"\"\n        scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n        scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n        scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#agent.: undefined\n        \"\"\"\n\n        # TODO: get dependencies & versions from the project (package.json, requirements.txt, pom.xml, etc.)\n        # Ideally, the LLM could do this, and we update it on load & whenever the file changes\n        # ...or LLM generates a script for `.gpt-pilot/get_dependencies` that we run\n        # https://github.com/Pythagora-io/gpt-pilot/issues/189\n        return get_prompt('development/context.prompt', { #This code defines a function called `get_prompt` that retrieves and renders a prompt template based on the provided name. It uses Jinja2 to render the templates with no variables, and stores the rendered content in a dictionary called `prompts_components`.\n            'directory_tree': self.agent.project.get_directory_tree(), #undefined\n            'running_processes': running_processes, #undefined\n        })","documentation":"This code defines a function called `to_context_prompt` that retrieves and renders a prompt template based on the provided name. It uses Jinja2 to render the templates with no variables, and stores the rendered content in a dictionary called `prompts_components`."}},{"key":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#to_playground().","attributes":{"range":[261,4,266,96],"symbol":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#to_playground().","content":"def to_playground(self):\n        # Internal function to help debugging in OpenAI Playground, not to be used in production\n        with open('const/convert_to_playground_convo.js', 'r', encoding='utf-8') as file:\n            content = file.read()\n        process = subprocess.Popen('pbcopy', stdin=subprocess.PIPE)\n        process.communicate(content.replace('{{messages}}', str(self.messages)).encode('utf-8'))","file":"/pilot/helpers/AgentConvo.py","language":"python","fileHash":"732b273be5c37ca65d74076efa00f7219d0dbe3735357188b52721ee8714dc9f","hash":"6ac892d3ea3b6f080d13969df890125aa90ac816c6c0cb109f80525cc2860681","processedContent":"def to_playground(self):\n        # Internal function to help debugging in OpenAI Playground, not to be used in production\n        with open('const/convert_to_playground_convo.js', 'r', encoding='utf-8') as file:\n            content = file.read() #undefined\n        process = subprocess.Popen('pbcopy', stdin=subprocess.PIPE)\n        \"\"\"\n        scip-python python python-stdlib 3.11 subprocess/__init__:: undefined\n        scip-python python python-stdlib 3.11 subprocess/__init__:: undefined\n        scip-python python python-stdlib 3.11 subprocess/Popen#: undefined\n        scip-python python python-stdlib 3.11 subprocess/PIPE.PIPE.: undefined\n        \"\"\"\n        process.communicate(content.replace('{{messages}}', str(self.messages)).encode('utf-8'))","documentation":"This code is a function that helps with debugging in OpenAI Playground. It reads a file, replaces a placeholder with the current messages, and then writes the result to the clipboard."}},{"key":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#remove_last_x_messages().","attributes":{"range":[268,4,270,42],"symbol":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#remove_last_x_messages().","content":"def remove_last_x_messages(self, x):\n        logger.info('removing last %d messages: %s', x, self.messages[-x:])\n        self.messages = self.messages[:-x]","file":"/pilot/helpers/AgentConvo.py","language":"python","fileHash":"732b273be5c37ca65d74076efa00f7219d0dbe3735357188b52721ee8714dc9f","hash":"8437158d05f9f881b07eacc811a521edabcdfe48457747aa60fb0064d1618200","processedContent":"def remove_last_x_messages(self, x):\n        logger.info('removing last %d messages: %s', x, self.messages[-x:])\n        \"\"\"\n        scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n        scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n        scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#messages.: undefined\n        \"\"\"\n        self.messages = self.messages[:-x]","documentation":"This code removes the last x messages from a list of messages."}},{"key":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#construct_and_add_message_from_prompt().","attributes":{"range":[272,4,276,69],"symbol":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#construct_and_add_message_from_prompt().","content":"def construct_and_add_message_from_prompt(self, prompt_path, prompt_data):\n        if prompt_path is not None and prompt_data is not None:\n            prompt = get_prompt(prompt_path, prompt_data)\n            logger.info('\\n>>>>>>>>>> User Prompt >>>>>>>>>>\\n%s\\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', prompt)\n            self.messages.append({\"role\": \"user\", \"content\": prompt})","file":"/pilot/helpers/AgentConvo.py","language":"python","fileHash":"732b273be5c37ca65d74076efa00f7219d0dbe3735357188b52721ee8714dc9f","hash":"b9ceabdda5eb7c2008d37bbd51a4886a07622e9c13e0c7dcaf70a224424e2894","processedContent":"def construct_and_add_message_from_prompt(self, prompt_path, prompt_data):\n        if prompt_path is not None and prompt_data is not None:\n            prompt = get_prompt(prompt_path, prompt_data) #This code defines a function called `get_prompt` that retrieves and renders a prompt template based on the provided name. It uses Jinja2 to render the templates with no variables, and stores the rendered content in a dictionary called `prompts_components`.\n            logger.info('\\n>>>>>>>>>> User Prompt >>>>>>>>>>\\n%s\\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', prompt)\n            \"\"\"\n            scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n            scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n            \"\"\"\n            self.messages.append({\"role\": \"user\", \"content\": prompt})","documentation":"This code defines a function called `construct_and_add_message_from_prompt` that retrieves and renders a prompt template based on the provided name, and then appends the rendered content to a list of messages."}},{"key":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#get_additional_info_from_user().","attributes":{"range":[278,4,301,27],"symbol":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#get_additional_info_from_user().","content":"def get_additional_info_from_user(self, function_calls: FunctionCallSet = None):\n        \"\"\"\n        Asks user if he wants to make any changes to last message in conversation.\n\n        Args:\n            function_calls: Optional function calls to be included in the message.\n\n        Returns:\n            The response from the agent OR None if user didn't ask for change.\n        \"\"\"\n        llm_response = None\n        while True:\n            print(color_yellow(\n                \"Please check this message and say what needs to be changed. If everything is ok just press ENTER\", ))\n            changes = ask_user(self.agent.project, self.messages[-1]['content'], require_some_input=False)\n            if changes.lower() == '':\n                break\n\n            llm_response = self.send_message('utils/update.prompt',\n                                             {'changes': changes},\n                                             function_calls)\n\n        logger.info('Getting additional info from user done')\n        return llm_response","file":"/pilot/helpers/AgentConvo.py","language":"python","fileHash":"732b273be5c37ca65d74076efa00f7219d0dbe3735357188b52721ee8714dc9f","hash":"ebf9bd28138727d29477b7415faffd43b51cf9505342511924563a60decb5f8a","processedContent":"def get_additional_info_from_user(self, function_calls: FunctionCallSet = None):\n        \"\"\"\n        Asks user if he wants to make any changes to last message in conversation.\n\n        Args:\n            function_calls: Optional function calls to be included in the message.\n\n        Returns:\n            The response from the agent OR None if user didn't ask for change.\n        \"\"\"\n        llm_response = None\n        while True:\n            print(color_yellow( #undefined\n                \"Please check this message and say what needs to be changed. If everything is ok just press ENTER\", ))\n            changes = ask_user(self.agent.project, self.messages[-1]['content'], require_some_input=False)\n            \"\"\"\n            scip-python python temp indexer `pilot.prompts.prompts`/ask_user().: This code defines a function called `ask_user` that retrieves user input from a database, styles the question, and saves the response to the database. It also logs the question and answer to a logger.\n            scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#agent.: undefined\n            scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#messages.: undefined\n            \"\"\"\n            if changes.lower() == '':\n                break\n\n            llm_response = self.send_message('utils/update.prompt', #The code defines a function called `send_message` that sends a message in a conversation, retrieving and rendering a prompt template based on the provided name, and then appending the rendered content to a list of messages. It also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n                                             {'changes': changes},\n                                             function_calls)\n\n        logger.info('Getting additional info from user done')\n        \"\"\"\n        scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n        scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n        \"\"\"\n        return llm_response","documentation":"This code defines a function called `get_additional_info_from_user` that allows the user to make changes to a previous message in a conversation. It retrieves user input from a database, styles the question, and saves the response to the database. It also logs the question and answer to a logger."}},{"key":"scip-python python temp indexer `pilot.helpers.agentconvo`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agentconvo`/__init__:","range":[0,0,302,0],"content":"import json\nimport re\nimport subprocess\nimport uuid\nfrom utils.style import color_yellow, color_yellow_bold\n\nfrom database.database import get_saved_development_step, save_development_step, delete_all_subsequent_steps\nfrom helpers.exceptions.TokenLimitError import TokenLimitError\nfrom utils.function_calling import parse_agent_response, FunctionCallSet\nfrom utils.llm_connection import create_gpt_chat_completion\nfrom utils.utils import get_prompt, get_sys_message, capitalize_first_word_with_underscores\nfrom logger.logger import logger\nfrom prompts.prompts import ask_user\nfrom const.llm import END_RESPONSE\nfrom helpers.cli import running_processes\n\n\nclass AgentConvo:\n    \"\"\"\n    Represents a conversation with an agent.\n\n    Args:\n        agent: An instance of the agent participating in the conversation.\n    \"\"\"\n\n    def __init__(self, agent):\n        # [{'role': 'system'|'user'|'assistant', 'content': ''}, ...]\n        self.messages: list[dict] = []\n        self.branches = {}\n        self.log_to_user = True\n        self.agent = agent\n        self.high_level_step = self.agent.project.current_step\n\n        # add system message\n        system_message = get_sys_message(self.agent.role, self.agent.project.args)\n        logger.info('\\n>>>>>>>>>> System Prompt >>>>>>>>>>\\n%s\\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>',\n                    system_message['content'])\n        self.messages.append(system_message)\n\n    def send_message(self, prompt_path=None, prompt_data=None, function_calls: FunctionCallSet = None, should_log_message=True):\n        \"\"\"\n        Sends a message in the conversation.\n\n        Args:\n            prompt_path: The path to a prompt.\n            prompt_data: Data associated with the prompt.\n            function_calls: Optional function calls to be included in the message.\n            should_log_message: Flag if final response should be logged.\n        Returns:\n            The response from the agent.\n        \"\"\"\n        # craft message\n        self.construct_and_add_message_from_prompt(prompt_path, prompt_data)\n\n        # TODO: move this if block (and the other below) to Developer agent - https://github.com/Pythagora-io/gpt-pilot/issues/91#issuecomment-1751964079\n        # check if we already have the LLM response saved\n        if self.agent.__class__.__name__ == 'Developer':\n            self.agent.project.llm_req_num += 1\n        development_step = get_saved_development_step(self.agent.project)\n        if development_step is not None and self.agent.project.skip_steps:\n            # if we do, use it\n            print(color_yellow(f'Restoring development step with id {development_step.id}'))\n            self.agent.project.checkpoints['last_development_step'] = development_step\n            self.agent.project.restore_files(development_step.id)\n            response = development_step.llm_response\n            self.messages = development_step.messages\n\n            if self.agent.project.skip_until_dev_step and str(\n                    development_step.id) == self.agent.project.skip_until_dev_step:\n                self.agent.project.skip_steps = False\n                delete_all_subsequent_steps(self.agent.project)\n\n                if 'delete_unrelated_steps' in self.agent.project.args and self.agent.project.args[\n                    'delete_unrelated_steps']:\n                    self.agent.project.delete_all_steps_except_current_branch()\n            else:\n                should_log_message = True\n\n            if development_step.token_limit_exception_raised:\n                raise TokenLimitError(development_step.token_limit_exception_raised)\n        else:\n            # if we don't, get the response from LLM\n            try:\n                self.agent.project.skip_steps = False  # todo this is quick fix for flag that shows if we fully loaded project, should be implemented properly\n                self.replace_files()\n                response = create_gpt_chat_completion(self.messages, self.high_level_step, self.agent.project,\n                                                      function_calls=function_calls)\n            except TokenLimitError as e:\n                save_development_step(self.agent.project, prompt_path, prompt_data, self.messages, '', str(e))\n                raise e\n\n            # TODO: move this code to Developer agent - https://github.com/Pythagora-io/gpt-pilot/issues/91#issuecomment-1751964079\n            if hasattr(self.agent, 'save_dev_steps') and self.agent.save_dev_steps:\n                save_development_step(self.agent.project, prompt_path, prompt_data, self.messages, response)\n\n        # TODO handle errors from OpenAI\n        # It's complicated because calling functions are expecting different types of responses - string or tuple\n        # https://github.com/Pythagora-io/gpt-pilot/issues/165 & #91\n        if response == {}:\n            logger.error('Aborting with \"OpenAI API error happened\"')\n            raise Exception(\"OpenAI API error happened.\")\n\n        response = parse_agent_response(response, function_calls)\n        message_content = self.format_message_content(response, function_calls)\n\n        # TODO we need to specify the response when there is a function called\n        # TODO maybe we can have a specific function that creates the GPT response from the function call\n        logger.info('\\n>>>>>>>>>> Assistant Prompt >>>>>>>>>>\\n%s\\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>',\n                    message_content)\n        self.messages.append({\"role\": \"assistant\", \"content\": message_content})\n        if should_log_message:\n            self.log_message(message_content)\n\n        return response\n\n    def format_message_content(self, response, function_calls):\n        # TODO remove this once the database is set up properly\n        if isinstance(response, str):\n            return response\n        else:\n            # string_response = []\n            # for key, value in response.items():\n            #     string_response.append(f'# {key}')\n            #\n            #     if isinstance(value, list):\n            #         if 'to_message' in function_calls:\n            #             string_response.append(function_calls['to_message'](value))\n            #         elif len(value) > 0 and isinstance(value[0], dict):\n            #             string_response.extend([\n            #                 f'##{i}\\n' + array_of_objects_to_string(d)\n            #                 for i, d in enumerate(value)\n            #             ])\n            #         else:\n            #             string_response.extend(['- ' + r for r in value])\n            #     else:\n            #         string_response.append(str(value))\n            #\n            # return '\\n'.join(string_response)\n            return json.dumps(response)\n        # TODO END\n\n    def continuous_conversation(self, prompt_path, prompt_data, function_calls=None):\n        \"\"\"\n        Conducts a continuous conversation with the agent.\n\n        Args:\n            prompt_path: The path to a prompt.\n            prompt_data: Data associated with the prompt.\n            function_calls: Optional function calls to be included in the conversation.\n\n        Returns:\n            List of accepted messages in the conversation.\n        \"\"\"\n        self.log_to_user = False\n        accepted_messages = []\n        response = self.send_message(prompt_path, prompt_data, function_calls)\n\n        # Continue conversation until GPT response equals END_RESPONSE\n        while response != END_RESPONSE:\n            user_message = ask_user(self.agent.project,\n                                    'Do you want to add anything else? If not, just press ENTER.',\n                                    hint=response,\n                                    require_some_input=False)\n\n            if user_message == \"\":\n                accepted_messages.append(response)\n\n            logger.info('\\n>>>>>>>>>> User Message >>>>>>>>>>\\n%s\\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', user_message)\n            self.messages.append({\"role\": \"user\", \"content\": user_message})\n            response = self.send_message(None, None, function_calls)\n\n        self.log_to_user = True\n        return accepted_messages\n\n    def save_branch(self, branch_name=None):\n        if branch_name is None:\n            branch_name = str(uuid.uuid4())\n        self.branches[branch_name] = self.messages.copy()\n        return branch_name\n\n    def load_branch(self, branch_name, reload_files=True):\n        self.messages = self.branches[branch_name].copy()\n        if reload_files:\n            # TODO make this more flexible - with every message, save metadata so every time we load a branch, reconstruct all messages from scratch\n            self.replace_files()\n\n    def replace_files(self):\n        files = self.agent.project.get_all_coded_files()\n        for msg in self.messages:\n            if msg['role'] == 'user':\n                for file in files:\n                    msg['content'] = self.replace_file_content(msg['content'], f\"{file['path']}/{file['name']}\", file['content'])\n\n    def escape_specials(self, s):\n        s = s.replace(\"\\\\\", \"\\\\\\\\\")\n\n        # List of sequences to preserve\n        sequences_to_preserve = [\n            # todo check if needed \"\\\\\\\\\",  # Backslash - note: probably not eg. paths on Windows\n            \"\\\\'\",  # Single quote\n            '\\\\\"',  # Double quote\n            # todo check if needed '\\\\a',  # ASCII Bell (BEL)\n            # todo check if needed '\\\\b',  # ASCII Backspace (BS) - note: different from regex \\b\n            # todo check if needed '\\\\f',  # ASCII Formfeed (FF)\n            '\\\\n',  # ASCII Linefeed (LF)\n            # todo check if needed '\\\\r',  # ASCII Carriage Return (CR)\n            '\\\\t',  # ASCII Horizontal Tab (TAB)\n            # todo check if needed '\\\\v'  # ASCII Vertical Tab (VT)\n        ]\n\n        for seq in sequences_to_preserve:\n            s = s.replace('\\\\\\\\' + seq[-1], seq)\n        return s\n\n    def replace_file_content(self, message, file_path, new_content):\n        pattern = rf'\\*\\*{re.escape(file_path)}\\*\\*:\\n```\\n(.*?)\\n```'\n\n        # Escape special characters in new_content for the sake of regex replacement\n        new_content_escaped = self.escape_specials(new_content)\n        file_path_escaped = self.escape_specials(file_path)\n\n        new_section_content = f'**{file_path_escaped}**\\n```\\n{new_content_escaped}\\n```'\n\n        updated_message, num_replacements = re.subn(pattern, new_section_content, message, flags=re.DOTALL)\n\n        if num_replacements == 0:\n            return message\n\n        return updated_message\n\n    def convo_length(self):\n        return len([msg for msg in self.messages if msg['role'] != 'system'])\n\n    def log_message(self, content):\n        \"\"\"\n        Logs a message in the conversation.\n\n        Args:\n            content: The content of the message to be logged.\n        \"\"\"\n        print_msg = capitalize_first_word_with_underscores(self.high_level_step)\n        if self.log_to_user:\n            if self.agent.project.checkpoints['last_development_step'] is not None:\n                dev_step_msg = f'\\nDev step {str(self.agent.project.checkpoints[\"last_development_step\"])}\\n'\n                print(color_yellow_bold(dev_step_msg), end='')\n                logger.info(dev_step_msg)\n            print(f\"\\n{content}\\n\", type='local')\n        logger.info(f\"{print_msg}: {content}\\n\")\n\n    def to_context_prompt(self):\n        logger.info(f'to_context_prompt({self.agent.project.current_step})')\n\n        # TODO: get dependencies & versions from the project (package.json, requirements.txt, pom.xml, etc.)\n        # Ideally, the LLM could do this, and we update it on load & whenever the file changes\n        # ...or LLM generates a script for `.gpt-pilot/get_dependencies` that we run\n        # https://github.com/Pythagora-io/gpt-pilot/issues/189\n        return get_prompt('development/context.prompt', {\n            'directory_tree': self.agent.project.get_directory_tree(),\n            'running_processes': running_processes,\n        })\n\n    def to_playground(self):\n        # Internal function to help debugging in OpenAI Playground, not to be used in production\n        with open('const/convert_to_playground_convo.js', 'r', encoding='utf-8') as file:\n            content = file.read()\n        process = subprocess.Popen('pbcopy', stdin=subprocess.PIPE)\n        process.communicate(content.replace('{{messages}}', str(self.messages)).encode('utf-8'))\n\n    def remove_last_x_messages(self, x):\n        logger.info('removing last %d messages: %s', x, self.messages[-x:])\n        self.messages = self.messages[:-x]\n\n    def construct_and_add_message_from_prompt(self, prompt_path, prompt_data):\n        if prompt_path is not None and prompt_data is not None:\n            prompt = get_prompt(prompt_path, prompt_data)\n            logger.info('\\n>>>>>>>>>> User Prompt >>>>>>>>>>\\n%s\\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', prompt)\n            self.messages.append({\"role\": \"user\", \"content\": prompt})\n\n    def get_additional_info_from_user(self, function_calls: FunctionCallSet = None):\n        \"\"\"\n        Asks user if he wants to make any changes to last message in conversation.\n\n        Args:\n            function_calls: Optional function calls to be included in the message.\n\n        Returns:\n            The response from the agent OR None if user didn't ask for change.\n        \"\"\"\n        llm_response = None\n        while True:\n            print(color_yellow(\n                \"Please check this message and say what needs to be changed. If everything is ok just press ENTER\", ))\n            changes = ask_user(self.agent.project, self.messages[-1]['content'], require_some_input=False)\n            if changes.lower() == '':\n                break\n\n            llm_response = self.send_message('utils/update.prompt',\n                                             {'changes': changes},\n                                             function_calls)\n\n        logger.info('Getting additional info from user done')\n        return llm_response\n","file":"/pilot/helpers/AgentConvo.py","language":"python","fileHash":"732b273be5c37ca65d74076efa00f7219d0dbe3735357188b52721ee8714dc9f","hash":"732b273be5c37ca65d74076efa00f7219d0dbe3735357188b52721ee8714dc9f","processedContent":"import json #undefined\nimport re #undefined\nimport subprocess #undefined\nimport uuid #undefined\nfrom utils.style import color_yellow, color_yellow_bold\n\"\"\"\nscip-python python temp indexer `pilot.utils.style`/__init__:: This code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.utils.style`/color_yellow.: undefined\nscip-python python temp indexer `pilot.utils.style`/color_yellow_bold.: undefined\n\"\"\"\n\nfrom database.database import get_saved_development_step, save_development_step, delete_all_subsequent_steps\n\"\"\"\nscip-python python temp indexer `pilot.database.database`/__init__:: The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.database.database`/get_saved_development_step().: This code retrieves a development step from the database based on three parameters: app ID, previous step, and high-level step. It does this by using the get() method of the model class, which returns the row if it exists, or None if it doesn't.\nscip-python python temp indexer `pilot.database.database`/save_development_step().: This code defines a function called `save_development_step` that saves data to a database. It first checks if a record with the same data already exists, and if so, it logs a warning message. If no record exists, it creates a new one and returns it.\nscip-python python temp indexer `pilot.database.database`/delete_all_subsequent_steps().: This code deletes all subsequent steps in a development process after a specific step, including any file snapshots or features associated with those steps.\n\"\"\"\nfrom helpers.exceptions.TokenLimitError import TokenLimitError\n\"\"\"\nscip-python python temp indexer `pilot.helpers.exceptions.tokenlimiterror`/__init__:: This code defines constants for the maximum number of tokens allowed in a GPT model and the minimum number of tokens required for a response. It also sets the maximum number of questions that can be asked and the response when the conversation is complete.\nscip-python python temp indexer `pilot.helpers.exceptions.tokenlimiterror`/TokenLimitError#: This code defines a custom exception class called `TokenLimitError` that is raised when the number of tokens in a message exceeds the maximum allowed by the GPT model. The class takes two arguments: `tokens_in_messages` and `max_tokens`, which represent the number of tokens in the message and the maximum number of tokens allowed, respectively. The `__init__` method sets the instance variables and calls the parent class's constructor with a formatted error message.\n\"\"\"\nfrom utils.function_calling import parse_agent_response, FunctionCallSet\n\"\"\"\nscip-python python temp indexer `pilot.utils.function_calling`/__init__:: The code defines a class called `JsonPrompter` that generates a prompt for a chatbot to answer a user's question. It takes a list of functions and a string representing the function to call as arguments, and returns a JSON schema with the parameters of the selected function.\nscip-python python temp indexer `pilot.utils.function_calling`/parse_agent_response().: This code defines a function called \"parse_agent_response\" that takes two arguments: \"response\" and \"function_calls\". If \"function_calls\" is not None, the function returns the response as a JSON object. Otherwise, it returns the response as a string.\nscip-python python temp indexer `pilot.utils.function_calling`/FunctionCallSet#: This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It is used to define the structure of a function in a typed dictionary.\n\"\"\"\nfrom utils.llm_connection import create_gpt_chat_completion\n\"\"\"\nscip-python python temp indexer `pilot.utils.llm_connection`/__init__:: The code defines a Python script that uses the OpenAI GPT language model to generate responses to user prompts. It includes functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model.\nscip-python python temp indexer `pilot.utils.llm_connection`/create_gpt_chat_completion().: This code defines a function called `create_gpt_chat_completion` that takes in a list of messages, a request type, and a project. It then uses the OpenAI GPT language model to generate a response based on the input messages. The function also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n\"\"\"\nfrom utils.utils import get_prompt, get_sys_message, capitalize_first_word_with_underscores\n\"\"\"\nscip-python python temp indexer `pilot.utils.utils`/__init__:: The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.utils.utils`/get_prompt().: This code defines a function called `get_prompt` that retrieves and renders a prompt template based on the provided name. It uses Jinja2 to render the templates with no variables, and stores the rendered content in a dictionary called `prompts_components`.\nscip-python python temp indexer `pilot.utils.utils`/get_sys_message().: This code defines a function called `get_sys_message` that retrieves and renders a system message based on the provided role. The message is rendered using a prompt template stored in a dictionary called `prompts_components`.\nscip-python python temp indexer `pilot.utils.utils`/capitalize_first_word_with_underscores().: This code takes a string with underscores and capitalizes the first word while keeping the rest of the words unchanged.\n\"\"\"\nfrom logger.logger import logger\n\"\"\"\nscip-python python temp indexer `pilot.logger.logger`/__init__:: This code sets up a custom logger for an application, which filters sensitive information from log records and removes ANSI escape sequences.\nscip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n\"\"\"\nfrom prompts.prompts import ask_user\n\"\"\"\nscip-python python temp indexer `pilot.prompts.prompts`/__init__:: The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.prompts.prompts`/ask_user().: This code defines a function called `ask_user` that retrieves user input from a database, styles the question, and saves the response to the database. It also logs the question and answer to a logger.\n\"\"\"\nfrom const.llm import END_RESPONSE\n\"\"\"\nscip-python python temp indexer `pilot.const.llm`/__init__:: This code defines constants for the maximum number of tokens allowed in a GPT model and the minimum number of tokens required for a response. It also sets the maximum number of questions that can be asked and the response when the conversation is complete.\nscip-python python temp indexer `pilot.const.llm`/END_RESPONSE.: undefined\n\"\"\"\nfrom helpers.cli import running_processes\n\"\"\"\nscip-python python temp indexer `pilot.helpers.cli`/__init__:: The code defines a command-line interface (CLI) that allows users to execute commands and interact with a language model. It includes functions for running commands, checking their output, and handling errors.\nscip-python python temp indexer `pilot.helpers.cli`/running_processes.running_processes.: undefined\n\"\"\"\n\n\nclass AgentConvo:\n    \"\"\"This code defines a class called `AgentConvo` that represents a conversation with an agent. It includes functions for sending and receiving messages, as well as formatting and rendering prompts. The code also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\"\"\"\n    pass\n","documentation":"The code defines a class called `AgentConvo` that represents a conversation with an agent, including functions for sending and receiving messages, formatting and rendering prompts, and error handling for GPT model token limits."}},{"key":"scip-python python python-stdlib 3.11 re/__init__:","attributes":{"symbol":"scip-python python python-stdlib 3.11 re/__init__:","language":"python"}},{"key":"scip-python python python-stdlib 3.11 subprocess/__init__:","attributes":{"symbol":"scip-python python python-stdlib 3.11 subprocess/__init__:","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.style`/color_yellow_bold.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.style`/color_yellow_bold.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.exceptions.tokenlimiterror`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.exceptions.tokenlimiterror`/__init__:","language":"python","range":[0,0,8,0],"content":"from const.llm import MAX_GPT_MODEL_TOKENS\n\n\nclass TokenLimitError(Exception):\n    def __init__(self, tokens_in_messages, max_tokens=MAX_GPT_MODEL_TOKENS):\n        self.tokens_in_messages = tokens_in_messages\n        self.max_tokens = max_tokens\n        super().__init__(f\"Token limit error happened with {tokens_in_messages}/{max_tokens} tokens in messages!\")\n","file":"/pilot/helpers/exceptions/TokenLimitError.py","fileHash":"eda0410d1a4b07f9d30a9123e0366bb26c1af461081f9a84c68618872c9947e3","hash":"eda0410d1a4b07f9d30a9123e0366bb26c1af461081f9a84c68618872c9947e3","processedContent":"from const.llm import MAX_GPT_MODEL_TOKENS\n\"\"\"\nscip-python python temp indexer `pilot.const.llm`/__init__:: This code defines constants for the maximum number of tokens allowed in a GPT model and the minimum number of tokens required for a response. It also sets the maximum number of questions that can be asked and the response when the conversation is complete.\nscip-python python temp indexer `pilot.const.llm`/MAX_GPT_MODEL_TOKENS.: undefined\n\"\"\"\n\n\nclass TokenLimitError(Exception):\n    \"\"\"This code defines a custom exception class called `TokenLimitError` that is raised when the number of tokens in a message exceeds the maximum allowed by the GPT model. The class takes two arguments: `tokens_in_messages` and `max_tokens`, which represent the number of tokens in the message and the maximum number of tokens allowed, respectively. The `__init__` method sets the instance variables and calls the parent class's constructor with a formatted error message.\"\"\"\n    pass\n","documentation":"This code defines constants for the maximum number of tokens allowed in a GPT model and the minimum number of tokens required for a response. It also sets the maximum number of questions that can be asked and the response when the conversation is complete."}},{"key":"scip-python python temp indexer `pilot.helpers.exceptions.tokenlimiterror`/TokenLimitError#","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.exceptions.tokenlimiterror`/TokenLimitError#","language":"python","range":[3,0,7,114],"content":"class TokenLimitError(Exception):\n    def __init__(self, tokens_in_messages, max_tokens=MAX_GPT_MODEL_TOKENS):\n        self.tokens_in_messages = tokens_in_messages\n        self.max_tokens = max_tokens\n        super().__init__(f\"Token limit error happened with {tokens_in_messages}/{max_tokens} tokens in messages!\")","file":"/pilot/helpers/exceptions/TokenLimitError.py","fileHash":"eda0410d1a4b07f9d30a9123e0366bb26c1af461081f9a84c68618872c9947e3","hash":"b002056e642971326635aef084581b9e01c9eb7a15f9be13982e8075b3168019","processedContent":"class TokenLimitError(Exception):\n    def __init__(self, tokens_in_messages, max_tokens=MAX_GPT_MODEL_TOKENS):\n        self.tokens_in_messages = tokens_in_messages\n        self.max_tokens = max_tokens\n        super().__init__(f\"Token limit error happened with {tokens_in_messages}/{max_tokens} tokens in messages!\")","documentation":"This code defines a custom exception class called `TokenLimitError` that is raised when the number of tokens in a message exceeds the maximum allowed by the GPT model. The class takes two arguments: `tokens_in_messages` and `max_tokens`, which represent the number of tokens in the message and the maximum number of tokens allowed, respectively. The `__init__` method sets the instance variables and calls the parent class's constructor with a formatted error message."}},{"key":"scip-python python temp indexer `pilot.utils.function_calling`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.function_calling`/__init__:","language":"python","range":[0,0,200,0],"content":"import json\r\nimport re\r\nfrom typing import Union, TypeVar, List, Dict, Literal, Optional, TypedDict, Callable\r\n\r\nJsonTypeBase = Union[str, int, float, bool, None, List[\"JsonType\"], Dict[str, \"JsonType\"]]\r\nJsonType = TypeVar(\"JsonType\", bound=JsonTypeBase)\r\n\r\n\r\nclass FunctionParameters(TypedDict):\r\n    \"\"\"Function parameters\"\"\"\r\n\r\n    type: Literal[\"object\"]\r\n    properties: dict[str, JsonType]\r\n    required: Optional[list[str]]\r\n\r\n\r\nclass FunctionType(TypedDict):\r\n    \"\"\"Function type\"\"\"\r\n\r\n    name: str\r\n    description: Optional[str]\r\n    parameters: FunctionParameters\r\n\r\n\r\nclass FunctionCall(TypedDict):\r\n    \"\"\"Function call\"\"\"\r\n\r\n    name: str\r\n    parameters: str\r\n\r\n\r\nclass FunctionCallSet(TypedDict):\r\n    definitions: list[FunctionType]\r\n    functions: dict[str, Callable]\r\n\r\n\r\ndef add_function_calls_to_request(gpt_data, function_calls: Union[FunctionCallSet, None]):\r\n    if function_calls is None:\r\n        return\r\n\r\n    model: str = gpt_data['model']\r\n    is_instruct = 'llama' in model or 'anthropic' in model\r\n\r\n    gpt_data['functions'] = function_calls['definitions']\r\n\r\n    prompter = JsonPrompter(is_instruct)\r\n\r\n    if len(function_calls['definitions']) > 1:\r\n        function_call = None\r\n    else:\r\n        function_call = function_calls['definitions'][0]['name']\r\n\r\n    gpt_data['messages'].append({\r\n        'role': 'user',\r\n        'content': prompter.prompt('', function_calls['definitions'], function_call)\r\n    })\r\n\r\n\r\ndef parse_agent_response(response, function_calls: Union[FunctionCallSet, None]):\r\n    \"\"\"\r\n    Post-processes the response from the agent.\r\n\r\n    Args:\r\n        response: The response from the agent.\r\n        function_calls: Optional function calls associated with the response.\r\n\r\n    Returns: The post-processed response.\r\n    \"\"\"\r\n    if function_calls:\r\n        text = response['text']\r\n        return json.loads(text)\r\n\r\n    return response['text']\r\n\r\n\r\nclass JsonPrompter:\r\n    \"\"\"\r\n    Adapted from local_llm_function_calling\r\n    \"\"\"\r\n    def __init__(self, is_instruct: bool = False):\r\n        self.is_instruct = is_instruct\r\n\r\n    def function_descriptions(\r\n        self, functions: list[FunctionType], function_to_call: str\r\n    ) -> list[str]:\r\n        \"\"\"Get the descriptions of the functions\r\n\r\n        Args:\r\n            functions (list[FunctionType]): The functions to get the descriptions of\r\n            function_to_call (str): The function to call\r\n\r\n        Returns:\r\n            list[str]: The descriptions of the functions\r\n                (empty if the function doesn't exist or has no description)\r\n        \"\"\"\r\n        return [\r\n            f'# {function[\"name\"]}: {function[\"description\"]}'\r\n            for function in functions\r\n            if function[\"name\"] == function_to_call and \"description\" in function\r\n        ]\r\n\r\n    def function_parameters(\r\n        self, functions: list[FunctionType], function_to_call: str\r\n    ) -> str:\r\n        \"\"\"Get the parameters of the function\r\n\r\n        Args:\r\n            functions (list[FunctionType]): The functions to get the parameters of\r\n            function_to_call (str): The function to call\r\n\r\n        Returns:\r\n            str: The parameters of the function as a JSON schema\r\n        \"\"\"\r\n        return next(\r\n            json.dumps(function[\"parameters\"][\"properties\"], indent=4)\r\n            for function in functions\r\n            if function[\"name\"] == function_to_call\r\n        )\r\n\r\n    def function_data(\r\n        self, functions: list[FunctionType], function_to_call: str\r\n    ) -> str:\r\n        \"\"\"Get the data for the function\r\n\r\n        Args:\r\n            functions (list[FunctionType]): The functions to get the data for\r\n            function_to_call (str): The function to call\r\n\r\n        Returns:\r\n            str: The data necessary to generate the arguments for the function\r\n        \"\"\"\r\n        return \"\\n\".join(\r\n            [\r\n                \"Here is the schema for the expected JSON object:\",\r\n                \"```json\",\r\n                self.function_parameters(functions, function_to_call),\r\n                \"```\",\r\n            ]\r\n        )\r\n\r\n    def function_summary(self, function: FunctionType) -> str:\r\n        \"\"\"Get a summary of a function\r\n\r\n        Args:\r\n            function (FunctionType): The function to get the summary of\r\n\r\n        Returns:\r\n            str: The summary of the function, as a bullet point\r\n        \"\"\"\r\n        return f\"- {function['name']}\" + (\r\n            f\" - {function['description']}\" if \"description\" in function else \"\"\r\n        )\r\n\r\n    def functions_summary(self, functions: list[FunctionType]) -> str:\r\n        \"\"\"Get a summary of the functions\r\n\r\n        Args:\r\n            functions (list[FunctionType]): The functions to get the summary of\r\n\r\n        Returns:\r\n            str: The summary of the functions, as a bulleted list\r\n        \"\"\"\r\n        return \"Available functions:\\n\" + \"\\n\".join(\r\n            self.function_summary(function) for function in functions\r\n        )\r\n\r\n    def prompt(\r\n        self,\r\n        prompt: str,\r\n        functions: list[FunctionType],\r\n        function_to_call: Union[str, None] = None,\r\n    ) -> str:\r\n        \"\"\"Generate the llama prompt\r\n\r\n        Args:\r\n            prompt (str): The prompt to generate the response to\r\n            functions (list[FunctionType]): The functions to generate the response from\r\n            function_to_call (str | None): The function to call. Defaults to None.\r\n\r\n        Returns:\r\n            list[bytes | int]: The llama prompt, a function selection prompt if no\r\n                function is specified, or a function argument prompt if a function is\r\n                specified\r\n        \"\"\"\r\n        system = (\r\n            \"Help choose the appropriate function to call to answer the user's question.\"\r\n            if function_to_call is None\r\n            else \"**IMPORTANT**\"\r\n        ) + \"\\nYou must respond with ONLY the JSON object, with NO additional text or explanation.\"\r\n\r\n        data = (\r\n            self.function_data(functions, function_to_call)\r\n            if function_to_call\r\n            else self.functions_summary(functions)\r\n        )\r\n\r\n        if self.is_instruct:\r\n            return f\"[INST] <<SYS>>\\n{system}\\n\\n{data}\\n<</SYS>>\\n\\n{prompt} [/INST]\"\r\n        else:\r\n            return f\"{system}\\n\\n{data}\\n\\n{prompt}\"\r\n","file":"/pilot/utils/function_calling.py","fileHash":"4fa33ffd67d54374bc275c9eb7d0f2bf0f445fc52d2ee1431662ecd0a037fa35","hash":"4fa33ffd67d54374bc275c9eb7d0f2bf0f445fc52d2ee1431662ecd0a037fa35","processedContent":"import json\r #undefined\nimport re\r #undefined\nfrom typing import Union, TypeVar, List, Dict, Literal, Optional, TypedDict, Callable\r\n\"\"\"\nscip-python python python-stdlib 3.11 typing/__init__:: undefined\nscip-python python python-stdlib 3.11 typing/Union.: undefined\nscip-python python python-stdlib 3.11 typing/TypeVar#: undefined\nscip-python python python-stdlib 3.11 typing/List.: undefined\nscip-python python python-stdlib 3.11 typing/Dict.: undefined\nscip-python python python-stdlib 3.11 typing/Literal.: undefined\nscip-python python python-stdlib 3.11 typing/Optional.: undefined\nscip-python python python-stdlib 3.11 typing/TypedDict.: undefined\nscip-python python python-stdlib 3.11 typing/Callable.: undefined\n\"\"\"\n\r\nJsonTypeBase = Union[str, int, float, bool, None, List[\"JsonType\"], Dict[str, \"JsonType\"]]\r\n\"\"\"\nscip-python python python-stdlib 3.11 typing/Union.: undefined\nscip-python python python-stdlib 3.11 typing/List.: undefined\nscip-python python python-stdlib 3.11 typing/Dict.: undefined\n\"\"\"\nJsonType = TypeVar(\"JsonType\", bound=JsonTypeBase)\r\n\"\"\"\nscip-python python python-stdlib 3.11 typing/TypeVar#: undefined\nscip-python python temp indexer `pilot.utils.function_calling`/JsonTypeBase.: undefined\n\"\"\"\n\r\n\r\nclass FunctionParameters(TypedDict):\r\n    \"\"\"This code defines a custom data type called \"FunctionParameters\" that represents the parameters of a function. It specifies that the type of the parameter is an object, and it has properties that are defined as a dictionary of strings to JSON types. Additionally, it optionally specifies a list of required parameters.\"\"\"\n    pass\n\r\n\r\nclass FunctionType(TypedDict):\r\n    \"\"\"This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It is used to define the structure of a function in a typed dictionary.\"\"\"\n    pass\n\r\n\r\nclass FunctionCall(TypedDict):\r\n    \"\"\"This code defines a custom data type called \"FunctionCall\" that represents a function call with a name and parameters. It is used to store information about function calls in a typed dictionary.\"\"\"\n    pass\n\r\n\r\nclass FunctionCallSet(TypedDict):\r\n    \"\"\"This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It is used to define the structure of a function in a typed dictionary.\"\"\"\n    pass\n\r\n\r\ndef add_function_calls_to_request(gpt_data, function_calls: Union[FunctionCallSet, None]):\r\n    \"\"\"This code defines a function called `add_function_calls_to_request` that takes two arguments: a dictionary called `gpt_data` and a list of functions called `function_calls`. It then appends a new message to the `messages` list in `gpt_data` with a prompt for the user to choose a function to call.\"\"\"\n    pass\n\r\n\r\ndef parse_agent_response(response, function_calls: Union[FunctionCallSet, None]):\r\n    \"\"\"This code defines a function called \"parse_agent_response\" that takes two arguments: \"response\" and \"function_calls\". If \"function_calls\" is not None, the function returns the response as a JSON object. Otherwise, it returns the response as a string.\"\"\"\n    pass\n\r\n\r\nclass JsonPrompter:\r\n    \"\"\"The code defines a class called `JsonPrompter` that generates a prompt for a chatbot to answer a user's question. It takes a list of functions and a string representing the function to call as arguments, and returns a JSON schema with the parameters of the selected function.\"\"\"\n    pass\n","documentation":"The code defines a class called `JsonPrompter` that generates a prompt for a chatbot to answer a user's question. It takes a list of functions and a string representing the function to call as arguments, and returns a JSON schema with the parameters of the selected function."}},{"key":"scip-python python temp indexer `pilot.utils.function_calling`/parse_agent_response().","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.function_calling`/parse_agent_response().","language":"python","range":[58,0,72,27],"content":"def parse_agent_response(response, function_calls: Union[FunctionCallSet, None]):\r\n    \"\"\"\r\n    Post-processes the response from the agent.\r\n\r\n    Args:\r\n        response: The response from the agent.\r\n        function_calls: Optional function calls associated with the response.\r\n\r\n    Returns: The post-processed response.\r\n    \"\"\"\r\n    if function_calls:\r\n        text = response['text']\r\n        return json.loads(text)\r\n\r\n    return response['text']","file":"/pilot/utils/function_calling.py","fileHash":"4fa33ffd67d54374bc275c9eb7d0f2bf0f445fc52d2ee1431662ecd0a037fa35","hash":"e73ee882015c2a712a043add3fa62811233a03c463a6a8d819c869a3147d307e","processedContent":"def parse_agent_response(response, function_calls: Union[FunctionCallSet, None]):\r\n\"\"\"\nscip-python python python-stdlib 3.11 typing/Union.: undefined\nscip-python python temp indexer `pilot.utils.function_calling`/FunctionCallSet#: This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It is used to define the structure of a function in a typed dictionary.\n\"\"\"\n    \"\"\"\r\n    Post-processes the response from the agent.\r\n\r\n    Args:\r\n        response: The response from the agent.\r\n        function_calls: Optional function calls associated with the response.\r\n\r\n    Returns: The post-processed response.\r\n    \"\"\"\r\n    if function_calls:\r\n        text = response['text']\r\n        return json.loads(text)\r\n        \"\"\"\n        scip-python python python-stdlib 3.11 json/__init__:: undefined\n        scip-python python python-stdlib 3.11 json/loads().: undefined\n        \"\"\"\n\r\n    return response['text']","documentation":"This code defines a function called \"parse_agent_response\" that takes two arguments: \"response\" and \"function_calls\". If \"function_calls\" is not None, the function returns the response as a JSON object. Otherwise, it returns the response as a string."}},{"key":"scip-python python temp indexer `pilot.utils.function_calling`/FunctionCallSet#","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.function_calling`/FunctionCallSet#","language":"python","range":[31,0,33,34],"content":"class FunctionCallSet(TypedDict):\r\n    definitions: list[FunctionType]\r\n    functions: dict[str, Callable]","file":"/pilot/utils/function_calling.py","fileHash":"4fa33ffd67d54374bc275c9eb7d0f2bf0f445fc52d2ee1431662ecd0a037fa35","hash":"4590fe230c5ccc42de5299d3647022f3d52aff4c2c41214f6f7006a44fdb11c5","processedContent":"class FunctionCallSet(TypedDict):\r #undefined\n    definitions: list[FunctionType]\r #This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It is used to define the structure of a function in a typed dictionary.\n    functions: dict[str, Callable]","documentation":"This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It is used to define the structure of a function in a typed dictionary."}},{"key":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","language":"python","range":[0,0,474,0],"content":"import re\nimport requests\nimport os\nimport sys\nimport time\nimport json\nimport tiktoken\nfrom prompt_toolkit.styles import Style\n\nfrom jsonschema import validate, ValidationError\nfrom utils.style import color_red\nfrom typing import List\nfrom const.llm import MAX_GPT_MODEL_TOKENS\nfrom const.messages import AFFIRMATIVE_ANSWERS\nfrom logger.logger import logger, logging\nfrom helpers.exceptions import TokenLimitError, ApiKeyNotDefinedError\nfrom utils.utils import fix_json, get_prompt\nfrom utils.function_calling import add_function_calls_to_request, FunctionCallSet, FunctionType\nfrom utils.questionary import styled_text\n\nfrom .telemetry import telemetry\n\ndef get_tokens_in_messages(messages: List[str]) -> int:\n    tokenizer = tiktoken.get_encoding(\"cl100k_base\")  # GPT-4 tokenizer\n    tokenized_messages = [tokenizer.encode(message['content']) for message in messages]\n    return sum(len(tokens) for tokens in tokenized_messages)\n\n\ndef num_tokens_from_functions(functions):\n    \"\"\"Return the number of tokens used by a list of functions.\"\"\"\n    encoding = tiktoken.get_encoding(\"cl100k_base\")\n\n    num_tokens = 0\n    for function in functions:\n        function_tokens = len(encoding.encode(function['name']))\n        function_tokens += len(encoding.encode(function['description']))\n\n        if 'parameters' in function:\n            parameters = function['parameters']\n            if 'properties' in parameters:\n                for propertiesKey in parameters['properties']:\n                    function_tokens += len(encoding.encode(propertiesKey))\n                    v = parameters['properties'][propertiesKey]\n                    for field in v:\n                        if field == 'type':\n                            function_tokens += 2\n                            function_tokens += len(encoding.encode(v['type']))\n                        elif field == 'description':\n                            function_tokens += 2\n                            function_tokens += len(encoding.encode(v['description']))\n                        elif field == 'enum':\n                            function_tokens -= 3\n                            for o in v['enum']:\n                                function_tokens += 3\n                                function_tokens += len(encoding.encode(o))\n                function_tokens += 11\n\n        num_tokens += function_tokens\n\n    num_tokens += 12\n    return num_tokens\n\n\ndef create_gpt_chat_completion(messages: List[dict], req_type, project,\n                               function_calls: FunctionCallSet = None):\n    \"\"\"\n    Called from:\n      - AgentConvo.send_message() - these calls often have `function_calls`, usually from `pilot/const/function_calls.py`\n         - convo.continuous_conversation()\n      - prompts.get_additional_info_from_openai()\n      - prompts.get_additional_info_from_user() after the user responds to each\n            \"Please check this message and say what needs to be changed... {message}\"\n    :param messages: [{ \"role\": \"system\"|\"assistant\"|\"user\", \"content\": string }, ... ]\n    :param req_type: 'project_description' etc. See common.STEPS\n    :param project: project\n    :param function_calls: (optional) {'definitions': [{ 'name': str }, ...]}\n        see `IMPLEMENT_CHANGES` etc. in `pilot/const/function_calls.py`\n    :return: {'text': new_code}\n        or if `function_calls` param provided\n             {'function_calls': {'name': str, arguments: {...}}}\n    \"\"\"\n\n    gpt_data = {\n        'model': os.getenv('MODEL_NAME', 'gpt-4'),\n        'n': 1,\n        'temperature': 1,\n        'top_p': 1,\n        'presence_penalty': 0,\n        'frequency_penalty': 0,\n        'messages': messages,\n        'stream': True\n    }\n\n    # delete some keys if using \"OpenRouter\" API\n    if os.getenv('ENDPOINT') == 'OPENROUTER':\n        keys_to_delete = ['n', 'max_tokens', 'temperature', 'top_p', 'presence_penalty', 'frequency_penalty']\n        for key in keys_to_delete:\n            if key in gpt_data:\n                del gpt_data[key]\n\n    # Advise the LLM of the JSON response schema we are expecting\n    messages_length = len(messages)\n    add_function_calls_to_request(gpt_data, function_calls)\n\n    try:\n        response = stream_gpt_completion(gpt_data, req_type, project)\n\n        # Remove JSON schema and any added retry messages\n        while len(messages) > messages_length:\n            messages.pop()\n        return response\n    except TokenLimitError as e:\n        raise e\n    except Exception as e:\n        logger.error(f'The request to {os.getenv(\"ENDPOINT\")} API failed: %s', e)\n        print(f'The request to {os.getenv(\"ENDPOINT\")} API failed. Here is the error message:')\n        print(e)\n        return {}   # https://github.com/Pythagora-io/gpt-pilot/issues/130 - may need to revisit how we handle this\n\n\ndef delete_last_n_lines(n):\n    for _ in range(n):\n        # Move the cursor up one line\n        sys.stdout.write('\\033[F')\n        # Clear the current line\n        sys.stdout.write('\\033[K')\n\n\ndef count_lines_based_on_width(content, width):\n    lines_required = sum(len(line) // width + 1 for line in content.split('\\n'))\n    return lines_required\n\n\ndef get_tokens_in_messages_from_openai_error(error_message):\n    \"\"\"\n    Extract the token count from a message.\n\n    Args:\n    message (str): The message to extract the token count from.\n\n    Returns:\n    int or None: The token count if found, otherwise None.\n    \"\"\"\n\n    match = re.search(r\"your messages resulted in (\\d+) tokens\", error_message)\n\n    if match:\n        return int(match.group(1))\n    else:\n        return None\n\n\ndef retry_on_exception(func):\n    def update_error_count(args):\n        function_error_count = 1 if 'function_error' not in args[0] else args[0]['function_error_count'] + 1\n        args[0]['function_error_count'] = function_error_count\n        return function_error_count\n\n    def set_function_error(args, err_str: str):\n        logger.info(err_str)\n\n        args[0]['function_error'] = err_str\n        if 'function_buffer' in args[0]:\n            del args[0]['function_buffer']\n\n    def wrapper(*args, **kwargs):\n        wait_duration_ms = None\n\n        while True:\n            try:\n                # spinner_stop(spinner)\n                return func(*args, **kwargs)\n            except Exception as e:\n                # Convert exception to string\n                err_str = str(e)\n\n                if isinstance(e, json.JSONDecodeError):\n                    # codellama-34b-instruct seems to send incomplete JSON responses.\n                    # We ask for the rest of the JSON object for the following errors:\n                    # - 'Expecting value' (error if `e.pos` not at the end of the doc: True instead of true)\n                    # - \"Expecting ':' delimiter\"\n                    # - 'Expecting property name enclosed in double quotes'\n                    # - 'Unterminated string starting at'\n                    if e.msg.startswith('Expecting') or e.msg == 'Unterminated string starting at':\n                        if e.msg == 'Expecting value' and len(e.doc) > e.pos:\n                            # Note: clean_json_response() should heal True/False boolean values\n                            err_str = re.split(r'[},\\\\n]', e.doc[e.pos:])[0]\n                            err_str = f'Invalid value: `{err_str}`'\n                        else:\n                            # if e.msg == 'Unterminated string starting at' or len(e.doc) == e.pos:\n                            logger.info('Received incomplete JSON response from LLM. Asking for the rest...')\n                            args[0]['function_buffer'] = e.doc\n                            if 'function_error' in args[0]:\n                                del args[0]['function_error']\n                            continue\n\n                    # TODO: (if it ever comes up) e.msg == 'Extra data' -> trim the response\n                    # 'Invalid control character at', 'Invalid \\\\escape', 'Invalid control character',\n                    # or `Expecting value` with `pos` before the end of `e.doc`\n                    function_error_count = update_error_count(args)\n                    logger.warning('Received invalid character in JSON response from LLM. Asking to retry...')\n                    logger.info(f'  received: {e.doc}')\n                    set_function_error(args, err_str)\n                    if function_error_count < 3:\n                        continue\n                elif isinstance(e, ValidationError):\n                    function_error_count = update_error_count(args)\n                    logger.warning('Received invalid JSON response from LLM. Asking to retry...')\n                    # eg:\n                    # json_path: '$.type'\n                    # message:   \"'command' is not one of ['automated_test', 'command_test', 'manual_test', 'no_test']\"\n                    set_function_error(args, f'at {e.json_path} - {e.message}')\n                    # Attempt retry if the JSON schema is invalid, but avoid getting stuck in a loop\n                    if function_error_count < 3:\n                        continue\n                if \"context_length_exceeded\" in err_str:\n                    # If the specific error \"context_length_exceeded\" is present, simply return without retry\n                    # spinner_stop(spinner)\n                    raise TokenLimitError(get_tokens_in_messages_from_openai_error(err_str), MAX_GPT_MODEL_TOKENS)\n                if \"rate_limit_exceeded\" in err_str:\n                    # Extracting the duration from the error string\n                    match = re.search(r\"Please try again in (\\d+)ms.\", err_str)\n                    if match:\n                        # spinner = spinner_start(colored(\"Rate limited. Waiting...\", 'yellow'))\n                        if wait_duration_ms is None:\n                            wait_duration_ms = int(match.group(1))\n                        elif wait_duration_ms < 6000:\n                            # waiting 6ms isn't usually long enough - exponential back-off until about 6 seconds\n                            wait_duration_ms *= 2\n                        logger.debug(f'Rate limited. Waiting {wait_duration_ms}ms...')\n                        time.sleep(wait_duration_ms / 1000)\n                    continue\n\n                print(color_red('There was a problem with request to openai API:'))\n                # spinner_stop(spinner)\n                print(err_str)\n                logger.error(f'There was a problem with request to openai API: {err_str}')\n\n                project = args[2]\n                print('yes/no', type='button')\n                user_message = styled_text(\n                    project,\n                    'Do you want to try make the same request again? If yes, just press ENTER. Otherwise, type \"no\".',\n                    style=Style.from_dict({\n                        'question': '#FF0000 bold',\n                        'answer': '#FF910A bold'\n                    })\n                )\n\n                # TODO: take user's input into consideration - send to LLM?\n                # https://github.com/Pythagora-io/gpt-pilot/issues/122\n                if user_message.lower() not in AFFIRMATIVE_ANSWERS:\n                    return {}\n\n    return wrapper\n\n\n@retry_on_exception\ndef stream_gpt_completion(data, req_type, project):\n    \"\"\"\n    Called from create_gpt_chat_completion()\n    :param data:\n    :param req_type: 'project_description' etc. See common.STEPS\n    :param project: NEEDED FOR WRAPPER FUNCTION retry_on_exception\n    :return: {'text': str} or {'function_calls': {'name': str, arguments: '{...}'}}\n    \"\"\"\n    # TODO add type dynamically - this isn't working when connected to the external process\n    try:\n        terminal_width = os.get_terminal_size().columns\n    except OSError:\n        terminal_width = 50\n    lines_printed = 2\n    gpt_response = ''\n    buffer = ''  # A buffer to accumulate incoming data\n    expecting_json = None\n    received_json = False\n\n    if 'functions' in data:\n        expecting_json = data['functions']\n        if 'function_buffer' in data:\n            incomplete_json = get_prompt('utils/incomplete_json.prompt', {'received_json': data['function_buffer']})\n            data['messages'].append({'role': 'user', 'content': incomplete_json})\n            gpt_response = data['function_buffer']\n            received_json = True\n        elif 'function_error' in data:\n            invalid_json = get_prompt('utils/invalid_json.prompt', {'invalid_reason': data['function_error']})\n            data['messages'].append({'role': 'user', 'content': invalid_json})\n            received_json = True\n\n        # Don't send the `functions` parameter to Open AI, but don't remove it from `data` in case we need to retry\n        data = {key: value for key, value in data.items() if not key.startswith('function')}\n\n    def return_result(result_data, lines_printed):\n        if buffer:\n            lines_printed += count_lines_based_on_width(buffer, terminal_width)\n        logger.debug(f'lines printed: {lines_printed} - {terminal_width}')\n\n        # delete_last_n_lines(lines_printed)  # TODO fix and test count_lines_based_on_width()\n        return result_data\n\n    # spinner = spinner_start(yellow(\"Waiting for OpenAI API response...\"))\n    # print(yellow(\"Stream response from OpenAI:\"))\n\n    # Configure for the selected ENDPOINT\n    model = os.getenv('MODEL_NAME', 'gpt-4')\n    endpoint = os.getenv('ENDPOINT')\n\n    # This will be set many times but we don't care, as there are no side-effects to it.\n    telemetry.set(\"model\", model)\n    telemetry.inc(\"num_llm_requests\")\n\n    logger.info(f'> Request model: {model}')\n    if logger.isEnabledFor(logging.DEBUG):\n        logger.debug('\\n'.join([f\"{message['role']}: {message['content']}\" for message in data['messages']]))\n\n    if endpoint == 'AZURE':\n        # If yes, get the AZURE_ENDPOINT from .ENV file\n        endpoint_url = os.getenv('AZURE_ENDPOINT') + '/openai/deployments/' + model + '/chat/completions?api-version=2023-05-15'\n        headers = {\n            'Content-Type': 'application/json',\n            'api-key': get_api_key_or_throw('AZURE_API_KEY')\n        }\n    elif endpoint == 'OPENROUTER':\n        # If so, send the request to the OpenRouter API endpoint\n        endpoint_url = os.getenv('OPENROUTER_ENDPOINT', 'https://openrouter.ai/api/v1/chat/completions')\n        headers = {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + get_api_key_or_throw('OPENROUTER_API_KEY'),\n            'HTTP-Referer': 'https://github.com/Pythagora-io/gpt-pilot',\n            'X-Title': 'GPT Pilot'\n        }\n        data['max_tokens'] = MAX_GPT_MODEL_TOKENS\n        data['model'] = model\n    else:\n        # If not, send the request to the OpenAI endpoint\n        endpoint_url = os.getenv('OPENAI_ENDPOINT', 'https://api.openai.com/v1/chat/completions')\n        headers = {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + get_api_key_or_throw('OPENAI_API_KEY')\n        }\n        data['model'] = model\n\n    response = requests.post(\n        endpoint_url,\n        headers=headers,\n        json=data,\n        stream=True\n    )\n\n    if response.status_code != 200:\n        project.dot_pilot_gpt.log_chat_completion(endpoint, model, req_type, data['messages'], response.text)\n        logger.info(f'problem with request (status {response.status_code}): {response.text}')\n        raise Exception(f\"API responded with status code: {response.status_code}. Response text: {response.text}\")\n\n    # function_calls = {'name': '', 'arguments': ''}\n\n    for line in response.iter_lines():\n        # Ignore keep-alive new lines\n        if line and line != b': OPENROUTER PROCESSING':\n            line = line.decode(\"utf-8\")  # decode the bytes to string\n\n            if line.startswith('data: '):\n                line = line[6:]  # remove the 'data: ' prefix\n\n            # Check if the line is \"[DONE]\" before trying to parse it as JSON\n            if line == \"[DONE]\":\n                continue\n\n            try:\n                json_line = json.loads(line)\n\n                if len(json_line['choices']) == 0:\n                    continue\n\n                if 'error' in json_line:\n                    logger.error(f'Error in LLM response: {json_line}')\n                    raise ValueError(f'Error in LLM response: {json_line[\"error\"][\"message\"]}')\n\n                choice = json_line['choices'][0]\n\n                # if 'finish_reason' in choice and choice['finish_reason'] == 'function_call':\n                #     function_calls['arguments'] = load_data_to_json(function_calls['arguments'])\n                #     return return_result({'function_calls': function_calls}, lines_printed)\n\n                json_line = choice['delta']\n\n            except json.JSONDecodeError as e:\n                logger.error(f'Unable to decode line: {line} {e.msg}')\n                continue  # skip to the next line\n\n            # handle the streaming response\n            # if 'function_call' in json_line:\n            #     if 'name' in json_line['function_call']:\n            #         function_calls['name'] = json_line['function_call']['name']\n            #         print(f'Function call: {function_calls[\"name\"]}')\n            #\n            #     if 'arguments' in json_line['function_call']:\n            #         function_calls['arguments'] += json_line['function_call']['arguments']\n            #         print(json_line['function_call']['arguments'], type='stream', end='', flush=True)\n\n            if 'content' in json_line:\n                content = json_line.get('content')\n                if content:\n                    buffer += content  # accumulate the data\n\n                    # If you detect a natural breakpoint (e.g., line break or end of a response object), print & count:\n                    if buffer.endswith('\\n'):\n                        if expecting_json and not received_json:\n                            received_json = assert_json_response(buffer, lines_printed > 2)\n\n                        # or some other condition that denotes a breakpoint\n                        lines_printed += count_lines_based_on_width(buffer, terminal_width)\n                        buffer = \"\"  # reset the buffer\n\n                    gpt_response += content\n                    print(content, type='stream', end='', flush=True)\n\n    print('\\n', type='stream')\n\n    # if function_calls['arguments'] != '':\n    #     logger.info(f'Response via function call: {function_calls[\"arguments\"]}')\n    #     function_calls['arguments'] = load_data_to_json(function_calls['arguments'])\n    #     return return_result({'function_calls': function_calls}, lines_printed)\n    logger.info('<<<<<<<<<< LLM Response <<<<<<<<<<\\n%s\\n<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<', gpt_response)\n    project.dot_pilot_gpt.log_chat_completion(endpoint, model, req_type, data['messages'], gpt_response)\n\n    if expecting_json:\n        gpt_response = clean_json_response(gpt_response)\n        assert_json_schema(gpt_response, expecting_json)\n        # Note, we log JSON separately from the YAML log above incase the JSON is invalid and an error is raised\n        project.dot_pilot_gpt.log_chat_completion_json(endpoint, model, req_type, expecting_json, gpt_response)\n\n    new_code = postprocessing(gpt_response, req_type)  # TODO add type dynamically\n    return return_result({'text': new_code}, lines_printed)\n\n\ndef get_api_key_or_throw(env_key: str):\n    api_key = os.getenv(env_key)\n    if api_key is None:\n        raise ApiKeyNotDefinedError(env_key)\n    return api_key\n\n\ndef assert_json_response(response: str, or_fail=True) -> bool:\n    if re.match(r'.*(```(json)?|{|\\[)', response):\n        return True\n    elif or_fail:\n        logger.error(f'LLM did not respond with JSON: {response}')\n        raise ValueError('LLM did not respond with JSON')\n    else:\n        return False\n\n\ndef clean_json_response(response: str) -> str:\n    response = re.sub(r'^.*```json\\s*', '', response, flags=re.DOTALL)\n    response = re.sub(r': ?True(,)?$', r':true\\1', response, flags=re.MULTILINE)\n    response = re.sub(r': ?False(,)?$', r':false\\1', response, flags=re.MULTILINE)\n    return response.strip('` \\n')\n\n\ndef assert_json_schema(response: str, functions: list[FunctionType]) -> True:\n    for function in functions:\n        schema = function['parameters']\n        parsed = json.loads(response)\n        validate(parsed, schema)\n        return True\n\n\ndef postprocessing(gpt_response: str, req_type) -> str:\n    return gpt_response\n\n\ndef load_data_to_json(string):\n    return json.loads(fix_json(string))\n","file":"/pilot/utils/llm_connection.py","fileHash":"42cf6b119f292f460c68eab86733c13aa50b286df215725c06a6561264a03d01","hash":"42cf6b119f292f460c68eab86733c13aa50b286df215725c06a6561264a03d01","processedContent":"import re #undefined\nimport requests #undefined\nimport os #undefined\nimport sys #undefined\nimport time #undefined\nimport json #undefined\nimport tiktoken\nfrom prompt_toolkit.styles import Style\n\"\"\"\nscip-python python prompt-toolkit 3.0.39 `prompt_toolkit.styles`/__init__:: undefined\nscip-python python prompt-toolkit 3.0.39 `prompt_toolkit.styles.style`/Style#: undefined\n\"\"\"\n\nfrom jsonschema import validate, ValidationError #undefined\nfrom utils.style import color_red\n\"\"\"\nscip-python python temp indexer `pilot.utils.style`/__init__:: This code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.utils.style`/color_red.: undefined\n\"\"\"\nfrom typing import List\n\"\"\"\nscip-python python python-stdlib 3.11 typing/__init__:: undefined\nscip-python python python-stdlib 3.11 typing/List.: undefined\n\"\"\"\nfrom const.llm import MAX_GPT_MODEL_TOKENS\n\"\"\"\nscip-python python temp indexer `pilot.const.llm`/__init__:: This code defines constants for the maximum number of tokens allowed in a GPT model and the minimum number of tokens required for a response. It also sets the maximum number of questions that can be asked and the response when the conversation is complete.\nscip-python python temp indexer `pilot.const.llm`/MAX_GPT_MODEL_TOKENS.: undefined\n\"\"\"\nfrom const.messages import AFFIRMATIVE_ANSWERS\n\"\"\"\nscip-python python temp indexer `pilot.const.messages`/__init__:: This code defines a set of constants that are used to control the flow of a program. The first constant, `CHECK_AND_CONTINUE`, is a message that is displayed when something goes wrong and the user needs to be prompted to continue. The second constant, `WHEN_USER_DONE`, is a message that is displayed when the user is finished with a task and needs to be prompted to continue. The third and fourth constants, `AFFIRMATIVE_ANSWERS` and `NEGATIVE_ANSWERS`, define sets of strings that are used to determine whether a user's response indicates affirmative or negative sentiment.\nscip-python python temp indexer `pilot.const.messages`/AFFIRMATIVE_ANSWERS.: undefined\n\"\"\"\nfrom logger.logger import logger, logging\n\"\"\"\nscip-python python temp indexer `pilot.logger.logger`/__init__:: This code sets up a custom logger for an application, which filters sensitive information from log records and removes ANSI escape sequences.\nscip-python python temp indexer `pilot.logger.logger`/logger.: undefined\nscip-python python python-stdlib 3.11 logging/__init__:: undefined\n\"\"\"\nfrom helpers.exceptions import TokenLimitError, ApiKeyNotDefinedError\n\"\"\"\nscip-python python temp indexer `pilot.helpers.exceptions`/__init__:: The code defines custom exception classes for API key not defined, token limit exceeded, and too deep recursion errors.\nscip-python python temp indexer `pilot.helpers.exceptions.tokenlimiterror`/TokenLimitError#: This code defines a custom exception class called `TokenLimitError` that is raised when the number of tokens in a message exceeds the maximum allowed by the GPT model. The class takes two arguments: `tokens_in_messages` and `max_tokens`, which represent the number of tokens in the message and the maximum number of tokens allowed, respectively. The `__init__` method sets the instance variables and calls the parent class's constructor with a formatted error message.\nscip-python python temp indexer `pilot.helpers.exceptions.apikeynotdefinederror`/ApiKeyNotDefinedError#: This code defines a custom exception class called `ApiKeyNotDefinedError` that is raised when an API key is not defined in the environment. The class takes an environment key as an argument and initializes the exception with a message indicating the missing API key.\n\"\"\"\nfrom utils.utils import fix_json, get_prompt\n\"\"\"\nscip-python python temp indexer `pilot.utils.utils`/__init__:: The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.utils.utils`/fix_json().: This code is a function that takes a string of JSON data as input and fixes any inconsistencies in the formatting, such as replacing \"True\" with \"true\" and \"False\" with \"false\". It also replaces backticks with double quotes. The function then returns the fixed JSON data.\nscip-python python temp indexer `pilot.utils.utils`/get_prompt().: This code defines a function called `get_prompt` that retrieves and renders a prompt template based on the provided name. It uses Jinja2 to render the templates with no variables, and stores the rendered content in a dictionary called `prompts_components`.\n\"\"\"\nfrom utils.function_calling import add_function_calls_to_request, FunctionCallSet, FunctionType\n\"\"\"\nscip-python python temp indexer `pilot.utils.function_calling`/__init__:: The code defines a class called `JsonPrompter` that generates a prompt for a chatbot to answer a user's question. It takes a list of functions and a string representing the function to call as arguments, and returns a JSON schema with the parameters of the selected function.\nscip-python python temp indexer `pilot.utils.function_calling`/add_function_calls_to_request().: This code defines a function called `add_function_calls_to_request` that takes two arguments: a dictionary called `gpt_data` and a list of functions called `function_calls`. It then appends a new message to the `messages` list in `gpt_data` with a prompt for the user to choose a function to call.\nscip-python python temp indexer `pilot.utils.function_calling`/FunctionCallSet#: This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It is used to define the structure of a function in a typed dictionary.\nscip-python python temp indexer `pilot.utils.function_calling`/FunctionType#: This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It is used to define the structure of a function in a typed dictionary.\n\"\"\"\nfrom utils.questionary import styled_text\n\"\"\"\nscip-python python temp indexer `pilot.utils.questionary`/__init__:: The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.utils.questionary`/styled_text().: This code defines a function called `styled_text` that retrieves user input from a database, styles the question, and saves the response to the database.\n\"\"\"\n\nfrom .telemetry import telemetry\n\"\"\"\nscip-python python temp indexer `pilot.utils.telemetry`/__init__:: This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server.\nscip-python python temp indexer `pilot.utils.telemetry`/telemetry.: undefined\n\"\"\"\n\ndef get_tokens_in_messages(messages: List[str]) -> int:\n    \"\"\"This code takes a list of messages and returns the total number of tokens in those messages. It uses a GPT-4 tokenizer to encode each message and then counts the number of tokens in each encoded message before summing them all up.\"\"\"\n    pass\n\n\ndef num_tokens_from_functions(functions):\n    \"\"\"This code calculates the number of tokens used by a list of functions. It uses a tokenizer to count the length of each function's name, description, and parameters. The result is returned as an integer.\"\"\"\n    pass\n\n\ndef create_gpt_chat_completion(messages: List[dict], req_type, project,\n                               \"\"\"This code defines a function called `create_gpt_chat_completion` that takes in a list of messages, a request type, and a project. It then uses the OpenAI GPT language model to generate a response based on the input messages. The function also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\"\"\"\n                               pass\n\n\ndef delete_last_n_lines(n):\n    \"\"\"This code deletes the last n lines of output in the terminal.\"\"\"\n    pass\n\n\ndef count_lines_based_on_width(content, width):\n    \"\"\"This code counts the number of lines required to display a piece of text based on a given width. It does this by splitting the text into individual lines, calculating the length of each line, and then summing the total number of lines needed to display the text.\"\"\"\n    pass\n\n\ndef get_tokens_in_messages_from_openai_error(error_message):\n    \"\"\"This code extracts the token count from an error message returned by the OpenAI API. It uses regular expressions to search for a specific pattern in the message and returns the token count if found, or None otherwise.\"\"\"\n    pass\n\n\ndef retry_on_exception(func):\n    \"\"\"This code defines a decorator function called `retry_on_exception` that retries a function if it encounters an exception, and provides a way for users to retry the request if they want to.\"\"\"\n    pass\n\n\n@retry_on_exception\ndef stream_gpt_completion(data, req_type, project):\n    \"\"\"The code defines a function called `stream_gpt_completion` that retrieves and renders a prompt template based on the provided name. It uses Jinja2 to render the templates with no variables, and stores the rendered content in a dictionary called `prompts_components`.\"\"\"\n    pass\n\n\ndef get_api_key_or_throw(env_key: str):\n    \"\"\"This code defines a function called `get_api_key_or_throw` that retrieves an API key from the environment and raises a custom exception if it is not defined.\"\"\"\n    pass\n\n\ndef assert_json_response(response: str, or_fail=True) -> bool:\n    \"\"\"This code checks if the response from an API call is in JSON format. If it's not, it logs an error and raises a ValueError.\"\"\"\n    pass\n\n\ndef clean_json_response(response: str) -> str:\n    \"\"\"This code takes a JSON response and cleans it up by removing unnecessary characters and converting booleans to lowercase strings.\"\"\"\n    pass\n\n\ndef assert_json_schema(response: str, functions: list[FunctionType]) -> True:\n    \"\"\"This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It is used to define the structure of a function in a typed dictionary. The code then iterates over a list of functions and validates each one against a JSON schema using the `validate()` function from the `json` module.\"\"\"\n    pass\n\n\ndef postprocessing(gpt_response: str, req_type) -> str:\n    \"\"\"This code defines a function called `postprocessing` that takes two arguments: `gpt_response` and `req_type`. It returns the value of `gpt_response`, which is a string. The function does not perform any complex operations, but it is an important part of the overall system because it helps to ensure that the output from the GPT model is accurate and relevant to the user's request.\"\"\"\n    pass\n\n\ndef load_data_to_json(string):\n    \"\"\"This code takes a string of JSON data and converts it into a Python dictionary using the `json.loads()` function, which is part of the Python standard library. The `fix_json()` function is not included in the code snippet provided, but it is likely used to fix any errors or inconsistencies in the JSON data before it is loaded into the Python dictionary.\"\"\"\n    pass\n","documentation":"The code defines a Python script that uses the OpenAI GPT language model to generate responses to user prompts. It includes functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model."}},{"key":"scip-python python temp indexer `pilot.utils.llm_connection`/create_gpt_chat_completion().","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.llm_connection`/create_gpt_chat_completion().","language":"python","range":[63,0,117,17],"content":"def create_gpt_chat_completion(messages: List[dict], req_type, project,\n                               function_calls: FunctionCallSet = None):\n    \"\"\"\n    Called from:\n      - AgentConvo.send_message() - these calls often have `function_calls`, usually from `pilot/const/function_calls.py`\n         - convo.continuous_conversation()\n      - prompts.get_additional_info_from_openai()\n      - prompts.get_additional_info_from_user() after the user responds to each\n            \"Please check this message and say what needs to be changed... {message}\"\n    :param messages: [{ \"role\": \"system\"|\"assistant\"|\"user\", \"content\": string }, ... ]\n    :param req_type: 'project_description' etc. See common.STEPS\n    :param project: project\n    :param function_calls: (optional) {'definitions': [{ 'name': str }, ...]}\n        see `IMPLEMENT_CHANGES` etc. in `pilot/const/function_calls.py`\n    :return: {'text': new_code}\n        or if `function_calls` param provided\n             {'function_calls': {'name': str, arguments: {...}}}\n    \"\"\"\n\n    gpt_data = {\n        'model': os.getenv('MODEL_NAME', 'gpt-4'),\n        'n': 1,\n        'temperature': 1,\n        'top_p': 1,\n        'presence_penalty': 0,\n        'frequency_penalty': 0,\n        'messages': messages,\n        'stream': True\n    }\n\n    # delete some keys if using \"OpenRouter\" API\n    if os.getenv('ENDPOINT') == 'OPENROUTER':\n        keys_to_delete = ['n', 'max_tokens', 'temperature', 'top_p', 'presence_penalty', 'frequency_penalty']\n        for key in keys_to_delete:\n            if key in gpt_data:\n                del gpt_data[key]\n\n    # Advise the LLM of the JSON response schema we are expecting\n    messages_length = len(messages)\n    add_function_calls_to_request(gpt_data, function_calls)\n\n    try:\n        response = stream_gpt_completion(gpt_data, req_type, project)\n\n        # Remove JSON schema and any added retry messages\n        while len(messages) > messages_length:\n            messages.pop()\n        return response\n    except TokenLimitError as e:\n        raise e\n    except Exception as e:\n        logger.error(f'The request to {os.getenv(\"ENDPOINT\")} API failed: %s', e)\n        print(f'The request to {os.getenv(\"ENDPOINT\")} API failed. Here is the error message:')\n        print(e)\n        return {}","file":"/pilot/utils/llm_connection.py","fileHash":"42cf6b119f292f460c68eab86733c13aa50b286df215725c06a6561264a03d01","hash":"a20adbab8894b3ac1cf919869aefc5d6489a1c38dc0b2da021e36e950232bc6b","processedContent":"def create_gpt_chat_completion(messages: List[dict], req_type, project, #undefined\n                               function_calls: FunctionCallSet = None): #This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It is used to define the structure of a function in a typed dictionary.\n    \"\"\"\n    Called from:\n      - AgentConvo.send_message() - these calls often have `function_calls`, usually from `pilot/const/function_calls.py`\n         - convo.continuous_conversation()\n      - prompts.get_additional_info_from_openai()\n      - prompts.get_additional_info_from_user() after the user responds to each\n            \"Please check this message and say what needs to be changed... {message}\"\n    :param messages: [{ \"role\": \"system\"|\"assistant\"|\"user\", \"content\": string }, ... ]\n    :param req_type: 'project_description' etc. See common.STEPS\n    :param project: project\n    :param function_calls: (optional) {'definitions': [{ 'name': str }, ...]}\n        see `IMPLEMENT_CHANGES` etc. in `pilot/const/function_calls.py`\n    :return: {'text': new_code}\n        or if `function_calls` param provided\n             {'function_calls': {'name': str, arguments: {...}}}\n    \"\"\"\n\n    gpt_data = {\n        'model': os.getenv('MODEL_NAME', 'gpt-4'),\n        \"\"\"\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/getenv().: undefined\n        \"\"\"\n        'n': 1,\n        'temperature': 1,\n        'top_p': 1,\n        'presence_penalty': 0,\n        'frequency_penalty': 0,\n        'messages': messages,\n        'stream': True\n    }\n\n    # delete some keys if using \"OpenRouter\" API\n    if os.getenv('ENDPOINT') == 'OPENROUTER':\n    \"\"\"\n    scip-python python python-stdlib 3.11 os/__init__:: undefined\n    scip-python python python-stdlib 3.11 os/getenv().: undefined\n    \"\"\"\n        keys_to_delete = ['n', 'max_tokens', 'temperature', 'top_p', 'presence_penalty', 'frequency_penalty']\n        for key in keys_to_delete:\n            if key in gpt_data:\n                del gpt_data[key]\n\n    # Advise the LLM of the JSON response schema we are expecting\n    messages_length = len(messages)\n    add_function_calls_to_request(gpt_data, function_calls) #This code defines a function called `add_function_calls_to_request` that takes two arguments: a dictionary called `gpt_data` and a list of functions called `function_calls`. It then appends a new message to the `messages` list in `gpt_data` with a prompt for the user to choose a function to call.\n\n    try:\n        response = stream_gpt_completion(gpt_data, req_type, project) #The code defines a function called `stream_gpt_completion` that retrieves and renders a prompt template based on the provided name. It uses Jinja2 to render the templates with no variables, and stores the rendered content in a dictionary called `prompts_components`.\n\n        # Remove JSON schema and any added retry messages\n        while len(messages) > messages_length:\n            messages.pop()\n        return response\n    except TokenLimitError as e: #This code defines a custom exception class called `TokenLimitError` that is raised when the number of tokens in a message exceeds the maximum allowed by the GPT model. The class takes two arguments: `tokens_in_messages` and `max_tokens`, which represent the number of tokens in the message and the maximum number of tokens allowed, respectively. The `__init__` method sets the instance variables and calls the parent class's constructor with a formatted error message.\n        raise e\n    except Exception as e:\n        logger.error(f'The request to {os.getenv(\"ENDPOINT\")} API failed: %s', e)\n        \"\"\"\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/getenv().: undefined\n        scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n        scip-python python python-stdlib 3.11 logging/Logger#error().: undefined\n        \"\"\"\n        print(f'The request to {os.getenv(\"ENDPOINT\")} API failed. Here is the error message:')\n        \"\"\"\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/getenv().: undefined\n        \"\"\"\n        print(e)\n        return {}","documentation":"This code defines a function called `create_gpt_chat_completion` that takes in a list of messages, a request type, and a project. It then uses the OpenAI GPT language model to generate a response based on the input messages. The function also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model."}},{"key":"scip-python python temp indexer `pilot.utils.utils`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.utils`/__init__:","language":"python","range":[0,0,205,0],"content":"# utils/utils.py\n\nimport datetime\nimport os\nimport platform\nimport uuid\nimport distro\nimport json\nimport hashlib\nimport re\nfrom jinja2 import Environment, FileSystemLoader\nfrom .style import color_green\n\nfrom const.llm import MAX_QUESTIONS, END_RESPONSE\nfrom const.common import ROLES, STEPS\nfrom logger.logger import logger\n\nprompts_path = os.path.join(os.path.dirname(__file__), '..', 'prompts')\nfile_loader = FileSystemLoader(prompts_path)\nenv = Environment(loader=file_loader)\n\n\ndef capitalize_first_word_with_underscores(s):\n    # Split the string into words based on underscores.\n    words = s.split('_')\n\n    # Capitalize the first word and leave the rest unchanged.\n    words[0] = words[0].capitalize()\n\n    # Join the words back into a string with underscores.\n    capitalized_string = '_'.join(words)\n\n    return capitalized_string\n\n\ndef get_prompt(prompt_name, data=None):\n    if data is None:\n        data = {}\n\n    get_prompt_components(data)\n\n    logger.info(f\"Getting prompt for {prompt_name}\")\n\n    # Load the template\n    template = env.get_template(prompt_name)\n\n    # Render the template with the provided data\n    output = template.render(data)\n\n    return output\n\n\ndef get_prompt_components(data):\n    # This function reads and renders all prompts inside /prompts/components and returns them in dictionary\n\n    # Create an empty dictionary to store the file contents.\n    prompts_components = {}\n    data.update({\n        'MAX_QUESTIONS': MAX_QUESTIONS,\n        'END_RESPONSE': END_RESPONSE\n    })\n\n    # Create a FileSystemLoader\n    prompts_path = os.path.join(os.path.dirname(__file__), '..', 'prompts/components')\n    file_loader = FileSystemLoader(prompts_path)\n\n    # Create the Jinja2 environment\n    env = Environment(loader=file_loader)\n\n    # Get the list of template names\n    template_names = env.list_templates()\n\n    # For each template, load and store its content\n    for template_name in template_names:\n        # Get the filename without extension as the dictionary key.\n        file_key = os.path.splitext(template_name)[0]\n\n        # Load the template and render it with no variables\n        file_content = env.get_template(template_name).render(data)\n\n        # Store the file content in the dictionary\n        prompts_components[file_key] = file_content\n\n    return data.update(prompts_components)\n\n\ndef get_sys_message(role,args=None):\n    \"\"\"\n    :param role: 'product_owner', 'architect', 'dev_ops', 'tech_lead', 'full_stack_developer', 'code_monkey'\n    :return: { \"role\": \"system\", \"content\": \"You are a {role}... You do...\" }\n    \"\"\"\n    content = get_prompt(f'system_messages/{role}.prompt',args)\n\n    return {\n        \"role\": \"system\",\n        \"content\": content\n    }\n\n\ndef find_role_from_step(target):\n    for role, values in ROLES.items():\n        if target in values:\n            return role\n\n    return 'product_owner'\n\n\ndef get_os_info():\n    os_info = {\n        \"OS\": platform.system(),\n        \"OS Version\": platform.version(),\n        \"Architecture\": platform.architecture()[0],\n        \"Machine\": platform.machine(),\n        \"Node\": platform.node(),\n        \"Release\": platform.release(),\n    }\n\n    if os_info[\"OS\"] == \"Linux\":\n        os_info[\"Distribution\"] = distro.name(pretty=True)\n    elif os_info[\"OS\"] == \"Windows\":\n        os_info[\"Win32 Version\"] = ' '.join(platform.win32_ver())\n    elif os_info[\"OS\"] == \"Mac\":\n        os_info[\"Mac Version\"] = platform.mac_ver()[0]\n\n    # Convert the dictionary to a readable text format\n    return array_of_objects_to_string(os_info)\n\n\ndef should_execute_step(arg_step, current_step):\n    \"\"\"\n    :param arg_step: `project.args['step']`, may be None\n    :param current_step:  The step that would be executed next by the calling method.\n    :return: True if `current_step` should be executed.\n    \"\"\"\n    arg_step_index = 0 if arg_step is None else STEPS.index(arg_step) if arg_step in STEPS else None\n    current_step_index = STEPS.index(current_step) if current_step in STEPS else None\n\n    return arg_step_index is not None and current_step_index is not None and current_step_index >= arg_step_index\n\n\ndef step_already_finished(args, step):\n    args.update(step['app_data'])\n\n    message = f\"✅  {capitalize_first_word_with_underscores(step['step'])}\"\n    print(color_green(message))\n    logger.info(message)\n\n\ndef generate_app_data(args):\n    return {'app_id': args['app_id'], 'app_type': args['app_type']}\n\n\ndef array_of_objects_to_string(array):\n    return '\\n'.join([f'{key}: {value}' for key, value in array.items()])\n\n\ndef hash_data(data):\n    serialized_data = json.dumps(replace_functions(data), sort_keys=True).encode('utf-8')\n    return hashlib.sha256(serialized_data).hexdigest()\n\n\ndef replace_functions(obj):\n    if isinstance(obj, dict):\n        return {k: replace_functions(v) for k, v in obj.items()}\n    elif isinstance(obj, list):\n        return [replace_functions(item) for item in obj]\n    elif callable(obj):\n        return \"function\"\n    else:\n        return obj\n\n\ndef fix_json(s):\n    s = s.replace('True', 'true')\n    s = s.replace('False', 'false')\n    # s = s.replace('`', '\"')\n    return fix_json_newlines(s)\n\n\ndef fix_json_newlines(s):\n    pattern = r'(\"(?:\\\\\\\\n|\\\\.|[^\"\\\\])*\")'\n\n    def replace_newlines(match):\n        return match.group(1).replace('\\n', '\\\\n')\n\n    return re.sub(pattern, replace_newlines, s)\n\n\ndef clean_filename(filename):\n    # Remove invalid characters\n    cleaned_filename = re.sub(r'[<>:\"/\\\\|?*]', '', filename)\n\n    # Replace whitespace with underscore\n    cleaned_filename = re.sub(r'\\s', '_', cleaned_filename)\n\n    return cleaned_filename\n\ndef json_serial(obj):\n    \"\"\"JSON serializer for objects not serializable by default json code\"\"\"\n    if isinstance(obj, (datetime.datetime, datetime.date)):\n        return obj.isoformat()\n    elif isinstance(obj, uuid.UUID):\n        return str(obj)\n    else:\n        return str(obj)\n","file":"/pilot/utils/utils.py","fileHash":"ffe0ebca72a8999ffb0084622af3eb69767ceda2cc6d7e7e68e65ebb2b4408c3","hash":"ffe0ebca72a8999ffb0084622af3eb69767ceda2cc6d7e7e68e65ebb2b4408c3","processedContent":"# utils/utils.py\n\nimport datetime #undefined\nimport os #undefined\nimport platform #undefined\nimport uuid #undefined\nimport distro\nimport json #undefined\nimport hashlib #undefined\nimport re #undefined\nfrom jinja2 import Environment, FileSystemLoader #undefined\nfrom .style import color_green\n\"\"\"\nscip-python python temp indexer `pilot.utils.style`/__init__:: This code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.utils.style`/color_green.: undefined\n\"\"\"\n\nfrom const.llm import MAX_QUESTIONS, END_RESPONSE\n\"\"\"\nscip-python python temp indexer `pilot.const.llm`/__init__:: This code defines constants for the maximum number of tokens allowed in a GPT model and the minimum number of tokens required for a response. It also sets the maximum number of questions that can be asked and the response when the conversation is complete.\nscip-python python temp indexer `pilot.const.llm`/MAX_QUESTIONS.: undefined\nscip-python python temp indexer `pilot.const.llm`/END_RESPONSE.: undefined\n\"\"\"\nfrom const.common import ROLES, STEPS\n\"\"\"\nscip-python python temp indexer `pilot.const.common`/__init__:: This code defines a set of constants and variables used in the project, including a list of folders to ignore during certain operations.\nscip-python python temp indexer `pilot.const.common`/ROLES.: undefined\nscip-python python temp indexer `pilot.const.common`/STEPS.: undefined\n\"\"\"\nfrom logger.logger import logger\n\"\"\"\nscip-python python temp indexer `pilot.logger.logger`/__init__:: This code sets up a custom logger for an application, which filters sensitive information from log records and removes ANSI escape sequences.\nscip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n\"\"\"\n\nprompts_path = os.path.join(os.path.dirname(__file__), '..', 'prompts')\n\"\"\"\nscip-python python python-stdlib 3.11 os/__init__:: undefined\nscip-python python python-stdlib 3.11 os/__init__:: undefined\nscip-python python python-stdlib 3.11 os/path.: undefined\nscip-python python python-stdlib 3.11 os/path.: undefined\nscip-python python python-stdlib 3.11 posixpath/basename().: undefined\nscip-python python python-stdlib 3.11 posixpath/basename().: undefined\nscip-python python temp indexer `pilot.utils.utils`/: undefined\n\"\"\"\nfile_loader = FileSystemLoader(prompts_path) #undefined\nenv = Environment(loader=file_loader) #undefined\n\n\ndef capitalize_first_word_with_underscores(s):\n    \"\"\"This code takes a string with underscores and capitalizes the first word while keeping the rest of the words unchanged.\"\"\"\n    pass\n\n\ndef get_prompt(prompt_name, data=None):\n    \"\"\"This code defines a function called `get_prompt` that retrieves and renders a prompt template based on the provided name. It uses Jinja2 to render the templates with no variables, and stores the rendered content in a dictionary called `prompts_components`.\"\"\"\n    pass\n\n\ndef get_prompt_components(data):\n    \"\"\"This code defines a function called `get_prompt_components` that reads and renders all prompts inside the `/prompts/components` directory and returns them in a dictionary. It uses Jinja2 to render the templates with no variables, and stores the rendered content in a dictionary called `prompts_components`.\"\"\"\n    pass\n\n\ndef get_sys_message(role,args=None):\n    \"\"\"This code defines a function called `get_sys_message` that retrieves and renders a system message based on the provided role. The message is rendered using a prompt template stored in a dictionary called `prompts_components`.\"\"\"\n    pass\n\n\ndef find_role_from_step(target):\n    \"\"\"This code defines a function called `find_role_from_step` that takes a target value as an argument and returns the corresponding role from a dictionary of roles. The function iterates over the dictionary's key-value pairs, checks if the target value is in the values list for each key, and returns the corresponding role if it finds a match. If no match is found, it returns a default role of \"product_owner\".\"\"\"\n    pass\n\n\ndef get_os_info():\n    \"\"\"This code defines a function called `get_os_info()` that returns a dictionary containing information about the operating system, such as the OS name, version, architecture, and machine. The function uses the `platform` module to gather this information, and then converts the dictionary to a readable text format.\"\"\"\n    pass\n\n\ndef should_execute_step(arg_step, current_step):\n    \"\"\"This code checks if the current step should be executed based on the argument passed in and the current step. It returns true if the current step is greater than or equal to the argument step.\"\"\"\n    pass\n\n\ndef step_already_finished(args, step):\n    \"\"\"This code updates the arguments with the app data from a step and then prints a success message to the console.\"\"\"\n    pass\n\n\ndef generate_app_data(args):\n    \"\"\"This code defines a function called `generate_app_data` that takes an argument called `args`. The function returns a dictionary with two keys: `app_id` and `app_type`, both of which are values from the `args` dictionary.\"\"\"\n    pass\n\n\ndef array_of_objects_to_string(array):\n    \"\"\"This code takes an array of objects and returns a string representation of the array, with each object's key-value pairs separated by a newline.\"\"\"\n    pass\n\n\ndef hash_data(data):\n    \"\"\"This code takes an object as input, replaces any functions with the string \"function\", and then hashes the resulting data using SHA-256.\"\"\"\n    pass\n\n\ndef replace_functions(obj):\n    \"\"\"This code is a recursive function that takes an object as input and replaces any functions with the string \"function\". It does this by checking the type of the object, and if it's a dictionary or list, it recursively calls itself on each item in the collection. If the object is not a function, it returns the original object.\"\"\"\n    pass\n\n\ndef fix_json(s):\n    \"\"\"This code is a function that takes a string of JSON data as input and fixes any inconsistencies in the formatting, such as replacing \"True\" with \"true\" and \"False\" with \"false\". It also replaces backticks with double quotes. The function then returns the fixed JSON data.\"\"\"\n    pass\n\n\ndef fix_json_newlines(s):\n    \"\"\"This code fixes JSON strings by replacing all newline characters with the escape sequence \"\\\\n\".\"\"\"\n    pass\n\n\ndef clean_filename(filename):\n    \"\"\"This code takes a filename as input and removes any invalid characters, replacing whitespace with underscores.\"\"\"\n    pass\n\ndef json_serial(obj):\n    \"\"\"This code defines a function called `json_serial` that takes an object as input and returns a JSON-compatible string representation of it. The function is used to serialize objects that are not serializable by default in Python's JSON library, such as datetime objects and UUIDs.\"\"\"\n    pass\n","documentation":"The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt."}},{"key":"scip-python python temp indexer `pilot.utils.utils`/get_prompt().","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.utils`/get_prompt().","language":"python","range":[35,0,49,17],"content":"def get_prompt(prompt_name, data=None):\n    if data is None:\n        data = {}\n\n    get_prompt_components(data)\n\n    logger.info(f\"Getting prompt for {prompt_name}\")\n\n    # Load the template\n    template = env.get_template(prompt_name)\n\n    # Render the template with the provided data\n    output = template.render(data)\n\n    return output","file":"/pilot/utils/utils.py","fileHash":"ffe0ebca72a8999ffb0084622af3eb69767ceda2cc6d7e7e68e65ebb2b4408c3","hash":"f8b8293078048768a005b2e1697c46162b7f150f1c911a34c6db34b50a871b9b","processedContent":"def get_prompt(prompt_name, data=None):\n    if data is None:\n        data = {}\n\n    get_prompt_components(data) #This code defines a function called `get_prompt_components` that reads and renders all prompts inside the `/prompts/components` directory and returns them in a dictionary. It uses Jinja2 to render the templates with no variables, and stores the rendered content in a dictionary called `prompts_components`.\n\n    logger.info(f\"Getting prompt for {prompt_name}\")\n    \"\"\"\n    scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n    scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n    \"\"\"\n\n    # Load the template\n    template = env.get_template(prompt_name) #undefined\n\n    # Render the template with the provided data\n    output = template.render(data)\n\n    return output","documentation":"This code defines a function called `get_prompt` that retrieves and renders a prompt template based on the provided name. It uses Jinja2 to render the templates with no variables, and stores the rendered content in a dictionary called `prompts_components`."}},{"key":"scip-python python temp indexer `pilot.utils.utils`/get_sys_message().","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.utils`/get_sys_message().","language":"python","range":[86,0,96,5],"content":"def get_sys_message(role,args=None):\n    \"\"\"\n    :param role: 'product_owner', 'architect', 'dev_ops', 'tech_lead', 'full_stack_developer', 'code_monkey'\n    :return: { \"role\": \"system\", \"content\": \"You are a {role}... You do...\" }\n    \"\"\"\n    content = get_prompt(f'system_messages/{role}.prompt',args)\n\n    return {\n        \"role\": \"system\",\n        \"content\": content\n    }","file":"/pilot/utils/utils.py","fileHash":"ffe0ebca72a8999ffb0084622af3eb69767ceda2cc6d7e7e68e65ebb2b4408c3","hash":"40b97f00dfdc519ee325e05bba1343c5b80999a212e19fe0e76227f9ced9a90e","processedContent":"def get_sys_message(role,args=None):\n    \"\"\"\n    :param role: 'product_owner', 'architect', 'dev_ops', 'tech_lead', 'full_stack_developer', 'code_monkey'\n    :return: { \"role\": \"system\", \"content\": \"You are a {role}... You do...\" }\n    \"\"\"\n    content = get_prompt(f'system_messages/{role}.prompt',args) #This code defines a function called `get_prompt` that retrieves and renders a prompt template based on the provided name. It uses Jinja2 to render the templates with no variables, and stores the rendered content in a dictionary called `prompts_components`.\n\n    return {\n        \"role\": \"system\",\n        \"content\": content\n    }","documentation":"This code defines a function called `get_sys_message` that retrieves and renders a system message based on the provided role. The message is rendered using a prompt template stored in a dictionary called `prompts_components`."}},{"key":"scip-python python temp indexer `pilot.utils.utils`/capitalize_first_word_with_underscores().","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.utils`/capitalize_first_word_with_underscores().","language":"python","range":[22,0,32,29],"content":"def capitalize_first_word_with_underscores(s):\n    # Split the string into words based on underscores.\n    words = s.split('_')\n\n    # Capitalize the first word and leave the rest unchanged.\n    words[0] = words[0].capitalize()\n\n    # Join the words back into a string with underscores.\n    capitalized_string = '_'.join(words)\n\n    return capitalized_string","file":"/pilot/utils/utils.py","fileHash":"ffe0ebca72a8999ffb0084622af3eb69767ceda2cc6d7e7e68e65ebb2b4408c3","hash":"11b28ad7b78354a40dfc1c87b072fdcb4cbf52a2a32a6c9ea34c522fda95238a","processedContent":"def capitalize_first_word_with_underscores(s):\n    # Split the string into words based on underscores.\n    words = s.split('_')\n\n    # Capitalize the first word and leave the rest unchanged.\n    words[0] = words[0].capitalize()\n\n    # Join the words back into a string with underscores.\n    capitalized_string = '_'.join(words)\n\n    return capitalized_string","documentation":"This code takes a string with underscores and capitalizes the first word while keeping the rest of the words unchanged."}},{"key":"scip-python python temp indexer `pilot.prompts.prompts`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.prompts.prompts`/__init__:","language":"python","range":[0,0,179,0],"content":"# prompts/prompts.py\nfrom utils.style import color_white_bold\nfrom const import common\nfrom const.llm import MAX_QUESTIONS, END_RESPONSE\nfrom utils.llm_connection import create_gpt_chat_completion\nfrom utils.utils import get_sys_message, get_prompt\nfrom utils.questionary import styled_select, styled_text\nfrom logger.logger import logger\n\n\ndef ask_for_app_type():\n    return 'App'\n    answer = styled_select(\n        \"What type of app do you want to build?\",\n        choices=common.APP_TYPES\n    )\n\n    if answer is None:\n        print(\"Exiting application.\")\n        exit(0)\n\n    while 'unavailable' in answer:\n        print(\"Sorry, that option is not available.\")\n        answer = styled_select(\n            \"What type of app do you want to build?\",\n            choices=common.APP_TYPES\n        )\n        if answer is None:\n            print(\"Exiting application.\")\n            exit(0)\n\n    print(\"You chose: \" + answer)\n    logger.info(f\"You chose: {answer}\")\n    return answer\n\n\ndef ask_for_main_app_definition(project):\n    question = 'Describe your app in as much detail as possible.'\n    print(question, type='ipc')\n    description = styled_text(\n        project,\n        question\n    )\n\n    if description is None:\n        print(\"No input provided!\")\n        return\n\n    logger.info(f\"Initial App description done: {description}\")\n\n    return description\n\n\ndef ask_user(project, question: str, require_some_input=True, hint: str = None):\n    while True:\n        if hint is not None:\n            print(color_white_bold(hint) + '\\n', type='hint')\n        answer = styled_text(project, question, hint=hint)\n\n        logger.info('Q: %s', question)\n        logger.info('A: %s', answer)\n\n        if answer is None:\n            print(\"Exiting application.\")\n            exit(0)\n\n        if answer.strip() == '' and require_some_input:\n            print(\"No input provided! Please try again.\")\n            continue\n        else:\n            return answer\n\n\ndef get_additional_info_from_openai(project, messages):\n    \"\"\"\n    Runs the conversation between Product Owner and LLM.\n    Provides the user's initial description, LLM asks the user clarifying questions and user responds.\n    Limited by `MAX_QUESTIONS`, exits when LLM responds \"EVERYTHING_CLEAR\".\n\n    :param project: Project\n    :param messages: [\n        { \"role\": \"system\", \"content\": \"You are a Product Owner...\" },\n        { \"role\": \"user\", \"content\": \"I want you to create the app {name} that can be described: ```{description}```...\" }\n      ]\n    :return: The updated `messages` list with the entire conversation between user and LLM.\n    \"\"\"\n    is_complete = False\n    while not is_complete:\n        # Obtain clarifications using the OpenAI API\n        # { 'text': new_code }\n        response = create_gpt_chat_completion(messages, 'additional_info', project)\n\n        if response is not None:\n            if response['text'] and response['text'].strip() == END_RESPONSE:\n                # print(response['text'] + '\\n')\n                break\n\n            # Ask the question to the user\n            answer = ask_user(project, response['text'])\n\n            # Add the answer to the messages\n            messages.append({'role': 'assistant', 'content': response['text']})\n            messages.append({'role': 'user', 'content': answer})\n        else:\n            is_complete = True\n\n    logger.info('Getting additional info from openai done')\n\n    return [msg for msg in messages if msg['role'] != 'system']\n\n\n# TODO refactor this to comply with AgentConvo class\ndef generate_messages_from_description(description, app_type, name):\n    \"\"\"\n    Called by ProductOwner.get_description().\n    :param description: \"I want to build a cool app that will make me rich\"\n    :param app_type: 'Web App', 'Script', 'Mobile App', 'Chrome Extension' etc\n    :param name: Project name\n    :return: [\n        { \"role\": \"system\", \"content\": \"You are a Product Owner...\" },\n        { \"role\": \"user\", \"content\": \"I want you to create the app {name} that can be described: ```{description}```...\" }\n      ]\n    \"\"\"\n    # \"I want you to create the app {name} that can be described: ```{description}```\n    prompt = get_prompt('high_level_questions/specs.prompt', {\n        'name': name,\n        'prompt': description,\n        'app_type': app_type,\n    })\n\n    # Get additional answers\n    # Break down stories\n    # Break down user tasks\n    # Start with Get additional answers\n    # {prompts/components/no_microservices}\n    # {prompts/components/single_question}\n    specs_instructions = get_prompt('high_level_questions/specs_instruction.prompt', {\n            'name': name,\n            'app_type': app_type,\n            # TODO: MAX_QUESTIONS should be configurable by ENV or CLI arg\n            'MAX_QUESTIONS': MAX_QUESTIONS\n        })\n\n    return [\n        get_sys_message('product_owner'),\n        {'role': 'user', 'content': prompt},\n        {'role': 'system', 'content': specs_instructions},\n    ]\n\n\ndef generate_messages_from_custom_conversation(role, messages, start_role='user'):\n    \"\"\"\n    :param role: 'product_owner', 'architect', 'dev_ops', 'tech_lead', 'full_stack_developer', 'code_monkey'\n    :param messages: [\n        \"I will show you some of your message to which I want you to make some updates. Please just modify your last message per my instructions.\",\n        {LLM's previous message},\n        {user's request for change}\n    ]\n    :param start_role: 'user'\n    :return: [\n      { \"role\": \"system\", \"content\": \"You are a ..., You do ...\" },\n      { \"role\": start_role, \"content\": messages[i + even] },\n      { \"role\": \"assistant\" (or \"user\" for other start_role), \"content\": messages[i + odd] },\n      ... ]\n    \"\"\"\n    # messages is list of strings\n    system_message = get_sys_message(role)\n    result = [system_message]\n    logger.info(f'\\n>>>>>>>>>> {role} Prompt >>>>>>>>>>\\n%s\\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', system_message['content'])\n\n    for i, message in enumerate(messages):\n        if i % 2 == 0:\n            result.append({\"role\": start_role, \"content\": message})\n            logger.info(f'\\n>>>>>>>>>> {start_role} Prompt >>>>>>>>>>\\n%s\\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', message)\n        else:\n            result.append({\"role\": \"assistant\" if start_role == \"user\" else \"user\", \"content\": message})\n            logger.info('\\n>>>>>>>>>> Assistant Prompt >>>>>>>>>>\\n%s\\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', message)\n\n    return result\n","file":"/pilot/prompts/prompts.py","fileHash":"6b5eafecb74f005f8a70e0458cd97a106567f3631af5f5bc5d228298d9eccb01","hash":"6b5eafecb74f005f8a70e0458cd97a106567f3631af5f5bc5d228298d9eccb01","processedContent":"# prompts/prompts.py\nfrom utils.style import color_white_bold\n\"\"\"\nscip-python python temp indexer `pilot.utils.style`/__init__:: This code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.utils.style`/color_white_bold.: undefined\n\"\"\"\nfrom const import common\n\"\"\"\nscip-python python temp indexer const/__init__:: undefined\nscip-python python temp indexer `const.common`/__init__:: undefined\n\"\"\"\nfrom const.llm import MAX_QUESTIONS, END_RESPONSE\n\"\"\"\nscip-python python temp indexer `pilot.const.llm`/__init__:: This code defines constants for the maximum number of tokens allowed in a GPT model and the minimum number of tokens required for a response. It also sets the maximum number of questions that can be asked and the response when the conversation is complete.\nscip-python python temp indexer `pilot.const.llm`/MAX_QUESTIONS.: undefined\nscip-python python temp indexer `pilot.const.llm`/END_RESPONSE.: undefined\n\"\"\"\nfrom utils.llm_connection import create_gpt_chat_completion\n\"\"\"\nscip-python python temp indexer `pilot.utils.llm_connection`/__init__:: The code defines a Python script that uses the OpenAI GPT language model to generate responses to user prompts. It includes functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model.\nscip-python python temp indexer `pilot.utils.llm_connection`/create_gpt_chat_completion().: This code defines a function called `create_gpt_chat_completion` that takes in a list of messages, a request type, and a project. It then uses the OpenAI GPT language model to generate a response based on the input messages. The function also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n\"\"\"\nfrom utils.utils import get_sys_message, get_prompt\n\"\"\"\nscip-python python temp indexer `pilot.utils.utils`/__init__:: The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.utils.utils`/get_sys_message().: This code defines a function called `get_sys_message` that retrieves and renders a system message based on the provided role. The message is rendered using a prompt template stored in a dictionary called `prompts_components`.\nscip-python python temp indexer `pilot.utils.utils`/get_prompt().: This code defines a function called `get_prompt` that retrieves and renders a prompt template based on the provided name. It uses Jinja2 to render the templates with no variables, and stores the rendered content in a dictionary called `prompts_components`.\n\"\"\"\nfrom utils.questionary import styled_select, styled_text\n\"\"\"\nscip-python python temp indexer `pilot.utils.questionary`/__init__:: The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.utils.questionary`/styled_select().: This code defines a function called `styled_select` that retrieves the style configuration from a theme_style instance and returns it as a questionary.Style object.\nscip-python python temp indexer `pilot.utils.questionary`/styled_text().: This code defines a function called `styled_text` that retrieves user input from a database, styles the question, and saves the response to the database.\n\"\"\"\nfrom logger.logger import logger\n\"\"\"\nscip-python python temp indexer `pilot.logger.logger`/__init__:: This code sets up a custom logger for an application, which filters sensitive information from log records and removes ANSI escape sequences.\nscip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n\"\"\"\n\n\ndef ask_for_app_type():\n    \"\"\"This code is a function that asks the user to select a type of app they want to build. It uses a styled_select function to display a list of available app types and returns the selected type.\"\"\"\n    pass\n\n\ndef ask_for_main_app_definition(project):\n    \"\"\"This code defines a function called `ask_for_main_app_definition` that retrieves user input from a database, styles the question, and saves the response to the database.\"\"\"\n    pass\n\n\ndef ask_user(project, question: str, require_some_input=True, hint: str = None):\n    \"\"\"This code defines a function called `ask_user` that retrieves user input from a database, styles the question, and saves the response to the database. It also logs the question and answer to a logger.\"\"\"\n    pass\n\n\ndef get_additional_info_from_openai(project, messages):\n    \"\"\"The code defines a function called `get_additional_info_from_openai` that retrieves additional information from the OpenAI GPT language model. It takes in a project and a list of messages, and then uses the OpenAI API to generate responses based on the input messages. The function also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\"\"\"\n    pass\n\n\n# TODO refactor this to comply with AgentConvo class\ndef generate_messages_from_description(description, app_type, name):\n    \"\"\"This code defines a function called `generate_messages_from_description` that takes in a description, app type, and name as input. It returns a list of messages that are used to guide the user through the process of creating an app. The first message is from the system and informs the user that they are a Product Owner. The second message is also from the system and provides instructions on how to proceed with the app creation process. The third message is from the user and includes the provided description and app name.\"\"\"\n    pass\n\n\ndef generate_messages_from_custom_conversation(role, messages, start_role='user'):\n    \"\"\"This code defines a function called `generate_messages_from_custom_conversation` that takes in a role, messages, and start_role as input. It then generates a list of messages based on the provided role, messages, and start_role. The function uses a prompt template to render the system message and returns the list of messages.\"\"\"\n    pass\n","documentation":"The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt."}},{"key":"scip-python python temp indexer `pilot.prompts.prompts`/ask_user().","attributes":{"symbol":"scip-python python temp indexer `pilot.prompts.prompts`/ask_user().","language":"python","range":[53,0,70,25],"content":"def ask_user(project, question: str, require_some_input=True, hint: str = None):\n    while True:\n        if hint is not None:\n            print(color_white_bold(hint) + '\\n', type='hint')\n        answer = styled_text(project, question, hint=hint)\n\n        logger.info('Q: %s', question)\n        logger.info('A: %s', answer)\n\n        if answer is None:\n            print(\"Exiting application.\")\n            exit(0)\n\n        if answer.strip() == '' and require_some_input:\n            print(\"No input provided! Please try again.\")\n            continue\n        else:\n            return answer","file":"/pilot/prompts/prompts.py","fileHash":"6b5eafecb74f005f8a70e0458cd97a106567f3631af5f5bc5d228298d9eccb01","hash":"af28f2d53158e307a1a535e91c274b0328c2fcadfb0e5dcd5ac28a0d91a9f330","processedContent":"def ask_user(project, question: str, require_some_input=True, hint: str = None):\n    while True:\n        if hint is not None:\n            print(color_white_bold(hint) + '\\n', type='hint') #undefined\n        answer = styled_text(project, question, hint=hint) #This code defines a function called `styled_text` that retrieves user input from a database, styles the question, and saves the response to the database.\n\n        logger.info('Q: %s', question)\n        \"\"\"\n        scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n        scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n        \"\"\"\n        logger.info('A: %s', answer)\n        \"\"\"\n        scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n        scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n        \"\"\"\n\n        if answer is None:\n            print(\"Exiting application.\")\n            exit(0)\n\n        if answer.strip() == '' and require_some_input:\n            print(\"No input provided! Please try again.\")\n            continue\n        else:\n            return answer","documentation":"This code defines a function called `ask_user` that retrieves user input from a database, styles the question, and saves the response to the database. It also logs the question and answer to a logger."}},{"key":"scip-python python temp indexer `pilot.const.llm`/END_RESPONSE.","attributes":{"symbol":"scip-python python temp indexer `pilot.const.llm`/END_RESPONSE.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","language":"python","range":[0,0,525,0],"content":"import psutil\nimport subprocess\nimport os\nimport signal\nimport threading\nimport queue\nimport time\nimport platform\nfrom typing import Dict, Union\n\nfrom logger.logger import logger\nfrom utils.style import color_yellow, color_green, color_red, color_yellow_bold\nfrom database.database import get_saved_command_run, save_command_run\nfrom helpers.exceptions.TooDeepRecursionError import TooDeepRecursionError\nfrom helpers.exceptions.TokenLimitError import TokenLimitError\nfrom helpers.exceptions.CommandFinishedEarly import CommandFinishedEarly\nfrom prompts.prompts import ask_user\nfrom const.code_execution import MIN_COMMAND_RUN_TIME, MAX_COMMAND_RUN_TIME, MAX_COMMAND_OUTPUT_LENGTH\nfrom const.messages import AFFIRMATIVE_ANSWERS, NEGATIVE_ANSWERS\n\ninterrupted = False\n\nrunning_processes: Dict[str, tuple[str, int]] = {}\n\"\"\"Holds a list of (command, process ID)s, mapped to the `command_id` provided in the call to `execute_command()`.\"\"\"\n\n\ndef enqueue_output(out, q):\n    for line in iter(out.readline, ''):\n        if interrupted:  # Check if the flag is set\n            break\n        q.put(line)\n    out.close()\n\n\ndef run_command(command, root_path, q_stdout, q_stderr) -> subprocess.Popen:\n    \"\"\"\n    Execute a command in a subprocess.\n\n    Args:\n        command (str): The command to run.\n        root_path (str): The directory in which to run the command.\n        q_stdout (Queue): A queue to capture stdout.\n        q_stderr (Queue): A queue to capture stderr.\n\n    Returns:\n        subprocess.Popen: The subprocess object.\n    \"\"\"\n    logger.info(f'Running `{command}` on {platform.system()}')\n    if platform.system() == 'Windows':  # Check the operating system\n        process = subprocess.Popen(\n            command,\n            shell=True,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            text=True,\n            cwd=root_path\n        )\n    else:\n        process = subprocess.Popen(\n            command,\n            shell=True,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            text=True,\n            preexec_fn=os.setsid,  # Use os.setsid only for Unix-like systems\n            cwd=root_path\n        )\n\n    t_stdout = threading.Thread(target=enqueue_output, args=(process.stdout, q_stdout))\n    t_stderr = threading.Thread(target=enqueue_output, args=(process.stderr, q_stderr))\n    t_stdout.daemon = True\n    t_stderr.daemon = True\n    t_stdout.start()\n    t_stderr.start()\n    return process\n\n\ndef terminate_named_process(command_id: str) -> None:\n    if command_id in running_processes:\n        terminate_process(running_processes[command_id][1], command_id)\n\n\ndef terminate_running_processes():\n    for command_id in list(running_processes.keys()):\n        terminate_process(running_processes[command_id][1], command_id)\n\n\ndef term_proc_windows(pid: int):\n    try:\n        subprocess.run([\"taskkill\", \"/F\", \"/T\", \"/PID\", str(pid)])\n    except subprocess.CalledProcessError as e:\n        logger.error(f'Error while terminating process: {e}')\n\n\ndef term_proc_unix_like(pid: int):\n    try:\n        os.killpg(pid, signal.SIGKILL)\n    except OSError as e:\n        logger.error(f'Error while terminating process: {e}')\n\n\ndef is_process_running(pid: int) -> bool:\n    \"\"\"Check if there is a running process with the given PID.\"\"\"\n    try:\n        # psutil.NoSuchProcess will be raised if the process doesn't exist\n        process = psutil.Process(pid)\n        return process.is_running()\n    except psutil.NoSuchProcess:\n        return False\n\n\ndef terminate_process(pid: int, name=None) -> None:\n    # todo refactor terminate_process() using psutil for all OS. Check/terminate child processes and test on all OS\n    if name is None:\n        name = ''\n\n    if not is_process_running(pid):\n        logger.info('Process \"%s\" (pid: %s) is not running. Skipping termination.', name, pid)\n        # Also remove from running_processes if not running\n        for command_id, process_info in list(running_processes.items()):\n            if process_info[1] == pid:\n                del running_processes[command_id]\n        return\n\n    logger.info('Terminating process \"%s\" (pid: %s)', name, pid)\n    if platform.system() == \"Windows\":\n        term_proc_windows(pid)\n    else:  # Unix-like systems\n        term_proc_unix_like(pid)\n\n    try:\n        # Wait for the process to terminate\n        process = psutil.Process(pid)\n        process.wait(timeout=10)  # Adjust the timeout as necessary\n    except psutil.NoSuchProcess:\n        logger.info(\"Process already terminated.\")\n    except psutil.TimeoutExpired:\n        logger.warning(\"Timeout expired while waiting for process to terminate.\")\n    except Exception as e:\n        logger.error(f\"Error waiting for process termination: {e}\")\n\n    for command_id in list(running_processes.keys()):\n        if running_processes[command_id][1] == pid:\n            del running_processes[command_id]\n\n\ndef read_queue_line(q, stdout=True):\n    try:\n        line = q.get_nowait()\n    except queue.Empty:\n        return ''\n\n    if stdout:\n        print(color_green('CLI OUTPUT:') + line, end='')\n        logger.info('CLI OUTPUT: ' + line)\n        # if success_message is not None and success_message in line:\n        #     logger.info('Success message found: %s', success_message)\n        #     # break # TODO background_command - this is if we want to leave command running in background but sometimes processes keep hanging and terminal gets bugged, also if we do that we have to change user messages to make it clear that there is command running in background\n        #     raise CommandFinishedEarly()\n\n    if not stdout:  # stderr\n        print(color_red('CLI ERROR:') + line, end='')\n        logger.error('CLI ERROR: ' + line)\n\n    return line\n\n\ndef read_remaining_queue(q, stdout=True):\n    output = ''\n    while not q.empty():\n        output += read_queue_line(q, stdout)\n\n    return output\n\n\ndef execute_command(project, command, timeout=None, success_message=None, command_id: str = None, force=False) \\\n        -> (str, str, int):\n    \"\"\"\n    Execute a command and capture its output.\n\n    Args:\n        project: The project associated with the command.\n        command (str): The command to run.\n        timeout (int, optional): The maximum execution time in milliseconds. Default is None.\n        success_message: A message to look for in the output of the command to determine if successful or not.\n        command_id (str, optional): A unique identifier assigned by the LLM, can be used to terminate the process.\n        force (bool, optional): Whether to execute the command without confirmation. Default is False.\n    Returns:\n        cli_response (str): The command output\n                            or: `None` if user did not authorise the command to run\n        done_or_error_response (str): 'DONE' if 'no', 'skip' or `success_message` matched.\n                            Otherwise, if `cli_response` is None, user's response to \"Can I executed\".\n                            If `cli_response` not None: 'was interrupted by user', 'timed out' or `None` - caller should send `cli_response` to LLM\n        exit_code (int): The exit code of the process.\n    \"\"\"\n    if timeout is not None:\n        if timeout < 0:\n            timeout = None\n        else:\n            if timeout < 1000:\n                timeout *= 1000\n\n            timeout = min(max(timeout, MIN_COMMAND_RUN_TIME), MAX_COMMAND_RUN_TIME)\n\n    if not force:\n        print(color_yellow_bold('\\n--------- EXECUTE COMMAND ----------'))\n        question = f'Can I execute the command: `{color_yellow_bold(command)}`'\n        if timeout is not None:\n            question += f' with {timeout}ms timeout?'\n        else:\n            question += '?'\n\n        print('yes/no', type='button')\n        logger.info('--------- EXECUTE COMMAND ---------- : %s', question)\n        answer = ask_user(project, 'If yes, just press ENTER. Otherwise, type \"no\" but it will be processed as '\n                                   'successfully executed.', False, hint=question)\n        # TODO can we use .confirm(question, default='yes').ask()  https://questionary.readthedocs.io/en/stable/pages/types.html#confirmation\n        print('answer: ' + answer)\n        if answer.lower() in NEGATIVE_ANSWERS:\n            return None, 'SKIP', None\n        elif answer.lower() not in AFFIRMATIVE_ANSWERS:\n            # \"That's not going to work, let's do X instead\"\n            #       https://github.com/Pythagora-io/gpt-pilot/issues/198\n            #       https://github.com/Pythagora-io/gpt-pilot/issues/43#issuecomment-1756352056\n            # TODO: https://github.com/Pythagora-io/gpt-pilot/issues/122\n            return None, answer, None\n\n    # TODO when a shell built-in commands (like cd or source) is executed, the output is not captured properly - this will need to be changed at some point\n    if platform.system() != 'Windows' and (\"cd \" in command or \"source \" in command):\n        command = \"bash -c '\" + command + \"'\"\n\n    project.command_runs_count += 1\n    command_run = get_saved_command_run(project, command)\n    if command_run is not None and project.skip_steps:\n        project.checkpoints['last_command_run'] = command_run\n        print(color_yellow(f'Restoring command run response id {command_run.id}:\\n```\\n{command_run.cli_response}```'))\n        return command_run.cli_response, command_run.done_or_error_response, command_run.exit_code\n\n    return_value = None\n    done_or_error_response = None\n\n    q_stderr = queue.Queue()\n    q = queue.Queue()\n    process = run_command(command, project.root_path, q, q_stderr)\n\n    if command_id is not None:\n        terminate_named_process(command_id)\n        # TODO: We want to be able to send the initial stdout/err to the LLM, but it would also be handy to log ongoing output to a log file, named after `command_id`. Terminating an existing process with the same ID should reset the log file\n        running_processes[command_id] = (command, process.pid)\n\n    output = ''\n    stderr_output = ''\n    start_time = time.time()\n\n    # Note: If we don't need to log the output in real-time, we can remove q, q_stderr, the threads and this while loop.\n    # if timeout is not None:\n    #     timeout /= 1000\n    # output, stderr_output = process.communicate(timeout=timeout)\n\n    try:\n        while True:\n            elapsed_time = time.time() - start_time\n            time.sleep(0.1)  # TODO this shouldn't be used\n            # if timeout is not None:\n            #     # TODO: print to IPC using a different message type so VS Code can ignore it or update the previous value\n            #     print(color_white_bold(f'\\rt: {round(elapsed_time * 1000)}ms : '), end='', flush=True)\n\n            # If timeout is reached, kill the process\n            if timeout is not None and elapsed_time * 1000 > timeout:\n                if command_id is not None:\n                    logger.info(f'Process \"{command_id}\" running after timeout as pid: {process.pid}')\n                    break\n\n                raise TimeoutError(\"Command exceeded the specified timeout.\")\n\n            output += read_queue_line(q)\n            stderr_output += read_queue_line(q_stderr, False)\n\n            # Check if process has finished\n            if process.poll() is not None:\n                logger.info('process exited with return code: %d', process.returncode)\n                if command_id is not None:\n                    del running_processes[command_id]\n\n                output += read_remaining_queue(q)\n                stderr_output += read_remaining_queue(q_stderr, False)\n                break\n\n    except (KeyboardInterrupt, TimeoutError, CommandFinishedEarly) as e:\n        if isinstance(e, KeyboardInterrupt):\n            print('\\nCTRL+C detected. Stopping command execution...')\n            logger.info('CTRL+C detected. Stopping command execution...')\n            done_or_error_response = 'was interrupted by user'\n        elif isinstance(e, TimeoutError):\n            print('\\nTimeout detected. Stopping command execution...')\n            logger.warning('Timeout detected. Stopping command execution...')\n            done_or_error_response = f'took longer than {timeout}ms so I killed it'\n        elif isinstance(e, CommandFinishedEarly):\n            print('\\nCommand finished before timeout. Handling early completion...')\n            logger.info('Command finished before timeout. Handling early completion...')\n            done_or_error_response = 'DONE'\n\n    finally:\n        done_or_error_response = 'DONE'  # Todo remove if we want to have different responses\n        terminate_process(process.pid)  # TODO: background_command - remove this is if we want to leave command running in background, look todo above\n        # update the return code\n        process.poll()\n\n    elapsed_time = time.time() - start_time\n    logger.info(f'`{command}` took {round(elapsed_time * 1000)}ms to execute.')\n\n    if return_value is None:\n        return_value = ''\n        if stderr_output != '':\n            return_value = 'stderr:\\n```\\n' + stderr_output[0:MAX_COMMAND_OUTPUT_LENGTH] + '\\n```\\n'\n        return_value += 'stdout:\\n```\\n' + output[-MAX_COMMAND_OUTPUT_LENGTH:] + '\\n```'\n\n    save_command_run(project, command, return_value, done_or_error_response, process.returncode)\n\n    return return_value, done_or_error_response, process.returncode\n\n\ndef check_if_command_successful(convo, command, cli_response, response, exit_code, additional_message=None):\n    if cli_response is not None:\n        logger.info(f'`{command}` ended with exit code: {exit_code}')\n        if exit_code is None:\n            # todo this should never happen! process is still running, see why and now we want to handle it\n            print(color_red(f'Process for command {command} still running.'))\n            response = 'DONE'\n        else:\n            response = convo.send_message('dev_ops/ran_command.prompt',\n                                          {\n                                              'cli_response': cli_response,\n                                              'error_response': response,\n                                              'command': command,\n                                              'additional_message': additional_message,\n                                              'exit_code': exit_code,\n                                          })\n            logger.debug(f'LLM response to ran_command.prompt: {response}')\n\n    return response\n\n\ndef build_directory_tree(path, prefix='', is_root=True, ignore=None):\n    \"\"\"Build the directory tree structure in a simplified format.\n\n    Args:\n    - path: The starting directory path.\n    - prefix: Prefix for the current item, used for recursion.\n    - is_root: Flag to indicate if the current item is the root directory.\n    - ignore: a list of directories to ignore\n\n    Returns:\n    - A string representation of the directory tree.\n    \"\"\"\n    output = \"\"\n    indent = '  '\n\n    if os.path.isdir(path):\n        dir_name = os.path.basename(path)\n        if is_root:\n            output += '/'\n        else:\n            output += f'{prefix}/{dir_name}'\n\n        # List items in the directory\n        items = os.listdir(path)\n        dirs = [item for item in items if os.path.isdir(os.path.join(path, item)) and item not in ignore]\n        files = [item for item in items if os.path.isfile(os.path.join(path, item))]\n        dirs.sort()\n        files.sort()\n\n        if dirs:\n            output += '\\n'\n            for index, dir_item in enumerate(dirs):\n                item_path = os.path.join(path, dir_item)\n                output += build_directory_tree(item_path, prefix + indent, is_root=False, ignore=ignore)\n\n            if files:\n                output += f\"{prefix}  {', '.join(files)}\\n\"\n\n        elif files:\n            output += f\": {', '.join(files)}\\n\"\n        else:\n            output += '\\n'\n\n    return output\n\n\ndef res_for_build_directory_tree(path, files=None):\n    return ' - ' + files[os.path.basename(path)].description + ' ' if files and os.path.basename(path) in files else ''\n\n\ndef build_directory_tree_with_descriptions(path, prefix=\"\", ignore=None, is_last=False, files=None):\n    \"\"\"Build the directory tree structure in tree-like format.\n   Args:\n   - path: The starting directory path.\n   - prefix: Prefix for the current item, used for recursion.\n   - ignore: List of directory names to ignore.\n   - is_last: Flag to indicate if the current item is the last in its parent directory.\n   Returns:\n   - A string representation of the directory tree.\n   \"\"\"\n    ignore |= []\n    if os.path.basename(path) in ignore:\n        return \"\"\n    output = \"\"\n    indent = '|   ' if not is_last else '    '\n    # It's a directory, add its name to the output and then recurse into it\n    output += prefix + \"|-- \" + os.path.basename(path) + res_for_build_directory_tree(path, files) + \"/\\n\"\n    if os.path.isdir(path):\n        # List items in the directory\n        items = os.listdir(path)\n        for index, item in enumerate(items):\n            item_path = os.path.join(path, item)\n            output += build_directory_tree(item_path, prefix + indent, ignore, index == len(items) - 1, files)\n    return output\n\n\ndef execute_command_and_check_cli_response(convo, command: dict):\n    \"\"\"\n    Execute a command and check its CLI response.\n\n    Args:\n        convo (AgentConvo): The conversation object.\n        command (dict):\n          ['command'] (str): The command to run.\n          ['timeout'] (int): The maximum execution time in milliseconds.\n\n\n    Returns:\n        tuple: A tuple containing the CLI response and the agent's response.\n            - cli_response (str): The command output.\n            - response (str): 'DONE' or 'NEEDS_DEBUGGING'.\n                If `cli_response` is None, user's response to \"Can I execute...\".\n    \"\"\"\n    # TODO: Prompt mentions `command` could be `INSTALLED` or `NOT_INSTALLED`, where is this handled?\n    command_id = command['command_id'] if 'command_id' in command else None\n    cli_response, response, exit_code = execute_command(convo.agent.project,\n                                                        command['command'],\n                                                        timeout=command['timeout'],\n                                                        command_id=command_id)\n\n    response = check_if_command_successful(convo, command['command'], cli_response, response, exit_code)\n    return cli_response, response\n\n\ndef run_command_until_success(convo, command,\n                              timeout: Union[int, None],\n                              command_id: Union[str, None] = None,\n                              success_message=None,\n                              additional_message=None,\n                              force=False,\n                              return_cli_response=False,\n                              success_with_cli_response=False,\n                              is_root_task=False):\n    \"\"\"\n    Run a command until it succeeds or reaches a timeout.\n\n    Args:\n        convo (AgentConvo): The conversation object.\n        command (str): The command to run.\n        timeout (int): The maximum execution time in milliseconds.\n        command_id: A name for the process.\n                      If `timeout` is not provided, can be used to terminate the process.\n        success_message: A message to look for in the output of the command to determine if successful or not.\n        additional_message (str, optional): Additional message to include in the \"I ran the command...\" prompt.\n        force (bool, optional): Whether to execute the command without confirmation. Default is False.\n        return_cli_response (bool, optional): If True, may raise TooDeepRecursionError(cli_response)\n        success_with_cli_response (bool, optional): If True, simply send the cli_response back to the caller without checking with LLM.\n                                                    The LLM has asked to see the output and may update the task step list.\n        is_root_task (bool, optional): If True and TokenLimitError is raised, will call `convo.load_branch(reset_branch_id)`\n\n    Returns:\n        - 'success': bool,\n        - 'cli_response': ```stdout: <stdout> stderr: <stderr>```\n        - 'user_input': `None` or user's objection to running the command\n    \"\"\"\n    cli_response, response, exit_code = execute_command(convo.agent.project,\n                                                        command,\n                                                        timeout=timeout,\n                                                        success_message=success_message,\n                                                        command_id=command_id,\n                                                        force=force)\n\n    if success_with_cli_response and cli_response is not None:\n        return {'success': True, 'cli_response': cli_response}\n\n    if response == 'SKIP':\n        return {'success': True, 'user_input': response}\n\n    if cli_response is None and response != 'DONE':\n        return {'success': False, 'user_input': response}\n\n    response = check_if_command_successful(convo, command, cli_response, response, exit_code, additional_message)\n\n    if response != 'DONE':\n        # 'NEEDS_DEBUGGING'\n        print(color_red('Got incorrect CLI response:'))\n        print(cli_response)\n        print(color_red('-------------------'))\n\n        reset_branch_id = convo.save_branch()\n        while True:\n            try:\n                # This catch is necessary to return the correct value (cli_response) to continue development function so\n                # the developer can debug the appropriate issue\n                # this snippet represents the first entry point into debugging recursion because of return_cli_response\n                success = convo.agent.debugger.debug(convo, {\n                    'command': command,\n                    'timeout': timeout,\n                    'command_id': command_id,\n                    'success_message': success_message,\n                },user_input=cli_response, is_root_task=is_root_task, ask_before_debug=True)\n                return {'success': success, 'cli_response': cli_response}\n            except TooDeepRecursionError as e:\n                # this is only to put appropriate message in the response after TooDeepRecursionError is raised\n                raise TooDeepRecursionError(cli_response) if return_cli_response else e\n            except TokenLimitError as e:\n                if is_root_task:\n                    convo.load_branch(reset_branch_id)\n                else:\n                    raise e\n    else:\n        return {'success': True, 'cli_response': cli_response}\n","file":"/pilot/helpers/cli.py","fileHash":"422ef82ede524a5790d370e04f026d86157a903e23d309302192e6a88f244b05","hash":"422ef82ede524a5790d370e04f026d86157a903e23d309302192e6a88f244b05","processedContent":"import psutil #undefined\nimport subprocess #undefined\nimport os #undefined\nimport signal #undefined\nimport threading #undefined\nimport queue #undefined\nimport time #undefined\nimport platform #undefined\nfrom typing import Dict, Union\n\"\"\"\nscip-python python python-stdlib 3.11 typing/__init__:: undefined\nscip-python python python-stdlib 3.11 typing/Dict.: undefined\nscip-python python python-stdlib 3.11 typing/Union.: undefined\n\"\"\"\n\nfrom logger.logger import logger\n\"\"\"\nscip-python python temp indexer `pilot.logger.logger`/__init__:: This code sets up a custom logger for an application, which filters sensitive information from log records and removes ANSI escape sequences.\nscip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n\"\"\"\nfrom utils.style import color_yellow, color_green, color_red, color_yellow_bold\n\"\"\"\nscip-python python temp indexer `pilot.utils.style`/__init__:: This code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.utils.style`/color_yellow.: undefined\nscip-python python temp indexer `pilot.utils.style`/color_green.: undefined\nscip-python python temp indexer `pilot.utils.style`/color_red.: undefined\nscip-python python temp indexer `pilot.utils.style`/color_yellow_bold.: undefined\n\"\"\"\nfrom database.database import get_saved_command_run, save_command_run\n\"\"\"\nscip-python python temp indexer `pilot.database.database`/__init__:: The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.database.database`/get_saved_command_run().: This code retrieves a database row from a model based on three parameters: app_id, previous_step, and high_level_step.\nscip-python python temp indexer `pilot.database.database`/save_command_run().: This code defines a function called `save_command_run` that saves data to a database. It first checks if a record with the same data already exists, and if so, logs a warning message. If no record exists, it creates a new one and returns it.\n\"\"\"\nfrom helpers.exceptions.TooDeepRecursionError import TooDeepRecursionError\n\"\"\"\nscip-python python temp indexer `pilot.helpers.exceptions.toodeeprecursionerror`/__init__:: This code defines a custom exception class called \"TooDeepRecursionError\" that is raised when the recursion depth exceeds a certain limit, indicating a potential infinite loop in the code.\nscip-python python temp indexer `pilot.helpers.exceptions.toodeeprecursionerror`/TooDeepRecursionError#: This code defines a custom exception class called \"TooDeepRecursionError\" that is raised when the recursion depth exceeds a certain limit.\n\"\"\"\nfrom helpers.exceptions.TokenLimitError import TokenLimitError\n\"\"\"\nscip-python python temp indexer `pilot.helpers.exceptions.tokenlimiterror`/__init__:: This code defines constants for the maximum number of tokens allowed in a GPT model and the minimum number of tokens required for a response. It also sets the maximum number of questions that can be asked and the response when the conversation is complete.\nscip-python python temp indexer `pilot.helpers.exceptions.tokenlimiterror`/TokenLimitError#: This code defines a custom exception class called `TokenLimitError` that is raised when the number of tokens in a message exceeds the maximum allowed by the GPT model. The class takes two arguments: `tokens_in_messages` and `max_tokens`, which represent the number of tokens in the message and the maximum number of tokens allowed, respectively. The `__init__` method sets the instance variables and calls the parent class's constructor with a formatted error message.\n\"\"\"\nfrom helpers.exceptions.CommandFinishedEarly import CommandFinishedEarly\n\"\"\"\nscip-python python temp indexer `pilot.helpers.exceptions.commandfinishedearly`/__init__:: This code defines a custom exception class called `CommandFinishedEarly` that is raised when a command finishes before a specified timeout. The message passed to the constructor is used as the exception's error message.\nscip-python python temp indexer `pilot.helpers.exceptions.commandfinishedearly`/CommandFinishedEarly#: This code defines a custom exception class called `CommandFinishedEarly` that is raised when a command finishes before a specified timeout. The message passed to the constructor is used as the exception's error message.\n\"\"\"\nfrom prompts.prompts import ask_user\n\"\"\"\nscip-python python temp indexer `pilot.prompts.prompts`/__init__:: The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.prompts.prompts`/ask_user().: This code defines a function called `ask_user` that retrieves user input from a database, styles the question, and saves the response to the database. It also logs the question and answer to a logger.\n\"\"\"\nfrom const.code_execution import MIN_COMMAND_RUN_TIME, MAX_COMMAND_RUN_TIME, MAX_COMMAND_OUTPUT_LENGTH\n\"\"\"\nscip-python python temp indexer `pilot.const.code_execution`/__init__:: This code defines some constants that control the behavior of a command-line interface. The MAX_COMMAND_DEBUG_TRIES constant determines how many times the CLI will attempt to debug a command before giving up. The MAX_RECUSION_LAYER constant sets the maximum number of layers of recursion that the CLI will allow. The MIN_COMMAND_RUN_TIME and MAX_COMMAND_RUN_TIME constants set the minimum and maximum amount of time, in milliseconds, that a command can take to run. Finally, the MAX_COMMAND_OUTPUT_LENGTH constant sets the maximum length, in characters, of the output that the CLI will display for a command.\nscip-python python temp indexer `pilot.const.code_execution`/MIN_COMMAND_RUN_TIME.: undefined\nscip-python python temp indexer `pilot.const.code_execution`/MAX_COMMAND_RUN_TIME.: undefined\nscip-python python temp indexer `pilot.const.code_execution`/MAX_COMMAND_OUTPUT_LENGTH.: undefined\n\"\"\"\nfrom const.messages import AFFIRMATIVE_ANSWERS, NEGATIVE_ANSWERS\n\"\"\"\nscip-python python temp indexer `pilot.const.messages`/__init__:: This code defines a set of constants that are used to control the flow of a program. The first constant, `CHECK_AND_CONTINUE`, is a message that is displayed when something goes wrong and the user needs to be prompted to continue. The second constant, `WHEN_USER_DONE`, is a message that is displayed when the user is finished with a task and needs to be prompted to continue. The third and fourth constants, `AFFIRMATIVE_ANSWERS` and `NEGATIVE_ANSWERS`, define sets of strings that are used to determine whether a user's response indicates affirmative or negative sentiment.\nscip-python python temp indexer `pilot.const.messages`/AFFIRMATIVE_ANSWERS.: undefined\nscip-python python temp indexer `pilot.const.messages`/NEGATIVE_ANSWERS.: undefined\n\"\"\"\n\ninterrupted = False\n\nrunning_processes: Dict[str, tuple[str, int]] = {} #undefined\n\"\"\"Holds a list of (command, process ID)s, mapped to the `command_id` provided in the call to `execute_command()`.\"\"\"\n\n\ndef enqueue_output(out, q):\n    \"\"\"This code reads lines from a file and adds them to a queue, stopping if an interrupt flag is set.\"\"\"\n    pass\n\n\ndef run_command(command, root_path, q_stdout, q_stderr) -> subprocess.Popen:\n    \"\"\"This code defines a function called `run_command` that takes in a command, root path, and two queues as arguments. It then executes the command in a subprocess and captures its output in the queues. The function also starts two threads to read the stdout and stderr of the subprocess and add them to the queues.\"\"\"\n    pass\n\n\ndef terminate_named_process(command_id: str) -> None:\n    \"\"\"This code checks if a process with the specified command ID is running, and if so, it terminates that process.\"\"\"\n    pass\n\n\ndef terminate_running_processes():\n    \"\"\"This code terminates running processes by iterating over a list of running processes and calling the `terminate_process` function for each process.\"\"\"\n    pass\n\n\ndef term_proc_windows(pid: int):\n    \"\"\"This code is a function that takes a process ID as an argument and uses the `subprocess` module to terminate the process. It does this by running the `taskkill` command with the `/F` flag to forcefully terminate the process, and the `/T` flag to terminate all child processes. If there is an error while terminating the process, it logs the error using the `logger` object.\"\"\"\n    pass\n\n\ndef term_proc_unix_like(pid: int):\n    \"\"\"This code is a function that terminates a process on a Unix-like operating system by sending a SIGKILL signal to the process group. It uses the `os` and `signal` modules to accomplish this task.\"\"\"\n    pass\n\n\ndef is_process_running(pid: int) -> bool:\n    \"\"\"This code checks if a process with the given PID is running by using the psutil library. If the process exists, it returns True if it's running, and False otherwise.\"\"\"\n    pass\n\n\ndef terminate_process(pid: int, name=None) -> None:\n    \"\"\"This code is a function that terminates a process on a Unix-like operating system by sending a SIGKILL signal to the process group. It uses the `os` and `signal` modules to accomplish this task.\"\"\"\n    pass\n\n\ndef read_queue_line(q, stdout=True):\n    \"\"\"The code defines a function called `read_queue_line` that reads a line from a queue and prints it to the console. It also logs the line to a logger.\"\"\"\n    pass\n\n\ndef read_remaining_queue(q, stdout=True):\n    \"\"\"This code defines a function called `read_remaining_queue` that reads all the remaining lines in a queue and returns them as a string. It also logs each line to a logger.\"\"\"\n    pass\n\n\ndef execute_command(project, command, timeout=None, success_message=None, command_id: str = None, force=False) \\\n        \"\"\"This code defines a function called `execute_command` that takes in a command, project, and other parameters. It then executes the command in a subprocess and captures its output in two queues. The function also checks if a process with the same ID is running, and if so, it terminates that process.\"\"\"\n        pass\n\n\ndef check_if_command_successful(convo, command, cli_response, response, exit_code, additional_message=None):\n    \"\"\"This code checks if a command was successful by checking the exit code of the process that ran the command. If the exit code is not None, it means the command was not successful and the function sends an error message to the user.\"\"\"\n    pass\n\n\ndef build_directory_tree(path, prefix='', is_root=True, ignore=None):\n    \"\"\"This code defines a function called `build_directory_tree` that takes in a directory path and returns a string representation of the directory tree structure. The function uses the `os` module to list the items in the directory, sort them, and then recursively call itself for each subdirectory, building the tree structure.\"\"\"\n    pass\n\n\ndef res_for_build_directory_tree(path, files=None):\n    \"\"\"This code defines a function that takes a path and an optional dictionary of files as input. It returns a string representation of the file description for the given path, if it exists in the dictionary.\"\"\"\n    pass\n\n\ndef build_directory_tree_with_descriptions(path, prefix=\"\", ignore=None, is_last=False, files=None):\n    \"\"\"This code defines a function called `build_directory_tree` that takes in a directory path and returns a string representation of the directory tree structure. The function uses the `os` module to list the items in the directory, sort them, and then recursively call itself for each subdirectory, building the tree structure.\"\"\"\n    pass\n\n\ndef execute_command_and_check_cli_response(convo, command: dict):\n    \"\"\"This code defines a function called `execute_command_and_check_cli_response` that takes in a command, project, and other parameters. It executes the command in a subprocess and captures its output in two queues. The function also checks if a process with the same ID is running, and if so, it terminates that process.\"\"\"\n    pass\n\n\ndef run_command_until_success(convo, command,\n                              \"\"\"This code defines a function called `run_command_until_success` that runs a command until it succeeds or reaches a timeout. It also checks if the command was successful by checking the exit code of the process that ran the command.\"\"\"\n                              pass\n","documentation":"The code defines a command-line interface (CLI) that allows users to execute commands and interact with a language model. It includes functions for running commands, checking their output, and handling errors."}},{"key":"scip-python python temp indexer `pilot.helpers.cli`/running_processes.running_processes.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.cli`/running_processes.running_processes.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#agent.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#agent.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#messages.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#messages.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#high_level_step.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#high_level_step.","language":"python"}},{"key":"scip-python python python-stdlib 3.11 logging/Logger#error().","attributes":{"symbol":"scip-python python python-stdlib 3.11 logging/Logger#error().","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#log_to_user.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#log_to_user.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#branches.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#branches.","language":"python"}},{"key":"scip-python python python-stdlib 3.11 re/escape().","attributes":{"symbol":"scip-python python python-stdlib 3.11 re/escape().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 re/subn().","attributes":{"symbol":"scip-python python python-stdlib 3.11 re/subn().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 re/DOTALL.","attributes":{"symbol":"scip-python python python-stdlib 3.11 re/DOTALL.","language":"python"}},{"key":"scip-python python python-stdlib 3.11 io/TextIOBase#read().","attributes":{"symbol":"scip-python python python-stdlib 3.11 io/TextIOBase#read().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 subprocess/Popen#","attributes":{"symbol":"scip-python python python-stdlib 3.11 subprocess/Popen#","language":"python"}},{"key":"scip-python python python-stdlib 3.11 subprocess/PIPE.PIPE.","attributes":{"symbol":"scip-python python python-stdlib 3.11 subprocess/PIPE.PIPE.","language":"python"}},{"key":"scip-python python python-stdlib 3.11 subprocess/Popen#communicate().","attributes":{"symbol":"scip-python python python-stdlib 3.11 subprocess/Popen#communicate().","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#","attributes":{"range":[13,0,135,22],"symbol":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#","content":"class Debugger:\n    def __init__(self, agent):\n        self.agent = agent\n        self.recursion_layer = 0\n\n    def debug(self, convo, command=None, user_input=None, issue_description=None, is_root_task=False, ask_before_debug=False):\n        \"\"\"\n        Debug a conversation.\n\n        Args:\n            convo (AgentConvo): The conversation object.\n            command (dict, optional): The command to debug. Default is None.\n            user_input (str, optional): User input for debugging. Default is None.\n                Should provide `command` or `user_input`.\n            issue_description (str, optional): Description of the issue to debug. Default is None.\n            ask_before_debug (bool, optional): True if we have to ask user for permission to start debugging.\n\n        Returns:\n            bool: True if debugging was successful, False otherwise.\n        \"\"\"\n        logger.info('Debugging %s', command)\n        self.recursion_layer += 1\n        if self.recursion_layer > MAX_RECUSION_LAYER:\n            self.recursion_layer = 0\n            raise TooDeepRecursionError()\n\n        function_uuid = str(uuid.uuid4())\n        convo.save_branch(function_uuid)\n        success = False\n\n        for i in range(MAX_COMMAND_DEBUG_TRIES):\n            if success:\n                break\n\n            if ask_before_debug or i > 0:\n                print('yes/no', type='button')\n                answer = ask_user(self.agent.project, 'Can I start debugging this issue?', require_some_input=False)\n                if answer.lower() in NEGATIVE_ANSWERS:\n                    return True\n                if answer and answer.lower() not in AFFIRMATIVE_ANSWERS:\n                    user_input = answer\n\n            llm_response = convo.send_message('dev_ops/debug.prompt',\n                {\n                    'command': command['command'] if command is not None else None,\n                    'user_input': user_input,\n                    'issue_description': issue_description,\n                    'os': platform.system(),\n                    'context': convo.to_context_prompt()\n                },\n                DEBUG_STEPS_BREAKDOWN)\n\n            completed_steps = []\n\n            try:\n                while True:\n                    logger.info('Thoughts: ' + llm_response['thoughts'])\n                    logger.info('Reasoning: ' + llm_response['reasoning'])\n                    steps = completed_steps + llm_response['steps']\n\n                    # TODO refactor to nicely get the developer agent\n                    result = self.agent.project.developer.execute_task(\n                        convo,\n                        f\"Thoughts: {llm_response['thoughts']}\\n\\nReasoning: {llm_response['reasoning']}\",\n                        steps,\n                        test_command=command,\n                        test_after_code_changes=True,\n                        continue_development=False,\n                        is_root_task=is_root_task,\n                        continue_from_step=len(completed_steps)\n                    )\n\n                    # in case one step failed or llm wants to see the output to determine the next steps\n                    if 'step_index' in result:\n                        result['os'] = platform.system()\n                        step_index = result['step_index']\n                        completed_steps = steps[:step_index+1]\n                        result['completed_steps'] = completed_steps\n                        result['current_step'] = steps[step_index]\n                        result['next_steps'] = steps[step_index + 1:]\n                        result['current_step_index'] = step_index\n\n                        # Remove the previous debug plan and build a new one\n                        convo.remove_last_x_messages(2)\n                        # todo before updating task first check if update is needed\n                        llm_response = convo.send_message('development/task/update_task.prompt', result,\n                            DEBUG_STEPS_BREAKDOWN)\n                    else:\n                        success = result['success']\n                        if not success:\n                            convo.load_branch(function_uuid)\n                            if 'cli_response' in result:\n                                user_input = result['cli_response']\n                                convo.messages[-2]['content'] = re.sub(\n                                    r'(?<=The output was:\\n\\n).*?(?=\\n\\nThink about this output)',\n                                    result['cli_response'],\n                                    convo.messages[-2]['content'],\n                                    flags=re.DOTALL\n                                )\n                        break\n\n            except TokenLimitError as e:\n                if self.recursion_layer > 0:\n                    self.recursion_layer -= 1\n                    raise e\n                else:\n                    if not success:\n                        convo.load_branch(function_uuid)\n                    continue\n\n            # if not success:\n            #     # TODO explain better how should the user approach debugging\n            #     # we can copy the entire convo to clipboard so they can paste it in the playground\n            #     user_input = convo.agent.project.ask_for_human_intervention(\n            #         'It seems like I cannot debug this problem by myself. Can you please help me and try debugging it yourself?' if user_input is None else f'Can you check this again:\\n{issue_description}?',\n            #         response['data']\n            #     )\n\n            #     if user_input == 'continue':\n            #         success = True\n\n        self.recursion_layer -= 1\n        return success","file":"/pilot/helpers/Debugger.py","language":"python","fileHash":"908954151b6d856c4399a47639bc56226505e2b243ca170eb9a04d9aa18a0eea","hash":"ca4af6ee482f4737b2fd4bbf433749f2124957a2b52b4d5343138c56618efa95","processedContent":"class Debugger:\n    def __init__(self, agent):\n        \"\"\"This code initializes a new instance of the class, setting the `agent` attribute to the value passed in the constructor and the `recursion_layer` attribute to 0.\"\"\"\n        pass\n\n    def debug(self, convo, command=None, user_input=None, issue_description=None, is_root_task=False, ask_before_debug=False):\n        \"\"\"\n        Debug a conversation.\n\n        Args:\n            convo (AgentConvo): The conversation object.\n            command (dict, optional): The command to debug. Default is None.\n            user_input (str, optional): User input for debugging. Default is None.\n                Should provide `command` or `user_input`.\n            issue_description (str, optional): Description of the issue to debug. Default is None.\n            ask_before_debug (bool, optional): True if we have to ask user for permission to start debugging.\n\n        Returns:\n            bool: True if debugging was successful, False otherwise.\n        \"\"\"\n        logger.info('Debugging %s', command)\n        self.recursion_layer += 1\n        if self.recursion_layer > MAX_RECUSION_LAYER:\n            self.recursion_layer = 0\n            raise TooDeepRecursionError()\n\n        function_uuid = str(uuid.uuid4())\n        convo.save_branch(function_uuid)\n        success = False\n\n        for i in range(MAX_COMMAND_DEBUG_TRIES):\n            if success:\n                break\n\n            if ask_before_debug or i > 0:\n                print('yes/no', type='button')\n                answer = ask_user(self.agent.project, 'Can I start debugging this issue?', require_some_input=False)\n                if answer.lower() in NEGATIVE_ANSWERS:\n                    return True\n                if answer and answer.lower() not in AFFIRMATIVE_ANSWERS:\n                    user_input = answer\n\n            llm_response = convo.send_message('dev_ops/debug.prompt',\n                {\n                    'command': command['command'] if command is not None else None,\n                    'user_input': user_input,\n                    'issue_description': issue_description,\n                    'os': platform.system(),\n                    'context': convo.to_context_prompt()\n                },\n                DEBUG_STEPS_BREAKDOWN)\n\n            completed_steps = []\n\n            try:\n                while True:\n                    logger.info('Thoughts: ' + llm_response['thoughts'])\n                    logger.info('Reasoning: ' + llm_response['reasoning'])\n                    steps = completed_steps + llm_response['steps']\n\n                    # TODO refactor to nicely get the developer agent\n                    result = self.agent.project.developer.execute_task(\n                        convo,\n                        f\"Thoughts: {llm_response['thoughts']}\\n\\nReasoning: {llm_response['reasoning']}\",\n                        steps,\n                        test_command=command,\n                        test_after_code_changes=True,\n                        continue_development=False,\n                        is_root_task=is_root_task,\n                        continue_from_step=len(completed_steps)\n                    )\n\n                    # in case one step failed or llm wants to see the output to determine the next steps\n                    if 'step_index' in result:\n                        result['os'] = platform.system()\n                        step_index = result['step_index']\n                        completed_steps = steps[:step_index+1]\n                        result['completed_steps'] = completed_steps\n                        result['current_step'] = steps[step_index]\n                        result['next_steps'] = steps[step_index + 1:]\n                        result['current_step_index'] = step_index\n\n                        # Remove the previous debug plan and build a new one\n                        convo.remove_last_x_messages(2)\n                        # todo before updating task first check if update is needed\n                        llm_response = convo.send_message('development/task/update_task.prompt', result,\n                            DEBUG_STEPS_BREAKDOWN)\n                    else:\n                        success = result['success']\n                        if not success:\n                            convo.load_branch(function_uuid)\n                            if 'cli_response' in result:\n                                user_input = result['cli_response']\n                                convo.messages[-2]['content'] = re.sub(\n                                    r'(?<=The output was:\\n\\n).*?(?=\\n\\nThink about this output)',\n                                    result['cli_response'],\n                                    convo.messages[-2]['content'],\n                                    flags=re.DOTALL\n                                )\n                        break\n\n            except TokenLimitError as e:\n                if self.recursion_layer > 0:\n                    self.recursion_layer -= 1\n                    raise e\n                else:\n                    if not success:\n                        convo.load_branch(function_uuid)\n                    continue\n\n            # if not success:\n            #     # TODO explain better how should the user approach debugging\n            #     # we can copy the entire convo to clipboard so they can paste it in the playground\n            #     user_input = convo.agent.project.ask_for_human_intervention(\n            #         'It seems like I cannot debug this problem by myself. Can you please help me and try debugging it yourself?' if user_input is None else f'Can you check this again:\\n{issue_description}?',\n            #         response['data']\n            #     )\n\n            #     if user_input == 'continue':\n            #         success = True\n\n        self.recursion_layer -= 1\n        return success","documentation":"This code defines a class called `Debugger` that allows developers to debug conversations with their chatbot. It takes in a conversation object and a set of parameters, and then uses the LLM to generate a plan for debugging the conversation. The developer can then execute the plan and receive feedback on whether the debugging was successful or not."}},{"key":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#__init__().","attributes":{"range":[14,4,16,32],"symbol":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#__init__().","content":"def __init__(self, agent):\n        self.agent = agent\n        self.recursion_layer = 0","file":"/pilot/helpers/Debugger.py","language":"python","fileHash":"908954151b6d856c4399a47639bc56226505e2b243ca170eb9a04d9aa18a0eea","hash":"53ec9e437601582da75d12a2a77fd924020dc05034088ce397dbae43bedf64ff","processedContent":"def __init__(self, agent):\n        self.agent = agent\n        self.recursion_layer = 0","documentation":"This code initializes a new instance of the class, setting the `agent` attribute to the value passed in the constructor and the `recursion_layer` attribute to 0."}},{"key":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#debug().","attributes":{"range":[18,4,135,22],"symbol":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#debug().","content":"def debug(self, convo, command=None, user_input=None, issue_description=None, is_root_task=False, ask_before_debug=False):\n        \"\"\"\n        Debug a conversation.\n\n        Args:\n            convo (AgentConvo): The conversation object.\n            command (dict, optional): The command to debug. Default is None.\n            user_input (str, optional): User input for debugging. Default is None.\n                Should provide `command` or `user_input`.\n            issue_description (str, optional): Description of the issue to debug. Default is None.\n            ask_before_debug (bool, optional): True if we have to ask user for permission to start debugging.\n\n        Returns:\n            bool: True if debugging was successful, False otherwise.\n        \"\"\"\n        logger.info('Debugging %s', command)\n        self.recursion_layer += 1\n        if self.recursion_layer > MAX_RECUSION_LAYER:\n            self.recursion_layer = 0\n            raise TooDeepRecursionError()\n\n        function_uuid = str(uuid.uuid4())\n        convo.save_branch(function_uuid)\n        success = False\n\n        for i in range(MAX_COMMAND_DEBUG_TRIES):\n            if success:\n                break\n\n            if ask_before_debug or i > 0:\n                print('yes/no', type='button')\n                answer = ask_user(self.agent.project, 'Can I start debugging this issue?', require_some_input=False)\n                if answer.lower() in NEGATIVE_ANSWERS:\n                    return True\n                if answer and answer.lower() not in AFFIRMATIVE_ANSWERS:\n                    user_input = answer\n\n            llm_response = convo.send_message('dev_ops/debug.prompt',\n                {\n                    'command': command['command'] if command is not None else None,\n                    'user_input': user_input,\n                    'issue_description': issue_description,\n                    'os': platform.system(),\n                    'context': convo.to_context_prompt()\n                },\n                DEBUG_STEPS_BREAKDOWN)\n\n            completed_steps = []\n\n            try:\n                while True:\n                    logger.info('Thoughts: ' + llm_response['thoughts'])\n                    logger.info('Reasoning: ' + llm_response['reasoning'])\n                    steps = completed_steps + llm_response['steps']\n\n                    # TODO refactor to nicely get the developer agent\n                    result = self.agent.project.developer.execute_task(\n                        convo,\n                        f\"Thoughts: {llm_response['thoughts']}\\n\\nReasoning: {llm_response['reasoning']}\",\n                        steps,\n                        test_command=command,\n                        test_after_code_changes=True,\n                        continue_development=False,\n                        is_root_task=is_root_task,\n                        continue_from_step=len(completed_steps)\n                    )\n\n                    # in case one step failed or llm wants to see the output to determine the next steps\n                    if 'step_index' in result:\n                        result['os'] = platform.system()\n                        step_index = result['step_index']\n                        completed_steps = steps[:step_index+1]\n                        result['completed_steps'] = completed_steps\n                        result['current_step'] = steps[step_index]\n                        result['next_steps'] = steps[step_index + 1:]\n                        result['current_step_index'] = step_index\n\n                        # Remove the previous debug plan and build a new one\n                        convo.remove_last_x_messages(2)\n                        # todo before updating task first check if update is needed\n                        llm_response = convo.send_message('development/task/update_task.prompt', result,\n                            DEBUG_STEPS_BREAKDOWN)\n                    else:\n                        success = result['success']\n                        if not success:\n                            convo.load_branch(function_uuid)\n                            if 'cli_response' in result:\n                                user_input = result['cli_response']\n                                convo.messages[-2]['content'] = re.sub(\n                                    r'(?<=The output was:\\n\\n).*?(?=\\n\\nThink about this output)',\n                                    result['cli_response'],\n                                    convo.messages[-2]['content'],\n                                    flags=re.DOTALL\n                                )\n                        break\n\n            except TokenLimitError as e:\n                if self.recursion_layer > 0:\n                    self.recursion_layer -= 1\n                    raise e\n                else:\n                    if not success:\n                        convo.load_branch(function_uuid)\n                    continue\n\n            # if not success:\n            #     # TODO explain better how should the user approach debugging\n            #     # we can copy the entire convo to clipboard so they can paste it in the playground\n            #     user_input = convo.agent.project.ask_for_human_intervention(\n            #         'It seems like I cannot debug this problem by myself. Can you please help me and try debugging it yourself?' if user_input is None else f'Can you check this again:\\n{issue_description}?',\n            #         response['data']\n            #     )\n\n            #     if user_input == 'continue':\n            #         success = True\n\n        self.recursion_layer -= 1\n        return success","file":"/pilot/helpers/Debugger.py","language":"python","fileHash":"908954151b6d856c4399a47639bc56226505e2b243ca170eb9a04d9aa18a0eea","hash":"5790a7e32ff2220c4bef31ca1628175604a9490ea97a781458221620671a622d","processedContent":"def debug(self, convo, command=None, user_input=None, issue_description=None, is_root_task=False, ask_before_debug=False):\n        \"\"\"\n        Debug a conversation.\n\n        Args:\n            convo (AgentConvo): The conversation object.\n            command (dict, optional): The command to debug. Default is None.\n            user_input (str, optional): User input for debugging. Default is None.\n                Should provide `command` or `user_input`.\n            issue_description (str, optional): Description of the issue to debug. Default is None.\n            ask_before_debug (bool, optional): True if we have to ask user for permission to start debugging.\n\n        Returns:\n            bool: True if debugging was successful, False otherwise.\n        \"\"\"\n        logger.info('Debugging %s', command)\n        \"\"\"\n        scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n        scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n        \"\"\"\n        self.recursion_layer += 1 #undefined\n        if self.recursion_layer > MAX_RECUSION_LAYER:\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.debugger`/Debugger#recursion_layer.: undefined\n        scip-python python temp indexer `pilot.const.code_execution`/MAX_RECUSION_LAYER.: undefined\n        \"\"\"\n            self.recursion_layer = 0 #undefined\n            raise TooDeepRecursionError() #This code defines a custom exception class called \"TooDeepRecursionError\" that is raised when the recursion depth exceeds a certain limit.\n\n        function_uuid = str(uuid.uuid4())\n        \"\"\"\n        scip-python python python-stdlib 3.11 uuid/__init__:: undefined\n        scip-python python python-stdlib 3.11 uuid/uuid4().: undefined\n        \"\"\"\n        convo.save_branch(function_uuid)\n        success = False\n\n        for i in range(MAX_COMMAND_DEBUG_TRIES): #undefined\n            if success:\n                break\n\n            if ask_before_debug or i > 0:\n                print('yes/no', type='button')\n                answer = ask_user(self.agent.project, 'Can I start debugging this issue?', require_some_input=False)\n                \"\"\"\n                scip-python python temp indexer `pilot.prompts.prompts`/ask_user().: This code defines a function called `ask_user` that retrieves user input from a database, styles the question, and saves the response to the database. It also logs the question and answer to a logger.\n                scip-python python temp indexer `pilot.helpers.debugger`/Debugger#agent.: undefined\n                \"\"\"\n                if answer.lower() in NEGATIVE_ANSWERS: #undefined\n                    return True\n                if answer and answer.lower() not in AFFIRMATIVE_ANSWERS: #undefined\n                    user_input = answer\n\n            llm_response = convo.send_message('dev_ops/debug.prompt',\n                {\n                    'command': command['command'] if command is not None else None,\n                    'user_input': user_input,\n                    'issue_description': issue_description,\n                    'os': platform.system(),\n                    \"\"\"\n                    scip-python python python-stdlib 3.11 platform/__init__:: undefined\n                    scip-python python python-stdlib 3.11 platform/system().: undefined\n                    \"\"\"\n                    'context': convo.to_context_prompt()\n                },\n                DEBUG_STEPS_BREAKDOWN) #undefined\n\n            completed_steps = []\n\n            try:\n                while True:\n                    logger.info('Thoughts: ' + llm_response['thoughts'])\n                    \"\"\"\n                    scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n                    scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n                    \"\"\"\n                    logger.info('Reasoning: ' + llm_response['reasoning'])\n                    \"\"\"\n                    scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n                    scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n                    \"\"\"\n                    steps = completed_steps + llm_response['steps']\n\n                    # TODO refactor to nicely get the developer agent\n                    result = self.agent.project.developer.execute_task( #undefined\n                        convo,\n                        f\"Thoughts: {llm_response['thoughts']}\\n\\nReasoning: {llm_response['reasoning']}\",\n                        steps,\n                        test_command=command,\n                        test_after_code_changes=True,\n                        continue_development=False,\n                        is_root_task=is_root_task,\n                        continue_from_step=len(completed_steps)\n                    )\n\n                    # in case one step failed or llm wants to see the output to determine the next steps\n                    if 'step_index' in result:\n                        result['os'] = platform.system()\n                        \"\"\"\n                        scip-python python python-stdlib 3.11 platform/__init__:: undefined\n                        scip-python python python-stdlib 3.11 platform/system().: undefined\n                        \"\"\"\n                        step_index = result['step_index']\n                        completed_steps = steps[:step_index+1]\n                        result['completed_steps'] = completed_steps\n                        result['current_step'] = steps[step_index]\n                        result['next_steps'] = steps[step_index + 1:]\n                        result['current_step_index'] = step_index\n\n                        # Remove the previous debug plan and build a new one\n                        convo.remove_last_x_messages(2)\n                        # todo before updating task first check if update is needed\n                        llm_response = convo.send_message('development/task/update_task.prompt', result,\n                            DEBUG_STEPS_BREAKDOWN) #undefined\n                    else:\n                        success = result['success']\n                        if not success:\n                            convo.load_branch(function_uuid)\n                            if 'cli_response' in result:\n                                user_input = result['cli_response']\n                                convo.messages[-2]['content'] = re.sub(\n                                \"\"\"\n                                scip-python python python-stdlib 3.11 re/__init__:: undefined\n                                scip-python python python-stdlib 3.11 re/sub().: undefined\n                                \"\"\"\n                                    r'(?<=The output was:\\n\\n).*?(?=\\n\\nThink about this output)',\n                                    result['cli_response'],\n                                    convo.messages[-2]['content'],\n                                    flags=re.DOTALL\n                                    \"\"\"\n                                    scip-python python python-stdlib 3.11 re/__init__:: undefined\n                                    scip-python python python-stdlib 3.11 re/DOTALL.: undefined\n                                    \"\"\"\n                                )\n                        break\n\n            except TokenLimitError as e: #This code defines a custom exception class called `TokenLimitError` that is raised when the number of tokens in a message exceeds the maximum allowed by the GPT model. The class takes two arguments: `tokens_in_messages` and `max_tokens`, which represent the number of tokens in the message and the maximum number of tokens allowed, respectively. The `__init__` method sets the instance variables and calls the parent class's constructor with a formatted error message.\n                if self.recursion_layer > 0: #undefined\n                    self.recursion_layer -= 1 #undefined\n                    raise e\n                else:\n                    if not success:\n                        convo.load_branch(function_uuid)\n                    continue\n\n            # if not success:\n            #     # TODO explain better how should the user approach debugging\n            #     # we can copy the entire convo to clipboard so they can paste it in the playground\n            #     user_input = convo.agent.project.ask_for_human_intervention(\n            #         'It seems like I cannot debug this problem by myself. Can you please help me and try debugging it yourself?' if user_input is None else f'Can you check this again:\\n{issue_description}?',\n            #         response['data']\n            #     )\n\n            #     if user_input == 'continue':\n            #         success = True\n\n        self.recursion_layer -= 1\n        return success","documentation":"This code defines a function called `debug` that takes a conversation object and various other parameters, and then uses the LLM to generate a debug plan for the user. The function then sends the debug plan to the user and waits for their response, which is then used to update the debug plan and continue debugging until the issue is resolved or the user decides to stop."}},{"key":"scip-python python temp indexer `pilot.helpers.debugger`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.debugger`/__init__:","range":[0,0,136,0],"content":"import platform\nimport uuid\nimport re\n\nfrom const.code_execution import MAX_COMMAND_DEBUG_TRIES, MAX_RECUSION_LAYER\nfrom const.function_calls import DEBUG_STEPS_BREAKDOWN\nfrom const.messages import AFFIRMATIVE_ANSWERS, NEGATIVE_ANSWERS\nfrom helpers.exceptions.TokenLimitError import TokenLimitError\nfrom helpers.exceptions.TooDeepRecursionError import TooDeepRecursionError\nfrom logger.logger import logger\nfrom prompts.prompts import ask_user\n\n\nclass Debugger:\n    def __init__(self, agent):\n        self.agent = agent\n        self.recursion_layer = 0\n\n    def debug(self, convo, command=None, user_input=None, issue_description=None, is_root_task=False, ask_before_debug=False):\n        \"\"\"\n        Debug a conversation.\n\n        Args:\n            convo (AgentConvo): The conversation object.\n            command (dict, optional): The command to debug. Default is None.\n            user_input (str, optional): User input for debugging. Default is None.\n                Should provide `command` or `user_input`.\n            issue_description (str, optional): Description of the issue to debug. Default is None.\n            ask_before_debug (bool, optional): True if we have to ask user for permission to start debugging.\n\n        Returns:\n            bool: True if debugging was successful, False otherwise.\n        \"\"\"\n        logger.info('Debugging %s', command)\n        self.recursion_layer += 1\n        if self.recursion_layer > MAX_RECUSION_LAYER:\n            self.recursion_layer = 0\n            raise TooDeepRecursionError()\n\n        function_uuid = str(uuid.uuid4())\n        convo.save_branch(function_uuid)\n        success = False\n\n        for i in range(MAX_COMMAND_DEBUG_TRIES):\n            if success:\n                break\n\n            if ask_before_debug or i > 0:\n                print('yes/no', type='button')\n                answer = ask_user(self.agent.project, 'Can I start debugging this issue?', require_some_input=False)\n                if answer.lower() in NEGATIVE_ANSWERS:\n                    return True\n                if answer and answer.lower() not in AFFIRMATIVE_ANSWERS:\n                    user_input = answer\n\n            llm_response = convo.send_message('dev_ops/debug.prompt',\n                {\n                    'command': command['command'] if command is not None else None,\n                    'user_input': user_input,\n                    'issue_description': issue_description,\n                    'os': platform.system(),\n                    'context': convo.to_context_prompt()\n                },\n                DEBUG_STEPS_BREAKDOWN)\n\n            completed_steps = []\n\n            try:\n                while True:\n                    logger.info('Thoughts: ' + llm_response['thoughts'])\n                    logger.info('Reasoning: ' + llm_response['reasoning'])\n                    steps = completed_steps + llm_response['steps']\n\n                    # TODO refactor to nicely get the developer agent\n                    result = self.agent.project.developer.execute_task(\n                        convo,\n                        f\"Thoughts: {llm_response['thoughts']}\\n\\nReasoning: {llm_response['reasoning']}\",\n                        steps,\n                        test_command=command,\n                        test_after_code_changes=True,\n                        continue_development=False,\n                        is_root_task=is_root_task,\n                        continue_from_step=len(completed_steps)\n                    )\n\n                    # in case one step failed or llm wants to see the output to determine the next steps\n                    if 'step_index' in result:\n                        result['os'] = platform.system()\n                        step_index = result['step_index']\n                        completed_steps = steps[:step_index+1]\n                        result['completed_steps'] = completed_steps\n                        result['current_step'] = steps[step_index]\n                        result['next_steps'] = steps[step_index + 1:]\n                        result['current_step_index'] = step_index\n\n                        # Remove the previous debug plan and build a new one\n                        convo.remove_last_x_messages(2)\n                        # todo before updating task first check if update is needed\n                        llm_response = convo.send_message('development/task/update_task.prompt', result,\n                            DEBUG_STEPS_BREAKDOWN)\n                    else:\n                        success = result['success']\n                        if not success:\n                            convo.load_branch(function_uuid)\n                            if 'cli_response' in result:\n                                user_input = result['cli_response']\n                                convo.messages[-2]['content'] = re.sub(\n                                    r'(?<=The output was:\\n\\n).*?(?=\\n\\nThink about this output)',\n                                    result['cli_response'],\n                                    convo.messages[-2]['content'],\n                                    flags=re.DOTALL\n                                )\n                        break\n\n            except TokenLimitError as e:\n                if self.recursion_layer > 0:\n                    self.recursion_layer -= 1\n                    raise e\n                else:\n                    if not success:\n                        convo.load_branch(function_uuid)\n                    continue\n\n            # if not success:\n            #     # TODO explain better how should the user approach debugging\n            #     # we can copy the entire convo to clipboard so they can paste it in the playground\n            #     user_input = convo.agent.project.ask_for_human_intervention(\n            #         'It seems like I cannot debug this problem by myself. Can you please help me and try debugging it yourself?' if user_input is None else f'Can you check this again:\\n{issue_description}?',\n            #         response['data']\n            #     )\n\n            #     if user_input == 'continue':\n            #         success = True\n\n        self.recursion_layer -= 1\n        return success\n","file":"/pilot/helpers/Debugger.py","language":"python","fileHash":"908954151b6d856c4399a47639bc56226505e2b243ca170eb9a04d9aa18a0eea","hash":"908954151b6d856c4399a47639bc56226505e2b243ca170eb9a04d9aa18a0eea","processedContent":"import platform #undefined\nimport uuid #undefined\nimport re #undefined\n\nfrom const.code_execution import MAX_COMMAND_DEBUG_TRIES, MAX_RECUSION_LAYER\n\"\"\"\nscip-python python temp indexer `pilot.const.code_execution`/__init__:: This code defines some constants that control the behavior of a command-line interface. The MAX_COMMAND_DEBUG_TRIES constant determines how many times the CLI will attempt to debug a command before giving up. The MAX_RECUSION_LAYER constant sets the maximum number of layers of recursion that the CLI will allow. The MIN_COMMAND_RUN_TIME and MAX_COMMAND_RUN_TIME constants set the minimum and maximum amount of time, in milliseconds, that a command can take to run. Finally, the MAX_COMMAND_OUTPUT_LENGTH constant sets the maximum length, in characters, of the output that the CLI will display for a command.\nscip-python python temp indexer `pilot.const.code_execution`/MAX_COMMAND_DEBUG_TRIES.: undefined\nscip-python python temp indexer `pilot.const.code_execution`/MAX_RECUSION_LAYER.: undefined\n\"\"\"\nfrom const.function_calls import DEBUG_STEPS_BREAKDOWN\n\"\"\"\nscip-python python temp indexer `pilot.const.function_calls`/__init__:: The code is a collection of functions and definitions that are used to implement various tasks in a development process. It includes functions for processing user stories, tasks, technologies, commands, and files, as well as definitions for breaking down development tasks into smaller steps and implementing code changes.\nscip-python python temp indexer `pilot.const.function_calls`/DEBUG_STEPS_BREAKDOWN.: undefined\n\"\"\"\nfrom const.messages import AFFIRMATIVE_ANSWERS, NEGATIVE_ANSWERS\n\"\"\"\nscip-python python temp indexer `pilot.const.messages`/__init__:: This code defines a set of constants that are used to control the flow of a program. The first constant, `CHECK_AND_CONTINUE`, is a message that is displayed when something goes wrong and the user needs to be prompted to continue. The second constant, `WHEN_USER_DONE`, is a message that is displayed when the user is finished with a task and needs to be prompted to continue. The third and fourth constants, `AFFIRMATIVE_ANSWERS` and `NEGATIVE_ANSWERS`, define sets of strings that are used to determine whether a user's response indicates affirmative or negative sentiment.\nscip-python python temp indexer `pilot.const.messages`/AFFIRMATIVE_ANSWERS.: undefined\nscip-python python temp indexer `pilot.const.messages`/NEGATIVE_ANSWERS.: undefined\n\"\"\"\nfrom helpers.exceptions.TokenLimitError import TokenLimitError\n\"\"\"\nscip-python python temp indexer `pilot.helpers.exceptions.tokenlimiterror`/__init__:: This code defines constants for the maximum number of tokens allowed in a GPT model and the minimum number of tokens required for a response. It also sets the maximum number of questions that can be asked and the response when the conversation is complete.\nscip-python python temp indexer `pilot.helpers.exceptions.tokenlimiterror`/TokenLimitError#: This code defines a custom exception class called `TokenLimitError` that is raised when the number of tokens in a message exceeds the maximum allowed by the GPT model. The class takes two arguments: `tokens_in_messages` and `max_tokens`, which represent the number of tokens in the message and the maximum number of tokens allowed, respectively. The `__init__` method sets the instance variables and calls the parent class's constructor with a formatted error message.\n\"\"\"\nfrom helpers.exceptions.TooDeepRecursionError import TooDeepRecursionError\n\"\"\"\nscip-python python temp indexer `pilot.helpers.exceptions.toodeeprecursionerror`/__init__:: This code defines a custom exception class called \"TooDeepRecursionError\" that is raised when the recursion depth exceeds a certain limit, indicating a potential infinite loop in the code.\nscip-python python temp indexer `pilot.helpers.exceptions.toodeeprecursionerror`/TooDeepRecursionError#: This code defines a custom exception class called \"TooDeepRecursionError\" that is raised when the recursion depth exceeds a certain limit.\n\"\"\"\nfrom logger.logger import logger\n\"\"\"\nscip-python python temp indexer `pilot.logger.logger`/__init__:: This code sets up a custom logger for an application, which filters sensitive information from log records and removes ANSI escape sequences.\nscip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n\"\"\"\nfrom prompts.prompts import ask_user\n\"\"\"\nscip-python python temp indexer `pilot.prompts.prompts`/__init__:: The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.prompts.prompts`/ask_user().: This code defines a function called `ask_user` that retrieves user input from a database, styles the question, and saves the response to the database. It also logs the question and answer to a logger.\n\"\"\"\n\n\nclass Debugger:\n    \"\"\"This code defines a class called `Debugger` that allows developers to debug conversations with their chatbot. It takes in a conversation object and a set of parameters, and then uses the LLM to generate a plan for debugging the conversation. The developer can then execute the plan and receive feedback on whether the debugging was successful or not.\"\"\"\n    pass\n","documentation":"The code defines a class called `Debugger` that allows developers to debug conversations with their chatbot by generating a plan for debugging using the LLM and receiving feedback on whether the debugging was successful or not."}},{"key":"scip-python python python-stdlib 3.11 platform/__init__:","attributes":{"symbol":"scip-python python python-stdlib 3.11 platform/__init__:","language":"python"}},{"key":"scip-python python temp indexer `pilot.const.code_execution`/MAX_COMMAND_DEBUG_TRIES.","attributes":{"symbol":"scip-python python temp indexer `pilot.const.code_execution`/MAX_COMMAND_DEBUG_TRIES.","language":"python"}},{"key":"scip-python python temp indexer `pilot.const.code_execution`/MAX_RECUSION_LAYER.","attributes":{"symbol":"scip-python python temp indexer `pilot.const.code_execution`/MAX_RECUSION_LAYER.","language":"python"}},{"key":"scip-python python temp indexer `pilot.const.function_calls`/DEBUG_STEPS_BREAKDOWN.","attributes":{"symbol":"scip-python python temp indexer `pilot.const.function_calls`/DEBUG_STEPS_BREAKDOWN.","language":"python"}},{"key":"scip-python python temp indexer `pilot.const.messages`/AFFIRMATIVE_ANSWERS.","attributes":{"symbol":"scip-python python temp indexer `pilot.const.messages`/AFFIRMATIVE_ANSWERS.","language":"python"}},{"key":"scip-python python temp indexer `pilot.const.messages`/NEGATIVE_ANSWERS.","attributes":{"symbol":"scip-python python temp indexer `pilot.const.messages`/NEGATIVE_ANSWERS.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.exceptions.toodeeprecursionerror`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.exceptions.toodeeprecursionerror`/__init__:","language":"python","range":[0,0,4,0],"content":"class TooDeepRecursionError(Exception):\n    def __init__(self, message='Recursion is too deep!'):\n        self.message = message\n        super().__init__(message)\n","file":"/pilot/helpers/exceptions/TooDeepRecursionError.py","fileHash":"788cc30ec9343b9d24dbd66541e8bd529bee693635d0288bf37f7cfa64331eea","hash":"788cc30ec9343b9d24dbd66541e8bd529bee693635d0288bf37f7cfa64331eea","processedContent":"class TooDeepRecursionError(Exception):\n    \"\"\"This code defines a custom exception class called \"TooDeepRecursionError\" that is raised when the recursion depth exceeds a certain limit.\"\"\"\n    pass\n","documentation":"This code defines a custom exception class called \"TooDeepRecursionError\" that is raised when the recursion depth exceeds a certain limit, indicating a potential infinite loop in the code."}},{"key":"scip-python python temp indexer `pilot.helpers.exceptions.toodeeprecursionerror`/TooDeepRecursionError#","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.exceptions.toodeeprecursionerror`/TooDeepRecursionError#","language":"python","range":[0,0,3,33],"content":"class TooDeepRecursionError(Exception):\n    def __init__(self, message='Recursion is too deep!'):\n        self.message = message\n        super().__init__(message)","file":"/pilot/helpers/exceptions/TooDeepRecursionError.py","fileHash":"788cc30ec9343b9d24dbd66541e8bd529bee693635d0288bf37f7cfa64331eea","hash":"2ee4f31ddd9f9a2ca2b6133bb4126ba17f9c45f0126594336be58fbd9ed3bfa1","processedContent":"class TooDeepRecursionError(Exception):\n    def __init__(self, message='Recursion is too deep!'):\n        self.message = message\n        super().__init__(message)","documentation":"This code defines a custom exception class called \"TooDeepRecursionError\" that is raised when the recursion depth exceeds a certain limit."}},{"key":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#recursion_layer.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#recursion_layer.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#agent.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#agent.","language":"python"}},{"key":"scip-python python python-stdlib 3.11 platform/system().","attributes":{"symbol":"scip-python python python-stdlib 3.11 platform/system().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 re/sub().","attributes":{"symbol":"scip-python python python-stdlib 3.11 re/sub().","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.project`/Project#__init__().","attributes":{"range":[31,4,77,83],"symbol":"scip-python python temp indexer `pilot.helpers.project`/Project#__init__().","content":"def __init__(self, args, name=None, project_description=None, clarifications=None, user_stories=None,\n                 user_tasks=None, architecture=None, development_plan=None, current_step=None, ipc_client_instance=None,\n                 enable_dot_pilot_gpt=True):\n        \"\"\"\n        Initialize a project.\n\n        Args:\n            args (dict): Project arguments - app_id, (app_type, name), user_id, email, password, step\n            name (str, optional): Project name. Default is None.\n            description (str, optional): Project description. Default is None.\n            user_stories (list, optional): List of user stories. Default is None.\n            user_tasks (list, optional): List of user tasks. Default is None.\n            architecture (str, optional): Project architecture. Default is None.\n            development_plan (str, optional): Development plan. Default is None.\n            current_step (str, optional): Current step in the project. Default is None.\n        \"\"\"\n        self.args = args\n        self.llm_req_num = 0\n        self.command_runs_count = 0\n        self.user_inputs_count = 0\n        self.checkpoints = {\n            'last_user_input': None,\n            'last_command_run': None,\n            'last_development_step': None,\n        }\n        # TODO make flexible\n        self.root_path = ''\n        self.skip_until_dev_step = None\n        self.skip_steps = None\n        self.main_prompt = None\n        self.files = []\n        self.continuing_project = args.get('continuing_project', False)\n\n        self.ipc_client_instance = ipc_client_instance\n\n        # self.restore_files({dev_step_id_to_start_from})\n\n        self.finished = False\n        self.current_step = current_step\n        self.name = name\n        self.project_description = project_description\n        self.clarifications = clarifications\n        self.user_stories = user_stories\n        self.user_tasks = user_tasks\n        self.architecture = architecture\n        self.development_plan = development_plan\n        self.dot_pilot_gpt = DotGptPilot(log_chat_completions=enable_dot_pilot_gpt)","file":"/pilot/helpers/Project.py","language":"python","fileHash":"4d8215b25fa6dfe61adc429af601243ce7ae701549bb568ae1e5b9dd3ba7bac8","hash":"6423a4376e9c0e5795adec2daaa9d57edec7f69619b25c074a822248ec405781","processedContent":"def __init__(self, args, name=None, project_description=None, clarifications=None, user_stories=None,\n                 user_tasks=None, architecture=None, development_plan=None, current_step=None, ipc_client_instance=None,\n                 enable_dot_pilot_gpt=True):\n        \"\"\"\n        Initialize a project.\n\n        Args:\n            args (dict): Project arguments - app_id, (app_type, name), user_id, email, password, step\n            name (str, optional): Project name. Default is None.\n            description (str, optional): Project description. Default is None.\n            user_stories (list, optional): List of user stories. Default is None.\n            user_tasks (list, optional): List of user tasks. Default is None.\n            architecture (str, optional): Project architecture. Default is None.\n            development_plan (str, optional): Development plan. Default is None.\n            current_step (str, optional): Current step in the project. Default is None.\n        \"\"\"\n        self.args = args\n        self.llm_req_num = 0\n        self.command_runs_count = 0\n        self.user_inputs_count = 0\n        self.checkpoints = {\n            'last_user_input': None,\n            'last_command_run': None,\n            'last_development_step': None,\n        }\n        # TODO make flexible\n        self.root_path = ''\n        self.skip_until_dev_step = None\n        self.skip_steps = None\n        self.main_prompt = None\n        self.files = []\n        self.continuing_project = args.get('continuing_project', False)\n\n        self.ipc_client_instance = ipc_client_instance\n\n        # self.restore_files({dev_step_id_to_start_from})\n\n        self.finished = False\n        self.current_step = current_step\n        self.name = name\n        self.project_description = project_description\n        self.clarifications = clarifications\n        self.user_stories = user_stories\n        self.user_tasks = user_tasks\n        self.architecture = architecture\n        self.development_plan = development_plan\n        self.dot_pilot_gpt = DotGptPilot(log_chat_completions=enable_dot_pilot_gpt)","documentation":"This code defines a class that initializes a project, including setting up the project's name, description, and other metadata. It also sets up the project's architecture, development plan, and current step, as well as some internal variables used for tracking the project's progress."}},{"key":"scip-python python temp indexer `pilot.helpers.project`/Project#set_root_path().","attributes":{"range":[79,4,81,52],"symbol":"scip-python python temp indexer `pilot.helpers.project`/Project#set_root_path().","content":"def set_root_path(self, root_path: str):\n        self.root_path = root_path\n        self.dot_pilot_gpt.with_root_path(root_path)","file":"/pilot/helpers/Project.py","language":"python","fileHash":"4d8215b25fa6dfe61adc429af601243ce7ae701549bb568ae1e5b9dd3ba7bac8","hash":"d21dfa50b81ebaab3dff902f01af669727c3d3568cb2323b22cecc0e3510fb09","processedContent":"def set_root_path(self, root_path: str):\n        self.root_path = root_path #undefined\n        self.dot_pilot_gpt.with_root_path(root_path)","documentation":"This code sets the root path for a file system, allowing the program to access files and directories within that path."}},{"key":"scip-python python temp indexer `pilot.helpers.project`/Project#get_directory_tree().","attributes":{"range":[158,4,173,74],"symbol":"scip-python python temp indexer `pilot.helpers.project`/Project#get_directory_tree().","content":"def get_directory_tree(self, with_descriptions=False):\n        \"\"\"\n        Get the directory tree of the project.\n\n        Args:\n            with_descriptions (bool, optional): Whether to include descriptions. Default is False.\n\n        Returns:\n            dict: The directory tree.\n        \"\"\"\n        # files = {}\n        # if with_descriptions and False:\n        #     files = File.select().where(File.app_id == self.args['app_id'])\n        #     files = {snapshot.name: snapshot for snapshot in files}\n        # return build_directory_tree_with_descriptions(self.root_path, ignore=IGNORE_FOLDERS, files=files, add_descriptions=False)\n        return build_directory_tree(self.root_path, ignore=IGNORE_FOLDERS)","file":"/pilot/helpers/Project.py","language":"python","fileHash":"4d8215b25fa6dfe61adc429af601243ce7ae701549bb568ae1e5b9dd3ba7bac8","hash":"7b61e62e23f12f6250551b44bb1ba09bbb87c36d26a461021f3f227c2268079b","processedContent":"def get_directory_tree(self, with_descriptions=False):\n        \"\"\"\n        Get the directory tree of the project.\n\n        Args:\n            with_descriptions (bool, optional): Whether to include descriptions. Default is False.\n\n        Returns:\n            dict: The directory tree.\n        \"\"\"\n        # files = {}\n        # if with_descriptions and False:\n        #     files = File.select().where(File.app_id == self.args['app_id'])\n        #     files = {snapshot.name: snapshot for snapshot in files}\n        # return build_directory_tree_with_descriptions(self.root_path, ignore=IGNORE_FOLDERS, files=files, add_descriptions=False)\n        return build_directory_tree(self.root_path, ignore=IGNORE_FOLDERS)","documentation":"This code defines a function called `get_directory_tree` that returns a dictionary representing the directory tree of a project. The function takes an optional argument `with_descriptions` to include file descriptions in the output."}},{"key":"scip-python python temp indexer `pilot.helpers.project`/Project#get_test_directory_tree().","attributes":{"range":[175,4,183,85],"symbol":"scip-python python temp indexer `pilot.helpers.project`/Project#get_test_directory_tree().","content":"def get_test_directory_tree(self):\n        \"\"\"\n        Get the directory tree of the tests.\n\n        Returns:\n            dict: The directory tree of tests.\n        \"\"\"\n        # TODO remove hardcoded path\n        return build_directory_tree(self.root_path + '/tests', ignore=IGNORE_FOLDERS)","file":"/pilot/helpers/Project.py","language":"python","fileHash":"4d8215b25fa6dfe61adc429af601243ce7ae701549bb568ae1e5b9dd3ba7bac8","hash":"34fff72271265ce02b89550e7f681eeab113953e7421bc63ef1205afe4cd4117","processedContent":"def get_test_directory_tree(self):\n        \"\"\"\n        Get the directory tree of the tests.\n\n        Returns:\n            dict: The directory tree of tests.\n        \"\"\"\n        # TODO remove hardcoded path\n        return build_directory_tree(self.root_path + '/tests', ignore=IGNORE_FOLDERS)","documentation":"This code defines a function called `get_test_directory_tree` that returns a dictionary representing the directory tree of tests. It does this by calling the `build_directory_tree` function with the root path of the tests and a list of folders to ignore."}},{"key":"scip-python python temp indexer `pilot.helpers.project`/Project#get_all_coded_files().","attributes":{"range":[185,4,209,20],"symbol":"scip-python python temp indexer `pilot.helpers.project`/Project#get_all_coded_files().","content":"def get_all_coded_files(self):\n        \"\"\"\n        Get all coded files in the project.\n\n        Returns:\n            list: A list of coded files.\n        \"\"\"\n        files = File.select().where(File.app_id == self.args['app_id'])\n\n        # TODO temoprary fix to eliminate files that are not in the project\n        files = [file for file in files if len(FileSnapshot.select().where(FileSnapshot.file_id == file.id)) > 0]\n        # TODO END\n\n        files = self.get_files([file.path + '/' + file.name for file in files])\n\n        # Don't send contents of binary files\n        for file in files:\n            if not isinstance(file[\"content\"], str):\n                file[\"content\"] = f\"<<binary file, {len(file['content'])} bytes>>\"\n\n        # TODO temoprary fix to eliminate files that are not in the project\n        files = [file for file in files if file['content'] != '']\n        # TODO END\n\n        return files","file":"/pilot/helpers/Project.py","language":"python","fileHash":"4d8215b25fa6dfe61adc429af601243ce7ae701549bb568ae1e5b9dd3ba7bac8","hash":"a5bc4b412923f2ae69c88979f1d9df8024f0cd381c6a2d6efd79da05d863204a","processedContent":"def get_all_coded_files(self):\n        \"\"\"\n        Get all coded files in the project.\n\n        Returns:\n            list: A list of coded files.\n        \"\"\"\n        files = File.select().where(File.app_id == self.args['app_id'])\n        \"\"\"\n        scip-python python temp indexer `pilot.database.models.files`/File#: This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n        scip-python python temp indexer `pilot.database.models.files`/File#: This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n        scip-python python temp indexer `pilot.helpers.project`/Project#args.: undefined\n        \"\"\"\n\n        # TODO temoprary fix to eliminate files that are not in the project\n        files = [file for file in files if len(FileSnapshot.select().where(FileSnapshot.file_id == file.id)) > 0]\n        \"\"\"\n        scip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#: This code defines a model for a file snapshot entity in a database, with fields for an ID, creation and update timestamps, and foreign keys to other entities such as apps, development steps, and files. It also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\n        scip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#: This code defines a model for a file snapshot entity in a database, with fields for an ID, creation and update timestamps, and foreign keys to other entities such as apps, development steps, and files. It also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\n        \"\"\"\n        # TODO END\n\n        files = self.get_files([file.path + '/' + file.name for file in files]) #This code defines a function called `get_files` that takes a list of file paths as an argument and returns a list of files with their contents. It first tries to read the file using UTF-8 encoding, but if that fails, it treats the file as a binary file.\n\n        # Don't send contents of binary files\n        for file in files:\n            if not isinstance(file[\"content\"], str):\n                file[\"content\"] = f\"<<binary file, {len(file['content'])} bytes>>\"\n\n        # TODO temoprary fix to eliminate files that are not in the project\n        files = [file for file in files if file['content'] != '']\n        # TODO END\n\n        return files","documentation":"This code defines a function called `get_all_coded_files` that retrieves all files in a project and returns them as a list of dictionaries, each containing the file's path, contents, and other metadata."}},{"key":"scip-python python temp indexer `pilot.helpers.project`/Project#get_files().","attributes":{"range":[211,4,231,33],"symbol":"scip-python python temp indexer `pilot.helpers.project`/Project#get_files().","content":"def get_files(self, files):\n        \"\"\"\n        Get file contents.\n\n        Args:\n            files (list): List of file paths.\n\n        Returns:\n            list: A list of files with content.\n        \"\"\"\n        files_with_content = []\n        for file_path in files:\n            try:\n                # TODO path is sometimes relative and sometimes absolute - fix at one point\n                _, full_path = self.get_full_file_path(file_path, file_path)\n                file_data = get_file_contents(full_path, self.root_path)\n            except ValueError:\n                file_data = {\"path\": file_path, \"content\": ''}\n\n            files_with_content.append(file_data)\n        return files_with_content","file":"/pilot/helpers/Project.py","language":"python","fileHash":"4d8215b25fa6dfe61adc429af601243ce7ae701549bb568ae1e5b9dd3ba7bac8","hash":"42c7792a3887d9241dc0d77cc4180c67a262406eeae035365b3554f5d758c9f1","processedContent":"def get_files(self, files):\n        \"\"\"\n        Get file contents.\n\n        Args:\n            files (list): List of file paths.\n\n        Returns:\n            list: A list of files with content.\n        \"\"\"\n        files_with_content = []\n        for file_path in files:\n            try:\n                # TODO path is sometimes relative and sometimes absolute - fix at one point\n                _, full_path = self.get_full_file_path(file_path, file_path) #This code takes two arguments, a file path and a file name, and combines them into a full file path while considering the directory structure. It also normalizes the path by removing unnecessary components and ensuring that the final component has a file extension.\n                file_data = get_file_contents(full_path, self.root_path)\n                \"\"\"\n                scip-python python temp indexer `pilot.helpers.files`/get_file_contents().: This code defines a function called `get_file_contents` that takes two parameters: `path` and `project_root_path`. It returns an object with four keys: `name`, `path`, `content`, and `full_path`. The function first tries to read the file using UTF-8 encoding, but if that fails, it treats the file as a binary file. It then returns the file name, relative path, content (as a string or bytes object), and full path as values in the object.\n                scip-python python temp indexer `pilot.helpers.project`/Project#root_path.: undefined\n                \"\"\"\n            except ValueError:\n                file_data = {\"path\": file_path, \"content\": ''}\n\n            files_with_content.append(file_data)\n        return files_with_content","documentation":"This code defines a function called `get_files` that takes a list of file paths as an argument and returns a list of files with their contents. It first tries to read the file using UTF-8 encoding, but if that fails, it treats the file as a binary file."}},{"key":"scip-python python temp indexer `pilot.helpers.project`/Project#find_input_required_lines().","attributes":{"range":[233,4,248,40],"symbol":"scip-python python temp indexer `pilot.helpers.project`/Project#find_input_required_lines().","content":"def find_input_required_lines(self, file_content):\n        \"\"\"\n        Parses the provided string (representing file content) and returns a list of tuples containing\n        the line number and line content for lines that contain the text 'INPUT_REQUIRED'.\n\n        :param file_content: The string content of the file.\n        :return: A list of tuples (line number, line content).\n        \"\"\"\n        lines_with_input_required = []\n        lines = file_content.split('\\n')\n\n        for line_number, line in enumerate(lines, start=1):\n            if 'INPUT_REQUIRED' in line:\n                lines_with_input_required.append((line_number, line.strip()))\n\n        return lines_with_input_required","file":"/pilot/helpers/Project.py","language":"python","fileHash":"4d8215b25fa6dfe61adc429af601243ce7ae701549bb568ae1e5b9dd3ba7bac8","hash":"14adb20aefe5304843768b9ec1033743958e376ff3bdc4d639837297d0114810","processedContent":"def find_input_required_lines(self, file_content):\n        \"\"\"\n        Parses the provided string (representing file content) and returns a list of tuples containing\n        the line number and line content for lines that contain the text 'INPUT_REQUIRED'.\n\n        :param file_content: The string content of the file.\n        :return: A list of tuples (line number, line content).\n        \"\"\"\n        lines_with_input_required = []\n        lines = file_content.split('\\n')\n\n        for line_number, line in enumerate(lines, start=1):\n            if 'INPUT_REQUIRED' in line:\n                lines_with_input_required.append((line_number, line.strip()))\n\n        return lines_with_input_required","documentation":"This code defines a function that takes a string representing file content and returns a list of tuples containing the line number and line content for lines that contain the text \"INPUT_REQUIRED\"."}},{"key":"scip-python python temp indexer `pilot.helpers.project`/Project#save_file().","attributes":{"range":[250,4,285,21],"symbol":"scip-python python temp indexer `pilot.helpers.project`/Project#save_file().","content":"def save_file(self, data):\n        \"\"\"\n        Save a file.\n\n        Args:\n            data: { name: 'hello.py', path: 'path/to/hello.py', content: 'print(\"Hello!\")' }\n        \"\"\"\n\n        name = data['name'] if 'name' in data and data['name'] != '' else os.path.basename(data['path'])\n        path = data['path'] if 'path' in data else name\n\n        path, full_path = self.get_full_file_path(path, name)\n        update_file(full_path, data['content'])\n        if full_path not in self.files:\n            self.files.append(full_path)\n\n        (File.insert(app=self.app, path=path, name=name, full_path=full_path)\n         .on_conflict(\n            conflict_target=[File.app, File.name, File.path],\n            preserve=[],\n            update={'name': name, 'path': path, 'full_path': full_path})\n         .execute())\n\n        if not self.skip_steps:\n            inputs_required = self.find_input_required_lines(data['content'])\n            for line_number, line_content in inputs_required:\n                user_input = None\n                print(color_yellow_bold(f'Input required on line {line_number}:\\n{line_content}') + '\\n')\n                while user_input is None or user_input.lower() not in AFFIRMATIVE_ANSWERS + ['continue']:\n                    print({'path': full_path, 'line': line_number}, type='openFile')\n                    print('continue', type='button')\n                    user_input = styled_text(\n                        self,\n                        f'Please open the file {data[\"path\"]} on the line {line_number} and add the required input. Once you\\'re done, type \"y\" to continue.',\n                        ignore_user_input_count=True\n                    )","file":"/pilot/helpers/Project.py","language":"python","fileHash":"4d8215b25fa6dfe61adc429af601243ce7ae701549bb568ae1e5b9dd3ba7bac8","hash":"8cfd4aacfe3c4159a8dfdfcedeea28e8f010886309f887144f0683bcd704aa3c","processedContent":"def save_file(self, data):\n        \"\"\"\n        Save a file.\n\n        Args:\n            data: { name: 'hello.py', path: 'path/to/hello.py', content: 'print(\"Hello!\")' }\n        \"\"\"\n\n        name = data['name'] if 'name' in data and data['name'] != '' else os.path.basename(data['path'])\n        \"\"\"\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/path.: undefined\n        scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n        \"\"\"\n        path = data['path'] if 'path' in data else name\n\n        path, full_path = self.get_full_file_path(path, name) #This code takes two arguments, a file path and a file name, and combines them into a full file path while considering the directory structure. It also normalizes the path by removing unnecessary components and ensuring that the final component has a file extension.\n        update_file(full_path, data['content']) #This code updates a file with new content. It creates any necessary intermediate directories, writes the file using UTF-8 encoding if it's text, and prints a success message.\n        if full_path not in self.files: #undefined\n            self.files.append(full_path) #undefined\n\n        (File.insert(app=self.app, path=path, name=name, full_path=full_path) #This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n         .on_conflict(\n            conflict_target=[File.app, File.name, File.path],\n            \"\"\"\n            scip-python python temp indexer `pilot.database.models.files`/File#: This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n            scip-python python temp indexer `pilot.database.models.files`/File#: This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n            scip-python python temp indexer `pilot.database.models.files`/File#: This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n            scip-python python temp indexer `pilot.database.models.files`/File#app.: undefined\n            scip-python python temp indexer `pilot.database.models.files`/File#name.: undefined\n            scip-python python temp indexer `pilot.database.models.files`/File#path.: undefined\n            \"\"\"\n            preserve=[],\n            update={'name': name, 'path': path, 'full_path': full_path})\n         .execute())\n\n        if not self.skip_steps: #undefined\n            inputs_required = self.find_input_required_lines(data['content']) #This code defines a function that takes a string representing file content and returns a list of tuples containing the line number and line content for lines that contain the text \"INPUT_REQUIRED\".\n            for line_number, line_content in inputs_required:\n                user_input = None\n                print(color_yellow_bold(f'Input required on line {line_number}:\\n{line_content}') + '\\n') #undefined\n                while user_input is None or user_input.lower() not in AFFIRMATIVE_ANSWERS + ['continue']: #undefined\n                    print({'path': full_path, 'line': line_number}, type='openFile')\n                    print('continue', type='button')\n                    user_input = styled_text( #This code defines a function called `styled_text` that retrieves user input from a database, styles the question, and saves the response to the database.\n                        self,\n                        f'Please open the file {data[\"path\"]} on the line {line_number} and add the required input. Once you\\'re done, type \"y\" to continue.',\n                        ignore_user_input_count=True\n                    )","documentation":"The code defines a function called `save_file` that takes a dictionary of file data as an argument. It creates a new file with the given name and content, and updates the file's path if necessary. The function also retrieves user input for any lines that contain the text \"INPUT_REQUIRED\" and saves it to the database."}},{"key":"scip-python python temp indexer `pilot.helpers.project`/Project#get_full_file_path().","attributes":{"range":[287,4,380,51],"symbol":"scip-python python temp indexer `pilot.helpers.project`/Project#get_full_file_path().","content":"def get_full_file_path(self, file_path: str, file_name: str) -> Tuple[str, str]:\n        \"\"\"\n        Combine file path and name into a full file path.\n\n        :param file_path: File path.\n        :param file_name: File name.\n        :return: (file_path, absolute_path) pair.\n\n        Tries to combine the two in a way that makes most sense, even if the given path\n        have some shared components.\n        \"\"\"\n        def normalize_path(path: str) -> Tuple[str, str]:\n            \"\"\"\n            Normalizes a path (see rules in comments) and returns (directory, basename) pair.\n\n            :param path: Path to normalize.\n            :return: (directory, basename) pair.\n\n            Directory component may be empty if the path is considered to be a\n            file name. Basename component may be empty if the path is considered\n            to be a directory name.\n            \"\"\"\n\n            # Normalize path to use os-specific separator (as GPT may output paths\n            # with / even if we're on Windows)\n            path = str(Path(path))\n\n            # If a path references user's home directory (~), we only care about\n            # the relative part within it (assume ~ is meant to be the project path).\n            # Examples:\n            # - /Users/zvonimirsabljic/Development/~/pilot/server.js -> /pilot/server.js\n            # - ~/pilot/server.js -> /pilot/server.js\n            if \"~\" in path:\n                path = path.split(\"~\")[-1]\n\n            # If the path explicitly references the current directory, remove it so we\n            # can nicely use it for joins later.\n            if path == \".\" or path.startswith(f\".{os.path.sep}\"):\n                path = path[1:]\n\n            # If the path is absolute, we only care about the relative part within\n            # the project directory (assume the project directory is the root).\n            # Examples:\n            # - /Users/zvonimirsabljic/Development/copilot/pilot/server.js -> /pilot/server.js\n            # - /pilot/server.js -> /pilot/server.js\n            # - C:\\Users\\zvonimirsabljic\\Development\\copilot\\pilot\\server.js -> \\pilot\\server.js\n            path = path.replace(self.root_path, '')\n\n            # If the final component of the path doesn't have a file extension,\n            # assume it's a directory and add a final (back)slash.\n            # Examples:\n            # - /pilot/server.js -> /pilot/server.js\n            # - /pilot -> /pilot/\n            # - \\pilot\\server.js -> \\pilot\\server.js\n            # - \\pilot -> \\pilot\\\n            base = os.path.basename(path)\n            if base and \".\" not in base:\n                path += os.path.sep\n\n            # In case we're in Windows and dealing with full paths, remove the drive letter.\n            _, path = os.path.splitdrive(path)\n\n            # We want all paths to start with / (or \\\\ in Windows)\n            if not path.startswith(os.path.sep):\n                path = os.path.sep + path\n\n            return os.path.split(path)\n\n        head_path, tail_path = normalize_path(file_path)\n        head_name, tail_name = normalize_path(file_name)\n\n        # Prefer directory path from the first argument (file_path), and\n        # prefer the file name from the second argument (file_name).\n        final_file_path = head_path if head_path != '' else head_name\n        final_file_name = tail_name if tail_name != '' else tail_path\n\n        # If the directory is contained in the second argument (file_name),\n        # use that (as it might include additional subdirectories).\n        if head_path in head_name:\n            final_file_path = head_name\n\n        # Try to combine the directory and file name from the two arguments\n        # in the way that makes the most sensible output.\n        if final_file_path != head_name and head_name not in head_path:\n            if '.' in tail_path:\n                final_file_path = head_name + head_path\n            else:\n                final_file_path = head_path + head_name\n\n        if final_file_path == '':\n            final_file_path = os.path.sep\n\n        final_absolute_path = os.path.join(self.root_path, final_file_path[1:], final_file_name)\n        return final_file_path, final_absolute_path","file":"/pilot/helpers/Project.py","language":"python","fileHash":"4d8215b25fa6dfe61adc429af601243ce7ae701549bb568ae1e5b9dd3ba7bac8","hash":"b641650bd0dab82737142b536a0a89e0db27a5bb4c5f966b082f301c422215d0","processedContent":"def get_full_file_path(self, file_path: str, file_name: str) -> Tuple[str, str]:\n        \"\"\"\n        Combine file path and name into a full file path.\n\n        :param file_path: File path.\n        :param file_name: File name.\n        :return: (file_path, absolute_path) pair.\n\n        Tries to combine the two in a way that makes most sense, even if the given path\n        have some shared components.\n        \"\"\"\n        def normalize_path(path: str) -> Tuple[str, str]:\n            \"\"\"This code normalizes a path by removing unnecessary components and ensuring that the final component has a file extension. It also adds a final slash if necessary to indicate that it's a directory.\"\"\"\n            pass\n\n        head_path, tail_path = normalize_path(file_path) #This code normalizes a path by removing unnecessary components and ensuring that the final component has a file extension. It also adds a final slash if necessary to indicate that it's a directory.\n        head_name, tail_name = normalize_path(file_name) #This code normalizes a path by removing unnecessary components and ensuring that the final component has a file extension. It also adds a final slash if necessary to indicate that it's a directory.\n\n        # Prefer directory path from the first argument (file_path), and\n        # prefer the file name from the second argument (file_name).\n        final_file_path = head_path if head_path != '' else head_name\n        final_file_name = tail_name if tail_name != '' else tail_path\n\n        # If the directory is contained in the second argument (file_name),\n        # use that (as it might include additional subdirectories).\n        if head_path in head_name:\n            final_file_path = head_name\n\n        # Try to combine the directory and file name from the two arguments\n        # in the way that makes the most sensible output.\n        if final_file_path != head_name and head_name not in head_path:\n            if '.' in tail_path:\n                final_file_path = head_name + head_path\n            else:\n                final_file_path = head_path + head_name\n\n        if final_file_path == '':\n            final_file_path = os.path.sep\n            \"\"\"\n            scip-python python python-stdlib 3.11 os/__init__:: undefined\n            scip-python python python-stdlib 3.11 os/path.: undefined\n            scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n            \"\"\"\n\n        final_absolute_path = os.path.join(self.root_path, final_file_path[1:], final_file_name)\n        \"\"\"\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/path.: undefined\n        scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n        scip-python python temp indexer `pilot.helpers.project`/Project#root_path.: undefined\n        \"\"\"\n        return final_file_path, final_absolute_path","documentation":"This code takes two arguments, a file path and a file name, and combines them into a full file path while considering the directory structure. It also normalizes the path by removing unnecessary components and ensuring that the final component has a file extension."}},{"key":"scip-python python temp indexer `pilot.helpers.project`/Project#normalize_path().","attributes":{"range":[298,8,353,38],"symbol":"scip-python python temp indexer `pilot.helpers.project`/Project#normalize_path().","content":"def normalize_path(path: str) -> Tuple[str, str]:\n            \"\"\"\n            Normalizes a path (see rules in comments) and returns (directory, basename) pair.\n\n            :param path: Path to normalize.\n            :return: (directory, basename) pair.\n\n            Directory component may be empty if the path is considered to be a\n            file name. Basename component may be empty if the path is considered\n            to be a directory name.\n            \"\"\"\n\n            # Normalize path to use os-specific separator (as GPT may output paths\n            # with / even if we're on Windows)\n            path = str(Path(path))\n\n            # If a path references user's home directory (~), we only care about\n            # the relative part within it (assume ~ is meant to be the project path).\n            # Examples:\n            # - /Users/zvonimirsabljic/Development/~/pilot/server.js -> /pilot/server.js\n            # - ~/pilot/server.js -> /pilot/server.js\n            if \"~\" in path:\n                path = path.split(\"~\")[-1]\n\n            # If the path explicitly references the current directory, remove it so we\n            # can nicely use it for joins later.\n            if path == \".\" or path.startswith(f\".{os.path.sep}\"):\n                path = path[1:]\n\n            # If the path is absolute, we only care about the relative part within\n            # the project directory (assume the project directory is the root).\n            # Examples:\n            # - /Users/zvonimirsabljic/Development/copilot/pilot/server.js -> /pilot/server.js\n            # - /pilot/server.js -> /pilot/server.js\n            # - C:\\Users\\zvonimirsabljic\\Development\\copilot\\pilot\\server.js -> \\pilot\\server.js\n            path = path.replace(self.root_path, '')\n\n            # If the final component of the path doesn't have a file extension,\n            # assume it's a directory and add a final (back)slash.\n            # Examples:\n            # - /pilot/server.js -> /pilot/server.js\n            # - /pilot -> /pilot/\n            # - \\pilot\\server.js -> \\pilot\\server.js\n            # - \\pilot -> \\pilot\\\n            base = os.path.basename(path)\n            if base and \".\" not in base:\n                path += os.path.sep\n\n            # In case we're in Windows and dealing with full paths, remove the drive letter.\n            _, path = os.path.splitdrive(path)\n\n            # We want all paths to start with / (or \\\\ in Windows)\n            if not path.startswith(os.path.sep):\n                path = os.path.sep + path\n\n            return os.path.split(path)","file":"/pilot/helpers/Project.py","language":"python","fileHash":"4d8215b25fa6dfe61adc429af601243ce7ae701549bb568ae1e5b9dd3ba7bac8","hash":"fc0444918306e78aa809c0fa7a58aea84bc1f866abee4fb798fac0ed80c639c6","processedContent":"def normalize_path(path: str) -> Tuple[str, str]:\n            \"\"\"\n            Normalizes a path (see rules in comments) and returns (directory, basename) pair.\n\n            :param path: Path to normalize.\n            :return: (directory, basename) pair.\n\n            Directory component may be empty if the path is considered to be a\n            file name. Basename component may be empty if the path is considered\n            to be a directory name.\n            \"\"\"\n\n            # Normalize path to use os-specific separator (as GPT may output paths\n            # with / even if we're on Windows)\n            path = str(Path(path)) #undefined\n\n            # If a path references user's home directory (~), we only care about\n            # the relative part within it (assume ~ is meant to be the project path).\n            # Examples:\n            # - /Users/zvonimirsabljic/Development/~/pilot/server.js -> /pilot/server.js\n            # - ~/pilot/server.js -> /pilot/server.js\n            if \"~\" in path:\n                path = path.split(\"~\")[-1]\n\n            # If the path explicitly references the current directory, remove it so we\n            # can nicely use it for joins later.\n            if path == \".\" or path.startswith(f\".{os.path.sep}\"):\n            \"\"\"\n            scip-python python python-stdlib 3.11 os/__init__:: undefined\n            scip-python python python-stdlib 3.11 os/path.: undefined\n            scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n            \"\"\"\n                path = path[1:]\n\n            # If the path is absolute, we only care about the relative part within\n            # the project directory (assume the project directory is the root).\n            # Examples:\n            # - /Users/zvonimirsabljic/Development/copilot/pilot/server.js -> /pilot/server.js\n            # - /pilot/server.js -> /pilot/server.js\n            # - C:\\Users\\zvonimirsabljic\\Development\\copilot\\pilot\\server.js -> \\pilot\\server.js\n            path = path.replace(self.root_path, '') #undefined\n\n            # If the final component of the path doesn't have a file extension,\n            # assume it's a directory and add a final (back)slash.\n            # Examples:\n            # - /pilot/server.js -> /pilot/server.js\n            # - /pilot -> /pilot/\n            # - \\pilot\\server.js -> \\pilot\\server.js\n            # - \\pilot -> \\pilot\\\n            base = os.path.basename(path)\n            \"\"\"\n            scip-python python python-stdlib 3.11 os/__init__:: undefined\n            scip-python python python-stdlib 3.11 os/path.: undefined\n            scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n            \"\"\"\n            if base and \".\" not in base:\n                path += os.path.sep\n                \"\"\"\n                scip-python python python-stdlib 3.11 os/__init__:: undefined\n                scip-python python python-stdlib 3.11 os/path.: undefined\n                scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n                \"\"\"\n\n            # In case we're in Windows and dealing with full paths, remove the drive letter.\n            _, path = os.path.splitdrive(path)\n            \"\"\"\n            scip-python python python-stdlib 3.11 os/__init__:: undefined\n            scip-python python python-stdlib 3.11 os/path.: undefined\n            scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n            \"\"\"\n\n            # We want all paths to start with / (or \\\\ in Windows)\n            if not path.startswith(os.path.sep):\n            \"\"\"\n            scip-python python python-stdlib 3.11 os/__init__:: undefined\n            scip-python python python-stdlib 3.11 os/path.: undefined\n            scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n            \"\"\"\n                path = os.path.sep + path\n                \"\"\"\n                scip-python python python-stdlib 3.11 os/__init__:: undefined\n                scip-python python python-stdlib 3.11 os/path.: undefined\n                scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n                \"\"\"\n\n            return os.path.split(path)","documentation":"This code normalizes a path by removing unnecessary components and ensuring that the final component has a file extension. It also adds a final slash if necessary to indicate that it's a directory."}},{"key":"scip-python python temp indexer `pilot.helpers.project`/Project#save_files_snapshot().","attributes":{"range":[383,4,404,32],"symbol":"scip-python python temp indexer `pilot.helpers.project`/Project#save_files_snapshot().","content":"def save_files_snapshot(self, development_step_id):\n        files = get_directory_contents(self.root_path, ignore=IGNORE_FOLDERS)\n        development_step, created = DevelopmentSteps.get_or_create(id=development_step_id)\n\n        for file in files:\n            print(color_cyan(f'Saving file {file[\"full_path\"]}'))\n            # TODO this can be optimized so we don't go to the db each time\n            file_in_db, created = File.get_or_create(\n                app=self.app,\n                name=file['name'],\n                path=file['path'],\n                full_path=file['full_path'],\n            )\n\n            file_snapshot, created = FileSnapshot.get_or_create(\n                app=self.app,\n                development_step=development_step,\n                file=file_in_db,\n                defaults={'content': file.get('content', '')}\n            )\n            file_snapshot.content = file['content']\n            file_snapshot.save()","file":"/pilot/helpers/Project.py","language":"python","fileHash":"4d8215b25fa6dfe61adc429af601243ce7ae701549bb568ae1e5b9dd3ba7bac8","hash":"8a061f3668a17d6038fe3806be0d80604e190ce6719f9561b37f9912a0226eb6","processedContent":"def save_files_snapshot(self, development_step_id):\n        files = get_directory_contents(self.root_path, ignore=IGNORE_FOLDERS)\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.files`/get_directory_contents().: This code defines a function called `get_directory_contents` that takes two parameters: `directory` and `ignore`. It returns a list of file objects as returned by `get_file_contents`, which includes the file name, relative path, content (as a string or bytes object), and full path. The function uses `os.walk()` to traverse the directory and its subdirectories, and it ignores files or folders in the `ignore` list.\n        scip-python python temp indexer `pilot.helpers.project`/Project#root_path.: undefined\n        scip-python python temp indexer `pilot.const.common`/IGNORE_FOLDERS.: undefined\n        \"\"\"\n        development_step, created = DevelopmentSteps.get_or_create(id=development_step_id) #This code defines a model for the development steps table in the database. It includes fields for an ID, creation and update timestamps, and a foreign key to the app entity. The model also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\n\n        for file in files:\n            print(color_cyan(f'Saving file {file[\"full_path\"]}')) #undefined\n            # TODO this can be optimized so we don't go to the db each time\n            file_in_db, created = File.get_or_create( #This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n                app=self.app,\n                name=file['name'],\n                path=file['path'],\n                full_path=file['full_path'],\n            )\n\n            file_snapshot, created = FileSnapshot.get_or_create( #This code defines a model for a file snapshot entity in a database, with fields for an ID, creation and update timestamps, and foreign keys to other entities such as apps, development steps, and files. It also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\n                app=self.app,\n                development_step=development_step,\n                file=file_in_db,\n                defaults={'content': file.get('content', '')}\n            )\n            file_snapshot.content = file['content']\n            file_snapshot.save()","documentation":"The code defines a function called `save_files_snapshot` that saves the contents of files in a directory to a database. It also creates a development step entity in the database and saves file snapshots for each file in the directory."}},{"key":"scip-python python temp indexer `pilot.helpers.project`/Project#restore_files().","attributes":{"range":[406,4,414,63],"symbol":"scip-python python temp indexer `pilot.helpers.project`/Project#restore_files().","content":"def restore_files(self, development_step_id):\n        development_step = DevelopmentSteps.get(DevelopmentSteps.id == development_step_id)\n        file_snapshots = FileSnapshot.select().where(FileSnapshot.development_step == development_step)\n\n        clear_directory(self.root_path, IGNORE_FOLDERS + self.files)\n        for file_snapshot in file_snapshots:\n            update_file(file_snapshot.file.full_path, file_snapshot.content)\n            if file_snapshot.file.full_path not in self.files:\n                self.files.append(file_snapshot.file.full_path)","file":"/pilot/helpers/Project.py","language":"python","fileHash":"4d8215b25fa6dfe61adc429af601243ce7ae701549bb568ae1e5b9dd3ba7bac8","hash":"d24027e9ea6fd0b6efba171e5911a54735301295e7e7b9127382b2d20b669588","processedContent":"def restore_files(self, development_step_id):\n        development_step = DevelopmentSteps.get(DevelopmentSteps.id == development_step_id)\n        \"\"\"\n        scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#: This code defines a model for the development steps table in the database. It includes fields for an ID, creation and update timestamps, and a foreign key to the app entity. The model also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\n        scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#: This code defines a model for the development steps table in the database. It includes fields for an ID, creation and update timestamps, and a foreign key to the app entity. The model also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\n        scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#id.: undefined\n        \"\"\"\n        file_snapshots = FileSnapshot.select().where(FileSnapshot.development_step == development_step)\n        \"\"\"\n        scip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#: This code defines a model for a file snapshot entity in a database, with fields for an ID, creation and update timestamps, and foreign keys to other entities such as apps, development steps, and files. It also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\n        scip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#: This code defines a model for a file snapshot entity in a database, with fields for an ID, creation and update timestamps, and foreign keys to other entities such as apps, development steps, and files. It also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\n        scip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#development_step.: undefined\n        \"\"\"\n\n        clear_directory(self.root_path, IGNORE_FOLDERS + self.files)\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.files`/clear_directory().: This code defines a function called `clear_directory` that takes a directory path and an optional list of files or folders to ignore. It recursively traverses the directory and its subdirectories, deleting all files and empty subdirectories except for those in the ignore list.\n        scip-python python temp indexer `pilot.helpers.project`/Project#root_path.: undefined\n        scip-python python temp indexer `pilot.const.common`/IGNORE_FOLDERS.: undefined\n        scip-python python temp indexer `pilot.helpers.project`/Project#files.: undefined\n        \"\"\"\n        for file_snapshot in file_snapshots:\n            update_file(file_snapshot.file.full_path, file_snapshot.content) #This code updates a file with new content. It creates any necessary intermediate directories, writes the file using UTF-8 encoding if it's text, and prints a success message.\n            if file_snapshot.file.full_path not in self.files: #undefined\n                self.files.append(file_snapshot.file.full_path)","documentation":"The code defines a function called `restore_files` that takes a development step ID as an argument. It retrieves the file snapshots associated with the development step, clears the project directory of any existing files, and then updates each file snapshot's file with its content."}},{"key":"scip-python python temp indexer `pilot.helpers.project`/Project#delete_all_steps_except_current_branch().","attributes":{"range":[416,4,419,91],"symbol":"scip-python python temp indexer `pilot.helpers.project`/Project#delete_all_steps_except_current_branch().","content":"def delete_all_steps_except_current_branch(self):\n        delete_unconnected_steps_from(self.checkpoints['last_development_step'], 'previous_step')\n        delete_unconnected_steps_from(self.checkpoints['last_command_run'], 'previous_step')\n        delete_unconnected_steps_from(self.checkpoints['last_user_input'], 'previous_step')","file":"/pilot/helpers/Project.py","language":"python","fileHash":"4d8215b25fa6dfe61adc429af601243ce7ae701549bb568ae1e5b9dd3ba7bac8","hash":"802f24c3dc2e4565312d1c81c319478435b0b2cccb67c5c26db70839ca89fd70","processedContent":"def delete_all_steps_except_current_branch(self):\n        delete_unconnected_steps_from(self.checkpoints['last_development_step'], 'previous_step')\n        \"\"\"\n        scip-python python temp indexer `pilot.database.database`/delete_unconnected_steps_from().: This code retrieves all steps connected to a given step, and then deletes any unconnected steps from the database.\n        scip-python python temp indexer `pilot.helpers.project`/Project#checkpoints.: undefined\n        \"\"\"\n        delete_unconnected_steps_from(self.checkpoints['last_command_run'], 'previous_step')\n        \"\"\"\n        scip-python python temp indexer `pilot.database.database`/delete_unconnected_steps_from().: This code retrieves all steps connected to a given step, and then deletes any unconnected steps from the database.\n        scip-python python temp indexer `pilot.helpers.project`/Project#checkpoints.: undefined\n        \"\"\"\n        delete_unconnected_steps_from(self.checkpoints['last_user_input'], 'previous_step')","documentation":"This code deletes all steps in the database that are not connected to the current step, which is determined by the `last_development_step`, `last_command_run`, and `last_user_input` checkpoints."}},{"key":"scip-python python temp indexer `pilot.helpers.project`/Project#ask_for_human_intervention().","attributes":{"range":[421,4,446,27],"symbol":"scip-python python temp indexer `pilot.helpers.project`/Project#ask_for_human_intervention().","content":"def ask_for_human_intervention(self, message, description=None, cbs={}, convo=None, is_root_task=False):\n        answer = ''\n        question = color_yellow_bold(message)\n\n        if description is not None:\n            question += '\\n' + '-' * 100 + '\\n' + color_white_bold(description) + '\\n' + '-' * 100 + '\\n'\n\n        reset_branch_id = None if convo is None else convo.save_branch()\n\n        while answer.lower() != 'continue':\n            print('continue', type='button')\n            answer = ask_user(self, CHECK_AND_CONTINUE,\n                              require_some_input=False,\n                              hint=question)\n\n            try:\n                if answer.lower() in cbs:\n                    return cbs[answer.lower()](convo)\n                elif answer != '':\n                    return {'user_input': answer}\n            except TokenLimitError as e:\n                if is_root_task and answer.lower() not in cbs and answer != '':\n                    convo.load_branch(reset_branch_id)\n                    return {'user_input': answer}\n                else:\n                    raise e","file":"/pilot/helpers/Project.py","language":"python","fileHash":"4d8215b25fa6dfe61adc429af601243ce7ae701549bb568ae1e5b9dd3ba7bac8","hash":"5bb5e8e007049fc21ef75849987e49f23a9c7c6ed0d13dd422fbf1ff2340a9c3","processedContent":"def ask_for_human_intervention(self, message, description=None, cbs={}, convo=None, is_root_task=False):\n        answer = ''\n        question = color_yellow_bold(message) #undefined\n\n        if description is not None:\n            question += '\\n' + '-' * 100 + '\\n' + color_white_bold(description) + '\\n' + '-' * 100 + '\\n' #undefined\n\n        reset_branch_id = None if convo is None else convo.save_branch()\n\n        while answer.lower() != 'continue':\n            print('continue', type='button')\n            answer = ask_user(self, CHECK_AND_CONTINUE,\n            \"\"\"\n            scip-python python temp indexer `pilot.prompts.prompts`/ask_user().: This code defines a function called `ask_user` that retrieves user input from a database, styles the question, and saves the response to the database. It also logs the question and answer to a logger.\n            scip-python python temp indexer `pilot.const.messages`/CHECK_AND_CONTINUE.: undefined\n            \"\"\"\n                              require_some_input=False,\n                              hint=question)\n\n            try:\n                if answer.lower() in cbs:\n                    return cbs[answer.lower()](convo)\n                elif answer != '':\n                    return {'user_input': answer}\n            except TokenLimitError as e: #This code defines a custom exception class called `TokenLimitError` that is raised when the number of tokens in a message exceeds the maximum allowed by the GPT model. The class takes two arguments: `tokens_in_messages` and `max_tokens`, which represent the number of tokens in the message and the maximum number of tokens allowed, respectively. The `__init__` method sets the instance variables and calls the parent class's constructor with a formatted error message.\n                if is_root_task and answer.lower() not in cbs and answer != '':\n                    convo.load_branch(reset_branch_id)\n                    return {'user_input': answer}\n                else:\n                    raise e","documentation":"This code defines a function called `ask_user` that retrieves user input from a database, styles the question, and saves the response to the database. It also logs the question and answer to a logger."}},{"key":"scip-python python temp indexer `pilot.helpers.project`/Project#log().","attributes":{"range":[448,4,457,56],"symbol":"scip-python python temp indexer `pilot.helpers.project`/Project#log().","content":"def log(self, text, message_type):\n        if self.ipc_client_instance is None or self.ipc_client_instance.client is None:\n            print(text)\n        else:\n            self.ipc_client_instance.send({\n                'type': MESSAGE_TYPE[message_type],\n                'content': str(text),\n            })\n            if message_type == MESSAGE_TYPE['user_input_request']:\n                return self.ipc_client_instance.listen()","file":"/pilot/helpers/Project.py","language":"python","fileHash":"4d8215b25fa6dfe61adc429af601243ce7ae701549bb568ae1e5b9dd3ba7bac8","hash":"2eac979620b0d7e2257cffa9b7eeb3d0776fc9e10e1fa8ed6f43a058ead32e34","processedContent":"def log(self, text, message_type):\n        if self.ipc_client_instance is None or self.ipc_client_instance.client is None:\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.project`/Project#ipc_client_instance.: undefined\n        scip-python python temp indexer `pilot.helpers.project`/Project#ipc_client_instance.: undefined\n        \"\"\"\n            print(text)\n        else:\n            self.ipc_client_instance.send({ #undefined\n                'type': MESSAGE_TYPE[message_type], #undefined\n                'content': str(text),\n            })\n            if message_type == MESSAGE_TYPE['user_input_request']: #undefined\n                return self.ipc_client_instance.listen()","documentation":"This code defines a function called `log` that sends a message to an IPC client instance, which is used to communicate with the user. The function takes two arguments: `text` and `message_type`. If the IPC client instance is not defined or has no client, it simply prints the text to the console. Otherwise, it sends the message to the IPC client instance and returns the result of listening for user input if the message type is `user_input_request`."}},{"key":"scip-python python python-stdlib 3.11 pathlib/__init__:","attributes":{"symbol":"scip-python python python-stdlib 3.11 pathlib/__init__:","language":"python"}},{"key":"scip-python python python-stdlib 3.11 pathlib/Path#","attributes":{"symbol":"scip-python python python-stdlib 3.11 pathlib/Path#","language":"python"}},{"key":"scip-python python python-stdlib 3.11 typing/__init__:","attributes":{"symbol":"scip-python python python-stdlib 3.11 typing/__init__:","language":"python"}},{"key":"scip-python python python-stdlib 3.11 typing/Tuple.","attributes":{"symbol":"scip-python python python-stdlib 3.11 typing/Tuple.","language":"python"}},{"key":"scip-python python temp indexer `pilot.const.messages`/CHECK_AND_CONTINUE.","attributes":{"symbol":"scip-python python temp indexer `pilot.const.messages`/CHECK_AND_CONTINUE.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.style`/color_cyan.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.style`/color_cyan.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.style`/color_white_bold.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.style`/color_white_bold.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.style`/color_green.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.style`/color_green.","language":"python"}},{"key":"scip-python python temp indexer `pilot.const.common`/IGNORE_FOLDERS.","attributes":{"symbol":"scip-python python temp indexer `pilot.const.common`/IGNORE_FOLDERS.","language":"python"}},{"key":"scip-python python temp indexer `pilot.const.ipc`/MESSAGE_TYPE.","attributes":{"symbol":"scip-python python temp indexer `pilot.const.ipc`/MESSAGE_TYPE.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.questionary`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.questionary`/__init__:","language":"python","range":[0,0,70,0],"content":"import platform\nimport questionary\nimport re\nimport sys\nfrom database.database import save_user_input, get_saved_user_input\nfrom utils.style import color_yellow_bold, style_config\n\n\ndef remove_ansi_codes(s: str) -> str:\n    ansi_escape = re.compile(r'\\x1B(?:[@-Z\\\\-_]|\\[[0-?]*[ -/]*[@-~])')\n    return ansi_escape.sub('', s)\n\n\ndef styled_select(*args, **kwargs):\n    kwargs[\"style\"] = style_config.get_style()\n    # TODO add saving and loading of user input\n    return questionary.select(*args, **kwargs).unsafe_ask()  # .ask() is included here\n\n\ndef styled_text(project, question, ignore_user_input_count=False, style=None, hint=None):\n    if not ignore_user_input_count:\n        project.user_inputs_count += 1\n        user_input = get_saved_user_input(project, question)\n        if user_input is not None and user_input.user_input is not None and project.skip_steps:\n            # if we do, use it\n            project.checkpoints['last_user_input'] = user_input\n            print(color_yellow_bold(f'Restoring user input id {user_input.id}: '), end='')\n            print(color_yellow_bold(f'{user_input.user_input}'))\n            return user_input.user_input\n\n    if project.ipc_client_instance is None or project.ipc_client_instance.client is None:\n        used_style = style if style is not None else style_config.get_style()\n        question = remove_ansi_codes(question)  # Colorama and questionary are not compatible and styling doesn't work\n        flush_input()\n        response = questionary.text(question, style=used_style).unsafe_ask()  # .ask() is included here\n    else:\n        response = print(question, type='user_input_request')\n        print(response)\n\n    if not ignore_user_input_count:\n        save_user_input(project, question, response, hint)\n\n    print('\\n\\n', end='')\n    return response\n\n\ndef get_user_feedback():\n    return questionary.text('How did GPT Pilot do? Were you able to create any app that works? '\n                            'Please write any feedback you have or just press ENTER to exit: ',\n                            style=style_config.get_style()).unsafe_ask()\n\n\ndef ask_user_to_store_init_prompt():\n    return questionary.text('We would appreciate if you let us store your initial app prompt. '\n                            'If you are OK with that, please just press ENTER',\n                            style=style_config.get_style()).unsafe_ask()\n\n\ndef flush_input():\n    \"\"\"Flush the input buffer, discarding all that's in the buffer.\"\"\"\n    try:\n        if platform.system() == 'Windows':\n            import msvcrt\n            while msvcrt.kbhit():\n                msvcrt.getch()\n        else:\n            import termios\n            termios.tcflush(sys.stdin, termios.TCIOFLUSH)\n    except (ImportError, OSError):\n        pass\n","file":"/pilot/utils/questionary.py","fileHash":"2423013aaf514ea6889adc9400c20b32a8be4a858e060672e0c3e0e52d59a081","hash":"2423013aaf514ea6889adc9400c20b32a8be4a858e060672e0c3e0e52d59a081","processedContent":"import platform #undefined\nimport questionary #undefined\nimport re #undefined\nimport sys #undefined\nfrom database.database import save_user_input, get_saved_user_input\n\"\"\"\nscip-python python temp indexer `pilot.database.database`/__init__:: undefined\nscip-python python temp indexer `pilot.database.database`/save_user_input().: This code defines a function called `save_user_input` that takes in several parameters and saves data to a database. It first checks if a record with the same data already exists, and if so, it logs a warning message. If no record exists, it creates a new one and returns it.\nscip-python python temp indexer `pilot.database.database`/get_saved_user_input().: This code retrieves a database row from a model based on three parameters: app_id, previous_step, and high_level_step.\n\"\"\"\nfrom utils.style import color_yellow_bold, style_config\n\"\"\"\nscip-python python temp indexer `pilot.utils.style`/__init__:: undefined\nscip-python python temp indexer `pilot.utils.style`/color_yellow_bold.: undefined\nscip-python python temp indexer `pilot.utils.style`/style_config.: undefined\n\"\"\"\n\n\ndef remove_ansi_codes(s: str) -> str:\n    \"\"\"This code defines a function called `remove_ansi_codes` that takes a string as input and returns the same string with all ANSI escape codes removed.\"\"\"\n    pass\n\n\ndef styled_select(*args, **kwargs):\n    \"\"\"This code defines a function called `styled_select` that retrieves the style configuration from a theme_style instance and returns it as a questionary.Style object.\"\"\"\n    pass\n\n\ndef styled_text(project, question, ignore_user_input_count=False, style=None, hint=None):\n    \"\"\"This code defines a function called `styled_text` that retrieves user input from a database, styles the question, and saves the response to the database.\"\"\"\n    pass\n\n\ndef get_user_feedback():\n    \"\"\"This code defines a function called `get_user_feedback` that uses the `questionary` library to ask the user for feedback on the performance of GPT Pilot, a language model developed by OpenAI. The function returns the user's input as a string.\"\"\"\n    pass\n\n\ndef ask_user_to_store_init_prompt():\n    \"\"\"This code prompts the user to allow the app to store their initial prompt, which is used for personalization and customization of the app's functionality.\"\"\"\n    pass\n\n\ndef flush_input():\n    \"\"\"This code is a function called \"flush_input\" that clears the input buffer, discarding all data that has been entered but not yet processed. It does this by checking the operating system and using either the Windows or Unix-specific methods to clear the input buffer.\"\"\"\n    pass\n","documentation":"The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt."}},{"key":"scip-python python temp indexer `pilot.utils.questionary`/styled_text().","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.questionary`/styled_text().","language":"python","range":[19,0,43,19],"content":"def styled_text(project, question, ignore_user_input_count=False, style=None, hint=None):\n    if not ignore_user_input_count:\n        project.user_inputs_count += 1\n        user_input = get_saved_user_input(project, question)\n        if user_input is not None and user_input.user_input is not None and project.skip_steps:\n            # if we do, use it\n            project.checkpoints['last_user_input'] = user_input\n            print(color_yellow_bold(f'Restoring user input id {user_input.id}: '), end='')\n            print(color_yellow_bold(f'{user_input.user_input}'))\n            return user_input.user_input\n\n    if project.ipc_client_instance is None or project.ipc_client_instance.client is None:\n        used_style = style if style is not None else style_config.get_style()\n        question = remove_ansi_codes(question)  # Colorama and questionary are not compatible and styling doesn't work\n        flush_input()\n        response = questionary.text(question, style=used_style).unsafe_ask()  # .ask() is included here\n    else:\n        response = print(question, type='user_input_request')\n        print(response)\n\n    if not ignore_user_input_count:\n        save_user_input(project, question, response, hint)\n\n    print('\\n\\n', end='')\n    return response","file":"/pilot/utils/questionary.py","fileHash":"2423013aaf514ea6889adc9400c20b32a8be4a858e060672e0c3e0e52d59a081","hash":"f8e06fc9665e08bae2c3994759a8ae80afcdc7fe07533903d68a099e264c5d7b","processedContent":"def styled_text(project, question, ignore_user_input_count=False, style=None, hint=None):\n    if not ignore_user_input_count:\n        project.user_inputs_count += 1\n        user_input = get_saved_user_input(project, question) #This code retrieves a database row from a model based on three parameters: app_id, previous_step, and high_level_step.\n        if user_input is not None and user_input.user_input is not None and project.skip_steps:\n            # if we do, use it\n            project.checkpoints['last_user_input'] = user_input\n            print(color_yellow_bold(f'Restoring user input id {user_input.id}: '), end='') #undefined\n            print(color_yellow_bold(f'{user_input.user_input}')) #undefined\n            return user_input.user_input\n\n    if project.ipc_client_instance is None or project.ipc_client_instance.client is None:\n        used_style = style if style is not None else style_config.get_style()\n        \"\"\"\n        scip-python python temp indexer `pilot.utils.style`/style_config.: undefined\n        scip-python python temp indexer `pilot.utils.style`/StyleConfig#get_style().: This code retrieves the Style configuration from a theme_style instance and returns it as a questionary.Style object.\n        \"\"\"\n        question = remove_ansi_codes(question)  # Colorama and questionary are not compatible and styling doesn't work #This code defines a function called `remove_ansi_codes` that takes a string as input and returns the same string with all ANSI escape codes removed.\n        flush_input() #This code is a function called \"flush_input\" that clears the input buffer, discarding all data that has been entered but not yet processed. It does this by checking the operating system and using either the Windows or Unix-specific methods to clear the input buffer.\n        response = questionary.text(question, style=used_style).unsafe_ask()  # .ask() is included here #undefined\n    else:\n        response = print(question, type='user_input_request')\n        print(response)\n\n    if not ignore_user_input_count:\n        save_user_input(project, question, response, hint) #This code defines a function called `save_user_input` that takes in several parameters and saves data to a database. It first checks if a record with the same data already exists, and if so, it logs a warning message. If no record exists, it creates a new one and returns it.\n\n    print('\\n\\n', end='')\n    return response","documentation":"This code defines a function called `styled_text` that retrieves user input from a database, styles the question, and saves the response to the database."}},{"key":"scip-python python temp indexer `pilot.helpers.files`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.files`/__init__:","language":"python","range":[0,0,134,0],"content":"from pathlib import Path\nimport os\nfrom typing import Optional, Union\n\nfrom utils.style import color_green\n\n\ndef update_file(path: str, new_content: Union[str, bytes]):\n    \"\"\"\n    Update file with the new content.\n\n    :param path: Full path to the file\n    :param new_content: New content to write to the file\n\n    Any intermediate directories will be created if they don't exist.\n    If file is text, it will be written using UTF-8 encoding.\n    \"\"\"\n    # TODO: we should know where project root is and ensure no\n    # files are written outside of it.\n    os.makedirs(os.path.dirname(path), exist_ok=True)\n\n    if isinstance(new_content, str):\n        file_mode = \"w\"\n        encoding = \"utf-8\"\n    else:\n        file_mode = \"wb\"\n        encoding = None\n\n    with open(path, file_mode, encoding=encoding) as file:\n        file.write(new_content)\n        print({'path': path, 'line': None}, type='openFile')\n        print(color_green(f\"Updated file {path}\"))\n\n\ndef get_file_contents(\n    path: str, project_root_path: str\n) -> dict[str, Union[str, bytes]]:\n    \"\"\"\n    Get file content and metadata.\n\n    :param path: Full path to the file\n    :param project_root_path: Full path to the project root directory\n    :return: Object with the following keys:\n        - name: File name\n        - path: Relative path to the file\n        - content: File content (str or bytes)\n        - full_path: Full path to the file\n\n    If file is text, it will be read using UTF-8 encoding and `content`\n    will be a Python string. If that fails, it will be treated as a\n    binary file and `content` will be a Python bytes object.\n    \"\"\"\n    try:\n        # Assume it's a text file using UTF-8 encoding\n        file_content = open(path, \"r\", encoding=\"utf-8\").read()\n    except UnicodeDecodeError:\n        # If that fails, we'll treat it as a binary file\n        file_content = open(path, \"rb\").read()\n    except FileNotFoundError:\n        raise ValueError(f\"File not found: {path}\")\n\n    file_name = os.path.basename(path)\n    relative_path = str(Path(path).parent.relative_to(project_root_path))\n\n    if relative_path == \".\":\n        relative_path = \"\"\n\n    return {\n        \"name\": file_name,\n        \"path\": relative_path,\n        \"content\": file_content,\n        \"full_path\": path,\n    }\n\n\ndef get_directory_contents(\n    directory: str, ignore: Optional[list[str]] = None\n) -> list[dict[str, Union[str, bytes]]]:\n    \"\"\"\n    Get the content of all files in the given directory.\n\n    :param directory: Full path to the directory to search\n    :param ignore: List of files or folders to ignore (optional)\n    :return: List of file objects as returned by `get_file_contents`\n\n    See `get_file_contents()` for the details on the output structure\n    and how files are read.\n    \"\"\"\n    return_array = []\n\n    if ignore is None:\n        ignore = []\n\n    # TODO: Convert to use pathlib.Path.walk()\n    for dpath, dirs, files in os.walk(directory):\n        # In-place update of dirs so that os.walk() doesn't traverse them\n        dirs[:] = [d for d in dirs if d not in ignore]\n\n        for file in files:\n            if file in ignore:\n                continue\n\n            return_array.append(get_file_contents(os.path.join(dpath, file), directory))\n\n    return return_array\n\n\ndef clear_directory(directory: str, ignore: Optional[list[str]] = None):\n    \"\"\"\n    Delete all files and directories (except ignored ones) in the given directory.\n\n    :param dir_path: Full path to the directory to clear\n    :param ignore: List of files or folders to ignore (optional)\n    \"\"\"\n    if ignore is None:\n        ignore = []\n\n    # TODO: Convert to use pathlib.Path.walk()\n    for dpath, dirs, files in os.walk(directory, topdown=True):\n        # In-place update of dirs so that os.walk() doesn't traverse them\n        dirs[:] = [d for d in dirs if d not in ignore]\n\n        for file in files:\n            if file in ignore or os.path.join(directory, file) in ignore:\n                continue\n\n            path = os.path.join(dpath, file)\n            os.remove(path)\n\n        # Delete empty subdirectories not in ignore list\n        for d in dirs:\n            subdir_path = os.path.join(dpath, d)\n            if not os.listdir(subdir_path):\n                os.rmdir(subdir_path)\n","file":"/pilot/helpers/files.py","fileHash":"7bedb0c023a2d02f7b62c49a14b9f5ecadd767fbd452537536b7ba70cc3151ab","hash":"7bedb0c023a2d02f7b62c49a14b9f5ecadd767fbd452537536b7ba70cc3151ab","processedContent":"from pathlib import Path\n\"\"\"\nscip-python python python-stdlib 3.11 pathlib/__init__:: undefined\nscip-python python python-stdlib 3.11 pathlib/Path#: undefined\n\"\"\"\nimport os #undefined\nfrom typing import Optional, Union\n\"\"\"\nscip-python python python-stdlib 3.11 typing/__init__:: undefined\nscip-python python python-stdlib 3.11 typing/Optional.: undefined\nscip-python python python-stdlib 3.11 typing/Union.: undefined\n\"\"\"\n\nfrom utils.style import color_green\n\"\"\"\nscip-python python temp indexer `pilot.utils.style`/__init__:: This code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.utils.style`/color_green.: undefined\n\"\"\"\n\n\ndef update_file(path: str, new_content: Union[str, bytes]):\n    \"\"\"This code updates a file with new content. It creates any necessary intermediate directories, writes the file using UTF-8 encoding if it's text, and prints a success message.\"\"\"\n    pass\n\n\ndef get_file_contents(\n    \"\"\"This code defines a function called `get_file_contents` that takes two parameters: `path` and `project_root_path`. It returns an object with four keys: `name`, `path`, `content`, and `full_path`. The function first tries to read the file using UTF-8 encoding, but if that fails, it treats the file as a binary file. It then returns the file name, relative path, content (as a string or bytes object), and full path as values in the object.\"\"\"\n    pass\n\n\ndef get_directory_contents(\n    \"\"\"This code defines a function called `get_directory_contents` that takes two parameters: `directory` and `ignore`. It returns a list of file objects as returned by `get_file_contents`, which includes the file name, relative path, content (as a string or bytes object), and full path. The function uses `os.walk()` to traverse the directory and its subdirectories, and it ignores files or folders in the `ignore` list.\"\"\"\n    pass\n\n\ndef clear_directory(directory: str, ignore: Optional[list[str]] = None):\n    \"\"\"This code defines a function called `clear_directory` that takes a directory path and an optional list of files or folders to ignore. It recursively traverses the directory and its subdirectories, deleting all files and empty subdirectories except for those in the ignore list.\"\"\"\n    pass\n","documentation":"The code defines a series of functions for working with files and directories, including updating a file's content, retrieving the contents of a file or directory, and deleting files and empty subdirectories."}},{"key":"scip-python python temp indexer `pilot.helpers.files`/get_directory_contents().","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.files`/get_directory_contents().","language":"python","range":[75,0,104,23],"content":"def get_directory_contents(\n    directory: str, ignore: Optional[list[str]] = None\n) -> list[dict[str, Union[str, bytes]]]:\n    \"\"\"\n    Get the content of all files in the given directory.\n\n    :param directory: Full path to the directory to search\n    :param ignore: List of files or folders to ignore (optional)\n    :return: List of file objects as returned by `get_file_contents`\n\n    See `get_file_contents()` for the details on the output structure\n    and how files are read.\n    \"\"\"\n    return_array = []\n\n    if ignore is None:\n        ignore = []\n\n    # TODO: Convert to use pathlib.Path.walk()\n    for dpath, dirs, files in os.walk(directory):\n        # In-place update of dirs so that os.walk() doesn't traverse them\n        dirs[:] = [d for d in dirs if d not in ignore]\n\n        for file in files:\n            if file in ignore:\n                continue\n\n            return_array.append(get_file_contents(os.path.join(dpath, file), directory))\n\n    return return_array","file":"/pilot/helpers/files.py","fileHash":"7bedb0c023a2d02f7b62c49a14b9f5ecadd767fbd452537536b7ba70cc3151ab","hash":"97e06910dcc41226392e1a711f7bbceb11214abf64d64b17d07c143fe24093f5","processedContent":"def get_directory_contents(\n    directory: str, ignore: Optional[list[str]] = None #undefined\n) -> list[dict[str, Union[str, bytes]]]: #undefined\n    \"\"\"\n    Get the content of all files in the given directory.\n\n    :param directory: Full path to the directory to search\n    :param ignore: List of files or folders to ignore (optional)\n    :return: List of file objects as returned by `get_file_contents`\n\n    See `get_file_contents()` for the details on the output structure\n    and how files are read.\n    \"\"\"\n    return_array = []\n\n    if ignore is None:\n        ignore = []\n\n    # TODO: Convert to use pathlib.Path.walk()\n    for dpath, dirs, files in os.walk(directory):\n    \"\"\"\n    scip-python python python-stdlib 3.11 os/__init__:: undefined\n    scip-python python python-stdlib 3.11 os/walk().: undefined\n    \"\"\"\n        # In-place update of dirs so that os.walk() doesn't traverse them\n        dirs[:] = [d for d in dirs if d not in ignore]\n\n        for file in files:\n            if file in ignore:\n                continue\n\n            return_array.append(get_file_contents(os.path.join(dpath, file), directory))\n            \"\"\"\n            scip-python python python-stdlib 3.11 os/__init__:: undefined\n            scip-python python temp indexer `pilot.helpers.files`/get_file_contents().: This code defines a function called `get_file_contents` that takes two parameters: `path` and `project_root_path`. It returns an object with four keys: `name`, `path`, `content`, and `full_path`. The function first tries to read the file using UTF-8 encoding, but if that fails, it treats the file as a binary file. It then returns the file name, relative path, content (as a string or bytes object), and full path as values in the object.\n            scip-python python python-stdlib 3.11 os/path.: undefined\n            scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n            \"\"\"\n\n    return return_array","documentation":"This code defines a function called `get_directory_contents` that takes two parameters: `directory` and `ignore`. It returns a list of file objects as returned by `get_file_contents`, which includes the file name, relative path, content (as a string or bytes object), and full path. The function uses `os.walk()` to traverse the directory and its subdirectories, and it ignores files or folders in the `ignore` list."}},{"key":"scip-python python temp indexer `pilot.helpers.files`/get_file_contents().","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.files`/get_file_contents().","language":"python","range":[34,0,72,5],"content":"def get_file_contents(\n    path: str, project_root_path: str\n) -> dict[str, Union[str, bytes]]:\n    \"\"\"\n    Get file content and metadata.\n\n    :param path: Full path to the file\n    :param project_root_path: Full path to the project root directory\n    :return: Object with the following keys:\n        - name: File name\n        - path: Relative path to the file\n        - content: File content (str or bytes)\n        - full_path: Full path to the file\n\n    If file is text, it will be read using UTF-8 encoding and `content`\n    will be a Python string. If that fails, it will be treated as a\n    binary file and `content` will be a Python bytes object.\n    \"\"\"\n    try:\n        # Assume it's a text file using UTF-8 encoding\n        file_content = open(path, \"r\", encoding=\"utf-8\").read()\n    except UnicodeDecodeError:\n        # If that fails, we'll treat it as a binary file\n        file_content = open(path, \"rb\").read()\n    except FileNotFoundError:\n        raise ValueError(f\"File not found: {path}\")\n\n    file_name = os.path.basename(path)\n    relative_path = str(Path(path).parent.relative_to(project_root_path))\n\n    if relative_path == \".\":\n        relative_path = \"\"\n\n    return {\n        \"name\": file_name,\n        \"path\": relative_path,\n        \"content\": file_content,\n        \"full_path\": path,\n    }","file":"/pilot/helpers/files.py","fileHash":"7bedb0c023a2d02f7b62c49a14b9f5ecadd767fbd452537536b7ba70cc3151ab","hash":"b33e51ee24577f02e81178bf6753f221767c5e106bf6180e184e741198df16f5","processedContent":"def get_file_contents(\n    path: str, project_root_path: str\n) -> dict[str, Union[str, bytes]]: #undefined\n    \"\"\"\n    Get file content and metadata.\n\n    :param path: Full path to the file\n    :param project_root_path: Full path to the project root directory\n    :return: Object with the following keys:\n        - name: File name\n        - path: Relative path to the file\n        - content: File content (str or bytes)\n        - full_path: Full path to the file\n\n    If file is text, it will be read using UTF-8 encoding and `content`\n    will be a Python string. If that fails, it will be treated as a\n    binary file and `content` will be a Python bytes object.\n    \"\"\"\n    try:\n        # Assume it's a text file using UTF-8 encoding\n        file_content = open(path, \"r\", encoding=\"utf-8\").read() #undefined\n    except UnicodeDecodeError:\n        # If that fails, we'll treat it as a binary file\n        file_content = open(path, \"rb\").read() #undefined\n    except FileNotFoundError:\n        raise ValueError(f\"File not found: {path}\")\n\n    file_name = os.path.basename(path)\n    \"\"\"\n    scip-python python python-stdlib 3.11 os/__init__:: undefined\n    scip-python python python-stdlib 3.11 os/path.: undefined\n    scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n    \"\"\"\n    relative_path = str(Path(path).parent.relative_to(project_root_path))\n    \"\"\"\n    scip-python python python-stdlib 3.11 pathlib/Path#: undefined\n    scip-python python python-stdlib 3.11 pathlib/PurePath#parent().: undefined\n    scip-python python python-stdlib 3.11 pathlib/PurePath#relative_to().: undefined\n    \"\"\"\n\n    if relative_path == \".\":\n        relative_path = \"\"\n\n    return {\n        \"name\": file_name,\n        \"path\": relative_path,\n        \"content\": file_content,\n        \"full_path\": path,\n    }","documentation":"This code defines a function called `get_file_contents` that takes two parameters: `path` and `project_root_path`. It returns an object with four keys: `name`, `path`, `content`, and `full_path`. The function first tries to read the file using UTF-8 encoding, but if that fails, it treats the file as a binary file. It then returns the file name, relative path, content (as a string or bytes object), and full path as values in the object."}},{"key":"scip-python python temp indexer `pilot.helpers.files`/clear_directory().","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.files`/clear_directory().","language":"python","range":[107,0,133,37],"content":"def clear_directory(directory: str, ignore: Optional[list[str]] = None):\n    \"\"\"\n    Delete all files and directories (except ignored ones) in the given directory.\n\n    :param dir_path: Full path to the directory to clear\n    :param ignore: List of files or folders to ignore (optional)\n    \"\"\"\n    if ignore is None:\n        ignore = []\n\n    # TODO: Convert to use pathlib.Path.walk()\n    for dpath, dirs, files in os.walk(directory, topdown=True):\n        # In-place update of dirs so that os.walk() doesn't traverse them\n        dirs[:] = [d for d in dirs if d not in ignore]\n\n        for file in files:\n            if file in ignore or os.path.join(directory, file) in ignore:\n                continue\n\n            path = os.path.join(dpath, file)\n            os.remove(path)\n\n        # Delete empty subdirectories not in ignore list\n        for d in dirs:\n            subdir_path = os.path.join(dpath, d)\n            if not os.listdir(subdir_path):\n                os.rmdir(subdir_path)","file":"/pilot/helpers/files.py","fileHash":"7bedb0c023a2d02f7b62c49a14b9f5ecadd767fbd452537536b7ba70cc3151ab","hash":"380fcc2e9f0e6e2189857f51869c66d980c2d3b0a3b6e6fd4898896e70b3e773","processedContent":"def clear_directory(directory: str, ignore: Optional[list[str]] = None): #undefined\n    \"\"\"\n    Delete all files and directories (except ignored ones) in the given directory.\n\n    :param dir_path: Full path to the directory to clear\n    :param ignore: List of files or folders to ignore (optional)\n    \"\"\"\n    if ignore is None:\n        ignore = []\n\n    # TODO: Convert to use pathlib.Path.walk()\n    for dpath, dirs, files in os.walk(directory, topdown=True):\n    \"\"\"\n    scip-python python python-stdlib 3.11 os/__init__:: undefined\n    scip-python python python-stdlib 3.11 os/walk().: undefined\n    \"\"\"\n        # In-place update of dirs so that os.walk() doesn't traverse them\n        dirs[:] = [d for d in dirs if d not in ignore]\n\n        for file in files:\n            if file in ignore or os.path.join(directory, file) in ignore:\n            \"\"\"\n            scip-python python python-stdlib 3.11 os/__init__:: undefined\n            scip-python python python-stdlib 3.11 os/path.: undefined\n            scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n            \"\"\"\n                continue\n\n            path = os.path.join(dpath, file)\n            \"\"\"\n            scip-python python python-stdlib 3.11 os/__init__:: undefined\n            scip-python python python-stdlib 3.11 os/path.: undefined\n            scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n            \"\"\"\n            os.remove(path)\n            \"\"\"\n            scip-python python python-stdlib 3.11 os/__init__:: undefined\n            scip-python python python-stdlib 3.11 os/remove().: undefined\n            \"\"\"\n\n        # Delete empty subdirectories not in ignore list\n        for d in dirs:\n            subdir_path = os.path.join(dpath, d)\n            \"\"\"\n            scip-python python python-stdlib 3.11 os/__init__:: undefined\n            scip-python python python-stdlib 3.11 os/path.: undefined\n            scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n            \"\"\"\n            if not os.listdir(subdir_path):\n            \"\"\"\n            scip-python python python-stdlib 3.11 os/__init__:: undefined\n            scip-python python python-stdlib 3.11 os/listdir().: undefined\n            \"\"\"\n                os.rmdir(subdir_path)","documentation":"This code defines a function called `clear_directory` that takes a directory path and an optional list of files or folders to ignore. It recursively traverses the directory and its subdirectories, deleting all files and empty subdirectories except for those in the ignore list."}},{"key":"scip-python python temp indexer `pilot.helpers.files`/update_file().","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.files`/update_file().","language":"python","range":[7,0,31,50],"content":"def update_file(path: str, new_content: Union[str, bytes]):\n    \"\"\"\n    Update file with the new content.\n\n    :param path: Full path to the file\n    :param new_content: New content to write to the file\n\n    Any intermediate directories will be created if they don't exist.\n    If file is text, it will be written using UTF-8 encoding.\n    \"\"\"\n    # TODO: we should know where project root is and ensure no\n    # files are written outside of it.\n    os.makedirs(os.path.dirname(path), exist_ok=True)\n\n    if isinstance(new_content, str):\n        file_mode = \"w\"\n        encoding = \"utf-8\"\n    else:\n        file_mode = \"wb\"\n        encoding = None\n\n    with open(path, file_mode, encoding=encoding) as file:\n        file.write(new_content)\n        print({'path': path, 'line': None}, type='openFile')\n        print(color_green(f\"Updated file {path}\"))","file":"/pilot/helpers/files.py","fileHash":"7bedb0c023a2d02f7b62c49a14b9f5ecadd767fbd452537536b7ba70cc3151ab","hash":"c5d6b63c69cbc7755b383fb1ac4c7a2004f215e87445ac12aaa75f62b60cd033","processedContent":"def update_file(path: str, new_content: Union[str, bytes]): #undefined\n    \"\"\"\n    Update file with the new content.\n\n    :param path: Full path to the file\n    :param new_content: New content to write to the file\n\n    Any intermediate directories will be created if they don't exist.\n    If file is text, it will be written using UTF-8 encoding.\n    \"\"\"\n    # TODO: we should know where project root is and ensure no\n    # files are written outside of it.\n    os.makedirs(os.path.dirname(path), exist_ok=True)\n    \"\"\"\n    scip-python python python-stdlib 3.11 os/__init__:: undefined\n    scip-python python python-stdlib 3.11 os/__init__:: undefined\n    scip-python python python-stdlib 3.11 os/makedirs().: undefined\n    scip-python python python-stdlib 3.11 os/path.: undefined\n    scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n    \"\"\"\n\n    if isinstance(new_content, str):\n        file_mode = \"w\"\n        encoding = \"utf-8\"\n    else:\n        file_mode = \"wb\"\n        encoding = None\n\n    with open(path, file_mode, encoding=encoding) as file:\n        file.write(new_content) #undefined\n        print({'path': path, 'line': None}, type='openFile')\n        print(color_green(f\"Updated file {path}\"))","documentation":"This code updates a file with new content. It creates any necessary intermediate directories, writes the file using UTF-8 encoding if it's text, and prints a success message."}},{"key":"scip-python python temp indexer `pilot.helpers.cli`/build_directory_tree().","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.cli`/build_directory_tree().","language":"python","range":[343,0,386,17],"content":"def build_directory_tree(path, prefix='', is_root=True, ignore=None):\n    \"\"\"Build the directory tree structure in a simplified format.\n\n    Args:\n    - path: The starting directory path.\n    - prefix: Prefix for the current item, used for recursion.\n    - is_root: Flag to indicate if the current item is the root directory.\n    - ignore: a list of directories to ignore\n\n    Returns:\n    - A string representation of the directory tree.\n    \"\"\"\n    output = \"\"\n    indent = '  '\n\n    if os.path.isdir(path):\n        dir_name = os.path.basename(path)\n        if is_root:\n            output += '/'\n        else:\n            output += f'{prefix}/{dir_name}'\n\n        # List items in the directory\n        items = os.listdir(path)\n        dirs = [item for item in items if os.path.isdir(os.path.join(path, item)) and item not in ignore]\n        files = [item for item in items if os.path.isfile(os.path.join(path, item))]\n        dirs.sort()\n        files.sort()\n\n        if dirs:\n            output += '\\n'\n            for index, dir_item in enumerate(dirs):\n                item_path = os.path.join(path, dir_item)\n                output += build_directory_tree(item_path, prefix + indent, is_root=False, ignore=ignore)\n\n            if files:\n                output += f\"{prefix}  {', '.join(files)}\\n\"\n\n        elif files:\n            output += f\": {', '.join(files)}\\n\"\n        else:\n            output += '\\n'\n\n    return output","file":"/pilot/helpers/cli.py","fileHash":"422ef82ede524a5790d370e04f026d86157a903e23d309302192e6a88f244b05","hash":"78c16e6d2d17fe13482299b3209eea65695d791e99c4f52aa765533a96f329ec","processedContent":"def build_directory_tree(path, prefix='', is_root=True, ignore=None):\n    \"\"\"Build the directory tree structure in a simplified format.\n\n    Args:\n    - path: The starting directory path.\n    - prefix: Prefix for the current item, used for recursion.\n    - is_root: Flag to indicate if the current item is the root directory.\n    - ignore: a list of directories to ignore\n\n    Returns:\n    - A string representation of the directory tree.\n    \"\"\"\n    output = \"\"\n    indent = '  '\n\n    if os.path.isdir(path):\n    \"\"\"\n    scip-python python python-stdlib 3.11 os/__init__:: undefined\n    scip-python python python-stdlib 3.11 os/path.: undefined\n    scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n    \"\"\"\n        dir_name = os.path.basename(path)\n        \"\"\"\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/path.: undefined\n        scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n        \"\"\"\n        if is_root:\n            output += '/'\n        else:\n            output += f'{prefix}/{dir_name}'\n\n        # List items in the directory\n        items = os.listdir(path)\n        \"\"\"\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/listdir().: undefined\n        \"\"\"\n        dirs = [item for item in items if os.path.isdir(os.path.join(path, item)) and item not in ignore]\n        \"\"\"\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/path.: undefined\n        scip-python python python-stdlib 3.11 os/path.: undefined\n        scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n        scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n        \"\"\"\n        files = [item for item in items if os.path.isfile(os.path.join(path, item))]\n        \"\"\"\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/path.: undefined\n        scip-python python python-stdlib 3.11 os/path.: undefined\n        scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n        scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n        \"\"\"\n        dirs.sort()\n        files.sort()\n\n        if dirs:\n            output += '\\n'\n            for index, dir_item in enumerate(dirs):\n                item_path = os.path.join(path, dir_item)\n                \"\"\"\n                scip-python python python-stdlib 3.11 os/__init__:: undefined\n                scip-python python python-stdlib 3.11 os/path.: undefined\n                scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n                \"\"\"\n                output += build_directory_tree(item_path, prefix + indent, is_root=False, ignore=ignore)\n\n            if files:\n                output += f\"{prefix}  {', '.join(files)}\\n\"\n\n        elif files:\n            output += f\": {', '.join(files)}\\n\"\n        else:\n            output += '\\n'\n\n    return output","documentation":"This code defines a function called `build_directory_tree` that takes in a directory path and returns a string representation of the directory tree structure. The function uses the `os` module to list the items in the directory, sort them, and then recursively call itself for each subdirectory, building the tree structure."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.techlead`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.techlead`/__init__:","language":"python","range":[0,0,104,0],"content":"from utils.utils import step_already_finished\nfrom helpers.Agent import Agent\nfrom utils.style import color_green_bold\nfrom helpers.AgentConvo import AgentConvo\n\nfrom utils.utils import should_execute_step, generate_app_data\nfrom database.database import save_progress, get_progress_steps, save_feature, get_features_by_app_id\nfrom logger.logger import logger\nfrom const.function_calls import DEVELOPMENT_PLAN\n\nDEVELOPMENT_PLANNING_STEP = 'development_planning'\n\n\nclass TechLead(Agent):\n    def __init__(self, project):\n        super().__init__('tech_lead', project)\n        self.save_dev_steps = False\n\n    def create_development_plan(self):\n        self.project.current_step = DEVELOPMENT_PLANNING_STEP\n        self.convo_development_plan = AgentConvo(self)\n\n        # If this app_id already did this step, just get all data from DB and don't ask user again\n        step = get_progress_steps(self.project.args['app_id'], DEVELOPMENT_PLANNING_STEP)\n        if step and not should_execute_step(self.project.args['step'], DEVELOPMENT_PLANNING_STEP):\n            step_already_finished(self.project.args, step)\n            self.project.development_plan = step['development_plan']\n            return\n\n        # DEVELOPMENT PLANNING\n        print(color_green_bold(\"Starting to create the action plan for development...\\n\"))\n        logger.info(\"Starting to create the action plan for development...\")\n\n        # TODO add clarifications\n        llm_response = self.convo_development_plan.send_message('development/plan.prompt',\n            {\n                \"name\": self.project.args['name'],\n                \"app_type\": self.project.args['app_type'],\n                \"app_summary\": self.project.project_description,\n                \"clarifications\": self.project.clarifications,\n                \"user_stories\": self.project.user_stories,\n                \"user_tasks\": self.project.user_tasks,\n                \"technologies\": self.project.architecture,\n                \"task_type\": 'app',\n            }, DEVELOPMENT_PLAN)\n        self.project.development_plan = llm_response['plan']\n\n        logger.info('Plan for development is created.')\n\n        save_progress(self.project.args['app_id'], self.project.current_step, {\n            \"development_plan\": self.project.development_plan, \"app_data\": generate_app_data(self.project.args)\n        })\n\n        return\n\n    def create_feature_plan(self, feature_description):\n        self.save_dev_steps = True\n        self.convo_feature_plan = AgentConvo(self)\n        previous_features = get_features_by_app_id(self.project.args['app_id'])\n\n        llm_response = self.convo_feature_plan.send_message('development/feature_plan.prompt',\n            {\n                \"name\": self.project.args['name'],\n                \"app_type\": self.project.args['app_type'],\n                \"app_summary\": self.project.project_description,\n                \"clarifications\": self.project.clarifications,\n                \"user_stories\": self.project.user_stories,\n                \"user_tasks\": self.project.user_tasks,\n                \"technologies\": self.project.architecture,\n                \"directory_tree\": self.project.get_directory_tree(True),\n                \"development_tasks\": self.project.development_plan,\n                \"files\": self.project.get_all_coded_files(),\n                \"previous_features\": previous_features,\n                \"feature_description\": feature_description,\n                \"task_type\": 'feature',\n            }, DEVELOPMENT_PLAN)\n\n        self.project.development_plan = llm_response['plan']\n\n        logger.info('Plan for feature development is created.')\n        return\n\n    def create_feature_summary(self, feature_description):\n        self.convo_feature_summary = AgentConvo(self)\n\n        llm_response = self.convo_feature_summary.send_message('development/feature_summary.prompt',\n            {\n                \"name\": self.project.args['name'],\n                \"app_type\": self.project.args['app_type'],\n                \"app_summary\": self.project.project_description,\n                \"feature_description\": feature_description,\n                \"development_tasks\": self.project.development_plan,\n            })\n\n        self.project.feature_summary = llm_response\n\n        if not self.project.skip_steps:\n            save_feature(self.project.args['app_id'],\n                         self.project.feature_summary,\n                         self.convo_feature_plan.messages,\n                         self.project.checkpoints['last_development_step'])\n\n        logger.info('Summary for new feature is created.')\n        return\n","file":"/pilot/helpers/agents/TechLead.py","fileHash":"178ab0375a889408a9d022dedcc919c07e2484116282a310d3856ae87c405426","hash":"178ab0375a889408a9d022dedcc919c07e2484116282a310d3856ae87c405426","processedContent":"from utils.utils import step_already_finished\n\"\"\"\nscip-python python temp indexer `pilot.utils.utils`/__init__:: The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.utils.utils`/step_already_finished().: This code updates the arguments with the app data from a step and then prints a success message to the console.\n\"\"\"\nfrom helpers.Agent import Agent\n\"\"\"\nscip-python python temp indexer `pilot.helpers.agent`/__init__:: This code defines a class called \"Agent\" that represents a person who is working on a specific project. The class has two attributes: \"role\" and \"project\". The \"role\" attribute specifies the type of work the agent is doing, and the \"project\" attribute specifies the project they are working on.\nscip-python python temp indexer `pilot.helpers.agent`/Agent#: This code defines a class called \"Agent\" that represents a person who is working on a specific project. The class has two attributes: \"role\" and \"project\". The \"role\" attribute specifies the type of work the agent is doing, and the \"project\" attribute specifies the project they are working on.\n\"\"\"\nfrom utils.style import color_green_bold\n\"\"\"\nscip-python python temp indexer `pilot.utils.style`/__init__:: This code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.utils.style`/color_green_bold.: undefined\n\"\"\"\nfrom helpers.AgentConvo import AgentConvo\n\"\"\"\nscip-python python temp indexer `pilot.helpers.agentconvo`/__init__:: The code defines a class called `AgentConvo` that represents a conversation with an agent, including functions for sending and receiving messages, formatting and rendering prompts, and error handling for GPT model token limits.\nscip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#: This code defines a class called `AgentConvo` that represents a conversation with an agent. It includes functions for sending and receiving messages, as well as formatting and rendering prompts. The code also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n\"\"\"\n\nfrom utils.utils import should_execute_step, generate_app_data\n\"\"\"\nscip-python python temp indexer `pilot.utils.utils`/__init__:: The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.utils.utils`/should_execute_step().: This code checks if the current step should be executed based on the argument passed in and the current step. It returns true if the current step is greater than or equal to the argument step.\nscip-python python temp indexer `pilot.utils.utils`/generate_app_data().: This code defines a function called `generate_app_data` that takes an argument called `args`. The function returns a dictionary with two keys: `app_id` and `app_type`, both of which are values from the `args` dictionary.\n\"\"\"\nfrom database.database import save_progress, get_progress_steps, save_feature, get_features_by_app_id\n\"\"\"\nscip-python python temp indexer `pilot.database.database`/__init__:: The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.database.database`/save_progress().: This code defines a function called `save_progress` that saves progress data for an app in a database. It retrieves the app entity from the database based on its ID, creates or updates a record in a table based on the step provided, and updates the status of the app in the database.\nscip-python python temp indexer `pilot.database.database`/get_progress_steps().: This code defines a function called `get_progress_steps` that retrieves progress steps for a given application ID. It uses a dictionary to map progress step names to their corresponding model classes, and it returns a dictionary of progress steps with their corresponding data.\nscip-python python temp indexer `pilot.database.database`/save_feature().: This code defines a function called `save_feature` that creates a new feature entity in the database based on the input parameters. It retrieves an app entity from the database using the `get_app` function, and then creates a new feature entity with the given summary, messages, and previous step. The function also includes error handling to raise a ValueError if the app is not found.\nscip-python python temp indexer `pilot.database.database`/get_features_by_app_id().: This code defines a function called `get_features_by_app_id` that retrieves a list of features from the database based on an app ID. It includes error handling to raise a ValueError if the app is not found.\n\"\"\"\nfrom logger.logger import logger\n\"\"\"\nscip-python python temp indexer `pilot.logger.logger`/__init__:: This code sets up a custom logger for an application, which filters sensitive information from log records and removes ANSI escape sequences.\nscip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n\"\"\"\nfrom const.function_calls import DEVELOPMENT_PLAN\n\"\"\"\nscip-python python temp indexer `pilot.const.function_calls`/__init__:: The code is a collection of functions and definitions that are used to implement various tasks in a development process. It includes functions for processing user stories, tasks, technologies, commands, and files, as well as definitions for breaking down development tasks into smaller steps and implementing code changes.\nscip-python python temp indexer `pilot.const.function_calls`/DEVELOPMENT_PLAN.: undefined\n\"\"\"\n\nDEVELOPMENT_PLANNING_STEP = 'development_planning'\n\n\nclass TechLead(Agent):\n    \"\"\"This code defines a class called \"TechLead\" that represents a person who is working on a specific project. The class has two attributes: \"role\" and \"project\". The \"role\" attribute specifies the type of work the agent is doing, and the \"project\" attribute specifies the project they are working on. The class also defines several functions, including `create_development_plan`, `create_feature_plan`, and `create_feature_summary`, which retrieve progress data for an app from a database, update the status of the app in the database, and save the development plan for the app.\"\"\"\n    pass\n","documentation":"The code defines a class called \"TechLead\" that represents a person working on a specific project, and includes functions for retrieving progress data, updating the status of the app in the database, and saving the development plan for the app."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#","language":"python","range":[13,0,103,14],"content":"class TechLead(Agent):\n    def __init__(self, project):\n        super().__init__('tech_lead', project)\n        self.save_dev_steps = False\n\n    def create_development_plan(self):\n        self.project.current_step = DEVELOPMENT_PLANNING_STEP\n        self.convo_development_plan = AgentConvo(self)\n\n        # If this app_id already did this step, just get all data from DB and don't ask user again\n        step = get_progress_steps(self.project.args['app_id'], DEVELOPMENT_PLANNING_STEP)\n        if step and not should_execute_step(self.project.args['step'], DEVELOPMENT_PLANNING_STEP):\n            step_already_finished(self.project.args, step)\n            self.project.development_plan = step['development_plan']\n            return\n\n        # DEVELOPMENT PLANNING\n        print(color_green_bold(\"Starting to create the action plan for development...\\n\"))\n        logger.info(\"Starting to create the action plan for development...\")\n\n        # TODO add clarifications\n        llm_response = self.convo_development_plan.send_message('development/plan.prompt',\n            {\n                \"name\": self.project.args['name'],\n                \"app_type\": self.project.args['app_type'],\n                \"app_summary\": self.project.project_description,\n                \"clarifications\": self.project.clarifications,\n                \"user_stories\": self.project.user_stories,\n                \"user_tasks\": self.project.user_tasks,\n                \"technologies\": self.project.architecture,\n                \"task_type\": 'app',\n            }, DEVELOPMENT_PLAN)\n        self.project.development_plan = llm_response['plan']\n\n        logger.info('Plan for development is created.')\n\n        save_progress(self.project.args['app_id'], self.project.current_step, {\n            \"development_plan\": self.project.development_plan, \"app_data\": generate_app_data(self.project.args)\n        })\n\n        return\n\n    def create_feature_plan(self, feature_description):\n        self.save_dev_steps = True\n        self.convo_feature_plan = AgentConvo(self)\n        previous_features = get_features_by_app_id(self.project.args['app_id'])\n\n        llm_response = self.convo_feature_plan.send_message('development/feature_plan.prompt',\n            {\n                \"name\": self.project.args['name'],\n                \"app_type\": self.project.args['app_type'],\n                \"app_summary\": self.project.project_description,\n                \"clarifications\": self.project.clarifications,\n                \"user_stories\": self.project.user_stories,\n                \"user_tasks\": self.project.user_tasks,\n                \"technologies\": self.project.architecture,\n                \"directory_tree\": self.project.get_directory_tree(True),\n                \"development_tasks\": self.project.development_plan,\n                \"files\": self.project.get_all_coded_files(),\n                \"previous_features\": previous_features,\n                \"feature_description\": feature_description,\n                \"task_type\": 'feature',\n            }, DEVELOPMENT_PLAN)\n\n        self.project.development_plan = llm_response['plan']\n\n        logger.info('Plan for feature development is created.')\n        return\n\n    def create_feature_summary(self, feature_description):\n        self.convo_feature_summary = AgentConvo(self)\n\n        llm_response = self.convo_feature_summary.send_message('development/feature_summary.prompt',\n            {\n                \"name\": self.project.args['name'],\n                \"app_type\": self.project.args['app_type'],\n                \"app_summary\": self.project.project_description,\n                \"feature_description\": feature_description,\n                \"development_tasks\": self.project.development_plan,\n            })\n\n        self.project.feature_summary = llm_response\n\n        if not self.project.skip_steps:\n            save_feature(self.project.args['app_id'],\n                         self.project.feature_summary,\n                         self.convo_feature_plan.messages,\n                         self.project.checkpoints['last_development_step'])\n\n        logger.info('Summary for new feature is created.')\n        return","file":"/pilot/helpers/agents/TechLead.py","fileHash":"178ab0375a889408a9d022dedcc919c07e2484116282a310d3856ae87c405426","hash":"e14e494fe57c50f72747d3c381ef3212f2a21d58a9061c3a6dc08315d48734db","processedContent":"class TechLead(Agent): #This code defines a class called \"Agent\" that represents a person who is working on a specific project. The class has two attributes: \"role\" and \"project\". The \"role\" attribute specifies the type of work the agent is doing, and the \"project\" attribute specifies the project they are working on.\n    def __init__(self, project):\n        \"\"\"This code defines a constructor for a class that initializes an object with a role (tech lead) and a project, and sets a flag to indicate whether to save development steps.\"\"\"\n        pass\n\n    def create_development_plan(self):\n        \"\"\"The code defines a function called `create_development_plan` that retrieves progress data for an app from a database, updates the status of the app in the database, and saves the development plan for the app.\"\"\"\n        pass\n\n    def create_feature_plan(self, feature_description):\n        \"\"\"The code defines a function called `create_feature_plan` that retrieves a list of features from the database based on an app ID, and then sends a message in a conversation to retrieve a prompt template for feature development.\"\"\"\n        pass\n\n    def create_feature_summary(self, feature_description):\n        self.convo_feature_summary = AgentConvo(self)\n\n        llm_response = self.convo_feature_summary.send_message('development/feature_summary.prompt',\n            {\n                \"name\": self.project.args['name'],\n                \"app_type\": self.project.args['app_type'],\n                \"app_summary\": self.project.project_description,\n                \"feature_description\": feature_description,\n                \"development_tasks\": self.project.development_plan,\n            })\n\n        self.project.feature_summary = llm_response\n\n        if not self.project.skip_steps:\n            save_feature(self.project.args['app_id'],\n                         self.project.feature_summary,\n                         self.convo_feature_plan.messages,\n                         self.project.checkpoints['last_development_step'])\n\n        logger.info('Summary for new feature is created.')\n        return","documentation":"This code defines a class called \"TechLead\" that represents a person who is working on a specific project. The class has two attributes: \"role\" and \"project\". The \"role\" attribute specifies the type of work the agent is doing, and the \"project\" attribute specifies the project they are working on. The class also defines several functions, including `create_development_plan`, `create_feature_plan`, and `create_feature_summary`, which retrieve progress data for an app from a database, update the status of the app in the database, and save the development plan for the app."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","language":"python","range":[0,0,661,0],"content":"import platform\nimport uuid\nimport re\n\nfrom const.messages import WHEN_USER_DONE\nfrom utils.style import (\n    color_green,\n    color_green_bold,\n    color_red,\n    color_red_bold,\n    color_yellow_bold,\n    color_cyan_bold,\n    color_white_bold\n)\nfrom helpers.exceptions.TokenLimitError import TokenLimitError\nfrom const.code_execution import MAX_COMMAND_DEBUG_TRIES\nfrom helpers.exceptions.TooDeepRecursionError import TooDeepRecursionError\nfrom helpers.Debugger import Debugger\nfrom utils.questionary import styled_text\nfrom utils.utils import step_already_finished\nfrom helpers.agents.CodeMonkey import CodeMonkey\nfrom logger.logger import logger\nfrom helpers.Agent import Agent\nfrom helpers.AgentConvo import AgentConvo\nfrom utils.utils import should_execute_step, array_of_objects_to_string, generate_app_data\nfrom helpers.cli import run_command_until_success, execute_command_and_check_cli_response, running_processes\nfrom const.function_calls import FILTER_OS_TECHNOLOGIES, EXECUTE_COMMANDS, GET_TEST_TYPE, IMPLEMENT_TASK, \\\n    COMMAND_TO_RUN, GET_FULLY_CODED_FILE\nfrom database.database import save_progress, get_progress_steps, update_app_status\nfrom utils.utils import get_os_info\n\nENVIRONMENT_SETUP_STEP = 'environment_setup'\n\n\nclass Developer(Agent):\n    def __init__(self, project):\n        super().__init__('full_stack_developer', project)\n        self.run_command = None\n        self.save_dev_steps = True\n        self.debugger = Debugger(self)\n\n    def start_coding(self):\n        if not self.project.finished:\n            self.project.current_step = 'coding'\n            update_app_status(self.project.args['app_id'], self.project.current_step)\n\n            if self.project.skip_steps is None:\n                self.project.skip_steps = False if (not self.project.continuing_project or ('skip_until_dev_step' in self.project.args and self.project.args['skip_until_dev_step'] == '0')) else True\n\n        # DEVELOPMENT\n        print(color_green_bold(\"🚀 Now for the actual development...\\n\"))\n        logger.info(\"Starting to create the actual code...\")\n\n        total_tasks = len(self.project.development_plan)\n        progress_thresholds = [50]  # Percentages of progress when documentation is created\n        documented_thresholds = set()\n\n        for i, dev_task in enumerate(self.project.development_plan):\n            current_progress_percent = round((i / total_tasks) * 100, 2)\n\n            for threshold in progress_thresholds:\n                if current_progress_percent > threshold and threshold not in documented_thresholds:\n                    self.project.technical_writer.document_project(current_progress_percent)\n                    documented_thresholds.add(threshold)\n\n            self.implement_task(i, dev_task)\n\n        # DEVELOPMENT END\n        self.project.technical_writer.document_project(100)\n        self.project.dot_pilot_gpt.chat_log_folder(None)\n        if not self.project.finished:\n            self.project.finished = True\n            update_app_status(self.project.args['app_id'], self.project.current_step)\n            message = 'The app is DONE!!! Yay...you can use it now.\\n'\n            logger.info(message)\n            print(color_green_bold(message))\n        else:\n            message = 'Feature complete!\\n'\n            logger.info(message)\n            print(color_green_bold(message))\n\n    def implement_task(self, i, development_task=None):\n        print(color_green_bold(f'Implementing task #{i + 1}: ') + color_green(f' {development_task[\"description\"]}\\n'))\n        self.project.dot_pilot_gpt.chat_log_folder(i + 1)\n\n        convo_dev_task = AgentConvo(self)\n        convo_dev_task.send_message('development/task/breakdown.prompt', {\n            \"name\": self.project.args['name'],\n            \"app_type\": self.project.args['app_type'],\n            \"app_summary\": self.project.project_description,\n            \"clarifications\": self.project.clarifications,\n            \"user_stories\": self.project.user_stories,\n            \"user_tasks\": self.project.user_tasks,\n            \"technologies\": self.project.architecture,\n            \"array_of_objects_to_string\": array_of_objects_to_string,  # TODO check why is this here\n            \"directory_tree\": self.project.get_directory_tree(True),\n            \"current_task_index\": i,\n            \"development_tasks\": self.project.development_plan,\n            \"files\": self.project.get_all_coded_files(),\n            \"task_type\": 'feature' if self.project.finished else 'app'\n        })\n\n        response = convo_dev_task.send_message('development/parse_task.prompt', {\n            'running_processes': running_processes,\n            'os': platform.system(),\n        }, IMPLEMENT_TASK)\n        steps = response['tasks']\n        convo_dev_task.remove_last_x_messages(2)\n\n        completed_steps = []\n\n        while True:\n            result = self.execute_task(convo_dev_task,\n                                       development_task['description'],\n                                       steps,\n                                       development_task=development_task,\n                                       continue_development=True,\n                                       is_root_task=True,\n                                       continue_from_step=len(completed_steps))\n\n            if result['success']:\n                break\n\n            if 'step_index' in result:\n                result['os'] = platform.system()\n                step_index = result['step_index']\n                completed_steps = steps[:step_index + 1]\n                result['completed_steps'] = completed_steps\n                result['current_step'] = steps[step_index]\n                result['next_steps'] = steps[step_index + 1:]\n                result['current_step_index'] = step_index\n\n                convo_dev_task.remove_last_x_messages(2)\n                # todo before updating task first check if update is needed\n                response = convo_dev_task.send_message('development/task/update_task.prompt', result, IMPLEMENT_TASK)\n                steps = completed_steps + response['tasks']\n\n            else:\n                logger.warning('Testing at end of task failed')\n                break\n\n    def replace_old_code_comments(self, files_with_changes):\n        files_with_comments = [{**file, 'comments': [line for line in file['content'].split('\\n') if '[OLD CODE]' in line]} for file in files_with_changes]\n\n        for file in files_with_comments:\n            if len(file['comments']) > 0:\n                fully_coded_file_convo = AgentConvo(self)\n                fully_coded_file_response = fully_coded_file_convo.send_message(\n                    'development/get_fully_coded_file.prompt', {\n                        'file': self.project.get_files([file['path']])[0],\n                        'new_file': file,\n                    }, GET_FULLY_CODED_FILE)\n\n                file['content'] = fully_coded_file_response['file_content']\n\n        return files_with_comments\n\n    def step_code_change(self, convo, task_description, step, i, test_after_code_changes):\n        if 'code_change_description' in step:\n            # TODO this should be refactored so it always uses the same function call\n            print(f'Implementing code changes for `{step[\"code_change_description\"]}`')\n            code_monkey = CodeMonkey(self.project, self)\n            updated_convo = code_monkey.implement_code_changes(convo, task_description, step['code_change_description'],\n                                                               step, i)\n            if test_after_code_changes:\n                return self.test_code_changes(code_monkey, updated_convo)\n            else:\n                return {\"success\": True}\n\n        # TODO fix this - the problem is in GPT response that sometimes doesn't return the correct JSON structure\n        if 'code_change' not in step:\n            data = step\n        else:\n            data = step['code_change']\n\n        data = self.replace_old_code_comments([data])[0]\n\n        self.project.save_file(data)\n        # TODO end\n        return {\"success\": True}\n\n    def step_command_run(self, convo, step, i, success_with_cli_response=False):\n        logger.info('Running command: %s', step['command'])\n        # TODO fix this - the problem is in GPT response that sometimes doesn't return the correct JSON structure\n        if isinstance(step['command'], str):\n            data = step\n        else:\n            data = step['command']\n        # TODO END\n        additional_message = ''  # 'Let\\'s start with the step #0:\\n' if i == 0 else f'So far, steps { \", \".join(f\"#{j}\" for j in range(i+1)) } are finished so let\\'s do step #{i + 1} now.\\n'\n\n        command_id = data['command_id'] if 'command_id' in data else None\n        success_message = data['success_message'] if 'success_message' in data else None\n\n        return run_command_until_success(convo, data['command'],\n                                         timeout=data['timeout'],\n                                         command_id=command_id,\n                                         success_message=success_message,\n                                         additional_message=additional_message,\n                                         success_with_cli_response=success_with_cli_response)\n\n    def step_human_intervention(self, convo, step: dict):\n        \"\"\"\n        :param convo:\n        :param step: {'human_intervention_description': 'some description'}\n        :return: {\n          'success': bool\n          'user_input': string_from_human\n        }\n        \"\"\"\n        logger.info('Human intervention needed%s: %s',\n                    '' if self.run_command is None else f' for command `{self.run_command}`',\n                    step['human_intervention_description'])\n\n        while True:\n            human_intervention_description = step['human_intervention_description']\n\n            if not self.run_command:\n                self.get_run_command(convo)\n\n            if self.run_command:\n                if (self.project.ipc_client_instance is None or self.project.ipc_client_instance.client is None):\n                    human_intervention_description += color_yellow_bold('\\n\\nIf you want to run the app, just type \"r\" and press ENTER and that will run `' + self.run_command + '`')\n                else:\n                    print(self.run_command, type='run_command')\n\n            response = self.project.ask_for_human_intervention('I need human intervention:',\n                human_intervention_description,\n                cbs={\n                    'r': lambda conv: run_command_until_success(conv,\n                                                                self.run_command,\n                                                                # name the process so the LLM can kill it\n                                                                command_id='app',\n                                                                # If the app doesn't crash in the first 1st second\n                                                                # assume it's good and leave it running.\n                                                                # If timeout is None the conversation can't continue\n                                                                timeout=None,\n                                                                force=True,\n                                                                return_cli_response=True)\n                },\n                convo=convo)\n\n            logger.info('human response: %s', response)\n            if 'user_input' not in response:\n                continue\n\n            if response['user_input'] == 'continue':\n                response['success'] = True\n            else:\n                response['success'] = self.debugger.debug(convo,\n                                                          user_input=response['user_input'],\n                                                          issue_description=step['human_intervention_description'])\n                # TODO add review\n\n            return response\n\n    def step_test(self, convo, test_command):\n        # TODO: don't re-run if it's already running\n        should_rerun_command = convo.send_message('dev_ops/should_rerun_command.prompt', test_command)\n        if should_rerun_command == 'NO':\n            return {'success': True}\n        elif should_rerun_command == 'YES':\n            logger.info('Re-running test command: %s', test_command)\n            cli_response, llm_response = execute_command_and_check_cli_response(convo, test_command)\n            logger.info('After running command llm_response: ' + llm_response)\n            if llm_response == 'NEEDS_DEBUGGING':\n                print(color_red('Got incorrect CLI response:'))\n                print(cli_response)\n                print(color_red('-------------------'))\n\n            result = {\n                'success': llm_response in [\"DONE\", \"SKIP\"],\n                'cli_response': cli_response\n            }\n            if cli_response is None:\n                result['user_input'] = llm_response\n            else:\n                result['llm_response'] = llm_response\n            return result\n\n    def get_run_command(self, convo):\n        llm_response = convo.send_message('development/get_run_command.prompt', {}, COMMAND_TO_RUN)\n        self.run_command = llm_response['command']\n\n        # Pattern for triple backtick code block with optional language\n        triple_backtick_pattern = r\"```(?:\\w+\\n)?(.*?)```\"\n        triple_match = re.search(triple_backtick_pattern, self.run_command, re.DOTALL)\n        # Pattern for single backtick\n        single_backtick_pattern = r\"`(.*?)`\"\n        single_match = re.search(single_backtick_pattern, self.run_command, re.DOTALL)\n\n        if triple_match:\n            self.run_command = triple_match.group(1).strip()\n        elif single_match:\n            self.run_command = single_match.group(1).strip()\n\n    def task_postprocessing(self, convo, development_task, continue_development, task_result, last_branch_name):\n        # TODO: why does `run_command` belong to the Developer class, rather than just being passed?\n        #       ...It's set by execute_task() -> task_postprocessing(), but that is called by various sources.\n        #       What is it at step_human_intervention()?\n        self.get_run_command(convo)\n\n        if development_task is not None:\n            convo.remove_last_x_messages(2)\n            detailed_user_review_goal = convo.send_message('development/define_user_review_goal.prompt', {\n                'os': platform.system()\n            }, should_log_message=False)\n            convo.remove_last_x_messages(2)\n\n        try:\n            if continue_development:\n                continue_description = detailed_user_review_goal if detailed_user_review_goal is not None else None\n                return self.continue_development(convo, last_branch_name, continue_description, development_task)\n        except TooDeepRecursionError as e:\n            logger.warning('Too deep recursion error. Call dev_help_needed() for human_intervention: %s', e.message)\n            return self.dev_help_needed({\"type\": \"human_intervention\", \"human_intervention_description\": e.message})\n\n        return task_result\n\n    def should_retry_step_implementation(self, step, step_implementation_try):\n        if step_implementation_try >= MAX_COMMAND_DEBUG_TRIES:\n            self.dev_help_needed(step)\n\n        print(color_red_bold('\\n--------- LLM Reached Token Limit ----------'))\n        print(color_red_bold('Can I retry implementing the entire development step?'))\n\n        answer = ''\n        while answer != 'y':\n            answer = styled_text(\n                self.project,\n                'Type y/n'\n            )\n\n            logger.info(\"Retry step implementation? %s\", answer)\n            if answer == 'n':\n                return self.dev_help_needed(step)\n\n        return {\"success\": False, \"retry\": True}\n\n    def dev_help_needed(self, step):\n\n        if step['type'] == 'command':\n            help_description = (\n                        color_red_bold('I tried running the following command but it doesn\\'t seem to work:\\n\\n') +\n                        color_white_bold(step['command']['command']) +\n                        color_red_bold('\\n\\nCan you please make it work?'))\n        elif step['type'] == 'code_change':\n            help_description = step['code_change_description']\n        elif step['type'] == 'human_intervention':\n            help_description = step['human_intervention_description']\n\n        # TODO remove this\n        def extract_substring(s):\n            start_idx = s.find('```')\n            end_idx = s.find('```', start_idx + 3)\n\n            if start_idx != -1 and end_idx != -1:\n                return s[start_idx + 3:end_idx]\n            else:\n                return s\n\n        # TODO end\n\n        answer = ''\n        while answer.lower() != 'continue':\n            print(color_red_bold('\\n----------------------------- I need your help ------------------------------'))\n            print(extract_substring(str(help_description)))\n            print(color_red_bold('\\n-----------------------------------------------------------------------------'))\n            print('continue', type='button')\n            answer = styled_text(\n                self.project,\n                WHEN_USER_DONE\n            )\n            logger.info(\"help needed: %s\", answer)\n\n        return {\"success\": True, \"user_input\": answer}\n\n    def execute_task(self, convo, task_description, task_steps, test_command=None, reset_convo=True,\n                     test_after_code_changes=True, continue_development=False,\n                     development_task=None, is_root_task=False, continue_from_step=0):\n        function_uuid = str(uuid.uuid4())\n        convo.save_branch(function_uuid)\n\n        for (i, step) in enumerate(task_steps):\n            # Skip steps before continue_from_step\n            if i < continue_from_step:\n                continue\n            logger.info('---------- execute_task() step #%d: %s', i, step)\n\n            result = None\n            step_implementation_try = 0\n            need_to_see_output = 'need_to_see_output' in step and step['need_to_see_output']\n\n            while True:\n                try:\n                    if reset_convo:\n                        convo.load_branch(function_uuid)\n\n                    if step['type'] == 'command':\n                        result = self.step_command_run(convo, step, i, success_with_cli_response=need_to_see_output)\n                        # if need_to_see_output and 'cli_response' in result:\n                        #     result['user_input'] = result['cli_response']\n\n                    elif step['type'] == 'code_change':\n                        result = self.step_code_change(convo, task_description, step, i, test_after_code_changes)\n\n                    elif step['type'] == 'human_intervention':\n                        result = self.step_human_intervention(convo, step)\n\n                    # TODO background_command - if we run commands in background we should have way to kill processes\n                    #  and that should be added to function_calls.py DEBUG_STEPS_BREAKDOWN and IMPLEMENT_TASK\n                    # elif step['type'] == 'kill_process':\n                    #     terminate_named_process(step['kill_process'])\n                    #     result = {'success': True}\n\n                    logger.info('  step result: %s', result)\n\n                    if (not result['success']) or (need_to_see_output and result.get(\"user_input\") != \"SKIP\"):\n                        result['step'] = step\n                        result['step_index'] = i\n                        return result\n\n                    if test_command is not None and ('check_if_fixed' not in step or step['check_if_fixed']):\n                        logger.info('check_if_fixed: %s', test_command)\n                        result = self.step_test(convo, test_command)\n                        logger.info('task result: %s', result)\n                        return result\n\n                    break\n                except TokenLimitError as e:\n                    if is_root_task:\n                        response = self.should_retry_step_implementation(step, step_implementation_try)\n                        if 'retry' in response:\n                            # TODO we can rewind this convo even more\n                            convo.load_branch(function_uuid)\n                            continue\n                        elif 'success' in response:\n                            result = response\n                            break\n                    else:\n                        raise e\n                except TooDeepRecursionError as e:\n                    if is_root_task:\n                        result = self.dev_help_needed(step)\n                        break\n                    else:\n                        raise e\n\n        result = {\"success\": True}  # if all steps are finished, the task has been successfully implemented\n        convo.load_branch(function_uuid)\n        return self.task_postprocessing(convo, development_task, continue_development, result, function_uuid)\n\n    def continue_development(self, iteration_convo, last_branch_name, continue_description='', development_task=None):\n        while True:\n            logger.info('Continue development, last_branch_name: %s', last_branch_name)\n            if last_branch_name in iteration_convo.branches.keys():  # if user_feedback is not None we create new convo\n                iteration_convo.load_branch(last_branch_name)\n            user_description = ('Here is a description of what should be working: \\n\\n' + color_cyan_bold(\n                continue_description) + '\\n') \\\n                if continue_description != '' else ''\n            user_description = 'Can you check if the app works please? ' + user_description\n\n            if self.run_command:\n                if self.project.ipc_client_instance is None or self.project.ipc_client_instance.client is None:\n                    user_description += color_yellow_bold(\n                        '\\n\\nIf you want to run the app, just type \"r\" and press ENTER and that will run `' + self.run_command + '`')\n                else:\n                    print(self.run_command, type='run_command')\n\n            # continue_description = ''\n            # TODO: Wait for a specific string in the output or timeout?\n            response = self.project.ask_for_human_intervention(\n                user_description,\n                cbs={'r': lambda convo: run_command_until_success(convo, self.run_command,\n                                                                  # name the process so the LLM can kill it\n                                                                  command_id='app',\n                                                                  # If the app doesn't crash in the first 1st second\n                                                                  # assume it's good and leave it running.\n                                                                  # If timeout is None the conversation can't continue\n                                                                  timeout=None,\n                                                                  force=True,\n                                                                  return_cli_response=True, is_root_task=True)},\n                convo=iteration_convo,\n                is_root_task=True)\n\n            logger.info('response: %s', response)\n            user_feedback = response['user_input'] if 'user_input' in response else None\n            if user_feedback == 'continue':\n                return {\"success\": True, \"user_input\": user_feedback}\n\n            if user_feedback is not None:\n                iteration_convo = AgentConvo(self)\n                iteration_description = iteration_convo.send_message('development/iteration.prompt', {\n                    \"name\": self.project.args['name'],\n                    \"app_type\": self.project.args['app_type'],\n                    \"app_summary\": self.project.project_description,\n                    \"clarifications\": self.project.clarifications,\n                    \"user_stories\": self.project.user_stories,\n                    \"user_tasks\": self.project.user_tasks,\n                    \"technologies\": self.project.architecture,\n                    \"array_of_objects_to_string\": array_of_objects_to_string,  # TODO check why is this here\n                    \"directory_tree\": self.project.get_directory_tree(True),\n                    \"current_task\": development_task,\n                    \"development_tasks\": self.project.development_plan,\n                    \"files\": self.project.get_all_coded_files(),\n                    \"user_input\": user_feedback,\n                })\n\n                llm_response = iteration_convo.send_message('development/parse_task.prompt', {\n                    'running_processes': running_processes,\n                    'os': platform.system(),\n                }, IMPLEMENT_TASK)\n                iteration_convo.remove_last_x_messages(2)\n\n                task_steps = llm_response['tasks']\n                self.execute_task(iteration_convo, iteration_description, task_steps, is_root_task=True)\n\n    def set_up_environment(self):\n        self.project.current_step = ENVIRONMENT_SETUP_STEP\n        self.convo_os_specific_tech = AgentConvo(self)\n\n        # If this app_id already did this step, just get all data from DB and don't ask user again\n        step = get_progress_steps(self.project.args['app_id'], ENVIRONMENT_SETUP_STEP)\n        if step and not should_execute_step(self.project.args['step'], ENVIRONMENT_SETUP_STEP):\n            step_already_finished(self.project.args, step)\n            return\n\n        user_input = ''\n        while user_input.lower() != 'done':\n            print('done', type='button')\n            user_input = styled_text(self.project, 'Please set up your local environment so that the technologies listed can be utilized. When you\\'re done, write \"DONE\"')\n        save_progress(self.project.args['app_id'], self.project.current_step, {\n            \"os_specific_technologies\": [],\n            \"newly_installed_technologies\": [],\n            \"app_data\": generate_app_data(self.project.args)\n        })\n        return\n        # ENVIRONMENT SETUP\n        print(color_green_bold(\"Setting up the environment...\\n\"))\n        logger.info(\"Setting up the environment...\")\n\n        os_info = get_os_info()\n        llm_response = self.convo_os_specific_tech.send_message('development/env_setup/specs.prompt',\n                                                                {\n                                                                    \"name\": self.project.args['name'],\n                                                                    \"app_type\": self.project.args['app_type'],\n                                                                    \"os_info\": os_info,\n                                                                    \"technologies\": self.project.architecture\n                                                                }, FILTER_OS_TECHNOLOGIES)\n\n        os_specific_technologies = llm_response['technologies']\n        for technology in os_specific_technologies:\n            logger.info('Installing %s', technology)\n            llm_response = self.install_technology(technology)\n\n            # TODO: I don't think llm_response would ever be 'DONE'?\n            if llm_response != 'DONE':\n                llm_response = self.convo_os_specific_tech.send_message(\n                    'development/env_setup/unsuccessful_installation.prompt',\n                    {'technology': technology},\n                    EXECUTE_COMMANDS)\n                installation_commands = llm_response['commands']\n\n                if installation_commands is not None:\n                    for cmd in installation_commands:\n                        run_command_until_success(self.convo_os_specific_tech, cmd['command'], timeout=cmd['timeout'])\n\n        logger.info('The entire tech stack is installed and ready to be used.')\n\n        save_progress(self.project.args['app_id'], self.project.current_step, {\n            \"os_specific_technologies\": os_specific_technologies,\n            \"newly_installed_technologies\": [],\n            \"app_data\": generate_app_data(self.project.args)\n        })\n\n        # ENVIRONMENT SETUP END\n\n    # TODO: This is only called from the unreachable section of set_up_environment()\n    def install_technology(self, technology):\n        # TODO move the functions definitions to function_calls.py\n        llm_response = self.convo_os_specific_tech.send_message(\n            'development/env_setup/install_next_technology.prompt',\n            {'technology': technology}, {\n                'definitions': [{\n                    'name': 'execute_command',\n                    'description': f'Executes a command that should check if {technology} is installed on the machine. ',\n                    'parameters': {\n                        'type': 'object',\n                        'properties': {\n                            'command': {\n                                'type': 'string',\n                                'description': f'Command that needs to be executed to check if {technology} is installed on the machine.',\n                            },\n                            'timeout': {\n                                'type': 'number',\n                                'description': 'Timeout in seconds for the approximate time this command takes to finish.',\n                            }\n                        },\n                        'required': ['command', 'timeout'],\n                    },\n                }],\n                'functions': {\n                    'execute_command': lambda command, timeout: (command, timeout)\n                }\n            })\n\n        cli_response, llm_response = execute_command_and_check_cli_response(self.convo_os_specific_tech, llm_response)\n\n        return llm_response\n\n    def test_code_changes(self, code_monkey, convo):\n        return {\"success\": True}\n        logger.info('Testing code changes...')\n        llm_response = convo.send_message('development/task/step_check.prompt', {}, GET_TEST_TYPE)\n        test_type = llm_response['type']\n\n        if test_type == 'command_test':\n            command = llm_response['command']\n            return run_command_until_success(convo, command['command'], timeout=command['timeout'])\n        elif test_type == 'automated_test':\n            # TODO get code monkey to implement the automated test\n            pass\n        elif test_type == 'manual_test':\n            # TODO make the message better\n            return_value = {'success': False}\n            while not return_value['success']:\n                description = llm_response['manual_test_description']\n                response = self.project.ask_for_human_intervention(\n                    'I need your help. Can you please test if this was successful?',\n                    description,\n                )\n\n                user_feedback = response['user_input']\n                if user_feedback is not None and user_feedback != 'continue':\n                    self.debugger.debug(convo, user_input=user_feedback, issue_description=description)\n                else:\n                    return_value = {'success': True, 'user_input': user_feedback}\n\n            return return_value\n\n    def implement_step(self, convo, step_index, type, description):\n        logger.info('Implementing %s step #%d: %s', type, step_index, description)\n        # TODO remove hardcoded folder path\n        directory_tree = self.project.get_directory_tree(True)\n        llm_response = convo.send_message('development/task/next_step.prompt', {\n            'finished_steps': [],\n            'step_description': description,\n            'step_type': type,\n            'directory_tree': directory_tree,\n            'step_index': step_index\n        }, EXECUTE_COMMANDS)\n\n        step_details = llm_response['commands']\n\n        if type == 'COMMAND':\n            for cmd in step_details:\n                run_command_until_success(convo, cmd['command'], timeout=cmd['timeout'])\n        # elif type == 'CODE_CHANGE':\n        #     code_changes_details = get_step_code_changes()\n        #     # TODO: give to code monkey for implementation\n        pass\n","file":"/pilot/helpers/agents/Developer.py","fileHash":"0d85d908cc038e7de0ad336ba7e9ed864822bd6914b09ac5d9e850fd95263181","hash":"0d85d908cc038e7de0ad336ba7e9ed864822bd6914b09ac5d9e850fd95263181","processedContent":"import platform #undefined\nimport uuid #undefined\nimport re #undefined\n\nfrom const.messages import WHEN_USER_DONE\n\"\"\"\nscip-python python temp indexer `pilot.const.messages`/__init__:: This code defines a set of constants that are used to control the flow of a program. The first constant, `CHECK_AND_CONTINUE`, is a message that is displayed when something goes wrong and the user needs to be prompted to continue. The second constant, `WHEN_USER_DONE`, is a message that is displayed when the user is finished with a task and needs to be prompted to continue. The third and fourth constants, `AFFIRMATIVE_ANSWERS` and `NEGATIVE_ANSWERS`, define sets of strings that are used to determine whether a user's response indicates affirmative or negative sentiment.\nscip-python python temp indexer `pilot.const.messages`/WHEN_USER_DONE.: undefined\n\"\"\"\nfrom utils.style import ( #This code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\n    color_green, #undefined\n    color_green_bold, #undefined\n    color_red, #undefined\n    color_red_bold, #undefined\n    color_yellow_bold, #undefined\n    color_cyan_bold, #undefined\n    color_white_bold #undefined\n)\nfrom helpers.exceptions.TokenLimitError import TokenLimitError\n\"\"\"\nscip-python python temp indexer `pilot.helpers.exceptions.tokenlimiterror`/__init__:: This code defines constants for the maximum number of tokens allowed in a GPT model and the minimum number of tokens required for a response. It also sets the maximum number of questions that can be asked and the response when the conversation is complete.\nscip-python python temp indexer `pilot.helpers.exceptions.tokenlimiterror`/TokenLimitError#: This code defines a custom exception class called `TokenLimitError` that is raised when the number of tokens in a message exceeds the maximum allowed by the GPT model. The class takes two arguments: `tokens_in_messages` and `max_tokens`, which represent the number of tokens in the message and the maximum number of tokens allowed, respectively. The `__init__` method sets the instance variables and calls the parent class's constructor with a formatted error message.\n\"\"\"\nfrom const.code_execution import MAX_COMMAND_DEBUG_TRIES\n\"\"\"\nscip-python python temp indexer `pilot.const.code_execution`/__init__:: This code defines some constants that control the behavior of a command-line interface. The MAX_COMMAND_DEBUG_TRIES constant determines how many times the CLI will attempt to debug a command before giving up. The MAX_RECUSION_LAYER constant sets the maximum number of layers of recursion that the CLI will allow. The MIN_COMMAND_RUN_TIME and MAX_COMMAND_RUN_TIME constants set the minimum and maximum amount of time, in milliseconds, that a command can take to run. Finally, the MAX_COMMAND_OUTPUT_LENGTH constant sets the maximum length, in characters, of the output that the CLI will display for a command.\nscip-python python temp indexer `pilot.const.code_execution`/MAX_COMMAND_DEBUG_TRIES.: undefined\n\"\"\"\nfrom helpers.exceptions.TooDeepRecursionError import TooDeepRecursionError\n\"\"\"\nscip-python python temp indexer `pilot.helpers.exceptions.toodeeprecursionerror`/__init__:: This code defines a custom exception class called \"TooDeepRecursionError\" that is raised when the recursion depth exceeds a certain limit, indicating a potential infinite loop in the code.\nscip-python python temp indexer `pilot.helpers.exceptions.toodeeprecursionerror`/TooDeepRecursionError#: This code defines a custom exception class called \"TooDeepRecursionError\" that is raised when the recursion depth exceeds a certain limit.\n\"\"\"\nfrom helpers.Debugger import Debugger\n\"\"\"\nscip-python python temp indexer `pilot.helpers.debugger`/__init__:: The code defines a class called `Debugger` that allows developers to debug conversations with their chatbot by generating a plan for debugging using the LLM and receiving feedback on whether the debugging was successful or not.\nscip-python python temp indexer `pilot.helpers.debugger`/Debugger#: This code defines a class called `Debugger` that allows developers to debug conversations with their chatbot. It takes in a conversation object and a set of parameters, and then uses the LLM to generate a plan for debugging the conversation. The developer can then execute the plan and receive feedback on whether the debugging was successful or not.\n\"\"\"\nfrom utils.questionary import styled_text\n\"\"\"\nscip-python python temp indexer `pilot.utils.questionary`/__init__:: The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.utils.questionary`/styled_text().: This code defines a function called `styled_text` that retrieves user input from a database, styles the question, and saves the response to the database.\n\"\"\"\nfrom utils.utils import step_already_finished\n\"\"\"\nscip-python python temp indexer `pilot.utils.utils`/__init__:: The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.utils.utils`/step_already_finished().: This code updates the arguments with the app data from a step and then prints a success message to the console.\n\"\"\"\nfrom helpers.agents.CodeMonkey import CodeMonkey\n\"\"\"\nscip-python python temp indexer `pilot.helpers.agents.codemonkey`/__init__:: The code defines a class called \"CodeMonkey\" that represents a person who is working on a specific project. The class has two attributes: \"role\" and \"project\". The \"implement_code_changes\" method sends a message to the developer to implement changes in the code based on the task description and step index.\nscip-python python temp indexer `pilot.helpers.agents.codemonkey`/CodeMonkey#: This code defines a class called \"CodeMonkey\" that represents a person who is working on a specific project. The class has two attributes: \"role\" and \"project\". The \"implement_code_changes\" method sends a message to the developer to implement changes in the code based on the task description and step index.\n\"\"\"\nfrom logger.logger import logger\n\"\"\"\nscip-python python temp indexer `pilot.logger.logger`/__init__:: This code sets up a custom logger for an application, which filters sensitive information from log records and removes ANSI escape sequences.\nscip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n\"\"\"\nfrom helpers.Agent import Agent\n\"\"\"\nscip-python python temp indexer `pilot.helpers.agent`/__init__:: This code defines a class called \"Agent\" that represents a person who is working on a specific project. The class has two attributes: \"role\" and \"project\". The \"role\" attribute specifies the type of work the agent is doing, and the \"project\" attribute specifies the project they are working on.\nscip-python python temp indexer `pilot.helpers.agent`/Agent#: This code defines a class called \"Agent\" that represents a person who is working on a specific project. The class has two attributes: \"role\" and \"project\". The \"role\" attribute specifies the type of work the agent is doing, and the \"project\" attribute specifies the project they are working on.\n\"\"\"\nfrom helpers.AgentConvo import AgentConvo\n\"\"\"\nscip-python python temp indexer `pilot.helpers.agentconvo`/__init__:: The code defines a class called `AgentConvo` that represents a conversation with an agent, including functions for sending and receiving messages, formatting and rendering prompts, and error handling for GPT model token limits.\nscip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#: This code defines a class called `AgentConvo` that represents a conversation with an agent. It includes functions for sending and receiving messages, as well as formatting and rendering prompts. The code also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n\"\"\"\nfrom utils.utils import should_execute_step, array_of_objects_to_string, generate_app_data\n\"\"\"\nscip-python python temp indexer `pilot.utils.utils`/__init__:: The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.utils.utils`/should_execute_step().: This code checks if the current step should be executed based on the argument passed in and the current step. It returns true if the current step is greater than or equal to the argument step.\nscip-python python temp indexer `pilot.utils.utils`/array_of_objects_to_string().: This code takes an array of objects and returns a string representation of the array, with each object's key-value pairs separated by a newline.\nscip-python python temp indexer `pilot.utils.utils`/generate_app_data().: This code defines a function called `generate_app_data` that takes an argument called `args`. The function returns a dictionary with two keys: `app_id` and `app_type`, both of which are values from the `args` dictionary.\n\"\"\"\nfrom helpers.cli import run_command_until_success, execute_command_and_check_cli_response, running_processes\n\"\"\"\nscip-python python temp indexer `pilot.helpers.cli`/__init__:: The code defines a command-line interface (CLI) that allows users to execute commands and interact with a language model. It includes functions for running commands, checking their output, and handling errors.\nscip-python python temp indexer `pilot.helpers.cli`/run_command_until_success().: This code defines a function called `run_command_until_success` that runs a command until it succeeds or reaches a timeout. It also checks if the command was successful by checking the exit code of the process that ran the command.\nscip-python python temp indexer `pilot.helpers.cli`/execute_command_and_check_cli_response().: This code defines a function called `execute_command_and_check_cli_response` that takes in a command, project, and other parameters. It executes the command in a subprocess and captures its output in two queues. The function also checks if a process with the same ID is running, and if so, it terminates that process.\nscip-python python temp indexer `pilot.helpers.cli`/running_processes.running_processes.: undefined\n\"\"\"\nfrom const.function_calls import FILTER_OS_TECHNOLOGIES, EXECUTE_COMMANDS, GET_TEST_TYPE, IMPLEMENT_TASK, \\\n\"\"\"\nscip-python python temp indexer `pilot.const.function_calls`/__init__:: The code is a collection of functions and definitions that are used to implement various tasks in a development process. It includes functions for processing user stories, tasks, technologies, commands, and files, as well as definitions for breaking down development tasks into smaller steps and implementing code changes.\nscip-python python temp indexer `pilot.const.function_calls`/FILTER_OS_TECHNOLOGIES.: undefined\nscip-python python temp indexer `pilot.const.function_calls`/EXECUTE_COMMANDS.: undefined\nscip-python python temp indexer `pilot.const.function_calls`/GET_TEST_TYPE.: undefined\nscip-python python temp indexer `pilot.const.function_calls`/IMPLEMENT_TASK.: undefined\n\"\"\"\n    COMMAND_TO_RUN, GET_FULLY_CODED_FILE\n    \"\"\"\n    scip-python python temp indexer `pilot.const.function_calls`/COMMAND_TO_RUN.: undefined\n    scip-python python temp indexer `pilot.const.function_calls`/GET_FULLY_CODED_FILE.: undefined\n    \"\"\"\nfrom database.database import save_progress, get_progress_steps, update_app_status\n\"\"\"\nscip-python python temp indexer `pilot.database.database`/__init__:: The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.database.database`/save_progress().: This code defines a function called `save_progress` that saves progress data for an app in a database. It retrieves the app entity from the database based on its ID, creates or updates a record in a table based on the step provided, and updates the status of the app in the database.\nscip-python python temp indexer `pilot.database.database`/get_progress_steps().: This code defines a function called `get_progress_steps` that retrieves progress steps for a given application ID. It uses a dictionary to map progress step names to their corresponding model classes, and it returns a dictionary of progress steps with their corresponding data.\nscip-python python temp indexer `pilot.database.database`/update_app_status().: This code updates the status of an app in the database. It retrieves the app with the specified ID, sets its status to the new status provided, and saves the changes. If the app does not exist, it returns False.\n\"\"\"\nfrom utils.utils import get_os_info\n\"\"\"\nscip-python python temp indexer `pilot.utils.utils`/__init__:: The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.utils.utils`/get_os_info().: This code defines a function called `get_os_info()` that returns a dictionary containing information about the operating system, such as the OS name, version, architecture, and machine. The function uses the `platform` module to gather this information, and then converts the dictionary to a readable text format.\n\"\"\"\n\nENVIRONMENT_SETUP_STEP = 'environment_setup'\n\n\nclass Developer(Agent):\n    \"\"\"The code defines a class called \"Developer\" that represents a person working on a specific project. It has functions for implementing tasks, running commands, and handling human intervention during the development process.\"\"\"\n    pass\n","documentation":"The code defines a class called \"Developer\" that represents a person working on a specific project, and includes functions for implementing tasks, running commands, and handling human intervention during the development process."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#","language":"python","range":[34,0,660,12],"content":"class Developer(Agent):\n    def __init__(self, project):\n        super().__init__('full_stack_developer', project)\n        self.run_command = None\n        self.save_dev_steps = True\n        self.debugger = Debugger(self)\n\n    def start_coding(self):\n        if not self.project.finished:\n            self.project.current_step = 'coding'\n            update_app_status(self.project.args['app_id'], self.project.current_step)\n\n            if self.project.skip_steps is None:\n                self.project.skip_steps = False if (not self.project.continuing_project or ('skip_until_dev_step' in self.project.args and self.project.args['skip_until_dev_step'] == '0')) else True\n\n        # DEVELOPMENT\n        print(color_green_bold(\"🚀 Now for the actual development...\\n\"))\n        logger.info(\"Starting to create the actual code...\")\n\n        total_tasks = len(self.project.development_plan)\n        progress_thresholds = [50]  # Percentages of progress when documentation is created\n        documented_thresholds = set()\n\n        for i, dev_task in enumerate(self.project.development_plan):\n            current_progress_percent = round((i / total_tasks) * 100, 2)\n\n            for threshold in progress_thresholds:\n                if current_progress_percent > threshold and threshold not in documented_thresholds:\n                    self.project.technical_writer.document_project(current_progress_percent)\n                    documented_thresholds.add(threshold)\n\n            self.implement_task(i, dev_task)\n\n        # DEVELOPMENT END\n        self.project.technical_writer.document_project(100)\n        self.project.dot_pilot_gpt.chat_log_folder(None)\n        if not self.project.finished:\n            self.project.finished = True\n            update_app_status(self.project.args['app_id'], self.project.current_step)\n            message = 'The app is DONE!!! Yay...you can use it now.\\n'\n            logger.info(message)\n            print(color_green_bold(message))\n        else:\n            message = 'Feature complete!\\n'\n            logger.info(message)\n            print(color_green_bold(message))\n\n    def implement_task(self, i, development_task=None):\n        print(color_green_bold(f'Implementing task #{i + 1}: ') + color_green(f' {development_task[\"description\"]}\\n'))\n        self.project.dot_pilot_gpt.chat_log_folder(i + 1)\n\n        convo_dev_task = AgentConvo(self)\n        convo_dev_task.send_message('development/task/breakdown.prompt', {\n            \"name\": self.project.args['name'],\n            \"app_type\": self.project.args['app_type'],\n            \"app_summary\": self.project.project_description,\n            \"clarifications\": self.project.clarifications,\n            \"user_stories\": self.project.user_stories,\n            \"user_tasks\": self.project.user_tasks,\n            \"technologies\": self.project.architecture,\n            \"array_of_objects_to_string\": array_of_objects_to_string,  # TODO check why is this here\n            \"directory_tree\": self.project.get_directory_tree(True),\n            \"current_task_index\": i,\n            \"development_tasks\": self.project.development_plan,\n            \"files\": self.project.get_all_coded_files(),\n            \"task_type\": 'feature' if self.project.finished else 'app'\n        })\n\n        response = convo_dev_task.send_message('development/parse_task.prompt', {\n            'running_processes': running_processes,\n            'os': platform.system(),\n        }, IMPLEMENT_TASK)\n        steps = response['tasks']\n        convo_dev_task.remove_last_x_messages(2)\n\n        completed_steps = []\n\n        while True:\n            result = self.execute_task(convo_dev_task,\n                                       development_task['description'],\n                                       steps,\n                                       development_task=development_task,\n                                       continue_development=True,\n                                       is_root_task=True,\n                                       continue_from_step=len(completed_steps))\n\n            if result['success']:\n                break\n\n            if 'step_index' in result:\n                result['os'] = platform.system()\n                step_index = result['step_index']\n                completed_steps = steps[:step_index + 1]\n                result['completed_steps'] = completed_steps\n                result['current_step'] = steps[step_index]\n                result['next_steps'] = steps[step_index + 1:]\n                result['current_step_index'] = step_index\n\n                convo_dev_task.remove_last_x_messages(2)\n                # todo before updating task first check if update is needed\n                response = convo_dev_task.send_message('development/task/update_task.prompt', result, IMPLEMENT_TASK)\n                steps = completed_steps + response['tasks']\n\n            else:\n                logger.warning('Testing at end of task failed')\n                break\n\n    def replace_old_code_comments(self, files_with_changes):\n        files_with_comments = [{**file, 'comments': [line for line in file['content'].split('\\n') if '[OLD CODE]' in line]} for file in files_with_changes]\n\n        for file in files_with_comments:\n            if len(file['comments']) > 0:\n                fully_coded_file_convo = AgentConvo(self)\n                fully_coded_file_response = fully_coded_file_convo.send_message(\n                    'development/get_fully_coded_file.prompt', {\n                        'file': self.project.get_files([file['path']])[0],\n                        'new_file': file,\n                    }, GET_FULLY_CODED_FILE)\n\n                file['content'] = fully_coded_file_response['file_content']\n\n        return files_with_comments\n\n    def step_code_change(self, convo, task_description, step, i, test_after_code_changes):\n        if 'code_change_description' in step:\n            # TODO this should be refactored so it always uses the same function call\n            print(f'Implementing code changes for `{step[\"code_change_description\"]}`')\n            code_monkey = CodeMonkey(self.project, self)\n            updated_convo = code_monkey.implement_code_changes(convo, task_description, step['code_change_description'],\n                                                               step, i)\n            if test_after_code_changes:\n                return self.test_code_changes(code_monkey, updated_convo)\n            else:\n                return {\"success\": True}\n\n        # TODO fix this - the problem is in GPT response that sometimes doesn't return the correct JSON structure\n        if 'code_change' not in step:\n            data = step\n        else:\n            data = step['code_change']\n\n        data = self.replace_old_code_comments([data])[0]\n\n        self.project.save_file(data)\n        # TODO end\n        return {\"success\": True}\n\n    def step_command_run(self, convo, step, i, success_with_cli_response=False):\n        logger.info('Running command: %s', step['command'])\n        # TODO fix this - the problem is in GPT response that sometimes doesn't return the correct JSON structure\n        if isinstance(step['command'], str):\n            data = step\n        else:\n            data = step['command']\n        # TODO END\n        additional_message = ''  # 'Let\\'s start with the step #0:\\n' if i == 0 else f'So far, steps { \", \".join(f\"#{j}\" for j in range(i+1)) } are finished so let\\'s do step #{i + 1} now.\\n'\n\n        command_id = data['command_id'] if 'command_id' in data else None\n        success_message = data['success_message'] if 'success_message' in data else None\n\n        return run_command_until_success(convo, data['command'],\n                                         timeout=data['timeout'],\n                                         command_id=command_id,\n                                         success_message=success_message,\n                                         additional_message=additional_message,\n                                         success_with_cli_response=success_with_cli_response)\n\n    def step_human_intervention(self, convo, step: dict):\n        \"\"\"\n        :param convo:\n        :param step: {'human_intervention_description': 'some description'}\n        :return: {\n          'success': bool\n          'user_input': string_from_human\n        }\n        \"\"\"\n        logger.info('Human intervention needed%s: %s',\n                    '' if self.run_command is None else f' for command `{self.run_command}`',\n                    step['human_intervention_description'])\n\n        while True:\n            human_intervention_description = step['human_intervention_description']\n\n            if not self.run_command:\n                self.get_run_command(convo)\n\n            if self.run_command:\n                if (self.project.ipc_client_instance is None or self.project.ipc_client_instance.client is None):\n                    human_intervention_description += color_yellow_bold('\\n\\nIf you want to run the app, just type \"r\" and press ENTER and that will run `' + self.run_command + '`')\n                else:\n                    print(self.run_command, type='run_command')\n\n            response = self.project.ask_for_human_intervention('I need human intervention:',\n                human_intervention_description,\n                cbs={\n                    'r': lambda conv: run_command_until_success(conv,\n                                                                self.run_command,\n                                                                # name the process so the LLM can kill it\n                                                                command_id='app',\n                                                                # If the app doesn't crash in the first 1st second\n                                                                # assume it's good and leave it running.\n                                                                # If timeout is None the conversation can't continue\n                                                                timeout=None,\n                                                                force=True,\n                                                                return_cli_response=True)\n                },\n                convo=convo)\n\n            logger.info('human response: %s', response)\n            if 'user_input' not in response:\n                continue\n\n            if response['user_input'] == 'continue':\n                response['success'] = True\n            else:\n                response['success'] = self.debugger.debug(convo,\n                                                          user_input=response['user_input'],\n                                                          issue_description=step['human_intervention_description'])\n                # TODO add review\n\n            return response\n\n    def step_test(self, convo, test_command):\n        # TODO: don't re-run if it's already running\n        should_rerun_command = convo.send_message('dev_ops/should_rerun_command.prompt', test_command)\n        if should_rerun_command == 'NO':\n            return {'success': True}\n        elif should_rerun_command == 'YES':\n            logger.info('Re-running test command: %s', test_command)\n            cli_response, llm_response = execute_command_and_check_cli_response(convo, test_command)\n            logger.info('After running command llm_response: ' + llm_response)\n            if llm_response == 'NEEDS_DEBUGGING':\n                print(color_red('Got incorrect CLI response:'))\n                print(cli_response)\n                print(color_red('-------------------'))\n\n            result = {\n                'success': llm_response in [\"DONE\", \"SKIP\"],\n                'cli_response': cli_response\n            }\n            if cli_response is None:\n                result['user_input'] = llm_response\n            else:\n                result['llm_response'] = llm_response\n            return result\n\n    def get_run_command(self, convo):\n        llm_response = convo.send_message('development/get_run_command.prompt', {}, COMMAND_TO_RUN)\n        self.run_command = llm_response['command']\n\n        # Pattern for triple backtick code block with optional language\n        triple_backtick_pattern = r\"```(?:\\w+\\n)?(.*?)```\"\n        triple_match = re.search(triple_backtick_pattern, self.run_command, re.DOTALL)\n        # Pattern for single backtick\n        single_backtick_pattern = r\"`(.*?)`\"\n        single_match = re.search(single_backtick_pattern, self.run_command, re.DOTALL)\n\n        if triple_match:\n            self.run_command = triple_match.group(1).strip()\n        elif single_match:\n            self.run_command = single_match.group(1).strip()\n\n    def task_postprocessing(self, convo, development_task, continue_development, task_result, last_branch_name):\n        # TODO: why does `run_command` belong to the Developer class, rather than just being passed?\n        #       ...It's set by execute_task() -> task_postprocessing(), but that is called by various sources.\n        #       What is it at step_human_intervention()?\n        self.get_run_command(convo)\n\n        if development_task is not None:\n            convo.remove_last_x_messages(2)\n            detailed_user_review_goal = convo.send_message('development/define_user_review_goal.prompt', {\n                'os': platform.system()\n            }, should_log_message=False)\n            convo.remove_last_x_messages(2)\n\n        try:\n            if continue_development:\n                continue_description = detailed_user_review_goal if detailed_user_review_goal is not None else None\n                return self.continue_development(convo, last_branch_name, continue_description, development_task)\n        except TooDeepRecursionError as e:\n            logger.warning('Too deep recursion error. Call dev_help_needed() for human_intervention: %s', e.message)\n            return self.dev_help_needed({\"type\": \"human_intervention\", \"human_intervention_description\": e.message})\n\n        return task_result\n\n    def should_retry_step_implementation(self, step, step_implementation_try):\n        if step_implementation_try >= MAX_COMMAND_DEBUG_TRIES:\n            self.dev_help_needed(step)\n\n        print(color_red_bold('\\n--------- LLM Reached Token Limit ----------'))\n        print(color_red_bold('Can I retry implementing the entire development step?'))\n\n        answer = ''\n        while answer != 'y':\n            answer = styled_text(\n                self.project,\n                'Type y/n'\n            )\n\n            logger.info(\"Retry step implementation? %s\", answer)\n            if answer == 'n':\n                return self.dev_help_needed(step)\n\n        return {\"success\": False, \"retry\": True}\n\n    def dev_help_needed(self, step):\n\n        if step['type'] == 'command':\n            help_description = (\n                        color_red_bold('I tried running the following command but it doesn\\'t seem to work:\\n\\n') +\n                        color_white_bold(step['command']['command']) +\n                        color_red_bold('\\n\\nCan you please make it work?'))\n        elif step['type'] == 'code_change':\n            help_description = step['code_change_description']\n        elif step['type'] == 'human_intervention':\n            help_description = step['human_intervention_description']\n\n        # TODO remove this\n        def extract_substring(s):\n            start_idx = s.find('```')\n            end_idx = s.find('```', start_idx + 3)\n\n            if start_idx != -1 and end_idx != -1:\n                return s[start_idx + 3:end_idx]\n            else:\n                return s\n\n        # TODO end\n\n        answer = ''\n        while answer.lower() != 'continue':\n            print(color_red_bold('\\n----------------------------- I need your help ------------------------------'))\n            print(extract_substring(str(help_description)))\n            print(color_red_bold('\\n-----------------------------------------------------------------------------'))\n            print('continue', type='button')\n            answer = styled_text(\n                self.project,\n                WHEN_USER_DONE\n            )\n            logger.info(\"help needed: %s\", answer)\n\n        return {\"success\": True, \"user_input\": answer}\n\n    def execute_task(self, convo, task_description, task_steps, test_command=None, reset_convo=True,\n                     test_after_code_changes=True, continue_development=False,\n                     development_task=None, is_root_task=False, continue_from_step=0):\n        function_uuid = str(uuid.uuid4())\n        convo.save_branch(function_uuid)\n\n        for (i, step) in enumerate(task_steps):\n            # Skip steps before continue_from_step\n            if i < continue_from_step:\n                continue\n            logger.info('---------- execute_task() step #%d: %s', i, step)\n\n            result = None\n            step_implementation_try = 0\n            need_to_see_output = 'need_to_see_output' in step and step['need_to_see_output']\n\n            while True:\n                try:\n                    if reset_convo:\n                        convo.load_branch(function_uuid)\n\n                    if step['type'] == 'command':\n                        result = self.step_command_run(convo, step, i, success_with_cli_response=need_to_see_output)\n                        # if need_to_see_output and 'cli_response' in result:\n                        #     result['user_input'] = result['cli_response']\n\n                    elif step['type'] == 'code_change':\n                        result = self.step_code_change(convo, task_description, step, i, test_after_code_changes)\n\n                    elif step['type'] == 'human_intervention':\n                        result = self.step_human_intervention(convo, step)\n\n                    # TODO background_command - if we run commands in background we should have way to kill processes\n                    #  and that should be added to function_calls.py DEBUG_STEPS_BREAKDOWN and IMPLEMENT_TASK\n                    # elif step['type'] == 'kill_process':\n                    #     terminate_named_process(step['kill_process'])\n                    #     result = {'success': True}\n\n                    logger.info('  step result: %s', result)\n\n                    if (not result['success']) or (need_to_see_output and result.get(\"user_input\") != \"SKIP\"):\n                        result['step'] = step\n                        result['step_index'] = i\n                        return result\n\n                    if test_command is not None and ('check_if_fixed' not in step or step['check_if_fixed']):\n                        logger.info('check_if_fixed: %s', test_command)\n                        result = self.step_test(convo, test_command)\n                        logger.info('task result: %s', result)\n                        return result\n\n                    break\n                except TokenLimitError as e:\n                    if is_root_task:\n                        response = self.should_retry_step_implementation(step, step_implementation_try)\n                        if 'retry' in response:\n                            # TODO we can rewind this convo even more\n                            convo.load_branch(function_uuid)\n                            continue\n                        elif 'success' in response:\n                            result = response\n                            break\n                    else:\n                        raise e\n                except TooDeepRecursionError as e:\n                    if is_root_task:\n                        result = self.dev_help_needed(step)\n                        break\n                    else:\n                        raise e\n\n        result = {\"success\": True}  # if all steps are finished, the task has been successfully implemented\n        convo.load_branch(function_uuid)\n        return self.task_postprocessing(convo, development_task, continue_development, result, function_uuid)\n\n    def continue_development(self, iteration_convo, last_branch_name, continue_description='', development_task=None):\n        while True:\n            logger.info('Continue development, last_branch_name: %s', last_branch_name)\n            if last_branch_name in iteration_convo.branches.keys():  # if user_feedback is not None we create new convo\n                iteration_convo.load_branch(last_branch_name)\n            user_description = ('Here is a description of what should be working: \\n\\n' + color_cyan_bold(\n                continue_description) + '\\n') \\\n                if continue_description != '' else ''\n            user_description = 'Can you check if the app works please? ' + user_description\n\n            if self.run_command:\n                if self.project.ipc_client_instance is None or self.project.ipc_client_instance.client is None:\n                    user_description += color_yellow_bold(\n                        '\\n\\nIf you want to run the app, just type \"r\" and press ENTER and that will run `' + self.run_command + '`')\n                else:\n                    print(self.run_command, type='run_command')\n\n            # continue_description = ''\n            # TODO: Wait for a specific string in the output or timeout?\n            response = self.project.ask_for_human_intervention(\n                user_description,\n                cbs={'r': lambda convo: run_command_until_success(convo, self.run_command,\n                                                                  # name the process so the LLM can kill it\n                                                                  command_id='app',\n                                                                  # If the app doesn't crash in the first 1st second\n                                                                  # assume it's good and leave it running.\n                                                                  # If timeout is None the conversation can't continue\n                                                                  timeout=None,\n                                                                  force=True,\n                                                                  return_cli_response=True, is_root_task=True)},\n                convo=iteration_convo,\n                is_root_task=True)\n\n            logger.info('response: %s', response)\n            user_feedback = response['user_input'] if 'user_input' in response else None\n            if user_feedback == 'continue':\n                return {\"success\": True, \"user_input\": user_feedback}\n\n            if user_feedback is not None:\n                iteration_convo = AgentConvo(self)\n                iteration_description = iteration_convo.send_message('development/iteration.prompt', {\n                    \"name\": self.project.args['name'],\n                    \"app_type\": self.project.args['app_type'],\n                    \"app_summary\": self.project.project_description,\n                    \"clarifications\": self.project.clarifications,\n                    \"user_stories\": self.project.user_stories,\n                    \"user_tasks\": self.project.user_tasks,\n                    \"technologies\": self.project.architecture,\n                    \"array_of_objects_to_string\": array_of_objects_to_string,  # TODO check why is this here\n                    \"directory_tree\": self.project.get_directory_tree(True),\n                    \"current_task\": development_task,\n                    \"development_tasks\": self.project.development_plan,\n                    \"files\": self.project.get_all_coded_files(),\n                    \"user_input\": user_feedback,\n                })\n\n                llm_response = iteration_convo.send_message('development/parse_task.prompt', {\n                    'running_processes': running_processes,\n                    'os': platform.system(),\n                }, IMPLEMENT_TASK)\n                iteration_convo.remove_last_x_messages(2)\n\n                task_steps = llm_response['tasks']\n                self.execute_task(iteration_convo, iteration_description, task_steps, is_root_task=True)\n\n    def set_up_environment(self):\n        self.project.current_step = ENVIRONMENT_SETUP_STEP\n        self.convo_os_specific_tech = AgentConvo(self)\n\n        # If this app_id already did this step, just get all data from DB and don't ask user again\n        step = get_progress_steps(self.project.args['app_id'], ENVIRONMENT_SETUP_STEP)\n        if step and not should_execute_step(self.project.args['step'], ENVIRONMENT_SETUP_STEP):\n            step_already_finished(self.project.args, step)\n            return\n\n        user_input = ''\n        while user_input.lower() != 'done':\n            print('done', type='button')\n            user_input = styled_text(self.project, 'Please set up your local environment so that the technologies listed can be utilized. When you\\'re done, write \"DONE\"')\n        save_progress(self.project.args['app_id'], self.project.current_step, {\n            \"os_specific_technologies\": [],\n            \"newly_installed_technologies\": [],\n            \"app_data\": generate_app_data(self.project.args)\n        })\n        return\n        # ENVIRONMENT SETUP\n        print(color_green_bold(\"Setting up the environment...\\n\"))\n        logger.info(\"Setting up the environment...\")\n\n        os_info = get_os_info()\n        llm_response = self.convo_os_specific_tech.send_message('development/env_setup/specs.prompt',\n                                                                {\n                                                                    \"name\": self.project.args['name'],\n                                                                    \"app_type\": self.project.args['app_type'],\n                                                                    \"os_info\": os_info,\n                                                                    \"technologies\": self.project.architecture\n                                                                }, FILTER_OS_TECHNOLOGIES)\n\n        os_specific_technologies = llm_response['technologies']\n        for technology in os_specific_technologies:\n            logger.info('Installing %s', technology)\n            llm_response = self.install_technology(technology)\n\n            # TODO: I don't think llm_response would ever be 'DONE'?\n            if llm_response != 'DONE':\n                llm_response = self.convo_os_specific_tech.send_message(\n                    'development/env_setup/unsuccessful_installation.prompt',\n                    {'technology': technology},\n                    EXECUTE_COMMANDS)\n                installation_commands = llm_response['commands']\n\n                if installation_commands is not None:\n                    for cmd in installation_commands:\n                        run_command_until_success(self.convo_os_specific_tech, cmd['command'], timeout=cmd['timeout'])\n\n        logger.info('The entire tech stack is installed and ready to be used.')\n\n        save_progress(self.project.args['app_id'], self.project.current_step, {\n            \"os_specific_technologies\": os_specific_technologies,\n            \"newly_installed_technologies\": [],\n            \"app_data\": generate_app_data(self.project.args)\n        })\n\n        # ENVIRONMENT SETUP END\n\n    # TODO: This is only called from the unreachable section of set_up_environment()\n    def install_technology(self, technology):\n        # TODO move the functions definitions to function_calls.py\n        llm_response = self.convo_os_specific_tech.send_message(\n            'development/env_setup/install_next_technology.prompt',\n            {'technology': technology}, {\n                'definitions': [{\n                    'name': 'execute_command',\n                    'description': f'Executes a command that should check if {technology} is installed on the machine. ',\n                    'parameters': {\n                        'type': 'object',\n                        'properties': {\n                            'command': {\n                                'type': 'string',\n                                'description': f'Command that needs to be executed to check if {technology} is installed on the machine.',\n                            },\n                            'timeout': {\n                                'type': 'number',\n                                'description': 'Timeout in seconds for the approximate time this command takes to finish.',\n                            }\n                        },\n                        'required': ['command', 'timeout'],\n                    },\n                }],\n                'functions': {\n                    'execute_command': lambda command, timeout: (command, timeout)\n                }\n            })\n\n        cli_response, llm_response = execute_command_and_check_cli_response(self.convo_os_specific_tech, llm_response)\n\n        return llm_response\n\n    def test_code_changes(self, code_monkey, convo):\n        return {\"success\": True}\n        logger.info('Testing code changes...')\n        llm_response = convo.send_message('development/task/step_check.prompt', {}, GET_TEST_TYPE)\n        test_type = llm_response['type']\n\n        if test_type == 'command_test':\n            command = llm_response['command']\n            return run_command_until_success(convo, command['command'], timeout=command['timeout'])\n        elif test_type == 'automated_test':\n            # TODO get code monkey to implement the automated test\n            pass\n        elif test_type == 'manual_test':\n            # TODO make the message better\n            return_value = {'success': False}\n            while not return_value['success']:\n                description = llm_response['manual_test_description']\n                response = self.project.ask_for_human_intervention(\n                    'I need your help. Can you please test if this was successful?',\n                    description,\n                )\n\n                user_feedback = response['user_input']\n                if user_feedback is not None and user_feedback != 'continue':\n                    self.debugger.debug(convo, user_input=user_feedback, issue_description=description)\n                else:\n                    return_value = {'success': True, 'user_input': user_feedback}\n\n            return return_value\n\n    def implement_step(self, convo, step_index, type, description):\n        logger.info('Implementing %s step #%d: %s', type, step_index, description)\n        # TODO remove hardcoded folder path\n        directory_tree = self.project.get_directory_tree(True)\n        llm_response = convo.send_message('development/task/next_step.prompt', {\n            'finished_steps': [],\n            'step_description': description,\n            'step_type': type,\n            'directory_tree': directory_tree,\n            'step_index': step_index\n        }, EXECUTE_COMMANDS)\n\n        step_details = llm_response['commands']\n\n        if type == 'COMMAND':\n            for cmd in step_details:\n                run_command_until_success(convo, cmd['command'], timeout=cmd['timeout'])\n        # elif type == 'CODE_CHANGE':\n        #     code_changes_details = get_step_code_changes()\n        #     # TODO: give to code monkey for implementation\n        pass","file":"/pilot/helpers/agents/Developer.py","fileHash":"0d85d908cc038e7de0ad336ba7e9ed864822bd6914b09ac5d9e850fd95263181","hash":"acb95653022f3bb7c977e80c8a0eab485177ebf91bd2611df9040fbe7ac250c2","processedContent":"class Developer(Agent): #This code defines a class called \"Agent\" that represents a person who is working on a specific project. The class has two attributes: \"role\" and \"project\". The \"role\" attribute specifies the type of work the agent is doing, and the \"project\" attribute specifies the project they are working on.\n    def __init__(self, project):\n        \"\"\"This code defines a constructor for a class that initializes an object with a role and a project, sets the object's run command to None, saves developer steps, and initializes a debugger.\"\"\"\n        pass\n\n    def start_coding(self):\n        \"\"\"This code is a part of a larger program that automates the development process for an app. It checks the status of the app, updates the status in the database, and then starts the development process by printing a message to the console and logging a message to a file.\"\"\"\n        pass\n\n    def implement_task(self, i, development_task=None):\n        \"\"\"The code defines a function called `implement_task` that takes in a task description and step index, and executes the steps in the task until it succeeds or reaches a timeout. It also checks if the command was successful by checking the exit code of the process that ran the command.\"\"\"\n        pass\n\n    def replace_old_code_comments(self, files_with_changes):\n        \"\"\"This code defines a function called `replace_old_code_comments` that takes a list of files with changes and replaces any comments containing the string \"[OLD CODE]\" with fully coded versions of those comments.\"\"\"\n        pass\n\n    def step_code_change(self, convo, task_description, step, i, test_after_code_changes):\n        \"\"\"This code defines a function called `step_code_change` that implements changes to the code based on a task description and step index. It uses a class called `CodeMonkey` to send messages to a developer and receive feedback on the changes made. The function then replaces old code comments with new ones and saves the changes to the project files.\"\"\"\n        pass\n\n    def step_command_run(self, convo, step, i, success_with_cli_response=False):\n        \"\"\"This code defines a function called `run_command_until_success` that runs a command until it succeeds or reaches a timeout. It also checks if the command was successful by checking the exit code of the process that ran the command.\"\"\"\n        pass\n\n    def step_human_intervention(self, convo, step: dict):\n        \"\"\"The code defines a function called `step_human_intervention` that handles human intervention during the development process. It retrieves a command to run from a conversation object, runs the command until it succeeds or reaches a timeout, and then updates the debug plan based on the user's response.\"\"\"\n        pass\n\n    def step_test(self, convo, test_command):\n        \"\"\"This code defines a function called `step_test` that takes in a command and executes it in a subprocess. It also checks if a process with the same ID is running, and if so, it terminates that process. The function then captures the output of the command in two queues and returns a dictionary containing the success status and the CLI response.\"\"\"\n        pass\n\n    def get_run_command(self, convo):\n        \"\"\"This code defines a function called `get_run_command` that retrieves a command to run from a conversation object. It uses regular expressions to extract the command from the conversation, and then executes it.\"\"\"\n        pass\n\n    def task_postprocessing(self, convo, development_task, continue_development, task_result, last_branch_name):\n        \"\"\"This code defines a function called `task_postprocessing` that retrieves a command to run from a conversation object, executes it, and then continues the development process if necessary.\"\"\"\n        pass\n\n    def should_retry_step_implementation(self, step, step_implementation_try):\n        \"\"\"This code defines a function called `should_retry_step_implementation` that checks if the maximum number of command debug tries has been reached. If it has, it prompts the user to retry implementing the entire development step. The user's response is then checked, and if they say no, the function returns a dictionary with a \"success\" key set to False and a \"retry\" key set to True.\"\"\"\n        pass\n\n    def dev_help_needed(self, step):\n        \"\"\"This code defines a function called `dev_help_needed` that retrieves user input from a database, styles the question, and saves the response to the database.\"\"\"\n        pass\n\n    def execute_task(self, convo, task_description, task_steps, test_command=None, reset_convo=True,\n                     \"\"\"The code defines a function called `execute_task` that takes in a task description and step index, and executes the steps in the task until it succeeds or reaches a timeout. It also checks if the command was successful by checking the exit code of the process that ran the command.\"\"\"\n                     pass\n\n    def continue_development(self, iteration_convo, last_branch_name, continue_description='', development_task=None):\n        \"\"\"The code defines a function called `continue_development` that allows the user to continue developing an app by asking for feedback on the current iteration and then executing the next task in the development plan.\"\"\"\n        pass\n\n    def set_up_environment(self):\n        \"\"\"This code sets up the environment for a project by installing the necessary technologies and saving the progress in a database.\"\"\"\n        pass\n\n        # ENVIRONMENT SETUP END\n\n    # TODO: This is only called from the unreachable section of set_up_environment()\n    def install_technology(self, technology):\n        \"\"\"The code defines a function called `install_technology` that sends a message in a conversation to check if a technology is installed on the machine. It also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\"\"\"\n        pass\n\n    def test_code_changes(self, code_monkey, convo):\n        \"\"\"This code is a function that tests the changes made to the code by a developer. It sends a message to the user asking for their input on whether the changes were successful or not. If the user provides feedback, the code will debug the issue and send another message to the user for further assistance.\"\"\"\n        pass\n\n    def implement_step(self, convo, step_index, type, description):\n        logger.info('Implementing %s step #%d: %s', type, step_index, description)\n        # TODO remove hardcoded folder path\n        directory_tree = self.project.get_directory_tree(True)\n        llm_response = convo.send_message('development/task/next_step.prompt', {\n            'finished_steps': [],\n            'step_description': description,\n            'step_type': type,\n            'directory_tree': directory_tree,\n            'step_index': step_index\n        }, EXECUTE_COMMANDS)\n\n        step_details = llm_response['commands']\n\n        if type == 'COMMAND':\n            for cmd in step_details:\n                run_command_until_success(convo, cmd['command'], timeout=cmd['timeout'])\n        # elif type == 'CODE_CHANGE':\n        #     code_changes_details = get_step_code_changes()\n        #     # TODO: give to code monkey for implementation\n        pass","documentation":"The code defines a class called \"Developer\" that represents a person working on a specific project. It has functions for implementing tasks, running commands, and handling human intervention during the development process."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.architect`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.architect`/__init__:","language":"python","range":[0,0,63,0],"content":"from utils.utils import step_already_finished\nfrom helpers.Agent import Agent\nimport json\nfrom utils.style import color_green_bold\nfrom const.function_calls import ARCHITECTURE\n\nfrom utils.utils import should_execute_step, generate_app_data\nfrom database.database import save_progress, get_progress_steps\nfrom logger.logger import logger\nfrom helpers.AgentConvo import AgentConvo\n\nARCHITECTURE_STEP = 'architecture'\n\n\nclass Architect(Agent):\n    def __init__(self, project):\n        super().__init__('architect', project)\n        self.convo_architecture = None\n\n    def get_architecture(self):\n        print(json.dumps({\n            \"project_stage\": \"architecture\"\n        }), type='info')\n\n        self.project.current_step = ARCHITECTURE_STEP\n\n        # If this app_id already did this step, just get all data from DB and don't ask user again\n        step = get_progress_steps(self.project.args['app_id'], ARCHITECTURE_STEP)\n        if step and not should_execute_step(self.project.args['step'], ARCHITECTURE_STEP):\n            step_already_finished(self.project.args, step)\n            self.project.architecture = step['architecture']\n            return\n\n        # ARCHITECTURE\n        print(color_green_bold(\"Planning project architecture...\\n\"))\n        logger.info(\"Planning project architecture...\")\n\n        self.convo_architecture = AgentConvo(self)\n        llm_response = self.convo_architecture.send_message('architecture/technologies.prompt',\n            {'name': self.project.args['name'],\n             'app_summary': self.project.project_description,\n             'clarifications': self.project.clarifications,\n             'user_stories': self.project.user_stories,\n             'user_tasks': self.project.user_tasks,\n             'app_type': self.project.args['app_type']}, ARCHITECTURE)\n        self.project.architecture = llm_response['technologies']\n\n        # TODO: Project.args should be a defined class so that all of the possible args are more obvious\n        if self.project.args.get('advanced', False):\n            llm_response = self.convo_architecture.get_additional_info_from_user(ARCHITECTURE)\n            if llm_response is not None:\n                self.project.architecture = llm_response['technologies']\n\n        logger.info(f\"Final architecture: {self.project.architecture}\")\n\n        save_progress(self.project.args['app_id'], self.project.current_step, {\n            \"messages\": self.convo_architecture.messages,\n            \"architecture\": self.project.architecture,\n            \"app_data\": generate_app_data(self.project.args)\n        })\n\n        return\n        # ARCHITECTURE END\n","file":"/pilot/helpers/agents/Architect.py","fileHash":"2760562b79d43a5a8c688bf6bce9ba47678ed0977ca08e8b61ac72a764108d3b","hash":"2760562b79d43a5a8c688bf6bce9ba47678ed0977ca08e8b61ac72a764108d3b","processedContent":"from utils.utils import step_already_finished\n\"\"\"\nscip-python python temp indexer `pilot.utils.utils`/__init__:: The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.utils.utils`/step_already_finished().: This code updates the arguments with the app data from a step and then prints a success message to the console.\n\"\"\"\nfrom helpers.Agent import Agent\n\"\"\"\nscip-python python temp indexer `pilot.helpers.agent`/__init__:: This code defines a class called \"Agent\" that represents a person who is working on a specific project. The class has two attributes: \"role\" and \"project\". The \"role\" attribute specifies the type of work the agent is doing, and the \"project\" attribute specifies the project they are working on.\nscip-python python temp indexer `pilot.helpers.agent`/Agent#: This code defines a class called \"Agent\" that represents a person who is working on a specific project. The class has two attributes: \"role\" and \"project\". The \"role\" attribute specifies the type of work the agent is doing, and the \"project\" attribute specifies the project they are working on.\n\"\"\"\nimport json #undefined\nfrom utils.style import color_green_bold\n\"\"\"\nscip-python python temp indexer `pilot.utils.style`/__init__:: This code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.utils.style`/color_green_bold.: undefined\n\"\"\"\nfrom const.function_calls import ARCHITECTURE\n\"\"\"\nscip-python python temp indexer `pilot.const.function_calls`/__init__:: The code is a collection of functions and definitions that are used to implement various tasks in a development process. It includes functions for processing user stories, tasks, technologies, commands, and files, as well as definitions for breaking down development tasks into smaller steps and implementing code changes.\nscip-python python temp indexer `pilot.const.function_calls`/ARCHITECTURE.: undefined\n\"\"\"\n\nfrom utils.utils import should_execute_step, generate_app_data\n\"\"\"\nscip-python python temp indexer `pilot.utils.utils`/__init__:: The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.utils.utils`/should_execute_step().: This code checks if the current step should be executed based on the argument passed in and the current step. It returns true if the current step is greater than or equal to the argument step.\nscip-python python temp indexer `pilot.utils.utils`/generate_app_data().: This code defines a function called `generate_app_data` that takes an argument called `args`. The function returns a dictionary with two keys: `app_id` and `app_type`, both of which are values from the `args` dictionary.\n\"\"\"\nfrom database.database import save_progress, get_progress_steps\n\"\"\"\nscip-python python temp indexer `pilot.database.database`/__init__:: The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.database.database`/save_progress().: This code defines a function called `save_progress` that saves progress data for an app in a database. It retrieves the app entity from the database based on its ID, creates or updates a record in a table based on the step provided, and updates the status of the app in the database.\nscip-python python temp indexer `pilot.database.database`/get_progress_steps().: This code defines a function called `get_progress_steps` that retrieves progress steps for a given application ID. It uses a dictionary to map progress step names to their corresponding model classes, and it returns a dictionary of progress steps with their corresponding data.\n\"\"\"\nfrom logger.logger import logger\n\"\"\"\nscip-python python temp indexer `pilot.logger.logger`/__init__:: This code sets up a custom logger for an application, which filters sensitive information from log records and removes ANSI escape sequences.\nscip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n\"\"\"\nfrom helpers.AgentConvo import AgentConvo\n\"\"\"\nscip-python python temp indexer `pilot.helpers.agentconvo`/__init__:: The code defines a class called `AgentConvo` that represents a conversation with an agent, including functions for sending and receiving messages, formatting and rendering prompts, and error handling for GPT model token limits.\nscip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#: This code defines a class called `AgentConvo` that represents a conversation with an agent. It includes functions for sending and receiving messages, as well as formatting and rendering prompts. The code also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n\"\"\"\n\nARCHITECTURE_STEP = 'architecture'\n\n\nclass Architect(Agent):\n    \"\"\"This code defines a class called \"Architect\" that represents a person who is working on a specific project. The class has two attributes: \"role\" and \"project\". The \"role\" attribute specifies the type of work the agent is doing, and the \"project\" attribute specifies the project they are working on. The class also has a constructor that initializes an object with a role (architect) and a project, and sets the object's convo_architecture attribute to None.\"\"\"\n    pass\n        # ARCHITECTURE END\n","documentation":"The code defines a class called \"Architect\" that represents a person working on a specific project, with attributes for role and project. It also includes functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#","language":"python","range":[14,0,61,14],"content":"class Architect(Agent):\n    def __init__(self, project):\n        super().__init__('architect', project)\n        self.convo_architecture = None\n\n    def get_architecture(self):\n        print(json.dumps({\n            \"project_stage\": \"architecture\"\n        }), type='info')\n\n        self.project.current_step = ARCHITECTURE_STEP\n\n        # If this app_id already did this step, just get all data from DB and don't ask user again\n        step = get_progress_steps(self.project.args['app_id'], ARCHITECTURE_STEP)\n        if step and not should_execute_step(self.project.args['step'], ARCHITECTURE_STEP):\n            step_already_finished(self.project.args, step)\n            self.project.architecture = step['architecture']\n            return\n\n        # ARCHITECTURE\n        print(color_green_bold(\"Planning project architecture...\\n\"))\n        logger.info(\"Planning project architecture...\")\n\n        self.convo_architecture = AgentConvo(self)\n        llm_response = self.convo_architecture.send_message('architecture/technologies.prompt',\n            {'name': self.project.args['name'],\n             'app_summary': self.project.project_description,\n             'clarifications': self.project.clarifications,\n             'user_stories': self.project.user_stories,\n             'user_tasks': self.project.user_tasks,\n             'app_type': self.project.args['app_type']}, ARCHITECTURE)\n        self.project.architecture = llm_response['technologies']\n\n        # TODO: Project.args should be a defined class so that all of the possible args are more obvious\n        if self.project.args.get('advanced', False):\n            llm_response = self.convo_architecture.get_additional_info_from_user(ARCHITECTURE)\n            if llm_response is not None:\n                self.project.architecture = llm_response['technologies']\n\n        logger.info(f\"Final architecture: {self.project.architecture}\")\n\n        save_progress(self.project.args['app_id'], self.project.current_step, {\n            \"messages\": self.convo_architecture.messages,\n            \"architecture\": self.project.architecture,\n            \"app_data\": generate_app_data(self.project.args)\n        })\n\n        return","file":"/pilot/helpers/agents/Architect.py","fileHash":"2760562b79d43a5a8c688bf6bce9ba47678ed0977ca08e8b61ac72a764108d3b","hash":"a1e0e48ff05241d2be35675ada2a5f2c0c9be6254fc443211fe1a1f7f7c3fc61","processedContent":"class Architect(Agent): #This code defines a class called \"Agent\" that represents a person who is working on a specific project. The class has two attributes: \"role\" and \"project\". The \"role\" attribute specifies the type of work the agent is doing, and the \"project\" attribute specifies the project they are working on.\n    def __init__(self, project):\n        \"\"\"This code defines a constructor for a class that initializes an object with a role (architect) and a project, and sets the object's convo_architecture attribute to None.\"\"\"\n        pass\n\n    def get_architecture(self):\n        print(json.dumps({\n            \"project_stage\": \"architecture\"\n        }), type='info')\n\n        self.project.current_step = ARCHITECTURE_STEP\n\n        # If this app_id already did this step, just get all data from DB and don't ask user again\n        step = get_progress_steps(self.project.args['app_id'], ARCHITECTURE_STEP)\n        if step and not should_execute_step(self.project.args['step'], ARCHITECTURE_STEP):\n            step_already_finished(self.project.args, step)\n            self.project.architecture = step['architecture']\n            return\n\n        # ARCHITECTURE\n        print(color_green_bold(\"Planning project architecture...\\n\"))\n        logger.info(\"Planning project architecture...\")\n\n        self.convo_architecture = AgentConvo(self)\n        llm_response = self.convo_architecture.send_message('architecture/technologies.prompt',\n            {'name': self.project.args['name'],\n             'app_summary': self.project.project_description,\n             'clarifications': self.project.clarifications,\n             'user_stories': self.project.user_stories,\n             'user_tasks': self.project.user_tasks,\n             'app_type': self.project.args['app_type']}, ARCHITECTURE)\n        self.project.architecture = llm_response['technologies']\n\n        # TODO: Project.args should be a defined class so that all of the possible args are more obvious\n        if self.project.args.get('advanced', False):\n            llm_response = self.convo_architecture.get_additional_info_from_user(ARCHITECTURE)\n            if llm_response is not None:\n                self.project.architecture = llm_response['technologies']\n\n        logger.info(f\"Final architecture: {self.project.architecture}\")\n\n        save_progress(self.project.args['app_id'], self.project.current_step, {\n            \"messages\": self.convo_architecture.messages,\n            \"architecture\": self.project.architecture,\n            \"app_data\": generate_app_data(self.project.args)\n        })\n\n        return","documentation":"This code defines a class called \"Architect\" that represents a person who is working on a specific project. The class has two attributes: \"role\" and \"project\". The \"role\" attribute specifies the type of work the agent is doing, and the \"project\" attribute specifies the project they are working on. The class also has a constructor that initializes an object with a role (architect) and a project, and sets the object's convo_architecture attribute to None."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.productowner`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.productowner`/__init__:","language":"python","range":[0,0,164,0],"content":"import json\nfrom utils.style import color_green_bold\nfrom helpers.AgentConvo import AgentConvo\nfrom helpers.Agent import Agent\nfrom logger.logger import logger\nfrom database.database import get_app, save_progress, save_app, get_progress_steps\nfrom utils.utils import should_execute_step, generate_app_data, step_already_finished, clean_filename\nfrom utils.files import setup_workspace\nfrom prompts.prompts import ask_for_app_type, ask_for_main_app_definition, get_additional_info_from_openai, \\\n    generate_messages_from_description, ask_user, get_prompt\nfrom const.llm import END_RESPONSE\n\nPROJECT_DESCRIPTION_STEP = 'project_description'\nUSER_STORIES_STEP = 'user_stories'\nUSER_TASKS_STEP = 'user_tasks'\n\n\nclass ProductOwner(Agent):\n    def __init__(self, project):\n        super().__init__('product_owner', project)\n\n    def get_project_description(self):\n        print(json.dumps({\n            \"project_stage\": \"project_description\"\n        }), type='info')\n\n        self.project.app = get_app(self.project.args['app_id'], error_if_not_found=False)\n\n        # If this app_id already did this step, just get all data from DB and don't ask user again\n        if self.project.app is not None:\n            step = get_progress_steps(self.project.args['app_id'], PROJECT_DESCRIPTION_STEP)\n            if step and not should_execute_step(self.project.args['step'], PROJECT_DESCRIPTION_STEP):\n                step_already_finished(self.project.args, step)\n                self.project.set_root_path(setup_workspace(self.project.args))\n                self.project.project_description = step['summary']\n                self.project.project_description_messages = step['messages']\n                self.project.main_prompt = step['prompt']\n                return\n\n        # PROJECT DESCRIPTION\n        self.project.current_step = PROJECT_DESCRIPTION_STEP\n        if 'app_type' not in self.project.args:\n            self.project.args['app_type'] = ask_for_app_type()\n        if 'name' not in self.project.args:\n            question = 'What is the project name?'\n            print(question, type='ipc')\n            self.project.args['name'] = clean_filename(ask_user(self.project, question))\n\n        self.project.app = save_app(self.project)\n\n        self.project.set_root_path(setup_workspace(self.project.args))\n\n        self.project.main_prompt = ask_for_main_app_definition(self.project)\n\n        print(json.dumps({'open_project': {\n            #'uri': 'file:///' + self.project.root_path.replace('\\\\', '/'),\n            'path': self.project.root_path,\n            'name': self.project.args['name'],\n        }}), type='info')\n\n        high_level_messages = self.ask_clarifying_questions(self.project.main_prompt)\n\n        high_level_summary = self.generate_project_summary(high_level_messages)\n\n        save_progress(self.project.args['app_id'], self.project.current_step, {\n            \"prompt\": self.project.main_prompt,\n            \"messages\": high_level_messages,\n            \"summary\": high_level_summary,\n            \"app_data\": generate_app_data(self.project.args)\n        })\n\n        self.project.project_description = high_level_summary\n        self.project.project_description_messages = high_level_messages\n        return\n        # PROJECT DESCRIPTION END\n\n    def ask_clarifying_questions(self, main_prompt: str):\n        instructions = generate_messages_from_description(main_prompt,\n                                                          self.project.args['app_type'],\n                                                          self.project.args['name'])\n        return get_additional_info_from_openai(self.project, instructions)\n\n    def generate_project_summary(self, high_level_messages: list[dict]):\n        print(color_green_bold('Project Summary:\\n'))\n        convo_project_description = AgentConvo(self)\n\n        convo_project_description.messages.append({'role': 'system',\n                                                   'content': get_prompt('components/summary_instructions.prompt')})\n        return convo_project_description.send_message('utils/summary.prompt',\n                                                      {'conversation': '\\n'.join(\n                                                          [f\"{msg['role']}: {msg['content']}\" for msg in\n                                                           high_level_messages])}, should_log_message=False)\n\n    def get_user_stories(self):\n        if not self.project.args.get('advanced', False):\n            return\n\n        print(json.dumps({\n            \"project_stage\": \"user_stories\"\n        }), type='info')\n\n        self.project.current_step = USER_STORIES_STEP\n        self.convo_user_stories = AgentConvo(self)\n\n        # If this app_id already did this step, just get all data from DB and don't ask user again\n        step = get_progress_steps(self.project.args['app_id'], USER_STORIES_STEP)\n        if step and not should_execute_step(self.project.args['step'], USER_STORIES_STEP):\n            step_already_finished(self.project.args, step)\n            self.convo_user_stories.messages = step['messages']\n            self.project.user_stories = step['user_stories']\n            return\n\n        # USER STORIES\n        msg = \"User Stories:\\n\"\n        print(color_green_bold(msg))\n        logger.info(msg)\n\n        self.project.user_stories = self.convo_user_stories.continuous_conversation('user_stories/specs.prompt', {\n            'name': self.project.args['name'],\n            'prompt': self.project.project_description,\n            'clarifications': self.project.project_description_messages,\n            'app_type': self.project.args['app_type'],\n            'END_RESPONSE': END_RESPONSE\n        })\n\n        logger.info(f\"Final user stories: {self.project.user_stories}\")\n\n        save_progress(self.project.args['app_id'], self.project.current_step, {\n            \"messages\": self.convo_user_stories.messages,\n            \"user_stories\": self.project.user_stories,\n            \"app_data\": generate_app_data(self.project.args)\n        })\n\n        return\n        # USER STORIES END\n\n    def get_user_tasks(self):\n        self.project.current_step = USER_TASKS_STEP\n        self.convo_user_stories.high_level_step = self.project.current_step\n\n        # If this app_id already did this step, just get all data from DB and don't ask user again\n        step = get_progress_steps(self.project.args['app_id'], USER_TASKS_STEP)\n        if step and not should_execute_step(self.project.args['step'], USER_TASKS_STEP):\n            step_already_finished(self.project.args, step)\n            return step['user_tasks']\n\n        # USER TASKS\n        msg = \"User Tasks:\\n\"\n        print(color_green_bold(msg))\n        logger.info(msg)\n\n        self.project.user_tasks = self.convo_user_stories.continuous_conversation('user_stories/user_tasks.prompt',\n                                                                                  {'END_RESPONSE': END_RESPONSE})\n\n        logger.info(f\"Final user tasks: {self.project.user_tasks}\")\n\n        save_progress(self.project.args['app_id'], self.project.current_step, {\n            \"messages\": self.convo_user_stories.messages,\n            \"user_tasks\": self.project.user_tasks,\n            \"app_data\": generate_app_data(self.project.args)\n        })\n\n        return self.project.user_tasks\n        # USER TASKS END\n","file":"/pilot/helpers/agents/ProductOwner.py","fileHash":"0920711402359af9e0f7d4776d936a8f4211626ef8b9ffbcb67fc44ba16a9914","hash":"0920711402359af9e0f7d4776d936a8f4211626ef8b9ffbcb67fc44ba16a9914","processedContent":"import json #undefined\nfrom utils.style import color_green_bold\n\"\"\"\nscip-python python temp indexer `pilot.utils.style`/__init__:: This code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.utils.style`/color_green_bold.: undefined\n\"\"\"\nfrom helpers.AgentConvo import AgentConvo\n\"\"\"\nscip-python python temp indexer `pilot.helpers.agentconvo`/__init__:: The code defines a class called `AgentConvo` that represents a conversation with an agent, including functions for sending and receiving messages, formatting and rendering prompts, and error handling for GPT model token limits.\nscip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#: This code defines a class called `AgentConvo` that represents a conversation with an agent. It includes functions for sending and receiving messages, as well as formatting and rendering prompts. The code also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n\"\"\"\nfrom helpers.Agent import Agent\n\"\"\"\nscip-python python temp indexer `pilot.helpers.agent`/__init__:: This code defines a class called \"Agent\" that represents a person who is working on a specific project. The class has two attributes: \"role\" and \"project\". The \"role\" attribute specifies the type of work the agent is doing, and the \"project\" attribute specifies the project they are working on.\nscip-python python temp indexer `pilot.helpers.agent`/Agent#: This code defines a class called \"Agent\" that represents a person who is working on a specific project. The class has two attributes: \"role\" and \"project\". The \"role\" attribute specifies the type of work the agent is doing, and the \"project\" attribute specifies the project they are working on.\n\"\"\"\nfrom logger.logger import logger\n\"\"\"\nscip-python python temp indexer `pilot.logger.logger`/__init__:: This code sets up a custom logger for an application, which filters sensitive information from log records and removes ANSI escape sequences.\nscip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n\"\"\"\nfrom database.database import get_app, save_progress, save_app, get_progress_steps\n\"\"\"\nscip-python python temp indexer `pilot.database.database`/__init__:: The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.database.database`/get_app().: This code defines a function called `get_app` that retrieves an app entity from the database based on its ID. It also includes error handling to raise a ValueError if the app is not found.\nscip-python python temp indexer `pilot.database.database`/save_progress().: This code defines a function called `save_progress` that saves progress data for an app in a database. It retrieves the app entity from the database based on its ID, creates or updates a record in a table based on the step provided, and updates the status of the app in the database.\nscip-python python temp indexer `pilot.database.database`/save_app().: This code defines a function called `save_app` that saves an app entity to a database. It retrieves the app entity based on its ID, and then updates its fields with the values provided in the `args` dictionary. If the app entity does not exist, it creates a new one.\nscip-python python temp indexer `pilot.database.database`/get_progress_steps().: This code defines a function called `get_progress_steps` that retrieves progress steps for a given application ID. It uses a dictionary to map progress step names to their corresponding model classes, and it returns a dictionary of progress steps with their corresponding data.\n\"\"\"\nfrom utils.utils import should_execute_step, generate_app_data, step_already_finished, clean_filename\n\"\"\"\nscip-python python temp indexer `pilot.utils.utils`/__init__:: The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.utils.utils`/should_execute_step().: This code checks if the current step should be executed based on the argument passed in and the current step. It returns true if the current step is greater than or equal to the argument step.\nscip-python python temp indexer `pilot.utils.utils`/generate_app_data().: This code defines a function called `generate_app_data` that takes an argument called `args`. The function returns a dictionary with two keys: `app_id` and `app_type`, both of which are values from the `args` dictionary.\nscip-python python temp indexer `pilot.utils.utils`/step_already_finished().: This code updates the arguments with the app data from a step and then prints a success message to the console.\nscip-python python temp indexer `pilot.utils.utils`/clean_filename().: This code takes a filename as input and removes any invalid characters, replacing whitespace with underscores.\n\"\"\"\nfrom utils.files import setup_workspace\n\"\"\"\nscip-python python temp indexer `pilot.utils.files`/__init__:: The code defines a series of functions for working with files and directories, including creating new directories, counting lines of code in a list of files, and saving user input to a database.\nscip-python python temp indexer `pilot.utils.files`/setup_workspace().: This code defines a function called `setup_workspace` that creates a new project workspace and returns the path to it. It also creates a 'tests' folder inside the workspace and saves a user-app relationship if one does not already exist.\n\"\"\"\nfrom prompts.prompts import ask_for_app_type, ask_for_main_app_definition, get_additional_info_from_openai, \\\n\"\"\"\nscip-python python temp indexer `pilot.prompts.prompts`/__init__:: The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.prompts.prompts`/ask_for_app_type().: This code is a function that asks the user to select a type of app they want to build. It uses a styled_select function to display a list of available app types and returns the selected type.\nscip-python python temp indexer `pilot.prompts.prompts`/ask_for_main_app_definition().: This code defines a function called `ask_for_main_app_definition` that retrieves user input from a database, styles the question, and saves the response to the database.\nscip-python python temp indexer `pilot.prompts.prompts`/get_additional_info_from_openai().: The code defines a function called `get_additional_info_from_openai` that retrieves additional information from the OpenAI GPT language model. It takes in a project and a list of messages, and then uses the OpenAI API to generate responses based on the input messages. The function also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n\"\"\"\n    generate_messages_from_description, ask_user, get_prompt\n    \"\"\"\n    scip-python python temp indexer `pilot.prompts.prompts`/generate_messages_from_description().: This code defines a function called `generate_messages_from_description` that takes in a description, app type, and name as input. It returns a list of messages that are used to guide the user through the process of creating an app. The first message is from the system and informs the user that they are a Product Owner. The second message is also from the system and provides instructions on how to proceed with the app creation process. The third message is from the user and includes the provided description and app name.\n    scip-python python temp indexer `pilot.prompts.prompts`/ask_user().: This code defines a function called `ask_user` that retrieves user input from a database, styles the question, and saves the response to the database. It also logs the question and answer to a logger.\n    scip-python python temp indexer `pilot.utils.utils`/get_prompt().: This code defines a function called `get_prompt` that retrieves and renders a prompt template based on the provided name. It uses Jinja2 to render the templates with no variables, and stores the rendered content in a dictionary called `prompts_components`.\n    \"\"\"\nfrom const.llm import END_RESPONSE\n\"\"\"\nscip-python python temp indexer `pilot.const.llm`/__init__:: This code defines constants for the maximum number of tokens allowed in a GPT model and the minimum number of tokens required for a response. It also sets the maximum number of questions that can be asked and the response when the conversation is complete.\nscip-python python temp indexer `pilot.const.llm`/END_RESPONSE.: undefined\n\"\"\"\n\nPROJECT_DESCRIPTION_STEP = 'project_description'\nUSER_STORIES_STEP = 'user_stories'\nUSER_TASKS_STEP = 'user_tasks'\n\n\nclass ProductOwner(Agent):\n    \"\"\"The code defines a class called \"ProductOwner\" that inherits from another class called \"User\". It initializes the object with a project parameter and sets the user's role to \"product_owner\". The class includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\"\"\"\n    pass\n        # USER TASKS END\n","documentation":"The code defines a series of functions and classes for a chatbot application that allows users to create and customize their own apps. It includes functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#","language":"python","range":[17,0,162,38],"content":"class ProductOwner(Agent):\n    def __init__(self, project):\n        super().__init__('product_owner', project)\n\n    def get_project_description(self):\n        print(json.dumps({\n            \"project_stage\": \"project_description\"\n        }), type='info')\n\n        self.project.app = get_app(self.project.args['app_id'], error_if_not_found=False)\n\n        # If this app_id already did this step, just get all data from DB and don't ask user again\n        if self.project.app is not None:\n            step = get_progress_steps(self.project.args['app_id'], PROJECT_DESCRIPTION_STEP)\n            if step and not should_execute_step(self.project.args['step'], PROJECT_DESCRIPTION_STEP):\n                step_already_finished(self.project.args, step)\n                self.project.set_root_path(setup_workspace(self.project.args))\n                self.project.project_description = step['summary']\n                self.project.project_description_messages = step['messages']\n                self.project.main_prompt = step['prompt']\n                return\n\n        # PROJECT DESCRIPTION\n        self.project.current_step = PROJECT_DESCRIPTION_STEP\n        if 'app_type' not in self.project.args:\n            self.project.args['app_type'] = ask_for_app_type()\n        if 'name' not in self.project.args:\n            question = 'What is the project name?'\n            print(question, type='ipc')\n            self.project.args['name'] = clean_filename(ask_user(self.project, question))\n\n        self.project.app = save_app(self.project)\n\n        self.project.set_root_path(setup_workspace(self.project.args))\n\n        self.project.main_prompt = ask_for_main_app_definition(self.project)\n\n        print(json.dumps({'open_project': {\n            #'uri': 'file:///' + self.project.root_path.replace('\\\\', '/'),\n            'path': self.project.root_path,\n            'name': self.project.args['name'],\n        }}), type='info')\n\n        high_level_messages = self.ask_clarifying_questions(self.project.main_prompt)\n\n        high_level_summary = self.generate_project_summary(high_level_messages)\n\n        save_progress(self.project.args['app_id'], self.project.current_step, {\n            \"prompt\": self.project.main_prompt,\n            \"messages\": high_level_messages,\n            \"summary\": high_level_summary,\n            \"app_data\": generate_app_data(self.project.args)\n        })\n\n        self.project.project_description = high_level_summary\n        self.project.project_description_messages = high_level_messages\n        return\n        # PROJECT DESCRIPTION END\n\n    def ask_clarifying_questions(self, main_prompt: str):\n        instructions = generate_messages_from_description(main_prompt,\n                                                          self.project.args['app_type'],\n                                                          self.project.args['name'])\n        return get_additional_info_from_openai(self.project, instructions)\n\n    def generate_project_summary(self, high_level_messages: list[dict]):\n        print(color_green_bold('Project Summary:\\n'))\n        convo_project_description = AgentConvo(self)\n\n        convo_project_description.messages.append({'role': 'system',\n                                                   'content': get_prompt('components/summary_instructions.prompt')})\n        return convo_project_description.send_message('utils/summary.prompt',\n                                                      {'conversation': '\\n'.join(\n                                                          [f\"{msg['role']}: {msg['content']}\" for msg in\n                                                           high_level_messages])}, should_log_message=False)\n\n    def get_user_stories(self):\n        if not self.project.args.get('advanced', False):\n            return\n\n        print(json.dumps({\n            \"project_stage\": \"user_stories\"\n        }), type='info')\n\n        self.project.current_step = USER_STORIES_STEP\n        self.convo_user_stories = AgentConvo(self)\n\n        # If this app_id already did this step, just get all data from DB and don't ask user again\n        step = get_progress_steps(self.project.args['app_id'], USER_STORIES_STEP)\n        if step and not should_execute_step(self.project.args['step'], USER_STORIES_STEP):\n            step_already_finished(self.project.args, step)\n            self.convo_user_stories.messages = step['messages']\n            self.project.user_stories = step['user_stories']\n            return\n\n        # USER STORIES\n        msg = \"User Stories:\\n\"\n        print(color_green_bold(msg))\n        logger.info(msg)\n\n        self.project.user_stories = self.convo_user_stories.continuous_conversation('user_stories/specs.prompt', {\n            'name': self.project.args['name'],\n            'prompt': self.project.project_description,\n            'clarifications': self.project.project_description_messages,\n            'app_type': self.project.args['app_type'],\n            'END_RESPONSE': END_RESPONSE\n        })\n\n        logger.info(f\"Final user stories: {self.project.user_stories}\")\n\n        save_progress(self.project.args['app_id'], self.project.current_step, {\n            \"messages\": self.convo_user_stories.messages,\n            \"user_stories\": self.project.user_stories,\n            \"app_data\": generate_app_data(self.project.args)\n        })\n\n        return\n        # USER STORIES END\n\n    def get_user_tasks(self):\n        self.project.current_step = USER_TASKS_STEP\n        self.convo_user_stories.high_level_step = self.project.current_step\n\n        # If this app_id already did this step, just get all data from DB and don't ask user again\n        step = get_progress_steps(self.project.args['app_id'], USER_TASKS_STEP)\n        if step and not should_execute_step(self.project.args['step'], USER_TASKS_STEP):\n            step_already_finished(self.project.args, step)\n            return step['user_tasks']\n\n        # USER TASKS\n        msg = \"User Tasks:\\n\"\n        print(color_green_bold(msg))\n        logger.info(msg)\n\n        self.project.user_tasks = self.convo_user_stories.continuous_conversation('user_stories/user_tasks.prompt',\n                                                                                  {'END_RESPONSE': END_RESPONSE})\n\n        logger.info(f\"Final user tasks: {self.project.user_tasks}\")\n\n        save_progress(self.project.args['app_id'], self.project.current_step, {\n            \"messages\": self.convo_user_stories.messages,\n            \"user_tasks\": self.project.user_tasks,\n            \"app_data\": generate_app_data(self.project.args)\n        })\n\n        return self.project.user_tasks","file":"/pilot/helpers/agents/ProductOwner.py","fileHash":"0920711402359af9e0f7d4776d936a8f4211626ef8b9ffbcb67fc44ba16a9914","hash":"555651ce5635673586bf55b71d879ac3cb6b4f218ae7d92e08e2feb939b8aee1","processedContent":"class ProductOwner(Agent): #This code defines a class called \"Agent\" that represents a person who is working on a specific project. The class has two attributes: \"role\" and \"project\". The \"role\" attribute specifies the type of work the agent is doing, and the \"project\" attribute specifies the project they are working on.\n    def __init__(self, project):\n        \"\"\"This code defines a class called \"ProductOwner\" that inherits from another class called \"User\". It initializes the object with a project parameter and sets the user's role to \"product_owner\".\"\"\"\n        pass\n\n    def get_project_description(self):\n        \"\"\"This code defines a function called `get_project_description` that retrieves and generates project descriptions for apps based on user input. It includes error handling, progress tracking, and app data generation.\"\"\"\n        pass\n        # PROJECT DESCRIPTION END\n\n    def ask_clarifying_questions(self, main_prompt: str):\n        \"\"\"This code defines a function called `ask_clarifying_questions` that takes in a description, app type, and name as input. It returns a list of messages that are used to guide the user through the process of creating an app.\"\"\"\n        pass\n\n    def generate_project_summary(self, high_level_messages: list[dict]):\n        \"\"\"This code defines a function called `generate_project_summary` that generates a summary of a project based on a list of high-level messages. It uses a class called `AgentConvo` to send and receive messages, and includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\"\"\"\n        pass\n\n    def get_user_stories(self):\n        \"\"\"The code defines a function called `get_user_stories` that retrieves user stories from the agent based on the current step and app ID. It also saves progress data in a database.\"\"\"\n        pass\n        # USER STORIES END\n\n    def get_user_tasks(self):\n        self.project.current_step = USER_TASKS_STEP\n        self.convo_user_stories.high_level_step = self.project.current_step\n\n        # If this app_id already did this step, just get all data from DB and don't ask user again\n        step = get_progress_steps(self.project.args['app_id'], USER_TASKS_STEP)\n        if step and not should_execute_step(self.project.args['step'], USER_TASKS_STEP):\n            step_already_finished(self.project.args, step)\n            return step['user_tasks']\n\n        # USER TASKS\n        msg = \"User Tasks:\\n\"\n        print(color_green_bold(msg))\n        logger.info(msg)\n\n        self.project.user_tasks = self.convo_user_stories.continuous_conversation('user_stories/user_tasks.prompt',\n                                                                                  {'END_RESPONSE': END_RESPONSE})\n\n        logger.info(f\"Final user tasks: {self.project.user_tasks}\")\n\n        save_progress(self.project.args['app_id'], self.project.current_step, {\n            \"messages\": self.convo_user_stories.messages,\n            \"user_tasks\": self.project.user_tasks,\n            \"app_data\": generate_app_data(self.project.args)\n        })\n\n        return self.project.user_tasks","documentation":"The code defines a class called \"ProductOwner\" that inherits from another class called \"User\". It initializes the object with a project parameter and sets the user's role to \"product_owner\". The class includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/__init__:","language":"python","range":[0,0,54,0],"content":"from const.function_calls import GET_DOCUMENTATION_FILE\nfrom helpers.AgentConvo import AgentConvo\nfrom helpers.Agent import Agent\nfrom utils.files import count_lines_of_code\nfrom utils.style import color_green_bold, color_green\n\n\nclass TechnicalWriter(Agent):\n    def __init__(self, project):\n        super().__init__('technical_writer', project)\n        self.save_dev_steps = True\n\n    def document_project(self, percent):\n        files = self.project.get_all_coded_files()\n        print(f'{color_green_bold(\"CONGRATULATIONS!!!\")}')\n        print(f'You reached {color_green(str(percent) + \"%\")} of your project generation!\\n\\n')\n        print('For now, you have created:\\n')\n        print(f'{color_green(len(files))} files\\n')\n        print(f'{color_green(count_lines_of_code(files))} lines of code\\n\\n')\n        print('Before continuing, GPT Pilot will create some documentation for the project...\\n')\n        self.create_license()\n        self.create_readme()\n        self.create_api_documentation()\n\n    def create_license(self):\n        # check if LICENSE file exists and if not create one. We want to create it only once.\n        return\n\n    def create_readme(self):\n        print(color_green('Creating README.md'))\n        convo = AgentConvo(self)\n\n        llm_response = convo.send_message('documentation/create_readme.prompt', {\n            \"name\": self.project.args['name'],\n            \"app_type\": self.project.args['app_type'],\n            \"app_summary\": self.project.project_description,\n            \"clarifications\": self.project.clarifications,\n            \"user_stories\": self.project.user_stories,\n            \"user_tasks\": self.project.user_tasks,\n            \"technologies\": self.project.architecture,\n            \"directory_tree\": self.project.get_directory_tree(True),\n            \"files\": self.project.get_all_coded_files(),\n        }, GET_DOCUMENTATION_FILE)\n\n        changes = self.project.developer.replace_old_code_comments([llm_response])\n\n        for file_data in changes:\n            self.project.save_file(file_data)\n\n        return convo\n\n    def create_api_documentation(self):\n        # create API documentation\n        return\n","file":"/pilot/helpers/agents/TechnicalWriter.py","fileHash":"2e3be962f1ff60a54c1abe5aad040601ed5477e4197c3f6d923fa25d5ff6bb4d","hash":"2e3be962f1ff60a54c1abe5aad040601ed5477e4197c3f6d923fa25d5ff6bb4d","processedContent":"from const.function_calls import GET_DOCUMENTATION_FILE\n\"\"\"\nscip-python python temp indexer `pilot.const.function_calls`/__init__:: The code is a collection of functions and definitions that are used to implement various tasks in a development process. It includes functions for processing user stories, tasks, technologies, commands, and files, as well as definitions for breaking down development tasks into smaller steps and implementing code changes.\nscip-python python temp indexer `pilot.const.function_calls`/GET_DOCUMENTATION_FILE.: undefined\n\"\"\"\nfrom helpers.AgentConvo import AgentConvo\n\"\"\"\nscip-python python temp indexer `pilot.helpers.agentconvo`/__init__:: The code defines a class called `AgentConvo` that represents a conversation with an agent, including functions for sending and receiving messages, formatting and rendering prompts, and error handling for GPT model token limits.\nscip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#: This code defines a class called `AgentConvo` that represents a conversation with an agent. It includes functions for sending and receiving messages, as well as formatting and rendering prompts. The code also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n\"\"\"\nfrom helpers.Agent import Agent\n\"\"\"\nscip-python python temp indexer `pilot.helpers.agent`/__init__:: This code defines a class called \"Agent\" that represents a person who is working on a specific project. The class has two attributes: \"role\" and \"project\". The \"role\" attribute specifies the type of work the agent is doing, and the \"project\" attribute specifies the project they are working on.\nscip-python python temp indexer `pilot.helpers.agent`/Agent#: This code defines a class called \"Agent\" that represents a person who is working on a specific project. The class has two attributes: \"role\" and \"project\". The \"role\" attribute specifies the type of work the agent is doing, and the \"project\" attribute specifies the project they are working on.\n\"\"\"\nfrom utils.files import count_lines_of_code\n\"\"\"\nscip-python python temp indexer `pilot.utils.files`/__init__:: The code defines a series of functions for working with files and directories, including creating new directories, counting lines of code in a list of files, and saving user input to a database.\nscip-python python temp indexer `pilot.utils.files`/count_lines_of_code().: This code counts the number of lines of code in a list of files by splitting each file's content into lines and then summing the lengths of those lines.\n\"\"\"\nfrom utils.style import color_green_bold, color_green\n\"\"\"\nscip-python python temp indexer `pilot.utils.style`/__init__:: This code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.utils.style`/color_green_bold.: undefined\nscip-python python temp indexer `pilot.utils.style`/color_green.: undefined\n\"\"\"\n\n\nclass TechnicalWriter(Agent):\n    \"\"\"The code defines a class called \"TechnicalWriter\" that generates documentation for a project. It creates a LICENSE file, README.md file, and API documentation based on the project's details.\"\"\"\n    pass\n","documentation":"The code defines a class called \"TechnicalWriter\" that generates documentation for a project. It includes functions for creating LICENSE and README files, as well as API documentation based on the project's details."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#","language":"python","range":[7,0,53,14],"content":"class TechnicalWriter(Agent):\n    def __init__(self, project):\n        super().__init__('technical_writer', project)\n        self.save_dev_steps = True\n\n    def document_project(self, percent):\n        files = self.project.get_all_coded_files()\n        print(f'{color_green_bold(\"CONGRATULATIONS!!!\")}')\n        print(f'You reached {color_green(str(percent) + \"%\")} of your project generation!\\n\\n')\n        print('For now, you have created:\\n')\n        print(f'{color_green(len(files))} files\\n')\n        print(f'{color_green(count_lines_of_code(files))} lines of code\\n\\n')\n        print('Before continuing, GPT Pilot will create some documentation for the project...\\n')\n        self.create_license()\n        self.create_readme()\n        self.create_api_documentation()\n\n    def create_license(self):\n        # check if LICENSE file exists and if not create one. We want to create it only once.\n        return\n\n    def create_readme(self):\n        print(color_green('Creating README.md'))\n        convo = AgentConvo(self)\n\n        llm_response = convo.send_message('documentation/create_readme.prompt', {\n            \"name\": self.project.args['name'],\n            \"app_type\": self.project.args['app_type'],\n            \"app_summary\": self.project.project_description,\n            \"clarifications\": self.project.clarifications,\n            \"user_stories\": self.project.user_stories,\n            \"user_tasks\": self.project.user_tasks,\n            \"technologies\": self.project.architecture,\n            \"directory_tree\": self.project.get_directory_tree(True),\n            \"files\": self.project.get_all_coded_files(),\n        }, GET_DOCUMENTATION_FILE)\n\n        changes = self.project.developer.replace_old_code_comments([llm_response])\n\n        for file_data in changes:\n            self.project.save_file(file_data)\n\n        return convo\n\n    def create_api_documentation(self):\n        # create API documentation\n        return","file":"/pilot/helpers/agents/TechnicalWriter.py","fileHash":"2e3be962f1ff60a54c1abe5aad040601ed5477e4197c3f6d923fa25d5ff6bb4d","hash":"04c4557edd9f2e2fb078bb4f4122d2ce6a722a9abb916a0cd0e0cbd85b874f4f","processedContent":"class TechnicalWriter(Agent): #This code defines a class called \"Agent\" that represents a person who is working on a specific project. The class has two attributes: \"role\" and \"project\". The \"role\" attribute specifies the type of work the agent is doing, and the \"project\" attribute specifies the project they are working on.\n    def __init__(self, project):\n        \"\"\"This code defines a constructor for a class that initializes an object with a role and a project, and sets a flag to save development steps.\"\"\"\n        pass\n\n    def document_project(self, percent):\n        \"\"\"This code is a function that generates documentation for a project. It creates a LICENSE file, a README.md file, and API documentation based on the project's details.\"\"\"\n        pass\n\n    def create_license(self):\n        \"\"\"This code checks if a LICENSE file exists and creates one if it doesn't. It's used to ensure that the LICENSE file is created only once, which is important for business continuity and compliance with licensing regulations.\"\"\"\n        pass\n\n    def create_readme(self):\n        \"\"\"This code defines a function called `create_readme` that creates a README.md file for a project. It retrieves and renders prompt templates based on the project's name, type, summary, and other details, and then appends the rendered content to a list of messages. The function also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\"\"\"\n        pass\n\n    def create_api_documentation(self):\n        # create API documentation\n        return","documentation":"The code defines a class called \"TechnicalWriter\" that generates documentation for a project. It creates a LICENSE file, README.md file, and API documentation based on the project's details."}},{"key":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/__init__:","language":"python","range":[0,0,91,0],"content":"import json\r\nimport os\r\nimport yaml\r\nfrom datetime import datetime\r\nfrom dotenv import load_dotenv\r\n\r\nload_dotenv()\r\n\r\nUSE_GPTPILOT_FOLDER = os.getenv('USE_GPTPILOT_FOLDER') == 'true'\r\n\r\n\r\n# TODO: Parse files from the `.gpt-pilot` directory to resume a project - `user_stories` may have changed - include checksums for sections which may need to be reprocessed.\r\n# TODO: Save a summary at the end of each task/sprint.\r\nclass DotGptPilot:\r\n    \"\"\"\r\n    Manages the `.gpt-pilot` directory.\r\n    \"\"\"\r\n    def __init__(self, log_chat_completions: bool = True):\r\n        if not USE_GPTPILOT_FOLDER:\r\n            return\r\n        self.log_chat_completions = log_chat_completions\r\n        self.dot_gpt_pilot_path = self.with_root_path('~', create=False)\r\n        self.chat_log_path = self.chat_log_folder(None)\r\n\r\n    def with_root_path(self, root_path: str, create=True):\r\n        if not USE_GPTPILOT_FOLDER:\r\n            return\r\n        dot_gpt_pilot_path = os.path.expanduser(os.path.join(root_path, '.gpt-pilot'))\r\n        self.dot_gpt_pilot_path = dot_gpt_pilot_path\r\n\r\n        # Create the `.gpt-pilot` directory if required.\r\n        if create and self.log_chat_completions:  # (... or ...):\r\n            self.chat_log_folder(None)\r\n\r\n        return dot_gpt_pilot_path\r\n\r\n    def chat_log_folder(self, task):\r\n        if not USE_GPTPILOT_FOLDER:\r\n            return\r\n        chat_log_path = os.path.join(self.dot_gpt_pilot_path, 'chat_log')\r\n        if task is not None:\r\n            chat_log_path = os.path.join(chat_log_path, 'task_' + str(task))\r\n\r\n        os.makedirs(chat_log_path, exist_ok=True)\r\n        self.chat_log_path = chat_log_path\r\n        return chat_log_path\r\n\r\n    def log_chat_completion(self, endpoint: str, model: str, req_type: str, messages: list[dict], response: str):\r\n        if not USE_GPTPILOT_FOLDER:\r\n            return\r\n        if self.log_chat_completions:\r\n            time = datetime.now().strftime('%Y-%m-%d_%H_%M_%S')\r\n            with open(os.path.join(self.chat_log_path, f'{time}-{req_type}.yaml'), 'w', encoding=\"utf-8\") as file:\r\n                data = {\r\n                    'endpoint': endpoint,\r\n                    'model': model,\r\n                    'messages': messages,\r\n                    'response': response,\r\n                }\r\n\r\n                yaml.safe_dump(data, file, width=120, indent=2, default_flow_style=False, sort_keys=False)\r\n\r\n    def log_chat_completion_json(self, endpoint: str, model: str, req_type: str, functions: dict, json_response: str):\r\n        if not USE_GPTPILOT_FOLDER:\r\n            return\r\n        if self.log_chat_completions:\r\n            time = datetime.now().strftime('%Y-%m-%d_%H_%M_%S')\r\n\r\n            with open(os.path.join(self.chat_log_path, f'{time}-{req_type}.json'), 'w', encoding=\"utf-8\") as file:\r\n                data = {\r\n                    'endpoint': endpoint,\r\n                    'model': model,\r\n                    'functions': functions,\r\n                    'response': json.loads(json_response),\r\n                }\r\n\r\n                json.dump(data, file, indent=2)\r\n\r\n    def write_project(self, project):\r\n        if not USE_GPTPILOT_FOLDER:\r\n            return\r\n        data = {\r\n            'name': project.args['name'],\r\n            'description': project.project_description,\r\n            'user_stories': project.user_stories,\r\n            'architecture': project.architecture,\r\n            'development_plan': project.development_plan,\r\n        }\r\n\r\n        with open(os.path.join(self.dot_gpt_pilot_path, 'project.yaml'), 'w') as file:\r\n            yaml.safe_dump(data, file, width=120, indent=2, default_flow_style=False, sort_keys=False)\r\n","file":"/pilot/utils/dot_gpt_pilot.py","fileHash":"9d5eadb20790072b38c38716b5afb2df4edf103287026a753aaf356c758a0e6a","hash":"9d5eadb20790072b38c38716b5afb2df4edf103287026a753aaf356c758a0e6a","processedContent":"import json\r #undefined\nimport os\r #undefined\nimport yaml\r\nfrom datetime import datetime\r\n\"\"\"\nscip-python python python-stdlib 3.11 datetime/__init__:: undefined\nscip-python python python-stdlib 3.11 datetime/datetime#: undefined\n\"\"\"\nfrom dotenv import load_dotenv\r\n\"\"\"\nscip-python python python-dotenv 1.0.0 dotenv/__init__:: undefined\nscip-python python python-dotenv 1.0.0 `dotenv.main`/load_dotenv().: undefined\n\"\"\"\n\r\nload_dotenv()\r #undefined\n\r\nUSE_GPTPILOT_FOLDER = os.getenv('USE_GPTPILOT_FOLDER') == 'true'\r\n\"\"\"\nscip-python python python-stdlib 3.11 os/__init__:: undefined\nscip-python python python-stdlib 3.11 os/getenv().: undefined\n\"\"\"\n\r\n\r\n# TODO: Parse files from the `.gpt-pilot` directory to resume a project - `user_stories` may have changed - include checksums for sections which may need to be reprocessed.\r\n# TODO: Save a summary at the end of each task/sprint.\r\nclass DotGptPilot:\r\n    \"\"\"The code defines a class called `DotGptPilot` that manages the `.gpt-pilot` directory. It has several functions, including `with_root_path`, `chat_log_folder`, and `log_chat_completion`. These functions create folders and log chat completion data to YAML or JSON files.\"\"\"\n    pass\n","documentation":"The code defines a class called `DotGptPilot` that manages the `.gpt-pilot` directory and creates folders for chat logs and log files."}},{"key":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#","language":"python","range":[13,0,90,102],"content":"class DotGptPilot:\r\n    \"\"\"\r\n    Manages the `.gpt-pilot` directory.\r\n    \"\"\"\r\n    def __init__(self, log_chat_completions: bool = True):\r\n        if not USE_GPTPILOT_FOLDER:\r\n            return\r\n        self.log_chat_completions = log_chat_completions\r\n        self.dot_gpt_pilot_path = self.with_root_path('~', create=False)\r\n        self.chat_log_path = self.chat_log_folder(None)\r\n\r\n    def with_root_path(self, root_path: str, create=True):\r\n        if not USE_GPTPILOT_FOLDER:\r\n            return\r\n        dot_gpt_pilot_path = os.path.expanduser(os.path.join(root_path, '.gpt-pilot'))\r\n        self.dot_gpt_pilot_path = dot_gpt_pilot_path\r\n\r\n        # Create the `.gpt-pilot` directory if required.\r\n        if create and self.log_chat_completions:  # (... or ...):\r\n            self.chat_log_folder(None)\r\n\r\n        return dot_gpt_pilot_path\r\n\r\n    def chat_log_folder(self, task):\r\n        if not USE_GPTPILOT_FOLDER:\r\n            return\r\n        chat_log_path = os.path.join(self.dot_gpt_pilot_path, 'chat_log')\r\n        if task is not None:\r\n            chat_log_path = os.path.join(chat_log_path, 'task_' + str(task))\r\n\r\n        os.makedirs(chat_log_path, exist_ok=True)\r\n        self.chat_log_path = chat_log_path\r\n        return chat_log_path\r\n\r\n    def log_chat_completion(self, endpoint: str, model: str, req_type: str, messages: list[dict], response: str):\r\n        if not USE_GPTPILOT_FOLDER:\r\n            return\r\n        if self.log_chat_completions:\r\n            time = datetime.now().strftime('%Y-%m-%d_%H_%M_%S')\r\n            with open(os.path.join(self.chat_log_path, f'{time}-{req_type}.yaml'), 'w', encoding=\"utf-8\") as file:\r\n                data = {\r\n                    'endpoint': endpoint,\r\n                    'model': model,\r\n                    'messages': messages,\r\n                    'response': response,\r\n                }\r\n\r\n                yaml.safe_dump(data, file, width=120, indent=2, default_flow_style=False, sort_keys=False)\r\n\r\n    def log_chat_completion_json(self, endpoint: str, model: str, req_type: str, functions: dict, json_response: str):\r\n        if not USE_GPTPILOT_FOLDER:\r\n            return\r\n        if self.log_chat_completions:\r\n            time = datetime.now().strftime('%Y-%m-%d_%H_%M_%S')\r\n\r\n            with open(os.path.join(self.chat_log_path, f'{time}-{req_type}.json'), 'w', encoding=\"utf-8\") as file:\r\n                data = {\r\n                    'endpoint': endpoint,\r\n                    'model': model,\r\n                    'functions': functions,\r\n                    'response': json.loads(json_response),\r\n                }\r\n\r\n                json.dump(data, file, indent=2)\r\n\r\n    def write_project(self, project):\r\n        if not USE_GPTPILOT_FOLDER:\r\n            return\r\n        data = {\r\n            'name': project.args['name'],\r\n            'description': project.project_description,\r\n            'user_stories': project.user_stories,\r\n            'architecture': project.architecture,\r\n            'development_plan': project.development_plan,\r\n        }\r\n\r\n        with open(os.path.join(self.dot_gpt_pilot_path, 'project.yaml'), 'w') as file:\r\n            yaml.safe_dump(data, file, width=120, indent=2, default_flow_style=False, sort_keys=False)","file":"/pilot/utils/dot_gpt_pilot.py","fileHash":"9d5eadb20790072b38c38716b5afb2df4edf103287026a753aaf356c758a0e6a","hash":"e1d64255daf06502135b188052ac77ea7e4d0cece9db770481ee493e18a9a3e7","processedContent":"class DotGptPilot:\r\n    \"\"\"\r\n    Manages the `.gpt-pilot` directory.\r\n    \"\"\"\r\n    def __init__(self, log_chat_completions: bool = True):\r\n        \"\"\"This code defines a function called `with_root_path` that creates a folder for storing chat logs. It takes a task as an argument and appends the task number to the folder name if the task is not None. The function then creates the folder using `os.makedirs()` and sets the `chat_log_path` attribute to the created folder path.\"\"\"\n        pass\n\r\n    def with_root_path(self, root_path: str, create=True):\r\n        \"\"\"This code defines a function called `with_root_path` that creates a folder for storing chat logs. It takes a task as an argument and appends the task number to the folder name if the task is not None. The function then creates the folder using `os.makedirs()` and sets the `chat_log_path` attribute to the created folder path.\"\"\"\n        pass\n\r\n    def chat_log_folder(self, task):\r\n        \"\"\"This code defines a function called `chat_log_folder` that creates a folder for storing chat logs. It takes a task as an argument and appends the task number to the folder name if the task is not None. The function then creates the folder using `os.makedirs()` and sets the `chat_log_path` attribute to the created folder path.\"\"\"\n        pass\n\r\n    def log_chat_completion(self, endpoint: str, model: str, req_type: str, messages: list[dict], response: str):\r\n        \"\"\"This code is a function that logs chat completion data to a YAML file. It takes in several parameters, including the endpoint, model, request type, messages, and response. The function checks if logging is enabled and then opens a file with the current date and time as the filename. It then writes the data to the file using the YAML format.\"\"\"\n        pass\n\r\n    def log_chat_completion_json(self, endpoint: str, model: str, req_type: str, functions: dict, json_response: str):\r\n        \"\"\"This code logs chat completion data in a JSON file. It checks if logging is enabled and then creates a new file with the current timestamp and request type. The data is then written to the file as a JSON object.\"\"\"\n        pass\n\r\n    def write_project(self, project):\r\n        if not USE_GPTPILOT_FOLDER:\r\n            return\r\n        data = {\r\n            'name': project.args['name'],\r\n            'description': project.project_description,\r\n            'user_stories': project.user_stories,\r\n            'architecture': project.architecture,\r\n            'development_plan': project.development_plan,\r\n        }\r\n\r\n        with open(os.path.join(self.dot_gpt_pilot_path, 'project.yaml'), 'w') as file:\r\n            yaml.safe_dump(data, file, width=120, indent=2, default_flow_style=False, sort_keys=False)","documentation":"The code defines a class called `DotGptPilot` that manages the `.gpt-pilot` directory. It has several functions, including `with_root_path`, `chat_log_folder`, and `log_chat_completion`. These functions create folders and log chat completion data to YAML or JSON files."}},{"key":"scip-python python temp indexer `pilot.helpers.project`/Project#root_path.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.project`/Project#root_path.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.project`/Project#dot_pilot_gpt.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.project`/Project#dot_pilot_gpt.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#with_root_path().","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#with_root_path().","language":"python","range":[24,4,34,33],"content":"def with_root_path(self, root_path: str, create=True):\r\n        if not USE_GPTPILOT_FOLDER:\r\n            return\r\n        dot_gpt_pilot_path = os.path.expanduser(os.path.join(root_path, '.gpt-pilot'))\r\n        self.dot_gpt_pilot_path = dot_gpt_pilot_path\r\n\r\n        # Create the `.gpt-pilot` directory if required.\r\n        if create and self.log_chat_completions:  # (... or ...):\r\n            self.chat_log_folder(None)\r\n\r\n        return dot_gpt_pilot_path","file":"/pilot/utils/dot_gpt_pilot.py","fileHash":"9d5eadb20790072b38c38716b5afb2df4edf103287026a753aaf356c758a0e6a","hash":"b5a68538fffbb5728df88d65d6dd59d12f40317847a4c00609ec95b960ef88f9","processedContent":"def with_root_path(self, root_path: str, create=True):\r\n        if not USE_GPTPILOT_FOLDER:\r #undefined\n            return\r\n        dot_gpt_pilot_path = os.path.expanduser(os.path.join(root_path, '.gpt-pilot'))\r\n        \"\"\"\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/path.: undefined\n        scip-python python python-stdlib 3.11 os/path.: undefined\n        scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n        scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n        \"\"\"\n        self.dot_gpt_pilot_path = dot_gpt_pilot_path\r #undefined\n\r\n        # Create the `.gpt-pilot` directory if required.\r\n        if create and self.log_chat_completions:  # (... or ...):\r #undefined\n            self.chat_log_folder(None)\r #This code defines a function called `chat_log_folder` that creates a folder for storing chat logs. It takes a task as an argument and appends the task number to the folder name if the task is not None. The function then creates the folder using `os.makedirs()` and sets the `chat_log_path` attribute to the created folder path.\n\r\n        return dot_gpt_pilot_path","documentation":"This code defines a function called `with_root_path` that creates a folder for storing chat logs. It takes a task as an argument and appends the task number to the folder name if the task is not None. The function then creates the folder using `os.makedirs()` and sets the `chat_log_path` attribute to the created folder path."}},{"key":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#start().","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#start().","language":"python","range":[174,4,182,28],"content":"def start(self):\n        \"\"\"\n        Record start of application creation process.\n        \"\"\"\n        if not self.enabled:\n            return\n\n        self.start_time = time.time()\n        self.end_time = None","file":"/pilot/utils/telemetry.py","fileHash":"500b9e782c148aa6137a800cd6924871cd09de08b047ebfbb66ad8b67400a963","hash":"d6c10d4bd336b51e89f3577678ae0817b9aff0cbf579e9a690d2e5bb15efed14","processedContent":"def start(self):\n        \"\"\"\n        Record start of application creation process.\n        \"\"\"\n        if not self.enabled: #undefined\n            return\n\n        self.start_time = time.time()\n        \"\"\"\n        scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#start_time.: undefined\n        scip-python python python-stdlib 3.11 time/__init__:: undefined\n        scip-python python python-stdlib 3.11 time/time().: undefined\n        \"\"\"\n        self.end_time = None","documentation":"This code records the start of an application creation process by setting a start time variable to the current time."}},{"key":"scip-python python temp indexer `pilot.helpers.project`/Project#project_manager.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.project`/Project#project_manager.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","language":"python","range":[21,4,73,14],"content":"def get_project_description(self):\n        print(json.dumps({\n            \"project_stage\": \"project_description\"\n        }), type='info')\n\n        self.project.app = get_app(self.project.args['app_id'], error_if_not_found=False)\n\n        # If this app_id already did this step, just get all data from DB and don't ask user again\n        if self.project.app is not None:\n            step = get_progress_steps(self.project.args['app_id'], PROJECT_DESCRIPTION_STEP)\n            if step and not should_execute_step(self.project.args['step'], PROJECT_DESCRIPTION_STEP):\n                step_already_finished(self.project.args, step)\n                self.project.set_root_path(setup_workspace(self.project.args))\n                self.project.project_description = step['summary']\n                self.project.project_description_messages = step['messages']\n                self.project.main_prompt = step['prompt']\n                return\n\n        # PROJECT DESCRIPTION\n        self.project.current_step = PROJECT_DESCRIPTION_STEP\n        if 'app_type' not in self.project.args:\n            self.project.args['app_type'] = ask_for_app_type()\n        if 'name' not in self.project.args:\n            question = 'What is the project name?'\n            print(question, type='ipc')\n            self.project.args['name'] = clean_filename(ask_user(self.project, question))\n\n        self.project.app = save_app(self.project)\n\n        self.project.set_root_path(setup_workspace(self.project.args))\n\n        self.project.main_prompt = ask_for_main_app_definition(self.project)\n\n        print(json.dumps({'open_project': {\n            #'uri': 'file:///' + self.project.root_path.replace('\\\\', '/'),\n            'path': self.project.root_path,\n            'name': self.project.args['name'],\n        }}), type='info')\n\n        high_level_messages = self.ask_clarifying_questions(self.project.main_prompt)\n\n        high_level_summary = self.generate_project_summary(high_level_messages)\n\n        save_progress(self.project.args['app_id'], self.project.current_step, {\n            \"prompt\": self.project.main_prompt,\n            \"messages\": high_level_messages,\n            \"summary\": high_level_summary,\n            \"app_data\": generate_app_data(self.project.args)\n        })\n\n        self.project.project_description = high_level_summary\n        self.project.project_description_messages = high_level_messages\n        return","file":"/pilot/helpers/agents/ProductOwner.py","fileHash":"0920711402359af9e0f7d4776d936a8f4211626ef8b9ffbcb67fc44ba16a9914","hash":"9d8244edab3af46b79317fced158b36c9217e0a011cf7c22c8c3496a71139249","processedContent":"def get_project_description(self):\n        print(json.dumps({\n        \"\"\"\n        scip-python python python-stdlib 3.11 json/__init__:: undefined\n        scip-python python python-stdlib 3.11 json/dumps().: undefined\n        \"\"\"\n            \"project_stage\": \"project_description\"\n        }), type='info')\n\n        self.project.app = get_app(self.project.args['app_id'], error_if_not_found=False)\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n        scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n        scip-python python temp indexer `pilot.database.database`/get_app().: This code defines a function called `get_app` that retrieves an app entity from the database based on its ID. It also includes error handling to raise a ValueError if the app is not found.\n        \"\"\"\n\n        # If this app_id already did this step, just get all data from DB and don't ask user again\n        if self.project.app is not None: #undefined\n            step = get_progress_steps(self.project.args['app_id'], PROJECT_DESCRIPTION_STEP)\n            \"\"\"\n            scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n            scip-python python temp indexer `pilot.database.database`/get_progress_steps().: This code defines a function called `get_progress_steps` that retrieves progress steps for a given application ID. It uses a dictionary to map progress step names to their corresponding model classes, and it returns a dictionary of progress steps with their corresponding data.\n            scip-python python temp indexer `pilot.helpers.agents.productowner`/PROJECT_DESCRIPTION_STEP.: undefined\n            \"\"\"\n            if step and not should_execute_step(self.project.args['step'], PROJECT_DESCRIPTION_STEP):\n            \"\"\"\n            scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n            scip-python python temp indexer `pilot.helpers.agents.productowner`/PROJECT_DESCRIPTION_STEP.: undefined\n            scip-python python temp indexer `pilot.utils.utils`/should_execute_step().: This code checks if the current step should be executed based on the argument passed in and the current step. It returns true if the current step is greater than or equal to the argument step.\n            \"\"\"\n                step_already_finished(self.project.args, step)\n                \"\"\"\n                scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n                scip-python python temp indexer `pilot.utils.utils`/step_already_finished().: This code updates the arguments with the app data from a step and then prints a success message to the console.\n                \"\"\"\n                self.project.set_root_path(setup_workspace(self.project.args))\n                \"\"\"\n                scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n                scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n                scip-python python temp indexer `pilot.utils.files`/setup_workspace().: This code defines a function called `setup_workspace` that creates a new project workspace and returns the path to it. It also creates a 'tests' folder inside the workspace and saves a user-app relationship if one does not already exist.\n                \"\"\"\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n        scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n        scip-python python temp indexer `pilot.utils.files`/setup_workspace().: This code defines a function called `setup_workspace` that creates a new project workspace and returns the path to it. It also creates a 'tests' folder inside the workspace and saves a user-app relationship if one does not already exist.\n        \"\"\"\n                self.project.project_description = step['summary'] #undefined\n                self.project.project_description_messages = step['messages'] #undefined\n                self.project.main_prompt = step['prompt'] #undefined\n                return\n\n        # PROJECT DESCRIPTION\n        self.project.current_step = PROJECT_DESCRIPTION_STEP\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n        scip-python python temp indexer `pilot.helpers.agents.productowner`/PROJECT_DESCRIPTION_STEP.: undefined\n        \"\"\"\n        if 'app_type' not in self.project.args: #undefined\n            self.project.args['app_type'] = ask_for_app_type()\n            \"\"\"\n            scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n            scip-python python temp indexer `pilot.prompts.prompts`/ask_for_app_type().: This code is a function that asks the user to select a type of app they want to build. It uses a styled_select function to display a list of available app types and returns the selected type.\n            \"\"\"\n        if 'name' not in self.project.args: #undefined\n            question = 'What is the project name?'\n            print(question, type='ipc')\n            self.project.args['name'] = clean_filename(ask_user(self.project, question))\n            \"\"\"\n            scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n            scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n            scip-python python temp indexer `pilot.utils.utils`/clean_filename().: This code takes a filename as input and removes any invalid characters, replacing whitespace with underscores.\n            scip-python python temp indexer `pilot.prompts.prompts`/ask_user().: This code defines a function called `ask_user` that retrieves user input from a database, styles the question, and saves the response to the database. It also logs the question and answer to a logger.\n            \"\"\"\n\n        self.project.app = save_app(self.project)\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n        scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n        scip-python python temp indexer `pilot.database.database`/save_app().: This code defines a function called `save_app` that saves an app entity to a database. It retrieves the app entity based on its ID, and then updates its fields with the values provided in the `args` dictionary. If the app entity does not exist, it creates a new one.\n        \"\"\"\n\n        self.project.set_root_path(setup_workspace(self.project.args))\n\n        self.project.main_prompt = ask_for_main_app_definition(self.project)\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n        scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n        scip-python python temp indexer `pilot.prompts.prompts`/ask_for_main_app_definition().: This code defines a function called `ask_for_main_app_definition` that retrieves user input from a database, styles the question, and saves the response to the database.\n        \"\"\"\n\n        print(json.dumps({'open_project': {\n        \"\"\"\n        scip-python python python-stdlib 3.11 json/__init__:: undefined\n        scip-python python python-stdlib 3.11 json/dumps().: undefined\n        \"\"\"\n            #'uri': 'file:///' + self.project.root_path.replace('\\\\', '/'),\n            'path': self.project.root_path, #undefined\n            'name': self.project.args['name'], #undefined\n        }}), type='info')\n\n        high_level_messages = self.ask_clarifying_questions(self.project.main_prompt)\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n        scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#ask_clarifying_questions().: This code defines a function called `ask_clarifying_questions` that takes in a description, app type, and name as input. It returns a list of messages that are used to guide the user through the process of creating an app.\n        \"\"\"\n\n        high_level_summary = self.generate_project_summary(high_level_messages) #This code defines a function called `generate_project_summary` that generates a summary of a project based on a list of high-level messages. It uses a class called `AgentConvo` to send and receive messages, and includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n\n        save_progress(self.project.args['app_id'], self.project.current_step, {\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n        scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n        scip-python python temp indexer `pilot.database.database`/save_progress().: This code defines a function called `save_progress` that saves progress data for an app in a database. It retrieves the app entity from the database based on its ID, creates or updates a record in a table based on the step provided, and updates the status of the app in the database.\n        \"\"\"\n            \"prompt\": self.project.main_prompt, #undefined\n            \"messages\": high_level_messages,\n            \"summary\": high_level_summary,\n            \"app_data\": generate_app_data(self.project.args)\n            \"\"\"\n            scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n            scip-python python temp indexer `pilot.utils.utils`/generate_app_data().: This code defines a function called `generate_app_data` that takes an argument called `args`. The function returns a dictionary with two keys: `app_id` and `app_type`, both of which are values from the `args` dictionary.\n            \"\"\"\n        })\n\n        self.project.project_description = high_level_summary #undefined\n        self.project.project_description_messages = high_level_messages #undefined\n        return","documentation":"This code defines a function called `get_project_description` that retrieves and generates project descriptions for apps based on user input. It includes error handling, progress tracking, and app data generation."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_stories().","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_stories().","language":"python","range":[93,4,133,14],"content":"def get_user_stories(self):\n        if not self.project.args.get('advanced', False):\n            return\n\n        print(json.dumps({\n            \"project_stage\": \"user_stories\"\n        }), type='info')\n\n        self.project.current_step = USER_STORIES_STEP\n        self.convo_user_stories = AgentConvo(self)\n\n        # If this app_id already did this step, just get all data from DB and don't ask user again\n        step = get_progress_steps(self.project.args['app_id'], USER_STORIES_STEP)\n        if step and not should_execute_step(self.project.args['step'], USER_STORIES_STEP):\n            step_already_finished(self.project.args, step)\n            self.convo_user_stories.messages = step['messages']\n            self.project.user_stories = step['user_stories']\n            return\n\n        # USER STORIES\n        msg = \"User Stories:\\n\"\n        print(color_green_bold(msg))\n        logger.info(msg)\n\n        self.project.user_stories = self.convo_user_stories.continuous_conversation('user_stories/specs.prompt', {\n            'name': self.project.args['name'],\n            'prompt': self.project.project_description,\n            'clarifications': self.project.project_description_messages,\n            'app_type': self.project.args['app_type'],\n            'END_RESPONSE': END_RESPONSE\n        })\n\n        logger.info(f\"Final user stories: {self.project.user_stories}\")\n\n        save_progress(self.project.args['app_id'], self.project.current_step, {\n            \"messages\": self.convo_user_stories.messages,\n            \"user_stories\": self.project.user_stories,\n            \"app_data\": generate_app_data(self.project.args)\n        })\n\n        return","file":"/pilot/helpers/agents/ProductOwner.py","fileHash":"0920711402359af9e0f7d4776d936a8f4211626ef8b9ffbcb67fc44ba16a9914","hash":"3c85528b21dd8a9abc65ebb41e011c187e08d03ff195509a403c6328c5c036b4","processedContent":"def get_user_stories(self):\n        if not self.project.args.get('advanced', False): #undefined\n            return\n\n        print(json.dumps({\n        \"\"\"\n        scip-python python python-stdlib 3.11 json/__init__:: undefined\n        scip-python python python-stdlib 3.11 json/dumps().: undefined\n        \"\"\"\n            \"project_stage\": \"user_stories\"\n        }), type='info')\n\n        self.project.current_step = USER_STORIES_STEP\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n        scip-python python temp indexer `pilot.helpers.agents.productowner`/USER_STORIES_STEP.: undefined\n        \"\"\"\n        self.convo_user_stories = AgentConvo(self) #This code defines a class called `AgentConvo` that represents a conversation with an agent. It includes functions for sending and receiving messages, as well as formatting and rendering prompts. The code also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n\n        # If this app_id already did this step, just get all data from DB and don't ask user again\n        step = get_progress_steps(self.project.args['app_id'], USER_STORIES_STEP)\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n        scip-python python temp indexer `pilot.helpers.agents.productowner`/USER_STORIES_STEP.: undefined\n        scip-python python temp indexer `pilot.database.database`/get_progress_steps().: This code defines a function called `get_progress_steps` that retrieves progress steps for a given application ID. It uses a dictionary to map progress step names to their corresponding model classes, and it returns a dictionary of progress steps with their corresponding data.\n        \"\"\"\n        if step and not should_execute_step(self.project.args['step'], USER_STORIES_STEP):\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n        scip-python python temp indexer `pilot.helpers.agents.productowner`/USER_STORIES_STEP.: undefined\n        scip-python python temp indexer `pilot.utils.utils`/should_execute_step().: This code checks if the current step should be executed based on the argument passed in and the current step. It returns true if the current step is greater than or equal to the argument step.\n        \"\"\"\n            step_already_finished(self.project.args, step)\n            \"\"\"\n            scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n            scip-python python temp indexer `pilot.utils.utils`/step_already_finished().: This code updates the arguments with the app data from a step and then prints a success message to the console.\n            \"\"\"\n            self.convo_user_stories.messages = step['messages']\n            \"\"\"\n            scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#convo_user_stories.: undefined\n            scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#messages.: undefined\n            \"\"\"\n            self.project.user_stories = step['user_stories'] #undefined\n            return\n\n        # USER STORIES\n        msg = \"User Stories:\\n\"\n        print(color_green_bold(msg)) #undefined\n        logger.info(msg)\n        \"\"\"\n        scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n        scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n        \"\"\"\n\n        self.project.user_stories = self.convo_user_stories.continuous_conversation('user_stories/specs.prompt', {\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n        scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#convo_user_stories.: undefined\n        scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#continuous_conversation().: The code defines a function called `continuous_conversation` that conducts a continuous conversation with the agent, allowing the user to add additional messages until the GPT response equals END_RESPONSE.\n        \"\"\"\n            'name': self.project.args['name'], #undefined\n            'prompt': self.project.project_description, #undefined\n            'clarifications': self.project.project_description_messages, #undefined\n            'app_type': self.project.args['app_type'], #undefined\n            'END_RESPONSE': END_RESPONSE #undefined\n        })\n\n        logger.info(f\"Final user stories: {self.project.user_stories}\")\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n        scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n        scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n        \"\"\"\n\n        save_progress(self.project.args['app_id'], self.project.current_step, {\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n        scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n        scip-python python temp indexer `pilot.database.database`/save_progress().: This code defines a function called `save_progress` that saves progress data for an app in a database. It retrieves the app entity from the database based on its ID, creates or updates a record in a table based on the step provided, and updates the status of the app in the database.\n        \"\"\"\n            \"messages\": self.convo_user_stories.messages,\n            \"\"\"\n            scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#convo_user_stories.: undefined\n            scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#messages.: undefined\n            \"\"\"\n            \"user_stories\": self.project.user_stories, #undefined\n            \"app_data\": generate_app_data(self.project.args)\n            \"\"\"\n            scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n            scip-python python temp indexer `pilot.utils.utils`/generate_app_data().: This code defines a function called `generate_app_data` that takes an argument called `args`. The function returns a dictionary with two keys: `app_id` and `app_type`, both of which are values from the `args` dictionary.\n            \"\"\"\n        })\n\n        return","documentation":"The code defines a function called `get_user_stories` that retrieves user stories from the agent based on the current step and app ID. It also saves progress data in a database."}},{"key":"scip-python python temp indexer `pilot.helpers.project`/Project#architect.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.project`/Project#architect.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#get_architecture().","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#get_architecture().","language":"python","range":[19,4,61,14],"content":"def get_architecture(self):\n        print(json.dumps({\n            \"project_stage\": \"architecture\"\n        }), type='info')\n\n        self.project.current_step = ARCHITECTURE_STEP\n\n        # If this app_id already did this step, just get all data from DB and don't ask user again\n        step = get_progress_steps(self.project.args['app_id'], ARCHITECTURE_STEP)\n        if step and not should_execute_step(self.project.args['step'], ARCHITECTURE_STEP):\n            step_already_finished(self.project.args, step)\n            self.project.architecture = step['architecture']\n            return\n\n        # ARCHITECTURE\n        print(color_green_bold(\"Planning project architecture...\\n\"))\n        logger.info(\"Planning project architecture...\")\n\n        self.convo_architecture = AgentConvo(self)\n        llm_response = self.convo_architecture.send_message('architecture/technologies.prompt',\n            {'name': self.project.args['name'],\n             'app_summary': self.project.project_description,\n             'clarifications': self.project.clarifications,\n             'user_stories': self.project.user_stories,\n             'user_tasks': self.project.user_tasks,\n             'app_type': self.project.args['app_type']}, ARCHITECTURE)\n        self.project.architecture = llm_response['technologies']\n\n        # TODO: Project.args should be a defined class so that all of the possible args are more obvious\n        if self.project.args.get('advanced', False):\n            llm_response = self.convo_architecture.get_additional_info_from_user(ARCHITECTURE)\n            if llm_response is not None:\n                self.project.architecture = llm_response['technologies']\n\n        logger.info(f\"Final architecture: {self.project.architecture}\")\n\n        save_progress(self.project.args['app_id'], self.project.current_step, {\n            \"messages\": self.convo_architecture.messages,\n            \"architecture\": self.project.architecture,\n            \"app_data\": generate_app_data(self.project.args)\n        })\n\n        return","file":"/pilot/helpers/agents/Architect.py","fileHash":"2760562b79d43a5a8c688bf6bce9ba47678ed0977ca08e8b61ac72a764108d3b","hash":"ab53b5071b199d068a1ca750c807515fde175744633da4952b84d4d8368755f7","processedContent":"def get_architecture(self):\n        print(json.dumps({\n        \"\"\"\n        scip-python python python-stdlib 3.11 json/__init__:: undefined\n        scip-python python python-stdlib 3.11 json/dumps().: undefined\n        \"\"\"\n            \"project_stage\": \"architecture\"\n        }), type='info')\n\n        self.project.current_step = ARCHITECTURE_STEP\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n        scip-python python temp indexer `pilot.helpers.agents.architect`/ARCHITECTURE_STEP.: undefined\n        \"\"\"\n\n        # If this app_id already did this step, just get all data from DB and don't ask user again\n        step = get_progress_steps(self.project.args['app_id'], ARCHITECTURE_STEP)\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n        scip-python python temp indexer `pilot.helpers.agents.architect`/ARCHITECTURE_STEP.: undefined\n        scip-python python temp indexer `pilot.database.database`/get_progress_steps().: This code defines a function called `get_progress_steps` that retrieves progress steps for a given application ID. It uses a dictionary to map progress step names to their corresponding model classes, and it returns a dictionary of progress steps with their corresponding data.\n        \"\"\"\n        if step and not should_execute_step(self.project.args['step'], ARCHITECTURE_STEP):\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n        scip-python python temp indexer `pilot.helpers.agents.architect`/ARCHITECTURE_STEP.: undefined\n        scip-python python temp indexer `pilot.utils.utils`/should_execute_step().: This code checks if the current step should be executed based on the argument passed in and the current step. It returns true if the current step is greater than or equal to the argument step.\n        \"\"\"\n            step_already_finished(self.project.args, step)\n            \"\"\"\n            scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n            scip-python python temp indexer `pilot.utils.utils`/step_already_finished().: This code updates the arguments with the app data from a step and then prints a success message to the console.\n            \"\"\"\n            self.project.architecture = step['architecture'] #undefined\n            return\n\n        # ARCHITECTURE\n        print(color_green_bold(\"Planning project architecture...\\n\")) #undefined\n        logger.info(\"Planning project architecture...\")\n        \"\"\"\n        scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n        scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n        \"\"\"\n\n        self.convo_architecture = AgentConvo(self)\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#convo_architecture.: undefined\n        scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#: This code defines a class called `AgentConvo` that represents a conversation with an agent. It includes functions for sending and receiving messages, as well as formatting and rendering prompts. The code also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n        \"\"\"\n        llm_response = self.convo_architecture.send_message('architecture/technologies.prompt',\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#convo_architecture.: undefined\n        scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().: The code defines a function called `send_message` that sends a message in a conversation, retrieving and rendering a prompt template based on the provided name, and then appending the rendered content to a list of messages. It also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n        \"\"\"\n            {'name': self.project.args['name'], #undefined\n             'app_summary': self.project.project_description, #undefined\n             'clarifications': self.project.clarifications, #undefined\n             'user_stories': self.project.user_stories, #undefined\n             'user_tasks': self.project.user_tasks, #undefined\n             'app_type': self.project.args['app_type']}, ARCHITECTURE)\n             \"\"\"\n             scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n             scip-python python temp indexer `pilot.const.function_calls`/ARCHITECTURE.: undefined\n             \"\"\"\n        self.project.architecture = llm_response['technologies'] #undefined\n\n        # TODO: Project.args should be a defined class so that all of the possible args are more obvious\n        if self.project.args.get('advanced', False): #undefined\n            llm_response = self.convo_architecture.get_additional_info_from_user(ARCHITECTURE)\n            \"\"\"\n            scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#convo_architecture.: undefined\n            scip-python python temp indexer `pilot.const.function_calls`/ARCHITECTURE.: undefined\n            scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#get_additional_info_from_user().: This code defines a function called `get_additional_info_from_user` that allows the user to make changes to a previous message in a conversation. It retrieves user input from a database, styles the question, and saves the response to the database. It also logs the question and answer to a logger.\n            \"\"\"\n            if llm_response is not None:\n                self.project.architecture = llm_response['technologies'] #undefined\n\n        logger.info(f\"Final architecture: {self.project.architecture}\")\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n        scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n        scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n        \"\"\"\n\n        save_progress(self.project.args['app_id'], self.project.current_step, {\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n        scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n        scip-python python temp indexer `pilot.database.database`/save_progress().: This code defines a function called `save_progress` that saves progress data for an app in a database. It retrieves the app entity from the database based on its ID, creates or updates a record in a table based on the step provided, and updates the status of the app in the database.\n        \"\"\"\n            \"messages\": self.convo_architecture.messages,\n            \"\"\"\n            scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#convo_architecture.: undefined\n            scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#messages.: undefined\n            \"\"\"\n            \"architecture\": self.project.architecture, #undefined\n            \"app_data\": generate_app_data(self.project.args)\n            \"\"\"\n            scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n            scip-python python temp indexer `pilot.utils.utils`/generate_app_data().: This code defines a function called `generate_app_data` that takes an argument called `args`. The function returns a dictionary with two keys: `app_id` and `app_type`, both of which are values from the `args` dictionary.\n            \"\"\"\n        })\n\n        return","documentation":"This code defines a function called `get_architecture` that retrieves and updates project architecture data for an app based on user input. It uses a conversation with the user to gather information about the app's architecture, and then saves the data to a database."}},{"key":"scip-python python temp indexer `pilot.helpers.project`/Project#developer.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.project`/Project#developer.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#set_up_environment().","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#set_up_environment().","language":"python","range":[517,4,573,10],"content":"def set_up_environment(self):\n        self.project.current_step = ENVIRONMENT_SETUP_STEP\n        self.convo_os_specific_tech = AgentConvo(self)\n\n        # If this app_id already did this step, just get all data from DB and don't ask user again\n        step = get_progress_steps(self.project.args['app_id'], ENVIRONMENT_SETUP_STEP)\n        if step and not should_execute_step(self.project.args['step'], ENVIRONMENT_SETUP_STEP):\n            step_already_finished(self.project.args, step)\n            return\n\n        user_input = ''\n        while user_input.lower() != 'done':\n            print('done', type='button')\n            user_input = styled_text(self.project, 'Please set up your local environment so that the technologies listed can be utilized. When you\\'re done, write \"DONE\"')\n        save_progress(self.project.args['app_id'], self.project.current_step, {\n            \"os_specific_technologies\": [],\n            \"newly_installed_technologies\": [],\n            \"app_data\": generate_app_data(self.project.args)\n        })\n        return\n        # ENVIRONMENT SETUP\n        print(color_green_bold(\"Setting up the environment...\\n\"))\n        logger.info(\"Setting up the environment...\")\n\n        os_info = get_os_info()\n        llm_response = self.convo_os_specific_tech.send_message('development/env_setup/specs.prompt',\n                                                                {\n                                                                    \"name\": self.project.args['name'],\n                                                                    \"app_type\": self.project.args['app_type'],\n                                                                    \"os_info\": os_info,\n                                                                    \"technologies\": self.project.architecture\n                                                                }, FILTER_OS_TECHNOLOGIES)\n\n        os_specific_technologies = llm_response['technologies']\n        for technology in os_specific_technologies:\n            logger.info('Installing %s', technology)\n            llm_response = self.install_technology(technology)\n\n            # TODO: I don't think llm_response would ever be 'DONE'?\n            if llm_response != 'DONE':\n                llm_response = self.convo_os_specific_tech.send_message(\n                    'development/env_setup/unsuccessful_installation.prompt',\n                    {'technology': technology},\n                    EXECUTE_COMMANDS)\n                installation_commands = llm_response['commands']\n\n                if installation_commands is not None:\n                    for cmd in installation_commands:\n                        run_command_until_success(self.convo_os_specific_tech, cmd['command'], timeout=cmd['timeout'])\n\n        logger.info('The entire tech stack is installed and ready to be used.')\n\n        save_progress(self.project.args['app_id'], self.project.current_step, {\n            \"os_specific_technologies\": os_specific_technologies,\n            \"newly_installed_technologies\": [],\n            \"app_data\": generate_app_data(self.project.args)\n        })","file":"/pilot/helpers/agents/Developer.py","fileHash":"0d85d908cc038e7de0ad336ba7e9ed864822bd6914b09ac5d9e850fd95263181","hash":"a45cb32caf1811d4e30edcd5c2e852fa62fa7b9b1d78ad2076a2432c6f410f28","processedContent":"def set_up_environment(self):\n        self.project.current_step = ENVIRONMENT_SETUP_STEP\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n        scip-python python temp indexer `pilot.helpers.agents.developer`/ENVIRONMENT_SETUP_STEP.: undefined\n        \"\"\"\n        self.convo_os_specific_tech = AgentConvo(self) #This code defines a class called `AgentConvo` that represents a conversation with an agent. It includes functions for sending and receiving messages, as well as formatting and rendering prompts. The code also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n\n        # If this app_id already did this step, just get all data from DB and don't ask user again\n        step = get_progress_steps(self.project.args['app_id'], ENVIRONMENT_SETUP_STEP)\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n        scip-python python temp indexer `pilot.helpers.agents.developer`/ENVIRONMENT_SETUP_STEP.: undefined\n        scip-python python temp indexer `pilot.database.database`/get_progress_steps().: This code defines a function called `get_progress_steps` that retrieves progress steps for a given application ID. It uses a dictionary to map progress step names to their corresponding model classes, and it returns a dictionary of progress steps with their corresponding data.\n        \"\"\"\n        if step and not should_execute_step(self.project.args['step'], ENVIRONMENT_SETUP_STEP):\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n        scip-python python temp indexer `pilot.helpers.agents.developer`/ENVIRONMENT_SETUP_STEP.: undefined\n        scip-python python temp indexer `pilot.utils.utils`/should_execute_step().: This code checks if the current step should be executed based on the argument passed in and the current step. It returns true if the current step is greater than or equal to the argument step.\n        \"\"\"\n            step_already_finished(self.project.args, step)\n            \"\"\"\n            scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n            scip-python python temp indexer `pilot.utils.utils`/step_already_finished().: This code updates the arguments with the app data from a step and then prints a success message to the console.\n            \"\"\"\n            return\n\n        user_input = ''\n        while user_input.lower() != 'done':\n            print('done', type='button')\n            user_input = styled_text(self.project, 'Please set up your local environment so that the technologies listed can be utilized. When you\\'re done, write \"DONE\"')\n            \"\"\"\n            scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n            scip-python python temp indexer `pilot.utils.questionary`/styled_text().: This code defines a function called `styled_text` that retrieves user input from a database, styles the question, and saves the response to the database.\n            \"\"\"\n        save_progress(self.project.args['app_id'], self.project.current_step, {\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n        scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n        scip-python python temp indexer `pilot.database.database`/save_progress().: This code defines a function called `save_progress` that saves progress data for an app in a database. It retrieves the app entity from the database based on its ID, creates or updates a record in a table based on the step provided, and updates the status of the app in the database.\n        \"\"\"\n            \"os_specific_technologies\": [],\n            \"newly_installed_technologies\": [],\n            \"app_data\": generate_app_data(self.project.args)\n            \"\"\"\n            scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n            scip-python python temp indexer `pilot.utils.utils`/generate_app_data().: This code defines a function called `generate_app_data` that takes an argument called `args`. The function returns a dictionary with two keys: `app_id` and `app_type`, both of which are values from the `args` dictionary.\n            \"\"\"\n        })\n        return\n        # ENVIRONMENT SETUP\n        print(color_green_bold(\"Setting up the environment...\\n\"))\n        logger.info(\"Setting up the environment...\")\n\n        os_info = get_os_info()\n        llm_response = self.convo_os_specific_tech.send_message('development/env_setup/specs.prompt',\n                                                                {\n                                                                    \"name\": self.project.args['name'],\n                                                                    \"app_type\": self.project.args['app_type'],\n                                                                    \"os_info\": os_info,\n                                                                    \"technologies\": self.project.architecture\n                                                                }, FILTER_OS_TECHNOLOGIES)\n\n        os_specific_technologies = llm_response['technologies']\n        for technology in os_specific_technologies:\n            logger.info('Installing %s', technology)\n            llm_response = self.install_technology(technology)\n\n            # TODO: I don't think llm_response would ever be 'DONE'?\n            if llm_response != 'DONE':\n                llm_response = self.convo_os_specific_tech.send_message(\n                    'development/env_setup/unsuccessful_installation.prompt',\n                    {'technology': technology},\n                    EXECUTE_COMMANDS)\n                installation_commands = llm_response['commands']\n\n                if installation_commands is not None:\n                    for cmd in installation_commands:\n                        run_command_until_success(self.convo_os_specific_tech, cmd['command'], timeout=cmd['timeout'])\n\n        logger.info('The entire tech stack is installed and ready to be used.')\n\n        save_progress(self.project.args['app_id'], self.project.current_step, {\n            \"os_specific_technologies\": os_specific_technologies,\n            \"newly_installed_technologies\": [],\n            \"app_data\": generate_app_data(self.project.args)\n        })","documentation":"This code sets up the environment for a project by installing the necessary technologies and saving the progress in a database."}},{"key":"scip-python python temp indexer `pilot.helpers.project`/Project#tech_lead.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.project`/Project#tech_lead.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_development_plan().","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_development_plan().","language":"python","range":[18,4,53,14],"content":"def create_development_plan(self):\n        self.project.current_step = DEVELOPMENT_PLANNING_STEP\n        self.convo_development_plan = AgentConvo(self)\n\n        # If this app_id already did this step, just get all data from DB and don't ask user again\n        step = get_progress_steps(self.project.args['app_id'], DEVELOPMENT_PLANNING_STEP)\n        if step and not should_execute_step(self.project.args['step'], DEVELOPMENT_PLANNING_STEP):\n            step_already_finished(self.project.args, step)\n            self.project.development_plan = step['development_plan']\n            return\n\n        # DEVELOPMENT PLANNING\n        print(color_green_bold(\"Starting to create the action plan for development...\\n\"))\n        logger.info(\"Starting to create the action plan for development...\")\n\n        # TODO add clarifications\n        llm_response = self.convo_development_plan.send_message('development/plan.prompt',\n            {\n                \"name\": self.project.args['name'],\n                \"app_type\": self.project.args['app_type'],\n                \"app_summary\": self.project.project_description,\n                \"clarifications\": self.project.clarifications,\n                \"user_stories\": self.project.user_stories,\n                \"user_tasks\": self.project.user_tasks,\n                \"technologies\": self.project.architecture,\n                \"task_type\": 'app',\n            }, DEVELOPMENT_PLAN)\n        self.project.development_plan = llm_response['plan']\n\n        logger.info('Plan for development is created.')\n\n        save_progress(self.project.args['app_id'], self.project.current_step, {\n            \"development_plan\": self.project.development_plan, \"app_data\": generate_app_data(self.project.args)\n        })\n\n        return","file":"/pilot/helpers/agents/TechLead.py","fileHash":"178ab0375a889408a9d022dedcc919c07e2484116282a310d3856ae87c405426","hash":"2073401bc28b8a3026c5f2dde424becec8f4efca45bddebc147624efedd5d99e","processedContent":"def create_development_plan(self):\n        self.project.current_step = DEVELOPMENT_PLANNING_STEP\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n        scip-python python temp indexer `pilot.helpers.agents.techlead`/DEVELOPMENT_PLANNING_STEP.: undefined\n        \"\"\"\n        self.convo_development_plan = AgentConvo(self) #This code defines a class called `AgentConvo` that represents a conversation with an agent. It includes functions for sending and receiving messages, as well as formatting and rendering prompts. The code also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n\n        # If this app_id already did this step, just get all data from DB and don't ask user again\n        step = get_progress_steps(self.project.args['app_id'], DEVELOPMENT_PLANNING_STEP)\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n        scip-python python temp indexer `pilot.helpers.agents.techlead`/DEVELOPMENT_PLANNING_STEP.: undefined\n        scip-python python temp indexer `pilot.database.database`/get_progress_steps().: This code defines a function called `get_progress_steps` that retrieves progress steps for a given application ID. It uses a dictionary to map progress step names to their corresponding model classes, and it returns a dictionary of progress steps with their corresponding data.\n        \"\"\"\n        if step and not should_execute_step(self.project.args['step'], DEVELOPMENT_PLANNING_STEP):\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n        scip-python python temp indexer `pilot.helpers.agents.techlead`/DEVELOPMENT_PLANNING_STEP.: undefined\n        scip-python python temp indexer `pilot.utils.utils`/should_execute_step().: This code checks if the current step should be executed based on the argument passed in and the current step. It returns true if the current step is greater than or equal to the argument step.\n        \"\"\"\n            step_already_finished(self.project.args, step)\n            \"\"\"\n            scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n            scip-python python temp indexer `pilot.utils.utils`/step_already_finished().: This code updates the arguments with the app data from a step and then prints a success message to the console.\n            \"\"\"\n            self.project.development_plan = step['development_plan'] #undefined\n            return\n\n        # DEVELOPMENT PLANNING\n        print(color_green_bold(\"Starting to create the action plan for development...\\n\")) #undefined\n        logger.info(\"Starting to create the action plan for development...\")\n        \"\"\"\n        scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n        scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n        \"\"\"\n\n        # TODO add clarifications\n        llm_response = self.convo_development_plan.send_message('development/plan.prompt',\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#convo_development_plan.: undefined\n        scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().: The code defines a function called `send_message` that sends a message in a conversation, retrieving and rendering a prompt template based on the provided name, and then appending the rendered content to a list of messages. It also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n        \"\"\"\n            {\n                \"name\": self.project.args['name'], #undefined\n                \"app_type\": self.project.args['app_type'], #undefined\n                \"app_summary\": self.project.project_description, #undefined\n                \"clarifications\": self.project.clarifications, #undefined\n                \"user_stories\": self.project.user_stories, #undefined\n                \"user_tasks\": self.project.user_tasks, #undefined\n                \"technologies\": self.project.architecture, #undefined\n                \"task_type\": 'app',\n            }, DEVELOPMENT_PLAN) #undefined\n        self.project.development_plan = llm_response['plan'] #undefined\n\n        logger.info('Plan for development is created.')\n        \"\"\"\n        scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n        scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n        \"\"\"\n\n        save_progress(self.project.args['app_id'], self.project.current_step, {\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n        scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n        scip-python python temp indexer `pilot.database.database`/save_progress().: This code defines a function called `save_progress` that saves progress data for an app in a database. It retrieves the app entity from the database based on its ID, creates or updates a record in a table based on the step provided, and updates the status of the app in the database.\n        \"\"\"\n            \"development_plan\": self.project.development_plan, \"app_data\": generate_app_data(self.project.args)\n            \"\"\"\n            scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n            scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n            scip-python python temp indexer `pilot.utils.utils`/generate_app_data().: This code defines a function called `generate_app_data` that takes an argument called `args`. The function returns a dictionary with two keys: `app_id` and `app_type`, both of which are values from the `args` dictionary.\n            \"\"\"\n        })\n\n        return","documentation":"The code defines a function called `create_development_plan` that retrieves progress data for an app from a database, updates the status of the app in the database, and saves the development plan for the app."}},{"key":"scip-python python temp indexer `pilot.helpers.project`/Project#args.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.project`/Project#args.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.project`/Project#skip_steps.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.project`/Project#skip_steps.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.project`/Project#skip_until_dev_step.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.project`/Project#skip_until_dev_step.","language":"python"}},{"key":"scip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#app.","attributes":{"symbol":"scip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#app.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#write_project().","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#write_project().","language":"python","range":[78,4,90,102],"content":"def write_project(self, project):\r\n        if not USE_GPTPILOT_FOLDER:\r\n            return\r\n        data = {\r\n            'name': project.args['name'],\r\n            'description': project.project_description,\r\n            'user_stories': project.user_stories,\r\n            'architecture': project.architecture,\r\n            'development_plan': project.development_plan,\r\n        }\r\n\r\n        with open(os.path.join(self.dot_gpt_pilot_path, 'project.yaml'), 'w') as file:\r\n            yaml.safe_dump(data, file, width=120, indent=2, default_flow_style=False, sort_keys=False)","file":"/pilot/utils/dot_gpt_pilot.py","fileHash":"9d5eadb20790072b38c38716b5afb2df4edf103287026a753aaf356c758a0e6a","hash":"a5d8741d4a6e5d4184d269183a38381bcf7f66f4752800c64f518a66efe5aea4","processedContent":"def write_project(self, project):\r\n        if not USE_GPTPILOT_FOLDER:\r #undefined\n            return\r\n        data = {\r\n            'name': project.args['name'],\r\n            'description': project.project_description,\r\n            'user_stories': project.user_stories,\r\n            'architecture': project.architecture,\r\n            'development_plan': project.development_plan,\r\n        }\r\n\r\n        with open(os.path.join(self.dot_gpt_pilot_path, 'project.yaml'), 'w') as file:\r\n        \"\"\"\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/path.: undefined\n        scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n        scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#dot_gpt_pilot_path.: undefined\n        \"\"\"\n            yaml.safe_dump(data, file, width=120, indent=2, default_flow_style=False, sort_keys=False)","documentation":"This code defines a function called `write_project` that takes a project object as an argument and writes its data to a YAML file. The function checks if the project's name is defined, and if so, it creates a dictionary with the project's name, description, user stories, architecture, and development plan. It then opens a file in the `dot_gpt_pilot_path` directory and uses the `yaml.safe_dump` function to write the data to the file."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#start_coding().","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#start_coding().","language":"python","range":[41,4,79,44],"content":"def start_coding(self):\n        if not self.project.finished:\n            self.project.current_step = 'coding'\n            update_app_status(self.project.args['app_id'], self.project.current_step)\n\n            if self.project.skip_steps is None:\n                self.project.skip_steps = False if (not self.project.continuing_project or ('skip_until_dev_step' in self.project.args and self.project.args['skip_until_dev_step'] == '0')) else True\n\n        # DEVELOPMENT\n        print(color_green_bold(\"🚀 Now for the actual development...\\n\"))\n        logger.info(\"Starting to create the actual code...\")\n\n        total_tasks = len(self.project.development_plan)\n        progress_thresholds = [50]  # Percentages of progress when documentation is created\n        documented_thresholds = set()\n\n        for i, dev_task in enumerate(self.project.development_plan):\n            current_progress_percent = round((i / total_tasks) * 100, 2)\n\n            for threshold in progress_thresholds:\n                if current_progress_percent > threshold and threshold not in documented_thresholds:\n                    self.project.technical_writer.document_project(current_progress_percent)\n                    documented_thresholds.add(threshold)\n\n            self.implement_task(i, dev_task)\n\n        # DEVELOPMENT END\n        self.project.technical_writer.document_project(100)\n        self.project.dot_pilot_gpt.chat_log_folder(None)\n        if not self.project.finished:\n            self.project.finished = True\n            update_app_status(self.project.args['app_id'], self.project.current_step)\n            message = 'The app is DONE!!! Yay...you can use it now.\\n'\n            logger.info(message)\n            print(color_green_bold(message))\n        else:\n            message = 'Feature complete!\\n'\n            logger.info(message)\n            print(color_green_bold(message))","file":"/pilot/helpers/agents/Developer.py","fileHash":"0d85d908cc038e7de0ad336ba7e9ed864822bd6914b09ac5d9e850fd95263181","hash":"2e441ee97ef8ca66a4bdb22fdd291426213b8c243fea52b8b8b2fb90d687ae1d","processedContent":"def start_coding(self):\n        if not self.project.finished: #undefined\n            self.project.current_step = 'coding' #undefined\n            update_app_status(self.project.args['app_id'], self.project.current_step)\n            \"\"\"\n            scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n            scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n            scip-python python temp indexer `pilot.database.database`/update_app_status().: This code updates the status of an app in the database. It retrieves the app with the specified ID, sets its status to the new status provided, and saves the changes. If the app does not exist, it returns False.\n            \"\"\"\n            \"\"\"\n            scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n            scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n            scip-python python temp indexer `pilot.database.database`/update_app_status().: This code updates the status of an app in the database. It retrieves the app with the specified ID, sets its status to the new status provided, and saves the changes. If the app does not exist, it returns False.\n            \"\"\"\n\n            if self.project.skip_steps is None: #undefined\n                self.project.skip_steps = False if (not self.project.continuing_project or ('skip_until_dev_step' in self.project.args and self.project.args['skip_until_dev_step'] == '0')) else True\n                \"\"\"\n                scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n                scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n                scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n                scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n                \"\"\"\n\n        # DEVELOPMENT\n        print(color_green_bold(\"🚀 Now for the actual development...\\n\")) #undefined\n        logger.info(\"Starting to create the actual code...\")\n        \"\"\"\n        scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n        scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n        \"\"\"\n\n        total_tasks = len(self.project.development_plan) #undefined\n        progress_thresholds = [50]  # Percentages of progress when documentation is created\n        documented_thresholds = set()\n\n        for i, dev_task in enumerate(self.project.development_plan): #undefined\n            current_progress_percent = round((i / total_tasks) * 100, 2)\n\n            for threshold in progress_thresholds:\n                if current_progress_percent > threshold and threshold not in documented_thresholds:\n                    self.project.technical_writer.document_project(current_progress_percent) #undefined\n                    documented_thresholds.add(threshold)\n\n            self.implement_task(i, dev_task) #The code defines a function called `implement_task` that takes in a task description and step index, and executes the steps in the task until it succeeds or reaches a timeout. It also checks if the command was successful by checking the exit code of the process that ran the command.\n\n        # DEVELOPMENT END\n        self.project.technical_writer.document_project(100) #undefined\n        self.project.dot_pilot_gpt.chat_log_folder(None) #undefined\n        if not self.project.finished: #undefined\n            self.project.finished = True #undefined\n            update_app_status(self.project.args['app_id'], self.project.current_step)\n            message = 'The app is DONE!!! Yay...you can use it now.\\n'\n            logger.info(message)\n            \"\"\"\n            scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n            scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n            \"\"\"\n            \"\"\"\n            scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n            scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n            \"\"\"\n            print(color_green_bold(message)) #undefined\n        else:\n            message = 'Feature complete!\\n'\n            logger.info(message)\n            print(color_green_bold(message))","documentation":"This code is a part of a larger program that automates the development process for an app. It checks the status of the app, updates the status in the database, and then starts the development process by printing a message to the console and logging a message to a file."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_feature_plan().","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_feature_plan().","language":"python","range":[55,4,80,14],"content":"def create_feature_plan(self, feature_description):\n        self.save_dev_steps = True\n        self.convo_feature_plan = AgentConvo(self)\n        previous_features = get_features_by_app_id(self.project.args['app_id'])\n\n        llm_response = self.convo_feature_plan.send_message('development/feature_plan.prompt',\n            {\n                \"name\": self.project.args['name'],\n                \"app_type\": self.project.args['app_type'],\n                \"app_summary\": self.project.project_description,\n                \"clarifications\": self.project.clarifications,\n                \"user_stories\": self.project.user_stories,\n                \"user_tasks\": self.project.user_tasks,\n                \"technologies\": self.project.architecture,\n                \"directory_tree\": self.project.get_directory_tree(True),\n                \"development_tasks\": self.project.development_plan,\n                \"files\": self.project.get_all_coded_files(),\n                \"previous_features\": previous_features,\n                \"feature_description\": feature_description,\n                \"task_type\": 'feature',\n            }, DEVELOPMENT_PLAN)\n\n        self.project.development_plan = llm_response['plan']\n\n        logger.info('Plan for feature development is created.')\n        return","file":"/pilot/helpers/agents/TechLead.py","fileHash":"178ab0375a889408a9d022dedcc919c07e2484116282a310d3856ae87c405426","hash":"01a0114e22b3e7c06ae80f806e58fbd6bfcd919f5465e26608ac1343a2b77b71","processedContent":"def create_feature_plan(self, feature_description):\n        self.save_dev_steps = True #undefined\n        self.convo_feature_plan = AgentConvo(self) #This code defines a class called `AgentConvo` that represents a conversation with an agent. It includes functions for sending and receiving messages, as well as formatting and rendering prompts. The code also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n        previous_features = get_features_by_app_id(self.project.args['app_id'])\n        \"\"\"\n        scip-python python temp indexer `pilot.database.database`/get_features_by_app_id().: This code defines a function called `get_features_by_app_id` that retrieves a list of features from the database based on an app ID. It includes error handling to raise a ValueError if the app is not found.\n        scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n        \"\"\"\n\n        llm_response = self.convo_feature_plan.send_message('development/feature_plan.prompt',\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#convo_feature_plan.: undefined\n        scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().: The code defines a function called `send_message` that sends a message in a conversation, retrieving and rendering a prompt template based on the provided name, and then appending the rendered content to a list of messages. It also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n        \"\"\"\n            {\n                \"name\": self.project.args['name'], #undefined\n                \"app_type\": self.project.args['app_type'], #undefined\n                \"app_summary\": self.project.project_description, #undefined\n                \"clarifications\": self.project.clarifications, #undefined\n                \"user_stories\": self.project.user_stories, #undefined\n                \"user_tasks\": self.project.user_tasks, #undefined\n                \"technologies\": self.project.architecture, #undefined\n                \"directory_tree\": self.project.get_directory_tree(True), #undefined\n                \"development_tasks\": self.project.development_plan, #undefined\n                \"files\": self.project.get_all_coded_files(), #undefined\n                \"previous_features\": previous_features,\n                \"feature_description\": feature_description,\n                \"task_type\": 'feature',\n            }, DEVELOPMENT_PLAN) #undefined\n\n        self.project.development_plan = llm_response['plan'] #undefined\n\n        logger.info('Plan for feature development is created.')\n        \"\"\"\n        scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n        scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n        \"\"\"\n        return","documentation":"The code defines a function called `create_feature_plan` that retrieves a list of features from the database based on an app ID, and then sends a message in a conversation to retrieve a prompt template for feature development."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_feature_summary().","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_feature_summary().","language":"python","range":[82,4,103,14],"content":"def create_feature_summary(self, feature_description):\n        self.convo_feature_summary = AgentConvo(self)\n\n        llm_response = self.convo_feature_summary.send_message('development/feature_summary.prompt',\n            {\n                \"name\": self.project.args['name'],\n                \"app_type\": self.project.args['app_type'],\n                \"app_summary\": self.project.project_description,\n                \"feature_description\": feature_description,\n                \"development_tasks\": self.project.development_plan,\n            })\n\n        self.project.feature_summary = llm_response\n\n        if not self.project.skip_steps:\n            save_feature(self.project.args['app_id'],\n                         self.project.feature_summary,\n                         self.convo_feature_plan.messages,\n                         self.project.checkpoints['last_development_step'])\n\n        logger.info('Summary for new feature is created.')\n        return","file":"/pilot/helpers/agents/TechLead.py","fileHash":"178ab0375a889408a9d022dedcc919c07e2484116282a310d3856ae87c405426","hash":"29920f3e219af2e785b02579341eee55610358afb53003464779ca2e7d77e77f","processedContent":"def create_feature_summary(self, feature_description):\n        self.convo_feature_summary = AgentConvo(self) #This code defines a class called `AgentConvo` that represents a conversation with an agent. It includes functions for sending and receiving messages, as well as formatting and rendering prompts. The code also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n\n        llm_response = self.convo_feature_summary.send_message('development/feature_summary.prompt',\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#convo_feature_summary.: undefined\n        scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().: The code defines a function called `send_message` that sends a message in a conversation, retrieving and rendering a prompt template based on the provided name, and then appending the rendered content to a list of messages. It also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n        \"\"\"\n            {\n                \"name\": self.project.args['name'], #undefined\n                \"app_type\": self.project.args['app_type'], #undefined\n                \"app_summary\": self.project.project_description, #undefined\n                \"feature_description\": feature_description,\n                \"development_tasks\": self.project.development_plan, #undefined\n            })\n\n        self.project.feature_summary = llm_response #undefined\n\n        if not self.project.skip_steps: #undefined\n            save_feature(self.project.args['app_id'],\n            \"\"\"\n            scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n            scip-python python temp indexer `pilot.database.database`/save_feature().: This code defines a function called `save_feature` that creates a new feature entity in the database based on the input parameters. It retrieves an app entity from the database using the `get_app` function, and then creates a new feature entity with the given summary, messages, and previous step. The function also includes error handling to raise a ValueError if the app is not found.\n            \"\"\"\n                         self.project.feature_summary, #undefined\n                         self.convo_feature_plan.messages,\n                         \"\"\"\n                         scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#convo_feature_plan.: undefined\n                         scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#messages.: undefined\n                         \"\"\"\n                         self.project.checkpoints['last_development_step']) #undefined\n\n        logger.info('Summary for new feature is created.')\n        \"\"\"\n        scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n        scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n        \"\"\"\n        return","documentation":"The code defines a function called `create_feature_summary` that creates a summary of a new feature based on user input. It includes functions for sending and receiving messages, as well as formatting and rendering prompts."}},{"key":"scip-python python python-stdlib 3.11 os/path.","attributes":{"symbol":"scip-python python python-stdlib 3.11 os/path.","language":"python"}},{"key":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"symbol":"scip-python python python-stdlib 3.11 posixpath/basename().","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.project`/Project#files.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.project`/Project#files.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.project`/Project#checkpoints.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.project`/Project#checkpoints.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.project`/Project#ipc_client_instance.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.project`/Project#ipc_client_instance.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers`/__init__:","range":[0,0,0,0],"content":"","file":"/pilot/helpers/__init__.py","language":"python","fileHash":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855","hash":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855","processedContent":""}},{"key":"scip-python python temp indexer `pilot.helpers.cli`/enqueue_output().","attributes":{"range":[26,0,31,15],"symbol":"scip-python python temp indexer `pilot.helpers.cli`/enqueue_output().","content":"def enqueue_output(out, q):\n    for line in iter(out.readline, ''):\n        if interrupted:  # Check if the flag is set\n            break\n        q.put(line)\n    out.close()","file":"/pilot/helpers/cli.py","language":"python","fileHash":"422ef82ede524a5790d370e04f026d86157a903e23d309302192e6a88f244b05","hash":"12efbebb9e90edc3480eaa21fbe121661fd27b2714c67f61fb8fa641087c87b5","processedContent":"def enqueue_output(out, q):\n    for line in iter(out.readline, ''):\n        if interrupted:  # Check if the flag is set #undefined\n            break\n        q.put(line)\n    out.close()","documentation":"This code reads lines from a file and adds them to a queue, stopping if an interrupt flag is set."}},{"key":"scip-python python temp indexer `pilot.helpers.cli`/run_command().","attributes":{"range":[34,0,74,18],"symbol":"scip-python python temp indexer `pilot.helpers.cli`/run_command().","content":"def run_command(command, root_path, q_stdout, q_stderr) -> subprocess.Popen:\n    \"\"\"\n    Execute a command in a subprocess.\n\n    Args:\n        command (str): The command to run.\n        root_path (str): The directory in which to run the command.\n        q_stdout (Queue): A queue to capture stdout.\n        q_stderr (Queue): A queue to capture stderr.\n\n    Returns:\n        subprocess.Popen: The subprocess object.\n    \"\"\"\n    logger.info(f'Running `{command}` on {platform.system()}')\n    if platform.system() == 'Windows':  # Check the operating system\n        process = subprocess.Popen(\n            command,\n            shell=True,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            text=True,\n            cwd=root_path\n        )\n    else:\n        process = subprocess.Popen(\n            command,\n            shell=True,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            text=True,\n            preexec_fn=os.setsid,  # Use os.setsid only for Unix-like systems\n            cwd=root_path\n        )\n\n    t_stdout = threading.Thread(target=enqueue_output, args=(process.stdout, q_stdout))\n    t_stderr = threading.Thread(target=enqueue_output, args=(process.stderr, q_stderr))\n    t_stdout.daemon = True\n    t_stderr.daemon = True\n    t_stdout.start()\n    t_stderr.start()\n    return process","file":"/pilot/helpers/cli.py","language":"python","fileHash":"422ef82ede524a5790d370e04f026d86157a903e23d309302192e6a88f244b05","hash":"d40e9fba336d43be9375a0c5bafb471757143b763c3f2c6b41a2b70b9d89205c","processedContent":"def run_command(command, root_path, q_stdout, q_stderr) -> subprocess.Popen:\n\"\"\"\nscip-python python python-stdlib 3.11 subprocess/__init__:: undefined\nscip-python python python-stdlib 3.11 subprocess/Popen#: undefined\n\"\"\"\n    \"\"\"\n    Execute a command in a subprocess.\n\n    Args:\n        command (str): The command to run.\n        root_path (str): The directory in which to run the command.\n        q_stdout (Queue): A queue to capture stdout.\n        q_stderr (Queue): A queue to capture stderr.\n\n    Returns:\n        subprocess.Popen: The subprocess object.\n    \"\"\"\n    logger.info(f'Running `{command}` on {platform.system()}')\n    \"\"\"\n    scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n    scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n    scip-python python python-stdlib 3.11 platform/__init__:: undefined\n    scip-python python python-stdlib 3.11 platform/system().: undefined\n    \"\"\"\n    if platform.system() == 'Windows':  # Check the operating system\n    \"\"\"\n    scip-python python python-stdlib 3.11 platform/__init__:: undefined\n    scip-python python python-stdlib 3.11 platform/system().: undefined\n    \"\"\"\n        process = subprocess.Popen(\n        \"\"\"\n        scip-python python python-stdlib 3.11 subprocess/__init__:: undefined\n        scip-python python python-stdlib 3.11 subprocess/Popen#: undefined\n        \"\"\"\n        \"\"\"\n        scip-python python python-stdlib 3.11 subprocess/__init__:: undefined\n        scip-python python python-stdlib 3.11 subprocess/Popen#: undefined\n        \"\"\"\n            command,\n            shell=True,\n            stdout=subprocess.PIPE,\n            \"\"\"\n            scip-python python python-stdlib 3.11 subprocess/__init__:: undefined\n            scip-python python python-stdlib 3.11 subprocess/PIPE.PIPE.: undefined\n            \"\"\"\n            \"\"\"\n            scip-python python python-stdlib 3.11 subprocess/__init__:: undefined\n            scip-python python python-stdlib 3.11 subprocess/PIPE.PIPE.: undefined\n            \"\"\"\n            stderr=subprocess.PIPE,\n            \"\"\"\n            scip-python python python-stdlib 3.11 subprocess/__init__:: undefined\n            scip-python python python-stdlib 3.11 subprocess/PIPE.PIPE.: undefined\n            \"\"\"\n            \"\"\"\n            scip-python python python-stdlib 3.11 subprocess/__init__:: undefined\n            scip-python python python-stdlib 3.11 subprocess/PIPE.PIPE.: undefined\n            \"\"\"\n            text=True,\n            cwd=root_path\n        )\n    else:\n        process = subprocess.Popen(\n            command,\n            shell=True,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            text=True,\n            preexec_fn=os.setsid,  # Use os.setsid only for Unix-like systems\n            \"\"\"\n            scip-python python python-stdlib 3.11 os/__init__:: undefined\n            scip-python python python-stdlib 3.11 os/setsid().: undefined\n            \"\"\"\n            cwd=root_path\n        )\n\n    t_stdout = threading.Thread(target=enqueue_output, args=(process.stdout, q_stdout))\n    \"\"\"\n    scip-python python python-stdlib 3.11 threading/__init__:: undefined\n    scip-python python python-stdlib 3.11 threading/Thread#: undefined\n    scip-python python temp indexer `pilot.helpers.cli`/enqueue_output().: This code reads lines from a file and adds them to a queue, stopping if an interrupt flag is set.\n    scip-python python python-stdlib 3.11 subprocess/Popen#stdout.: undefined\n    \"\"\"\n    t_stderr = threading.Thread(target=enqueue_output, args=(process.stderr, q_stderr))\n    \"\"\"\n    scip-python python python-stdlib 3.11 threading/__init__:: undefined\n    scip-python python python-stdlib 3.11 threading/Thread#: undefined\n    scip-python python temp indexer `pilot.helpers.cli`/enqueue_output().: This code reads lines from a file and adds them to a queue, stopping if an interrupt flag is set.\n    scip-python python python-stdlib 3.11 subprocess/Popen#stderr.: undefined\n    \"\"\"\n    t_stdout.daemon = True #undefined\n    t_stderr.daemon = True #undefined\n    t_stdout.start() #undefined\n    t_stderr.start() #undefined\n    return process","documentation":"This code defines a function called `run_command` that takes in a command, root path, and two queues as arguments. It then executes the command in a subprocess and captures its output in the queues. The function also starts two threads to read the stdout and stderr of the subprocess and add them to the queues."}},{"key":"scip-python python temp indexer `pilot.helpers.cli`/terminate_named_process().","attributes":{"range":[77,0,79,71],"symbol":"scip-python python temp indexer `pilot.helpers.cli`/terminate_named_process().","content":"def terminate_named_process(command_id: str) -> None:\n    if command_id in running_processes:\n        terminate_process(running_processes[command_id][1], command_id)","file":"/pilot/helpers/cli.py","language":"python","fileHash":"422ef82ede524a5790d370e04f026d86157a903e23d309302192e6a88f244b05","hash":"1e8f82f77e57b13f842ffb6fdebe0fd73a5e34c22d3507babc3a6c03865ff31f","processedContent":"def terminate_named_process(command_id: str) -> None:\n    if command_id in running_processes: #undefined\n        terminate_process(running_processes[command_id][1], command_id)","documentation":"This code checks if a process with the specified command ID is running, and if so, it terminates that process."}},{"key":"scip-python python temp indexer `pilot.helpers.cli`/terminate_running_processes().","attributes":{"range":[82,0,84,71],"symbol":"scip-python python temp indexer `pilot.helpers.cli`/terminate_running_processes().","content":"def terminate_running_processes():\n    for command_id in list(running_processes.keys()):\n        terminate_process(running_processes[command_id][1], command_id)","file":"/pilot/helpers/cli.py","language":"python","fileHash":"422ef82ede524a5790d370e04f026d86157a903e23d309302192e6a88f244b05","hash":"97d4710b9b7413e234dbe178bddd1b9be7022aca8491d91cd5778234c6dd752d","processedContent":"def terminate_running_processes():\n    for command_id in list(running_processes.keys()): #undefined\n        terminate_process(running_processes[command_id][1], command_id)","documentation":"This code terminates running processes by iterating over a list of running processes and calling the `terminate_process` function for each process."}},{"key":"scip-python python temp indexer `pilot.helpers.cli`/term_proc_windows().","attributes":{"range":[87,0,91,61],"symbol":"scip-python python temp indexer `pilot.helpers.cli`/term_proc_windows().","content":"def term_proc_windows(pid: int):\n    try:\n        subprocess.run([\"taskkill\", \"/F\", \"/T\", \"/PID\", str(pid)])\n    except subprocess.CalledProcessError as e:\n        logger.error(f'Error while terminating process: {e}')","file":"/pilot/helpers/cli.py","language":"python","fileHash":"422ef82ede524a5790d370e04f026d86157a903e23d309302192e6a88f244b05","hash":"e8309ada3ca5e5c33a718b03ab702131b3d945d8d8f01ac643418fa95a667f9a","processedContent":"def term_proc_windows(pid: int):\n    try:\n        subprocess.run([\"taskkill\", \"/F\", \"/T\", \"/PID\", str(pid)])\n        \"\"\"\n        scip-python python python-stdlib 3.11 subprocess/__init__:: undefined\n        scip-python python python-stdlib 3.11 subprocess/run().: undefined\n        \"\"\"\n    except subprocess.CalledProcessError as e:\n    \"\"\"\n    scip-python python python-stdlib 3.11 subprocess/__init__:: undefined\n    scip-python python python-stdlib 3.11 subprocess/CalledProcessError#: undefined\n    \"\"\"\n        logger.error(f'Error while terminating process: {e}')","documentation":"This code is a function that takes a process ID as an argument and uses the `subprocess` module to terminate the process. It does this by running the `taskkill` command with the `/F` flag to forcefully terminate the process, and the `/T` flag to terminate all child processes. If there is an error while terminating the process, it logs the error using the `logger` object."}},{"key":"scip-python python temp indexer `pilot.helpers.cli`/term_proc_unix_like().","attributes":{"range":[94,0,98,61],"symbol":"scip-python python temp indexer `pilot.helpers.cli`/term_proc_unix_like().","content":"def term_proc_unix_like(pid: int):\n    try:\n        os.killpg(pid, signal.SIGKILL)\n    except OSError as e:\n        logger.error(f'Error while terminating process: {e}')","file":"/pilot/helpers/cli.py","language":"python","fileHash":"422ef82ede524a5790d370e04f026d86157a903e23d309302192e6a88f244b05","hash":"72ca9ede7303f641b633b0eebacd08ea701b7005cfe0e31f72d51c20b3514fc5","processedContent":"def term_proc_unix_like(pid: int):\n    try:\n        os.killpg(pid, signal.SIGKILL)\n        \"\"\"\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/killpg().: undefined\n        scip-python python python-stdlib 3.11 signal/__init__:: undefined\n        scip-python python python-stdlib 3.11 signal/SIGKILL.: undefined\n        \"\"\"\n    except OSError as e:\n        logger.error(f'Error while terminating process: {e}')","documentation":"This code is a function that terminates a process on a Unix-like operating system by sending a SIGKILL signal to the process group. It uses the `os` and `signal` modules to accomplish this task."}},{"key":"scip-python python temp indexer `pilot.helpers.cli`/is_process_running().","attributes":{"range":[101,0,108,20],"symbol":"scip-python python temp indexer `pilot.helpers.cli`/is_process_running().","content":"def is_process_running(pid: int) -> bool:\n    \"\"\"Check if there is a running process with the given PID.\"\"\"\n    try:\n        # psutil.NoSuchProcess will be raised if the process doesn't exist\n        process = psutil.Process(pid)\n        return process.is_running()\n    except psutil.NoSuchProcess:\n        return False","file":"/pilot/helpers/cli.py","language":"python","fileHash":"422ef82ede524a5790d370e04f026d86157a903e23d309302192e6a88f244b05","hash":"ecfc08801099f74c0297ed3f6816d24cd5be496448c9b0ecd515935982623064","processedContent":"def is_process_running(pid: int) -> bool:\n    \"\"\"Check if there is a running process with the given PID.\"\"\"\n    try:\n        # psutil.NoSuchProcess will be raised if the process doesn't exist\n        process = psutil.Process(pid)\n        \"\"\"\n        scip-python python psutil 5.9.5 psutil/__init__:: undefined\n        scip-python python psutil 5.9.5 psutil/Process#: undefined\n        \"\"\"\n        return process.is_running() #undefined\n    except psutil.NoSuchProcess:\n    \"\"\"\n    scip-python python psutil 5.9.5 psutil/__init__:: undefined\n    scip-python python temp indexer `psutil._common`/NoSuchProcess#: undefined\n    \"\"\"\n        return False","documentation":"This code checks if a process with the given PID is running by using the psutil library. If the process exists, it returns True if it's running, and False otherwise."}},{"key":"scip-python python temp indexer `pilot.helpers.cli`/terminate_process().","attributes":{"range":[111,0,143,45],"symbol":"scip-python python temp indexer `pilot.helpers.cli`/terminate_process().","content":"def terminate_process(pid: int, name=None) -> None:\n    # todo refactor terminate_process() using psutil for all OS. Check/terminate child processes and test on all OS\n    if name is None:\n        name = ''\n\n    if not is_process_running(pid):\n        logger.info('Process \"%s\" (pid: %s) is not running. Skipping termination.', name, pid)\n        # Also remove from running_processes if not running\n        for command_id, process_info in list(running_processes.items()):\n            if process_info[1] == pid:\n                del running_processes[command_id]\n        return\n\n    logger.info('Terminating process \"%s\" (pid: %s)', name, pid)\n    if platform.system() == \"Windows\":\n        term_proc_windows(pid)\n    else:  # Unix-like systems\n        term_proc_unix_like(pid)\n\n    try:\n        # Wait for the process to terminate\n        process = psutil.Process(pid)\n        process.wait(timeout=10)  # Adjust the timeout as necessary\n    except psutil.NoSuchProcess:\n        logger.info(\"Process already terminated.\")\n    except psutil.TimeoutExpired:\n        logger.warning(\"Timeout expired while waiting for process to terminate.\")\n    except Exception as e:\n        logger.error(f\"Error waiting for process termination: {e}\")\n\n    for command_id in list(running_processes.keys()):\n        if running_processes[command_id][1] == pid:\n            del running_processes[command_id]","file":"/pilot/helpers/cli.py","language":"python","fileHash":"422ef82ede524a5790d370e04f026d86157a903e23d309302192e6a88f244b05","hash":"b929d3b866bfb4d34e7431972d0d480ffdfb877775f533e3e0d9deccb8ddfc33","processedContent":"def terminate_process(pid: int, name=None) -> None:\n    # todo refactor terminate_process() using psutil for all OS. Check/terminate child processes and test on all OS\n    if name is None:\n        name = ''\n\n    if not is_process_running(pid): #This code checks if a process with the given PID is running by using the psutil library. If the process exists, it returns True if it's running, and False otherwise.\n        logger.info('Process \"%s\" (pid: %s) is not running. Skipping termination.', name, pid)\n        \"\"\"\n        scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n        scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n        \"\"\"\n        # Also remove from running_processes if not running\n        for command_id, process_info in list(running_processes.items()): #undefined\n            if process_info[1] == pid:\n                del running_processes[command_id] #undefined\n        return\n\n    logger.info('Terminating process \"%s\" (pid: %s)', name, pid)\n    \"\"\"\n    scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n    scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n    \"\"\"\n    if platform.system() == \"Windows\":\n    \"\"\"\n    scip-python python python-stdlib 3.11 platform/__init__:: undefined\n    scip-python python python-stdlib 3.11 platform/system().: undefined\n    \"\"\"\n        term_proc_windows(pid) #This code is a function that takes a process ID as an argument and uses the `subprocess` module to terminate the process. It does this by running the `taskkill` command with the `/F` flag to forcefully terminate the process, and the `/T` flag to terminate all child processes. If there is an error while terminating the process, it logs the error using the `logger` object.\n    else:  # Unix-like systems\n        term_proc_unix_like(pid) #This code is a function that terminates a process on a Unix-like operating system by sending a SIGKILL signal to the process group. It uses the `os` and `signal` modules to accomplish this task.\n\n    try:\n        # Wait for the process to terminate\n        process = psutil.Process(pid)\n        \"\"\"\n        scip-python python psutil 5.9.5 psutil/__init__:: undefined\n        scip-python python psutil 5.9.5 psutil/Process#: undefined\n        \"\"\"\n        process.wait(timeout=10)  # Adjust the timeout as necessary #undefined\n    except psutil.NoSuchProcess:\n    \"\"\"\n    scip-python python psutil 5.9.5 psutil/__init__:: undefined\n    scip-python python temp indexer `psutil._common`/NoSuchProcess#: undefined\n    \"\"\"\n        logger.info(\"Process already terminated.\")\n        \"\"\"\n        scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n        scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n        \"\"\"\n    except psutil.TimeoutExpired:\n    \"\"\"\n    scip-python python psutil 5.9.5 psutil/__init__:: undefined\n    scip-python python temp indexer `psutil._common`/TimeoutExpired#: undefined\n    \"\"\"\n        logger.warning(\"Timeout expired while waiting for process to terminate.\")\n        \"\"\"\n        scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n        scip-python python python-stdlib 3.11 logging/Logger#warning().: undefined\n        \"\"\"\n    except Exception as e:\n        logger.error(f\"Error waiting for process termination: {e}\")\n        \"\"\"\n        scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n        scip-python python python-stdlib 3.11 logging/Logger#error().: undefined\n        \"\"\"\n\n    for command_id in list(running_processes.keys()): #undefined\n        if running_processes[command_id][1] == pid: #undefined\n            del running_processes[command_id]","documentation":"This code is a function that terminates a process on a Unix-like operating system by sending a SIGKILL signal to the process group. It uses the `os` and `signal` modules to accomplish this task."}},{"key":"scip-python python temp indexer `pilot.helpers.cli`/read_queue_line().","attributes":{"range":[146,0,164,15],"symbol":"scip-python python temp indexer `pilot.helpers.cli`/read_queue_line().","content":"def read_queue_line(q, stdout=True):\n    try:\n        line = q.get_nowait()\n    except queue.Empty:\n        return ''\n\n    if stdout:\n        print(color_green('CLI OUTPUT:') + line, end='')\n        logger.info('CLI OUTPUT: ' + line)\n        # if success_message is not None and success_message in line:\n        #     logger.info('Success message found: %s', success_message)\n        #     # break # TODO background_command - this is if we want to leave command running in background but sometimes processes keep hanging and terminal gets bugged, also if we do that we have to change user messages to make it clear that there is command running in background\n        #     raise CommandFinishedEarly()\n\n    if not stdout:  # stderr\n        print(color_red('CLI ERROR:') + line, end='')\n        logger.error('CLI ERROR: ' + line)\n\n    return line","file":"/pilot/helpers/cli.py","language":"python","fileHash":"422ef82ede524a5790d370e04f026d86157a903e23d309302192e6a88f244b05","hash":"53f534f90e9f771c45780d133e8a369b03b186c6b95aae22d051bd81b3bb21bd","processedContent":"def read_queue_line(q, stdout=True):\n    try:\n        line = q.get_nowait()\n    except queue.Empty:\n    \"\"\"\n    scip-python python python-stdlib 3.11 queue/__init__:: undefined\n    scip-python python python-stdlib 3.11 queue/Empty#: undefined\n    \"\"\"\n        return ''\n\n    if stdout:\n        print(color_green('CLI OUTPUT:') + line, end='') #undefined\n        logger.info('CLI OUTPUT: ' + line)\n        \"\"\"\n        scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n        scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n        \"\"\"\n        # if success_message is not None and success_message in line:\n        #     logger.info('Success message found: %s', success_message)\n        #     # break # TODO background_command - this is if we want to leave command running in background but sometimes processes keep hanging and terminal gets bugged, also if we do that we have to change user messages to make it clear that there is command running in background\n        #     raise CommandFinishedEarly()\n\n    if not stdout:  # stderr\n        print(color_red('CLI ERROR:') + line, end='') #undefined\n        logger.error('CLI ERROR: ' + line)\n        \"\"\"\n        scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n        scip-python python python-stdlib 3.11 logging/Logger#error().: undefined\n        \"\"\"\n\n    return line","documentation":"The code defines a function called `read_queue_line` that reads a line from a queue and prints it to the console. It also logs the line to a logger."}},{"key":"scip-python python temp indexer `pilot.helpers.cli`/read_remaining_queue().","attributes":{"range":[167,0,172,17],"symbol":"scip-python python temp indexer `pilot.helpers.cli`/read_remaining_queue().","content":"def read_remaining_queue(q, stdout=True):\n    output = ''\n    while not q.empty():\n        output += read_queue_line(q, stdout)\n\n    return output","file":"/pilot/helpers/cli.py","language":"python","fileHash":"422ef82ede524a5790d370e04f026d86157a903e23d309302192e6a88f244b05","hash":"3a735532839a360a8b8eca7088b20a3f416958f6bda01293a791116165eb440c","processedContent":"def read_remaining_queue(q, stdout=True):\n    output = ''\n    while not q.empty():\n        output += read_queue_line(q, stdout) #The code defines a function called `read_queue_line` that reads a line from a queue and prints it to the console. It also logs the line to a logger.\n\n    return output","documentation":"This code defines a function called `read_remaining_queue` that reads all the remaining lines in a queue and returns them as a string. It also logs each line to a logger."}},{"key":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","attributes":{"range":[175,0,319,67],"symbol":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","content":"def execute_command(project, command, timeout=None, success_message=None, command_id: str = None, force=False) \\\n        -> (str, str, int):\n    \"\"\"\n    Execute a command and capture its output.\n\n    Args:\n        project: The project associated with the command.\n        command (str): The command to run.\n        timeout (int, optional): The maximum execution time in milliseconds. Default is None.\n        success_message: A message to look for in the output of the command to determine if successful or not.\n        command_id (str, optional): A unique identifier assigned by the LLM, can be used to terminate the process.\n        force (bool, optional): Whether to execute the command without confirmation. Default is False.\n    Returns:\n        cli_response (str): The command output\n                            or: `None` if user did not authorise the command to run\n        done_or_error_response (str): 'DONE' if 'no', 'skip' or `success_message` matched.\n                            Otherwise, if `cli_response` is None, user's response to \"Can I executed\".\n                            If `cli_response` not None: 'was interrupted by user', 'timed out' or `None` - caller should send `cli_response` to LLM\n        exit_code (int): The exit code of the process.\n    \"\"\"\n    if timeout is not None:\n        if timeout < 0:\n            timeout = None\n        else:\n            if timeout < 1000:\n                timeout *= 1000\n\n            timeout = min(max(timeout, MIN_COMMAND_RUN_TIME), MAX_COMMAND_RUN_TIME)\n\n    if not force:\n        print(color_yellow_bold('\\n--------- EXECUTE COMMAND ----------'))\n        question = f'Can I execute the command: `{color_yellow_bold(command)}`'\n        if timeout is not None:\n            question += f' with {timeout}ms timeout?'\n        else:\n            question += '?'\n\n        print('yes/no', type='button')\n        logger.info('--------- EXECUTE COMMAND ---------- : %s', question)\n        answer = ask_user(project, 'If yes, just press ENTER. Otherwise, type \"no\" but it will be processed as '\n                                   'successfully executed.', False, hint=question)\n        # TODO can we use .confirm(question, default='yes').ask()  https://questionary.readthedocs.io/en/stable/pages/types.html#confirmation\n        print('answer: ' + answer)\n        if answer.lower() in NEGATIVE_ANSWERS:\n            return None, 'SKIP', None\n        elif answer.lower() not in AFFIRMATIVE_ANSWERS:\n            # \"That's not going to work, let's do X instead\"\n            #       https://github.com/Pythagora-io/gpt-pilot/issues/198\n            #       https://github.com/Pythagora-io/gpt-pilot/issues/43#issuecomment-1756352056\n            # TODO: https://github.com/Pythagora-io/gpt-pilot/issues/122\n            return None, answer, None\n\n    # TODO when a shell built-in commands (like cd or source) is executed, the output is not captured properly - this will need to be changed at some point\n    if platform.system() != 'Windows' and (\"cd \" in command or \"source \" in command):\n        command = \"bash -c '\" + command + \"'\"\n\n    project.command_runs_count += 1\n    command_run = get_saved_command_run(project, command)\n    if command_run is not None and project.skip_steps:\n        project.checkpoints['last_command_run'] = command_run\n        print(color_yellow(f'Restoring command run response id {command_run.id}:\\n```\\n{command_run.cli_response}```'))\n        return command_run.cli_response, command_run.done_or_error_response, command_run.exit_code\n\n    return_value = None\n    done_or_error_response = None\n\n    q_stderr = queue.Queue()\n    q = queue.Queue()\n    process = run_command(command, project.root_path, q, q_stderr)\n\n    if command_id is not None:\n        terminate_named_process(command_id)\n        # TODO: We want to be able to send the initial stdout/err to the LLM, but it would also be handy to log ongoing output to a log file, named after `command_id`. Terminating an existing process with the same ID should reset the log file\n        running_processes[command_id] = (command, process.pid)\n\n    output = ''\n    stderr_output = ''\n    start_time = time.time()\n\n    # Note: If we don't need to log the output in real-time, we can remove q, q_stderr, the threads and this while loop.\n    # if timeout is not None:\n    #     timeout /= 1000\n    # output, stderr_output = process.communicate(timeout=timeout)\n\n    try:\n        while True:\n            elapsed_time = time.time() - start_time\n            time.sleep(0.1)  # TODO this shouldn't be used\n            # if timeout is not None:\n            #     # TODO: print to IPC using a different message type so VS Code can ignore it or update the previous value\n            #     print(color_white_bold(f'\\rt: {round(elapsed_time * 1000)}ms : '), end='', flush=True)\n\n            # If timeout is reached, kill the process\n            if timeout is not None and elapsed_time * 1000 > timeout:\n                if command_id is not None:\n                    logger.info(f'Process \"{command_id}\" running after timeout as pid: {process.pid}')\n                    break\n\n                raise TimeoutError(\"Command exceeded the specified timeout.\")\n\n            output += read_queue_line(q)\n            stderr_output += read_queue_line(q_stderr, False)\n\n            # Check if process has finished\n            if process.poll() is not None:\n                logger.info('process exited with return code: %d', process.returncode)\n                if command_id is not None:\n                    del running_processes[command_id]\n\n                output += read_remaining_queue(q)\n                stderr_output += read_remaining_queue(q_stderr, False)\n                break\n\n    except (KeyboardInterrupt, TimeoutError, CommandFinishedEarly) as e:\n        if isinstance(e, KeyboardInterrupt):\n            print('\\nCTRL+C detected. Stopping command execution...')\n            logger.info('CTRL+C detected. Stopping command execution...')\n            done_or_error_response = 'was interrupted by user'\n        elif isinstance(e, TimeoutError):\n            print('\\nTimeout detected. Stopping command execution...')\n            logger.warning('Timeout detected. Stopping command execution...')\n            done_or_error_response = f'took longer than {timeout}ms so I killed it'\n        elif isinstance(e, CommandFinishedEarly):\n            print('\\nCommand finished before timeout. Handling early completion...')\n            logger.info('Command finished before timeout. Handling early completion...')\n            done_or_error_response = 'DONE'\n\n    finally:\n        done_or_error_response = 'DONE'  # Todo remove if we want to have different responses\n        terminate_process(process.pid)  # TODO: background_command - remove this is if we want to leave command running in background, look todo above\n        # update the return code\n        process.poll()\n\n    elapsed_time = time.time() - start_time\n    logger.info(f'`{command}` took {round(elapsed_time * 1000)}ms to execute.')\n\n    if return_value is None:\n        return_value = ''\n        if stderr_output != '':\n            return_value = 'stderr:\\n```\\n' + stderr_output[0:MAX_COMMAND_OUTPUT_LENGTH] + '\\n```\\n'\n        return_value += 'stdout:\\n```\\n' + output[-MAX_COMMAND_OUTPUT_LENGTH:] + '\\n```'\n\n    save_command_run(project, command, return_value, done_or_error_response, process.returncode)\n\n    return return_value, done_or_error_response, process.returncode","file":"/pilot/helpers/cli.py","language":"python","fileHash":"422ef82ede524a5790d370e04f026d86157a903e23d309302192e6a88f244b05","hash":"8ce7d63634563918d40d3d8a4ae0f6d9b01a108539d8061d3704e48b1a6a200c","processedContent":"def execute_command(project, command, timeout=None, success_message=None, command_id: str = None, force=False) \\\n        -> (str, str, int):\n    \"\"\"\n    Execute a command and capture its output.\n\n    Args:\n        project: The project associated with the command.\n        command (str): The command to run.\n        timeout (int, optional): The maximum execution time in milliseconds. Default is None.\n        success_message: A message to look for in the output of the command to determine if successful or not.\n        command_id (str, optional): A unique identifier assigned by the LLM, can be used to terminate the process.\n        force (bool, optional): Whether to execute the command without confirmation. Default is False.\n    Returns:\n        cli_response (str): The command output\n                            or: `None` if user did not authorise the command to run\n        done_or_error_response (str): 'DONE' if 'no', 'skip' or `success_message` matched.\n                            Otherwise, if `cli_response` is None, user's response to \"Can I executed\".\n                            If `cli_response` not None: 'was interrupted by user', 'timed out' or `None` - caller should send `cli_response` to LLM\n        exit_code (int): The exit code of the process.\n    \"\"\"\n    if timeout is not None:\n        if timeout < 0:\n            timeout = None\n        else:\n            if timeout < 1000:\n                timeout *= 1000\n\n            timeout = min(max(timeout, MIN_COMMAND_RUN_TIME), MAX_COMMAND_RUN_TIME)\n            \"\"\"\n            scip-python python temp indexer `pilot.const.code_execution`/MIN_COMMAND_RUN_TIME.: undefined\n            scip-python python temp indexer `pilot.const.code_execution`/MAX_COMMAND_RUN_TIME.: undefined\n            \"\"\"\n\n    if not force:\n        print(color_yellow_bold('\\n--------- EXECUTE COMMAND ----------')) #undefined\n        question = f'Can I execute the command: `{color_yellow_bold(command)}`' #undefined\n        if timeout is not None:\n            question += f' with {timeout}ms timeout?'\n        else:\n            question += '?'\n\n        print('yes/no', type='button')\n        logger.info('--------- EXECUTE COMMAND ---------- : %s', question)\n        \"\"\"\n        scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n        scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n        \"\"\"\n        answer = ask_user(project, 'If yes, just press ENTER. Otherwise, type \"no\" but it will be processed as ' #This code defines a function called `ask_user` that retrieves user input from a database, styles the question, and saves the response to the database. It also logs the question and answer to a logger.\n                                   'successfully executed.', False, hint=question)\n        # TODO can we use .confirm(question, default='yes').ask()  https://questionary.readthedocs.io/en/stable/pages/types.html#confirmation\n        print('answer: ' + answer)\n        if answer.lower() in NEGATIVE_ANSWERS: #undefined\n            return None, 'SKIP', None\n        elif answer.lower() not in AFFIRMATIVE_ANSWERS: #undefined\n            # \"That's not going to work, let's do X instead\"\n            #       https://github.com/Pythagora-io/gpt-pilot/issues/198\n            #       https://github.com/Pythagora-io/gpt-pilot/issues/43#issuecomment-1756352056\n            # TODO: https://github.com/Pythagora-io/gpt-pilot/issues/122\n            return None, answer, None\n\n    # TODO when a shell built-in commands (like cd or source) is executed, the output is not captured properly - this will need to be changed at some point\n    if platform.system() != 'Windows' and (\"cd \" in command or \"source \" in command):\n    \"\"\"\n    scip-python python python-stdlib 3.11 platform/__init__:: undefined\n    scip-python python python-stdlib 3.11 platform/system().: undefined\n    \"\"\"\n        command = \"bash -c '\" + command + \"'\"\n\n    project.command_runs_count += 1\n    command_run = get_saved_command_run(project, command) #This code retrieves a database row from a model based on three parameters: app_id, previous_step, and high_level_step.\n    if command_run is not None and project.skip_steps:\n        project.checkpoints['last_command_run'] = command_run\n        print(color_yellow(f'Restoring command run response id {command_run.id}:\\n```\\n{command_run.cli_response}```')) #undefined\n        return command_run.cli_response, command_run.done_or_error_response, command_run.exit_code\n\n    return_value = None\n    done_or_error_response = None\n\n    q_stderr = queue.Queue()\n    \"\"\"\n    scip-python python python-stdlib 3.11 queue/__init__:: undefined\n    scip-python python python-stdlib 3.11 queue/Queue#: undefined\n    \"\"\"\n    q = queue.Queue()\n    \"\"\"\n    scip-python python python-stdlib 3.11 queue/__init__:: undefined\n    scip-python python python-stdlib 3.11 queue/Queue#: undefined\n    \"\"\"\n    process = run_command(command, project.root_path, q, q_stderr) #This code defines a function called `run_command` that takes in a command, root path, and two queues as arguments. It then executes the command in a subprocess and captures its output in the queues. The function also starts two threads to read the stdout and stderr of the subprocess and add them to the queues.\n\n    if command_id is not None:\n        terminate_named_process(command_id) #This code checks if a process with the specified command ID is running, and if so, it terminates that process.\n        # TODO: We want to be able to send the initial stdout/err to the LLM, but it would also be handy to log ongoing output to a log file, named after `command_id`. Terminating an existing process with the same ID should reset the log file\n        running_processes[command_id] = (command, process.pid)\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.cli`/running_processes.running_processes.: undefined\n        scip-python python python-stdlib 3.11 subprocess/Popen#pid.: undefined\n        \"\"\"\n\n    output = ''\n    stderr_output = ''\n    start_time = time.time()\n    \"\"\"\n    scip-python python python-stdlib 3.11 time/__init__:: undefined\n    scip-python python python-stdlib 3.11 time/time().: undefined\n    \"\"\"\n\n    # Note: If we don't need to log the output in real-time, we can remove q, q_stderr, the threads and this while loop.\n    # if timeout is not None:\n    #     timeout /= 1000\n    # output, stderr_output = process.communicate(timeout=timeout)\n\n    try:\n        while True:\n            elapsed_time = time.time() - start_time\n            \"\"\"\n            scip-python python python-stdlib 3.11 time/__init__:: undefined\n            scip-python python python-stdlib 3.11 time/time().: undefined\n            \"\"\"\n    \"\"\"\n    scip-python python python-stdlib 3.11 time/__init__:: undefined\n    scip-python python python-stdlib 3.11 time/time().: undefined\n    \"\"\"\n            time.sleep(0.1)  # TODO this shouldn't be used\n            \"\"\"\n            scip-python python python-stdlib 3.11 time/__init__:: undefined\n            scip-python python python-stdlib 3.11 time/sleep().: undefined\n            \"\"\"\n            # if timeout is not None:\n            #     # TODO: print to IPC using a different message type so VS Code can ignore it or update the previous value\n            #     print(color_white_bold(f'\\rt: {round(elapsed_time * 1000)}ms : '), end='', flush=True)\n\n            # If timeout is reached, kill the process\n            if timeout is not None and elapsed_time * 1000 > timeout:\n                if command_id is not None:\n                    logger.info(f'Process \"{command_id}\" running after timeout as pid: {process.pid}')\n                    \"\"\"\n                    scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n                    scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n                    scip-python python python-stdlib 3.11 subprocess/Popen#pid.: undefined\n                    \"\"\"\n                    break\n\n                raise TimeoutError(\"Command exceeded the specified timeout.\")\n\n            output += read_queue_line(q) #The code defines a function called `read_queue_line` that reads a line from a queue and prints it to the console. It also logs the line to a logger.\n            stderr_output += read_queue_line(q_stderr, False) #The code defines a function called `read_queue_line` that reads a line from a queue and prints it to the console. It also logs the line to a logger.\n\n            # Check if process has finished\n            if process.poll() is not None: #undefined\n                logger.info('process exited with return code: %d', process.returncode)\n                \"\"\"\n                scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n                scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n                scip-python python python-stdlib 3.11 subprocess/Popen#returncode.: undefined\n                \"\"\"\n                if command_id is not None:\n                    del running_processes[command_id] #undefined\n\n                output += read_remaining_queue(q) #This code defines a function called `read_remaining_queue` that reads all the remaining lines in a queue and returns them as a string. It also logs each line to a logger.\n                stderr_output += read_remaining_queue(q_stderr, False) #This code defines a function called `read_remaining_queue` that reads all the remaining lines in a queue and returns them as a string. It also logs each line to a logger.\n                break\n\n    except (KeyboardInterrupt, TimeoutError, CommandFinishedEarly) as e: #This code defines a custom exception class called `CommandFinishedEarly` that is raised when a command finishes before a specified timeout. The message passed to the constructor is used as the exception's error message.\n        if isinstance(e, KeyboardInterrupt):\n            print('\\nCTRL+C detected. Stopping command execution...')\n            logger.info('CTRL+C detected. Stopping command execution...')\n            \"\"\"\n            scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n            scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n            \"\"\"\n            done_or_error_response = 'was interrupted by user'\n        elif isinstance(e, TimeoutError):\n            print('\\nTimeout detected. Stopping command execution...')\n            logger.warning('Timeout detected. Stopping command execution...')\n            \"\"\"\n            scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n            scip-python python python-stdlib 3.11 logging/Logger#warning().: undefined\n            \"\"\"\n            done_or_error_response = f'took longer than {timeout}ms so I killed it'\n        elif isinstance(e, CommandFinishedEarly): #This code defines a custom exception class called `CommandFinishedEarly` that is raised when a command finishes before a specified timeout. The message passed to the constructor is used as the exception's error message.\n            print('\\nCommand finished before timeout. Handling early completion...')\n            logger.info('Command finished before timeout. Handling early completion...')\n            \"\"\"\n            scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n            scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n            \"\"\"\n            done_or_error_response = 'DONE'\n\n    finally:\n        done_or_error_response = 'DONE'  # Todo remove if we want to have different responses\n        terminate_process(process.pid)  # TODO: background_command - remove this is if we want to leave command running in background, look todo above\n        \"\"\"\n        scip-python python python-stdlib 3.11 subprocess/Popen#pid.: undefined\n        scip-python python temp indexer `pilot.helpers.cli`/terminate_process().: This code is a function that terminates a process on a Unix-like operating system by sending a SIGKILL signal to the process group. It uses the `os` and `signal` modules to accomplish this task.\n        \"\"\"\n        # update the return code\n        process.poll() #undefined\n\n    elapsed_time = time.time() - start_time\n    logger.info(f'`{command}` took {round(elapsed_time * 1000)}ms to execute.')\n    \"\"\"\n    scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n    scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n    \"\"\"\n\n    if return_value is None:\n        return_value = ''\n        if stderr_output != '':\n            return_value = 'stderr:\\n```\\n' + stderr_output[0:MAX_COMMAND_OUTPUT_LENGTH] + '\\n```\\n' #undefined\n        return_value += 'stdout:\\n```\\n' + output[-MAX_COMMAND_OUTPUT_LENGTH:] + '\\n```' #undefined\n\n    save_command_run(project, command, return_value, done_or_error_response, process.returncode)\n    \"\"\"\n    scip-python python python-stdlib 3.11 subprocess/Popen#returncode.: undefined\n    scip-python python temp indexer `pilot.database.database`/save_command_run().: This code defines a function called `save_command_run` that saves data to a database. It first checks if a record with the same data already exists, and if so, logs a warning message. If no record exists, it creates a new one and returns it.\n    \"\"\"\n\n    return return_value, done_or_error_response, process.returncode","documentation":"This code defines a function called `execute_command` that takes in a command, project, and other parameters. It then executes the command in a subprocess and captures its output in two queues. The function also checks if a process with the same ID is running, and if so, it terminates that process."}},{"key":"scip-python python temp indexer `pilot.helpers.cli`/check_if_command_successful().","attributes":{"range":[322,0,340,19],"symbol":"scip-python python temp indexer `pilot.helpers.cli`/check_if_command_successful().","content":"def check_if_command_successful(convo, command, cli_response, response, exit_code, additional_message=None):\n    if cli_response is not None:\n        logger.info(f'`{command}` ended with exit code: {exit_code}')\n        if exit_code is None:\n            # todo this should never happen! process is still running, see why and now we want to handle it\n            print(color_red(f'Process for command {command} still running.'))\n            response = 'DONE'\n        else:\n            response = convo.send_message('dev_ops/ran_command.prompt',\n                                          {\n                                              'cli_response': cli_response,\n                                              'error_response': response,\n                                              'command': command,\n                                              'additional_message': additional_message,\n                                              'exit_code': exit_code,\n                                          })\n            logger.debug(f'LLM response to ran_command.prompt: {response}')\n\n    return response","file":"/pilot/helpers/cli.py","language":"python","fileHash":"422ef82ede524a5790d370e04f026d86157a903e23d309302192e6a88f244b05","hash":"c29e98ead332d94b86d0b7623bf43c1183a864efd487d1bbfd4dd6774b86bcab","processedContent":"def check_if_command_successful(convo, command, cli_response, response, exit_code, additional_message=None):\n    if cli_response is not None:\n        logger.info(f'`{command}` ended with exit code: {exit_code}')\n        \"\"\"\n        scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n        scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n        \"\"\"\n        if exit_code is None:\n            # todo this should never happen! process is still running, see why and now we want to handle it\n            print(color_red(f'Process for command {command} still running.')) #undefined\n            response = 'DONE'\n        else:\n            response = convo.send_message('dev_ops/ran_command.prompt',\n                                          {\n                                              'cli_response': cli_response,\n                                              'error_response': response,\n                                              'command': command,\n                                              'additional_message': additional_message,\n                                              'exit_code': exit_code,\n                                          })\n            logger.debug(f'LLM response to ran_command.prompt: {response}')\n            \"\"\"\n            scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n            scip-python python python-stdlib 3.11 logging/Logger#debug().: undefined\n            \"\"\"\n\n    return response","documentation":"This code checks if a command was successful by checking the exit code of the process that ran the command. If the exit code is not None, it means the command was not successful and the function sends an error message to the user."}},{"key":"scip-python python temp indexer `pilot.helpers.cli`/res_for_build_directory_tree().","attributes":{"range":[389,0,390,119],"symbol":"scip-python python temp indexer `pilot.helpers.cli`/res_for_build_directory_tree().","content":"def res_for_build_directory_tree(path, files=None):\n    return ' - ' + files[os.path.basename(path)].description + ' ' if files and os.path.basename(path) in files else ''","file":"/pilot/helpers/cli.py","language":"python","fileHash":"422ef82ede524a5790d370e04f026d86157a903e23d309302192e6a88f244b05","hash":"25f338f329d31ad4c969d156fe7f01f3cf198efcafa8c4d086c3057d9ee4c107","processedContent":"def res_for_build_directory_tree(path, files=None):\n    return ' - ' + files[os.path.basename(path)].description + ' ' if files and os.path.basename(path) in files else ''","documentation":"This code defines a function that takes a path and an optional dictionary of files as input. It returns a string representation of the file description for the given path, if it exists in the dictionary."}},{"key":"scip-python python temp indexer `pilot.helpers.cli`/build_directory_tree_with_descriptions().","attributes":{"range":[393,0,416,17],"symbol":"scip-python python temp indexer `pilot.helpers.cli`/build_directory_tree_with_descriptions().","content":"def build_directory_tree_with_descriptions(path, prefix=\"\", ignore=None, is_last=False, files=None):\n    \"\"\"Build the directory tree structure in tree-like format.\n   Args:\n   - path: The starting directory path.\n   - prefix: Prefix for the current item, used for recursion.\n   - ignore: List of directory names to ignore.\n   - is_last: Flag to indicate if the current item is the last in its parent directory.\n   Returns:\n   - A string representation of the directory tree.\n   \"\"\"\n    ignore |= []\n    if os.path.basename(path) in ignore:\n        return \"\"\n    output = \"\"\n    indent = '|   ' if not is_last else '    '\n    # It's a directory, add its name to the output and then recurse into it\n    output += prefix + \"|-- \" + os.path.basename(path) + res_for_build_directory_tree(path, files) + \"/\\n\"\n    if os.path.isdir(path):\n        # List items in the directory\n        items = os.listdir(path)\n        for index, item in enumerate(items):\n            item_path = os.path.join(path, item)\n            output += build_directory_tree(item_path, prefix + indent, ignore, index == len(items) - 1, files)\n    return output","file":"/pilot/helpers/cli.py","language":"python","fileHash":"422ef82ede524a5790d370e04f026d86157a903e23d309302192e6a88f244b05","hash":"779d2c51225dedfa32fa6ad081b1f1df0e3f23110752d7028401231a112cca09","processedContent":"def build_directory_tree_with_descriptions(path, prefix=\"\", ignore=None, is_last=False, files=None):\n    \"\"\"Build the directory tree structure in tree-like format.\n   Args:\n   - path: The starting directory path.\n   - prefix: Prefix for the current item, used for recursion.\n   - ignore: List of directory names to ignore.\n   - is_last: Flag to indicate if the current item is the last in its parent directory.\n   Returns:\n   - A string representation of the directory tree.\n   \"\"\"\n    ignore |= []\n    if os.path.basename(path) in ignore:\n    \"\"\"\n    scip-python python python-stdlib 3.11 os/__init__:: undefined\n    scip-python python python-stdlib 3.11 os/path.: undefined\n    scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n    \"\"\"\n        return \"\"\n    output = \"\"\n    indent = '|   ' if not is_last else '    '\n    # It's a directory, add its name to the output and then recurse into it\n    output += prefix + \"|-- \" + os.path.basename(path) + res_for_build_directory_tree(path, files) + \"/\\n\"\n    \"\"\"\n    scip-python python python-stdlib 3.11 os/__init__:: undefined\n    scip-python python python-stdlib 3.11 os/path.: undefined\n    scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n    scip-python python temp indexer `pilot.helpers.cli`/res_for_build_directory_tree().: This code defines a function that takes a path and an optional dictionary of files as input. It returns a string representation of the file description for the given path, if it exists in the dictionary.\n    \"\"\"\n    if os.path.isdir(path):\n    \"\"\"\n    scip-python python python-stdlib 3.11 os/__init__:: undefined\n    scip-python python python-stdlib 3.11 os/path.: undefined\n    scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n    \"\"\"\n        # List items in the directory\n        items = os.listdir(path)\n        \"\"\"\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/listdir().: undefined\n        \"\"\"\n        for index, item in enumerate(items):\n            item_path = os.path.join(path, item)\n            \"\"\"\n            scip-python python python-stdlib 3.11 os/__init__:: undefined\n            scip-python python python-stdlib 3.11 os/path.: undefined\n            scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n            \"\"\"\n            output += build_directory_tree(item_path, prefix + indent, ignore, index == len(items) - 1, files) #This code defines a function called `build_directory_tree` that takes in a directory path and returns a string representation of the directory tree structure. The function uses the `os` module to list the items in the directory, sort them, and then recursively call itself for each subdirectory, building the tree structure.\n    return output","documentation":"This code defines a function called `build_directory_tree` that takes in a directory path and returns a string representation of the directory tree structure. The function uses the `os` module to list the items in the directory, sort them, and then recursively call itself for each subdirectory, building the tree structure."}},{"key":"scip-python python temp indexer `pilot.helpers.cli`/execute_command_and_check_cli_response().","attributes":{"range":[419,0,444,33],"symbol":"scip-python python temp indexer `pilot.helpers.cli`/execute_command_and_check_cli_response().","content":"def execute_command_and_check_cli_response(convo, command: dict):\n    \"\"\"\n    Execute a command and check its CLI response.\n\n    Args:\n        convo (AgentConvo): The conversation object.\n        command (dict):\n          ['command'] (str): The command to run.\n          ['timeout'] (int): The maximum execution time in milliseconds.\n\n\n    Returns:\n        tuple: A tuple containing the CLI response and the agent's response.\n            - cli_response (str): The command output.\n            - response (str): 'DONE' or 'NEEDS_DEBUGGING'.\n                If `cli_response` is None, user's response to \"Can I execute...\".\n    \"\"\"\n    # TODO: Prompt mentions `command` could be `INSTALLED` or `NOT_INSTALLED`, where is this handled?\n    command_id = command['command_id'] if 'command_id' in command else None\n    cli_response, response, exit_code = execute_command(convo.agent.project,\n                                                        command['command'],\n                                                        timeout=command['timeout'],\n                                                        command_id=command_id)\n\n    response = check_if_command_successful(convo, command['command'], cli_response, response, exit_code)\n    return cli_response, response","file":"/pilot/helpers/cli.py","language":"python","fileHash":"422ef82ede524a5790d370e04f026d86157a903e23d309302192e6a88f244b05","hash":"95d0794a42818f1a6f2c96f055cee9199e703b736c7d271fdf1dc12146d3a14d","processedContent":"def execute_command_and_check_cli_response(convo, command: dict):\n    \"\"\"\n    Execute a command and check its CLI response.\n\n    Args:\n        convo (AgentConvo): The conversation object.\n        command (dict):\n          ['command'] (str): The command to run.\n          ['timeout'] (int): The maximum execution time in milliseconds.\n\n\n    Returns:\n        tuple: A tuple containing the CLI response and the agent's response.\n            - cli_response (str): The command output.\n            - response (str): 'DONE' or 'NEEDS_DEBUGGING'.\n                If `cli_response` is None, user's response to \"Can I execute...\".\n    \"\"\"\n    # TODO: Prompt mentions `command` could be `INSTALLED` or `NOT_INSTALLED`, where is this handled?\n    command_id = command['command_id'] if 'command_id' in command else None\n    cli_response, response, exit_code = execute_command(convo.agent.project, #This code defines a function called `execute_command` that takes in a command, project, and other parameters. It then executes the command in a subprocess and captures its output in two queues. The function also checks if a process with the same ID is running, and if so, it terminates that process.\n                                                        command['command'],\n                                                        timeout=command['timeout'],\n                                                        command_id=command_id)\n\n    response = check_if_command_successful(convo, command['command'], cli_response, response, exit_code) #This code checks if a command was successful by checking the exit code of the process that ran the command. If the exit code is not None, it means the command was not successful and the function sends an error message to the user.\n    return cli_response, response","documentation":"This code defines a function called `execute_command_and_check_cli_response` that takes in a command, project, and other parameters. It executes the command in a subprocess and captures its output in two queues. The function also checks if a process with the same ID is running, and if so, it terminates that process."}},{"key":"scip-python python temp indexer `pilot.helpers.cli`/run_command_until_success().","attributes":{"range":[447,0,524,62],"symbol":"scip-python python temp indexer `pilot.helpers.cli`/run_command_until_success().","content":"def run_command_until_success(convo, command,\n                              timeout: Union[int, None],\n                              command_id: Union[str, None] = None,\n                              success_message=None,\n                              additional_message=None,\n                              force=False,\n                              return_cli_response=False,\n                              success_with_cli_response=False,\n                              is_root_task=False):\n    \"\"\"\n    Run a command until it succeeds or reaches a timeout.\n\n    Args:\n        convo (AgentConvo): The conversation object.\n        command (str): The command to run.\n        timeout (int): The maximum execution time in milliseconds.\n        command_id: A name for the process.\n                      If `timeout` is not provided, can be used to terminate the process.\n        success_message: A message to look for in the output of the command to determine if successful or not.\n        additional_message (str, optional): Additional message to include in the \"I ran the command...\" prompt.\n        force (bool, optional): Whether to execute the command without confirmation. Default is False.\n        return_cli_response (bool, optional): If True, may raise TooDeepRecursionError(cli_response)\n        success_with_cli_response (bool, optional): If True, simply send the cli_response back to the caller without checking with LLM.\n                                                    The LLM has asked to see the output and may update the task step list.\n        is_root_task (bool, optional): If True and TokenLimitError is raised, will call `convo.load_branch(reset_branch_id)`\n\n    Returns:\n        - 'success': bool,\n        - 'cli_response': ```stdout: <stdout> stderr: <stderr>```\n        - 'user_input': `None` or user's objection to running the command\n    \"\"\"\n    cli_response, response, exit_code = execute_command(convo.agent.project,\n                                                        command,\n                                                        timeout=timeout,\n                                                        success_message=success_message,\n                                                        command_id=command_id,\n                                                        force=force)\n\n    if success_with_cli_response and cli_response is not None:\n        return {'success': True, 'cli_response': cli_response}\n\n    if response == 'SKIP':\n        return {'success': True, 'user_input': response}\n\n    if cli_response is None and response != 'DONE':\n        return {'success': False, 'user_input': response}\n\n    response = check_if_command_successful(convo, command, cli_response, response, exit_code, additional_message)\n\n    if response != 'DONE':\n        # 'NEEDS_DEBUGGING'\n        print(color_red('Got incorrect CLI response:'))\n        print(cli_response)\n        print(color_red('-------------------'))\n\n        reset_branch_id = convo.save_branch()\n        while True:\n            try:\n                # This catch is necessary to return the correct value (cli_response) to continue development function so\n                # the developer can debug the appropriate issue\n                # this snippet represents the first entry point into debugging recursion because of return_cli_response\n                success = convo.agent.debugger.debug(convo, {\n                    'command': command,\n                    'timeout': timeout,\n                    'command_id': command_id,\n                    'success_message': success_message,\n                },user_input=cli_response, is_root_task=is_root_task, ask_before_debug=True)\n                return {'success': success, 'cli_response': cli_response}\n            except TooDeepRecursionError as e:\n                # this is only to put appropriate message in the response after TooDeepRecursionError is raised\n                raise TooDeepRecursionError(cli_response) if return_cli_response else e\n            except TokenLimitError as e:\n                if is_root_task:\n                    convo.load_branch(reset_branch_id)\n                else:\n                    raise e\n    else:\n        return {'success': True, 'cli_response': cli_response}","file":"/pilot/helpers/cli.py","language":"python","fileHash":"422ef82ede524a5790d370e04f026d86157a903e23d309302192e6a88f244b05","hash":"436a79875b04224a8eef9878cdfa015be7dca389df54f3530080714c98364e15","processedContent":"def run_command_until_success(convo, command,\n                              timeout: Union[int, None], #undefined\n                              command_id: Union[str, None] = None, #undefined\n                              success_message=None,\n                              additional_message=None,\n                              force=False,\n                              return_cli_response=False,\n                              success_with_cli_response=False,\n                              is_root_task=False):\n    \"\"\"\n    Run a command until it succeeds or reaches a timeout.\n\n    Args:\n        convo (AgentConvo): The conversation object.\n        command (str): The command to run.\n        timeout (int): The maximum execution time in milliseconds.\n        command_id: A name for the process.\n                      If `timeout` is not provided, can be used to terminate the process.\n        success_message: A message to look for in the output of the command to determine if successful or not.\n        additional_message (str, optional): Additional message to include in the \"I ran the command...\" prompt.\n        force (bool, optional): Whether to execute the command without confirmation. Default is False.\n        return_cli_response (bool, optional): If True, may raise TooDeepRecursionError(cli_response)\n        success_with_cli_response (bool, optional): If True, simply send the cli_response back to the caller without checking with LLM.\n                                                    The LLM has asked to see the output and may update the task step list.\n        is_root_task (bool, optional): If True and TokenLimitError is raised, will call `convo.load_branch(reset_branch_id)`\n\n    Returns:\n        - 'success': bool,\n        - 'cli_response': ```stdout: <stdout> stderr: <stderr>```\n        - 'user_input': `None` or user's objection to running the command\n    \"\"\"\n    cli_response, response, exit_code = execute_command(convo.agent.project, #This code defines a function called `execute_command` that takes in a command, project, and other parameters. It then executes the command in a subprocess and captures its output in two queues. The function also checks if a process with the same ID is running, and if so, it terminates that process.\n                                                        command,\n                                                        timeout=timeout,\n                                                        success_message=success_message,\n                                                        command_id=command_id,\n                                                        force=force)\n\n    if success_with_cli_response and cli_response is not None:\n        return {'success': True, 'cli_response': cli_response}\n\n    if response == 'SKIP':\n        return {'success': True, 'user_input': response}\n\n    if cli_response is None and response != 'DONE':\n        return {'success': False, 'user_input': response}\n\n    response = check_if_command_successful(convo, command, cli_response, response, exit_code, additional_message) #This code checks if a command was successful by checking the exit code of the process that ran the command. If the exit code is not None, it means the command was not successful and the function sends an error message to the user.\n\n    if response != 'DONE':\n        # 'NEEDS_DEBUGGING'\n        print(color_red('Got incorrect CLI response:')) #undefined\n        print(cli_response)\n        print(color_red('-------------------')) #undefined\n\n        reset_branch_id = convo.save_branch()\n        while True:\n            try:\n                # This catch is necessary to return the correct value (cli_response) to continue development function so\n                # the developer can debug the appropriate issue\n                # this snippet represents the first entry point into debugging recursion because of return_cli_response\n                success = convo.agent.debugger.debug(convo, {\n                    'command': command,\n                    'timeout': timeout,\n                    'command_id': command_id,\n                    'success_message': success_message,\n                },user_input=cli_response, is_root_task=is_root_task, ask_before_debug=True)\n                return {'success': success, 'cli_response': cli_response}\n            except TooDeepRecursionError as e: #This code defines a custom exception class called \"TooDeepRecursionError\" that is raised when the recursion depth exceeds a certain limit.\n                # this is only to put appropriate message in the response after TooDeepRecursionError is raised\n                raise TooDeepRecursionError(cli_response) if return_cli_response else e #This code defines a custom exception class called \"TooDeepRecursionError\" that is raised when the recursion depth exceeds a certain limit.\n            except TokenLimitError as e: #This code defines a custom exception class called `TokenLimitError` that is raised when the number of tokens in a message exceeds the maximum allowed by the GPT model. The class takes two arguments: `tokens_in_messages` and `max_tokens`, which represent the number of tokens in the message and the maximum number of tokens allowed, respectively. The `__init__` method sets the instance variables and calls the parent class's constructor with a formatted error message.\n                if is_root_task:\n                    convo.load_branch(reset_branch_id)\n                else:\n                    raise e\n    else:\n        return {'success': True, 'cli_response': cli_response}","documentation":"This code defines a function called `run_command_until_success` that runs a command until it succeeds or reaches a timeout. It also checks if the command was successful by checking the exit code of the process that ran the command."}},{"key":"scip-python python psutil 5.9.5 psutil/__init__:","attributes":{"symbol":"scip-python python psutil 5.9.5 psutil/__init__:","language":"python"}},{"key":"scip-python python python-stdlib 3.11 signal/__init__:","attributes":{"symbol":"scip-python python python-stdlib 3.11 signal/__init__:","language":"python"}},{"key":"scip-python python python-stdlib 3.11 threading/__init__:","attributes":{"symbol":"scip-python python python-stdlib 3.11 threading/__init__:","language":"python"}},{"key":"scip-python python python-stdlib 3.11 queue/__init__:","attributes":{"symbol":"scip-python python python-stdlib 3.11 queue/__init__:","language":"python"}},{"key":"scip-python python python-stdlib 3.11 time/__init__:","attributes":{"symbol":"scip-python python python-stdlib 3.11 time/__init__:","language":"python"}},{"key":"scip-python python python-stdlib 3.11 typing/Dict.","attributes":{"symbol":"scip-python python python-stdlib 3.11 typing/Dict.","language":"python"}},{"key":"scip-python python python-stdlib 3.11 typing/Union.","attributes":{"symbol":"scip-python python python-stdlib 3.11 typing/Union.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.exceptions.commandfinishedearly`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.exceptions.commandfinishedearly`/__init__:","language":"python","range":[0,0,3,33],"content":"class CommandFinishedEarly(Exception):\n    def __init__(self, message='Command finished before timeout. Handling early completion...'):\n        self.message = message\n        super().__init__(message)","file":"/pilot/helpers/exceptions/CommandFinishedEarly.py","fileHash":"653291a03d34888c6dda1eca2ea6906ede53d491c801f5f002d29a77dd354cd2","hash":"653291a03d34888c6dda1eca2ea6906ede53d491c801f5f002d29a77dd354cd2","processedContent":"class CommandFinishedEarly(Exception):\n    def __init__(self, message='Command finished before timeout. Handling early completion...'):\n        self.message = message\n        super().__init__(message)","documentation":"This code defines a custom exception class called `CommandFinishedEarly` that is raised when a command finishes before a specified timeout. The message passed to the constructor is used as the exception's error message."}},{"key":"scip-python python temp indexer `pilot.helpers.exceptions.commandfinishedearly`/CommandFinishedEarly#","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.exceptions.commandfinishedearly`/CommandFinishedEarly#","language":"python","range":[0,0,3,33],"content":"class CommandFinishedEarly(Exception):\n    def __init__(self, message='Command finished before timeout. Handling early completion...'):\n        self.message = message\n        super().__init__(message)","file":"/pilot/helpers/exceptions/CommandFinishedEarly.py","fileHash":"653291a03d34888c6dda1eca2ea6906ede53d491c801f5f002d29a77dd354cd2","hash":"653291a03d34888c6dda1eca2ea6906ede53d491c801f5f002d29a77dd354cd2","processedContent":"class CommandFinishedEarly(Exception):\n    def __init__(self, message='Command finished before timeout. Handling early completion...'):\n        self.message = message\n        super().__init__(message)","documentation":"This code defines a custom exception class called `CommandFinishedEarly` that is raised when a command finishes before a specified timeout. The message passed to the constructor is used as the exception's error message."}},{"key":"scip-python python temp indexer `pilot.const.code_execution`/MIN_COMMAND_RUN_TIME.","attributes":{"symbol":"scip-python python temp indexer `pilot.const.code_execution`/MIN_COMMAND_RUN_TIME.","language":"python"}},{"key":"scip-python python temp indexer `pilot.const.code_execution`/MAX_COMMAND_RUN_TIME.","attributes":{"symbol":"scip-python python temp indexer `pilot.const.code_execution`/MAX_COMMAND_RUN_TIME.","language":"python"}},{"key":"scip-python python temp indexer `pilot.const.code_execution`/MAX_COMMAND_OUTPUT_LENGTH.","attributes":{"symbol":"scip-python python temp indexer `pilot.const.code_execution`/MAX_COMMAND_OUTPUT_LENGTH.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.cli`/interrupted.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.cli`/interrupted.","language":"python"}},{"key":"scip-python python python-stdlib 3.11 os/setsid().","attributes":{"symbol":"scip-python python python-stdlib 3.11 os/setsid().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 threading/Thread#","attributes":{"symbol":"scip-python python python-stdlib 3.11 threading/Thread#","language":"python"}},{"key":"scip-python python python-stdlib 3.11 subprocess/Popen#stdout.","attributes":{"symbol":"scip-python python python-stdlib 3.11 subprocess/Popen#stdout.","language":"python"}},{"key":"scip-python python python-stdlib 3.11 subprocess/Popen#stderr.","attributes":{"symbol":"scip-python python python-stdlib 3.11 subprocess/Popen#stderr.","language":"python"}},{"key":"scip-python python python-stdlib 3.11 threading/Thread#daemon.","attributes":{"symbol":"scip-python python python-stdlib 3.11 threading/Thread#daemon.","language":"python"}},{"key":"scip-python python python-stdlib 3.11 threading/Thread#start().","attributes":{"symbol":"scip-python python python-stdlib 3.11 threading/Thread#start().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 subprocess/run().","attributes":{"symbol":"scip-python python python-stdlib 3.11 subprocess/run().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 subprocess/CalledProcessError#","attributes":{"symbol":"scip-python python python-stdlib 3.11 subprocess/CalledProcessError#","language":"python"}},{"key":"scip-python python python-stdlib 3.11 os/killpg().","attributes":{"symbol":"scip-python python python-stdlib 3.11 os/killpg().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 signal/SIGKILL.","attributes":{"symbol":"scip-python python python-stdlib 3.11 signal/SIGKILL.","language":"python"}},{"key":"scip-python python psutil 5.9.5 psutil/Process#","attributes":{"symbol":"scip-python python psutil 5.9.5 psutil/Process#","language":"python"}},{"key":"scip-python python psutil 5.9.5 psutil/Process#is_running().","attributes":{"symbol":"scip-python python psutil 5.9.5 psutil/Process#is_running().","language":"python"}},{"key":"scip-python python temp indexer `psutil._common`/NoSuchProcess#","attributes":{"symbol":"scip-python python temp indexer `psutil._common`/NoSuchProcess#","language":"python"}},{"key":"scip-python python psutil 5.9.5 psutil/Process#wait().","attributes":{"symbol":"scip-python python psutil 5.9.5 psutil/Process#wait().","language":"python"}},{"key":"scip-python python temp indexer `psutil._common`/TimeoutExpired#","attributes":{"symbol":"scip-python python temp indexer `psutil._common`/TimeoutExpired#","language":"python"}},{"key":"scip-python python python-stdlib 3.11 queue/Empty#","attributes":{"symbol":"scip-python python python-stdlib 3.11 queue/Empty#","language":"python"}},{"key":"scip-python python python-stdlib 3.11 queue/Queue#","attributes":{"symbol":"scip-python python python-stdlib 3.11 queue/Queue#","language":"python"}},{"key":"scip-python python python-stdlib 3.11 subprocess/Popen#pid.","attributes":{"symbol":"scip-python python python-stdlib 3.11 subprocess/Popen#pid.","language":"python"}},{"key":"scip-python python python-stdlib 3.11 time/time().","attributes":{"symbol":"scip-python python python-stdlib 3.11 time/time().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 time/sleep().","attributes":{"symbol":"scip-python python python-stdlib 3.11 time/sleep().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 subprocess/Popen#poll().","attributes":{"symbol":"scip-python python python-stdlib 3.11 subprocess/Popen#poll().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 subprocess/Popen#returncode.","attributes":{"symbol":"scip-python python python-stdlib 3.11 subprocess/Popen#returncode.","language":"python"}},{"key":"scip-python python python-stdlib 3.11 os/listdir().","attributes":{"symbol":"scip-python python python-stdlib 3.11 os/listdir().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 typing/Optional.","attributes":{"symbol":"scip-python python python-stdlib 3.11 typing/Optional.","language":"python"}},{"key":"scip-python python python-stdlib 3.11 os/makedirs().","attributes":{"symbol":"scip-python python python-stdlib 3.11 os/makedirs().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 typing/IO#write().","attributes":{"symbol":"scip-python python python-stdlib 3.11 typing/IO#write().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 io/BufferedIOBase#read().","attributes":{"symbol":"scip-python python python-stdlib 3.11 io/BufferedIOBase#read().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 pathlib/PurePath#parent().","attributes":{"symbol":"scip-python python python-stdlib 3.11 pathlib/PurePath#parent().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 pathlib/PurePath#relative_to().","attributes":{"symbol":"scip-python python python-stdlib 3.11 pathlib/PurePath#relative_to().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 os/walk().","attributes":{"symbol":"scip-python python python-stdlib 3.11 os/walk().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 os/remove().","attributes":{"symbol":"scip-python python python-stdlib 3.11 os/remove().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 os/rmdir().","attributes":{"symbol":"scip-python python python-stdlib 3.11 os/rmdir().","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#","attributes":{"range":[7,0,41,60],"symbol":"scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#","content":"class IPCClient:\n    def __init__(self, port):\n        self.ready = False\n        client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        print(\"Connecting to the external process...\")\n        try:\n            client.connect(('localhost', int(port)))\n            self.client = client\n            print(\"Connected!\")\n        except ConnectionRefusedError:\n            self.client = None\n            print(\"Connection refused, make sure you started the external process\")\n\n    def handle_request(self, message_content):\n        print(f\"Received request from the external process: {message_content}\")\n        return message_content  # For demonstration, we're just echoing back the content\n\n    def listen(self):\n        if self.client is None:\n            print(\"Not connected to the external process!\")\n            return\n\n        while True:\n            data = self.client.recv(4096)\n            message = json.loads(data)\n\n            if message['type'] == 'response':\n                # self.client.close()\n                return message['content']\n\n    def send(self, data):\n        serialized_data = json.dumps(data, default=json_serial)\n        data_length = len(serialized_data)\n        self.client.sendall(data_length.to_bytes(4, byteorder='big'))\n        self.client.sendall(serialized_data.encode('utf-8'))","file":"/pilot/helpers/ipc.py","language":"python","fileHash":"341255a8d3e820c4ad23c709f1db15cc9e6f839cf5e407c6e4033b78faa56699","hash":"9b5e26779c8b4319206ab19a8124e7ba6c1f9eecef4873b62bfbca47b1c984f1","processedContent":"class IPCClient:\n    def __init__(self, port):\n        \"\"\"This code initializes a socket connection to a local process, with the port number passed as an argument. It sets up a flag to indicate whether the connection is ready or not, and prints a message to the console when the connection is established or refused.\"\"\"\n        pass\n\n    def handle_request(self, message_content):\n        \"\"\"This code defines a function called `handle_request` that takes in a message content as an argument and prints it to the console. It then returns the original message content.\"\"\"\n        pass\n\n    def listen(self):\n        \"\"\"This code defines a function called `listen` that listens for incoming messages from an external process. It uses the `recv` method to receive data from the client, parses the received data as JSON, and then returns the content of the message if it is a response type.\"\"\"\n        pass\n\n    def send(self, data):\n        serialized_data = json.dumps(data, default=json_serial)\n        data_length = len(serialized_data)\n        self.client.sendall(data_length.to_bytes(4, byteorder='big'))\n        self.client.sendall(serialized_data.encode('utf-8'))","documentation":"This code defines a class called `IPCClient` that establishes a socket connection to a local process and listens for incoming messages. It also defines functions to handle requests and send data to the client."}},{"key":"scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#__init__().","attributes":{"range":[8,4,18,83],"symbol":"scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#__init__().","content":"def __init__(self, port):\n        self.ready = False\n        client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        print(\"Connecting to the external process...\")\n        try:\n            client.connect(('localhost', int(port)))\n            self.client = client\n            print(\"Connected!\")\n        except ConnectionRefusedError:\n            self.client = None\n            print(\"Connection refused, make sure you started the external process\")","file":"/pilot/helpers/ipc.py","language":"python","fileHash":"341255a8d3e820c4ad23c709f1db15cc9e6f839cf5e407c6e4033b78faa56699","hash":"c4766bcb41a28ffb911bddf0e914535ea5cef51f64455b04278f557d1247d5bd","processedContent":"def __init__(self, port):\n        self.ready = False\n        client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        \"\"\"\n        scip-python python python-stdlib 3.11 socket/__init__:: undefined\n        scip-python python python-stdlib 3.11 socket/__init__:: undefined\n        scip-python python python-stdlib 3.11 socket/__init__:: undefined\n        scip-python python python-stdlib 3.11 socket/socket#: undefined\n        scip-python python python-stdlib 3.11 socket/AF_INET.: undefined\n        scip-python python python-stdlib 3.11 socket/SOCK_STREAM.: undefined\n        \"\"\"\n        print(\"Connecting to the external process...\")\n        try:\n            client.connect(('localhost', int(port))) #undefined\n            self.client = client\n            print(\"Connected!\")\n        except ConnectionRefusedError:\n            self.client = None #undefined\n            print(\"Connection refused, make sure you started the external process\")","documentation":"This code initializes a socket connection to a local process, with the port number passed as an argument. It sets up a flag to indicate whether the connection is ready or not, and prints a message to the console when the connection is established or refused."}},{"key":"scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#handle_request().","attributes":{"range":[20,4,22,30],"symbol":"scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#handle_request().","content":"def handle_request(self, message_content):\n        print(f\"Received request from the external process: {message_content}\")\n        return message_content","file":"/pilot/helpers/ipc.py","language":"python","fileHash":"341255a8d3e820c4ad23c709f1db15cc9e6f839cf5e407c6e4033b78faa56699","hash":"0662453f34008236b7c16010c606c2fd62870b8dd567bfe33efa8de2b595cabf","processedContent":"def handle_request(self, message_content):\n        print(f\"Received request from the external process: {message_content}\")\n        return message_content","documentation":"This code defines a function called `handle_request` that takes in a message content as an argument and prints it to the console. It then returns the original message content."}},{"key":"scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#listen().","attributes":{"range":[24,4,35,41],"symbol":"scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#listen().","content":"def listen(self):\n        if self.client is None:\n            print(\"Not connected to the external process!\")\n            return\n\n        while True:\n            data = self.client.recv(4096)\n            message = json.loads(data)\n\n            if message['type'] == 'response':\n                # self.client.close()\n                return message['content']","file":"/pilot/helpers/ipc.py","language":"python","fileHash":"341255a8d3e820c4ad23c709f1db15cc9e6f839cf5e407c6e4033b78faa56699","hash":"f1528b6598283f6033891cc9831956bde47dd48484ad5cd0d458256990169059","processedContent":"def listen(self):\n        if self.client is None: #undefined\n            print(\"Not connected to the external process!\")\n            return\n\n        while True:\n            data = self.client.recv(4096)\n            \"\"\"\n            scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#client.: undefined\n            scip-python python python-stdlib 3.11 _socket/socket#recv().: undefined\n            \"\"\"\n            message = json.loads(data)\n            \"\"\"\n            scip-python python python-stdlib 3.11 json/__init__:: undefined\n            scip-python python python-stdlib 3.11 json/loads().: undefined\n            \"\"\"\n\n            if message['type'] == 'response':\n                # self.client.close()\n                return message['content']","documentation":"This code defines a function called `listen` that listens for incoming messages from an external process. It uses the `recv` method to receive data from the client, parses the received data as JSON, and then returns the content of the message if it is a response type."}},{"key":"scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#send().","attributes":{"range":[37,4,41,60],"symbol":"scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#send().","content":"def send(self, data):\n        serialized_data = json.dumps(data, default=json_serial)\n        data_length = len(serialized_data)\n        self.client.sendall(data_length.to_bytes(4, byteorder='big'))\n        self.client.sendall(serialized_data.encode('utf-8'))","file":"/pilot/helpers/ipc.py","language":"python","fileHash":"341255a8d3e820c4ad23c709f1db15cc9e6f839cf5e407c6e4033b78faa56699","hash":"b26f1812b81ba37f3b0d7f2fc467e93474195222949e48c1013673d86fe26f8b","processedContent":"def send(self, data):\n        serialized_data = json.dumps(data, default=json_serial)\n        \"\"\"\n        scip-python python python-stdlib 3.11 json/__init__:: undefined\n        scip-python python python-stdlib 3.11 json/dumps().: undefined\n        scip-python python temp indexer `pilot.utils.utils`/json_serial().: This code defines a function called `json_serial` that takes an object as input and returns a JSON-compatible string representation of it. The function is used to serialize objects that are not serializable by default in Python's JSON library, such as datetime objects and UUIDs.\n        \"\"\"\n        data_length = len(serialized_data)\n        self.client.sendall(data_length.to_bytes(4, byteorder='big'))\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#client.: undefined\n        scip-python python python-stdlib 3.11 _socket/socket#sendall().: undefined\n        \"\"\"\n        self.client.sendall(serialized_data.encode('utf-8'))","documentation":"This code defines a function called `send` that takes an object as input and sends it to a client over a network connection. The function first serializes the object into a JSON-compatible string using the `json_serial` function, then sends the length of the serialized data in bytes followed by the actual data."}},{"key":"scip-python python temp indexer `pilot.helpers.ipc`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.ipc`/__init__:","range":[0,0,42,0],"content":"# ipc.py\nimport socket\nimport json\nimport time\n\nfrom utils.utils import json_serial\n\nclass IPCClient:\n    def __init__(self, port):\n        self.ready = False\n        client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        print(\"Connecting to the external process...\")\n        try:\n            client.connect(('localhost', int(port)))\n            self.client = client\n            print(\"Connected!\")\n        except ConnectionRefusedError:\n            self.client = None\n            print(\"Connection refused, make sure you started the external process\")\n\n    def handle_request(self, message_content):\n        print(f\"Received request from the external process: {message_content}\")\n        return message_content  # For demonstration, we're just echoing back the content\n\n    def listen(self):\n        if self.client is None:\n            print(\"Not connected to the external process!\")\n            return\n\n        while True:\n            data = self.client.recv(4096)\n            message = json.loads(data)\n\n            if message['type'] == 'response':\n                # self.client.close()\n                return message['content']\n\n    def send(self, data):\n        serialized_data = json.dumps(data, default=json_serial)\n        data_length = len(serialized_data)\n        self.client.sendall(data_length.to_bytes(4, byteorder='big'))\n        self.client.sendall(serialized_data.encode('utf-8'))\n","file":"/pilot/helpers/ipc.py","language":"python","fileHash":"341255a8d3e820c4ad23c709f1db15cc9e6f839cf5e407c6e4033b78faa56699","hash":"341255a8d3e820c4ad23c709f1db15cc9e6f839cf5e407c6e4033b78faa56699","processedContent":"# ipc.py\nimport socket #undefined\nimport json #undefined\nimport time #undefined\n\nfrom utils.utils import json_serial\n\"\"\"\nscip-python python temp indexer `pilot.utils.utils`/__init__:: The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.utils.utils`/json_serial().: This code defines a function called `json_serial` that takes an object as input and returns a JSON-compatible string representation of it. The function is used to serialize objects that are not serializable by default in Python's JSON library, such as datetime objects and UUIDs.\n\"\"\"\n\nclass IPCClient:\n    \"\"\"This code defines a class called `IPCClient` that establishes a socket connection to a local process and listens for incoming messages. It also defines functions to handle requests and send data to the client.\"\"\"\n    pass\n","documentation":"This code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt."}},{"key":"scip-python python python-stdlib 3.11 socket/__init__:","attributes":{"symbol":"scip-python python python-stdlib 3.11 socket/__init__:","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.utils`/json_serial().","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.utils`/json_serial().","language":"python","range":[197,0,204,23],"content":"def json_serial(obj):\n    \"\"\"JSON serializer for objects not serializable by default json code\"\"\"\n    if isinstance(obj, (datetime.datetime, datetime.date)):\n        return obj.isoformat()\n    elif isinstance(obj, uuid.UUID):\n        return str(obj)\n    else:\n        return str(obj)","file":"/pilot/utils/utils.py","fileHash":"ffe0ebca72a8999ffb0084622af3eb69767ceda2cc6d7e7e68e65ebb2b4408c3","hash":"cb8315c9d5fee6ab7bdcce249d646051e435555130785d2a16244e80f7cf5273","processedContent":"def json_serial(obj):\n    \"\"\"JSON serializer for objects not serializable by default json code\"\"\"\n    if isinstance(obj, (datetime.datetime, datetime.date)):\n    \"\"\"\n    scip-python python python-stdlib 3.11 datetime/__init__:: undefined\n    scip-python python python-stdlib 3.11 datetime/__init__:: undefined\n    scip-python python python-stdlib 3.11 datetime/datetime#: undefined\n    scip-python python python-stdlib 3.11 datetime/date#: undefined\n    \"\"\"\n        return obj.isoformat() #undefined\n    elif isinstance(obj, uuid.UUID):\n    \"\"\"\n    scip-python python python-stdlib 3.11 uuid/__init__:: undefined\n    scip-python python python-stdlib 3.11 uuid/UUID#: undefined\n    \"\"\"\n        return str(obj)\n    else:\n        return str(obj)","documentation":"This code defines a function called `json_serial` that takes an object as input and returns a JSON-compatible string representation of it. The function is used to serialize objects that are not serializable by default in Python's JSON library, such as datetime objects and UUIDs."}},{"key":"scip-python python python-stdlib 3.11 socket/socket#","attributes":{"symbol":"scip-python python python-stdlib 3.11 socket/socket#","language":"python"}},{"key":"scip-python python python-stdlib 3.11 socket/AF_INET.","attributes":{"symbol":"scip-python python python-stdlib 3.11 socket/AF_INET.","language":"python"}},{"key":"scip-python python python-stdlib 3.11 socket/SOCK_STREAM.","attributes":{"symbol":"scip-python python python-stdlib 3.11 socket/SOCK_STREAM.","language":"python"}},{"key":"scip-python python python-stdlib 3.11 _socket/socket#connect().","attributes":{"symbol":"scip-python python python-stdlib 3.11 _socket/socket#connect().","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#client.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#client.","language":"python"}},{"key":"scip-python python python-stdlib 3.11 _socket/socket#recv().","attributes":{"symbol":"scip-python python python-stdlib 3.11 _socket/socket#recv().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 _socket/socket#sendall().","attributes":{"symbol":"scip-python python python-stdlib 3.11 _socket/socket#sendall().","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.test_agentconvo`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.test_agentconvo`/__init__:","range":[0,0,66,0],"content":"import builtins\r\nimport os.path\r\nfrom dotenv import load_dotenv\r\nfrom database.database import database\r\nfrom const.function_calls import IMPLEMENT_TASK\r\nfrom helpers.agents.Developer import Developer\r\nfrom helpers.AgentConvo import AgentConvo\r\nfrom utils.custom_print import get_custom_print\r\nfrom .test_Project import create_project\r\n\r\nload_dotenv()\r\n\r\nbuiltins.print, ipc_client_instance = get_custom_print({})\r\n\r\n\r\n# def test_format_message_content_json_response():\r\n#     # Given\r\n#     project = create_project()\r\n#     project.current_step = 'test'\r\n#     developer = Developer(project)\r\n#     convo = AgentConvo(developer)\r\n#\r\n#     response = {\r\n#         'files': [\r\n#             {\r\n#                 'name': 'package.json',\r\n#                 'path': '/package.json',\r\n#                 'content': '{\\n  \"name\": \"complex_app\",\\n  \"version\": \"1.0.0\",\\n  \"description\": \"\",\\n  \"main\": \"index.js\",\\n  \"directories\": {\\n    \"test\": \"tests\"\\n  },\\n  \"scripts\": {\\n    \"test\": \"echo \\\\\"Error: no test specified\\\\\" && exit 1\",\\n    \"start\": \"node index.js\"\\n  },\\n  \"keywords\": [],\\n  \"author\": \"\",\\n  \"license\": \"ISC\",\\n  \"dependencies\": {\\n    \"axios\": \"^1.5.1\",\\n    \"express\": \"^4.18.2\",\\n    \"mongoose\": \"^7.6.1\",\\n    \"socket.io\": \"^4.7.2\"\\n  },\\n  \"devDependencies\": {\\n    \"nodemon\": \"^3.0.1\"\\n  }\\n}'\r\n#             }\r\n#         ]\r\n#     }\r\n#\r\n#     # When\r\n#     message_content = convo.format_message_content(response, IMPLEMENT_TASK)\r\n#\r\n#     # Then\r\n#     assert message_content == '''\r\n# # files\r\n# ##0\r\n# name: package.json\r\n# path: /package.json\r\n# content: {\r\n#   \"name\": \"complex_app\",\r\n#   \"version\": \"1.0.0\",\r\n#   \"description\": \"\",\r\n#   \"main\": \"index.js\",\r\n#   \"directories\": {\r\n#     \"test\": \"tests\"\r\n#   },\r\n#   \"scripts\": {\r\n#     \"test\": \"echo \\\\\"Error: no test specified\\\\\" && exit 1\",\r\n#     \"start\": \"node index.js\"\r\n#   },\r\n#   \"keywords\": [],\r\n#   \"author\": \"\",\r\n#   \"license\": \"ISC\",\r\n#   \"dependencies\": {\r\n#     \"axios\": \"^1.5.1\",\r\n#     \"express\": \"^4.18.2\",\r\n#     \"mongoose\": \"^7.6.1\",\r\n#     \"socket.io\": \"^4.7.2\"\r\n#   },\r\n#   \"devDependencies\": {\r\n#     \"nodemon\": \"^3.0.1\"\r\n#   }\r\n# }'''.lstrip()\r\n","file":"/pilot/helpers/test_AgentConvo.py","language":"python","fileHash":"cd8b97eabb981f6bf69b549b05298c3c9e3b8105031d04e588f32b701bb3e345","hash":"cd8b97eabb981f6bf69b549b05298c3c9e3b8105031d04e588f32b701bb3e345","processedContent":"import builtins\r\nimport os.path\r #undefined\nfrom dotenv import load_dotenv\r\n\"\"\"\nscip-python python python-dotenv 1.0.0 dotenv/__init__:: undefined\nscip-python python python-dotenv 1.0.0 `dotenv.main`/load_dotenv().: undefined\n\"\"\"\nfrom database.database import database\r\n\"\"\"\nscip-python python temp indexer `pilot.database.database`/__init__:: The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.database.models.components.base_models`/database.: undefined\n\"\"\"\nfrom const.function_calls import IMPLEMENT_TASK\r\n\"\"\"\nscip-python python temp indexer `pilot.const.function_calls`/__init__:: The code is a collection of functions and definitions that are used to implement various tasks in a development process. It includes functions for processing user stories, tasks, technologies, commands, and files, as well as definitions for breaking down development tasks into smaller steps and implementing code changes.\nscip-python python temp indexer `pilot.const.function_calls`/IMPLEMENT_TASK.: undefined\n\"\"\"\nfrom helpers.agents.Developer import Developer\r\n\"\"\"\nscip-python python temp indexer `pilot.helpers.agents.developer`/__init__:: The code defines a class called \"Developer\" that represents a person working on a specific project, and includes functions for implementing tasks, running commands, and handling human intervention during the development process.\nscip-python python temp indexer `pilot.helpers.agents.developer`/Developer#: The code defines a class called \"Developer\" that represents a person working on a specific project. It has functions for implementing tasks, running commands, and handling human intervention during the development process.\n\"\"\"\nfrom helpers.AgentConvo import AgentConvo\r\n\"\"\"\nscip-python python temp indexer `pilot.helpers.agentconvo`/__init__:: The code defines a class called `AgentConvo` that represents a conversation with an agent, including functions for sending and receiving messages, formatting and rendering prompts, and error handling for GPT model token limits.\nscip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#: This code defines a class called `AgentConvo` that represents a conversation with an agent. It includes functions for sending and receiving messages, as well as formatting and rendering prompts. The code also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n\"\"\"\nfrom utils.custom_print import get_custom_print\r\n\"\"\"\nscip-python python temp indexer `pilot.utils.custom_print`/__init__:: The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.utils.custom_print`/get_custom_print().: This code defines a function called `get_custom_print` that returns a tuple of two functions: `print_to_external_process` and `local_print`. The first function sends a message to an external process over a network connection, while the second function prints the message to the console.\n\"\"\"\nfrom .test_Project import create_project\r\n\"\"\"\nscip-python python temp indexer `pilot.helpers.test_project`/__init__:: The code defines a class called \"Project\" that represents a software development project, with functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\nscip-python python temp indexer `pilot.helpers.test_project`/create_project().: This code defines a class called \"Project\" that represents a software development project. It includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\n\"\"\"\n\r\nload_dotenv()\r #undefined\n\r\nbuiltins.print, ipc_client_instance = get_custom_print({})\r #This code defines a function called `get_custom_print` that returns a tuple of two functions: `print_to_external_process` and `local_print`. The first function sends a message to an external process over a network connection, while the second function prints the message to the console.\n\r\n\r\n# def test_format_message_content_json_response():\r\n#     # Given\r\n#     project = create_project()\r\n#     project.current_step = 'test'\r\n#     developer = Developer(project)\r\n#     convo = AgentConvo(developer)\r\n#\r\n#     response = {\r\n#         'files': [\r\n#             {\r\n#                 'name': 'package.json',\r\n#                 'path': '/package.json',\r\n#                 'content': '{\\n  \"name\": \"complex_app\",\\n  \"version\": \"1.0.0\",\\n  \"description\": \"\",\\n  \"main\": \"index.js\",\\n  \"directories\": {\\n    \"test\": \"tests\"\\n  },\\n  \"scripts\": {\\n    \"test\": \"echo \\\\\"Error: no test specified\\\\\" && exit 1\",\\n    \"start\": \"node index.js\"\\n  },\\n  \"keywords\": [],\\n  \"author\": \"\",\\n  \"license\": \"ISC\",\\n  \"dependencies\": {\\n    \"axios\": \"^1.5.1\",\\n    \"express\": \"^4.18.2\",\\n    \"mongoose\": \"^7.6.1\",\\n    \"socket.io\": \"^4.7.2\"\\n  },\\n  \"devDependencies\": {\\n    \"nodemon\": \"^3.0.1\"\\n  }\\n}'\r\n#             }\r\n#         ]\r\n#     }\r\n#\r\n#     # When\r\n#     message_content = convo.format_message_content(response, IMPLEMENT_TASK)\r\n#\r\n#     # Then\r\n#     assert message_content == '''\r\n# # files\r\n# ##0\r\n# name: package.json\r\n# path: /package.json\r\n# content: {\r\n#   \"name\": \"complex_app\",\r\n#   \"version\": \"1.0.0\",\r\n#   \"description\": \"\",\r\n#   \"main\": \"index.js\",\r\n#   \"directories\": {\r\n#     \"test\": \"tests\"\r\n#   },\r\n#   \"scripts\": {\r\n#     \"test\": \"echo \\\\\"Error: no test specified\\\\\" && exit 1\",\r\n#     \"start\": \"node index.js\"\r\n#   },\r\n#   \"keywords\": [],\r\n#   \"author\": \"\",\r\n#   \"license\": \"ISC\",\r\n#   \"dependencies\": {\r\n#     \"axios\": \"^1.5.1\",\r\n#     \"express\": \"^4.18.2\",\r\n#     \"mongoose\": \"^7.6.1\",\r\n#     \"socket.io\": \"^4.7.2\"\r\n#   },\r\n#   \"devDependencies\": {\r\n#     \"nodemon\": \"^3.0.1\"\r\n#   }\r\n# }'''.lstrip()\r\n","documentation":"The code defines a series of functions and classes for implementing tasks in a software development process, including functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks."}},{"key":"scip-python python python-stdlib 3.11 `os.path`/__init__:","attributes":{"symbol":"scip-python python python-stdlib 3.11 `os.path`/__init__:","language":"python"}},{"key":"scip-python python temp indexer `pilot.const.function_calls`/IMPLEMENT_TASK.","attributes":{"symbol":"scip-python python temp indexer `pilot.const.function_calls`/IMPLEMENT_TASK.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.test_project`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.test_project`/__init__:","language":"python","range":[0,0,427,0],"content":"import os\r\nimport json\r\nfrom pathlib import Path\r\nimport pytest\r\nfrom unittest.mock import patch, MagicMock\r\nfrom helpers.Project import Project\r\n\r\ntest_root = str(Path(__file__).parent.parent.parent / Path(\"workspace\") / Path(\"gpt-pilot-test\"))\r\n\r\ndef create_project():\r\n    project = Project({\r\n        'app_id': 'test-project',\r\n        'name': 'TestProject',\r\n        'app_type': ''\r\n    },\r\n        name='TestProject',\r\n        architecture=[],\r\n        user_stories=[]\r\n    )\r\n    project.set_root_path(test_root)\r\n    project.app = 'test'\r\n    project.current_step = 'test'\r\n    return project\r\n\r\n\r\nclass TestProject:\r\n    @pytest.mark.parametrize('file_path, file_name, expected', [\r\n        ('file.txt', 'file.txt', f'{test_root}/file.txt'),\r\n        ('', 'file.txt', f'{test_root}/file.txt'),\r\n        ('path/', 'file.txt', f'{test_root}/path/file.txt'),\r\n        ('path/to/', 'file.txt', f'{test_root}/path/to/file.txt'),\r\n        ('path/to/file.txt', 'file.txt', f'{test_root}/path/to/file.txt'),\r\n        ('./path/to/file.txt', 'to/file.txt', f'{test_root}/path/to/file.txt'),\r\n        ('./package.json', 'package.json', f'{test_root}/package.json'),\r\n    ])\r\n    def test_get_full_path(self, file_path, file_name, expected):\r\n        # Given\r\n        project = create_project()\r\n\r\n        # When\r\n        relative_path, absolute_path = project.get_full_file_path(file_path, file_name)\r\n\r\n        # Then\r\n        assert absolute_path == str(Path(expected))\r\n\r\n    @pytest.mark.parametrize(\r\n        (\"file_path\", \"file_name\", \"expected_path\", \"expected_absolute_path\"), [\r\n        ('', '', '/', f'{test_root}/'),\r\n        ('', '.', '/', f'{test_root}/'),\r\n        ('', '.env', '/', f'{test_root}/.env'),\r\n        ('', '~/', '/', f'{test_root}/'),\r\n        ('', f'{test_root}/', '/', f'{test_root}/'),\r\n        ('', f'{test_root}/folder1', '/folder1', f'{test_root}/folder1/'),\r\n        ('', f'{test_root}/Folder With Space/', '/Folder With Space', f'{test_root}/Folder With Space/'),\r\n        ('', 'server.js', '/', f'{test_root}/server.js'),\r\n        ('', 'folder1', '/folder1', f'{test_root}/folder1/'),\r\n        ('', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('', f'{test_root}/Folder With Space/server.js', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        ('', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('', './folder1/server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('.', '', '/', f'{test_root}/'),\r\n        ('.', '.', '/', f'{test_root}/'),\r\n        ('.', '.env', '/', f'{test_root}/.env'),\r\n        ('.', '~/', '/', f'{test_root}/'),\r\n        ('.', f'{test_root}/', '/', f'{test_root}/'),\r\n        ('.', f'{test_root}/folder1', '/folder1', f'{test_root}/folder1/'),\r\n        ('.', f'{test_root}/Folder With Space/', '/Folder With Space', f'{test_root}/Folder With Space/'),\r\n        ('.', 'server.js', '/', f'{test_root}/server.js'),\r\n        ('.', 'folder1', '/folder1', f'{test_root}/folder1/'),\r\n        ('.', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('.', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('.', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('.', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('.', f'{test_root}/Folder With Space/server.js', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        ('.', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('.', './folder1/server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('.env', '', '/', f'{test_root}/.env'),\r\n        ('.env', '.', '/', f'{test_root}/.env'),\r\n        ('.env', '.env', '/', f'{test_root}/.env'),\r\n        ('.env', '~/', '/', f'{test_root}/.env'),\r\n        ('.env', f'{test_root}/', '/', f'{test_root}/.env'),\r\n        ('.env', f'{test_root}/folder1', '/folder1', f'{test_root}/folder1/.env'),\r\n        ('.env', f'{test_root}/Folder With Space/', '/Folder With Space', f'{test_root}/Folder With Space/.env'),\r\n        ('.env', 'server.js', '/', f'{test_root}/server.js'),\r\n        ('.env', 'folder1', '/folder1', f'{test_root}/folder1/.env'),\r\n        ('.env', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/.env'),\r\n        ('.env', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/.env'),\r\n        ('.env', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('.env', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('.env', f'{test_root}/Folder With Space/server.js', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        ('.env', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('.env', './folder1/server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('~/', '', '/', f'{test_root}/'),\r\n        ('~/', '.', '/', f'{test_root}/'),\r\n        ('~/', '.env', '/', f'{test_root}/.env'),\r\n        ('~/', '~/', '/', f'{test_root}/'),\r\n        ('~/', f'{test_root}/', '/', f'{test_root}/'),\r\n        ('~/', f'{test_root}/folder1', '/folder1', f'{test_root}/folder1/'),\r\n        ('~/', f'{test_root}/Folder With Space/', '/Folder With Space', f'{test_root}/Folder With Space/'),\r\n        ('~/', 'server.js', '/', f'{test_root}/server.js'),\r\n        ('~/', 'folder1', '/folder1', f'{test_root}/folder1/'),\r\n        ('~/', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('~/', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('~/', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/', f'{test_root}/Folder With Space/server.js', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        ('~/', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/', './folder1/server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n        (f'{test_root}/', '', '/', f'{test_root}/'),\r\n        (f'{test_root}/', '.', '/', f'{test_root}/'),\r\n        (f'{test_root}/', '.env', '/', f'{test_root}/.env'),\r\n        (f'{test_root}/', '~/', '/', f'{test_root}/'),\r\n        (f'{test_root}/', f'{test_root}/', '/', f'{test_root}/'),\r\n        (f'{test_root}/', f'{test_root}/folder1', '/folder1', f'{test_root}/folder1/'),\r\n        (f'{test_root}/', f'{test_root}/Folder With Space/', '/Folder With Space', f'{test_root}/Folder With Space/'),\r\n        (f'{test_root}/', 'server.js', '/', f'{test_root}/server.js'),\r\n        (f'{test_root}/', 'folder1', '/folder1', f'{test_root}/folder1/'),\r\n        (f'{test_root}/', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        (f'{test_root}/', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        (f'{test_root}/', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/', f'{test_root}/Folder With Space/server.js', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        (f'{test_root}/', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/', './folder1/server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n        (f'{test_root}/folder1', '', '/folder1', f'{test_root}/folder1/'),\r\n        (f'{test_root}/folder1', '.', '/folder1', f'{test_root}/folder1/'),\r\n        (f'{test_root}/folder1', '.env', '/folder1', f'{test_root}/folder1/.env'),\r\n        (f'{test_root}/folder1', '~/', '/folder1', f'{test_root}/folder1/'),\r\n        (f'{test_root}/folder1', f'{test_root}/', '/folder1', f'{test_root}/folder1/'),\r\n        (f'{test_root}/folder1', f'{test_root}/folder1', '/folder1', f'{test_root}/folder1/'),\r\n        (f'{test_root}/folder1', f'{test_root}/Folder With Space/', '/folder1/Folder With Space', f'{test_root}/folder1/Folder With Space/'),\r\n        (f'{test_root}/folder1', 'server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n        (f'{test_root}/folder1', 'folder1', '/folder1', f'{test_root}/folder1/'),\r\n        (f'{test_root}/folder1', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        (f'{test_root}/folder1', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        (f'{test_root}/folder1', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1', f'{test_root}/Folder With Space/server.js', '/folder1/Folder With Space', f'{test_root}/folder1/Folder With Space/server.js'),\r\n        (f'{test_root}/folder1', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1', './folder1/server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n        (f'{test_root}/Folder With Space/', '', '/Folder With Space', f'{test_root}/Folder With Space/'),\r\n        (f'{test_root}/Folder With Space/', '.', '/Folder With Space', f'{test_root}/Folder With Space/'),\r\n        (f'{test_root}/Folder With Space/', '.env', '/Folder With Space', f'{test_root}/Folder With Space/.env'),\r\n        (f'{test_root}/Folder With Space/', '~/', '/Folder With Space', f'{test_root}/Folder With Space/'),\r\n        (f'{test_root}/Folder With Space/', f'{test_root}/', '/Folder With Space', f'{test_root}/Folder With Space/'),\r\n        (f'{test_root}/Folder With Space/', f'{test_root}/folder1', '/Folder With Space/folder1', f'{test_root}/Folder With Space/folder1/'),\r\n        (f'{test_root}/Folder With Space/', f'{test_root}/Folder With Space/', '/Folder With Space', f'{test_root}/Folder With Space/'),\r\n        (f'{test_root}/Folder With Space/', 'server.js', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/', 'folder1', '/Folder With Space/folder1', f'{test_root}/Folder With Space/folder1/'),\r\n        (f'{test_root}/Folder With Space/', 'folder1/folder2', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/'),\r\n        (f'{test_root}/Folder With Space/', 'folder1/folder2/', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/'),\r\n        (f'{test_root}/Folder With Space/', 'folder1/folder2/server.js', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/server.js'),\r\n        (f'{test_root}/Folder With Space/', f'{test_root}/folder1/folder2/server.js', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/server.js'),\r\n        (f'{test_root}/Folder With Space/', f'{test_root}/Folder With Space/server.js', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/', '~/folder1/folder2/server.js', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/server.js'),\r\n        (f'{test_root}/Folder With Space/', './folder1/server.js', '/Folder With Space/folder1', f'{test_root}/Folder With Space/folder1/server.js'),\r\n        ('server.js', '', '/', f'{test_root}/server.js'),\r\n        ('server.js', '.', '/', f'{test_root}/server.js'),\r\n        ('server.js', '.env', '/', f'{test_root}/.env'),\r\n        ('server.js', '~/', '/', f'{test_root}/server.js'),\r\n        ('server.js', f'{test_root}/', '/', f'{test_root}/server.js'),\r\n        ('server.js', f'{test_root}/folder1', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('server.js', f'{test_root}/Folder With Space/', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        ('server.js', 'server.js', '/', f'{test_root}/server.js'),\r\n        ('server.js', 'folder1', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('server.js', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('server.js', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('server.js', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('server.js', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('server.js', f'{test_root}/Folder With Space/server.js', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        ('server.js', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('server.js', './folder1/server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('folder1', '', '/folder1', f'{test_root}/folder1/'),\r\n        ('folder1', '.', '/folder1', f'{test_root}/folder1/'),\r\n        ('folder1', '.env', '/folder1', f'{test_root}/folder1/.env'),\r\n        ('folder1', '~/', '/folder1', f'{test_root}/folder1/'),\r\n        ('folder1', f'{test_root}/', '/folder1', f'{test_root}/folder1/'),\r\n        ('folder1', f'{test_root}/folder1', '/folder1', f'{test_root}/folder1/'),\r\n        ('folder1', f'{test_root}/Folder With Space/', '/folder1/Folder With Space', f'{test_root}/folder1/Folder With Space/'),\r\n        ('folder1', 'server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('folder1', 'folder1', '/folder1', f'{test_root}/folder1/'),\r\n        ('folder1', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1', f'{test_root}/Folder With Space/server.js', '/folder1/Folder With Space', f'{test_root}/folder1/Folder With Space/server.js'),\r\n        ('folder1', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1', './folder1/server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('folder1/folder2', '', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2', '.', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2', '.env', '/folder1/folder2', f'{test_root}/folder1/folder2/.env'),\r\n        ('folder1/folder2', '~/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2', f'{test_root}/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2', f'{test_root}/folder1', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2', f'{test_root}/Folder With Space/', '/folder1/folder2/Folder With Space', f'{test_root}/folder1/folder2/Folder With Space/'),\r\n        ('folder1/folder2', 'server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2', 'folder1', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2', f'{test_root}/Folder With Space/server.js', '/folder1/folder2/Folder With Space', f'{test_root}/folder1/folder2/Folder With Space/server.js'),\r\n        ('folder1/folder2', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2', './folder1/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/', '', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2/', '.', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2/', '.env', '/folder1/folder2', f'{test_root}/folder1/folder2/.env'),\r\n        ('folder1/folder2/', '~/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2/', f'{test_root}/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2/', f'{test_root}/folder1', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2/', f'{test_root}/Folder With Space/', '/folder1/folder2/Folder With Space', f'{test_root}/folder1/folder2/Folder With Space/'),\r\n        ('folder1/folder2/', 'server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/', 'folder1', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2/', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2/', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2/', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/', f'{test_root}/Folder With Space/server.js', '/folder1/folder2/Folder With Space', f'{test_root}/folder1/folder2/Folder With Space/server.js'),\r\n        ('folder1/folder2/', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/', './folder1/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', '', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', '.', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', '.env', '/folder1/folder2', f'{test_root}/folder1/folder2/.env'),\r\n        ('folder1/folder2/server.js', '~/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', f'{test_root}/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', f'{test_root}/folder1', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', f'{test_root}/Folder With Space/', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', 'server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', 'folder1', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', f'{test_root}/Folder With Space/server.js', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', './folder1/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', '', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', '.', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', '.env', '/folder1/folder2', f'{test_root}/folder1/folder2/.env'),\r\n        (f'{test_root}/folder1/folder2/server.js', '~/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', f'{test_root}/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', f'{test_root}/folder1', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', f'{test_root}/Folder With Space/', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', 'server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', 'folder1', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', f'{test_root}/Folder With Space/server.js', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', './folder1/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', '', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', '.', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', '.env', '/Folder With Space', f'{test_root}/Folder With Space/.env'),\r\n        (f'{test_root}/Folder With Space/server.js', '~/', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', f'{test_root}/', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', f'{test_root}/folder1', '/folder1/Folder With Space', f'{test_root}/folder1/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', f'{test_root}/Folder With Space/', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', 'server.js', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', 'folder1', '/folder1/Folder With Space', f'{test_root}/folder1/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', 'folder1/folder2', '/folder1/folder2/Folder With Space', f'{test_root}/folder1/folder2/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', 'folder1/folder2/', '/folder1/folder2/Folder With Space', f'{test_root}/folder1/folder2/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', 'folder1/folder2/server.js', '/folder1/folder2/Folder With Space', f'{test_root}/folder1/folder2/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2/Folder With Space', f'{test_root}/folder1/folder2/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', f'{test_root}/Folder With Space/server.js', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', '~/folder1/folder2/server.js', '/folder1/folder2/Folder With Space', f'{test_root}/folder1/folder2/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', './folder1/server.js', '/folder1/Folder With Space', f'{test_root}/folder1/Folder With Space/server.js'),\r\n        ('~/folder1/folder2/server.js', '', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', '.', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', '.env', '/folder1/folder2', f'{test_root}/folder1/folder2/.env'),\r\n        ('~/folder1/folder2/server.js', '~/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', f'{test_root}/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', f'{test_root}/folder1', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', f'{test_root}/Folder With Space/', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', 'server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', 'folder1', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', f'{test_root}/Folder With Space/server.js', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', './folder1/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('./folder1/server.js', '', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('./folder1/server.js', '.', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('./folder1/server.js', '.env', '/folder1', f'{test_root}/folder1/.env'),\r\n        ('./folder1/server.js', '~/', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('./folder1/server.js', f'{test_root}/', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('./folder1/server.js', f'{test_root}/folder1', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('./folder1/server.js', f'{test_root}/Folder With Space/', '/Folder With Space/folder1', f'{test_root}/Folder With Space/folder1/server.js'),\r\n        ('./folder1/server.js', 'server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('./folder1/server.js', 'folder1', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('./folder1/server.js', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('./folder1/server.js', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('./folder1/server.js', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('./folder1/server.js', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('./folder1/server.js', f'{test_root}/Folder With Space/server.js', '/Folder With Space/folder1', f'{test_root}/Folder With Space/folder1/server.js'),\r\n        ('./folder1/server.js', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('./folder1/server.js', './folder1/server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n\r\n    ])\r\n    def test_get_full_path_permutations(self, file_path, file_name, expected_path, expected_absolute_path):\r\n        \"\"\"\r\n        Test many different permutations of file path/name combinations.\r\n        \"\"\"\r\n        project = create_project()\r\n        relative_path, absolute_path = project.get_full_file_path(file_path, file_name)\r\n        # Normalize results before comparison, in case of Windows\r\n        assert str(Path(relative_path)) == str(Path(expected_path))\r\n        assert str(Path(absolute_path)) == str(Path(expected_absolute_path))\r\n\r\n    @pytest.mark.parametrize('test_data', [\r\n        {'name': 'package.json', 'path': 'package.json', 'saved_to': f'{test_root}/package.json'},\r\n        {'name': 'package.json', 'path': '', 'saved_to': f'{test_root}/package.json'},\r\n        {'name': 'package.json', 'path': '/', 'saved_to': f'{test_root}/package.json'},\r\n        {'name': 'package.json', 'path': None, 'saved_to': f'{test_root}/package.json'},\r\n        {'name': None, 'path': 'public/index.html', 'saved_to': f'{test_root}/public/index.html'},\r\n        {'name': '', 'path': 'public/index.html', 'saved_to': f'{test_root}/public/index.html'},\r\n        # TODO: Treatment of paths outside of the project workspace - https://github.com/Pythagora-io/gpt-pilot/issues/129\r\n        {'name': '/etc/hosts.txt', 'path': None, 'saved_to': f'{test_root}/etc/hosts.txt'},\r\n        # {'name': '.gitconfig', 'path': '~', 'saved_to': '~/.gitconfig'},\r\n        # {'name': '.gitconfig', 'path': '~/.gitconfig', 'saved_to': '~/.gitconfig'},\r\n        # {'name': 'gpt-pilot.log', 'path': '/temp/gpt-pilot.log', 'saved_to': '/temp/gpt-pilot.log'},\r\n    ])\r\n    @patch('helpers.Project.update_file')\r\n    @patch('helpers.Project.File')\r\n    def test_save_file(self, mock_file_insert, mock_update_file, test_data):\r\n        # Given\r\n        data = {'content': 'Hello World!'}\r\n        if test_data['name'] is not None:\r\n            data['name'] = str(Path(test_data['name']))\r\n        if test_data['path'] is not None:\r\n            data['path'] = str(Path(test_data['path']))\r\n\r\n        project = create_project()\r\n\r\n        # When\r\n        project.save_file(data)\r\n\r\n        # Then assert that update_file with the correct path\r\n        expected_saved_to = str(Path(test_data['saved_to']))\r\n        mock_update_file.assert_called_once_with(expected_saved_to, 'Hello World!')\r\n\r\n        # Also assert that File.insert was called with the expected arguments\r\n        # expected_file_data = {'app': project.app, 'path': test_data['path'], 'name': test_data['name'],\r\n        #                       'full_path': expected_saved_to}\r\n        # mock_file_insert.assert_called_once_with(**expected_file_data,\r\n\r\nclass TestProjectFileLists:\r\n    def setup_method(self):\r\n        # Given a project\r\n        project = create_project()\r\n        self.project = project\r\n        project.set_root_path(os.path.join(os.path.dirname(__file__), '../../workspace/directory_tree'))\r\n        project.project_description = 'Test Project'\r\n        project.development_plan = [{\r\n            'description': 'Test User Story',\r\n            'programmatic_goal': 'Test Programmatic Goal',\r\n            'user_review_goal': 'Test User Review Goal',\r\n        }]\r\n\r\n        # with directories including common.IGNORE_FOLDERS\r\n        src = os.path.join(project.root_path, 'src')\r\n        foo = os.path.join(project.root_path, 'src/foo')\r\n        files_no_folders = os.path.join(foo, 'files_no_folders')\r\n        os.makedirs(src, exist_ok=True)\r\n        os.makedirs(foo, exist_ok=True)\r\n        os.makedirs(foo + '/empty1', exist_ok=True)\r\n        os.makedirs(foo + '/empty2', exist_ok=True)\r\n        os.makedirs(files_no_folders, exist_ok=True)\r\n        for dir in ['.git', '.idea', '.vscode', '__pycache__', 'node_modules', 'venv', 'dist', 'build']:\r\n            os.makedirs(os.path.join(project.root_path, dir), exist_ok=True)\r\n\r\n        # ...and files\r\n\r\n        with open(os.path.join(project.root_path, 'package.json'), 'w') as file:\r\n            json.dump({'name': 'test app'}, file, indent=2)\r\n        for path in [\r\n            os.path.join(src, 'main.js'),\r\n            os.path.join(src, 'other.js'),\r\n            os.path.join(foo, 'bar.js'),\r\n            os.path.join(foo, 'fighters.js'),\r\n            os.path.join(files_no_folders, 'file1.js'),\r\n            os.path.join(files_no_folders, 'file2.js'),\r\n        ]:\r\n            with open(path, 'w') as file:\r\n                file.write('console.log(\"Hello World!\");')\r\n\r\n        # and a non-empty .gpt-pilot directory\r\n        project.dot_pilot_gpt.write_project(project)\r\n\r\n    def test_get_directory_tree(self):\r\n        # When\r\n        tree = self.project.get_directory_tree()\r\n\r\n        # Then we should not be including the .gpt-pilot directory or other ignored directories\r\n        # print('\\n' + tree)\r\n        assert tree == '''\r\n/\r\n  /src\r\n    /foo\r\n      /empty1\r\n      /empty2\r\n      /files_no_folders: file1.js, file2.js\r\n      bar.js, fighters.js\r\n    main.js, other.js\r\n  package.json\r\n'''.lstrip()\r\n\r\n    @patch('helpers.Project.DevelopmentSteps.get_or_create', return_value=('test', True))\r\n    @patch('helpers.Project.File.get_or_create', return_value=('test', True))\r\n    @patch('helpers.Project.FileSnapshot.get_or_create', return_value=(MagicMock(), True))\r\n    def test_save_files_snapshot(self, mock_snap, mock_file, mock_step):\r\n        # Given a snapshot of the files in the project\r\n\r\n        # When we save the file snapshot\r\n        self.project.save_files_snapshot('test')\r\n\r\n        # Then the files should be saved to the project, but nothing from `.gpt-pilot/`\r\n        assert mock_file.call_count == 7\r\n        files = ['package.json', 'main.js', 'file1.js', 'file2.js', 'bar.js', 'fighters.js', 'other.js']\r\n        for i in range(7):\r\n            assert mock_file.call_args_list[i][1]['name'] in files\r\n","file":"/pilot/helpers/test_Project.py","fileHash":"37fe43012059855b97b22dc9679c3d74432a892b7b5dec62c6a31febdbb100aa","hash":"37fe43012059855b97b22dc9679c3d74432a892b7b5dec62c6a31febdbb100aa","processedContent":"import os\r #undefined\nimport json\r #undefined\nfrom pathlib import Path\r\n\"\"\"\nscip-python python python-stdlib 3.11 pathlib/__init__:: undefined\nscip-python python python-stdlib 3.11 pathlib/Path#: undefined\n\"\"\"\nimport pytest\r\nfrom unittest.mock import patch, MagicMock\r #undefined\nfrom helpers.Project import Project\r\n\"\"\"\nscip-python python temp indexer `pilot.helpers.project`/__init__:: The code defines a Python class called \"Project\" that represents a software development project, with functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\nscip-python python temp indexer `pilot.helpers.project`/Project#: The code defines a class called \"Project\" that represents a software development project. It includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\n\"\"\"\n\r\ntest_root = str(Path(__file__).parent.parent.parent / Path(\"workspace\") / Path(\"gpt-pilot-test\"))\r\n\"\"\"\nscip-python python python-stdlib 3.11 pathlib/Path#: undefined\nscip-python python python-stdlib 3.11 pathlib/Path#: undefined\nscip-python python python-stdlib 3.11 pathlib/Path#: undefined\nscip-python python temp indexer `pilot.helpers.test_project`/: undefined\nscip-python python python-stdlib 3.11 pathlib/PurePath#parent().: undefined\nscip-python python python-stdlib 3.11 pathlib/PurePath#parent().: undefined\nscip-python python python-stdlib 3.11 pathlib/PurePath#parent().: undefined\n\"\"\"\n\r\ndef create_project():\r\n    \"\"\"This code defines a class called \"Project\" that represents a software development project. It includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\"\"\"\n    pass\n\r\n\r\nclass TestProject:\r\n    \"\"\"The code defines a Python function that takes in a file path and returns the absolute path of the file. It uses a combination of string manipulation and conditional statements to handle different types of file paths and return the correct absolute path.\"\"\"\n    pass\n\r\n        # Also assert that File.insert was called with the expected arguments\r\n        # expected_file_data = {'app': project.app, 'path': test_data['path'], 'name': test_data['name'],\r\n        #                       'full_path': expected_saved_to}\r\n        # mock_file_insert.assert_called_once_with(**expected_file_data,\r\n\r\nclass TestProjectFileLists:\r\n    \"\"\"This code defines a class called `TestProjectFileLists` that contains three methods: `setup_method`, `test_get_directory_tree`, and `test_save_files_snapshot`. The first two methods are used for testing purposes, while the third method is used to save a snapshot of the files in a project.\"\"\"\n    pass\n","documentation":"The code defines a class called \"Project\" that represents a software development project, with functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks."}},{"key":"scip-python python temp indexer `pilot.helpers.test_project`/create_project().","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.test_project`/create_project().","language":"python","range":[9,0,22,18],"content":"def create_project():\r\n    project = Project({\r\n        'app_id': 'test-project',\r\n        'name': 'TestProject',\r\n        'app_type': ''\r\n    },\r\n        name='TestProject',\r\n        architecture=[],\r\n        user_stories=[]\r\n    )\r\n    project.set_root_path(test_root)\r\n    project.app = 'test'\r\n    project.current_step = 'test'\r\n    return project","file":"/pilot/helpers/test_Project.py","fileHash":"37fe43012059855b97b22dc9679c3d74432a892b7b5dec62c6a31febdbb100aa","hash":"90d172a3a65312c9337e83adb14922df299740c842aa36261650bfbfd5edfbf8","processedContent":"def create_project():\r\n    project = Project({\r #The code defines a class called \"Project\" that represents a software development project. It includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\n        'app_id': 'test-project',\r\n        'name': 'TestProject',\r\n        'app_type': ''\r\n    },\r\n        name='TestProject',\r\n        architecture=[],\r\n        user_stories=[]\r\n    )\r\n    project.set_root_path(test_root)\r\n    \"\"\"\n    scip-python python temp indexer `pilot.helpers.project`/Project#set_root_path().: This code sets the root path for a file system, allowing the program to access files and directories within that path.\n    scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n    \"\"\"\n    project.app = 'test'\r\n    project.current_step = 'test'\r #undefined\n    return project","documentation":"This code defines a class called \"Project\" that represents a software development project. It includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks."}},{"key":"scip-python python temp indexer `pilot.helpers.test_debugger`/test_debug().","attributes":{"range":[18,0,85,42],"symbol":"scip-python python temp indexer `pilot.helpers.test_debugger`/test_debug().","content":"@pytest.mark.uses_tokens\r\n@patch('pilot.helpers.AgentConvo.get_saved_development_step')\r\n@patch('pilot.helpers.AgentConvo.save_development_step')\r\n@patch('utils.questionary.get_saved_user_input')\r\n@patch('utils.questionary.save_user_input')\r\n@patch('helpers.cli.get_saved_command_run')\r\n@patch('helpers.cli.run_command')\r\n@patch('helpers.cli.save_command_run')\r\n# @patch('pilot.helpers.cli.execute_command', return_value=('', 'DONE', 0))\r\ndef test_debug(\r\n        # mock_execute_command,\r\n        mock_save_command, mock_run_command, mock_get_saved_command,\r\n        mock_save_input, mock_user_input, mock_save_step, mock_get_saved_step):\r\n    # Given\r\n    builtins.print, ipc_client_instance = get_custom_print({})\r\n    project = create_project()\r\n    project.current_step = 'coding'\r\n    developer = Developer(project)\r\n    project.developer = developer\r\n    convo = AgentConvo(developer)\r\n    convo.load_branch = lambda x: None\r\n\r\n    debugger = Debugger(developer)\r\n    # TODO: mock agent.project.developer.execute_task\r\n\r\n    # convo.messages.append()\r\n    convo.construct_and_add_message_from_prompt('dev_ops/ran_command.prompt', {\r\n        'cli_response': '''\r\nstderr:\r\n```\r\nnode:internal/modules/cjs/loader:1080\r\n  throw err;\r\n  ^\r\n\r\nError: Cannot find module 'mime'\r\nRequire stack:\r\n- /workspace/chat_app/node_modules/send/index.js\r\n- /workspace/chat_app/node_modules/express/lib/utils.js\r\n- /workspace/chat_app/node_modules/express/lib/application.js\r\n- /workspace/chat_app/node_modules/express/lib/express.js\r\n- /workspace/chat_app/node_modules/express/index.js\r\n- /workspace/chat_app/server.js\r\n    at Module._resolveFilename (node:internal/modules/cjs/loader:1077:15)\r\n    at Module._load (node:internal/modules/cjs/loader:922:27)\r\n    at Module.require (node:internal/modules/cjs/loader:1143:19)\r\n    at require (node:internal/modules/cjs/helpers:121:18)\r\n    at Object.<anonymous> (/workspace/chat_app/node_modules/send/index.js:24:12)\r\n    at Module._compile (node:internal/modules/cjs/loader:1256:14)\r\n    at Module._extensions..js (node:internal/modules/cjs/loader:1310:10)\r\n    at Module.load (node:internal/modules/cjs/loader:1119:32)\r\n    at Module._load (node:internal/modules/cjs/loader:960:12)\r\n```\r\nstdout:\r\n```\r\n> chat_app@1.0.0 start\r\n> node server.js\r\n```        \r\n'''\r\n    })\r\n\r\n    mock_questionary = MockQuestionary(['', ''])\r\n\r\n    with patch('utils.questionary.questionary', mock_questionary):\r\n        # When\r\n        result = debugger.debug(convo, command={'command': 'npm run start'}, is_root_task=True)\r\n\r\n        # Then\r\n        assert result == {'success': True}","file":"/pilot/helpers/test_Debugger.py","language":"python","fileHash":"c9a8c538b3a077070c51c272809a3a60edcab6314bb1c652a929dc6fc897c200","hash":"5b8244033f600534703da2c0d25438338915700dba341cffef464d50634fc500","processedContent":"@pytest.mark.uses_tokens\r\n@patch('pilot.helpers.AgentConvo.get_saved_development_step')\r\n@patch('pilot.helpers.AgentConvo.save_development_step')\r\n@patch('utils.questionary.get_saved_user_input')\r\n@patch('utils.questionary.save_user_input')\r\n@patch('helpers.cli.get_saved_command_run')\r\n@patch('helpers.cli.run_command')\r\n@patch('helpers.cli.save_command_run')\r\n# @patch('pilot.helpers.cli.execute_command', return_value=('', 'DONE', 0))\r\ndef test_debug(\r\n        # mock_execute_command,\r\n        mock_save_command, mock_run_command, mock_get_saved_command,\r\n        mock_save_input, mock_user_input, mock_save_step, mock_get_saved_step):\r\n    # Given\r\n    builtins.print, ipc_client_instance = get_custom_print({})\r #This code defines a function called `get_custom_print` that returns a tuple of two functions: `print_to_external_process` and `local_print`. The first function sends a message to an external process over a network connection, while the second function prints the message to the console.\n    project = create_project()\r #This code defines a class called \"Project\" that represents a software development project. It includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\n    project.current_step = 'coding'\r #undefined\n    developer = Developer(project)\r #The code defines a class called \"Developer\" that represents a person working on a specific project. It has functions for implementing tasks, running commands, and handling human intervention during the development process.\n    project.developer = developer\r #undefined\n    convo = AgentConvo(developer)\r #This code defines a class called `AgentConvo` that represents a conversation with an agent. It includes functions for sending and receiving messages, as well as formatting and rendering prompts. The code also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n    convo.load_branch = lambda x: None\r #This code defines a function called `load_branch` that loads a branch of messages from a dictionary called `branches`. It also copies the messages from the loaded branch to a variable called `messages`. If the `reload_files` parameter is set to `True`, it replaces the files with the new messages.\n\r\n    debugger = Debugger(developer)\r #This code defines a class called `Debugger` that allows developers to debug conversations with their chatbot. It takes in a conversation object and a set of parameters, and then uses the LLM to generate a plan for debugging the conversation. The developer can then execute the plan and receive feedback on whether the debugging was successful or not.\n    # TODO: mock agent.project.developer.execute_task\r\n\r\n    # convo.messages.append()\r\n    convo.construct_and_add_message_from_prompt('dev_ops/ran_command.prompt', {\r #This code defines a function called `construct_and_add_message_from_prompt` that retrieves and renders a prompt template based on the provided name, and then appends the rendered content to a list of messages.\n        'cli_response': '''\r\nstderr:\r\n```\r\nnode:internal/modules/cjs/loader:1080\r\n  throw err;\r\n  ^\r\n\r\nError: Cannot find module 'mime'\r\nRequire stack:\r\n- /workspace/chat_app/node_modules/send/index.js\r\n- /workspace/chat_app/node_modules/express/lib/utils.js\r\n- /workspace/chat_app/node_modules/express/lib/application.js\r\n- /workspace/chat_app/node_modules/express/lib/express.js\r\n- /workspace/chat_app/node_modules/express/index.js\r\n- /workspace/chat_app/server.js\r\n    at Module._resolveFilename (node:internal/modules/cjs/loader:1077:15)\r\n    at Module._load (node:internal/modules/cjs/loader:922:27)\r\n    at Module.require (node:internal/modules/cjs/loader:1143:19)\r\n    at require (node:internal/modules/cjs/helpers:121:18)\r\n    at Object.<anonymous> (/workspace/chat_app/node_modules/send/index.js:24:12)\r\n    at Module._compile (node:internal/modules/cjs/loader:1256:14)\r\n    at Module._extensions..js (node:internal/modules/cjs/loader:1310:10)\r\n    at Module.load (node:internal/modules/cjs/loader:1119:32)\r\n    at Module._load (node:internal/modules/cjs/loader:960:12)\r\n```\r\nstdout:\r\n```\r\n> chat_app@1.0.0 start\r\n> node server.js\r\n```        \r\n'''\r\n    })\r\n\r\n    mock_questionary = MockQuestionary(['', ''])\r #This code defines a class called \"MockQuestionary\" that allows users to ask questions and receive answers in a mock interview setting. The class has several methods, including \"__init__\", \"text\", \"ask\", and \"unsafe_ask\". The purpose of the code is to provide a way to simulate a user asking questions and receiving answers in a mock interview setting.\n\r\n    with patch('utils.questionary.questionary', mock_questionary):\r\n        # When\r\n        result = debugger.debug(convo, command={'command': 'npm run start'}, is_root_task=True)\r #This code defines a function called `debug` that takes a conversation object and various other parameters, and then uses the LLM to generate a debug plan for the user. The function then sends the debug plan to the user and waits for their response, which is then used to update the debug plan and continue debugging until the issue is resolved or the user decides to stop.\n\r\n        # Then\r\n        assert result == {'success': True}","documentation":"The code defines a class called \"Debugger\" that allows developers to debug conversations with their chatbot. It uses the LLM to generate a plan for debugging the conversation and then sends it to the user for approval."}},{"key":"scip-python python temp indexer `pilot.helpers.test_debugger`/test_debug_need_to_see_output().","attributes":{"range":[88,0,150,89],"symbol":"scip-python python temp indexer `pilot.helpers.test_debugger`/test_debug_need_to_see_output().","content":"@patch('helpers.AgentConvo.get_saved_development_step')\r\n@patch('helpers.AgentConvo.create_gpt_chat_completion')\r\n@patch('helpers.AgentConvo.save_development_step')\r\ndef test_debug_need_to_see_output(mock_save_step, mock_get_completion, mock_get_step):\r\n    # Given\r\n    builtins.print, ipc_client_instance = get_custom_print({})\r\n    project = create_project()\r\n    project.current_step = 'coding'\r\n    developer = Developer(project)\r\n    # hard-wired command output\r\n    developer.step_command_run = MagicMock()\r\n    developer.step_command_run.side_effect = [\r\n        {\r\n            'cli_response': 'stdout:\\n```\\n' + json.dumps({'dependencies': {'something': '0.1.2'}}) + '\\n```\\n',\r\n            'success': True,\r\n        }, {\r\n            'cli_response': 'app is running...',\r\n            'success': True,\r\n        }\r\n    ]\r\n    developer.step_test = MagicMock()\r\n    developer.step_test.return_value = {'success': True}\r\n    project.developer = developer\r\n    debugger = Debugger(developer)\r\n    convo = AgentConvo(developer)\r\n    convo.load_branch = MagicMock()\r\n    convo.replace_files = MagicMock()\r\n    # hard-wired LLM responses, 1st response asks to see output\r\n    mock_get_completion.side_effect = [{'text': json.dumps(response)} for response in [{\r\n        'thoughts': 'Hmmm, testing',\r\n        'reasoning': 'I need to see the output of the command',\r\n        'steps': [\r\n            {\r\n                'type': 'command',\r\n                'command': 'cat package.json',\r\n                'need_to_see_output': True\r\n            }, {\r\n                'type': 'command',\r\n                'command': 'npm install something',\r\n            }\r\n        ]\r\n    }, {\r\n        'thoughts': 'It is already installed',\r\n        'reasoning': 'I installed it earlier',\r\n        'steps': [\r\n            {\r\n                'type': 'command',\r\n                'command': 'npm start',\r\n                'command_id': 'app',\r\n            }\r\n        ]\r\n    }]]\r\n\r\n    # When\r\n    debugger.debug(convo, command={'command': 'npm run start'}, is_root_task=True)\r\n\r\n    # Then we call the LLM twice, second time to show the output\r\n    assert mock_get_completion.call_count == 2\r\n    prompt = mock_get_completion.call_args_list[1].args[0][2]['content']\r\n    assert prompt.startswith('{\"thoughts\": \"It is already installed\", \"reasoning\": \"I installed it earlier\", \"steps\": [{\"type\": \"command\", \"command\": \"npm start\", \"command_id\": \"app\"}]}'.lstrip())\r\n    # And eventually we start the app\r\n    assert developer.step_command_run.call_count == 2\r\n    assert developer.step_command_run.call_args_list[1].args[1]['command'] == 'npm start'","file":"/pilot/helpers/test_Debugger.py","language":"python","fileHash":"c9a8c538b3a077070c51c272809a3a60edcab6314bb1c652a929dc6fc897c200","hash":"38e8a235893ab7a4cb34b50b83005df31dfa1c53061a1f5030ed9b6184d9a832","processedContent":"@patch('helpers.AgentConvo.get_saved_development_step')\r\n@patch('helpers.AgentConvo.create_gpt_chat_completion')\r\n@patch('helpers.AgentConvo.save_development_step')\r\ndef test_debug_need_to_see_output(mock_save_step, mock_get_completion, mock_get_step):\r\n    # Given\r\n    builtins.print, ipc_client_instance = get_custom_print({})\r #This code defines a function called `get_custom_print` that returns a tuple of two functions: `print_to_external_process` and `local_print`. The first function sends a message to an external process over a network connection, while the second function prints the message to the console.\n    project = create_project()\r #This code defines a class called \"Project\" that represents a software development project. It includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\n    project.current_step = 'coding'\r #undefined\n    developer = Developer(project)\r #The code defines a class called \"Developer\" that represents a person working on a specific project. It has functions for implementing tasks, running commands, and handling human intervention during the development process.\n    # hard-wired command output\r\n    developer.step_command_run = MagicMock()\r #This code defines a function called `run_command_until_success` that runs a command until it succeeds or reaches a timeout. It also checks if the command was successful by checking the exit code of the process that ran the command.\n    developer.step_command_run.side_effect = [\r #This code defines a function called `run_command_until_success` that runs a command until it succeeds or reaches a timeout. It also checks if the command was successful by checking the exit code of the process that ran the command.\n        {\r\n            'cli_response': 'stdout:\\n```\\n' + json.dumps({'dependencies': {'something': '0.1.2'}}) + '\\n```\\n',\r\n            \"\"\"\n            scip-python python python-stdlib 3.11 json/__init__:: undefined\n            scip-python python python-stdlib 3.11 json/dumps().: undefined\n            \"\"\"\n            'success': True,\r\n        }, {\r\n            'cli_response': 'app is running...',\r\n            'success': True,\r\n        }\r\n    ]\r\n    developer.step_test = MagicMock()\r #This code defines a function called `step_test` that takes in a command and executes it in a subprocess. It also checks if a process with the same ID is running, and if so, it terminates that process. The function then captures the output of the command in two queues and returns a dictionary containing the success status and the CLI response.\n    developer.step_test.return_value = {'success': True}\r #This code defines a function called `step_test` that takes in a command and executes it in a subprocess. It also checks if a process with the same ID is running, and if so, it terminates that process. The function then captures the output of the command in two queues and returns a dictionary containing the success status and the CLI response.\n    project.developer = developer\r #undefined\n    debugger = Debugger(developer)\r #This code defines a class called `Debugger` that allows developers to debug conversations with their chatbot. It takes in a conversation object and a set of parameters, and then uses the LLM to generate a plan for debugging the conversation. The developer can then execute the plan and receive feedback on whether the debugging was successful or not.\n    convo = AgentConvo(developer)\r #This code defines a class called `AgentConvo` that represents a conversation with an agent. It includes functions for sending and receiving messages, as well as formatting and rendering prompts. The code also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n    convo.load_branch = MagicMock()\r #This code defines a function called `load_branch` that loads a branch of messages from a dictionary called `branches`. It also copies the messages from the loaded branch to a variable called `messages`. If the `reload_files` parameter is set to `True`, it replaces the files with the new messages.\n    convo.replace_files = MagicMock()\r #This code replaces file content in a project based on user messages. It retrieves all coded files from the project, loops through each message, and if the message role is \"user\", it replaces the file content with the new content.\n    # hard-wired LLM responses, 1st response asks to see output\r\n    mock_get_completion.side_effect = [{'text': json.dumps(response)} for response in [{\r\n    \"\"\"\n    scip-python python python-stdlib 3.11 json/__init__:: undefined\n    scip-python python python-stdlib 3.11 json/dumps().: undefined\n    \"\"\"\n        'thoughts': 'Hmmm, testing',\r\n        'reasoning': 'I need to see the output of the command',\r\n        'steps': [\r\n            {\r\n                'type': 'command',\r\n                'command': 'cat package.json',\r\n                'need_to_see_output': True\r\n            }, {\r\n                'type': 'command',\r\n                'command': 'npm install something',\r\n            }\r\n        ]\r\n    }, {\r\n        'thoughts': 'It is already installed',\r\n        'reasoning': 'I installed it earlier',\r\n        'steps': [\r\n            {\r\n                'type': 'command',\r\n                'command': 'npm start',\r\n                'command_id': 'app',\r\n            }\r\n        ]\r\n    }]]\r\n\r\n    # When\r\n    debugger.debug(convo, command={'command': 'npm run start'}, is_root_task=True)\r #This code defines a function called `debug` that takes a conversation object and various other parameters, and then uses the LLM to generate a debug plan for the user. The function then sends the debug plan to the user and waits for their response, which is then used to update the debug plan and continue debugging until the issue is resolved or the user decides to stop.\n\r\n    # Then we call the LLM twice, second time to show the output\r\n    assert mock_get_completion.call_count == 2\r\n    prompt = mock_get_completion.call_args_list[1].args[0][2]['content']\r\n    assert prompt.startswith('{\"thoughts\": \"It is already installed\", \"reasoning\": \"I installed it earlier\", \"steps\": [{\"type\": \"command\", \"command\": \"npm start\", \"command_id\": \"app\"}]}'.lstrip())\r\n    # And eventually we start the app\r\n    assert developer.step_command_run.call_count == 2\r #This code defines a function called `run_command_until_success` that runs a command until it succeeds or reaches a timeout. It also checks if the command was successful by checking the exit code of the process that ran the command.\n    assert developer.step_command_run.call_args_list[1].args[1]['command'] == 'npm start'","documentation":"The code defines a class called `Debugger` that allows developers to debug conversations with their chatbot. It uses the LLM to generate a plan for debugging the conversation, and then sends the plan to the user for approval. The developer can then execute the plan and receive feedback on whether the debugging was successful or not."}},{"key":"scip-python python temp indexer `pilot.helpers.test_debugger`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.test_debugger`/__init__:","range":[0,0,151,0],"content":"import builtins\r\nimport json\r\n\r\nimport pytest\r\nfrom unittest.mock import patch, MagicMock\r\nfrom dotenv import load_dotenv\r\n\r\nload_dotenv()\r\nfrom utils.custom_print import get_custom_print\r\nfrom helpers.agents.Developer import Developer\r\nfrom helpers.AgentConvo import AgentConvo\r\nfrom helpers.Debugger import Debugger\r\nfrom helpers.test_Project import create_project\r\nfrom test.mock_questionary import MockQuestionary\r\n\r\n\r\n################## NOTE: this test needs to be ran in debug with breakpoints ##################\r\n\r\n@pytest.mark.uses_tokens\r\n@patch('pilot.helpers.AgentConvo.get_saved_development_step')\r\n@patch('pilot.helpers.AgentConvo.save_development_step')\r\n@patch('utils.questionary.get_saved_user_input')\r\n@patch('utils.questionary.save_user_input')\r\n@patch('helpers.cli.get_saved_command_run')\r\n@patch('helpers.cli.run_command')\r\n@patch('helpers.cli.save_command_run')\r\n# @patch('pilot.helpers.cli.execute_command', return_value=('', 'DONE', 0))\r\ndef test_debug(\r\n        # mock_execute_command,\r\n        mock_save_command, mock_run_command, mock_get_saved_command,\r\n        mock_save_input, mock_user_input, mock_save_step, mock_get_saved_step):\r\n    # Given\r\n    builtins.print, ipc_client_instance = get_custom_print({})\r\n    project = create_project()\r\n    project.current_step = 'coding'\r\n    developer = Developer(project)\r\n    project.developer = developer\r\n    convo = AgentConvo(developer)\r\n    convo.load_branch = lambda x: None\r\n\r\n    debugger = Debugger(developer)\r\n    # TODO: mock agent.project.developer.execute_task\r\n\r\n    # convo.messages.append()\r\n    convo.construct_and_add_message_from_prompt('dev_ops/ran_command.prompt', {\r\n        'cli_response': '''\r\nstderr:\r\n```\r\nnode:internal/modules/cjs/loader:1080\r\n  throw err;\r\n  ^\r\n\r\nError: Cannot find module 'mime'\r\nRequire stack:\r\n- /workspace/chat_app/node_modules/send/index.js\r\n- /workspace/chat_app/node_modules/express/lib/utils.js\r\n- /workspace/chat_app/node_modules/express/lib/application.js\r\n- /workspace/chat_app/node_modules/express/lib/express.js\r\n- /workspace/chat_app/node_modules/express/index.js\r\n- /workspace/chat_app/server.js\r\n    at Module._resolveFilename (node:internal/modules/cjs/loader:1077:15)\r\n    at Module._load (node:internal/modules/cjs/loader:922:27)\r\n    at Module.require (node:internal/modules/cjs/loader:1143:19)\r\n    at require (node:internal/modules/cjs/helpers:121:18)\r\n    at Object.<anonymous> (/workspace/chat_app/node_modules/send/index.js:24:12)\r\n    at Module._compile (node:internal/modules/cjs/loader:1256:14)\r\n    at Module._extensions..js (node:internal/modules/cjs/loader:1310:10)\r\n    at Module.load (node:internal/modules/cjs/loader:1119:32)\r\n    at Module._load (node:internal/modules/cjs/loader:960:12)\r\n```\r\nstdout:\r\n```\r\n> chat_app@1.0.0 start\r\n> node server.js\r\n```        \r\n'''\r\n    })\r\n\r\n    mock_questionary = MockQuestionary(['', ''])\r\n\r\n    with patch('utils.questionary.questionary', mock_questionary):\r\n        # When\r\n        result = debugger.debug(convo, command={'command': 'npm run start'}, is_root_task=True)\r\n\r\n        # Then\r\n        assert result == {'success': True}\r\n\r\n\r\n@patch('helpers.AgentConvo.get_saved_development_step')\r\n@patch('helpers.AgentConvo.create_gpt_chat_completion')\r\n@patch('helpers.AgentConvo.save_development_step')\r\ndef test_debug_need_to_see_output(mock_save_step, mock_get_completion, mock_get_step):\r\n    # Given\r\n    builtins.print, ipc_client_instance = get_custom_print({})\r\n    project = create_project()\r\n    project.current_step = 'coding'\r\n    developer = Developer(project)\r\n    # hard-wired command output\r\n    developer.step_command_run = MagicMock()\r\n    developer.step_command_run.side_effect = [\r\n        {\r\n            'cli_response': 'stdout:\\n```\\n' + json.dumps({'dependencies': {'something': '0.1.2'}}) + '\\n```\\n',\r\n            'success': True,\r\n        }, {\r\n            'cli_response': 'app is running...',\r\n            'success': True,\r\n        }\r\n    ]\r\n    developer.step_test = MagicMock()\r\n    developer.step_test.return_value = {'success': True}\r\n    project.developer = developer\r\n    debugger = Debugger(developer)\r\n    convo = AgentConvo(developer)\r\n    convo.load_branch = MagicMock()\r\n    convo.replace_files = MagicMock()\r\n    # hard-wired LLM responses, 1st response asks to see output\r\n    mock_get_completion.side_effect = [{'text': json.dumps(response)} for response in [{\r\n        'thoughts': 'Hmmm, testing',\r\n        'reasoning': 'I need to see the output of the command',\r\n        'steps': [\r\n            {\r\n                'type': 'command',\r\n                'command': 'cat package.json',\r\n                'need_to_see_output': True\r\n            }, {\r\n                'type': 'command',\r\n                'command': 'npm install something',\r\n            }\r\n        ]\r\n    }, {\r\n        'thoughts': 'It is already installed',\r\n        'reasoning': 'I installed it earlier',\r\n        'steps': [\r\n            {\r\n                'type': 'command',\r\n                'command': 'npm start',\r\n                'command_id': 'app',\r\n            }\r\n        ]\r\n    }]]\r\n\r\n    # When\r\n    debugger.debug(convo, command={'command': 'npm run start'}, is_root_task=True)\r\n\r\n    # Then we call the LLM twice, second time to show the output\r\n    assert mock_get_completion.call_count == 2\r\n    prompt = mock_get_completion.call_args_list[1].args[0][2]['content']\r\n    assert prompt.startswith('{\"thoughts\": \"It is already installed\", \"reasoning\": \"I installed it earlier\", \"steps\": [{\"type\": \"command\", \"command\": \"npm start\", \"command_id\": \"app\"}]}'.lstrip())\r\n    # And eventually we start the app\r\n    assert developer.step_command_run.call_count == 2\r\n    assert developer.step_command_run.call_args_list[1].args[1]['command'] == 'npm start'\r\n","file":"/pilot/helpers/test_Debugger.py","language":"python","fileHash":"c9a8c538b3a077070c51c272809a3a60edcab6314bb1c652a929dc6fc897c200","hash":"c9a8c538b3a077070c51c272809a3a60edcab6314bb1c652a929dc6fc897c200","processedContent":"import builtins\r\nimport json\r #undefined\n\r\nimport pytest\r\nfrom unittest.mock import patch, MagicMock\r #undefined\nfrom dotenv import load_dotenv\r\n\"\"\"\nscip-python python python-dotenv 1.0.0 dotenv/__init__:: undefined\nscip-python python python-dotenv 1.0.0 `dotenv.main`/load_dotenv().: undefined\n\"\"\"\n\r\nload_dotenv()\r #undefined\nfrom utils.custom_print import get_custom_print\r\n\"\"\"\nscip-python python temp indexer `pilot.utils.custom_print`/__init__:: The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.utils.custom_print`/get_custom_print().: This code defines a function called `get_custom_print` that returns a tuple of two functions: `print_to_external_process` and `local_print`. The first function sends a message to an external process over a network connection, while the second function prints the message to the console.\n\"\"\"\nfrom helpers.agents.Developer import Developer\r\n\"\"\"\nscip-python python temp indexer `pilot.helpers.agents.developer`/__init__:: The code defines a class called \"Developer\" that represents a person working on a specific project, and includes functions for implementing tasks, running commands, and handling human intervention during the development process.\nscip-python python temp indexer `pilot.helpers.agents.developer`/Developer#: The code defines a class called \"Developer\" that represents a person working on a specific project. It has functions for implementing tasks, running commands, and handling human intervention during the development process.\n\"\"\"\nfrom helpers.AgentConvo import AgentConvo\r\n\"\"\"\nscip-python python temp indexer `pilot.helpers.agentconvo`/__init__:: The code defines a class called `AgentConvo` that represents a conversation with an agent, including functions for sending and receiving messages, formatting and rendering prompts, and error handling for GPT model token limits.\nscip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#: This code defines a class called `AgentConvo` that represents a conversation with an agent. It includes functions for sending and receiving messages, as well as formatting and rendering prompts. The code also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n\"\"\"\nfrom helpers.Debugger import Debugger\r\n\"\"\"\nscip-python python temp indexer `pilot.helpers.debugger`/__init__:: The code defines a class called `Debugger` that allows developers to debug conversations with their chatbot by generating a plan for debugging using the LLM and receiving feedback on whether the debugging was successful or not.\nscip-python python temp indexer `pilot.helpers.debugger`/Debugger#: This code defines a class called `Debugger` that allows developers to debug conversations with their chatbot. It takes in a conversation object and a set of parameters, and then uses the LLM to generate a plan for debugging the conversation. The developer can then execute the plan and receive feedback on whether the debugging was successful or not.\n\"\"\"\nfrom helpers.test_Project import create_project\r\n\"\"\"\nscip-python python temp indexer `pilot.helpers.test_project`/__init__:: The code defines a class called \"Project\" that represents a software development project, with functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\nscip-python python temp indexer `pilot.helpers.test_project`/create_project().: This code defines a class called \"Project\" that represents a software development project. It includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\n\"\"\"\nfrom test.mock_questionary import MockQuestionary\r\n\"\"\"\nscip-python python temp indexer `pilot.test.mock_questionary`/__init__:: This code defines a class called \"MockQuestionary\" that allows users to ask questions and receive answers in a mock interview setting.\nscip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#: This code defines a class called \"MockQuestionary\" that allows users to ask questions and receive answers in a mock interview setting. The class has several methods, including \"__init__\", \"text\", \"ask\", and \"unsafe_ask\". The purpose of the code is to provide a way to simulate a user asking questions and receiving answers in a mock interview setting.\n\"\"\"\n\r\n\r\n################## NOTE: this test needs to be ran in debug with breakpoints ##################\r\n\r\n@pytest.mark.uses_tokens\r\n@patch('pilot.helpers.AgentConvo.get_saved_development_step')\r\n@patch('pilot.helpers.AgentConvo.save_development_step')\r\n@patch('utils.questionary.get_saved_user_input')\r\n@patch('utils.questionary.save_user_input')\r\n@patch('helpers.cli.get_saved_command_run')\r\n@patch('helpers.cli.run_command')\r\n@patch('helpers.cli.save_command_run')\r\n# @patch('pilot.helpers.cli.execute_command', return_value=('', 'DONE', 0))\r\ndef test_debug(\r\n        \"\"\"The code defines a class called \"Debugger\" that allows developers to debug conversations with their chatbot. It uses the LLM to generate a plan for debugging the conversation and then sends it to the user for approval.\"\"\"\n        pass\n\r\n\r\n@patch('helpers.AgentConvo.get_saved_development_step')\r\n@patch('helpers.AgentConvo.create_gpt_chat_completion')\r\n@patch('helpers.AgentConvo.save_development_step')\r\ndef test_debug_need_to_see_output(mock_save_step, mock_get_completion, mock_get_step):\r\n    \"\"\"The code defines a class called `Debugger` that allows developers to debug conversations with their chatbot. It uses the LLM to generate a plan for debugging the conversation, and then sends the plan to the user for approval. The developer can then execute the plan and receive feedback on whether the debugging was successful or not.\"\"\"\n    pass\n","documentation":"The code defines a class called `Debugger` that allows developers to debug conversations with their chatbot by generating a plan for debugging using the LLM and receiving feedback on whether the debugging was successful or not."}},{"key":"scip-python python temp indexer `pilot.helpers.project`/Project#current_step.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.project`/Project#current_step.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_command_run().","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_command_run().","language":"python","range":[181,4,199,93],"content":"def step_command_run(self, convo, step, i, success_with_cli_response=False):\n        logger.info('Running command: %s', step['command'])\n        # TODO fix this - the problem is in GPT response that sometimes doesn't return the correct JSON structure\n        if isinstance(step['command'], str):\n            data = step\n        else:\n            data = step['command']\n        # TODO END\n        additional_message = ''  # 'Let\\'s start with the step #0:\\n' if i == 0 else f'So far, steps { \", \".join(f\"#{j}\" for j in range(i+1)) } are finished so let\\'s do step #{i + 1} now.\\n'\n\n        command_id = data['command_id'] if 'command_id' in data else None\n        success_message = data['success_message'] if 'success_message' in data else None\n\n        return run_command_until_success(convo, data['command'],\n                                         timeout=data['timeout'],\n                                         command_id=command_id,\n                                         success_message=success_message,\n                                         additional_message=additional_message,\n                                         success_with_cli_response=success_with_cli_response)","file":"/pilot/helpers/agents/Developer.py","fileHash":"0d85d908cc038e7de0ad336ba7e9ed864822bd6914b09ac5d9e850fd95263181","hash":"ba00e5b81a30e263771fdec22e0a78d3ff17f627aaab76621203e54a4fc16bf6","processedContent":"def step_command_run(self, convo, step, i, success_with_cli_response=False):\n        logger.info('Running command: %s', step['command'])\n        \"\"\"\n        scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n        scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n        \"\"\"\n        # TODO fix this - the problem is in GPT response that sometimes doesn't return the correct JSON structure\n        if isinstance(step['command'], str):\n            data = step\n        else:\n            data = step['command']\n        # TODO END\n        additional_message = ''  # 'Let\\'s start with the step #0:\\n' if i == 0 else f'So far, steps { \", \".join(f\"#{j}\" for j in range(i+1)) } are finished so let\\'s do step #{i + 1} now.\\n'\n\n        command_id = data['command_id'] if 'command_id' in data else None\n        success_message = data['success_message'] if 'success_message' in data else None\n\n        return run_command_until_success(convo, data['command'], #This code defines a function called `run_command_until_success` that runs a command until it succeeds or reaches a timeout. It also checks if the command was successful by checking the exit code of the process that ran the command.\n                                         timeout=data['timeout'],\n                                         command_id=command_id,\n                                         success_message=success_message,\n                                         additional_message=additional_message,\n                                         success_with_cli_response=success_with_cli_response)","documentation":"This code defines a function called `run_command_until_success` that runs a command until it succeeds or reaches a timeout. It also checks if the command was successful by checking the exit code of the process that ran the command."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_test().","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_test().","language":"python","range":[256,4,278,25],"content":"def step_test(self, convo, test_command):\n        # TODO: don't re-run if it's already running\n        should_rerun_command = convo.send_message('dev_ops/should_rerun_command.prompt', test_command)\n        if should_rerun_command == 'NO':\n            return {'success': True}\n        elif should_rerun_command == 'YES':\n            logger.info('Re-running test command: %s', test_command)\n            cli_response, llm_response = execute_command_and_check_cli_response(convo, test_command)\n            logger.info('After running command llm_response: ' + llm_response)\n            if llm_response == 'NEEDS_DEBUGGING':\n                print(color_red('Got incorrect CLI response:'))\n                print(cli_response)\n                print(color_red('-------------------'))\n\n            result = {\n                'success': llm_response in [\"DONE\", \"SKIP\"],\n                'cli_response': cli_response\n            }\n            if cli_response is None:\n                result['user_input'] = llm_response\n            else:\n                result['llm_response'] = llm_response\n            return result","file":"/pilot/helpers/agents/Developer.py","fileHash":"0d85d908cc038e7de0ad336ba7e9ed864822bd6914b09ac5d9e850fd95263181","hash":"06d205cf2c13cf964a7cb9bad29ab97e7b7261bf5d739bc357d40d219c67c138","processedContent":"def step_test(self, convo, test_command):\n        # TODO: don't re-run if it's already running\n        should_rerun_command = convo.send_message('dev_ops/should_rerun_command.prompt', test_command)\n        if should_rerun_command == 'NO':\n            return {'success': True}\n        elif should_rerun_command == 'YES':\n            logger.info('Re-running test command: %s', test_command)\n            \"\"\"\n            scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n            scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n            \"\"\"\n            cli_response, llm_response = execute_command_and_check_cli_response(convo, test_command) #This code defines a function called `execute_command_and_check_cli_response` that takes in a command, project, and other parameters. It executes the command in a subprocess and captures its output in two queues. The function also checks if a process with the same ID is running, and if so, it terminates that process.\n            logger.info('After running command llm_response: ' + llm_response)\n            \"\"\"\n            scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n            scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n            \"\"\"\n            if llm_response == 'NEEDS_DEBUGGING':\n                print(color_red('Got incorrect CLI response:')) #undefined\n                print(cli_response)\n                print(color_red('-------------------')) #undefined\n\n            result = {\n                'success': llm_response in [\"DONE\", \"SKIP\"],\n                'cli_response': cli_response\n            }\n            if cli_response is None:\n                result['user_input'] = llm_response\n            else:\n                result['llm_response'] = llm_response\n            return result","documentation":"This code defines a function called `step_test` that takes in a command and executes it in a subprocess. It also checks if a process with the same ID is running, and if so, it terminates that process. The function then captures the output of the command in two queues and returns a dictionary containing the success status and the CLI response."}},{"key":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#","attributes":{"range":[25,0,345,83],"symbol":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#","content":"class TestProject:\r\n    @pytest.mark.parametrize('file_path, file_name, expected', [\r\n        ('file.txt', 'file.txt', f'{test_root}/file.txt'),\r\n        ('', 'file.txt', f'{test_root}/file.txt'),\r\n        ('path/', 'file.txt', f'{test_root}/path/file.txt'),\r\n        ('path/to/', 'file.txt', f'{test_root}/path/to/file.txt'),\r\n        ('path/to/file.txt', 'file.txt', f'{test_root}/path/to/file.txt'),\r\n        ('./path/to/file.txt', 'to/file.txt', f'{test_root}/path/to/file.txt'),\r\n        ('./package.json', 'package.json', f'{test_root}/package.json'),\r\n    ])\r\n    def test_get_full_path(self, file_path, file_name, expected):\r\n        # Given\r\n        project = create_project()\r\n\r\n        # When\r\n        relative_path, absolute_path = project.get_full_file_path(file_path, file_name)\r\n\r\n        # Then\r\n        assert absolute_path == str(Path(expected))\r\n\r\n    @pytest.mark.parametrize(\r\n        (\"file_path\", \"file_name\", \"expected_path\", \"expected_absolute_path\"), [\r\n        ('', '', '/', f'{test_root}/'),\r\n        ('', '.', '/', f'{test_root}/'),\r\n        ('', '.env', '/', f'{test_root}/.env'),\r\n        ('', '~/', '/', f'{test_root}/'),\r\n        ('', f'{test_root}/', '/', f'{test_root}/'),\r\n        ('', f'{test_root}/folder1', '/folder1', f'{test_root}/folder1/'),\r\n        ('', f'{test_root}/Folder With Space/', '/Folder With Space', f'{test_root}/Folder With Space/'),\r\n        ('', 'server.js', '/', f'{test_root}/server.js'),\r\n        ('', 'folder1', '/folder1', f'{test_root}/folder1/'),\r\n        ('', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('', f'{test_root}/Folder With Space/server.js', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        ('', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('', './folder1/server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('.', '', '/', f'{test_root}/'),\r\n        ('.', '.', '/', f'{test_root}/'),\r\n        ('.', '.env', '/', f'{test_root}/.env'),\r\n        ('.', '~/', '/', f'{test_root}/'),\r\n        ('.', f'{test_root}/', '/', f'{test_root}/'),\r\n        ('.', f'{test_root}/folder1', '/folder1', f'{test_root}/folder1/'),\r\n        ('.', f'{test_root}/Folder With Space/', '/Folder With Space', f'{test_root}/Folder With Space/'),\r\n        ('.', 'server.js', '/', f'{test_root}/server.js'),\r\n        ('.', 'folder1', '/folder1', f'{test_root}/folder1/'),\r\n        ('.', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('.', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('.', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('.', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('.', f'{test_root}/Folder With Space/server.js', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        ('.', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('.', './folder1/server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('.env', '', '/', f'{test_root}/.env'),\r\n        ('.env', '.', '/', f'{test_root}/.env'),\r\n        ('.env', '.env', '/', f'{test_root}/.env'),\r\n        ('.env', '~/', '/', f'{test_root}/.env'),\r\n        ('.env', f'{test_root}/', '/', f'{test_root}/.env'),\r\n        ('.env', f'{test_root}/folder1', '/folder1', f'{test_root}/folder1/.env'),\r\n        ('.env', f'{test_root}/Folder With Space/', '/Folder With Space', f'{test_root}/Folder With Space/.env'),\r\n        ('.env', 'server.js', '/', f'{test_root}/server.js'),\r\n        ('.env', 'folder1', '/folder1', f'{test_root}/folder1/.env'),\r\n        ('.env', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/.env'),\r\n        ('.env', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/.env'),\r\n        ('.env', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('.env', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('.env', f'{test_root}/Folder With Space/server.js', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        ('.env', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('.env', './folder1/server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('~/', '', '/', f'{test_root}/'),\r\n        ('~/', '.', '/', f'{test_root}/'),\r\n        ('~/', '.env', '/', f'{test_root}/.env'),\r\n        ('~/', '~/', '/', f'{test_root}/'),\r\n        ('~/', f'{test_root}/', '/', f'{test_root}/'),\r\n        ('~/', f'{test_root}/folder1', '/folder1', f'{test_root}/folder1/'),\r\n        ('~/', f'{test_root}/Folder With Space/', '/Folder With Space', f'{test_root}/Folder With Space/'),\r\n        ('~/', 'server.js', '/', f'{test_root}/server.js'),\r\n        ('~/', 'folder1', '/folder1', f'{test_root}/folder1/'),\r\n        ('~/', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('~/', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('~/', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/', f'{test_root}/Folder With Space/server.js', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        ('~/', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/', './folder1/server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n        (f'{test_root}/', '', '/', f'{test_root}/'),\r\n        (f'{test_root}/', '.', '/', f'{test_root}/'),\r\n        (f'{test_root}/', '.env', '/', f'{test_root}/.env'),\r\n        (f'{test_root}/', '~/', '/', f'{test_root}/'),\r\n        (f'{test_root}/', f'{test_root}/', '/', f'{test_root}/'),\r\n        (f'{test_root}/', f'{test_root}/folder1', '/folder1', f'{test_root}/folder1/'),\r\n        (f'{test_root}/', f'{test_root}/Folder With Space/', '/Folder With Space', f'{test_root}/Folder With Space/'),\r\n        (f'{test_root}/', 'server.js', '/', f'{test_root}/server.js'),\r\n        (f'{test_root}/', 'folder1', '/folder1', f'{test_root}/folder1/'),\r\n        (f'{test_root}/', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        (f'{test_root}/', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        (f'{test_root}/', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/', f'{test_root}/Folder With Space/server.js', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        (f'{test_root}/', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/', './folder1/server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n        (f'{test_root}/folder1', '', '/folder1', f'{test_root}/folder1/'),\r\n        (f'{test_root}/folder1', '.', '/folder1', f'{test_root}/folder1/'),\r\n        (f'{test_root}/folder1', '.env', '/folder1', f'{test_root}/folder1/.env'),\r\n        (f'{test_root}/folder1', '~/', '/folder1', f'{test_root}/folder1/'),\r\n        (f'{test_root}/folder1', f'{test_root}/', '/folder1', f'{test_root}/folder1/'),\r\n        (f'{test_root}/folder1', f'{test_root}/folder1', '/folder1', f'{test_root}/folder1/'),\r\n        (f'{test_root}/folder1', f'{test_root}/Folder With Space/', '/folder1/Folder With Space', f'{test_root}/folder1/Folder With Space/'),\r\n        (f'{test_root}/folder1', 'server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n        (f'{test_root}/folder1', 'folder1', '/folder1', f'{test_root}/folder1/'),\r\n        (f'{test_root}/folder1', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        (f'{test_root}/folder1', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        (f'{test_root}/folder1', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1', f'{test_root}/Folder With Space/server.js', '/folder1/Folder With Space', f'{test_root}/folder1/Folder With Space/server.js'),\r\n        (f'{test_root}/folder1', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1', './folder1/server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n        (f'{test_root}/Folder With Space/', '', '/Folder With Space', f'{test_root}/Folder With Space/'),\r\n        (f'{test_root}/Folder With Space/', '.', '/Folder With Space', f'{test_root}/Folder With Space/'),\r\n        (f'{test_root}/Folder With Space/', '.env', '/Folder With Space', f'{test_root}/Folder With Space/.env'),\r\n        (f'{test_root}/Folder With Space/', '~/', '/Folder With Space', f'{test_root}/Folder With Space/'),\r\n        (f'{test_root}/Folder With Space/', f'{test_root}/', '/Folder With Space', f'{test_root}/Folder With Space/'),\r\n        (f'{test_root}/Folder With Space/', f'{test_root}/folder1', '/Folder With Space/folder1', f'{test_root}/Folder With Space/folder1/'),\r\n        (f'{test_root}/Folder With Space/', f'{test_root}/Folder With Space/', '/Folder With Space', f'{test_root}/Folder With Space/'),\r\n        (f'{test_root}/Folder With Space/', 'server.js', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/', 'folder1', '/Folder With Space/folder1', f'{test_root}/Folder With Space/folder1/'),\r\n        (f'{test_root}/Folder With Space/', 'folder1/folder2', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/'),\r\n        (f'{test_root}/Folder With Space/', 'folder1/folder2/', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/'),\r\n        (f'{test_root}/Folder With Space/', 'folder1/folder2/server.js', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/server.js'),\r\n        (f'{test_root}/Folder With Space/', f'{test_root}/folder1/folder2/server.js', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/server.js'),\r\n        (f'{test_root}/Folder With Space/', f'{test_root}/Folder With Space/server.js', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/', '~/folder1/folder2/server.js', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/server.js'),\r\n        (f'{test_root}/Folder With Space/', './folder1/server.js', '/Folder With Space/folder1', f'{test_root}/Folder With Space/folder1/server.js'),\r\n        ('server.js', '', '/', f'{test_root}/server.js'),\r\n        ('server.js', '.', '/', f'{test_root}/server.js'),\r\n        ('server.js', '.env', '/', f'{test_root}/.env'),\r\n        ('server.js', '~/', '/', f'{test_root}/server.js'),\r\n        ('server.js', f'{test_root}/', '/', f'{test_root}/server.js'),\r\n        ('server.js', f'{test_root}/folder1', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('server.js', f'{test_root}/Folder With Space/', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        ('server.js', 'server.js', '/', f'{test_root}/server.js'),\r\n        ('server.js', 'folder1', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('server.js', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('server.js', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('server.js', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('server.js', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('server.js', f'{test_root}/Folder With Space/server.js', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        ('server.js', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('server.js', './folder1/server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('folder1', '', '/folder1', f'{test_root}/folder1/'),\r\n        ('folder1', '.', '/folder1', f'{test_root}/folder1/'),\r\n        ('folder1', '.env', '/folder1', f'{test_root}/folder1/.env'),\r\n        ('folder1', '~/', '/folder1', f'{test_root}/folder1/'),\r\n        ('folder1', f'{test_root}/', '/folder1', f'{test_root}/folder1/'),\r\n        ('folder1', f'{test_root}/folder1', '/folder1', f'{test_root}/folder1/'),\r\n        ('folder1', f'{test_root}/Folder With Space/', '/folder1/Folder With Space', f'{test_root}/folder1/Folder With Space/'),\r\n        ('folder1', 'server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('folder1', 'folder1', '/folder1', f'{test_root}/folder1/'),\r\n        ('folder1', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1', f'{test_root}/Folder With Space/server.js', '/folder1/Folder With Space', f'{test_root}/folder1/Folder With Space/server.js'),\r\n        ('folder1', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1', './folder1/server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('folder1/folder2', '', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2', '.', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2', '.env', '/folder1/folder2', f'{test_root}/folder1/folder2/.env'),\r\n        ('folder1/folder2', '~/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2', f'{test_root}/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2', f'{test_root}/folder1', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2', f'{test_root}/Folder With Space/', '/folder1/folder2/Folder With Space', f'{test_root}/folder1/folder2/Folder With Space/'),\r\n        ('folder1/folder2', 'server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2', 'folder1', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2', f'{test_root}/Folder With Space/server.js', '/folder1/folder2/Folder With Space', f'{test_root}/folder1/folder2/Folder With Space/server.js'),\r\n        ('folder1/folder2', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2', './folder1/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/', '', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2/', '.', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2/', '.env', '/folder1/folder2', f'{test_root}/folder1/folder2/.env'),\r\n        ('folder1/folder2/', '~/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2/', f'{test_root}/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2/', f'{test_root}/folder1', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2/', f'{test_root}/Folder With Space/', '/folder1/folder2/Folder With Space', f'{test_root}/folder1/folder2/Folder With Space/'),\r\n        ('folder1/folder2/', 'server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/', 'folder1', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2/', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2/', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2/', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/', f'{test_root}/Folder With Space/server.js', '/folder1/folder2/Folder With Space', f'{test_root}/folder1/folder2/Folder With Space/server.js'),\r\n        ('folder1/folder2/', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/', './folder1/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', '', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', '.', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', '.env', '/folder1/folder2', f'{test_root}/folder1/folder2/.env'),\r\n        ('folder1/folder2/server.js', '~/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', f'{test_root}/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', f'{test_root}/folder1', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', f'{test_root}/Folder With Space/', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', 'server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', 'folder1', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', f'{test_root}/Folder With Space/server.js', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', './folder1/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', '', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', '.', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', '.env', '/folder1/folder2', f'{test_root}/folder1/folder2/.env'),\r\n        (f'{test_root}/folder1/folder2/server.js', '~/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', f'{test_root}/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', f'{test_root}/folder1', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', f'{test_root}/Folder With Space/', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', 'server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', 'folder1', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', f'{test_root}/Folder With Space/server.js', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', './folder1/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', '', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', '.', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', '.env', '/Folder With Space', f'{test_root}/Folder With Space/.env'),\r\n        (f'{test_root}/Folder With Space/server.js', '~/', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', f'{test_root}/', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', f'{test_root}/folder1', '/folder1/Folder With Space', f'{test_root}/folder1/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', f'{test_root}/Folder With Space/', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', 'server.js', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', 'folder1', '/folder1/Folder With Space', f'{test_root}/folder1/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', 'folder1/folder2', '/folder1/folder2/Folder With Space', f'{test_root}/folder1/folder2/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', 'folder1/folder2/', '/folder1/folder2/Folder With Space', f'{test_root}/folder1/folder2/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', 'folder1/folder2/server.js', '/folder1/folder2/Folder With Space', f'{test_root}/folder1/folder2/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2/Folder With Space', f'{test_root}/folder1/folder2/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', f'{test_root}/Folder With Space/server.js', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', '~/folder1/folder2/server.js', '/folder1/folder2/Folder With Space', f'{test_root}/folder1/folder2/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', './folder1/server.js', '/folder1/Folder With Space', f'{test_root}/folder1/Folder With Space/server.js'),\r\n        ('~/folder1/folder2/server.js', '', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', '.', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', '.env', '/folder1/folder2', f'{test_root}/folder1/folder2/.env'),\r\n        ('~/folder1/folder2/server.js', '~/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', f'{test_root}/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', f'{test_root}/folder1', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', f'{test_root}/Folder With Space/', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', 'server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', 'folder1', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', f'{test_root}/Folder With Space/server.js', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', './folder1/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('./folder1/server.js', '', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('./folder1/server.js', '.', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('./folder1/server.js', '.env', '/folder1', f'{test_root}/folder1/.env'),\r\n        ('./folder1/server.js', '~/', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('./folder1/server.js', f'{test_root}/', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('./folder1/server.js', f'{test_root}/folder1', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('./folder1/server.js', f'{test_root}/Folder With Space/', '/Folder With Space/folder1', f'{test_root}/Folder With Space/folder1/server.js'),\r\n        ('./folder1/server.js', 'server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('./folder1/server.js', 'folder1', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('./folder1/server.js', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('./folder1/server.js', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('./folder1/server.js', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('./folder1/server.js', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('./folder1/server.js', f'{test_root}/Folder With Space/server.js', '/Folder With Space/folder1', f'{test_root}/Folder With Space/folder1/server.js'),\r\n        ('./folder1/server.js', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('./folder1/server.js', './folder1/server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n\r\n    ])\r\n    def test_get_full_path_permutations(self, file_path, file_name, expected_path, expected_absolute_path):\r\n        \"\"\"\r\n        Test many different permutations of file path/name combinations.\r\n        \"\"\"\r\n        project = create_project()\r\n        relative_path, absolute_path = project.get_full_file_path(file_path, file_name)\r\n        # Normalize results before comparison, in case of Windows\r\n        assert str(Path(relative_path)) == str(Path(expected_path))\r\n        assert str(Path(absolute_path)) == str(Path(expected_absolute_path))\r\n\r\n    @pytest.mark.parametrize('test_data', [\r\n        {'name': 'package.json', 'path': 'package.json', 'saved_to': f'{test_root}/package.json'},\r\n        {'name': 'package.json', 'path': '', 'saved_to': f'{test_root}/package.json'},\r\n        {'name': 'package.json', 'path': '/', 'saved_to': f'{test_root}/package.json'},\r\n        {'name': 'package.json', 'path': None, 'saved_to': f'{test_root}/package.json'},\r\n        {'name': None, 'path': 'public/index.html', 'saved_to': f'{test_root}/public/index.html'},\r\n        {'name': '', 'path': 'public/index.html', 'saved_to': f'{test_root}/public/index.html'},\r\n        # TODO: Treatment of paths outside of the project workspace - https://github.com/Pythagora-io/gpt-pilot/issues/129\r\n        {'name': '/etc/hosts.txt', 'path': None, 'saved_to': f'{test_root}/etc/hosts.txt'},\r\n        # {'name': '.gitconfig', 'path': '~', 'saved_to': '~/.gitconfig'},\r\n        # {'name': '.gitconfig', 'path': '~/.gitconfig', 'saved_to': '~/.gitconfig'},\r\n        # {'name': 'gpt-pilot.log', 'path': '/temp/gpt-pilot.log', 'saved_to': '/temp/gpt-pilot.log'},\r\n    ])\r\n    @patch('helpers.Project.update_file')\r\n    @patch('helpers.Project.File')\r\n    def test_save_file(self, mock_file_insert, mock_update_file, test_data):\r\n        # Given\r\n        data = {'content': 'Hello World!'}\r\n        if test_data['name'] is not None:\r\n            data['name'] = str(Path(test_data['name']))\r\n        if test_data['path'] is not None:\r\n            data['path'] = str(Path(test_data['path']))\r\n\r\n        project = create_project()\r\n\r\n        # When\r\n        project.save_file(data)\r\n\r\n        # Then assert that update_file with the correct path\r\n        expected_saved_to = str(Path(test_data['saved_to']))\r\n        mock_update_file.assert_called_once_with(expected_saved_to, 'Hello World!')","file":"/pilot/helpers/test_Project.py","language":"python","fileHash":"37fe43012059855b97b22dc9679c3d74432a892b7b5dec62c6a31febdbb100aa","hash":"4a4547d08d68c6cba04ecc178118e91cf568be13aafa5a97b9b776b85ffc5a3b","processedContent":"class TestProject:\r\n    @pytest.mark.parametrize('file_path, file_name, expected', [\r\n        ('file.txt', 'file.txt', f'{test_root}/file.txt'),\r\n        ('', 'file.txt', f'{test_root}/file.txt'),\r\n        ('path/', 'file.txt', f'{test_root}/path/file.txt'),\r\n        ('path/to/', 'file.txt', f'{test_root}/path/to/file.txt'),\r\n        ('path/to/file.txt', 'file.txt', f'{test_root}/path/to/file.txt'),\r\n        ('./path/to/file.txt', 'to/file.txt', f'{test_root}/path/to/file.txt'),\r\n        ('./package.json', 'package.json', f'{test_root}/package.json'),\r\n    ])\r\n    def test_get_full_path(self, file_path, file_name, expected):\r\n        \"\"\"This code defines a test function that takes three arguments: file path, file name, and expected result. It combines the file path and file name into a full file path while considering directory structure and normalizing the path. The test then asserts that the resulting absolute path matches the expected value.\"\"\"\n        pass\n\r\n    @pytest.mark.parametrize(\r\n        (\"file_path\", \"file_name\", \"expected_path\", \"expected_absolute_path\"), [\r\n        ('', '', '/', f'{test_root}/'),\r\n        ('', '.', '/', f'{test_root}/'),\r\n        ('', '.env', '/', f'{test_root}/.env'),\r\n        ('', '~/', '/', f'{test_root}/'),\r\n        ('', f'{test_root}/', '/', f'{test_root}/'),\r\n        ('', f'{test_root}/folder1', '/folder1', f'{test_root}/folder1/'),\r\n        ('', f'{test_root}/Folder With Space/', '/Folder With Space', f'{test_root}/Folder With Space/'),\r\n        ('', 'server.js', '/', f'{test_root}/server.js'),\r\n        ('', 'folder1', '/folder1', f'{test_root}/folder1/'),\r\n        ('', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('', f'{test_root}/Folder With Space/server.js', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        ('', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('', './folder1/server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('.', '', '/', f'{test_root}/'),\r\n        ('.', '.', '/', f'{test_root}/'),\r\n        ('.', '.env', '/', f'{test_root}/.env'),\r\n        ('.', '~/', '/', f'{test_root}/'),\r\n        ('.', f'{test_root}/', '/', f'{test_root}/'),\r\n        ('.', f'{test_root}/folder1', '/folder1', f'{test_root}/folder1/'),\r\n        ('.', f'{test_root}/Folder With Space/', '/Folder With Space', f'{test_root}/Folder With Space/'),\r\n        ('.', 'server.js', '/', f'{test_root}/server.js'),\r\n        ('.', 'folder1', '/folder1', f'{test_root}/folder1/'),\r\n        ('.', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('.', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('.', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('.', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('.', f'{test_root}/Folder With Space/server.js', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        ('.', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('.', './folder1/server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('.env', '', '/', f'{test_root}/.env'),\r\n        ('.env', '.', '/', f'{test_root}/.env'),\r\n        ('.env', '.env', '/', f'{test_root}/.env'),\r\n        ('.env', '~/', '/', f'{test_root}/.env'),\r\n        ('.env', f'{test_root}/', '/', f'{test_root}/.env'),\r\n        ('.env', f'{test_root}/folder1', '/folder1', f'{test_root}/folder1/.env'),\r\n        ('.env', f'{test_root}/Folder With Space/', '/Folder With Space', f'{test_root}/Folder With Space/.env'),\r\n        ('.env', 'server.js', '/', f'{test_root}/server.js'),\r\n        ('.env', 'folder1', '/folder1', f'{test_root}/folder1/.env'),\r\n        ('.env', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/.env'),\r\n        ('.env', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/.env'),\r\n        ('.env', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('.env', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('.env', f'{test_root}/Folder With Space/server.js', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        ('.env', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('.env', './folder1/server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('~/', '', '/', f'{test_root}/'),\r\n        ('~/', '.', '/', f'{test_root}/'),\r\n        ('~/', '.env', '/', f'{test_root}/.env'),\r\n        ('~/', '~/', '/', f'{test_root}/'),\r\n        ('~/', f'{test_root}/', '/', f'{test_root}/'),\r\n        ('~/', f'{test_root}/folder1', '/folder1', f'{test_root}/folder1/'),\r\n        ('~/', f'{test_root}/Folder With Space/', '/Folder With Space', f'{test_root}/Folder With Space/'),\r\n        ('~/', 'server.js', '/', f'{test_root}/server.js'),\r\n        ('~/', 'folder1', '/folder1', f'{test_root}/folder1/'),\r\n        ('~/', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('~/', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('~/', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/', f'{test_root}/Folder With Space/server.js', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        ('~/', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/', './folder1/server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n        (f'{test_root}/', '', '/', f'{test_root}/'),\r\n        (f'{test_root}/', '.', '/', f'{test_root}/'),\r\n        (f'{test_root}/', '.env', '/', f'{test_root}/.env'),\r\n        (f'{test_root}/', '~/', '/', f'{test_root}/'),\r\n        (f'{test_root}/', f'{test_root}/', '/', f'{test_root}/'),\r\n        (f'{test_root}/', f'{test_root}/folder1', '/folder1', f'{test_root}/folder1/'),\r\n        (f'{test_root}/', f'{test_root}/Folder With Space/', '/Folder With Space', f'{test_root}/Folder With Space/'),\r\n        (f'{test_root}/', 'server.js', '/', f'{test_root}/server.js'),\r\n        (f'{test_root}/', 'folder1', '/folder1', f'{test_root}/folder1/'),\r\n        (f'{test_root}/', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        (f'{test_root}/', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        (f'{test_root}/', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/', f'{test_root}/Folder With Space/server.js', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        (f'{test_root}/', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/', './folder1/server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n        (f'{test_root}/folder1', '', '/folder1', f'{test_root}/folder1/'),\r\n        (f'{test_root}/folder1', '.', '/folder1', f'{test_root}/folder1/'),\r\n        (f'{test_root}/folder1', '.env', '/folder1', f'{test_root}/folder1/.env'),\r\n        (f'{test_root}/folder1', '~/', '/folder1', f'{test_root}/folder1/'),\r\n        (f'{test_root}/folder1', f'{test_root}/', '/folder1', f'{test_root}/folder1/'),\r\n        (f'{test_root}/folder1', f'{test_root}/folder1', '/folder1', f'{test_root}/folder1/'),\r\n        (f'{test_root}/folder1', f'{test_root}/Folder With Space/', '/folder1/Folder With Space', f'{test_root}/folder1/Folder With Space/'),\r\n        (f'{test_root}/folder1', 'server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n        (f'{test_root}/folder1', 'folder1', '/folder1', f'{test_root}/folder1/'),\r\n        (f'{test_root}/folder1', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        (f'{test_root}/folder1', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        (f'{test_root}/folder1', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1', f'{test_root}/Folder With Space/server.js', '/folder1/Folder With Space', f'{test_root}/folder1/Folder With Space/server.js'),\r\n        (f'{test_root}/folder1', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1', './folder1/server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n        (f'{test_root}/Folder With Space/', '', '/Folder With Space', f'{test_root}/Folder With Space/'),\r\n        (f'{test_root}/Folder With Space/', '.', '/Folder With Space', f'{test_root}/Folder With Space/'),\r\n        (f'{test_root}/Folder With Space/', '.env', '/Folder With Space', f'{test_root}/Folder With Space/.env'),\r\n        (f'{test_root}/Folder With Space/', '~/', '/Folder With Space', f'{test_root}/Folder With Space/'),\r\n        (f'{test_root}/Folder With Space/', f'{test_root}/', '/Folder With Space', f'{test_root}/Folder With Space/'),\r\n        (f'{test_root}/Folder With Space/', f'{test_root}/folder1', '/Folder With Space/folder1', f'{test_root}/Folder With Space/folder1/'),\r\n        (f'{test_root}/Folder With Space/', f'{test_root}/Folder With Space/', '/Folder With Space', f'{test_root}/Folder With Space/'),\r\n        (f'{test_root}/Folder With Space/', 'server.js', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/', 'folder1', '/Folder With Space/folder1', f'{test_root}/Folder With Space/folder1/'),\r\n        (f'{test_root}/Folder With Space/', 'folder1/folder2', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/'),\r\n        (f'{test_root}/Folder With Space/', 'folder1/folder2/', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/'),\r\n        (f'{test_root}/Folder With Space/', 'folder1/folder2/server.js', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/server.js'),\r\n        (f'{test_root}/Folder With Space/', f'{test_root}/folder1/folder2/server.js', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/server.js'),\r\n        (f'{test_root}/Folder With Space/', f'{test_root}/Folder With Space/server.js', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/', '~/folder1/folder2/server.js', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/server.js'),\r\n        (f'{test_root}/Folder With Space/', './folder1/server.js', '/Folder With Space/folder1', f'{test_root}/Folder With Space/folder1/server.js'),\r\n        ('server.js', '', '/', f'{test_root}/server.js'),\r\n        ('server.js', '.', '/', f'{test_root}/server.js'),\r\n        ('server.js', '.env', '/', f'{test_root}/.env'),\r\n        ('server.js', '~/', '/', f'{test_root}/server.js'),\r\n        ('server.js', f'{test_root}/', '/', f'{test_root}/server.js'),\r\n        ('server.js', f'{test_root}/folder1', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('server.js', f'{test_root}/Folder With Space/', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        ('server.js', 'server.js', '/', f'{test_root}/server.js'),\r\n        ('server.js', 'folder1', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('server.js', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('server.js', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('server.js', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('server.js', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('server.js', f'{test_root}/Folder With Space/server.js', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        ('server.js', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('server.js', './folder1/server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('folder1', '', '/folder1', f'{test_root}/folder1/'),\r\n        ('folder1', '.', '/folder1', f'{test_root}/folder1/'),\r\n        ('folder1', '.env', '/folder1', f'{test_root}/folder1/.env'),\r\n        ('folder1', '~/', '/folder1', f'{test_root}/folder1/'),\r\n        ('folder1', f'{test_root}/', '/folder1', f'{test_root}/folder1/'),\r\n        ('folder1', f'{test_root}/folder1', '/folder1', f'{test_root}/folder1/'),\r\n        ('folder1', f'{test_root}/Folder With Space/', '/folder1/Folder With Space', f'{test_root}/folder1/Folder With Space/'),\r\n        ('folder1', 'server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('folder1', 'folder1', '/folder1', f'{test_root}/folder1/'),\r\n        ('folder1', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1', f'{test_root}/Folder With Space/server.js', '/folder1/Folder With Space', f'{test_root}/folder1/Folder With Space/server.js'),\r\n        ('folder1', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1', './folder1/server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('folder1/folder2', '', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2', '.', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2', '.env', '/folder1/folder2', f'{test_root}/folder1/folder2/.env'),\r\n        ('folder1/folder2', '~/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2', f'{test_root}/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2', f'{test_root}/folder1', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2', f'{test_root}/Folder With Space/', '/folder1/folder2/Folder With Space', f'{test_root}/folder1/folder2/Folder With Space/'),\r\n        ('folder1/folder2', 'server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2', 'folder1', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2', f'{test_root}/Folder With Space/server.js', '/folder1/folder2/Folder With Space', f'{test_root}/folder1/folder2/Folder With Space/server.js'),\r\n        ('folder1/folder2', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2', './folder1/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/', '', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2/', '.', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2/', '.env', '/folder1/folder2', f'{test_root}/folder1/folder2/.env'),\r\n        ('folder1/folder2/', '~/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2/', f'{test_root}/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2/', f'{test_root}/folder1', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2/', f'{test_root}/Folder With Space/', '/folder1/folder2/Folder With Space', f'{test_root}/folder1/folder2/Folder With Space/'),\r\n        ('folder1/folder2/', 'server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/', 'folder1', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2/', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2/', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2/', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/', f'{test_root}/Folder With Space/server.js', '/folder1/folder2/Folder With Space', f'{test_root}/folder1/folder2/Folder With Space/server.js'),\r\n        ('folder1/folder2/', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/', './folder1/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', '', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', '.', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', '.env', '/folder1/folder2', f'{test_root}/folder1/folder2/.env'),\r\n        ('folder1/folder2/server.js', '~/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', f'{test_root}/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', f'{test_root}/folder1', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', f'{test_root}/Folder With Space/', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', 'server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', 'folder1', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', f'{test_root}/Folder With Space/server.js', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', './folder1/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', '', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', '.', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', '.env', '/folder1/folder2', f'{test_root}/folder1/folder2/.env'),\r\n        (f'{test_root}/folder1/folder2/server.js', '~/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', f'{test_root}/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', f'{test_root}/folder1', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', f'{test_root}/Folder With Space/', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', 'server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', 'folder1', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', f'{test_root}/Folder With Space/server.js', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', './folder1/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', '', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', '.', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', '.env', '/Folder With Space', f'{test_root}/Folder With Space/.env'),\r\n        (f'{test_root}/Folder With Space/server.js', '~/', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', f'{test_root}/', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', f'{test_root}/folder1', '/folder1/Folder With Space', f'{test_root}/folder1/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', f'{test_root}/Folder With Space/', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', 'server.js', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', 'folder1', '/folder1/Folder With Space', f'{test_root}/folder1/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', 'folder1/folder2', '/folder1/folder2/Folder With Space', f'{test_root}/folder1/folder2/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', 'folder1/folder2/', '/folder1/folder2/Folder With Space', f'{test_root}/folder1/folder2/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', 'folder1/folder2/server.js', '/folder1/folder2/Folder With Space', f'{test_root}/folder1/folder2/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2/Folder With Space', f'{test_root}/folder1/folder2/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', f'{test_root}/Folder With Space/server.js', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', '~/folder1/folder2/server.js', '/folder1/folder2/Folder With Space', f'{test_root}/folder1/folder2/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', './folder1/server.js', '/folder1/Folder With Space', f'{test_root}/folder1/Folder With Space/server.js'),\r\n        ('~/folder1/folder2/server.js', '', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', '.', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', '.env', '/folder1/folder2', f'{test_root}/folder1/folder2/.env'),\r\n        ('~/folder1/folder2/server.js', '~/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', f'{test_root}/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', f'{test_root}/folder1', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', f'{test_root}/Folder With Space/', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', 'server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', 'folder1', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', f'{test_root}/Folder With Space/server.js', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', './folder1/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('./folder1/server.js', '', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('./folder1/server.js', '.', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('./folder1/server.js', '.env', '/folder1', f'{test_root}/folder1/.env'),\r\n        ('./folder1/server.js', '~/', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('./folder1/server.js', f'{test_root}/', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('./folder1/server.js', f'{test_root}/folder1', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('./folder1/server.js', f'{test_root}/Folder With Space/', '/Folder With Space/folder1', f'{test_root}/Folder With Space/folder1/server.js'),\r\n        ('./folder1/server.js', 'server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('./folder1/server.js', 'folder1', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('./folder1/server.js', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('./folder1/server.js', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('./folder1/server.js', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('./folder1/server.js', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('./folder1/server.js', f'{test_root}/Folder With Space/server.js', '/Folder With Space/folder1', f'{test_root}/Folder With Space/folder1/server.js'),\r\n        ('./folder1/server.js', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('./folder1/server.js', './folder1/server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n\r\n    ])\r\n    def test_get_full_path_permutations(self, file_path, file_name, expected_path, expected_absolute_path):\r\n        \"\"\"The code is a Python function that takes in a file path and returns the absolute path of the file. It uses a combination of string manipulation and conditional statements to handle different types of file paths and return the correct absolute path.\"\"\"\n        pass\n\r\n    @pytest.mark.parametrize('test_data', [\r\n        {'name': 'package.json', 'path': 'package.json', 'saved_to': f'{test_root}/package.json'},\r\n        {'name': 'package.json', 'path': '', 'saved_to': f'{test_root}/package.json'},\r\n        {'name': 'package.json', 'path': '/', 'saved_to': f'{test_root}/package.json'},\r\n        {'name': 'package.json', 'path': None, 'saved_to': f'{test_root}/package.json'},\r\n        {'name': None, 'path': 'public/index.html', 'saved_to': f'{test_root}/public/index.html'},\r\n        {'name': '', 'path': 'public/index.html', 'saved_to': f'{test_root}/public/index.html'},\r\n        # TODO: Treatment of paths outside of the project workspace - https://github.com/Pythagora-io/gpt-pilot/issues/129\r\n        {'name': '/etc/hosts.txt', 'path': None, 'saved_to': f'{test_root}/etc/hosts.txt'},\r\n        # {'name': '.gitconfig', 'path': '~', 'saved_to': '~/.gitconfig'},\r\n        # {'name': '.gitconfig', 'path': '~/.gitconfig', 'saved_to': '~/.gitconfig'},\r\n        # {'name': 'gpt-pilot.log', 'path': '/temp/gpt-pilot.log', 'saved_to': '/temp/gpt-pilot.log'},\r\n    ])\r\n    @patch('helpers.Project.update_file')\r\n    @patch('helpers.Project.File')\r\n    def test_save_file(self, mock_file_insert, mock_update_file, test_data):\r\n        # Given\r\n        data = {'content': 'Hello World!'}\r\n        if test_data['name'] is not None:\r\n            data['name'] = str(Path(test_data['name']))\r\n        if test_data['path'] is not None:\r\n            data['path'] = str(Path(test_data['path']))\r\n\r\n        project = create_project()\r\n\r\n        # When\r\n        project.save_file(data)\r\n\r\n        # Then assert that update_file with the correct path\r\n        expected_saved_to = str(Path(test_data['saved_to']))\r\n        mock_update_file.assert_called_once_with(expected_saved_to, 'Hello World!')","documentation":"The code defines a Python function that takes in a file path and returns the absolute path of the file. It uses a combination of string manipulation and conditional statements to handle different types of file paths and return the correct absolute path."}},{"key":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path().","attributes":{"range":[26,4,43,51],"symbol":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path().","content":"@pytest.mark.parametrize('file_path, file_name, expected', [\r\n        ('file.txt', 'file.txt', f'{test_root}/file.txt'),\r\n        ('', 'file.txt', f'{test_root}/file.txt'),\r\n        ('path/', 'file.txt', f'{test_root}/path/file.txt'),\r\n        ('path/to/', 'file.txt', f'{test_root}/path/to/file.txt'),\r\n        ('path/to/file.txt', 'file.txt', f'{test_root}/path/to/file.txt'),\r\n        ('./path/to/file.txt', 'to/file.txt', f'{test_root}/path/to/file.txt'),\r\n        ('./package.json', 'package.json', f'{test_root}/package.json'),\r\n    ])\r\n    def test_get_full_path(self, file_path, file_name, expected):\r\n        # Given\r\n        project = create_project()\r\n\r\n        # When\r\n        relative_path, absolute_path = project.get_full_file_path(file_path, file_name)\r\n\r\n        # Then\r\n        assert absolute_path == str(Path(expected))","file":"/pilot/helpers/test_Project.py","language":"python","fileHash":"37fe43012059855b97b22dc9679c3d74432a892b7b5dec62c6a31febdbb100aa","hash":"4490780b414bbfc7bdd82d7a45574fd2f2fd37644fbd9b67a1a7c40dfeddc52c","processedContent":"@pytest.mark.parametrize('file_path, file_name, expected', [\r\n        ('file.txt', 'file.txt', f'{test_root}/file.txt'),\r #undefined\n        ('', 'file.txt', f'{test_root}/file.txt'),\r #undefined\n        ('path/', 'file.txt', f'{test_root}/path/file.txt'),\r #undefined\n        ('path/to/', 'file.txt', f'{test_root}/path/to/file.txt'),\r #undefined\n        ('path/to/file.txt', 'file.txt', f'{test_root}/path/to/file.txt'),\r #undefined\n        ('./path/to/file.txt', 'to/file.txt', f'{test_root}/path/to/file.txt'),\r #undefined\n        ('./package.json', 'package.json', f'{test_root}/package.json'),\r #undefined\n    ])\r\n    def test_get_full_path(self, file_path, file_name, expected):\r\n        # Given\r\n        project = create_project()\r #This code defines a class called \"Project\" that represents a software development project. It includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\n\r\n        # When\r\n        relative_path, absolute_path = project.get_full_file_path(file_path, file_name)\r #This code takes two arguments, a file path and a file name, and combines them into a full file path while considering the directory structure. It also normalizes the path by removing unnecessary components and ensuring that the final component has a file extension.\n\r\n        # Then\r\n        assert absolute_path == str(Path(expected))","documentation":"This code defines a test function that takes three arguments: file path, file name, and expected result. It combines the file path and file name into a full file path while considering directory structure and normalizing the path. The test then asserts that the resulting absolute path matches the expected value."}},{"key":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","attributes":{"range":[45,4,313,76],"symbol":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","content":"@pytest.mark.parametrize(\r\n        (\"file_path\", \"file_name\", \"expected_path\", \"expected_absolute_path\"), [\r\n        ('', '', '/', f'{test_root}/'),\r\n        ('', '.', '/', f'{test_root}/'),\r\n        ('', '.env', '/', f'{test_root}/.env'),\r\n        ('', '~/', '/', f'{test_root}/'),\r\n        ('', f'{test_root}/', '/', f'{test_root}/'),\r\n        ('', f'{test_root}/folder1', '/folder1', f'{test_root}/folder1/'),\r\n        ('', f'{test_root}/Folder With Space/', '/Folder With Space', f'{test_root}/Folder With Space/'),\r\n        ('', 'server.js', '/', f'{test_root}/server.js'),\r\n        ('', 'folder1', '/folder1', f'{test_root}/folder1/'),\r\n        ('', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('', f'{test_root}/Folder With Space/server.js', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        ('', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('', './folder1/server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('.', '', '/', f'{test_root}/'),\r\n        ('.', '.', '/', f'{test_root}/'),\r\n        ('.', '.env', '/', f'{test_root}/.env'),\r\n        ('.', '~/', '/', f'{test_root}/'),\r\n        ('.', f'{test_root}/', '/', f'{test_root}/'),\r\n        ('.', f'{test_root}/folder1', '/folder1', f'{test_root}/folder1/'),\r\n        ('.', f'{test_root}/Folder With Space/', '/Folder With Space', f'{test_root}/Folder With Space/'),\r\n        ('.', 'server.js', '/', f'{test_root}/server.js'),\r\n        ('.', 'folder1', '/folder1', f'{test_root}/folder1/'),\r\n        ('.', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('.', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('.', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('.', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('.', f'{test_root}/Folder With Space/server.js', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        ('.', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('.', './folder1/server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('.env', '', '/', f'{test_root}/.env'),\r\n        ('.env', '.', '/', f'{test_root}/.env'),\r\n        ('.env', '.env', '/', f'{test_root}/.env'),\r\n        ('.env', '~/', '/', f'{test_root}/.env'),\r\n        ('.env', f'{test_root}/', '/', f'{test_root}/.env'),\r\n        ('.env', f'{test_root}/folder1', '/folder1', f'{test_root}/folder1/.env'),\r\n        ('.env', f'{test_root}/Folder With Space/', '/Folder With Space', f'{test_root}/Folder With Space/.env'),\r\n        ('.env', 'server.js', '/', f'{test_root}/server.js'),\r\n        ('.env', 'folder1', '/folder1', f'{test_root}/folder1/.env'),\r\n        ('.env', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/.env'),\r\n        ('.env', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/.env'),\r\n        ('.env', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('.env', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('.env', f'{test_root}/Folder With Space/server.js', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        ('.env', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('.env', './folder1/server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('~/', '', '/', f'{test_root}/'),\r\n        ('~/', '.', '/', f'{test_root}/'),\r\n        ('~/', '.env', '/', f'{test_root}/.env'),\r\n        ('~/', '~/', '/', f'{test_root}/'),\r\n        ('~/', f'{test_root}/', '/', f'{test_root}/'),\r\n        ('~/', f'{test_root}/folder1', '/folder1', f'{test_root}/folder1/'),\r\n        ('~/', f'{test_root}/Folder With Space/', '/Folder With Space', f'{test_root}/Folder With Space/'),\r\n        ('~/', 'server.js', '/', f'{test_root}/server.js'),\r\n        ('~/', 'folder1', '/folder1', f'{test_root}/folder1/'),\r\n        ('~/', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('~/', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('~/', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/', f'{test_root}/Folder With Space/server.js', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        ('~/', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/', './folder1/server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n        (f'{test_root}/', '', '/', f'{test_root}/'),\r\n        (f'{test_root}/', '.', '/', f'{test_root}/'),\r\n        (f'{test_root}/', '.env', '/', f'{test_root}/.env'),\r\n        (f'{test_root}/', '~/', '/', f'{test_root}/'),\r\n        (f'{test_root}/', f'{test_root}/', '/', f'{test_root}/'),\r\n        (f'{test_root}/', f'{test_root}/folder1', '/folder1', f'{test_root}/folder1/'),\r\n        (f'{test_root}/', f'{test_root}/Folder With Space/', '/Folder With Space', f'{test_root}/Folder With Space/'),\r\n        (f'{test_root}/', 'server.js', '/', f'{test_root}/server.js'),\r\n        (f'{test_root}/', 'folder1', '/folder1', f'{test_root}/folder1/'),\r\n        (f'{test_root}/', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        (f'{test_root}/', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        (f'{test_root}/', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/', f'{test_root}/Folder With Space/server.js', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        (f'{test_root}/', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/', './folder1/server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n        (f'{test_root}/folder1', '', '/folder1', f'{test_root}/folder1/'),\r\n        (f'{test_root}/folder1', '.', '/folder1', f'{test_root}/folder1/'),\r\n        (f'{test_root}/folder1', '.env', '/folder1', f'{test_root}/folder1/.env'),\r\n        (f'{test_root}/folder1', '~/', '/folder1', f'{test_root}/folder1/'),\r\n        (f'{test_root}/folder1', f'{test_root}/', '/folder1', f'{test_root}/folder1/'),\r\n        (f'{test_root}/folder1', f'{test_root}/folder1', '/folder1', f'{test_root}/folder1/'),\r\n        (f'{test_root}/folder1', f'{test_root}/Folder With Space/', '/folder1/Folder With Space', f'{test_root}/folder1/Folder With Space/'),\r\n        (f'{test_root}/folder1', 'server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n        (f'{test_root}/folder1', 'folder1', '/folder1', f'{test_root}/folder1/'),\r\n        (f'{test_root}/folder1', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        (f'{test_root}/folder1', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        (f'{test_root}/folder1', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1', f'{test_root}/Folder With Space/server.js', '/folder1/Folder With Space', f'{test_root}/folder1/Folder With Space/server.js'),\r\n        (f'{test_root}/folder1', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1', './folder1/server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n        (f'{test_root}/Folder With Space/', '', '/Folder With Space', f'{test_root}/Folder With Space/'),\r\n        (f'{test_root}/Folder With Space/', '.', '/Folder With Space', f'{test_root}/Folder With Space/'),\r\n        (f'{test_root}/Folder With Space/', '.env', '/Folder With Space', f'{test_root}/Folder With Space/.env'),\r\n        (f'{test_root}/Folder With Space/', '~/', '/Folder With Space', f'{test_root}/Folder With Space/'),\r\n        (f'{test_root}/Folder With Space/', f'{test_root}/', '/Folder With Space', f'{test_root}/Folder With Space/'),\r\n        (f'{test_root}/Folder With Space/', f'{test_root}/folder1', '/Folder With Space/folder1', f'{test_root}/Folder With Space/folder1/'),\r\n        (f'{test_root}/Folder With Space/', f'{test_root}/Folder With Space/', '/Folder With Space', f'{test_root}/Folder With Space/'),\r\n        (f'{test_root}/Folder With Space/', 'server.js', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/', 'folder1', '/Folder With Space/folder1', f'{test_root}/Folder With Space/folder1/'),\r\n        (f'{test_root}/Folder With Space/', 'folder1/folder2', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/'),\r\n        (f'{test_root}/Folder With Space/', 'folder1/folder2/', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/'),\r\n        (f'{test_root}/Folder With Space/', 'folder1/folder2/server.js', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/server.js'),\r\n        (f'{test_root}/Folder With Space/', f'{test_root}/folder1/folder2/server.js', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/server.js'),\r\n        (f'{test_root}/Folder With Space/', f'{test_root}/Folder With Space/server.js', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/', '~/folder1/folder2/server.js', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/server.js'),\r\n        (f'{test_root}/Folder With Space/', './folder1/server.js', '/Folder With Space/folder1', f'{test_root}/Folder With Space/folder1/server.js'),\r\n        ('server.js', '', '/', f'{test_root}/server.js'),\r\n        ('server.js', '.', '/', f'{test_root}/server.js'),\r\n        ('server.js', '.env', '/', f'{test_root}/.env'),\r\n        ('server.js', '~/', '/', f'{test_root}/server.js'),\r\n        ('server.js', f'{test_root}/', '/', f'{test_root}/server.js'),\r\n        ('server.js', f'{test_root}/folder1', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('server.js', f'{test_root}/Folder With Space/', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        ('server.js', 'server.js', '/', f'{test_root}/server.js'),\r\n        ('server.js', 'folder1', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('server.js', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('server.js', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('server.js', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('server.js', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('server.js', f'{test_root}/Folder With Space/server.js', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        ('server.js', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('server.js', './folder1/server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('folder1', '', '/folder1', f'{test_root}/folder1/'),\r\n        ('folder1', '.', '/folder1', f'{test_root}/folder1/'),\r\n        ('folder1', '.env', '/folder1', f'{test_root}/folder1/.env'),\r\n        ('folder1', '~/', '/folder1', f'{test_root}/folder1/'),\r\n        ('folder1', f'{test_root}/', '/folder1', f'{test_root}/folder1/'),\r\n        ('folder1', f'{test_root}/folder1', '/folder1', f'{test_root}/folder1/'),\r\n        ('folder1', f'{test_root}/Folder With Space/', '/folder1/Folder With Space', f'{test_root}/folder1/Folder With Space/'),\r\n        ('folder1', 'server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('folder1', 'folder1', '/folder1', f'{test_root}/folder1/'),\r\n        ('folder1', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1', f'{test_root}/Folder With Space/server.js', '/folder1/Folder With Space', f'{test_root}/folder1/Folder With Space/server.js'),\r\n        ('folder1', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1', './folder1/server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('folder1/folder2', '', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2', '.', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2', '.env', '/folder1/folder2', f'{test_root}/folder1/folder2/.env'),\r\n        ('folder1/folder2', '~/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2', f'{test_root}/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2', f'{test_root}/folder1', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2', f'{test_root}/Folder With Space/', '/folder1/folder2/Folder With Space', f'{test_root}/folder1/folder2/Folder With Space/'),\r\n        ('folder1/folder2', 'server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2', 'folder1', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2', f'{test_root}/Folder With Space/server.js', '/folder1/folder2/Folder With Space', f'{test_root}/folder1/folder2/Folder With Space/server.js'),\r\n        ('folder1/folder2', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2', './folder1/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/', '', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2/', '.', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2/', '.env', '/folder1/folder2', f'{test_root}/folder1/folder2/.env'),\r\n        ('folder1/folder2/', '~/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2/', f'{test_root}/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2/', f'{test_root}/folder1', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2/', f'{test_root}/Folder With Space/', '/folder1/folder2/Folder With Space', f'{test_root}/folder1/folder2/Folder With Space/'),\r\n        ('folder1/folder2/', 'server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/', 'folder1', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2/', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2/', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        ('folder1/folder2/', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/', f'{test_root}/Folder With Space/server.js', '/folder1/folder2/Folder With Space', f'{test_root}/folder1/folder2/Folder With Space/server.js'),\r\n        ('folder1/folder2/', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/', './folder1/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', '', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', '.', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', '.env', '/folder1/folder2', f'{test_root}/folder1/folder2/.env'),\r\n        ('folder1/folder2/server.js', '~/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', f'{test_root}/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', f'{test_root}/folder1', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', f'{test_root}/Folder With Space/', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', 'server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', 'folder1', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', f'{test_root}/Folder With Space/server.js', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('folder1/folder2/server.js', './folder1/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', '', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', '.', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', '.env', '/folder1/folder2', f'{test_root}/folder1/folder2/.env'),\r\n        (f'{test_root}/folder1/folder2/server.js', '~/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', f'{test_root}/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', f'{test_root}/folder1', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', f'{test_root}/Folder With Space/', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', 'server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', 'folder1', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', f'{test_root}/Folder With Space/server.js', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/folder1/folder2/server.js', './folder1/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', '', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', '.', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', '.env', '/Folder With Space', f'{test_root}/Folder With Space/.env'),\r\n        (f'{test_root}/Folder With Space/server.js', '~/', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', f'{test_root}/', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', f'{test_root}/folder1', '/folder1/Folder With Space', f'{test_root}/folder1/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', f'{test_root}/Folder With Space/', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', 'server.js', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', 'folder1', '/folder1/Folder With Space', f'{test_root}/folder1/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', 'folder1/folder2', '/folder1/folder2/Folder With Space', f'{test_root}/folder1/folder2/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', 'folder1/folder2/', '/folder1/folder2/Folder With Space', f'{test_root}/folder1/folder2/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', 'folder1/folder2/server.js', '/folder1/folder2/Folder With Space', f'{test_root}/folder1/folder2/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2/Folder With Space', f'{test_root}/folder1/folder2/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', f'{test_root}/Folder With Space/server.js', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', '~/folder1/folder2/server.js', '/folder1/folder2/Folder With Space', f'{test_root}/folder1/folder2/Folder With Space/server.js'),\r\n        (f'{test_root}/Folder With Space/server.js', './folder1/server.js', '/folder1/Folder With Space', f'{test_root}/folder1/Folder With Space/server.js'),\r\n        ('~/folder1/folder2/server.js', '', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', '.', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', '.env', '/folder1/folder2', f'{test_root}/folder1/folder2/.env'),\r\n        ('~/folder1/folder2/server.js', '~/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', f'{test_root}/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', f'{test_root}/folder1', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', f'{test_root}/Folder With Space/', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', 'server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', 'folder1', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', f'{test_root}/Folder With Space/server.js', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('~/folder1/folder2/server.js', './folder1/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('./folder1/server.js', '', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('./folder1/server.js', '.', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('./folder1/server.js', '.env', '/folder1', f'{test_root}/folder1/.env'),\r\n        ('./folder1/server.js', '~/', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('./folder1/server.js', f'{test_root}/', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('./folder1/server.js', f'{test_root}/folder1', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('./folder1/server.js', f'{test_root}/Folder With Space/', '/Folder With Space/folder1', f'{test_root}/Folder With Space/folder1/server.js'),\r\n        ('./folder1/server.js', 'server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('./folder1/server.js', 'folder1', '/folder1', f'{test_root}/folder1/server.js'),\r\n        ('./folder1/server.js', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('./folder1/server.js', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('./folder1/server.js', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('./folder1/server.js', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('./folder1/server.js', f'{test_root}/Folder With Space/server.js', '/Folder With Space/folder1', f'{test_root}/Folder With Space/folder1/server.js'),\r\n        ('./folder1/server.js', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        ('./folder1/server.js', './folder1/server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n\r\n    ])\r\n    def test_get_full_path_permutations(self, file_path, file_name, expected_path, expected_absolute_path):\r\n        \"\"\"\r\n        Test many different permutations of file path/name combinations.\r\n        \"\"\"\r\n        project = create_project()\r\n        relative_path, absolute_path = project.get_full_file_path(file_path, file_name)\r\n        # Normalize results before comparison, in case of Windows\r\n        assert str(Path(relative_path)) == str(Path(expected_path))\r\n        assert str(Path(absolute_path)) == str(Path(expected_absolute_path))","file":"/pilot/helpers/test_Project.py","language":"python","fileHash":"37fe43012059855b97b22dc9679c3d74432a892b7b5dec62c6a31febdbb100aa","hash":"9aca26694052c9d68f808fa14224f61706b2f2a41638ba2ba90846531007ca68","processedContent":"@pytest.mark.parametrize(\r\n        (\"file_path\", \"file_name\", \"expected_path\", \"expected_absolute_path\"), [\r\n        ('', '', '/', f'{test_root}/'),\r #undefined\n        ('', '.', '/', f'{test_root}/'),\r #undefined\n        ('', '.env', '/', f'{test_root}/.env'),\r #undefined\n        ('', '~/', '/', f'{test_root}/'),\r #undefined\n        ('', f'{test_root}/', '/', f'{test_root}/'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('', f'{test_root}/folder1', '/folder1', f'{test_root}/folder1/'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('', f'{test_root}/Folder With Space/', '/Folder With Space', f'{test_root}/Folder With Space/'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('', 'server.js', '/', f'{test_root}/server.js'),\r #undefined\n        ('', 'folder1', '/folder1', f'{test_root}/folder1/'),\r #undefined\n        ('', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r #undefined\n        ('', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r #undefined\n        ('', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r #undefined\n        ('', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('', f'{test_root}/Folder With Space/server.js', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r #undefined\n        ('', './folder1/server.js', '/folder1', f'{test_root}/folder1/server.js'),\r #undefined\n        ('.', '', '/', f'{test_root}/'),\r #undefined\n        ('.', '.', '/', f'{test_root}/'),\r #undefined\n        ('.', '.env', '/', f'{test_root}/.env'),\r #undefined\n        ('.', '~/', '/', f'{test_root}/'),\r #undefined\n        ('.', f'{test_root}/', '/', f'{test_root}/'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('.', f'{test_root}/folder1', '/folder1', f'{test_root}/folder1/'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('.', f'{test_root}/Folder With Space/', '/Folder With Space', f'{test_root}/Folder With Space/'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('.', 'server.js', '/', f'{test_root}/server.js'),\r #undefined\n        ('.', 'folder1', '/folder1', f'{test_root}/folder1/'),\r #undefined\n        ('.', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r #undefined\n        ('.', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r #undefined\n        ('.', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r #undefined\n        ('.', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('.', f'{test_root}/Folder With Space/server.js', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('.', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r #undefined\n        ('.', './folder1/server.js', '/folder1', f'{test_root}/folder1/server.js'),\r #undefined\n        ('.env', '', '/', f'{test_root}/.env'),\r #undefined\n        ('.env', '.', '/', f'{test_root}/.env'),\r #undefined\n        ('.env', '.env', '/', f'{test_root}/.env'),\r #undefined\n        ('.env', '~/', '/', f'{test_root}/.env'),\r #undefined\n        ('.env', f'{test_root}/', '/', f'{test_root}/.env'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('.env', f'{test_root}/folder1', '/folder1', f'{test_root}/folder1/.env'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('.env', f'{test_root}/Folder With Space/', '/Folder With Space', f'{test_root}/Folder With Space/.env'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('.env', 'server.js', '/', f'{test_root}/server.js'),\r #undefined\n        ('.env', 'folder1', '/folder1', f'{test_root}/folder1/.env'),\r #undefined\n        ('.env', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/.env'),\r #undefined\n        ('.env', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/.env'),\r #undefined\n        ('.env', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r #undefined\n        ('.env', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('.env', f'{test_root}/Folder With Space/server.js', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('.env', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r #undefined\n        ('.env', './folder1/server.js', '/folder1', f'{test_root}/folder1/server.js'),\r #undefined\n        ('~/', '', '/', f'{test_root}/'),\r #undefined\n        ('~/', '.', '/', f'{test_root}/'),\r #undefined\n        ('~/', '.env', '/', f'{test_root}/.env'),\r #undefined\n        ('~/', '~/', '/', f'{test_root}/'),\r #undefined\n        ('~/', f'{test_root}/', '/', f'{test_root}/'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('~/', f'{test_root}/folder1', '/folder1', f'{test_root}/folder1/'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('~/', f'{test_root}/Folder With Space/', '/Folder With Space', f'{test_root}/Folder With Space/'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('~/', 'server.js', '/', f'{test_root}/server.js'),\r #undefined\n        ('~/', 'folder1', '/folder1', f'{test_root}/folder1/'),\r #undefined\n        ('~/', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r #undefined\n        ('~/', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r #undefined\n        ('~/', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r #undefined\n        ('~/', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('~/', f'{test_root}/Folder With Space/server.js', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('~/', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r #undefined\n        ('~/', './folder1/server.js', '/folder1', f'{test_root}/folder1/server.js'),\r #undefined\n        (f'{test_root}/', '', '/', f'{test_root}/'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/', '.', '/', f'{test_root}/'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/', '.env', '/', f'{test_root}/.env'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/', '~/', '/', f'{test_root}/'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/', f'{test_root}/', '/', f'{test_root}/'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/', f'{test_root}/folder1', '/folder1', f'{test_root}/folder1/'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/', f'{test_root}/Folder With Space/', '/Folder With Space', f'{test_root}/Folder With Space/'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/', 'server.js', '/', f'{test_root}/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/', 'folder1', '/folder1', f'{test_root}/folder1/'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/', f'{test_root}/Folder With Space/server.js', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/', './folder1/server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/folder1', '', '/folder1', f'{test_root}/folder1/'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/folder1', '.', '/folder1', f'{test_root}/folder1/'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/folder1', '.env', '/folder1', f'{test_root}/folder1/.env'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/folder1', '~/', '/folder1', f'{test_root}/folder1/'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/folder1', f'{test_root}/', '/folder1', f'{test_root}/folder1/'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/folder1', f'{test_root}/folder1', '/folder1', f'{test_root}/folder1/'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/folder1', f'{test_root}/Folder With Space/', '/folder1/Folder With Space', f'{test_root}/folder1/Folder With Space/'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/folder1', 'server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/folder1', 'folder1', '/folder1', f'{test_root}/folder1/'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/folder1', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/folder1', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/folder1', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/folder1', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/folder1', f'{test_root}/Folder With Space/server.js', '/folder1/Folder With Space', f'{test_root}/folder1/Folder With Space/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/folder1', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/folder1', './folder1/server.js', '/folder1', f'{test_root}/folder1/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/Folder With Space/', '', '/Folder With Space', f'{test_root}/Folder With Space/'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/Folder With Space/', '.', '/Folder With Space', f'{test_root}/Folder With Space/'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/Folder With Space/', '.env', '/Folder With Space', f'{test_root}/Folder With Space/.env'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/Folder With Space/', '~/', '/Folder With Space', f'{test_root}/Folder With Space/'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/Folder With Space/', f'{test_root}/', '/Folder With Space', f'{test_root}/Folder With Space/'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/Folder With Space/', f'{test_root}/folder1', '/Folder With Space/folder1', f'{test_root}/Folder With Space/folder1/'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/Folder With Space/', f'{test_root}/Folder With Space/', '/Folder With Space', f'{test_root}/Folder With Space/'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/Folder With Space/', 'server.js', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/Folder With Space/', 'folder1', '/Folder With Space/folder1', f'{test_root}/Folder With Space/folder1/'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/Folder With Space/', 'folder1/folder2', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/Folder With Space/', 'folder1/folder2/', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/Folder With Space/', 'folder1/folder2/server.js', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/Folder With Space/', f'{test_root}/folder1/folder2/server.js', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/Folder With Space/', f'{test_root}/Folder With Space/server.js', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/Folder With Space/', '~/folder1/folder2/server.js', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/Folder With Space/', './folder1/server.js', '/Folder With Space/folder1', f'{test_root}/Folder With Space/folder1/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('server.js', '', '/', f'{test_root}/server.js'),\r #undefined\n        ('server.js', '.', '/', f'{test_root}/server.js'),\r #undefined\n        ('server.js', '.env', '/', f'{test_root}/.env'),\r #undefined\n        ('server.js', '~/', '/', f'{test_root}/server.js'),\r #undefined\n        ('server.js', f'{test_root}/', '/', f'{test_root}/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('server.js', f'{test_root}/folder1', '/folder1', f'{test_root}/folder1/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('server.js', f'{test_root}/Folder With Space/', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('server.js', 'server.js', '/', f'{test_root}/server.js'),\r #undefined\n        ('server.js', 'folder1', '/folder1', f'{test_root}/folder1/server.js'),\r #undefined\n        ('server.js', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r #undefined\n        ('server.js', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r #undefined\n        ('server.js', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r #undefined\n        ('server.js', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('server.js', f'{test_root}/Folder With Space/server.js', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('server.js', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r #undefined\n        ('server.js', './folder1/server.js', '/folder1', f'{test_root}/folder1/server.js'),\r #undefined\n        ('folder1', '', '/folder1', f'{test_root}/folder1/'),\r #undefined\n        ('folder1', '.', '/folder1', f'{test_root}/folder1/'),\r #undefined\n        ('folder1', '.env', '/folder1', f'{test_root}/folder1/.env'),\r #undefined\n        ('folder1', '~/', '/folder1', f'{test_root}/folder1/'),\r #undefined\n        ('folder1', f'{test_root}/', '/folder1', f'{test_root}/folder1/'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('folder1', f'{test_root}/folder1', '/folder1', f'{test_root}/folder1/'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('folder1', f'{test_root}/Folder With Space/', '/folder1/Folder With Space', f'{test_root}/folder1/Folder With Space/'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('folder1', 'server.js', '/folder1', f'{test_root}/folder1/server.js'),\r #undefined\n        ('folder1', 'folder1', '/folder1', f'{test_root}/folder1/'),\r #undefined\n        ('folder1', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r #undefined\n        ('folder1', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r #undefined\n        ('folder1', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r #undefined\n        ('folder1', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('folder1', f'{test_root}/Folder With Space/server.js', '/folder1/Folder With Space', f'{test_root}/folder1/Folder With Space/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('folder1', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r #undefined\n        ('folder1', './folder1/server.js', '/folder1', f'{test_root}/folder1/server.js'),\r #undefined\n        ('folder1/folder2', '', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r #undefined\n        ('folder1/folder2', '.', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r #undefined\n        ('folder1/folder2', '.env', '/folder1/folder2', f'{test_root}/folder1/folder2/.env'),\r #undefined\n        ('folder1/folder2', '~/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r #undefined\n        ('folder1/folder2', f'{test_root}/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('folder1/folder2', f'{test_root}/folder1', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('folder1/folder2', f'{test_root}/Folder With Space/', '/folder1/folder2/Folder With Space', f'{test_root}/folder1/folder2/Folder With Space/'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('folder1/folder2', 'server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r #undefined\n        ('folder1/folder2', 'folder1', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r #undefined\n        ('folder1/folder2', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r #undefined\n        ('folder1/folder2', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r #undefined\n        ('folder1/folder2', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r #undefined\n        ('folder1/folder2', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('folder1/folder2', f'{test_root}/Folder With Space/server.js', '/folder1/folder2/Folder With Space', f'{test_root}/folder1/folder2/Folder With Space/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('folder1/folder2', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r #undefined\n        ('folder1/folder2', './folder1/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r #undefined\n        ('folder1/folder2/', '', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r #undefined\n        ('folder1/folder2/', '.', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r #undefined\n        ('folder1/folder2/', '.env', '/folder1/folder2', f'{test_root}/folder1/folder2/.env'),\r #undefined\n        ('folder1/folder2/', '~/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r #undefined\n        ('folder1/folder2/', f'{test_root}/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('folder1/folder2/', f'{test_root}/folder1', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('folder1/folder2/', f'{test_root}/Folder With Space/', '/folder1/folder2/Folder With Space', f'{test_root}/folder1/folder2/Folder With Space/'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('folder1/folder2/', 'server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r #undefined\n        ('folder1/folder2/', 'folder1', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r #undefined\n        ('folder1/folder2/', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r #undefined\n        ('folder1/folder2/', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/'),\r #undefined\n        ('folder1/folder2/', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r #undefined\n        ('folder1/folder2/', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('folder1/folder2/', f'{test_root}/Folder With Space/server.js', '/folder1/folder2/Folder With Space', f'{test_root}/folder1/folder2/Folder With Space/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('folder1/folder2/', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r #undefined\n        ('folder1/folder2/', './folder1/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r #undefined\n        ('folder1/folder2/server.js', '', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r #undefined\n        ('folder1/folder2/server.js', '.', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r #undefined\n        ('folder1/folder2/server.js', '.env', '/folder1/folder2', f'{test_root}/folder1/folder2/.env'),\r #undefined\n        ('folder1/folder2/server.js', '~/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r #undefined\n        ('folder1/folder2/server.js', f'{test_root}/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('folder1/folder2/server.js', f'{test_root}/folder1', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('folder1/folder2/server.js', f'{test_root}/Folder With Space/', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('folder1/folder2/server.js', 'server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r #undefined\n        ('folder1/folder2/server.js', 'folder1', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r #undefined\n        ('folder1/folder2/server.js', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r #undefined\n        ('folder1/folder2/server.js', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r #undefined\n        ('folder1/folder2/server.js', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r #undefined\n        ('folder1/folder2/server.js', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('folder1/folder2/server.js', f'{test_root}/Folder With Space/server.js', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('folder1/folder2/server.js', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r #undefined\n        ('folder1/folder2/server.js', './folder1/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r #undefined\n        (f'{test_root}/folder1/folder2/server.js', '', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/folder1/folder2/server.js', '.', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/folder1/folder2/server.js', '.env', '/folder1/folder2', f'{test_root}/folder1/folder2/.env'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/folder1/folder2/server.js', '~/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/folder1/folder2/server.js', f'{test_root}/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/folder1/folder2/server.js', f'{test_root}/folder1', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/folder1/folder2/server.js', f'{test_root}/Folder With Space/', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/folder1/folder2/server.js', 'server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/folder1/folder2/server.js', 'folder1', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/folder1/folder2/server.js', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/folder1/folder2/server.js', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/folder1/folder2/server.js', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/folder1/folder2/server.js', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/folder1/folder2/server.js', f'{test_root}/Folder With Space/server.js', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/folder1/folder2/server.js', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/folder1/folder2/server.js', './folder1/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/Folder With Space/server.js', '', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/Folder With Space/server.js', '.', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/Folder With Space/server.js', '.env', '/Folder With Space', f'{test_root}/Folder With Space/.env'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/Folder With Space/server.js', '~/', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/Folder With Space/server.js', f'{test_root}/', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/Folder With Space/server.js', f'{test_root}/folder1', '/folder1/Folder With Space', f'{test_root}/folder1/Folder With Space/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/Folder With Space/server.js', f'{test_root}/Folder With Space/', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/Folder With Space/server.js', 'server.js', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/Folder With Space/server.js', 'folder1', '/folder1/Folder With Space', f'{test_root}/folder1/Folder With Space/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/Folder With Space/server.js', 'folder1/folder2', '/folder1/folder2/Folder With Space', f'{test_root}/folder1/folder2/Folder With Space/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/Folder With Space/server.js', 'folder1/folder2/', '/folder1/folder2/Folder With Space', f'{test_root}/folder1/folder2/Folder With Space/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/Folder With Space/server.js', 'folder1/folder2/server.js', '/folder1/folder2/Folder With Space', f'{test_root}/folder1/folder2/Folder With Space/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/Folder With Space/server.js', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2/Folder With Space', f'{test_root}/folder1/folder2/Folder With Space/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/Folder With Space/server.js', f'{test_root}/Folder With Space/server.js', '/Folder With Space', f'{test_root}/Folder With Space/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/Folder With Space/server.js', '~/folder1/folder2/server.js', '/folder1/folder2/Folder With Space', f'{test_root}/folder1/folder2/Folder With Space/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        (f'{test_root}/Folder With Space/server.js', './folder1/server.js', '/folder1/Folder With Space', f'{test_root}/folder1/Folder With Space/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('~/folder1/folder2/server.js', '', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r #undefined\n        ('~/folder1/folder2/server.js', '.', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r #undefined\n        ('~/folder1/folder2/server.js', '.env', '/folder1/folder2', f'{test_root}/folder1/folder2/.env'),\r #undefined\n        ('~/folder1/folder2/server.js', '~/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r #undefined\n        ('~/folder1/folder2/server.js', f'{test_root}/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('~/folder1/folder2/server.js', f'{test_root}/folder1', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('~/folder1/folder2/server.js', f'{test_root}/Folder With Space/', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('~/folder1/folder2/server.js', 'server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r #undefined\n        ('~/folder1/folder2/server.js', 'folder1', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r #undefined\n        ('~/folder1/folder2/server.js', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r #undefined\n        ('~/folder1/folder2/server.js', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r #undefined\n        ('~/folder1/folder2/server.js', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r #undefined\n        ('~/folder1/folder2/server.js', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('~/folder1/folder2/server.js', f'{test_root}/Folder With Space/server.js', '/Folder With Space/folder1/folder2', f'{test_root}/Folder With Space/folder1/folder2/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('~/folder1/folder2/server.js', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r #undefined\n        ('~/folder1/folder2/server.js', './folder1/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r #undefined\n        ('./folder1/server.js', '', '/folder1', f'{test_root}/folder1/server.js'),\r #undefined\n        ('./folder1/server.js', '.', '/folder1', f'{test_root}/folder1/server.js'),\r #undefined\n        ('./folder1/server.js', '.env', '/folder1', f'{test_root}/folder1/.env'),\r #undefined\n        ('./folder1/server.js', '~/', '/folder1', f'{test_root}/folder1/server.js'),\r #undefined\n        ('./folder1/server.js', f'{test_root}/', '/folder1', f'{test_root}/folder1/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('./folder1/server.js', f'{test_root}/folder1', '/folder1', f'{test_root}/folder1/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('./folder1/server.js', f'{test_root}/Folder With Space/', '/Folder With Space/folder1', f'{test_root}/Folder With Space/folder1/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('./folder1/server.js', 'server.js', '/folder1', f'{test_root}/folder1/server.js'),\r #undefined\n        ('./folder1/server.js', 'folder1', '/folder1', f'{test_root}/folder1/server.js'),\r #undefined\n        ('./folder1/server.js', 'folder1/folder2', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r #undefined\n        ('./folder1/server.js', 'folder1/folder2/', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r #undefined\n        ('./folder1/server.js', 'folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r #undefined\n        ('./folder1/server.js', f'{test_root}/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('./folder1/server.js', f'{test_root}/Folder With Space/server.js', '/Folder With Space/folder1', f'{test_root}/Folder With Space/folder1/server.js'),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/test_root.: undefined\n        \"\"\"\n        ('./folder1/server.js', '~/folder1/folder2/server.js', '/folder1/folder2', f'{test_root}/folder1/folder2/server.js'),\r #undefined\n        ('./folder1/server.js', './folder1/server.js', '/folder1', f'{test_root}/folder1/server.js'),\r #undefined\n\r\n    ])\r\n    def test_get_full_path_permutations(self, file_path, file_name, expected_path, expected_absolute_path):\r\n        \"\"\"\r\n        Test many different permutations of file path/name combinations.\r\n        \"\"\"\r\n        project = create_project()\r #This code defines a class called \"Project\" that represents a software development project. It includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\n        relative_path, absolute_path = project.get_full_file_path(file_path, file_name)\r #This code takes two arguments, a file path and a file name, and combines them into a full file path while considering the directory structure. It also normalizes the path by removing unnecessary components and ensuring that the final component has a file extension.\n        # Normalize results before comparison, in case of Windows\r\n        assert str(Path(relative_path)) == str(Path(expected_path))\r\n        \"\"\"\n        scip-python python python-stdlib 3.11 pathlib/Path#: undefined\n        scip-python python python-stdlib 3.11 pathlib/Path#: undefined\n        \"\"\"\n        assert str(Path(absolute_path)) == str(Path(expected_absolute_path))","documentation":"The code is a Python function that takes in a file path and returns the absolute path of the file. It uses a combination of string manipulation and conditional statements to handle different types of file paths and return the correct absolute path."}},{"key":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_save_file().","attributes":{"range":[315,4,345,83],"symbol":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_save_file().","content":"@pytest.mark.parametrize('test_data', [\r\n        {'name': 'package.json', 'path': 'package.json', 'saved_to': f'{test_root}/package.json'},\r\n        {'name': 'package.json', 'path': '', 'saved_to': f'{test_root}/package.json'},\r\n        {'name': 'package.json', 'path': '/', 'saved_to': f'{test_root}/package.json'},\r\n        {'name': 'package.json', 'path': None, 'saved_to': f'{test_root}/package.json'},\r\n        {'name': None, 'path': 'public/index.html', 'saved_to': f'{test_root}/public/index.html'},\r\n        {'name': '', 'path': 'public/index.html', 'saved_to': f'{test_root}/public/index.html'},\r\n        # TODO: Treatment of paths outside of the project workspace - https://github.com/Pythagora-io/gpt-pilot/issues/129\r\n        {'name': '/etc/hosts.txt', 'path': None, 'saved_to': f'{test_root}/etc/hosts.txt'},\r\n        # {'name': '.gitconfig', 'path': '~', 'saved_to': '~/.gitconfig'},\r\n        # {'name': '.gitconfig', 'path': '~/.gitconfig', 'saved_to': '~/.gitconfig'},\r\n        # {'name': 'gpt-pilot.log', 'path': '/temp/gpt-pilot.log', 'saved_to': '/temp/gpt-pilot.log'},\r\n    ])\r\n    @patch('helpers.Project.update_file')\r\n    @patch('helpers.Project.File')\r\n    def test_save_file(self, mock_file_insert, mock_update_file, test_data):\r\n        # Given\r\n        data = {'content': 'Hello World!'}\r\n        if test_data['name'] is not None:\r\n            data['name'] = str(Path(test_data['name']))\r\n        if test_data['path'] is not None:\r\n            data['path'] = str(Path(test_data['path']))\r\n\r\n        project = create_project()\r\n\r\n        # When\r\n        project.save_file(data)\r\n\r\n        # Then assert that update_file with the correct path\r\n        expected_saved_to = str(Path(test_data['saved_to']))\r\n        mock_update_file.assert_called_once_with(expected_saved_to, 'Hello World!')","file":"/pilot/helpers/test_Project.py","language":"python","fileHash":"37fe43012059855b97b22dc9679c3d74432a892b7b5dec62c6a31febdbb100aa","hash":"c07c58b7d5204670386e54c66c00cdcf87edcd44d99dc8af06b2bf3377f6e5de","processedContent":"@pytest.mark.parametrize('test_data', [\r\n        {'name': 'package.json', 'path': 'package.json', 'saved_to': f'{test_root}/package.json'},\r #undefined\n        {'name': 'package.json', 'path': '', 'saved_to': f'{test_root}/package.json'},\r #undefined\n        {'name': 'package.json', 'path': '/', 'saved_to': f'{test_root}/package.json'},\r #undefined\n        {'name': 'package.json', 'path': None, 'saved_to': f'{test_root}/package.json'},\r #undefined\n        {'name': None, 'path': 'public/index.html', 'saved_to': f'{test_root}/public/index.html'},\r #undefined\n        {'name': '', 'path': 'public/index.html', 'saved_to': f'{test_root}/public/index.html'},\r #undefined\n        # TODO: Treatment of paths outside of the project workspace - https://github.com/Pythagora-io/gpt-pilot/issues/129\r\n        {'name': '/etc/hosts.txt', 'path': None, 'saved_to': f'{test_root}/etc/hosts.txt'},\r #undefined\n        # {'name': '.gitconfig', 'path': '~', 'saved_to': '~/.gitconfig'},\r\n        # {'name': '.gitconfig', 'path': '~/.gitconfig', 'saved_to': '~/.gitconfig'},\r\n        # {'name': 'gpt-pilot.log', 'path': '/temp/gpt-pilot.log', 'saved_to': '/temp/gpt-pilot.log'},\r\n    ])\r\n    @patch('helpers.Project.update_file')\r\n    @patch('helpers.Project.File')\r\n    def test_save_file(self, mock_file_insert, mock_update_file, test_data):\r\n        # Given\r\n        data = {'content': 'Hello World!'}\r\n        if test_data['name'] is not None:\r\n            data['name'] = str(Path(test_data['name']))\r #undefined\n        if test_data['path'] is not None:\r\n            data['path'] = str(Path(test_data['path']))\r #undefined\n\r\n        project = create_project()\r #This code defines a class called \"Project\" that represents a software development project. It includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\n\r\n        # When\r\n        project.save_file(data)\r #The code defines a function called `save_file` that takes a dictionary of file data as an argument. It creates a new file with the given name and content, and updates the file's path if necessary. The function also retrieves user input for any lines that contain the text \"INPUT_REQUIRED\" and saves it to the database.\n\r\n        # Then assert that update_file with the correct path\r\n        expected_saved_to = str(Path(test_data['saved_to']))\r #undefined\n        mock_update_file.assert_called_once_with(expected_saved_to, 'Hello World!')","documentation":"The code defines a function called `save_file` that takes a dictionary of file data as an argument and creates a new file with the given name and content, updating the file's path if necessary. It also retrieves user input for any lines that contain the text \"INPUT_REQUIRED\" and saves it to the database."}},{"key":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#","attributes":{"range":[352,0,426,66],"symbol":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#","content":"class TestProjectFileLists:\r\n    def setup_method(self):\r\n        # Given a project\r\n        project = create_project()\r\n        self.project = project\r\n        project.set_root_path(os.path.join(os.path.dirname(__file__), '../../workspace/directory_tree'))\r\n        project.project_description = 'Test Project'\r\n        project.development_plan = [{\r\n            'description': 'Test User Story',\r\n            'programmatic_goal': 'Test Programmatic Goal',\r\n            'user_review_goal': 'Test User Review Goal',\r\n        }]\r\n\r\n        # with directories including common.IGNORE_FOLDERS\r\n        src = os.path.join(project.root_path, 'src')\r\n        foo = os.path.join(project.root_path, 'src/foo')\r\n        files_no_folders = os.path.join(foo, 'files_no_folders')\r\n        os.makedirs(src, exist_ok=True)\r\n        os.makedirs(foo, exist_ok=True)\r\n        os.makedirs(foo + '/empty1', exist_ok=True)\r\n        os.makedirs(foo + '/empty2', exist_ok=True)\r\n        os.makedirs(files_no_folders, exist_ok=True)\r\n        for dir in ['.git', '.idea', '.vscode', '__pycache__', 'node_modules', 'venv', 'dist', 'build']:\r\n            os.makedirs(os.path.join(project.root_path, dir), exist_ok=True)\r\n\r\n        # ...and files\r\n\r\n        with open(os.path.join(project.root_path, 'package.json'), 'w') as file:\r\n            json.dump({'name': 'test app'}, file, indent=2)\r\n        for path in [\r\n            os.path.join(src, 'main.js'),\r\n            os.path.join(src, 'other.js'),\r\n            os.path.join(foo, 'bar.js'),\r\n            os.path.join(foo, 'fighters.js'),\r\n            os.path.join(files_no_folders, 'file1.js'),\r\n            os.path.join(files_no_folders, 'file2.js'),\r\n        ]:\r\n            with open(path, 'w') as file:\r\n                file.write('console.log(\"Hello World!\");')\r\n\r\n        # and a non-empty .gpt-pilot directory\r\n        project.dot_pilot_gpt.write_project(project)\r\n\r\n    def test_get_directory_tree(self):\r\n        # When\r\n        tree = self.project.get_directory_tree()\r\n\r\n        # Then we should not be including the .gpt-pilot directory or other ignored directories\r\n        # print('\\n' + tree)\r\n        assert tree == '''\r\n/\r\n  /src\r\n    /foo\r\n      /empty1\r\n      /empty2\r\n      /files_no_folders: file1.js, file2.js\r\n      bar.js, fighters.js\r\n    main.js, other.js\r\n  package.json\r\n'''.lstrip()\r\n\r\n    @patch('helpers.Project.DevelopmentSteps.get_or_create', return_value=('test', True))\r\n    @patch('helpers.Project.File.get_or_create', return_value=('test', True))\r\n    @patch('helpers.Project.FileSnapshot.get_or_create', return_value=(MagicMock(), True))\r\n    def test_save_files_snapshot(self, mock_snap, mock_file, mock_step):\r\n        # Given a snapshot of the files in the project\r\n\r\n        # When we save the file snapshot\r\n        self.project.save_files_snapshot('test')\r\n\r\n        # Then the files should be saved to the project, but nothing from `.gpt-pilot/`\r\n        assert mock_file.call_count == 7\r\n        files = ['package.json', 'main.js', 'file1.js', 'file2.js', 'bar.js', 'fighters.js', 'other.js']\r\n        for i in range(7):\r\n            assert mock_file.call_args_list[i][1]['name'] in files","file":"/pilot/helpers/test_Project.py","language":"python","fileHash":"37fe43012059855b97b22dc9679c3d74432a892b7b5dec62c6a31febdbb100aa","hash":"d3775af7ca6d18f960b45b4e51281ffeac90282eb6c70852bc49e910daaa7cf8","processedContent":"class TestProjectFileLists:\r\n    def setup_method(self):\r\n        \"\"\"This code sets up a project for the pilot program, creating directories and files, and writing project metadata to a `.gpt-pilot` directory.\"\"\"\n        pass\n\r\n    def test_get_directory_tree(self):\r\n        \"\"\"This code defines a function called `get_directory_tree` that returns a dictionary representing the directory tree of a project. The function takes an optional argument `with_descriptions` to include file descriptions in the output.\"\"\"\n        pass\n\r\n    @patch('helpers.Project.DevelopmentSteps.get_or_create', return_value=('test', True))\r\n    @patch('helpers.Project.File.get_or_create', return_value=('test', True))\r\n    @patch('helpers.Project.FileSnapshot.get_or_create', return_value=(MagicMock(), True))\r\n    def test_save_files_snapshot(self, mock_snap, mock_file, mock_step):\r\n        # Given a snapshot of the files in the project\r\n\r\n        # When we save the file snapshot\r\n        self.project.save_files_snapshot('test')\r\n\r\n        # Then the files should be saved to the project, but nothing from `.gpt-pilot/`\r\n        assert mock_file.call_count == 7\r\n        files = ['package.json', 'main.js', 'file1.js', 'file2.js', 'bar.js', 'fighters.js', 'other.js']\r\n        for i in range(7):\r\n            assert mock_file.call_args_list[i][1]['name'] in files","documentation":"This code defines a class called `TestProjectFileLists` that contains three methods: `setup_method`, `test_get_directory_tree`, and `test_save_files_snapshot`. The first two methods are used for testing purposes, while the third method is used to save a snapshot of the files in a project."}},{"key":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","attributes":{"range":[353,4,393,52],"symbol":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","content":"def setup_method(self):\r\n        # Given a project\r\n        project = create_project()\r\n        self.project = project\r\n        project.set_root_path(os.path.join(os.path.dirname(__file__), '../../workspace/directory_tree'))\r\n        project.project_description = 'Test Project'\r\n        project.development_plan = [{\r\n            'description': 'Test User Story',\r\n            'programmatic_goal': 'Test Programmatic Goal',\r\n            'user_review_goal': 'Test User Review Goal',\r\n        }]\r\n\r\n        # with directories including common.IGNORE_FOLDERS\r\n        src = os.path.join(project.root_path, 'src')\r\n        foo = os.path.join(project.root_path, 'src/foo')\r\n        files_no_folders = os.path.join(foo, 'files_no_folders')\r\n        os.makedirs(src, exist_ok=True)\r\n        os.makedirs(foo, exist_ok=True)\r\n        os.makedirs(foo + '/empty1', exist_ok=True)\r\n        os.makedirs(foo + '/empty2', exist_ok=True)\r\n        os.makedirs(files_no_folders, exist_ok=True)\r\n        for dir in ['.git', '.idea', '.vscode', '__pycache__', 'node_modules', 'venv', 'dist', 'build']:\r\n            os.makedirs(os.path.join(project.root_path, dir), exist_ok=True)\r\n\r\n        # ...and files\r\n\r\n        with open(os.path.join(project.root_path, 'package.json'), 'w') as file:\r\n            json.dump({'name': 'test app'}, file, indent=2)\r\n        for path in [\r\n            os.path.join(src, 'main.js'),\r\n            os.path.join(src, 'other.js'),\r\n            os.path.join(foo, 'bar.js'),\r\n            os.path.join(foo, 'fighters.js'),\r\n            os.path.join(files_no_folders, 'file1.js'),\r\n            os.path.join(files_no_folders, 'file2.js'),\r\n        ]:\r\n            with open(path, 'w') as file:\r\n                file.write('console.log(\"Hello World!\");')\r\n\r\n        # and a non-empty .gpt-pilot directory\r\n        project.dot_pilot_gpt.write_project(project)","file":"/pilot/helpers/test_Project.py","language":"python","fileHash":"37fe43012059855b97b22dc9679c3d74432a892b7b5dec62c6a31febdbb100aa","hash":"41f2012df02431f870c3dd9996111bc0856a3ad0d8f06a869b09b717c5c64473","processedContent":"def setup_method(self):\r\n        # Given a project\r\n        project = create_project()\r #This code defines a class called \"Project\" that represents a software development project. It includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\n        self.project = project\r\n        project.set_root_path(os.path.join(os.path.dirname(__file__), '../../workspace/directory_tree'))\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.project`/Project#set_root_path().: This code sets the root path for a file system, allowing the program to access files and directories within that path.\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/path.: undefined\n        scip-python python python-stdlib 3.11 os/path.: undefined\n        scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n        scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n        scip-python python temp indexer `pilot.helpers.test_project`/: undefined\n        \"\"\"\n        project.project_description = 'Test Project'\r #undefined\n        project.development_plan = [{\r #undefined\n            'description': 'Test User Story',\r\n            'programmatic_goal': 'Test Programmatic Goal',\r\n            'user_review_goal': 'Test User Review Goal',\r\n        }]\r\n\r\n        # with directories including common.IGNORE_FOLDERS\r\n        src = os.path.join(project.root_path, 'src')\r\n        \"\"\"\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/path.: undefined\n        scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n        scip-python python temp indexer `pilot.helpers.project`/Project#root_path.: undefined\n        \"\"\"\n        foo = os.path.join(project.root_path, 'src/foo')\r\n        \"\"\"\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/path.: undefined\n        scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n        scip-python python temp indexer `pilot.helpers.project`/Project#root_path.: undefined\n        \"\"\"\n        files_no_folders = os.path.join(foo, 'files_no_folders')\r\n        \"\"\"\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/path.: undefined\n        scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n        \"\"\"\n        os.makedirs(src, exist_ok=True)\r\n        \"\"\"\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/makedirs().: undefined\n        \"\"\"\n        os.makedirs(foo, exist_ok=True)\r\n        \"\"\"\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/makedirs().: undefined\n        \"\"\"\n        os.makedirs(foo + '/empty1', exist_ok=True)\r\n        \"\"\"\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/makedirs().: undefined\n        \"\"\"\n        os.makedirs(foo + '/empty2', exist_ok=True)\r\n        \"\"\"\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/makedirs().: undefined\n        \"\"\"\n        os.makedirs(files_no_folders, exist_ok=True)\r\n        \"\"\"\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/makedirs().: undefined\n        \"\"\"\n        for dir in ['.git', '.idea', '.vscode', '__pycache__', 'node_modules', 'venv', 'dist', 'build']:\r\n            os.makedirs(os.path.join(project.root_path, dir), exist_ok=True)\r\n            \"\"\"\n            scip-python python python-stdlib 3.11 os/__init__:: undefined\n            scip-python python python-stdlib 3.11 os/__init__:: undefined\n            scip-python python python-stdlib 3.11 os/path.: undefined\n            scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n            scip-python python temp indexer `pilot.helpers.project`/Project#root_path.: undefined\n            scip-python python python-stdlib 3.11 os/makedirs().: undefined\n            \"\"\"\n\r\n        # ...and files\r\n\r\n        with open(os.path.join(project.root_path, 'package.json'), 'w') as file:\r\n        \"\"\"\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/path.: undefined\n        scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n        scip-python python temp indexer `pilot.helpers.project`/Project#root_path.: undefined\n        \"\"\"\n            json.dump({'name': 'test app'}, file, indent=2)\r\n            \"\"\"\n            scip-python python python-stdlib 3.11 json/__init__:: undefined\n            scip-python python python-stdlib 3.11 json/dump().: undefined\n            \"\"\"\n        for path in [\r\n            os.path.join(src, 'main.js'),\r\n            \"\"\"\n            scip-python python python-stdlib 3.11 os/__init__:: undefined\n            scip-python python python-stdlib 3.11 os/path.: undefined\n            scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n            \"\"\"\n            os.path.join(src, 'other.js'),\r\n            \"\"\"\n            scip-python python python-stdlib 3.11 os/__init__:: undefined\n            scip-python python python-stdlib 3.11 os/path.: undefined\n            scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n            \"\"\"\n            os.path.join(foo, 'bar.js'),\r\n            \"\"\"\n            scip-python python python-stdlib 3.11 os/__init__:: undefined\n            scip-python python python-stdlib 3.11 os/path.: undefined\n            scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n            \"\"\"\n            os.path.join(foo, 'fighters.js'),\r\n            \"\"\"\n            scip-python python python-stdlib 3.11 os/__init__:: undefined\n            scip-python python python-stdlib 3.11 os/path.: undefined\n            scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n            \"\"\"\n            os.path.join(files_no_folders, 'file1.js'),\r\n            \"\"\"\n            scip-python python python-stdlib 3.11 os/__init__:: undefined\n            scip-python python python-stdlib 3.11 os/path.: undefined\n            scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n            \"\"\"\n            os.path.join(files_no_folders, 'file2.js'),\r\n            \"\"\"\n            scip-python python python-stdlib 3.11 os/__init__:: undefined\n            scip-python python python-stdlib 3.11 os/path.: undefined\n            scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n            \"\"\"\n        ]:\r\n            with open(path, 'w') as file:\r\n                file.write('console.log(\"Hello World!\");')\r #undefined\n\r\n        # and a non-empty .gpt-pilot directory\r\n        project.dot_pilot_gpt.write_project(project)","documentation":"This code sets up a project for the pilot program, creating directories and files, and writing project metadata to a `.gpt-pilot` directory."}},{"key":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#test_get_directory_tree().","attributes":{"range":[395,4,411,12],"symbol":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#test_get_directory_tree().","content":"def test_get_directory_tree(self):\r\n        # When\r\n        tree = self.project.get_directory_tree()\r\n\r\n        # Then we should not be including the .gpt-pilot directory or other ignored directories\r\n        # print('\\n' + tree)\r\n        assert tree == '''\r\n/\r\n  /src\r\n    /foo\r\n      /empty1\r\n      /empty2\r\n      /files_no_folders: file1.js, file2.js\r\n      bar.js, fighters.js\r\n    main.js, other.js\r\n  package.json\r\n'''.lstrip()","file":"/pilot/helpers/test_Project.py","language":"python","fileHash":"37fe43012059855b97b22dc9679c3d74432a892b7b5dec62c6a31febdbb100aa","hash":"caebe1961de6cea7eaf2dec195012bf510c74a158f459b07f35f879ea1aa62c4","processedContent":"def test_get_directory_tree(self):\r\n        # When\r\n        tree = self.project.get_directory_tree()\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#project.: undefined\n        scip-python python temp indexer `pilot.helpers.project`/Project#get_directory_tree().: This code defines a function called `get_directory_tree` that returns a dictionary representing the directory tree of a project. The function takes an optional argument `with_descriptions` to include file descriptions in the output.\n        \"\"\"\n\r\n        # Then we should not be including the .gpt-pilot directory or other ignored directories\r\n        # print('\\n' + tree)\r\n        assert tree == '''\r\n/\r\n  /src\r\n    /foo\r\n      /empty1\r\n      /empty2\r\n      /files_no_folders: file1.js, file2.js\r\n      bar.js, fighters.js\r\n    main.js, other.js\r\n  package.json\r\n'''.lstrip()","documentation":"This code defines a function called `get_directory_tree` that returns a dictionary representing the directory tree of a project. The function takes an optional argument `with_descriptions` to include file descriptions in the output."}},{"key":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#test_save_files_snapshot().","attributes":{"range":[413,4,426,66],"symbol":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#test_save_files_snapshot().","content":"@patch('helpers.Project.DevelopmentSteps.get_or_create', return_value=('test', True))\r\n    @patch('helpers.Project.File.get_or_create', return_value=('test', True))\r\n    @patch('helpers.Project.FileSnapshot.get_or_create', return_value=(MagicMock(), True))\r\n    def test_save_files_snapshot(self, mock_snap, mock_file, mock_step):\r\n        # Given a snapshot of the files in the project\r\n\r\n        # When we save the file snapshot\r\n        self.project.save_files_snapshot('test')\r\n\r\n        # Then the files should be saved to the project, but nothing from `.gpt-pilot/`\r\n        assert mock_file.call_count == 7\r\n        files = ['package.json', 'main.js', 'file1.js', 'file2.js', 'bar.js', 'fighters.js', 'other.js']\r\n        for i in range(7):\r\n            assert mock_file.call_args_list[i][1]['name'] in files","file":"/pilot/helpers/test_Project.py","language":"python","fileHash":"37fe43012059855b97b22dc9679c3d74432a892b7b5dec62c6a31febdbb100aa","hash":"eddc812485ffa24ad790037dae6cbb971e210052089d9c51f99b3da5a754b9f4","processedContent":"@patch('helpers.Project.DevelopmentSteps.get_or_create', return_value=('test', True))\r\n    @patch('helpers.Project.File.get_or_create', return_value=('test', True))\r\n    @patch('helpers.Project.FileSnapshot.get_or_create', return_value=(MagicMock(), True))\r\n    def test_save_files_snapshot(self, mock_snap, mock_file, mock_step):\r\n        # Given a snapshot of the files in the project\r\n\r\n        # When we save the file snapshot\r\n        self.project.save_files_snapshot('test')\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#project.: undefined\n        scip-python python temp indexer `pilot.helpers.project`/Project#save_files_snapshot().: The code defines a function called `save_files_snapshot` that saves the contents of files in a directory to a database. It also creates a development step entity in the database and saves file snapshots for each file in the directory.\n        \"\"\"\n\r\n        # Then the files should be saved to the project, but nothing from `.gpt-pilot/`\r\n        assert mock_file.call_count == 7\r\n        files = ['package.json', 'main.js', 'file1.js', 'file2.js', 'bar.js', 'fighters.js', 'other.js']\r\n        for i in range(7):\r\n            assert mock_file.call_args_list[i][1]['name'] in files","documentation":"The code defines a function called `save_files_snapshot` that saves the contents of files in a directory to a database. It also creates a development step entity in the database and saves file snapshots for each file in the directory."}},{"key":"scip-python python temp indexer `pilot.helpers.test_project`/","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.test_project`/","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.project`/Project#project_description.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.project`/Project#project_description.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.project`/Project#development_plan.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.project`/Project#development_plan.","language":"python"}},{"key":"scip-python python python-stdlib 3.11 json/dump().","attributes":{"symbol":"scip-python python python-stdlib 3.11 json/dump().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 io/TextIOBase#write().","attributes":{"symbol":"scip-python python python-stdlib 3.11 io/TextIOBase#write().","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#project.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#project.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.test_cli`/test_terminate_process_not_running().","attributes":{"range":[8,0,15,38],"symbol":"scip-python python temp indexer `pilot.helpers.test_cli`/test_terminate_process_not_running().","content":"@pytest.mark.xfail()\r\n@patch(\"helpers.cli.os\")\r\n@patch(\"helpers.cli.subprocess\")\r\ndef test_terminate_process_not_running(mock_subprocess, mock_os):\r\n    terminate_process(1234, 'not running')\r\n\r\n    mock_subprocess.run.assert_not_called()\r\n    mock_os.killpg.assert_not_called()","file":"/pilot/helpers/test_cli.py","language":"python","fileHash":"217280e9cb4a39624534c8de1b27f12b2f4361f1eec44e7941de2b65e0afe802","hash":"8ecef51a7799fc71f0085fef1d6393f6589dfddb92c3b3f37ffbefa47d6c8330","processedContent":"@pytest.mark.xfail()\r\n@patch(\"helpers.cli.os\")\r\n@patch(\"helpers.cli.subprocess\")\r\ndef test_terminate_process_not_running(mock_subprocess, mock_os):\r\n    terminate_process(1234, 'not running')\r #This code is a function that terminates a process on a Unix-like operating system by sending a SIGKILL signal to the process group. It uses the `os` and `signal` modules to accomplish this task.\n\r\n    mock_subprocess.run.assert_not_called()\r\n    mock_os.killpg.assert_not_called()","documentation":"This code is a unit test that simulates the termination of a process on a Unix-like operating system. It uses mock objects to verify that the `os` and `signal` modules are not called when the process is not running."}},{"key":"scip-python python temp indexer `pilot.helpers.test_cli`/test_execute_command_timeout_exit_code().","attributes":{"range":[17,0,38,56],"symbol":"scip-python python temp indexer `pilot.helpers.test_cli`/test_execute_command_timeout_exit_code().","content":"@patch(\"helpers.cli.MIN_COMMAND_RUN_TIME\", create=True, new=100)\r\n@patch('helpers.cli.get_saved_command_run')\r\n@patch('helpers.cli.run_command')\r\n@patch(\"helpers.cli.terminate_process\")\r\ndef test_execute_command_timeout_exit_code(mock_terminate_process, mock_run, mock_get_saved_command):\r\n    # Given\r\n    project = create_project()\r\n    command = 'cat'\r\n    timeout = 0.1\r\n    mock_process = MagicMock()\r\n    mock_process.poll.return_value = None\r\n    mock_process.pid = 1234\r\n    mock_run.return_value = mock_process\r\n\r\n    # When\r\n    cli_response, llm_response, exit_code = execute_command(project, command, timeout, force=True)\r\n\r\n    # Then\r\n    assert cli_response is not None\r\n    assert llm_response == 'DONE'\r\n    assert exit_code is not None\r\n    mock_terminate_process.assert_called_once_with(1234)","file":"/pilot/helpers/test_cli.py","language":"python","fileHash":"217280e9cb4a39624534c8de1b27f12b2f4361f1eec44e7941de2b65e0afe802","hash":"81cc95db8772a3d6829cc16568f8b48a24c020e4ed9c053fde67691682bb1b7b","processedContent":"@patch(\"helpers.cli.MIN_COMMAND_RUN_TIME\", create=True, new=100)\r\n@patch('helpers.cli.get_saved_command_run')\r\n@patch('helpers.cli.run_command')\r\n@patch(\"helpers.cli.terminate_process\")\r\ndef test_execute_command_timeout_exit_code(mock_terminate_process, mock_run, mock_get_saved_command):\r\n    # Given\r\n    project = create_project()\r #This code defines a class called \"Project\" that represents a software development project. It includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\n    command = 'cat'\r\n    timeout = 0.1\r\n    mock_process = MagicMock()\r\n    mock_process.poll.return_value = None\r\n    mock_process.pid = 1234\r\n    mock_run.return_value = mock_process\r\n\r\n    # When\r\n    cli_response, llm_response, exit_code = execute_command(project, command, timeout, force=True)\r #This code defines a function called `execute_command` that takes in a command, project, and other parameters. It then executes the command in a subprocess and captures its output in two queues. The function also checks if a process with the same ID is running, and if so, it terminates that process.\n\r\n    # Then\r\n    assert cli_response is not None\r\n    assert llm_response == 'DONE'\r\n    assert exit_code is not None\r\n    mock_terminate_process.assert_called_once_with(1234)","documentation":"This code defines a test function that simulates the execution of a command in a subprocess, with a timeout and a forced exit. It also checks if a process with the same ID is running and terminates it if necessary."}},{"key":"scip-python python temp indexer `pilot.helpers.test_cli`/mock_run_command().","attributes":{"range":[41,0,46,23],"symbol":"scip-python python temp indexer `pilot.helpers.test_cli`/mock_run_command().","content":"def mock_run_command(command, path, q, q_stderr):\r\n    q.put('hello')\r\n    mock_process = MagicMock()\r\n    mock_process.returncode = 0\r\n    mock_process.pid = 1234\r\n    return mock_process","file":"/pilot/helpers/test_cli.py","language":"python","fileHash":"217280e9cb4a39624534c8de1b27f12b2f4361f1eec44e7941de2b65e0afe802","hash":"db2bdd558cdd197e27ec2d36509cd0bacc6bca4afdf95fe190e16f365377e012","processedContent":"def mock_run_command(command, path, q, q_stderr):\r\n    q.put('hello')\r\n    mock_process = MagicMock()\r\n    mock_process.returncode = 0\r\n    mock_process.pid = 1234\r\n    return mock_process","documentation":"This code defines a function called `mock_run_command` that simulates the execution of a command in a specific directory. It returns a mock process object with a return code of 0 and a PID of 1234."}},{"key":"scip-python python temp indexer `pilot.helpers.test_cli`/test_execute_command_enter().","attributes":{"range":[49,0,67,56],"symbol":"scip-python python temp indexer `pilot.helpers.test_cli`/test_execute_command_enter().","content":"@patch('helpers.cli.get_saved_command_run')\r\n@patch('helpers.cli.ask_user', return_value='')\r\n@patch('helpers.cli.run_command')\r\n@patch(\"helpers.cli.terminate_process\")\r\ndef test_execute_command_enter(mock_terminate_process, mock_run, mock_ask, mock_get_saved_command):\r\n    # Given\r\n    project = create_project()\r\n    command = 'echo hello'\r\n    timeout = 1000\r\n    mock_run.side_effect = mock_run_command\r\n\r\n    # When\r\n    cli_response, llm_response, exit_code = execute_command(project, command, timeout)\r\n\r\n    # Then\r\n    assert 'hello' in cli_response\r\n    assert llm_response == 'DONE'\r\n    assert exit_code == 0\r\n    mock_terminate_process.assert_called_once_with(1234)","file":"/pilot/helpers/test_cli.py","language":"python","fileHash":"217280e9cb4a39624534c8de1b27f12b2f4361f1eec44e7941de2b65e0afe802","hash":"7b850087b46ad619bb4f9aabc241c7417478c61f81bad25f708c2047e9e9e89c","processedContent":"@patch('helpers.cli.get_saved_command_run')\r\n@patch('helpers.cli.ask_user', return_value='')\r\n@patch('helpers.cli.run_command')\r\n@patch(\"helpers.cli.terminate_process\")\r\ndef test_execute_command_enter(mock_terminate_process, mock_run, mock_ask, mock_get_saved_command):\r\n    # Given\r\n    project = create_project()\r #This code defines a class called \"Project\" that represents a software development project. It includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\n    command = 'echo hello'\r\n    timeout = 1000\r\n    mock_run.side_effect = mock_run_command\r #This code defines a function called `mock_run_command` that simulates the execution of a command in a specific directory. It returns a mock process object with a return code of 0 and a PID of 1234.\n\r\n    # When\r\n    cli_response, llm_response, exit_code = execute_command(project, command, timeout)\r #This code defines a function called `execute_command` that takes in a command, project, and other parameters. It then executes the command in a subprocess and captures its output in two queues. The function also checks if a process with the same ID is running, and if so, it terminates that process.\n\r\n    # Then\r\n    assert 'hello' in cli_response\r\n    assert llm_response == 'DONE'\r\n    assert exit_code == 0\r\n    mock_terminate_process.assert_called_once_with(1234)","documentation":"This code defines a test function for the `execute_command` function, which simulates the execution of a command in a subprocess and captures its output. The test checks that the output contains the expected string \"hello\" and that the function returns the correct exit code and response from the LLM."}},{"key":"scip-python python temp indexer `pilot.helpers.test_cli`/test_execute_command_yes().","attributes":{"range":[70,0,88,56],"symbol":"scip-python python temp indexer `pilot.helpers.test_cli`/test_execute_command_yes().","content":"@patch('helpers.cli.get_saved_command_run')\r\n@patch('helpers.cli.ask_user', return_value='yes')\r\n@patch('helpers.cli.run_command')\r\n@patch('helpers.cli.terminate_process')\r\ndef test_execute_command_yes(mock_terminate_process, mock_run, mock_ask, mock_get_saved_command):\r\n    # Given\r\n    project = create_project()\r\n    command = 'echo hello'\r\n    timeout = 1000\r\n    mock_run.side_effect = mock_run_command\r\n\r\n    # When\r\n    cli_response, llm_response, exit_code = execute_command(project, command, timeout)\r\n\r\n    # Then\r\n    assert 'hello' in cli_response\r\n    assert llm_response == 'DONE'\r\n    assert exit_code == 0\r\n    mock_terminate_process.assert_called_once_with(1234)","file":"/pilot/helpers/test_cli.py","language":"python","fileHash":"217280e9cb4a39624534c8de1b27f12b2f4361f1eec44e7941de2b65e0afe802","hash":"ebe4b87e41090ffe331f86befda5d083ca1e1e53b7556b3ab874c2e991d3f63e","processedContent":"@patch('helpers.cli.get_saved_command_run')\r\n@patch('helpers.cli.ask_user', return_value='yes')\r\n@patch('helpers.cli.run_command')\r\n@patch('helpers.cli.terminate_process')\r\ndef test_execute_command_yes(mock_terminate_process, mock_run, mock_ask, mock_get_saved_command):\r\n    # Given\r\n    project = create_project()\r #This code defines a class called \"Project\" that represents a software development project. It includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\n    command = 'echo hello'\r\n    timeout = 1000\r\n    mock_run.side_effect = mock_run_command\r #This code defines a function called `mock_run_command` that simulates the execution of a command in a specific directory. It returns a mock process object with a return code of 0 and a PID of 1234.\n\r\n    # When\r\n    cli_response, llm_response, exit_code = execute_command(project, command, timeout)\r #This code defines a function called `execute_command` that takes in a command, project, and other parameters. It then executes the command in a subprocess and captures its output in two queues. The function also checks if a process with the same ID is running, and if so, it terminates that process.\n\r\n    # Then\r\n    assert 'hello' in cli_response\r\n    assert llm_response == 'DONE'\r\n    assert exit_code == 0\r\n    mock_terminate_process.assert_called_once_with(1234)","documentation":"This code defines a test function that simulates the execution of a command in a specific directory and checks if a process with the same ID is running, and if so, it terminates that process."}},{"key":"scip-python python temp indexer `pilot.helpers.test_cli`/test_execute_command_rejected_with_no().","attributes":{"range":[91,0,105,28],"symbol":"scip-python python temp indexer `pilot.helpers.test_cli`/test_execute_command_rejected_with_no().","content":"@patch('helpers.cli.get_saved_command_run')\r\n@patch('helpers.cli.ask_user', return_value='no')\r\ndef test_execute_command_rejected_with_no(mock_ask, mock_get_saved_command):\r\n    # Given\r\n    project = create_project()\r\n    command = 'ping www.google.com'\r\n    timeout = 1\r\n\r\n    # When\r\n    cli_response, llm_response, exit_code = execute_command(project, command, timeout)\r\n\r\n    # Then\r\n    assert cli_response is None\r\n    assert llm_response == 'SKIP'\r\n    assert exit_code is None","file":"/pilot/helpers/test_cli.py","language":"python","fileHash":"217280e9cb4a39624534c8de1b27f12b2f4361f1eec44e7941de2b65e0afe802","hash":"628ebd4d3a1aaa5b1899d360112ff498b774422a4981af097607c73552c2d9b2","processedContent":"@patch('helpers.cli.get_saved_command_run')\r\n@patch('helpers.cli.ask_user', return_value='no')\r\ndef test_execute_command_rejected_with_no(mock_ask, mock_get_saved_command):\r\n    # Given\r\n    project = create_project()\r #This code defines a class called \"Project\" that represents a software development project. It includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\n    command = 'ping www.google.com'\r\n    timeout = 1\r\n\r\n    # When\r\n    cli_response, llm_response, exit_code = execute_command(project, command, timeout)\r #This code defines a function called `execute_command` that takes in a command, project, and other parameters. It then executes the command in a subprocess and captures its output in two queues. The function also checks if a process with the same ID is running, and if so, it terminates that process.\n\r\n    # Then\r\n    assert cli_response is None\r\n    assert llm_response == 'SKIP'\r\n    assert exit_code is None","documentation":"This code defines a test function that mocks the `ask_user` and `get_saved_command_run` functions to simulate a user rejecting a command. It then executes the command and checks the output for expected values."}},{"key":"scip-python python temp indexer `pilot.helpers.test_cli`/test_execute_command_rejected_with_message().","attributes":{"range":[108,0,122,28],"symbol":"scip-python python temp indexer `pilot.helpers.test_cli`/test_execute_command_rejected_with_message().","content":"@patch('helpers.cli.get_saved_command_run')\r\n@patch('helpers.cli.ask_user', return_value='no, my DNS is not working, ping 8.8.8.8 instead')\r\ndef test_execute_command_rejected_with_message(mock_ask, mock_get_saved_command):\r\n    # Given\r\n    project = create_project()\r\n    command = 'ping www.google.com'\r\n    timeout = 1\r\n\r\n    # When\r\n    cli_response, llm_response, exit_code = execute_command(project, command, timeout)\r\n\r\n    # Then\r\n    assert cli_response is None\r\n    assert llm_response == 'no, my DNS is not working, ping 8.8.8.8 instead'\r\n    assert exit_code is None","file":"/pilot/helpers/test_cli.py","language":"python","fileHash":"217280e9cb4a39624534c8de1b27f12b2f4361f1eec44e7941de2b65e0afe802","hash":"730bec6219c06bbb31f3a4dd01f4c5f5f046abcc212c701dc953da1bc486d3af","processedContent":"@patch('helpers.cli.get_saved_command_run')\r\n@patch('helpers.cli.ask_user', return_value='no, my DNS is not working, ping 8.8.8.8 instead')\r\ndef test_execute_command_rejected_with_message(mock_ask, mock_get_saved_command):\r\n    # Given\r\n    project = create_project()\r #This code defines a class called \"Project\" that represents a software development project. It includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\n    command = 'ping www.google.com'\r\n    timeout = 1\r\n\r\n    # When\r\n    cli_response, llm_response, exit_code = execute_command(project, command, timeout)\r #This code defines a function called `execute_command` that takes in a command, project, and other parameters. It then executes the command in a subprocess and captures its output in two queues. The function also checks if a process with the same ID is running, and if so, it terminates that process.\n\r\n    # Then\r\n    assert cli_response is None\r\n    assert llm_response == 'no, my DNS is not working, ping 8.8.8.8 instead'\r\n    assert exit_code is None","documentation":"This code defines a test function that mocks the `ask_user` and `get_saved_command_run` functions to simulate a user inputting a command and the system responding with a message. The function then executes the command and checks the output, exit code, and response from the LLM."}},{"key":"scip-python python temp indexer `pilot.helpers.test_cli`/test_run_command_until_success().","attributes":{"range":[125,0,138,45],"symbol":"scip-python python temp indexer `pilot.helpers.test_cli`/test_run_command_until_success().","content":"@patch('helpers.cli.execute_command', return_value=('hello', None, 0))\r\ndef test_run_command_until_success(mock_execute):\r\n    # Given\r\n    convo = MagicMock()\r\n    command = 'ping www.google.com'\r\n    timeout = 1\r\n\r\n    # When\r\n    result = run_command_until_success(convo, command, timeout)\r\n\r\n    # Then\r\n    assert result['success']\r\n    assert result['cli_response'] == 'hello'\r\n    assert convo.send_message.call_count == 1","file":"/pilot/helpers/test_cli.py","language":"python","fileHash":"217280e9cb4a39624534c8de1b27f12b2f4361f1eec44e7941de2b65e0afe802","hash":"8152cd915e2084eddc548ba174669b4a99b5a98bc6af846be3d95c6e1ef7d6ac","processedContent":"@patch('helpers.cli.execute_command', return_value=('hello', None, 0))\r\ndef test_run_command_until_success(mock_execute):\r\n    # Given\r\n    convo = MagicMock()\r\n    command = 'ping www.google.com'\r\n    timeout = 1\r\n\r\n    # When\r\n    result = run_command_until_success(convo, command, timeout)\r #This code defines a function called `run_command_until_success` that runs a command until it succeeds or reaches a timeout. It also checks if the command was successful by checking the exit code of the process that ran the command.\n\r\n    # Then\r\n    assert result['success']\r\n    assert result['cli_response'] == 'hello'\r\n    assert convo.send_message.call_count == 1","documentation":"This code defines a function called `run_command_until_success` that runs a command until it succeeds or reaches a timeout. It also checks if the command was successful by checking the exit code of the process that ran the command."}},{"key":"scip-python python temp indexer `pilot.helpers.test_cli`/test_run_command_until_success_app().","attributes":{"range":[141,0,155,45],"symbol":"scip-python python temp indexer `pilot.helpers.test_cli`/test_run_command_until_success_app().","content":"@patch('helpers.cli.execute_command', return_value=('running...', 'DONE', None))\r\ndef test_run_command_until_success_app(mock_execute):\r\n    # Given\r\n    convo = MagicMock()\r\n    command = 'npm run start'\r\n    command_id = 'app'\r\n    timeout = 1000\r\n\r\n    # When\r\n    result = run_command_until_success(convo, command, timeout, command_id=command_id)\r\n\r\n    # Then\r\n    assert result['success']\r\n    assert result['cli_response'] == 'running...'\r\n    assert convo.send_message.call_count == 0","file":"/pilot/helpers/test_cli.py","language":"python","fileHash":"217280e9cb4a39624534c8de1b27f12b2f4361f1eec44e7941de2b65e0afe802","hash":"9146b5b286873d4d1313f7658bbfbddedf6677b94ab3068edc888bb2f65c0e1d","processedContent":"@patch('helpers.cli.execute_command', return_value=('running...', 'DONE', None))\r\ndef test_run_command_until_success_app(mock_execute):\r\n    # Given\r\n    convo = MagicMock()\r\n    command = 'npm run start'\r\n    command_id = 'app'\r\n    timeout = 1000\r\n\r\n    # When\r\n    result = run_command_until_success(convo, command, timeout, command_id=command_id)\r #This code defines a function called `run_command_until_success` that runs a command until it succeeds or reaches a timeout. It also checks if the command was successful by checking the exit code of the process that ran the command.\n\r\n    # Then\r\n    assert result['success']\r\n    assert result['cli_response'] == 'running...'\r\n    assert convo.send_message.call_count == 0","documentation":"This code defines a function called `run_command_until_success` that runs a command until it succeeds or reaches a timeout, checking the exit code of the process that ran the command."}},{"key":"scip-python python temp indexer `pilot.helpers.test_cli`/test_run_command_until_success_error().","attributes":{"range":[158,0,173,44],"symbol":"scip-python python temp indexer `pilot.helpers.test_cli`/test_run_command_until_success_error().","content":"@patch('helpers.cli.execute_command', return_value=('error', None, 2))\r\ndef test_run_command_until_success_error(mock_execute):\r\n    # Given\r\n    convo = MagicMock()\r\n    convo.send_message.return_value = 'NEEDS DEBUGGING'\r\n    convo.agent.debugger.debug.return_value = False\r\n    command = 'ping www.google.com'\r\n    timeout = 1\r\n\r\n    # When\r\n    result = run_command_until_success(convo, command, timeout)\r\n\r\n    # Then\r\n    assert convo.send_message.call_count == 1\r\n    assert not result['success']\r\n    assert result['cli_response'] == 'error'","file":"/pilot/helpers/test_cli.py","language":"python","fileHash":"217280e9cb4a39624534c8de1b27f12b2f4361f1eec44e7941de2b65e0afe802","hash":"3476547100e17f9e11a6992e653252abb5629553c336a9c087e4bfe4d87dfb73","processedContent":"@patch('helpers.cli.execute_command', return_value=('error', None, 2))\r\ndef test_run_command_until_success_error(mock_execute):\r\n    # Given\r\n    convo = MagicMock()\r\n    convo.send_message.return_value = 'NEEDS DEBUGGING'\r\n    convo.agent.debugger.debug.return_value = False\r\n    command = 'ping www.google.com'\r\n    timeout = 1\r\n\r\n    # When\r\n    result = run_command_until_success(convo, command, timeout)\r #This code defines a function called `run_command_until_success` that runs a command until it succeeds or reaches a timeout. It also checks if the command was successful by checking the exit code of the process that ran the command.\n\r\n    # Then\r\n    assert convo.send_message.call_count == 1\r\n    assert not result['success']\r\n    assert result['cli_response'] == 'error'","documentation":"This code defines a function called `run_command_until_success` that runs a command until it succeeds or reaches a timeout. It also checks if the command was successful by checking the exit code of the process that ran the command."}},{"key":"scip-python python temp indexer `pilot.helpers.test_cli`/test_run_command_until_success_timed_out().","attributes":{"range":[176,0,191,43],"symbol":"scip-python python temp indexer `pilot.helpers.test_cli`/test_run_command_until_success_timed_out().","content":"@patch('helpers.cli.execute_command', return_value=('hell', 'took longer than 2000ms so I killed it', 0))\r\ndef test_run_command_until_success_timed_out(mock_execute):\r\n    # Given\r\n    convo = MagicMock()\r\n    convo.send_message.return_value = 'NEEDS DEBUGGING'\r\n    convo.agent.debugger.debug.return_value = False\r\n    command = 'ping www.google.com'\r\n    timeout = 1\r\n\r\n    # When\r\n    result = run_command_until_success(convo, command, timeout)\r\n\r\n    # Then\r\n    assert convo.send_message.call_count == 1\r\n    assert not result['success']\r\n    assert result['cli_response'] == 'hell'","file":"/pilot/helpers/test_cli.py","language":"python","fileHash":"217280e9cb4a39624534c8de1b27f12b2f4361f1eec44e7941de2b65e0afe802","hash":"38b9bd39eb265f118bf4ac3b71560eb2f92af4b0438e31a19364a8bc86c7413c","processedContent":"@patch('helpers.cli.execute_command', return_value=('hell', 'took longer than 2000ms so I killed it', 0))\r\ndef test_run_command_until_success_timed_out(mock_execute):\r\n    # Given\r\n    convo = MagicMock()\r\n    convo.send_message.return_value = 'NEEDS DEBUGGING'\r\n    convo.agent.debugger.debug.return_value = False\r\n    command = 'ping www.google.com'\r\n    timeout = 1\r\n\r\n    # When\r\n    result = run_command_until_success(convo, command, timeout)\r #This code defines a function called `run_command_until_success` that runs a command until it succeeds or reaches a timeout. It also checks if the command was successful by checking the exit code of the process that ran the command.\n\r\n    # Then\r\n    assert convo.send_message.call_count == 1\r\n    assert not result['success']\r\n    assert result['cli_response'] == 'hell'","documentation":"This code defines a function called `run_command_until_success` that runs a command until it succeeds or reaches a timeout. It also checks if the command was successful by checking the exit code of the process that ran the command."}},{"key":"scip-python python temp indexer `pilot.helpers.test_cli`/test_run_command_until_success_no().","attributes":{"range":[194,0,208,45],"symbol":"scip-python python temp indexer `pilot.helpers.test_cli`/test_run_command_until_success_no().","content":"@patch('helpers.cli.execute_command', return_value=(None, 'DONE', None))\r\ndef test_run_command_until_success_no(mock_execute):\r\n    # Given\r\n    convo = MagicMock()\r\n    command = 'ping www.google.com'\r\n    timeout = 1\r\n\r\n    # When\r\n    result = run_command_until_success(convo, command, timeout)\r\n\r\n    # Then\r\n    assert result['success']\r\n    assert result['cli_response'] is None\r\n    assert 'user_input' not in result or result['user_input'] is None\r\n    assert convo.send_message.call_count == 0","file":"/pilot/helpers/test_cli.py","language":"python","fileHash":"217280e9cb4a39624534c8de1b27f12b2f4361f1eec44e7941de2b65e0afe802","hash":"e5ae4f4511ee7738ebdc0f0f7e63faca62acb14d02d20fd08dc67ec052eb381d","processedContent":"@patch('helpers.cli.execute_command', return_value=(None, 'DONE', None))\r\ndef test_run_command_until_success_no(mock_execute):\r\n    # Given\r\n    convo = MagicMock()\r\n    command = 'ping www.google.com'\r\n    timeout = 1\r\n\r\n    # When\r\n    result = run_command_until_success(convo, command, timeout)\r #This code defines a function called `run_command_until_success` that runs a command until it succeeds or reaches a timeout. It also checks if the command was successful by checking the exit code of the process that ran the command.\n\r\n    # Then\r\n    assert result['success']\r\n    assert result['cli_response'] is None\r\n    assert 'user_input' not in result or result['user_input'] is None\r\n    assert convo.send_message.call_count == 0","documentation":"This code defines a function called `run_command_until_success` that runs a command until it succeeds or reaches a timeout, checking the exit code of the process that ran the command."}},{"key":"scip-python python temp indexer `pilot.helpers.test_cli`/test_run_command_until_success_rejected().","attributes":{"range":[211,0,225,45],"symbol":"scip-python python temp indexer `pilot.helpers.test_cli`/test_run_command_until_success_rejected().","content":"@patch('helpers.cli.execute_command', return_value=(None, 'no, my DNS is not working, ping 8.8.8.8 instead', None))\r\ndef test_run_command_until_success_rejected(mock_execute):\r\n    # Given\r\n    convo = MagicMock()\r\n    command = 'ping www.google.com'\r\n    timeout = 1\r\n\r\n    # When\r\n    result = run_command_until_success(convo, command, timeout)\r\n\r\n    # Then\r\n    assert not result['success']\r\n    assert 'cli_response' not in result or result['cli_response'] is None\r\n    assert result['user_input'] == 'no, my DNS is not working, ping 8.8.8.8 instead'\r\n    assert convo.send_message.call_count == 0","file":"/pilot/helpers/test_cli.py","language":"python","fileHash":"217280e9cb4a39624534c8de1b27f12b2f4361f1eec44e7941de2b65e0afe802","hash":"f648e1311dca6f85a395a4d9fd29bcd1e324134c26857f80da17820e4a7a580f","processedContent":"@patch('helpers.cli.execute_command', return_value=(None, 'no, my DNS is not working, ping 8.8.8.8 instead', None))\r\ndef test_run_command_until_success_rejected(mock_execute):\r\n    # Given\r\n    convo = MagicMock()\r\n    command = 'ping www.google.com'\r\n    timeout = 1\r\n\r\n    # When\r\n    result = run_command_until_success(convo, command, timeout)\r #This code defines a function called `run_command_until_success` that runs a command until it succeeds or reaches a timeout. It also checks if the command was successful by checking the exit code of the process that ran the command.\n\r\n    # Then\r\n    assert not result['success']\r\n    assert 'cli_response' not in result or result['cli_response'] is None\r\n    assert result['user_input'] == 'no, my DNS is not working, ping 8.8.8.8 instead'\r\n    assert convo.send_message.call_count == 0","documentation":"This code defines a function called `run_command_until_success` that runs a command until it succeeds or reaches a timeout. It also checks if the command was successful by checking the exit code of the process that ran the command."}},{"key":"scip-python python temp indexer `pilot.helpers.test_cli`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.test_cli`/__init__:","range":[0,0,226,0],"content":"import platform\r\nfrom unittest.mock import patch, MagicMock, call\r\n\r\nimport pytest\r\n\r\nfrom helpers.cli import execute_command, terminate_process, run_command_until_success\r\nfrom helpers.test_Project import create_project\r\n\r\n@pytest.mark.xfail()\r\n@patch(\"helpers.cli.os\")\r\n@patch(\"helpers.cli.subprocess\")\r\ndef test_terminate_process_not_running(mock_subprocess, mock_os):\r\n    terminate_process(1234, 'not running')\r\n\r\n    mock_subprocess.run.assert_not_called()\r\n    mock_os.killpg.assert_not_called()\r\n\r\n@patch(\"helpers.cli.MIN_COMMAND_RUN_TIME\", create=True, new=100)\r\n@patch('helpers.cli.get_saved_command_run')\r\n@patch('helpers.cli.run_command')\r\n@patch(\"helpers.cli.terminate_process\")\r\ndef test_execute_command_timeout_exit_code(mock_terminate_process, mock_run, mock_get_saved_command):\r\n    # Given\r\n    project = create_project()\r\n    command = 'cat'\r\n    timeout = 0.1\r\n    mock_process = MagicMock()\r\n    mock_process.poll.return_value = None\r\n    mock_process.pid = 1234\r\n    mock_run.return_value = mock_process\r\n\r\n    # When\r\n    cli_response, llm_response, exit_code = execute_command(project, command, timeout, force=True)\r\n\r\n    # Then\r\n    assert cli_response is not None\r\n    assert llm_response == 'DONE'\r\n    assert exit_code is not None\r\n    mock_terminate_process.assert_called_once_with(1234)\r\n\r\n\r\ndef mock_run_command(command, path, q, q_stderr):\r\n    q.put('hello')\r\n    mock_process = MagicMock()\r\n    mock_process.returncode = 0\r\n    mock_process.pid = 1234\r\n    return mock_process\r\n\r\n\r\n@patch('helpers.cli.get_saved_command_run')\r\n@patch('helpers.cli.ask_user', return_value='')\r\n@patch('helpers.cli.run_command')\r\n@patch(\"helpers.cli.terminate_process\")\r\ndef test_execute_command_enter(mock_terminate_process, mock_run, mock_ask, mock_get_saved_command):\r\n    # Given\r\n    project = create_project()\r\n    command = 'echo hello'\r\n    timeout = 1000\r\n    mock_run.side_effect = mock_run_command\r\n\r\n    # When\r\n    cli_response, llm_response, exit_code = execute_command(project, command, timeout)\r\n\r\n    # Then\r\n    assert 'hello' in cli_response\r\n    assert llm_response == 'DONE'\r\n    assert exit_code == 0\r\n    mock_terminate_process.assert_called_once_with(1234)\r\n\r\n\r\n@patch('helpers.cli.get_saved_command_run')\r\n@patch('helpers.cli.ask_user', return_value='yes')\r\n@patch('helpers.cli.run_command')\r\n@patch('helpers.cli.terminate_process')\r\ndef test_execute_command_yes(mock_terminate_process, mock_run, mock_ask, mock_get_saved_command):\r\n    # Given\r\n    project = create_project()\r\n    command = 'echo hello'\r\n    timeout = 1000\r\n    mock_run.side_effect = mock_run_command\r\n\r\n    # When\r\n    cli_response, llm_response, exit_code = execute_command(project, command, timeout)\r\n\r\n    # Then\r\n    assert 'hello' in cli_response\r\n    assert llm_response == 'DONE'\r\n    assert exit_code == 0\r\n    mock_terminate_process.assert_called_once_with(1234)\r\n\r\n\r\n@patch('helpers.cli.get_saved_command_run')\r\n@patch('helpers.cli.ask_user', return_value='no')\r\ndef test_execute_command_rejected_with_no(mock_ask, mock_get_saved_command):\r\n    # Given\r\n    project = create_project()\r\n    command = 'ping www.google.com'\r\n    timeout = 1\r\n\r\n    # When\r\n    cli_response, llm_response, exit_code = execute_command(project, command, timeout)\r\n\r\n    # Then\r\n    assert cli_response is None\r\n    assert llm_response == 'SKIP'\r\n    assert exit_code is None\r\n\r\n\r\n@patch('helpers.cli.get_saved_command_run')\r\n@patch('helpers.cli.ask_user', return_value='no, my DNS is not working, ping 8.8.8.8 instead')\r\ndef test_execute_command_rejected_with_message(mock_ask, mock_get_saved_command):\r\n    # Given\r\n    project = create_project()\r\n    command = 'ping www.google.com'\r\n    timeout = 1\r\n\r\n    # When\r\n    cli_response, llm_response, exit_code = execute_command(project, command, timeout)\r\n\r\n    # Then\r\n    assert cli_response is None\r\n    assert llm_response == 'no, my DNS is not working, ping 8.8.8.8 instead'\r\n    assert exit_code is None\r\n\r\n\r\n@patch('helpers.cli.execute_command', return_value=('hello', None, 0))\r\ndef test_run_command_until_success(mock_execute):\r\n    # Given\r\n    convo = MagicMock()\r\n    command = 'ping www.google.com'\r\n    timeout = 1\r\n\r\n    # When\r\n    result = run_command_until_success(convo, command, timeout)\r\n\r\n    # Then\r\n    assert result['success']\r\n    assert result['cli_response'] == 'hello'\r\n    assert convo.send_message.call_count == 1\r\n\r\n\r\n@patch('helpers.cli.execute_command', return_value=('running...', 'DONE', None))\r\ndef test_run_command_until_success_app(mock_execute):\r\n    # Given\r\n    convo = MagicMock()\r\n    command = 'npm run start'\r\n    command_id = 'app'\r\n    timeout = 1000\r\n\r\n    # When\r\n    result = run_command_until_success(convo, command, timeout, command_id=command_id)\r\n\r\n    # Then\r\n    assert result['success']\r\n    assert result['cli_response'] == 'running...'\r\n    assert convo.send_message.call_count == 0\r\n\r\n\r\n@patch('helpers.cli.execute_command', return_value=('error', None, 2))\r\ndef test_run_command_until_success_error(mock_execute):\r\n    # Given\r\n    convo = MagicMock()\r\n    convo.send_message.return_value = 'NEEDS DEBUGGING'\r\n    convo.agent.debugger.debug.return_value = False\r\n    command = 'ping www.google.com'\r\n    timeout = 1\r\n\r\n    # When\r\n    result = run_command_until_success(convo, command, timeout)\r\n\r\n    # Then\r\n    assert convo.send_message.call_count == 1\r\n    assert not result['success']\r\n    assert result['cli_response'] == 'error'\r\n\r\n\r\n@patch('helpers.cli.execute_command', return_value=('hell', 'took longer than 2000ms so I killed it', 0))\r\ndef test_run_command_until_success_timed_out(mock_execute):\r\n    # Given\r\n    convo = MagicMock()\r\n    convo.send_message.return_value = 'NEEDS DEBUGGING'\r\n    convo.agent.debugger.debug.return_value = False\r\n    command = 'ping www.google.com'\r\n    timeout = 1\r\n\r\n    # When\r\n    result = run_command_until_success(convo, command, timeout)\r\n\r\n    # Then\r\n    assert convo.send_message.call_count == 1\r\n    assert not result['success']\r\n    assert result['cli_response'] == 'hell'\r\n\r\n\r\n@patch('helpers.cli.execute_command', return_value=(None, 'DONE', None))\r\ndef test_run_command_until_success_no(mock_execute):\r\n    # Given\r\n    convo = MagicMock()\r\n    command = 'ping www.google.com'\r\n    timeout = 1\r\n\r\n    # When\r\n    result = run_command_until_success(convo, command, timeout)\r\n\r\n    # Then\r\n    assert result['success']\r\n    assert result['cli_response'] is None\r\n    assert 'user_input' not in result or result['user_input'] is None\r\n    assert convo.send_message.call_count == 0\r\n\r\n\r\n@patch('helpers.cli.execute_command', return_value=(None, 'no, my DNS is not working, ping 8.8.8.8 instead', None))\r\ndef test_run_command_until_success_rejected(mock_execute):\r\n    # Given\r\n    convo = MagicMock()\r\n    command = 'ping www.google.com'\r\n    timeout = 1\r\n\r\n    # When\r\n    result = run_command_until_success(convo, command, timeout)\r\n\r\n    # Then\r\n    assert not result['success']\r\n    assert 'cli_response' not in result or result['cli_response'] is None\r\n    assert result['user_input'] == 'no, my DNS is not working, ping 8.8.8.8 instead'\r\n    assert convo.send_message.call_count == 0\r\n","file":"/pilot/helpers/test_cli.py","language":"python","fileHash":"217280e9cb4a39624534c8de1b27f12b2f4361f1eec44e7941de2b65e0afe802","hash":"217280e9cb4a39624534c8de1b27f12b2f4361f1eec44e7941de2b65e0afe802","processedContent":"import platform\r #undefined\nfrom unittest.mock import patch, MagicMock, call\r #undefined\n\r\nimport pytest\r\n\r\nfrom helpers.cli import execute_command, terminate_process, run_command_until_success\r\n\"\"\"\nscip-python python temp indexer `pilot.helpers.cli`/__init__:: The code defines a command-line interface (CLI) that allows users to execute commands and interact with a language model. It includes functions for running commands, checking their output, and handling errors.\nscip-python python temp indexer `pilot.helpers.cli`/execute_command().: This code defines a function called `execute_command` that takes in a command, project, and other parameters. It then executes the command in a subprocess and captures its output in two queues. The function also checks if a process with the same ID is running, and if so, it terminates that process.\nscip-python python temp indexer `pilot.helpers.cli`/terminate_process().: This code is a function that terminates a process on a Unix-like operating system by sending a SIGKILL signal to the process group. It uses the `os` and `signal` modules to accomplish this task.\nscip-python python temp indexer `pilot.helpers.cli`/run_command_until_success().: This code defines a function called `run_command_until_success` that runs a command until it succeeds or reaches a timeout. It also checks if the command was successful by checking the exit code of the process that ran the command.\n\"\"\"\nfrom helpers.test_Project import create_project\r\n\"\"\"\nscip-python python temp indexer `pilot.helpers.test_project`/__init__:: The code defines a class called \"Project\" that represents a software development project, with functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\nscip-python python temp indexer `pilot.helpers.test_project`/create_project().: This code defines a class called \"Project\" that represents a software development project. It includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\n\"\"\"\n\r\n@pytest.mark.xfail()\r\n@patch(\"helpers.cli.os\")\r\n@patch(\"helpers.cli.subprocess\")\r\ndef test_terminate_process_not_running(mock_subprocess, mock_os):\r\n    \"\"\"This code is a unit test that simulates the termination of a process on a Unix-like operating system. It uses mock objects to verify that the `os` and `signal` modules are not called when the process is not running.\"\"\"\n    pass\n\r\n@patch(\"helpers.cli.MIN_COMMAND_RUN_TIME\", create=True, new=100)\r\n@patch('helpers.cli.get_saved_command_run')\r\n@patch('helpers.cli.run_command')\r\n@patch(\"helpers.cli.terminate_process\")\r\ndef test_execute_command_timeout_exit_code(mock_terminate_process, mock_run, mock_get_saved_command):\r\n    \"\"\"This code defines a test function that simulates the execution of a command in a subprocess, with a timeout and a forced exit. It also checks if a process with the same ID is running and terminates it if necessary.\"\"\"\n    pass\n\r\n\r\ndef mock_run_command(command, path, q, q_stderr):\r\n    \"\"\"This code defines a function called `mock_run_command` that simulates the execution of a command in a specific directory. It returns a mock process object with a return code of 0 and a PID of 1234.\"\"\"\n    pass\n\r\n\r\n@patch('helpers.cli.get_saved_command_run')\r\n@patch('helpers.cli.ask_user', return_value='')\r\n@patch('helpers.cli.run_command')\r\n@patch(\"helpers.cli.terminate_process\")\r\ndef test_execute_command_enter(mock_terminate_process, mock_run, mock_ask, mock_get_saved_command):\r\n    \"\"\"This code defines a test function for the `execute_command` function, which simulates the execution of a command in a subprocess and captures its output. The test checks that the output contains the expected string \"hello\" and that the function returns the correct exit code and response from the LLM.\"\"\"\n    pass\n\r\n\r\n@patch('helpers.cli.get_saved_command_run')\r\n@patch('helpers.cli.ask_user', return_value='yes')\r\n@patch('helpers.cli.run_command')\r\n@patch('helpers.cli.terminate_process')\r\ndef test_execute_command_yes(mock_terminate_process, mock_run, mock_ask, mock_get_saved_command):\r\n    \"\"\"This code defines a test function that simulates the execution of a command in a specific directory and checks if a process with the same ID is running, and if so, it terminates that process.\"\"\"\n    pass\n\r\n\r\n@patch('helpers.cli.get_saved_command_run')\r\n@patch('helpers.cli.ask_user', return_value='no')\r\ndef test_execute_command_rejected_with_no(mock_ask, mock_get_saved_command):\r\n    \"\"\"This code defines a test function that mocks the `ask_user` and `get_saved_command_run` functions to simulate a user rejecting a command. It then executes the command and checks the output for expected values.\"\"\"\n    pass\n\r\n\r\n@patch('helpers.cli.get_saved_command_run')\r\n@patch('helpers.cli.ask_user', return_value='no, my DNS is not working, ping 8.8.8.8 instead')\r\ndef test_execute_command_rejected_with_message(mock_ask, mock_get_saved_command):\r\n    \"\"\"This code defines a test function that mocks the `ask_user` and `get_saved_command_run` functions to simulate a user inputting a command and the system responding with a message. The function then executes the command and checks the output, exit code, and response from the LLM.\"\"\"\n    pass\n\r\n\r\n@patch('helpers.cli.execute_command', return_value=('hello', None, 0))\r\ndef test_run_command_until_success(mock_execute):\r\n    \"\"\"This code defines a function called `run_command_until_success` that runs a command until it succeeds or reaches a timeout. It also checks if the command was successful by checking the exit code of the process that ran the command.\"\"\"\n    pass\n\r\n\r\n@patch('helpers.cli.execute_command', return_value=('running...', 'DONE', None))\r\ndef test_run_command_until_success_app(mock_execute):\r\n    \"\"\"This code defines a function called `run_command_until_success` that runs a command until it succeeds or reaches a timeout, checking the exit code of the process that ran the command.\"\"\"\n    pass\n\r\n\r\n@patch('helpers.cli.execute_command', return_value=('error', None, 2))\r\ndef test_run_command_until_success_error(mock_execute):\r\n    \"\"\"This code defines a function called `run_command_until_success` that runs a command until it succeeds or reaches a timeout. It also checks if the command was successful by checking the exit code of the process that ran the command.\"\"\"\n    pass\n\r\n\r\n@patch('helpers.cli.execute_command', return_value=('hell', 'took longer than 2000ms so I killed it', 0))\r\ndef test_run_command_until_success_timed_out(mock_execute):\r\n    \"\"\"This code defines a function called `run_command_until_success` that runs a command until it succeeds or reaches a timeout. It also checks if the command was successful by checking the exit code of the process that ran the command.\"\"\"\n    pass\n\r\n\r\n@patch('helpers.cli.execute_command', return_value=(None, 'DONE', None))\r\ndef test_run_command_until_success_no(mock_execute):\r\n    \"\"\"This code defines a function called `run_command_until_success` that runs a command until it succeeds or reaches a timeout, checking the exit code of the process that ran the command.\"\"\"\n    pass\n\r\n\r\n@patch('helpers.cli.execute_command', return_value=(None, 'no, my DNS is not working, ping 8.8.8.8 instead', None))\r\ndef test_run_command_until_success_rejected(mock_execute):\r\n    \"\"\"This code defines a function called `run_command_until_success` that runs a command until it succeeds or reaches a timeout. It also checks if the command was successful by checking the exit code of the process that ran the command.\"\"\"\n    pass\n","documentation":"The code defines a command-line interface (CLI) that allows users to execute commands and interact with a language model. It includes functions for running commands, checking their output, and handling errors."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#__init__().","attributes":{"range":[15,4,17,38],"symbol":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#__init__().","content":"def __init__(self, project):\n        super().__init__('architect', project)\n        self.convo_architecture = None","file":"/pilot/helpers/agents/Architect.py","language":"python","fileHash":"2760562b79d43a5a8c688bf6bce9ba47678ed0977ca08e8b61ac72a764108d3b","hash":"8efcf2ceab28e1f4d0803a6e6bf60ee8bf2353237c4fbbe77413254d06712331","processedContent":"def __init__(self, project):\n        super().__init__('architect', project) #This code defines a constructor for a class that initializes an object with a role and a project.\n        self.convo_architecture = None","documentation":"This code defines a constructor for a class that initializes an object with a role (architect) and a project, and sets the object's convo_architecture attribute to None."}},{"key":"scip-python python temp indexer `pilot.utils.utils`/step_already_finished().","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.utils`/step_already_finished().","language":"python","range":[140,0,145,24],"content":"def step_already_finished(args, step):\n    args.update(step['app_data'])\n\n    message = f\"✅  {capitalize_first_word_with_underscores(step['step'])}\"\n    print(color_green(message))\n    logger.info(message)","file":"/pilot/utils/utils.py","fileHash":"ffe0ebca72a8999ffb0084622af3eb69767ceda2cc6d7e7e68e65ebb2b4408c3","hash":"b8906c640465ca2413466f5afb1f9ecc40f908c53a6259dce5eeaddd448d6f05","processedContent":"def step_already_finished(args, step):\n    args.update(step['app_data'])\n\n    message = f\"✅  {capitalize_first_word_with_underscores(step['step'])}\" #This code takes a string with underscores and capitalizes the first word while keeping the rest of the words unchanged.\n    print(color_green(message)) #undefined\n    logger.info(message)","documentation":"This code updates the arguments with the app data from a step and then prints a success message to the console."}},{"key":"scip-python python temp indexer `pilot.utils.style`/color_green_bold.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.style`/color_green_bold.","language":"python"}},{"key":"scip-python python temp indexer `pilot.const.function_calls`/ARCHITECTURE.","attributes":{"symbol":"scip-python python temp indexer `pilot.const.function_calls`/ARCHITECTURE.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.utils`/should_execute_step().","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.utils`/should_execute_step().","language":"python","range":[128,0,137,113],"content":"def should_execute_step(arg_step, current_step):\n    \"\"\"\n    :param arg_step: `project.args['step']`, may be None\n    :param current_step:  The step that would be executed next by the calling method.\n    :return: True if `current_step` should be executed.\n    \"\"\"\n    arg_step_index = 0 if arg_step is None else STEPS.index(arg_step) if arg_step in STEPS else None\n    current_step_index = STEPS.index(current_step) if current_step in STEPS else None\n\n    return arg_step_index is not None and current_step_index is not None and current_step_index >= arg_step_index","file":"/pilot/utils/utils.py","fileHash":"ffe0ebca72a8999ffb0084622af3eb69767ceda2cc6d7e7e68e65ebb2b4408c3","hash":"6b925656c9ec3f260d018cfc7be778e959044bf1395d36c507e19431f9c3feae","processedContent":"def should_execute_step(arg_step, current_step):\n    \"\"\"\n    :param arg_step: `project.args['step']`, may be None\n    :param current_step:  The step that would be executed next by the calling method.\n    :return: True if `current_step` should be executed.\n    \"\"\"\n    arg_step_index = 0 if arg_step is None else STEPS.index(arg_step) if arg_step in STEPS else None\n    \"\"\"\n    scip-python python temp indexer `pilot.const.common`/STEPS.: undefined\n    scip-python python temp indexer `pilot.const.common`/STEPS.: undefined\n    \"\"\"\n    current_step_index = STEPS.index(current_step) if current_step in STEPS else None\n    \"\"\"\n    scip-python python temp indexer `pilot.const.common`/STEPS.: undefined\n    scip-python python temp indexer `pilot.const.common`/STEPS.: undefined\n    \"\"\"\n\n    return arg_step_index is not None and current_step_index is not None and current_step_index >= arg_step_index","documentation":"This code checks if the current step should be executed based on the argument passed in and the current step. It returns true if the current step is greater than or equal to the argument step."}},{"key":"scip-python python temp indexer `pilot.utils.utils`/generate_app_data().","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.utils`/generate_app_data().","language":"python","range":[148,0,149,67],"content":"def generate_app_data(args):\n    return {'app_id': args['app_id'], 'app_type': args['app_type']}","file":"/pilot/utils/utils.py","fileHash":"ffe0ebca72a8999ffb0084622af3eb69767ceda2cc6d7e7e68e65ebb2b4408c3","hash":"fe438af671bfd3ce4af56b893c064cb6a7f77baaedc3f64aeb134079fdd6c9fe","processedContent":"def generate_app_data(args):\n    return {'app_id': args['app_id'], 'app_type': args['app_type']}","documentation":"This code defines a function called `generate_app_data` that takes an argument called `args`. The function returns a dictionary with two keys: `app_id` and `app_type`, both of which are values from the `args` dictionary."}},{"key":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.agents.architect`/ARCHITECTURE_STEP.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.architect`/ARCHITECTURE_STEP.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#convo_architecture.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#convo_architecture.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.agents.codemonkey`/CodeMonkey#","attributes":{"range":[5,0,37,20],"symbol":"scip-python python temp indexer `pilot.helpers.agents.codemonkey`/CodeMonkey#","content":"class CodeMonkey(Agent):\n    def __init__(self, project, developer):\n        super().__init__('code_monkey', project)\n        self.developer = developer\n\n    def implement_code_changes(self, convo, task_description, code_changes_description, step, step_index=0):\n        if convo is None:\n            convo = AgentConvo(self)\n\n        # files_needed = convo.send_message('development/task/request_files_for_code_changes.prompt', {\n        #     \"step_description\": code_changes_description,\n        #     \"directory_tree\": self.project.get_directory_tree(True),\n        #     \"step_index\": step_index,\n        #     \"finished_steps\": ', '.join(f\"#{j}\" for j in range(step_index))\n        # }, GET_FILES)\n\n        llm_response = convo.send_message('development/implement_changes.prompt', {\n            \"step_description\": code_changes_description,\n            \"step\": step,\n            \"task_description\": task_description,\n            \"step_index\": step_index,  # todo remove step_index because in debugging we reset steps and it looks confusing in convo\n            \"directory_tree\": self.project.get_directory_tree(True),\n            \"files\": self.project.get_all_coded_files()  # self.project.get_files(files_needed),\n        }, IMPLEMENT_CHANGES)\n        convo.remove_last_x_messages(2)\n\n        changes = self.developer.replace_old_code_comments(llm_response['files'])\n\n        if self.project.skip_until_dev_step != str(self.project.checkpoints['last_development_step'].id):\n            for file_data in changes:\n                self.project.save_file(file_data)\n\n        return convo","file":"/pilot/helpers/agents/CodeMonkey.py","language":"python","fileHash":"dd5902d60834344e0da3de584bec48a802c809da09ac67a4edec0109366e08d1","hash":"f115cb98dd7f64a5bb9ae4d1c0f42006e4952d5ce02d10479bdb7285baf41f96","processedContent":"class CodeMonkey(Agent): #This code defines a class called \"Agent\" that represents a person who is working on a specific project. The class has two attributes: \"role\" and \"project\". The \"role\" attribute specifies the type of work the agent is doing, and the \"project\" attribute specifies the project they are working on.\n    def __init__(self, project, developer):\n        \"\"\"This code defines a constructor for a class that initializes an object with a role (code_monkey) and a project, and sets the developer attribute to the value passed in the constructor.\"\"\"\n        pass\n\n    def implement_code_changes(self, convo, task_description, code_changes_description, step, step_index=0):\n        if convo is None:\n            convo = AgentConvo(self)\n\n        # files_needed = convo.send_message('development/task/request_files_for_code_changes.prompt', {\n        #     \"step_description\": code_changes_description,\n        #     \"directory_tree\": self.project.get_directory_tree(True),\n        #     \"step_index\": step_index,\n        #     \"finished_steps\": ', '.join(f\"#{j}\" for j in range(step_index))\n        # }, GET_FILES)\n\n        llm_response = convo.send_message('development/implement_changes.prompt', {\n            \"step_description\": code_changes_description,\n            \"step\": step,\n            \"task_description\": task_description,\n            \"step_index\": step_index,  # todo remove step_index because in debugging we reset steps and it looks confusing in convo\n            \"directory_tree\": self.project.get_directory_tree(True),\n            \"files\": self.project.get_all_coded_files()  # self.project.get_files(files_needed),\n        }, IMPLEMENT_CHANGES)\n        convo.remove_last_x_messages(2)\n\n        changes = self.developer.replace_old_code_comments(llm_response['files'])\n\n        if self.project.skip_until_dev_step != str(self.project.checkpoints['last_development_step'].id):\n            for file_data in changes:\n                self.project.save_file(file_data)\n\n        return convo","documentation":"This code defines a class called \"CodeMonkey\" that represents a person who is working on a specific project. The class has two attributes: \"role\" and \"project\". The \"implement_code_changes\" method sends a message to the developer to implement changes in the code based on the task description and step index."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.codemonkey`/CodeMonkey#__init__().","attributes":{"range":[6,4,8,34],"symbol":"scip-python python temp indexer `pilot.helpers.agents.codemonkey`/CodeMonkey#__init__().","content":"def __init__(self, project, developer):\n        super().__init__('code_monkey', project)\n        self.developer = developer","file":"/pilot/helpers/agents/CodeMonkey.py","language":"python","fileHash":"dd5902d60834344e0da3de584bec48a802c809da09ac67a4edec0109366e08d1","hash":"f6a88e193aa366b229c255db92abf3c8709270cbd117af05d5100525dc70f60b","processedContent":"def __init__(self, project, developer):\n        super().__init__('code_monkey', project) #This code defines a constructor for a class that initializes an object with a role and a project.\n        self.developer = developer","documentation":"This code defines a constructor for a class that initializes an object with a role (code_monkey) and a project, and sets the developer attribute to the value passed in the constructor."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.codemonkey`/CodeMonkey#implement_code_changes().","attributes":{"range":[10,4,37,20],"symbol":"scip-python python temp indexer `pilot.helpers.agents.codemonkey`/CodeMonkey#implement_code_changes().","content":"def implement_code_changes(self, convo, task_description, code_changes_description, step, step_index=0):\n        if convo is None:\n            convo = AgentConvo(self)\n\n        # files_needed = convo.send_message('development/task/request_files_for_code_changes.prompt', {\n        #     \"step_description\": code_changes_description,\n        #     \"directory_tree\": self.project.get_directory_tree(True),\n        #     \"step_index\": step_index,\n        #     \"finished_steps\": ', '.join(f\"#{j}\" for j in range(step_index))\n        # }, GET_FILES)\n\n        llm_response = convo.send_message('development/implement_changes.prompt', {\n            \"step_description\": code_changes_description,\n            \"step\": step,\n            \"task_description\": task_description,\n            \"step_index\": step_index,  # todo remove step_index because in debugging we reset steps and it looks confusing in convo\n            \"directory_tree\": self.project.get_directory_tree(True),\n            \"files\": self.project.get_all_coded_files()  # self.project.get_files(files_needed),\n        }, IMPLEMENT_CHANGES)\n        convo.remove_last_x_messages(2)\n\n        changes = self.developer.replace_old_code_comments(llm_response['files'])\n\n        if self.project.skip_until_dev_step != str(self.project.checkpoints['last_development_step'].id):\n            for file_data in changes:\n                self.project.save_file(file_data)\n\n        return convo","file":"/pilot/helpers/agents/CodeMonkey.py","language":"python","fileHash":"dd5902d60834344e0da3de584bec48a802c809da09ac67a4edec0109366e08d1","hash":"32eacf050951ec1b4752d5b95a4676c3f9be8160b8dcc3b874b0b22106f35e99","processedContent":"def implement_code_changes(self, convo, task_description, code_changes_description, step, step_index=0):\n        if convo is None:\n            convo = AgentConvo(self) #This code defines a class called `AgentConvo` that represents a conversation with an agent. It includes functions for sending and receiving messages, as well as formatting and rendering prompts. The code also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n\n        # files_needed = convo.send_message('development/task/request_files_for_code_changes.prompt', {\n        #     \"step_description\": code_changes_description,\n        #     \"directory_tree\": self.project.get_directory_tree(True),\n        #     \"step_index\": step_index,\n        #     \"finished_steps\": ', '.join(f\"#{j}\" for j in range(step_index))\n        # }, GET_FILES)\n\n        llm_response = convo.send_message('development/implement_changes.prompt', { #The code defines a function called `send_message` that sends a message in a conversation, retrieving and rendering a prompt template based on the provided name, and then appending the rendered content to a list of messages. It also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n            \"step_description\": code_changes_description,\n            \"step\": step,\n            \"task_description\": task_description,\n            \"step_index\": step_index,  # todo remove step_index because in debugging we reset steps and it looks confusing in convo\n            \"directory_tree\": self.project.get_directory_tree(True), #undefined\n            \"files\": self.project.get_all_coded_files()  # self.project.get_files(files_needed), #undefined\n        }, IMPLEMENT_CHANGES) #undefined\n        convo.remove_last_x_messages(2) #This code removes the last x messages from a list of messages.\n\n        changes = self.developer.replace_old_code_comments(llm_response['files']) #undefined\n\n        if self.project.skip_until_dev_step != str(self.project.checkpoints['last_development_step'].id):\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n        scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n        \"\"\"\n            for file_data in changes:\n                self.project.save_file(file_data) #undefined\n\n        return convo","documentation":"The code defines a function called `implement_code_changes` that sends a message to an agent and receives a response. It then replaces old code comments with new ones and saves the changes to the project files."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.codemonkey`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.codemonkey`/__init__:","range":[0,0,38,0],"content":"from const.function_calls import GET_FILES, IMPLEMENT_CHANGES\nfrom helpers.AgentConvo import AgentConvo\nfrom helpers.Agent import Agent\n\n\nclass CodeMonkey(Agent):\n    def __init__(self, project, developer):\n        super().__init__('code_monkey', project)\n        self.developer = developer\n\n    def implement_code_changes(self, convo, task_description, code_changes_description, step, step_index=0):\n        if convo is None:\n            convo = AgentConvo(self)\n\n        # files_needed = convo.send_message('development/task/request_files_for_code_changes.prompt', {\n        #     \"step_description\": code_changes_description,\n        #     \"directory_tree\": self.project.get_directory_tree(True),\n        #     \"step_index\": step_index,\n        #     \"finished_steps\": ', '.join(f\"#{j}\" for j in range(step_index))\n        # }, GET_FILES)\n\n        llm_response = convo.send_message('development/implement_changes.prompt', {\n            \"step_description\": code_changes_description,\n            \"step\": step,\n            \"task_description\": task_description,\n            \"step_index\": step_index,  # todo remove step_index because in debugging we reset steps and it looks confusing in convo\n            \"directory_tree\": self.project.get_directory_tree(True),\n            \"files\": self.project.get_all_coded_files()  # self.project.get_files(files_needed),\n        }, IMPLEMENT_CHANGES)\n        convo.remove_last_x_messages(2)\n\n        changes = self.developer.replace_old_code_comments(llm_response['files'])\n\n        if self.project.skip_until_dev_step != str(self.project.checkpoints['last_development_step'].id):\n            for file_data in changes:\n                self.project.save_file(file_data)\n\n        return convo\n","file":"/pilot/helpers/agents/CodeMonkey.py","language":"python","fileHash":"dd5902d60834344e0da3de584bec48a802c809da09ac67a4edec0109366e08d1","hash":"dd5902d60834344e0da3de584bec48a802c809da09ac67a4edec0109366e08d1","processedContent":"from const.function_calls import GET_FILES, IMPLEMENT_CHANGES\n\"\"\"\nscip-python python temp indexer `pilot.const.function_calls`/__init__:: The code is a collection of functions and definitions that are used to implement various tasks in a development process. It includes functions for processing user stories, tasks, technologies, commands, and files, as well as definitions for breaking down development tasks into smaller steps and implementing code changes.\nscip-python python temp indexer `pilot.const.function_calls`/GET_FILES.: undefined\nscip-python python temp indexer `pilot.const.function_calls`/IMPLEMENT_CHANGES.: undefined\n\"\"\"\nfrom helpers.AgentConvo import AgentConvo\n\"\"\"\nscip-python python temp indexer `pilot.helpers.agentconvo`/__init__:: The code defines a class called `AgentConvo` that represents a conversation with an agent, including functions for sending and receiving messages, formatting and rendering prompts, and error handling for GPT model token limits.\nscip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#: This code defines a class called `AgentConvo` that represents a conversation with an agent. It includes functions for sending and receiving messages, as well as formatting and rendering prompts. The code also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n\"\"\"\nfrom helpers.Agent import Agent\n\"\"\"\nscip-python python temp indexer `pilot.helpers.agent`/__init__:: This code defines a class called \"Agent\" that represents a person who is working on a specific project. The class has two attributes: \"role\" and \"project\". The \"role\" attribute specifies the type of work the agent is doing, and the \"project\" attribute specifies the project they are working on.\nscip-python python temp indexer `pilot.helpers.agent`/Agent#: This code defines a class called \"Agent\" that represents a person who is working on a specific project. The class has two attributes: \"role\" and \"project\". The \"role\" attribute specifies the type of work the agent is doing, and the \"project\" attribute specifies the project they are working on.\n\"\"\"\n\n\nclass CodeMonkey(Agent):\n    \"\"\"This code defines a class called \"CodeMonkey\" that represents a person who is working on a specific project. The class has two attributes: \"role\" and \"project\". The \"implement_code_changes\" method sends a message to the developer to implement changes in the code based on the task description and step index.\"\"\"\n    pass\n","documentation":"The code defines a class called \"CodeMonkey\" that represents a person who is working on a specific project. The class has two attributes: \"role\" and \"project\". The \"implement_code_changes\" method sends a message to the developer to implement changes in the code based on the task description and step index."}},{"key":"scip-python python temp indexer `pilot.const.function_calls`/GET_FILES.","attributes":{"symbol":"scip-python python temp indexer `pilot.const.function_calls`/GET_FILES.","language":"python"}},{"key":"scip-python python temp indexer `pilot.const.function_calls`/IMPLEMENT_CHANGES.","attributes":{"symbol":"scip-python python temp indexer `pilot.const.function_calls`/IMPLEMENT_CHANGES.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.agents.codemonkey`/CodeMonkey#developer.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.codemonkey`/CodeMonkey#developer.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#__init__().","attributes":{"range":[35,4,39,38],"symbol":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#__init__().","content":"def __init__(self, project):\n        super().__init__('full_stack_developer', project)\n        self.run_command = None\n        self.save_dev_steps = True\n        self.debugger = Debugger(self)","file":"/pilot/helpers/agents/Developer.py","language":"python","fileHash":"0d85d908cc038e7de0ad336ba7e9ed864822bd6914b09ac5d9e850fd95263181","hash":"433f9a3794448b6d40bce8e2eeeae14e75509165bd874a37e9521e437186ee7b","processedContent":"def __init__(self, project):\n        super().__init__('full_stack_developer', project) #This code defines a constructor for a class that initializes an object with a role and a project.\n        self.run_command = None\n        self.save_dev_steps = True\n        self.debugger = Debugger(self)","documentation":"This code defines a constructor for a class that initializes an object with a role and a project, sets the object's run command to None, saves developer steps, and initializes a debugger."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#implement_task().","attributes":{"range":[81,4,139,21],"symbol":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#implement_task().","content":"def implement_task(self, i, development_task=None):\n        print(color_green_bold(f'Implementing task #{i + 1}: ') + color_green(f' {development_task[\"description\"]}\\n'))\n        self.project.dot_pilot_gpt.chat_log_folder(i + 1)\n\n        convo_dev_task = AgentConvo(self)\n        convo_dev_task.send_message('development/task/breakdown.prompt', {\n            \"name\": self.project.args['name'],\n            \"app_type\": self.project.args['app_type'],\n            \"app_summary\": self.project.project_description,\n            \"clarifications\": self.project.clarifications,\n            \"user_stories\": self.project.user_stories,\n            \"user_tasks\": self.project.user_tasks,\n            \"technologies\": self.project.architecture,\n            \"array_of_objects_to_string\": array_of_objects_to_string,  # TODO check why is this here\n            \"directory_tree\": self.project.get_directory_tree(True),\n            \"current_task_index\": i,\n            \"development_tasks\": self.project.development_plan,\n            \"files\": self.project.get_all_coded_files(),\n            \"task_type\": 'feature' if self.project.finished else 'app'\n        })\n\n        response = convo_dev_task.send_message('development/parse_task.prompt', {\n            'running_processes': running_processes,\n            'os': platform.system(),\n        }, IMPLEMENT_TASK)\n        steps = response['tasks']\n        convo_dev_task.remove_last_x_messages(2)\n\n        completed_steps = []\n\n        while True:\n            result = self.execute_task(convo_dev_task,\n                                       development_task['description'],\n                                       steps,\n                                       development_task=development_task,\n                                       continue_development=True,\n                                       is_root_task=True,\n                                       continue_from_step=len(completed_steps))\n\n            if result['success']:\n                break\n\n            if 'step_index' in result:\n                result['os'] = platform.system()\n                step_index = result['step_index']\n                completed_steps = steps[:step_index + 1]\n                result['completed_steps'] = completed_steps\n                result['current_step'] = steps[step_index]\n                result['next_steps'] = steps[step_index + 1:]\n                result['current_step_index'] = step_index\n\n                convo_dev_task.remove_last_x_messages(2)\n                # todo before updating task first check if update is needed\n                response = convo_dev_task.send_message('development/task/update_task.prompt', result, IMPLEMENT_TASK)\n                steps = completed_steps + response['tasks']\n\n            else:\n                logger.warning('Testing at end of task failed')\n                break","file":"/pilot/helpers/agents/Developer.py","language":"python","fileHash":"0d85d908cc038e7de0ad336ba7e9ed864822bd6914b09ac5d9e850fd95263181","hash":"c94d534bafac6345c10ccfd71cc28022d12a38cbfda7f6a40f85e14ec6b4bc58","processedContent":"def implement_task(self, i, development_task=None):\n        print(color_green_bold(f'Implementing task #{i + 1}: ') + color_green(f' {development_task[\"description\"]}\\n'))\n        \"\"\"\n        scip-python python temp indexer `pilot.utils.style`/color_green_bold.: undefined\n        scip-python python temp indexer `pilot.utils.style`/color_green.: undefined\n        \"\"\"\n        self.project.dot_pilot_gpt.chat_log_folder(i + 1) #undefined\n\n        convo_dev_task = AgentConvo(self) #This code defines a class called `AgentConvo` that represents a conversation with an agent. It includes functions for sending and receiving messages, as well as formatting and rendering prompts. The code also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n        convo_dev_task.send_message('development/task/breakdown.prompt', { #The code defines a function called `send_message` that sends a message in a conversation, retrieving and rendering a prompt template based on the provided name, and then appending the rendered content to a list of messages. It also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n            \"name\": self.project.args['name'], #undefined\n            \"app_type\": self.project.args['app_type'], #undefined\n            \"app_summary\": self.project.project_description, #undefined\n            \"clarifications\": self.project.clarifications, #undefined\n            \"user_stories\": self.project.user_stories, #undefined\n            \"user_tasks\": self.project.user_tasks, #undefined\n            \"technologies\": self.project.architecture, #undefined\n            \"array_of_objects_to_string\": array_of_objects_to_string,  # TODO check why is this here #This code takes an array of objects and returns a string representation of the array, with each object's key-value pairs separated by a newline.\n            \"directory_tree\": self.project.get_directory_tree(True), #undefined\n            \"current_task_index\": i,\n            \"development_tasks\": self.project.development_plan, #undefined\n            \"files\": self.project.get_all_coded_files(), #undefined\n            \"task_type\": 'feature' if self.project.finished else 'app' #undefined\n        })\n\n        response = convo_dev_task.send_message('development/parse_task.prompt', { #The code defines a function called `send_message` that sends a message in a conversation, retrieving and rendering a prompt template based on the provided name, and then appending the rendered content to a list of messages. It also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n            'running_processes': running_processes, #undefined\n            'os': platform.system(),\n            \"\"\"\n            scip-python python python-stdlib 3.11 platform/__init__:: undefined\n            scip-python python python-stdlib 3.11 platform/system().: undefined\n            \"\"\"\n        }, IMPLEMENT_TASK) #undefined\n        steps = response['tasks']\n        convo_dev_task.remove_last_x_messages(2) #This code removes the last x messages from a list of messages.\n\n        completed_steps = []\n\n        while True:\n            result = self.execute_task(convo_dev_task, #The code defines a function called `execute_task` that takes in a task description and step index, and executes the steps in the task until it succeeds or reaches a timeout. It also checks if the command was successful by checking the exit code of the process that ran the command.\n                                       development_task['description'],\n                                       steps,\n                                       development_task=development_task,\n                                       continue_development=True,\n                                       is_root_task=True,\n                                       continue_from_step=len(completed_steps))\n\n            if result['success']:\n                break\n\n            if 'step_index' in result:\n                result['os'] = platform.system()\n                \"\"\"\n                scip-python python python-stdlib 3.11 platform/__init__:: undefined\n                scip-python python python-stdlib 3.11 platform/system().: undefined\n                \"\"\"\n                step_index = result['step_index']\n                completed_steps = steps[:step_index + 1]\n                result['completed_steps'] = completed_steps\n                result['current_step'] = steps[step_index]\n                result['next_steps'] = steps[step_index + 1:]\n                result['current_step_index'] = step_index\n\n                convo_dev_task.remove_last_x_messages(2) #This code removes the last x messages from a list of messages.\n                # todo before updating task first check if update is needed\n                response = convo_dev_task.send_message('development/task/update_task.prompt', result, IMPLEMENT_TASK)\n                \"\"\"\n                scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().: The code defines a function called `send_message` that sends a message in a conversation, retrieving and rendering a prompt template based on the provided name, and then appending the rendered content to a list of messages. It also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n                scip-python python temp indexer `pilot.const.function_calls`/IMPLEMENT_TASK.: undefined\n                \"\"\"\n                steps = completed_steps + response['tasks']\n\n            else:\n                logger.warning('Testing at end of task failed')\n                \"\"\"\n                scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n                scip-python python python-stdlib 3.11 logging/Logger#warning().: undefined\n                \"\"\"\n                break","documentation":"The code defines a function called `implement_task` that takes in a task description and step index, and executes the steps in the task until it succeeds or reaches a timeout. It also checks if the command was successful by checking the exit code of the process that ran the command."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#replace_old_code_comments().","attributes":{"range":[141,4,155,34],"symbol":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#replace_old_code_comments().","content":"def replace_old_code_comments(self, files_with_changes):\n        files_with_comments = [{**file, 'comments': [line for line in file['content'].split('\\n') if '[OLD CODE]' in line]} for file in files_with_changes]\n\n        for file in files_with_comments:\n            if len(file['comments']) > 0:\n                fully_coded_file_convo = AgentConvo(self)\n                fully_coded_file_response = fully_coded_file_convo.send_message(\n                    'development/get_fully_coded_file.prompt', {\n                        'file': self.project.get_files([file['path']])[0],\n                        'new_file': file,\n                    }, GET_FULLY_CODED_FILE)\n\n                file['content'] = fully_coded_file_response['file_content']\n\n        return files_with_comments","file":"/pilot/helpers/agents/Developer.py","language":"python","fileHash":"0d85d908cc038e7de0ad336ba7e9ed864822bd6914b09ac5d9e850fd95263181","hash":"ff0ed09791c6dd97434f68bcdda9257200d4d9091d93874668fa0ecd9ac3eb80","processedContent":"def replace_old_code_comments(self, files_with_changes):\n        files_with_comments = [{**file, 'comments': [line for line in file['content'].split('\\n') if '[OLD CODE]' in line]} for file in files_with_changes]\n\n        for file in files_with_comments:\n            if len(file['comments']) > 0:\n                fully_coded_file_convo = AgentConvo(self) #This code defines a class called `AgentConvo` that represents a conversation with an agent. It includes functions for sending and receiving messages, as well as formatting and rendering prompts. The code also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n                fully_coded_file_response = fully_coded_file_convo.send_message( #The code defines a function called `send_message` that sends a message in a conversation, retrieving and rendering a prompt template based on the provided name, and then appending the rendered content to a list of messages. It also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n                    'development/get_fully_coded_file.prompt', {\n                        'file': self.project.get_files([file['path']])[0], #undefined\n                        'new_file': file,\n                    }, GET_FULLY_CODED_FILE) #undefined\n\n                file['content'] = fully_coded_file_response['file_content']\n\n        return files_with_comments","documentation":"This code defines a function called `replace_old_code_comments` that takes a list of files with changes and replaces any comments containing the string \"[OLD CODE]\" with fully coded versions of those comments."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_code_change().","attributes":{"range":[157,4,179,32],"symbol":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_code_change().","content":"def step_code_change(self, convo, task_description, step, i, test_after_code_changes):\n        if 'code_change_description' in step:\n            # TODO this should be refactored so it always uses the same function call\n            print(f'Implementing code changes for `{step[\"code_change_description\"]}`')\n            code_monkey = CodeMonkey(self.project, self)\n            updated_convo = code_monkey.implement_code_changes(convo, task_description, step['code_change_description'],\n                                                               step, i)\n            if test_after_code_changes:\n                return self.test_code_changes(code_monkey, updated_convo)\n            else:\n                return {\"success\": True}\n\n        # TODO fix this - the problem is in GPT response that sometimes doesn't return the correct JSON structure\n        if 'code_change' not in step:\n            data = step\n        else:\n            data = step['code_change']\n\n        data = self.replace_old_code_comments([data])[0]\n\n        self.project.save_file(data)\n        # TODO end\n        return {\"success\": True}","file":"/pilot/helpers/agents/Developer.py","language":"python","fileHash":"0d85d908cc038e7de0ad336ba7e9ed864822bd6914b09ac5d9e850fd95263181","hash":"d497e237991fd4ef52b1128defac1a50b2aadb27952b2b0fa1d5d371af5fd620","processedContent":"def step_code_change(self, convo, task_description, step, i, test_after_code_changes):\n        if 'code_change_description' in step:\n            # TODO this should be refactored so it always uses the same function call\n            print(f'Implementing code changes for `{step[\"code_change_description\"]}`')\n            code_monkey = CodeMonkey(self.project, self)\n            \"\"\"\n            scip-python python temp indexer `pilot.helpers.agents.codemonkey`/CodeMonkey#: This code defines a class called \"CodeMonkey\" that represents a person who is working on a specific project. The class has two attributes: \"role\" and \"project\". The \"implement_code_changes\" method sends a message to the developer to implement changes in the code based on the task description and step index.\n            scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n            \"\"\"\n            updated_convo = code_monkey.implement_code_changes(convo, task_description, step['code_change_description'], #The code defines a function called `implement_code_changes` that sends a message to an agent and receives a response. It then replaces old code comments with new ones and saves the changes to the project files.\n                                                               step, i)\n            if test_after_code_changes:\n                return self.test_code_changes(code_monkey, updated_convo) #This code is a function that tests the changes made to the code by a developer. It sends a message to the user asking for their input on whether the changes were successful or not. If the user provides feedback, the code will debug the issue and send another message to the user for further assistance.\n            else:\n                return {\"success\": True}\n\n        # TODO fix this - the problem is in GPT response that sometimes doesn't return the correct JSON structure\n        if 'code_change' not in step:\n            data = step\n        else:\n            data = step['code_change']\n\n        data = self.replace_old_code_comments([data])[0] #This code defines a function called `replace_old_code_comments` that takes a list of files with changes and replaces any comments containing the string \"[OLD CODE]\" with fully coded versions of those comments.\n\n        self.project.save_file(data) #undefined\n        # TODO end\n        return {\"success\": True}","documentation":"This code defines a function called `step_code_change` that implements changes to the code based on a task description and step index. It uses a class called `CodeMonkey` to send messages to a developer and receive feedback on the changes made. The function then replaces old code comments with new ones and saves the changes to the project files."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_human_intervention().","attributes":{"range":[201,4,254,27],"symbol":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_human_intervention().","content":"def step_human_intervention(self, convo, step: dict):\n        \"\"\"\n        :param convo:\n        :param step: {'human_intervention_description': 'some description'}\n        :return: {\n          'success': bool\n          'user_input': string_from_human\n        }\n        \"\"\"\n        logger.info('Human intervention needed%s: %s',\n                    '' if self.run_command is None else f' for command `{self.run_command}`',\n                    step['human_intervention_description'])\n\n        while True:\n            human_intervention_description = step['human_intervention_description']\n\n            if not self.run_command:\n                self.get_run_command(convo)\n\n            if self.run_command:\n                if (self.project.ipc_client_instance is None or self.project.ipc_client_instance.client is None):\n                    human_intervention_description += color_yellow_bold('\\n\\nIf you want to run the app, just type \"r\" and press ENTER and that will run `' + self.run_command + '`')\n                else:\n                    print(self.run_command, type='run_command')\n\n            response = self.project.ask_for_human_intervention('I need human intervention:',\n                human_intervention_description,\n                cbs={\n                    'r': lambda conv: run_command_until_success(conv,\n                                                                self.run_command,\n                                                                # name the process so the LLM can kill it\n                                                                command_id='app',\n                                                                # If the app doesn't crash in the first 1st second\n                                                                # assume it's good and leave it running.\n                                                                # If timeout is None the conversation can't continue\n                                                                timeout=None,\n                                                                force=True,\n                                                                return_cli_response=True)\n                },\n                convo=convo)\n\n            logger.info('human response: %s', response)\n            if 'user_input' not in response:\n                continue\n\n            if response['user_input'] == 'continue':\n                response['success'] = True\n            else:\n                response['success'] = self.debugger.debug(convo,\n                                                          user_input=response['user_input'],\n                                                          issue_description=step['human_intervention_description'])\n                # TODO add review\n\n            return response","file":"/pilot/helpers/agents/Developer.py","language":"python","fileHash":"0d85d908cc038e7de0ad336ba7e9ed864822bd6914b09ac5d9e850fd95263181","hash":"87de16e40399c1d462e9101ac4ebec606f196f76c34c8a236a1aa1c691aaaa53","processedContent":"def step_human_intervention(self, convo, step: dict):\n        \"\"\"\n        :param convo:\n        :param step: {'human_intervention_description': 'some description'}\n        :return: {\n          'success': bool\n          'user_input': string_from_human\n        }\n        \"\"\"\n        logger.info('Human intervention needed%s: %s',\n        \"\"\"\n        scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n        scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n        \"\"\"\n                    '' if self.run_command is None else f' for command `{self.run_command}`',\n                    \"\"\"\n                    scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#run_command.: undefined\n                    scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#run_command.: undefined\n                    \"\"\"\n                    step['human_intervention_description'])\n\n        while True:\n            human_intervention_description = step['human_intervention_description']\n\n            if not self.run_command: #undefined\n                self.get_run_command(convo) #This code defines a function called `get_run_command` that retrieves a command to run from a conversation object. It uses regular expressions to extract the command from the conversation, and then executes it.\n\n            if self.run_command: #undefined\n                if (self.project.ipc_client_instance is None or self.project.ipc_client_instance.client is None):\n                \"\"\"\n                scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n                scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n                \"\"\"\n                    human_intervention_description += color_yellow_bold('\\n\\nIf you want to run the app, just type \"r\" and press ENTER and that will run `' + self.run_command + '`')\n                    \"\"\"\n                    scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#run_command.: undefined\n                    scip-python python temp indexer `pilot.utils.style`/color_yellow_bold.: undefined\n                    \"\"\"\n                else:\n                    print(self.run_command, type='run_command') #undefined\n\n            response = self.project.ask_for_human_intervention('I need human intervention:', #undefined\n                human_intervention_description,\n                cbs={\n                    'r': lambda conv: run_command_until_success(conv, #This code defines a function called `run_command_until_success` that runs a command until it succeeds or reaches a timeout. It also checks if the command was successful by checking the exit code of the process that ran the command.\n                                                                self.run_command, #undefined\n                                                                # name the process so the LLM can kill it\n                                                                command_id='app',\n                                                                # If the app doesn't crash in the first 1st second\n                                                                # assume it's good and leave it running.\n                                                                # If timeout is None the conversation can't continue\n                                                                timeout=None,\n                                                                force=True,\n                                                                return_cli_response=True)\n                },\n                convo=convo)\n\n            logger.info('human response: %s', response)\n            \"\"\"\n            scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n            scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n            \"\"\"\n            if 'user_input' not in response:\n                continue\n\n            if response['user_input'] == 'continue':\n                response['success'] = True\n            else:\n                response['success'] = self.debugger.debug(convo,\n                \"\"\"\n                scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#debugger.: undefined\n                scip-python python temp indexer `pilot.helpers.debugger`/Debugger#debug().: This code defines a function called `debug` that takes a conversation object and various other parameters, and then uses the LLM to generate a debug plan for the user. The function then sends the debug plan to the user and waits for their response, which is then used to update the debug plan and continue debugging until the issue is resolved or the user decides to stop.\n                \"\"\"\n                                                          user_input=response['user_input'],\n                                                          issue_description=step['human_intervention_description'])\n                # TODO add review\n\n            return response","documentation":"The code defines a function called `step_human_intervention` that handles human intervention during the development process. It retrieves a command to run from a conversation object, runs the command until it succeeds or reaches a timeout, and then updates the debug plan based on the user's response."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#get_run_command().","attributes":{"range":[280,4,294,60],"symbol":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#get_run_command().","content":"def get_run_command(self, convo):\n        llm_response = convo.send_message('development/get_run_command.prompt', {}, COMMAND_TO_RUN)\n        self.run_command = llm_response['command']\n\n        # Pattern for triple backtick code block with optional language\n        triple_backtick_pattern = r\"```(?:\\w+\\n)?(.*?)```\"\n        triple_match = re.search(triple_backtick_pattern, self.run_command, re.DOTALL)\n        # Pattern for single backtick\n        single_backtick_pattern = r\"`(.*?)`\"\n        single_match = re.search(single_backtick_pattern, self.run_command, re.DOTALL)\n\n        if triple_match:\n            self.run_command = triple_match.group(1).strip()\n        elif single_match:\n            self.run_command = single_match.group(1).strip()","file":"/pilot/helpers/agents/Developer.py","language":"python","fileHash":"0d85d908cc038e7de0ad336ba7e9ed864822bd6914b09ac5d9e850fd95263181","hash":"76d86c035d000c808a008341ac811754fa10f6d9364a860d65b0a2eac54c725e","processedContent":"def get_run_command(self, convo):\n        llm_response = convo.send_message('development/get_run_command.prompt', {}, COMMAND_TO_RUN) #undefined\n        self.run_command = llm_response['command'] #undefined\n\n        # Pattern for triple backtick code block with optional language\n        triple_backtick_pattern = r\"```(?:\\w+\\n)?(.*?)```\"\n        triple_match = re.search(triple_backtick_pattern, self.run_command, re.DOTALL)\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#run_command.: undefined\n        scip-python python python-stdlib 3.11 re/__init__:: undefined\n        scip-python python python-stdlib 3.11 re/__init__:: undefined\n        scip-python python python-stdlib 3.11 re/search().: undefined\n        scip-python python python-stdlib 3.11 re/DOTALL.: undefined\n        \"\"\"\n        # Pattern for single backtick\n        single_backtick_pattern = r\"`(.*?)`\"\n        single_match = re.search(single_backtick_pattern, self.run_command, re.DOTALL)\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#run_command.: undefined\n        scip-python python python-stdlib 3.11 re/__init__:: undefined\n        scip-python python python-stdlib 3.11 re/__init__:: undefined\n        scip-python python python-stdlib 3.11 re/search().: undefined\n        scip-python python python-stdlib 3.11 re/DOTALL.: undefined\n        \"\"\"\n\n        if triple_match:\n            self.run_command = triple_match.group(1).strip()\n            \"\"\"\n            scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#run_command.: undefined\n            scip-python python python-stdlib 3.11 re/Match#group().: undefined\n            \"\"\"\n        elif single_match:\n            self.run_command = single_match.group(1).strip()","documentation":"This code defines a function called `get_run_command` that retrieves a command to run from a conversation object. It uses regular expressions to extract the command from the conversation, and then executes it."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#task_postprocessing().","attributes":{"range":[296,4,317,26],"symbol":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#task_postprocessing().","content":"def task_postprocessing(self, convo, development_task, continue_development, task_result, last_branch_name):\n        # TODO: why does `run_command` belong to the Developer class, rather than just being passed?\n        #       ...It's set by execute_task() -> task_postprocessing(), but that is called by various sources.\n        #       What is it at step_human_intervention()?\n        self.get_run_command(convo)\n\n        if development_task is not None:\n            convo.remove_last_x_messages(2)\n            detailed_user_review_goal = convo.send_message('development/define_user_review_goal.prompt', {\n                'os': platform.system()\n            }, should_log_message=False)\n            convo.remove_last_x_messages(2)\n\n        try:\n            if continue_development:\n                continue_description = detailed_user_review_goal if detailed_user_review_goal is not None else None\n                return self.continue_development(convo, last_branch_name, continue_description, development_task)\n        except TooDeepRecursionError as e:\n            logger.warning('Too deep recursion error. Call dev_help_needed() for human_intervention: %s', e.message)\n            return self.dev_help_needed({\"type\": \"human_intervention\", \"human_intervention_description\": e.message})\n\n        return task_result","file":"/pilot/helpers/agents/Developer.py","language":"python","fileHash":"0d85d908cc038e7de0ad336ba7e9ed864822bd6914b09ac5d9e850fd95263181","hash":"3eb731b8406e9f756a296b3ecc9d9da436b775cdae49b42b9138f7b2aecca2b3","processedContent":"def task_postprocessing(self, convo, development_task, continue_development, task_result, last_branch_name):\n        # TODO: why does `run_command` belong to the Developer class, rather than just being passed?\n        #       ...It's set by execute_task() -> task_postprocessing(), but that is called by various sources.\n        #       What is it at step_human_intervention()?\n        self.get_run_command(convo) #This code defines a function called `get_run_command` that retrieves a command to run from a conversation object. It uses regular expressions to extract the command from the conversation, and then executes it.\n\n        if development_task is not None:\n            convo.remove_last_x_messages(2)\n            detailed_user_review_goal = convo.send_message('development/define_user_review_goal.prompt', {\n                'os': platform.system()\n                \"\"\"\n                scip-python python python-stdlib 3.11 platform/__init__:: undefined\n                scip-python python python-stdlib 3.11 platform/system().: undefined\n                \"\"\"\n            }, should_log_message=False)\n            convo.remove_last_x_messages(2)\n\n        try:\n            if continue_development:\n                continue_description = detailed_user_review_goal if detailed_user_review_goal is not None else None\n                return self.continue_development(convo, last_branch_name, continue_description, development_task) #undefined\n        except TooDeepRecursionError as e: #This code defines a custom exception class called \"TooDeepRecursionError\" that is raised when the recursion depth exceeds a certain limit.\n            logger.warning('Too deep recursion error. Call dev_help_needed() for human_intervention: %s', e.message)\n            \"\"\"\n            scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n            scip-python python python-stdlib 3.11 logging/Logger#warning().: undefined\n            scip-python python temp indexer `pilot.helpers.exceptions.toodeeprecursionerror`/TooDeepRecursionError#message.: undefined\n            \"\"\"\n            return self.dev_help_needed({\"type\": \"human_intervention\", \"human_intervention_description\": e.message})\n            \"\"\"\n            scip-python python temp indexer `pilot.helpers.exceptions.toodeeprecursionerror`/TooDeepRecursionError#message.: undefined\n            scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#dev_help_needed().: This code defines a function called `dev_help_needed` that retrieves user input from a database, styles the question, and saves the response to the database.\n            \"\"\"\n\n        return task_result","documentation":"This code defines a function called `task_postprocessing` that retrieves a command to run from a conversation object, executes it, and then continues the development process if necessary."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#should_retry_step_implementation().","attributes":{"range":[319,4,337,48],"symbol":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#should_retry_step_implementation().","content":"def should_retry_step_implementation(self, step, step_implementation_try):\n        if step_implementation_try >= MAX_COMMAND_DEBUG_TRIES:\n            self.dev_help_needed(step)\n\n        print(color_red_bold('\\n--------- LLM Reached Token Limit ----------'))\n        print(color_red_bold('Can I retry implementing the entire development step?'))\n\n        answer = ''\n        while answer != 'y':\n            answer = styled_text(\n                self.project,\n                'Type y/n'\n            )\n\n            logger.info(\"Retry step implementation? %s\", answer)\n            if answer == 'n':\n                return self.dev_help_needed(step)\n\n        return {\"success\": False, \"retry\": True}","file":"/pilot/helpers/agents/Developer.py","language":"python","fileHash":"0d85d908cc038e7de0ad336ba7e9ed864822bd6914b09ac5d9e850fd95263181","hash":"b9a3355e3d0f8f6c846ac01e6ad95d64a16615b1ae6006127e851d7a55735407","processedContent":"def should_retry_step_implementation(self, step, step_implementation_try):\n        if step_implementation_try >= MAX_COMMAND_DEBUG_TRIES: #undefined\n            self.dev_help_needed(step) #This code defines a function called `dev_help_needed` that retrieves user input from a database, styles the question, and saves the response to the database.\n\n        print(color_red_bold('\\n--------- LLM Reached Token Limit ----------')) #undefined\n        print(color_red_bold('Can I retry implementing the entire development step?')) #undefined\n\n        answer = ''\n        while answer != 'y':\n            answer = styled_text( #This code defines a function called `styled_text` that retrieves user input from a database, styles the question, and saves the response to the database.\n                self.project, #undefined\n                'Type y/n'\n            )\n\n            logger.info(\"Retry step implementation? %s\", answer)\n            \"\"\"\n            scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n            scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n            \"\"\"\n            if answer == 'n':\n                return self.dev_help_needed(step) #This code defines a function called `dev_help_needed` that retrieves user input from a database, styles the question, and saves the response to the database.\n\n        return {\"success\": False, \"retry\": True}","documentation":"This code defines a function called `should_retry_step_implementation` that checks if the maximum number of command debug tries has been reached. If it has, it prompts the user to retry implementing the entire development step. The user's response is then checked, and if they say no, the function returns a dictionary with a \"success\" key set to False and a \"retry\" key set to True."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#dev_help_needed().","attributes":{"range":[339,4,375,54],"symbol":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#dev_help_needed().","content":"def dev_help_needed(self, step):\n\n        if step['type'] == 'command':\n            help_description = (\n                        color_red_bold('I tried running the following command but it doesn\\'t seem to work:\\n\\n') +\n                        color_white_bold(step['command']['command']) +\n                        color_red_bold('\\n\\nCan you please make it work?'))\n        elif step['type'] == 'code_change':\n            help_description = step['code_change_description']\n        elif step['type'] == 'human_intervention':\n            help_description = step['human_intervention_description']\n\n        # TODO remove this\n        def extract_substring(s):\n            start_idx = s.find('```')\n            end_idx = s.find('```', start_idx + 3)\n\n            if start_idx != -1 and end_idx != -1:\n                return s[start_idx + 3:end_idx]\n            else:\n                return s\n\n        # TODO end\n\n        answer = ''\n        while answer.lower() != 'continue':\n            print(color_red_bold('\\n----------------------------- I need your help ------------------------------'))\n            print(extract_substring(str(help_description)))\n            print(color_red_bold('\\n-----------------------------------------------------------------------------'))\n            print('continue', type='button')\n            answer = styled_text(\n                self.project,\n                WHEN_USER_DONE\n            )\n            logger.info(\"help needed: %s\", answer)\n\n        return {\"success\": True, \"user_input\": answer}","file":"/pilot/helpers/agents/Developer.py","language":"python","fileHash":"0d85d908cc038e7de0ad336ba7e9ed864822bd6914b09ac5d9e850fd95263181","hash":"076bc760a78c97632584dbf3675a577ffb351061f65ac4563fb38ed4a16f88c8","processedContent":"def dev_help_needed(self, step):\n\n        if step['type'] == 'command':\n            help_description = (\n                        color_red_bold('I tried running the following command but it doesn\\'t seem to work:\\n\\n') + #undefined\n                        color_white_bold(step['command']['command']) + #undefined\n                        color_red_bold('\\n\\nCan you please make it work?')) #undefined\n        elif step['type'] == 'code_change':\n            help_description = step['code_change_description']\n        elif step['type'] == 'human_intervention':\n            help_description = step['human_intervention_description']\n\n        # TODO remove this\n        def extract_substring(s):\n            \"\"\"This code extracts a substring from a given string by finding the indices of the ``` characters and returning the substring between them.\"\"\"\n            pass\n\n        # TODO end\n\n        answer = ''\n        while answer.lower() != 'continue':\n            print(color_red_bold('\\n----------------------------- I need your help ------------------------------')) #undefined\n            print(extract_substring(str(help_description))) #This code extracts a substring from a given string by finding the indices of the ``` characters and returning the substring between them.\n            print(color_red_bold('\\n-----------------------------------------------------------------------------')) #undefined\n            print('continue', type='button')\n            answer = styled_text( #This code defines a function called `styled_text` that retrieves user input from a database, styles the question, and saves the response to the database.\n                self.project, #undefined\n                WHEN_USER_DONE #undefined\n            )\n            logger.info(\"help needed: %s\", answer)\n            \"\"\"\n            scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n            scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n            \"\"\"\n\n        return {\"success\": True, \"user_input\": answer}","documentation":"This code defines a function called `dev_help_needed` that retrieves user input from a database, styles the question, and saves the response to the database."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#extract_substring().","attributes":{"range":[352,8,359,24],"symbol":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#extract_substring().","content":"def extract_substring(s):\n            start_idx = s.find('```')\n            end_idx = s.find('```', start_idx + 3)\n\n            if start_idx != -1 and end_idx != -1:\n                return s[start_idx + 3:end_idx]\n            else:\n                return s","file":"/pilot/helpers/agents/Developer.py","language":"python","fileHash":"0d85d908cc038e7de0ad336ba7e9ed864822bd6914b09ac5d9e850fd95263181","hash":"147a245763e5036415bf5c753e15870a9f10dce9c66b8a697fd31d939199b1c2","processedContent":"def extract_substring(s):\n            start_idx = s.find('```')\n            end_idx = s.find('```', start_idx + 3)\n\n            if start_idx != -1 and end_idx != -1:\n                return s[start_idx + 3:end_idx]\n            else:\n                return s","documentation":"This code extracts a substring from a given string by finding the indices of the ``` characters and returning the substring between them."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#execute_task().","attributes":{"range":[377,4,450,109],"symbol":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#execute_task().","content":"def execute_task(self, convo, task_description, task_steps, test_command=None, reset_convo=True,\n                     test_after_code_changes=True, continue_development=False,\n                     development_task=None, is_root_task=False, continue_from_step=0):\n        function_uuid = str(uuid.uuid4())\n        convo.save_branch(function_uuid)\n\n        for (i, step) in enumerate(task_steps):\n            # Skip steps before continue_from_step\n            if i < continue_from_step:\n                continue\n            logger.info('---------- execute_task() step #%d: %s', i, step)\n\n            result = None\n            step_implementation_try = 0\n            need_to_see_output = 'need_to_see_output' in step and step['need_to_see_output']\n\n            while True:\n                try:\n                    if reset_convo:\n                        convo.load_branch(function_uuid)\n\n                    if step['type'] == 'command':\n                        result = self.step_command_run(convo, step, i, success_with_cli_response=need_to_see_output)\n                        # if need_to_see_output and 'cli_response' in result:\n                        #     result['user_input'] = result['cli_response']\n\n                    elif step['type'] == 'code_change':\n                        result = self.step_code_change(convo, task_description, step, i, test_after_code_changes)\n\n                    elif step['type'] == 'human_intervention':\n                        result = self.step_human_intervention(convo, step)\n\n                    # TODO background_command - if we run commands in background we should have way to kill processes\n                    #  and that should be added to function_calls.py DEBUG_STEPS_BREAKDOWN and IMPLEMENT_TASK\n                    # elif step['type'] == 'kill_process':\n                    #     terminate_named_process(step['kill_process'])\n                    #     result = {'success': True}\n\n                    logger.info('  step result: %s', result)\n\n                    if (not result['success']) or (need_to_see_output and result.get(\"user_input\") != \"SKIP\"):\n                        result['step'] = step\n                        result['step_index'] = i\n                        return result\n\n                    if test_command is not None and ('check_if_fixed' not in step or step['check_if_fixed']):\n                        logger.info('check_if_fixed: %s', test_command)\n                        result = self.step_test(convo, test_command)\n                        logger.info('task result: %s', result)\n                        return result\n\n                    break\n                except TokenLimitError as e:\n                    if is_root_task:\n                        response = self.should_retry_step_implementation(step, step_implementation_try)\n                        if 'retry' in response:\n                            # TODO we can rewind this convo even more\n                            convo.load_branch(function_uuid)\n                            continue\n                        elif 'success' in response:\n                            result = response\n                            break\n                    else:\n                        raise e\n                except TooDeepRecursionError as e:\n                    if is_root_task:\n                        result = self.dev_help_needed(step)\n                        break\n                    else:\n                        raise e\n\n        result = {\"success\": True}  # if all steps are finished, the task has been successfully implemented\n        convo.load_branch(function_uuid)\n        return self.task_postprocessing(convo, development_task, continue_development, result, function_uuid)","file":"/pilot/helpers/agents/Developer.py","language":"python","fileHash":"0d85d908cc038e7de0ad336ba7e9ed864822bd6914b09ac5d9e850fd95263181","hash":"973724285700e4ae605cc909627426e048d557c707f7a6fe2217f9019f247601","processedContent":"def execute_task(self, convo, task_description, task_steps, test_command=None, reset_convo=True,\n                     test_after_code_changes=True, continue_development=False,\n                     development_task=None, is_root_task=False, continue_from_step=0):\n        function_uuid = str(uuid.uuid4())\n        \"\"\"\n        scip-python python python-stdlib 3.11 uuid/__init__:: undefined\n        scip-python python python-stdlib 3.11 uuid/uuid4().: undefined\n        \"\"\"\n        convo.save_branch(function_uuid)\n\n        for (i, step) in enumerate(task_steps):\n            # Skip steps before continue_from_step\n            if i < continue_from_step:\n                continue\n            logger.info('---------- execute_task() step #%d: %s', i, step)\n            \"\"\"\n            scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n            scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n            \"\"\"\n\n            result = None\n            step_implementation_try = 0\n            need_to_see_output = 'need_to_see_output' in step and step['need_to_see_output']\n\n            while True:\n                try:\n                    if reset_convo:\n                        convo.load_branch(function_uuid)\n\n                    if step['type'] == 'command':\n                        result = self.step_command_run(convo, step, i, success_with_cli_response=need_to_see_output) #This code defines a function called `run_command_until_success` that runs a command until it succeeds or reaches a timeout. It also checks if the command was successful by checking the exit code of the process that ran the command.\n                        # if need_to_see_output and 'cli_response' in result:\n                        #     result['user_input'] = result['cli_response']\n\n                    elif step['type'] == 'code_change':\n                        result = self.step_code_change(convo, task_description, step, i, test_after_code_changes) #This code defines a function called `step_code_change` that implements changes to the code based on a task description and step index. It uses a class called `CodeMonkey` to send messages to a developer and receive feedback on the changes made. The function then replaces old code comments with new ones and saves the changes to the project files.\n\n                    elif step['type'] == 'human_intervention':\n                        result = self.step_human_intervention(convo, step) #The code defines a function called `step_human_intervention` that handles human intervention during the development process. It retrieves a command to run from a conversation object, runs the command until it succeeds or reaches a timeout, and then updates the debug plan based on the user's response.\n\n                    # TODO background_command - if we run commands in background we should have way to kill processes\n                    #  and that should be added to function_calls.py DEBUG_STEPS_BREAKDOWN and IMPLEMENT_TASK\n                    # elif step['type'] == 'kill_process':\n                    #     terminate_named_process(step['kill_process'])\n                    #     result = {'success': True}\n\n                    logger.info('  step result: %s', result)\n                    \"\"\"\n                    scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n                    scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n                    \"\"\"\n\n                    if (not result['success']) or (need_to_see_output and result.get(\"user_input\") != \"SKIP\"):\n                        result['step'] = step\n                        result['step_index'] = i\n                        return result\n\n                    if test_command is not None and ('check_if_fixed' not in step or step['check_if_fixed']):\n                        logger.info('check_if_fixed: %s', test_command)\n                        \"\"\"\n                        scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n                        scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n                        \"\"\"\n                        result = self.step_test(convo, test_command) #This code defines a function called `step_test` that takes in a command and executes it in a subprocess. It also checks if a process with the same ID is running, and if so, it terminates that process. The function then captures the output of the command in two queues and returns a dictionary containing the success status and the CLI response.\n                        logger.info('task result: %s', result)\n                        \"\"\"\n                        scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n                        scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n                        \"\"\"\n                        return result\n\n                    break\n                except TokenLimitError as e: #This code defines a custom exception class called `TokenLimitError` that is raised when the number of tokens in a message exceeds the maximum allowed by the GPT model. The class takes two arguments: `tokens_in_messages` and `max_tokens`, which represent the number of tokens in the message and the maximum number of tokens allowed, respectively. The `__init__` method sets the instance variables and calls the parent class's constructor with a formatted error message.\n                    if is_root_task:\n                        response = self.should_retry_step_implementation(step, step_implementation_try) #This code defines a function called `should_retry_step_implementation` that checks if the maximum number of command debug tries has been reached. If it has, it prompts the user to retry implementing the entire development step. The user's response is then checked, and if they say no, the function returns a dictionary with a \"success\" key set to False and a \"retry\" key set to True.\n                        if 'retry' in response:\n                            # TODO we can rewind this convo even more\n                            convo.load_branch(function_uuid)\n                            continue\n                        elif 'success' in response:\n                            result = response\n                            break\n                    else:\n                        raise e\n                except TooDeepRecursionError as e: #This code defines a custom exception class called \"TooDeepRecursionError\" that is raised when the recursion depth exceeds a certain limit.\n                    if is_root_task:\n                        result = self.dev_help_needed(step) #This code defines a function called `dev_help_needed` that retrieves user input from a database, styles the question, and saves the response to the database.\n                        break\n                    else:\n                        raise e\n\n        result = {\"success\": True}  # if all steps are finished, the task has been successfully implemented\n        convo.load_branch(function_uuid)\n        return self.task_postprocessing(convo, development_task, continue_development, result, function_uuid)","documentation":"The code defines a function called `execute_task` that takes in a task description and step index, and executes the steps in the task until it succeeds or reaches a timeout. It also checks if the command was successful by checking the exit code of the process that ran the command."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#continue_development().","attributes":{"range":[452,4,515,104],"symbol":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#continue_development().","content":"def continue_development(self, iteration_convo, last_branch_name, continue_description='', development_task=None):\n        while True:\n            logger.info('Continue development, last_branch_name: %s', last_branch_name)\n            if last_branch_name in iteration_convo.branches.keys():  # if user_feedback is not None we create new convo\n                iteration_convo.load_branch(last_branch_name)\n            user_description = ('Here is a description of what should be working: \\n\\n' + color_cyan_bold(\n                continue_description) + '\\n') \\\n                if continue_description != '' else ''\n            user_description = 'Can you check if the app works please? ' + user_description\n\n            if self.run_command:\n                if self.project.ipc_client_instance is None or self.project.ipc_client_instance.client is None:\n                    user_description += color_yellow_bold(\n                        '\\n\\nIf you want to run the app, just type \"r\" and press ENTER and that will run `' + self.run_command + '`')\n                else:\n                    print(self.run_command, type='run_command')\n\n            # continue_description = ''\n            # TODO: Wait for a specific string in the output or timeout?\n            response = self.project.ask_for_human_intervention(\n                user_description,\n                cbs={'r': lambda convo: run_command_until_success(convo, self.run_command,\n                                                                  # name the process so the LLM can kill it\n                                                                  command_id='app',\n                                                                  # If the app doesn't crash in the first 1st second\n                                                                  # assume it's good and leave it running.\n                                                                  # If timeout is None the conversation can't continue\n                                                                  timeout=None,\n                                                                  force=True,\n                                                                  return_cli_response=True, is_root_task=True)},\n                convo=iteration_convo,\n                is_root_task=True)\n\n            logger.info('response: %s', response)\n            user_feedback = response['user_input'] if 'user_input' in response else None\n            if user_feedback == 'continue':\n                return {\"success\": True, \"user_input\": user_feedback}\n\n            if user_feedback is not None:\n                iteration_convo = AgentConvo(self)\n                iteration_description = iteration_convo.send_message('development/iteration.prompt', {\n                    \"name\": self.project.args['name'],\n                    \"app_type\": self.project.args['app_type'],\n                    \"app_summary\": self.project.project_description,\n                    \"clarifications\": self.project.clarifications,\n                    \"user_stories\": self.project.user_stories,\n                    \"user_tasks\": self.project.user_tasks,\n                    \"technologies\": self.project.architecture,\n                    \"array_of_objects_to_string\": array_of_objects_to_string,  # TODO check why is this here\n                    \"directory_tree\": self.project.get_directory_tree(True),\n                    \"current_task\": development_task,\n                    \"development_tasks\": self.project.development_plan,\n                    \"files\": self.project.get_all_coded_files(),\n                    \"user_input\": user_feedback,\n                })\n\n                llm_response = iteration_convo.send_message('development/parse_task.prompt', {\n                    'running_processes': running_processes,\n                    'os': platform.system(),\n                }, IMPLEMENT_TASK)\n                iteration_convo.remove_last_x_messages(2)\n\n                task_steps = llm_response['tasks']\n                self.execute_task(iteration_convo, iteration_description, task_steps, is_root_task=True)","file":"/pilot/helpers/agents/Developer.py","language":"python","fileHash":"0d85d908cc038e7de0ad336ba7e9ed864822bd6914b09ac5d9e850fd95263181","hash":"d808e579baa63e1c1fbcbfb1ecf5591dbfbadf2e7e6b5fa3e242158928ad021a","processedContent":"def continue_development(self, iteration_convo, last_branch_name, continue_description='', development_task=None):\n        while True:\n            logger.info('Continue development, last_branch_name: %s', last_branch_name)\n            \"\"\"\n            scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n            scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n            \"\"\"\n            if last_branch_name in iteration_convo.branches.keys():  # if user_feedback is not None we create new convo #undefined\n                iteration_convo.load_branch(last_branch_name) #This code defines a function called `load_branch` that loads a branch of messages from a dictionary called `branches`. It also copies the messages from the loaded branch to a variable called `messages`. If the `reload_files` parameter is set to `True`, it replaces the files with the new messages.\n            user_description = ('Here is a description of what should be working: \\n\\n' + color_cyan_bold( #undefined\n                continue_description) + '\\n') \\\n                if continue_description != '' else ''\n            user_description = 'Can you check if the app works please? ' + user_description\n\n            if self.run_command: #undefined\n                if self.project.ipc_client_instance is None or self.project.ipc_client_instance.client is None:\n                \"\"\"\n                scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n                scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n                \"\"\"\n                    user_description += color_yellow_bold( #undefined\n                        '\\n\\nIf you want to run the app, just type \"r\" and press ENTER and that will run `' + self.run_command + '`') #undefined\n                else:\n                    print(self.run_command, type='run_command') #undefined\n\n            # continue_description = ''\n            # TODO: Wait for a specific string in the output or timeout?\n            response = self.project.ask_for_human_intervention( #undefined\n                user_description,\n                cbs={'r': lambda convo: run_command_until_success(convo, self.run_command,\n                \"\"\"\n                scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#run_command.: undefined\n                scip-python python temp indexer `pilot.helpers.cli`/run_command_until_success().: This code defines a function called `run_command_until_success` that runs a command until it succeeds or reaches a timeout. It also checks if the command was successful by checking the exit code of the process that ran the command.\n                \"\"\"\n                                                                  # name the process so the LLM can kill it\n                                                                  command_id='app',\n                                                                  # If the app doesn't crash in the first 1st second\n                                                                  # assume it's good and leave it running.\n                                                                  # If timeout is None the conversation can't continue\n                                                                  timeout=None,\n                                                                  force=True,\n                                                                  return_cli_response=True, is_root_task=True)},\n                convo=iteration_convo,\n                is_root_task=True)\n\n            logger.info('response: %s', response)\n            \"\"\"\n            scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n            scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n            \"\"\"\n            user_feedback = response['user_input'] if 'user_input' in response else None\n            if user_feedback == 'continue':\n                return {\"success\": True, \"user_input\": user_feedback}\n\n            if user_feedback is not None:\n                iteration_convo = AgentConvo(self) #This code defines a class called `AgentConvo` that represents a conversation with an agent. It includes functions for sending and receiving messages, as well as formatting and rendering prompts. The code also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n                iteration_description = iteration_convo.send_message('development/iteration.prompt', { #The code defines a function called `send_message` that sends a message in a conversation, retrieving and rendering a prompt template based on the provided name, and then appending the rendered content to a list of messages. It also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n                    \"name\": self.project.args['name'], #undefined\n                    \"app_type\": self.project.args['app_type'], #undefined\n                    \"app_summary\": self.project.project_description, #undefined\n                    \"clarifications\": self.project.clarifications, #undefined\n                    \"user_stories\": self.project.user_stories, #undefined\n                    \"user_tasks\": self.project.user_tasks, #undefined\n                    \"technologies\": self.project.architecture, #undefined\n                    \"array_of_objects_to_string\": array_of_objects_to_string,  # TODO check why is this here #This code takes an array of objects and returns a string representation of the array, with each object's key-value pairs separated by a newline.\n                    \"directory_tree\": self.project.get_directory_tree(True), #undefined\n                    \"current_task\": development_task,\n                    \"development_tasks\": self.project.development_plan, #undefined\n                    \"files\": self.project.get_all_coded_files(), #undefined\n                    \"user_input\": user_feedback,\n                })\n\n                llm_response = iteration_convo.send_message('development/parse_task.prompt', { #The code defines a function called `send_message` that sends a message in a conversation, retrieving and rendering a prompt template based on the provided name, and then appending the rendered content to a list of messages. It also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n                    'running_processes': running_processes, #undefined\n                    'os': platform.system(),\n                    \"\"\"\n                    scip-python python python-stdlib 3.11 platform/__init__:: undefined\n                    scip-python python python-stdlib 3.11 platform/system().: undefined\n                    \"\"\"\n                }, IMPLEMENT_TASK) #undefined\n                iteration_convo.remove_last_x_messages(2) #This code removes the last x messages from a list of messages.\n\n                task_steps = llm_response['tasks']\n                self.execute_task(iteration_convo, iteration_description, task_steps, is_root_task=True)","documentation":"The code defines a function called `continue_development` that allows the user to continue developing an app by asking for feedback on the current iteration and then executing the next task in the development plan."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#install_technology().","attributes":{"range":[578,4,608,27],"symbol":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#install_technology().","content":"def install_technology(self, technology):\n        # TODO move the functions definitions to function_calls.py\n        llm_response = self.convo_os_specific_tech.send_message(\n            'development/env_setup/install_next_technology.prompt',\n            {'technology': technology}, {\n                'definitions': [{\n                    'name': 'execute_command',\n                    'description': f'Executes a command that should check if {technology} is installed on the machine. ',\n                    'parameters': {\n                        'type': 'object',\n                        'properties': {\n                            'command': {\n                                'type': 'string',\n                                'description': f'Command that needs to be executed to check if {technology} is installed on the machine.',\n                            },\n                            'timeout': {\n                                'type': 'number',\n                                'description': 'Timeout in seconds for the approximate time this command takes to finish.',\n                            }\n                        },\n                        'required': ['command', 'timeout'],\n                    },\n                }],\n                'functions': {\n                    'execute_command': lambda command, timeout: (command, timeout)\n                }\n            })\n\n        cli_response, llm_response = execute_command_and_check_cli_response(self.convo_os_specific_tech, llm_response)\n\n        return llm_response","file":"/pilot/helpers/agents/Developer.py","language":"python","fileHash":"0d85d908cc038e7de0ad336ba7e9ed864822bd6914b09ac5d9e850fd95263181","hash":"6cc6a573beaedc866b902fd0ffdd661948b029df9d563f74789caa04d165de74","processedContent":"def install_technology(self, technology):\n        # TODO move the functions definitions to function_calls.py\n        llm_response = self.convo_os_specific_tech.send_message(\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#convo_os_specific_tech.: undefined\n        scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().: The code defines a function called `send_message` that sends a message in a conversation, retrieving and rendering a prompt template based on the provided name, and then appending the rendered content to a list of messages. It also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n        \"\"\"\n            'development/env_setup/install_next_technology.prompt',\n            {'technology': technology}, {\n                'definitions': [{\n                    'name': 'execute_command',\n                    'description': f'Executes a command that should check if {technology} is installed on the machine. ',\n                    'parameters': {\n                        'type': 'object',\n                        'properties': {\n                            'command': {\n                                'type': 'string',\n                                'description': f'Command that needs to be executed to check if {technology} is installed on the machine.',\n                            },\n                            'timeout': {\n                                'type': 'number',\n                                'description': 'Timeout in seconds for the approximate time this command takes to finish.',\n                            }\n                        },\n                        'required': ['command', 'timeout'],\n                    },\n                }],\n                'functions': {\n                    'execute_command': lambda command, timeout: (command, timeout)\n                }\n            })\n\n        cli_response, llm_response = execute_command_and_check_cli_response(self.convo_os_specific_tech, llm_response)\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#convo_os_specific_tech.: undefined\n        scip-python python temp indexer `pilot.helpers.cli`/execute_command_and_check_cli_response().: This code defines a function called `execute_command_and_check_cli_response` that takes in a command, project, and other parameters. It executes the command in a subprocess and captures its output in two queues. The function also checks if a process with the same ID is running, and if so, it terminates that process.\n        \"\"\"\n\n        return llm_response","documentation":"The code defines a function called `install_technology` that sends a message in a conversation to check if a technology is installed on the machine. It also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#test_code_changes().","attributes":{"range":[610,4,638,31],"symbol":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#test_code_changes().","content":"def test_code_changes(self, code_monkey, convo):\n        return {\"success\": True}\n        logger.info('Testing code changes...')\n        llm_response = convo.send_message('development/task/step_check.prompt', {}, GET_TEST_TYPE)\n        test_type = llm_response['type']\n\n        if test_type == 'command_test':\n            command = llm_response['command']\n            return run_command_until_success(convo, command['command'], timeout=command['timeout'])\n        elif test_type == 'automated_test':\n            # TODO get code monkey to implement the automated test\n            pass\n        elif test_type == 'manual_test':\n            # TODO make the message better\n            return_value = {'success': False}\n            while not return_value['success']:\n                description = llm_response['manual_test_description']\n                response = self.project.ask_for_human_intervention(\n                    'I need your help. Can you please test if this was successful?',\n                    description,\n                )\n\n                user_feedback = response['user_input']\n                if user_feedback is not None and user_feedback != 'continue':\n                    self.debugger.debug(convo, user_input=user_feedback, issue_description=description)\n                else:\n                    return_value = {'success': True, 'user_input': user_feedback}\n\n            return return_value","file":"/pilot/helpers/agents/Developer.py","language":"python","fileHash":"0d85d908cc038e7de0ad336ba7e9ed864822bd6914b09ac5d9e850fd95263181","hash":"f362e737500b0987c900f6352f9e46a89d8a53d50c8c1ade490898864ade9a6a","processedContent":"def test_code_changes(self, code_monkey, convo):\n        return {\"success\": True}\n        logger.info('Testing code changes...')\n        llm_response = convo.send_message('development/task/step_check.prompt', {}, GET_TEST_TYPE)\n        test_type = llm_response['type']\n\n        if test_type == 'command_test':\n            command = llm_response['command']\n            return run_command_until_success(convo, command['command'], timeout=command['timeout'])\n        elif test_type == 'automated_test':\n            # TODO get code monkey to implement the automated test\n            pass\n        elif test_type == 'manual_test':\n            # TODO make the message better\n            return_value = {'success': False}\n            while not return_value['success']:\n                description = llm_response['manual_test_description']\n                response = self.project.ask_for_human_intervention(\n                    'I need your help. Can you please test if this was successful?',\n                    description,\n                )\n\n                user_feedback = response['user_input']\n                if user_feedback is not None and user_feedback != 'continue':\n                    self.debugger.debug(convo, user_input=user_feedback, issue_description=description)\n                else:\n                    return_value = {'success': True, 'user_input': user_feedback}\n\n            return return_value","documentation":"This code is a function that tests the changes made to the code by a developer. It sends a message to the user asking for their input on whether the changes were successful or not. If the user provides feedback, the code will debug the issue and send another message to the user for further assistance."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#implement_step().","attributes":{"range":[640,4,660,12],"symbol":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#implement_step().","content":"def implement_step(self, convo, step_index, type, description):\n        logger.info('Implementing %s step #%d: %s', type, step_index, description)\n        # TODO remove hardcoded folder path\n        directory_tree = self.project.get_directory_tree(True)\n        llm_response = convo.send_message('development/task/next_step.prompt', {\n            'finished_steps': [],\n            'step_description': description,\n            'step_type': type,\n            'directory_tree': directory_tree,\n            'step_index': step_index\n        }, EXECUTE_COMMANDS)\n\n        step_details = llm_response['commands']\n\n        if type == 'COMMAND':\n            for cmd in step_details:\n                run_command_until_success(convo, cmd['command'], timeout=cmd['timeout'])\n        # elif type == 'CODE_CHANGE':\n        #     code_changes_details = get_step_code_changes()\n        #     # TODO: give to code monkey for implementation\n        pass","file":"/pilot/helpers/agents/Developer.py","language":"python","fileHash":"0d85d908cc038e7de0ad336ba7e9ed864822bd6914b09ac5d9e850fd95263181","hash":"852babf9c85d00d595937ff758576e41edc531d245d09ae08243b041eebc7099","processedContent":"def implement_step(self, convo, step_index, type, description):\n        logger.info('Implementing %s step #%d: %s', type, step_index, description)\n        \"\"\"\n        scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n        scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n        \"\"\"\n        # TODO remove hardcoded folder path\n        directory_tree = self.project.get_directory_tree(True) #undefined\n        llm_response = convo.send_message('development/task/next_step.prompt', {\n            'finished_steps': [],\n            'step_description': description,\n            'step_type': type,\n            'directory_tree': directory_tree,\n            'step_index': step_index\n        }, EXECUTE_COMMANDS) #undefined\n\n        step_details = llm_response['commands']\n\n        if type == 'COMMAND':\n            for cmd in step_details:\n                run_command_until_success(convo, cmd['command'], timeout=cmd['timeout']) #This code defines a function called `run_command_until_success` that runs a command until it succeeds or reaches a timeout. It also checks if the command was successful by checking the exit code of the process that ran the command.\n        # elif type == 'CODE_CHANGE':\n        #     code_changes_details = get_step_code_changes()\n        #     # TODO: give to code monkey for implementation\n        pass","documentation":"This code defines a function called `implement_step` that takes in a conversation object, a step index, a type of step (either \"COMMAND\" or \"CODE_CHANGE\"), and a description of the step. It then sends a message to the conversation object with the details of the step and waits for a response from the user. If the type of step is \"COMMAND\", it runs the command until it succeeds or reaches a timeout."}},{"key":"scip-python python temp indexer `pilot.const.messages`/WHEN_USER_DONE.","attributes":{"symbol":"scip-python python temp indexer `pilot.const.messages`/WHEN_USER_DONE.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.style`/color_red_bold.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.style`/color_red_bold.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.style`/color_cyan_bold.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.style`/color_cyan_bold.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.utils`/array_of_objects_to_string().","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.utils`/array_of_objects_to_string().","language":"python","range":[152,0,153,73],"content":"def array_of_objects_to_string(array):\n    return '\\n'.join([f'{key}: {value}' for key, value in array.items()])","file":"/pilot/utils/utils.py","fileHash":"ffe0ebca72a8999ffb0084622af3eb69767ceda2cc6d7e7e68e65ebb2b4408c3","hash":"3a95f40d972f08dbab95a5b49d9487dcc4867a3bb4ee1769585932c80d3e4dc5","processedContent":"def array_of_objects_to_string(array):\n    return '\\n'.join([f'{key}: {value}' for key, value in array.items()])","documentation":"This code takes an array of objects and returns a string representation of the array, with each object's key-value pairs separated by a newline."}},{"key":"scip-python python temp indexer `pilot.const.function_calls`/FILTER_OS_TECHNOLOGIES.","attributes":{"symbol":"scip-python python temp indexer `pilot.const.function_calls`/FILTER_OS_TECHNOLOGIES.","language":"python"}},{"key":"scip-python python temp indexer `pilot.const.function_calls`/EXECUTE_COMMANDS.","attributes":{"symbol":"scip-python python temp indexer `pilot.const.function_calls`/EXECUTE_COMMANDS.","language":"python"}},{"key":"scip-python python temp indexer `pilot.const.function_calls`/GET_TEST_TYPE.","attributes":{"symbol":"scip-python python temp indexer `pilot.const.function_calls`/GET_TEST_TYPE.","language":"python"}},{"key":"scip-python python temp indexer `pilot.const.function_calls`/COMMAND_TO_RUN.","attributes":{"symbol":"scip-python python temp indexer `pilot.const.function_calls`/COMMAND_TO_RUN.","language":"python"}},{"key":"scip-python python temp indexer `pilot.const.function_calls`/GET_FULLY_CODED_FILE.","attributes":{"symbol":"scip-python python temp indexer `pilot.const.function_calls`/GET_FULLY_CODED_FILE.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.utils`/get_os_info().","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.utils`/get_os_info().","language":"python","range":[107,0,125,46],"content":"def get_os_info():\n    os_info = {\n        \"OS\": platform.system(),\n        \"OS Version\": platform.version(),\n        \"Architecture\": platform.architecture()[0],\n        \"Machine\": platform.machine(),\n        \"Node\": platform.node(),\n        \"Release\": platform.release(),\n    }\n\n    if os_info[\"OS\"] == \"Linux\":\n        os_info[\"Distribution\"] = distro.name(pretty=True)\n    elif os_info[\"OS\"] == \"Windows\":\n        os_info[\"Win32 Version\"] = ' '.join(platform.win32_ver())\n    elif os_info[\"OS\"] == \"Mac\":\n        os_info[\"Mac Version\"] = platform.mac_ver()[0]\n\n    # Convert the dictionary to a readable text format\n    return array_of_objects_to_string(os_info)","file":"/pilot/utils/utils.py","fileHash":"ffe0ebca72a8999ffb0084622af3eb69767ceda2cc6d7e7e68e65ebb2b4408c3","hash":"760d7074871cbf710ac1b3b5737fba93654823b48abecbd857879a996cd715ca","processedContent":"def get_os_info():\n    os_info = {\n        \"OS\": platform.system(),\n        \"\"\"\n        scip-python python python-stdlib 3.11 platform/__init__:: undefined\n        scip-python python python-stdlib 3.11 platform/system().: undefined\n        \"\"\"\n        \"OS Version\": platform.version(),\n        \"\"\"\n        scip-python python python-stdlib 3.11 platform/__init__:: undefined\n        scip-python python python-stdlib 3.11 platform/version().: undefined\n        \"\"\"\n        \"Architecture\": platform.architecture()[0],\n        \"\"\"\n        scip-python python python-stdlib 3.11 platform/__init__:: undefined\n        scip-python python python-stdlib 3.11 platform/architecture().: undefined\n        \"\"\"\n        \"Machine\": platform.machine(),\n        \"\"\"\n        scip-python python python-stdlib 3.11 platform/__init__:: undefined\n        scip-python python python-stdlib 3.11 platform/machine().: undefined\n        \"\"\"\n        \"Node\": platform.node(),\n        \"\"\"\n        scip-python python python-stdlib 3.11 platform/__init__:: undefined\n        scip-python python python-stdlib 3.11 platform/node().: undefined\n        \"\"\"\n        \"Release\": platform.release(),\n        \"\"\"\n        scip-python python python-stdlib 3.11 platform/__init__:: undefined\n        scip-python python python-stdlib 3.11 platform/release().: undefined\n        \"\"\"\n    }\n\n    if os_info[\"OS\"] == \"Linux\":\n        os_info[\"Distribution\"] = distro.name(pretty=True)\n    elif os_info[\"OS\"] == \"Windows\":\n        os_info[\"Win32 Version\"] = ' '.join(platform.win32_ver())\n        \"\"\"\n        scip-python python python-stdlib 3.11 platform/__init__:: undefined\n        scip-python python python-stdlib 3.11 platform/win32_ver().: undefined\n        \"\"\"\n    elif os_info[\"OS\"] == \"Mac\":\n        os_info[\"Mac Version\"] = platform.mac_ver()[0]\n        \"\"\"\n        scip-python python python-stdlib 3.11 platform/__init__:: undefined\n        scip-python python python-stdlib 3.11 platform/mac_ver().: undefined\n        \"\"\"\n\n    # Convert the dictionary to a readable text format\n    return array_of_objects_to_string(os_info)","documentation":"This code defines a function called `get_os_info()` that returns a dictionary containing information about the operating system, such as the OS name, version, architecture, and machine. The function uses the `platform` module to gather this information, and then converts the dictionary to a readable text format."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#run_command.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#run_command.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#debugger.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#debugger.","language":"python"}},{"key":"scip-python python python-stdlib 3.11 re/search().","attributes":{"symbol":"scip-python python python-stdlib 3.11 re/search().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 re/Match#group().","attributes":{"symbol":"scip-python python python-stdlib 3.11 re/Match#group().","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.exceptions.toodeeprecursionerror`/TooDeepRecursionError#message.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.exceptions.toodeeprecursionerror`/TooDeepRecursionError#message.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.agents.developer`/ENVIRONMENT_SETUP_STEP.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.developer`/ENVIRONMENT_SETUP_STEP.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#convo_os_specific_tech.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#convo_os_specific_tech.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#__init__().","attributes":{"range":[18,4,19,50],"symbol":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#__init__().","content":"def __init__(self, project):\n        super().__init__('product_owner', project)","file":"/pilot/helpers/agents/ProductOwner.py","language":"python","fileHash":"0920711402359af9e0f7d4776d936a8f4211626ef8b9ffbcb67fc44ba16a9914","hash":"09a6121c533f490dbd026c990ef981cdb63ebf3f02cb34195930b9a3431d4ac2","processedContent":"def __init__(self, project):\n        super().__init__('product_owner', project)","documentation":"This code defines a class called \"ProductOwner\" that inherits from another class called \"User\". It initializes the object with a project parameter and sets the user's role to \"product_owner\"."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#ask_clarifying_questions().","attributes":{"range":[76,4,80,74],"symbol":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#ask_clarifying_questions().","content":"def ask_clarifying_questions(self, main_prompt: str):\n        instructions = generate_messages_from_description(main_prompt,\n                                                          self.project.args['app_type'],\n                                                          self.project.args['name'])\n        return get_additional_info_from_openai(self.project, instructions)","file":"/pilot/helpers/agents/ProductOwner.py","language":"python","fileHash":"0920711402359af9e0f7d4776d936a8f4211626ef8b9ffbcb67fc44ba16a9914","hash":"90f63075e821a503048a3918500295948a305232d43c917ce3b9a6823dd1c412","processedContent":"def ask_clarifying_questions(self, main_prompt: str):\n        instructions = generate_messages_from_description(main_prompt, #This code defines a function called `generate_messages_from_description` that takes in a description, app type, and name as input. It returns a list of messages that are used to guide the user through the process of creating an app. The first message is from the system and informs the user that they are a Product Owner. The second message is also from the system and provides instructions on how to proceed with the app creation process. The third message is from the user and includes the provided description and app name.\n                                                          self.project.args['app_type'], #undefined\n                                                          self.project.args['name']) #undefined\n        return get_additional_info_from_openai(self.project, instructions)","documentation":"This code defines a function called `ask_clarifying_questions` that takes in a description, app type, and name as input. It returns a list of messages that are used to guide the user through the process of creating an app."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#generate_project_summary().","attributes":{"range":[82,4,91,108],"symbol":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#generate_project_summary().","content":"def generate_project_summary(self, high_level_messages: list[dict]):\n        print(color_green_bold('Project Summary:\\n'))\n        convo_project_description = AgentConvo(self)\n\n        convo_project_description.messages.append({'role': 'system',\n                                                   'content': get_prompt('components/summary_instructions.prompt')})\n        return convo_project_description.send_message('utils/summary.prompt',\n                                                      {'conversation': '\\n'.join(\n                                                          [f\"{msg['role']}: {msg['content']}\" for msg in\n                                                           high_level_messages])}, should_log_message=False)","file":"/pilot/helpers/agents/ProductOwner.py","language":"python","fileHash":"0920711402359af9e0f7d4776d936a8f4211626ef8b9ffbcb67fc44ba16a9914","hash":"44d1324d26c3d022771c5f8c3eb7816f1ec7c47d6060939bb97fdb80cc143d4c","processedContent":"def generate_project_summary(self, high_level_messages: list[dict]):\n        print(color_green_bold('Project Summary:\\n')) #undefined\n        convo_project_description = AgentConvo(self) #This code defines a class called `AgentConvo` that represents a conversation with an agent. It includes functions for sending and receiving messages, as well as formatting and rendering prompts. The code also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n\n        convo_project_description.messages.append({'role': 'system', #undefined\n                                                   'content': get_prompt('components/summary_instructions.prompt')}) #This code defines a function called `get_prompt` that retrieves and renders a prompt template based on the provided name. It uses Jinja2 to render the templates with no variables, and stores the rendered content in a dictionary called `prompts_components`.\n        return convo_project_description.send_message('utils/summary.prompt', #The code defines a function called `send_message` that sends a message in a conversation, retrieving and rendering a prompt template based on the provided name, and then appending the rendered content to a list of messages. It also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n                                                      {'conversation': '\\n'.join(\n                                                          [f\"{msg['role']}: {msg['content']}\" for msg in\n                                                           high_level_messages])}, should_log_message=False)","documentation":"This code defines a function called `generate_project_summary` that generates a summary of a project based on a list of high-level messages. It uses a class called `AgentConvo` to send and receive messages, and includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_tasks().","attributes":{"range":[136,4,162,38],"symbol":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_tasks().","content":"def get_user_tasks(self):\n        self.project.current_step = USER_TASKS_STEP\n        self.convo_user_stories.high_level_step = self.project.current_step\n\n        # If this app_id already did this step, just get all data from DB and don't ask user again\n        step = get_progress_steps(self.project.args['app_id'], USER_TASKS_STEP)\n        if step and not should_execute_step(self.project.args['step'], USER_TASKS_STEP):\n            step_already_finished(self.project.args, step)\n            return step['user_tasks']\n\n        # USER TASKS\n        msg = \"User Tasks:\\n\"\n        print(color_green_bold(msg))\n        logger.info(msg)\n\n        self.project.user_tasks = self.convo_user_stories.continuous_conversation('user_stories/user_tasks.prompt',\n                                                                                  {'END_RESPONSE': END_RESPONSE})\n\n        logger.info(f\"Final user tasks: {self.project.user_tasks}\")\n\n        save_progress(self.project.args['app_id'], self.project.current_step, {\n            \"messages\": self.convo_user_stories.messages,\n            \"user_tasks\": self.project.user_tasks,\n            \"app_data\": generate_app_data(self.project.args)\n        })\n\n        return self.project.user_tasks","file":"/pilot/helpers/agents/ProductOwner.py","language":"python","fileHash":"0920711402359af9e0f7d4776d936a8f4211626ef8b9ffbcb67fc44ba16a9914","hash":"38b58e75bc41c074ae3552efa40f8da3986b7d7de1dfb9e7f40b174e4d9dc79d","processedContent":"def get_user_tasks(self):\n        self.project.current_step = USER_TASKS_STEP\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n        scip-python python temp indexer `pilot.helpers.agents.productowner`/USER_TASKS_STEP.: undefined\n        \"\"\"\n        self.convo_user_stories.high_level_step = self.project.current_step\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n        scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#convo_user_stories.: undefined\n        scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#high_level_step.: undefined\n        \"\"\"\n\n        # If this app_id already did this step, just get all data from DB and don't ask user again\n        step = get_progress_steps(self.project.args['app_id'], USER_TASKS_STEP)\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n        scip-python python temp indexer `pilot.helpers.agents.productowner`/USER_TASKS_STEP.: undefined\n        scip-python python temp indexer `pilot.database.database`/get_progress_steps().: This code defines a function called `get_progress_steps` that retrieves progress steps for a given application ID. It uses a dictionary to map progress step names to their corresponding model classes, and it returns a dictionary of progress steps with their corresponding data.\n        \"\"\"\n        if step and not should_execute_step(self.project.args['step'], USER_TASKS_STEP):\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n        scip-python python temp indexer `pilot.helpers.agents.productowner`/USER_TASKS_STEP.: undefined\n        scip-python python temp indexer `pilot.utils.utils`/should_execute_step().: This code checks if the current step should be executed based on the argument passed in and the current step. It returns true if the current step is greater than or equal to the argument step.\n        \"\"\"\n            step_already_finished(self.project.args, step)\n            \"\"\"\n            scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n            scip-python python temp indexer `pilot.utils.utils`/step_already_finished().: This code updates the arguments with the app data from a step and then prints a success message to the console.\n            \"\"\"\n            return step['user_tasks']\n\n        # USER TASKS\n        msg = \"User Tasks:\\n\"\n        print(color_green_bold(msg)) #undefined\n        logger.info(msg)\n        \"\"\"\n        scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n        scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n        \"\"\"\n\n        self.project.user_tasks = self.convo_user_stories.continuous_conversation('user_stories/user_tasks.prompt',\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n        scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#convo_user_stories.: undefined\n        scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#continuous_conversation().: The code defines a function called `continuous_conversation` that conducts a continuous conversation with the agent, allowing the user to add additional messages until the GPT response equals END_RESPONSE.\n        \"\"\"\n                                                                                  {'END_RESPONSE': END_RESPONSE}) #undefined\n\n        logger.info(f\"Final user tasks: {self.project.user_tasks}\")\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n        scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n        scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n        \"\"\"\n\n        save_progress(self.project.args['app_id'], self.project.current_step, {\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n        scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n        scip-python python temp indexer `pilot.database.database`/save_progress().: This code defines a function called `save_progress` that saves progress data for an app in a database. It retrieves the app entity from the database based on its ID, creates or updates a record in a table based on the step provided, and updates the status of the app in the database.\n        \"\"\"\n            \"messages\": self.convo_user_stories.messages,\n            \"\"\"\n            scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#convo_user_stories.: undefined\n            scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#messages.: undefined\n            \"\"\"\n            \"user_tasks\": self.project.user_tasks, #undefined\n            \"app_data\": generate_app_data(self.project.args)\n            \"\"\"\n            scip-python python temp indexer `pilot.helpers.agent`/Agent#project.: undefined\n            scip-python python temp indexer `pilot.utils.utils`/generate_app_data().: This code defines a function called `generate_app_data` that takes an argument called `args`. The function returns a dictionary with two keys: `app_id` and `app_type`, both of which are values from the `args` dictionary.\n            \"\"\"\n        })\n\n        return self.project.user_tasks","documentation":"This code defines a function called `get_user_tasks` that retrieves user tasks for a given application ID. It uses a dictionary to map progress step names to their corresponding model classes, and it returns a dictionary of progress steps with their corresponding data."}},{"key":"scip-python python temp indexer `pilot.utils.utils`/clean_filename().","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.utils`/clean_filename().","language":"python","range":[188,0,195,27],"content":"def clean_filename(filename):\n    # Remove invalid characters\n    cleaned_filename = re.sub(r'[<>:\"/\\\\|?*]', '', filename)\n\n    # Replace whitespace with underscore\n    cleaned_filename = re.sub(r'\\s', '_', cleaned_filename)\n\n    return cleaned_filename","file":"/pilot/utils/utils.py","fileHash":"ffe0ebca72a8999ffb0084622af3eb69767ceda2cc6d7e7e68e65ebb2b4408c3","hash":"15416f4164770bb4f39c15dc22d6255510d2f61a92ee6b2b25a23a4897955771","processedContent":"def clean_filename(filename):\n    # Remove invalid characters\n    cleaned_filename = re.sub(r'[<>:\"/\\\\|?*]', '', filename)\n    \"\"\"\n    scip-python python python-stdlib 3.11 re/__init__:: undefined\n    scip-python python python-stdlib 3.11 re/sub().: undefined\n    \"\"\"\n\n    # Replace whitespace with underscore\n    cleaned_filename = re.sub(r'\\s', '_', cleaned_filename)\n    \"\"\"\n    scip-python python python-stdlib 3.11 re/__init__:: undefined\n    scip-python python python-stdlib 3.11 re/sub().: undefined\n    \"\"\"\n\n    return cleaned_filename","documentation":"This code takes a filename as input and removes any invalid characters, replacing whitespace with underscores."}},{"key":"scip-python python temp indexer `pilot.utils.files`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.files`/__init__:","language":"python","range":[0,0,47,0],"content":"import os\nfrom pathlib import Path\nfrom database.database import save_user_app\n\n\ndef get_parent_folder(folder_name):\n    current_path = Path(os.path.abspath(__file__))  # get the path of the current script\n\n    while current_path.name != folder_name:  # while the current folder name is not 'folder_name'\n        current_path = current_path.parent  # go up one level\n\n    return current_path.parent\n\n\ndef setup_workspace(args) -> str:\n    \"\"\"\n    Creates & returns the path to the project workspace.\n    Also creates a 'tests' folder inside the workspace.\n    :param args: may contain 'root' key\n    \"\"\"\n    workspace = args.get('workspace')\n    if workspace:\n        project_path = workspace\n    else:\n        root = args.get('root') or get_parent_folder('pilot')\n        name = args.get('name', 'default_project_name')\n        project_path = create_directory(os.path.join(root, 'workspace'), name)\n\n    create_directory(project_path, 'tests')\n    try:\n        save_user_app(args.get('user_id'), args.get('app_id'), project_path)\n    except Exception as e:\n        print(f'Error saving user app: {str(e)}')\n\n    print(os.path.basename(project_path), type='project_folder_name')\n    return project_path\n\n\ndef create_directory(parent_directory, new_directory):\n    new_directory_path = os.path.join(parent_directory, new_directory)\n    os.makedirs(new_directory_path, exist_ok=True)\n\n    return new_directory_path\n\n\ndef count_lines_of_code(files):\n    return sum(len(file['content'].splitlines()) for file in files)\n","file":"/pilot/utils/files.py","fileHash":"b8e9808e0ebcc100b416f5d656e4c8ebbc6a19f516ccb3dd0fb01b16c34cc823","hash":"b8e9808e0ebcc100b416f5d656e4c8ebbc6a19f516ccb3dd0fb01b16c34cc823","processedContent":"import os #undefined\nfrom pathlib import Path\n\"\"\"\nscip-python python python-stdlib 3.11 pathlib/__init__:: undefined\nscip-python python python-stdlib 3.11 pathlib/Path#: undefined\n\"\"\"\nfrom database.database import save_user_app\n\"\"\"\nscip-python python temp indexer `pilot.database.database`/__init__:: The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.database.database`/save_user_app().: This code defines a function called `save_user_app` that takes three arguments: `user_id`, `app_id`, and `workspace`. It checks if a user-app relationship exists for the given user and app IDs, and if not, it creates one. If the relationship does exist, it updates the workspace field for the existing record.\n\"\"\"\n\n\ndef get_parent_folder(folder_name):\n    \"\"\"This code defines a function called `get_parent_folder` that takes a string argument `folder_name`. It uses the `Path` class from the `pathlib` module to get the current script's path and then iterates up the directory tree until it finds the folder with the specified name. The function returns the parent folder of the found folder.\"\"\"\n    pass\n\n\ndef setup_workspace(args) -> str:\n    \"\"\"This code defines a function called `setup_workspace` that creates a new project workspace and returns the path to it. It also creates a 'tests' folder inside the workspace and saves a user-app relationship if one does not already exist.\"\"\"\n    pass\n\n\ndef create_directory(parent_directory, new_directory):\n    \"\"\"This code defines a function called `create_directory` that creates a new directory with the specified name in the specified parent directory. It does this by joining the parent directory and new directory names, checking if the directory already exists, and creating it if it doesn't.\"\"\"\n    pass\n\n\ndef count_lines_of_code(files):\n    \"\"\"This code counts the number of lines of code in a list of files by splitting each file's content into lines and then summing the lengths of those lines.\"\"\"\n    pass\n","documentation":"The code defines a series of functions for working with files and directories, including creating new directories, counting lines of code in a list of files, and saving user input to a database."}},{"key":"scip-python python temp indexer `pilot.utils.files`/setup_workspace().","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.files`/setup_workspace().","language":"python","range":[14,0,35,23],"content":"def setup_workspace(args) -> str:\n    \"\"\"\n    Creates & returns the path to the project workspace.\n    Also creates a 'tests' folder inside the workspace.\n    :param args: may contain 'root' key\n    \"\"\"\n    workspace = args.get('workspace')\n    if workspace:\n        project_path = workspace\n    else:\n        root = args.get('root') or get_parent_folder('pilot')\n        name = args.get('name', 'default_project_name')\n        project_path = create_directory(os.path.join(root, 'workspace'), name)\n\n    create_directory(project_path, 'tests')\n    try:\n        save_user_app(args.get('user_id'), args.get('app_id'), project_path)\n    except Exception as e:\n        print(f'Error saving user app: {str(e)}')\n\n    print(os.path.basename(project_path), type='project_folder_name')\n    return project_path","file":"/pilot/utils/files.py","fileHash":"b8e9808e0ebcc100b416f5d656e4c8ebbc6a19f516ccb3dd0fb01b16c34cc823","hash":"adf10da3b555161444dae2f69616f35f3e94535ab76ba7ac17a696ddce7ecaa3","processedContent":"def setup_workspace(args) -> str:\n    \"\"\"\n    Creates & returns the path to the project workspace.\n    Also creates a 'tests' folder inside the workspace.\n    :param args: may contain 'root' key\n    \"\"\"\n    workspace = args.get('workspace')\n    if workspace:\n        project_path = workspace\n    else:\n        root = args.get('root') or get_parent_folder('pilot') #This code defines a function called `get_parent_folder` that takes a string argument `folder_name`. It uses the `Path` class from the `pathlib` module to get the current script's path and then iterates up the directory tree until it finds the folder with the specified name. The function returns the parent folder of the found folder.\n        name = args.get('name', 'default_project_name')\n        project_path = create_directory(os.path.join(root, 'workspace'), name)\n        \"\"\"\n        scip-python python temp indexer `pilot.utils.files`/create_directory().: This code defines a function called `create_directory` that creates a new directory with the specified name in the specified parent directory. It does this by joining the parent directory and new directory names, checking if the directory already exists, and creating it if it doesn't.\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/path.: undefined\n        scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n        \"\"\"\n\n    create_directory(project_path, 'tests') #This code defines a function called `create_directory` that creates a new directory with the specified name in the specified parent directory. It does this by joining the parent directory and new directory names, checking if the directory already exists, and creating it if it doesn't.\n    try:\n        save_user_app(args.get('user_id'), args.get('app_id'), project_path) #This code defines a function called `save_user_app` that takes three arguments: `user_id`, `app_id`, and `workspace`. It checks if a user-app relationship exists for the given user and app IDs, and if not, it creates one. If the relationship does exist, it updates the workspace field for the existing record.\n    except Exception as e:\n        print(f'Error saving user app: {str(e)}')\n\n    print(os.path.basename(project_path), type='project_folder_name')\n    \"\"\"\n    scip-python python python-stdlib 3.11 os/__init__:: undefined\n    scip-python python python-stdlib 3.11 os/path.: undefined\n    scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n    \"\"\"\n    return project_path","documentation":"This code defines a function called `setup_workspace` that creates a new project workspace and returns the path to it. It also creates a 'tests' folder inside the workspace and saves a user-app relationship if one does not already exist."}},{"key":"scip-python python temp indexer `pilot.prompts.prompts`/ask_for_app_type().","attributes":{"symbol":"scip-python python temp indexer `pilot.prompts.prompts`/ask_for_app_type().","language":"python","range":[10,0,33,17],"content":"def ask_for_app_type():\n    return 'App'\n    answer = styled_select(\n        \"What type of app do you want to build?\",\n        choices=common.APP_TYPES\n    )\n\n    if answer is None:\n        print(\"Exiting application.\")\n        exit(0)\n\n    while 'unavailable' in answer:\n        print(\"Sorry, that option is not available.\")\n        answer = styled_select(\n            \"What type of app do you want to build?\",\n            choices=common.APP_TYPES\n        )\n        if answer is None:\n            print(\"Exiting application.\")\n            exit(0)\n\n    print(\"You chose: \" + answer)\n    logger.info(f\"You chose: {answer}\")\n    return answer","file":"/pilot/prompts/prompts.py","fileHash":"6b5eafecb74f005f8a70e0458cd97a106567f3631af5f5bc5d228298d9eccb01","hash":"f6580596fd95f8fbd782c5f02a72f495331127311107f09464efe1017a2d6bda","processedContent":"def ask_for_app_type():\n    return 'App'\n    answer = styled_select(\n        \"What type of app do you want to build?\",\n        choices=common.APP_TYPES\n    )\n\n    if answer is None:\n        print(\"Exiting application.\")\n        exit(0)\n\n    while 'unavailable' in answer:\n        print(\"Sorry, that option is not available.\")\n        answer = styled_select(\n            \"What type of app do you want to build?\",\n            choices=common.APP_TYPES\n        )\n        if answer is None:\n            print(\"Exiting application.\")\n            exit(0)\n\n    print(\"You chose: \" + answer)\n    logger.info(f\"You chose: {answer}\")\n    return answer","documentation":"This code is a function that asks the user to select a type of app they want to build. It uses a styled_select function to display a list of available app types and returns the selected type."}},{"key":"scip-python python temp indexer `pilot.prompts.prompts`/ask_for_main_app_definition().","attributes":{"symbol":"scip-python python temp indexer `pilot.prompts.prompts`/ask_for_main_app_definition().","language":"python","range":[36,0,50,22],"content":"def ask_for_main_app_definition(project):\n    question = 'Describe your app in as much detail as possible.'\n    print(question, type='ipc')\n    description = styled_text(\n        project,\n        question\n    )\n\n    if description is None:\n        print(\"No input provided!\")\n        return\n\n    logger.info(f\"Initial App description done: {description}\")\n\n    return description","file":"/pilot/prompts/prompts.py","fileHash":"6b5eafecb74f005f8a70e0458cd97a106567f3631af5f5bc5d228298d9eccb01","hash":"a6dbb3fbca545c84d44b7ce10facff3c39315ceebdbfdb63c9881fed1f14e1d4","processedContent":"def ask_for_main_app_definition(project):\n    question = 'Describe your app in as much detail as possible.'\n    print(question, type='ipc')\n    description = styled_text( #This code defines a function called `styled_text` that retrieves user input from a database, styles the question, and saves the response to the database.\n        project,\n        question\n    )\n\n    if description is None:\n        print(\"No input provided!\")\n        return\n\n    logger.info(f\"Initial App description done: {description}\")\n    \"\"\"\n    scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n    scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n    \"\"\"\n\n    return description","documentation":"This code defines a function called `ask_for_main_app_definition` that retrieves user input from a database, styles the question, and saves the response to the database."}},{"key":"scip-python python temp indexer `pilot.prompts.prompts`/get_additional_info_from_openai().","attributes":{"symbol":"scip-python python temp indexer `pilot.prompts.prompts`/get_additional_info_from_openai().","language":"python","range":[73,0,108,63],"content":"def get_additional_info_from_openai(project, messages):\n    \"\"\"\n    Runs the conversation between Product Owner and LLM.\n    Provides the user's initial description, LLM asks the user clarifying questions and user responds.\n    Limited by `MAX_QUESTIONS`, exits when LLM responds \"EVERYTHING_CLEAR\".\n\n    :param project: Project\n    :param messages: [\n        { \"role\": \"system\", \"content\": \"You are a Product Owner...\" },\n        { \"role\": \"user\", \"content\": \"I want you to create the app {name} that can be described: ```{description}```...\" }\n      ]\n    :return: The updated `messages` list with the entire conversation between user and LLM.\n    \"\"\"\n    is_complete = False\n    while not is_complete:\n        # Obtain clarifications using the OpenAI API\n        # { 'text': new_code }\n        response = create_gpt_chat_completion(messages, 'additional_info', project)\n\n        if response is not None:\n            if response['text'] and response['text'].strip() == END_RESPONSE:\n                # print(response['text'] + '\\n')\n                break\n\n            # Ask the question to the user\n            answer = ask_user(project, response['text'])\n\n            # Add the answer to the messages\n            messages.append({'role': 'assistant', 'content': response['text']})\n            messages.append({'role': 'user', 'content': answer})\n        else:\n            is_complete = True\n\n    logger.info('Getting additional info from openai done')\n\n    return [msg for msg in messages if msg['role'] != 'system']","file":"/pilot/prompts/prompts.py","fileHash":"6b5eafecb74f005f8a70e0458cd97a106567f3631af5f5bc5d228298d9eccb01","hash":"5d8f98cc6e9629def41c4de690e9d96d2085234f64971f6c6ae4ad71195d4b7e","processedContent":"def get_additional_info_from_openai(project, messages):\n    \"\"\"\n    Runs the conversation between Product Owner and LLM.\n    Provides the user's initial description, LLM asks the user clarifying questions and user responds.\n    Limited by `MAX_QUESTIONS`, exits when LLM responds \"EVERYTHING_CLEAR\".\n\n    :param project: Project\n    :param messages: [\n        { \"role\": \"system\", \"content\": \"You are a Product Owner...\" },\n        { \"role\": \"user\", \"content\": \"I want you to create the app {name} that can be described: ```{description}```...\" }\n      ]\n    :return: The updated `messages` list with the entire conversation between user and LLM.\n    \"\"\"\n    is_complete = False\n    while not is_complete:\n        # Obtain clarifications using the OpenAI API\n        # { 'text': new_code }\n        response = create_gpt_chat_completion(messages, 'additional_info', project) #This code defines a function called `create_gpt_chat_completion` that takes in a list of messages, a request type, and a project. It then uses the OpenAI GPT language model to generate a response based on the input messages. The function also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n\n        if response is not None:\n            if response['text'] and response['text'].strip() == END_RESPONSE: #undefined\n                # print(response['text'] + '\\n')\n                break\n\n            # Ask the question to the user\n            answer = ask_user(project, response['text']) #This code defines a function called `ask_user` that retrieves user input from a database, styles the question, and saves the response to the database. It also logs the question and answer to a logger.\n\n            # Add the answer to the messages\n            messages.append({'role': 'assistant', 'content': response['text']})\n            messages.append({'role': 'user', 'content': answer})\n        else:\n            is_complete = True\n\n    logger.info('Getting additional info from openai done')\n    \"\"\"\n    scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n    scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n    \"\"\"\n\n    return [msg for msg in messages if msg['role'] != 'system']","documentation":"The code defines a function called `get_additional_info_from_openai` that retrieves additional information from the OpenAI GPT language model. It takes in a project and a list of messages, and then uses the OpenAI API to generate responses based on the input messages. The function also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model."}},{"key":"scip-python python temp indexer `pilot.prompts.prompts`/generate_messages_from_description().","attributes":{"symbol":"scip-python python temp indexer `pilot.prompts.prompts`/generate_messages_from_description().","language":"python","range":[112,0,147,5],"content":"def generate_messages_from_description(description, app_type, name):\n    \"\"\"\n    Called by ProductOwner.get_description().\n    :param description: \"I want to build a cool app that will make me rich\"\n    :param app_type: 'Web App', 'Script', 'Mobile App', 'Chrome Extension' etc\n    :param name: Project name\n    :return: [\n        { \"role\": \"system\", \"content\": \"You are a Product Owner...\" },\n        { \"role\": \"user\", \"content\": \"I want you to create the app {name} that can be described: ```{description}```...\" }\n      ]\n    \"\"\"\n    # \"I want you to create the app {name} that can be described: ```{description}```\n    prompt = get_prompt('high_level_questions/specs.prompt', {\n        'name': name,\n        'prompt': description,\n        'app_type': app_type,\n    })\n\n    # Get additional answers\n    # Break down stories\n    # Break down user tasks\n    # Start with Get additional answers\n    # {prompts/components/no_microservices}\n    # {prompts/components/single_question}\n    specs_instructions = get_prompt('high_level_questions/specs_instruction.prompt', {\n            'name': name,\n            'app_type': app_type,\n            # TODO: MAX_QUESTIONS should be configurable by ENV or CLI arg\n            'MAX_QUESTIONS': MAX_QUESTIONS\n        })\n\n    return [\n        get_sys_message('product_owner'),\n        {'role': 'user', 'content': prompt},\n        {'role': 'system', 'content': specs_instructions},\n    ]","file":"/pilot/prompts/prompts.py","fileHash":"6b5eafecb74f005f8a70e0458cd97a106567f3631af5f5bc5d228298d9eccb01","hash":"3311bdb3a8f56ff7c9162e4684000f2e50923deccec7117117c9b00fe4b96d5e","processedContent":"def generate_messages_from_description(description, app_type, name):\n    \"\"\"\n    Called by ProductOwner.get_description().\n    :param description: \"I want to build a cool app that will make me rich\"\n    :param app_type: 'Web App', 'Script', 'Mobile App', 'Chrome Extension' etc\n    :param name: Project name\n    :return: [\n        { \"role\": \"system\", \"content\": \"You are a Product Owner...\" },\n        { \"role\": \"user\", \"content\": \"I want you to create the app {name} that can be described: ```{description}```...\" }\n      ]\n    \"\"\"\n    # \"I want you to create the app {name} that can be described: ```{description}```\n    prompt = get_prompt('high_level_questions/specs.prompt', { #This code defines a function called `get_prompt` that retrieves and renders a prompt template based on the provided name. It uses Jinja2 to render the templates with no variables, and stores the rendered content in a dictionary called `prompts_components`.\n        'name': name,\n        'prompt': description,\n        'app_type': app_type,\n    })\n\n    # Get additional answers\n    # Break down stories\n    # Break down user tasks\n    # Start with Get additional answers\n    # {prompts/components/no_microservices}\n    # {prompts/components/single_question}\n    specs_instructions = get_prompt('high_level_questions/specs_instruction.prompt', { #This code defines a function called `get_prompt` that retrieves and renders a prompt template based on the provided name. It uses Jinja2 to render the templates with no variables, and stores the rendered content in a dictionary called `prompts_components`.\n            'name': name,\n            'app_type': app_type,\n            # TODO: MAX_QUESTIONS should be configurable by ENV or CLI arg\n            'MAX_QUESTIONS': MAX_QUESTIONS #undefined\n        })\n\n    return [\n        get_sys_message('product_owner'), #This code defines a function called `get_sys_message` that retrieves and renders a system message based on the provided role. The message is rendered using a prompt template stored in a dictionary called `prompts_components`.\n        {'role': 'user', 'content': prompt},\n        {'role': 'system', 'content': specs_instructions},\n    ]","documentation":"This code defines a function called `generate_messages_from_description` that takes in a description, app type, and name as input. It returns a list of messages that are used to guide the user through the process of creating an app. The first message is from the system and informs the user that they are a Product Owner. The second message is also from the system and provides instructions on how to proceed with the app creation process. The third message is from the user and includes the provided description and app name."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.productowner`/PROJECT_DESCRIPTION_STEP.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.productowner`/PROJECT_DESCRIPTION_STEP.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.agents.productowner`/USER_STORIES_STEP.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.productowner`/USER_STORIES_STEP.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#convo_user_stories.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#convo_user_stories.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.agents.productowner`/USER_TASKS_STEP.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.productowner`/USER_TASKS_STEP.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#__init__().","attributes":{"range":[14,4,16,35],"symbol":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#__init__().","content":"def __init__(self, project):\n        super().__init__('tech_lead', project)\n        self.save_dev_steps = False","file":"/pilot/helpers/agents/TechLead.py","language":"python","fileHash":"178ab0375a889408a9d022dedcc919c07e2484116282a310d3856ae87c405426","hash":"0123dc442ec98514420b0e4f129649411012a85ecb2e6687fe15c40f4b24e6a0","processedContent":"def __init__(self, project):\n        super().__init__('tech_lead', project) #This code defines a constructor for a class that initializes an object with a role and a project.\n        self.save_dev_steps = False","documentation":"This code defines a constructor for a class that initializes an object with a role (tech lead) and a project, and sets a flag to indicate whether to save development steps."}},{"key":"scip-python python temp indexer `pilot.const.function_calls`/DEVELOPMENT_PLAN.","attributes":{"symbol":"scip-python python temp indexer `pilot.const.function_calls`/DEVELOPMENT_PLAN.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.agents.techlead`/DEVELOPMENT_PLANNING_STEP.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.techlead`/DEVELOPMENT_PLANNING_STEP.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#convo_development_plan.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#convo_development_plan.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#save_dev_steps.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#save_dev_steps.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#convo_feature_plan.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#convo_feature_plan.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#convo_feature_summary.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#convo_feature_summary.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#__init__().","attributes":{"range":[8,4,10,34],"symbol":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#__init__().","content":"def __init__(self, project):\n        super().__init__('technical_writer', project)\n        self.save_dev_steps = True","file":"/pilot/helpers/agents/TechnicalWriter.py","language":"python","fileHash":"2e3be962f1ff60a54c1abe5aad040601ed5477e4197c3f6d923fa25d5ff6bb4d","hash":"9332569ef77df0c8c2a7b02b32cd99178c5c5d9ba87c0b2d5004b6bf72be1940","processedContent":"def __init__(self, project):\n        super().__init__('technical_writer', project) #This code defines a constructor for a class that initializes an object with a role and a project.\n        self.save_dev_steps = True","documentation":"This code defines a constructor for a class that initializes an object with a role and a project, and sets a flag to save development steps."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#document_project().","attributes":{"range":[12,4,22,39],"symbol":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#document_project().","content":"def document_project(self, percent):\n        files = self.project.get_all_coded_files()\n        print(f'{color_green_bold(\"CONGRATULATIONS!!!\")}')\n        print(f'You reached {color_green(str(percent) + \"%\")} of your project generation!\\n\\n')\n        print('For now, you have created:\\n')\n        print(f'{color_green(len(files))} files\\n')\n        print(f'{color_green(count_lines_of_code(files))} lines of code\\n\\n')\n        print('Before continuing, GPT Pilot will create some documentation for the project...\\n')\n        self.create_license()\n        self.create_readme()\n        self.create_api_documentation()","file":"/pilot/helpers/agents/TechnicalWriter.py","language":"python","fileHash":"2e3be962f1ff60a54c1abe5aad040601ed5477e4197c3f6d923fa25d5ff6bb4d","hash":"b96da0ef53456460c6192ee47be341b15cf65173cf67f0365b0c040f7403a9f9","processedContent":"def document_project(self, percent):\n        files = self.project.get_all_coded_files() #undefined\n        print(f'{color_green_bold(\"CONGRATULATIONS!!!\")}') #undefined\n        print(f'You reached {color_green(str(percent) + \"%\")} of your project generation!\\n\\n') #undefined\n        print('For now, you have created:\\n')\n        print(f'{color_green(len(files))} files\\n') #undefined\n        print(f'{color_green(count_lines_of_code(files))} lines of code\\n\\n')\n        \"\"\"\n        scip-python python temp indexer `pilot.utils.style`/color_green.: undefined\n        scip-python python temp indexer `pilot.utils.files`/count_lines_of_code().: This code counts the number of lines of code in a list of files by splitting each file's content into lines and then summing the lengths of those lines.\n        \"\"\"\n        print('Before continuing, GPT Pilot will create some documentation for the project...\\n')\n        self.create_license() #This code checks if a LICENSE file exists and creates one if it doesn't. It's used to ensure that the LICENSE file is created only once, which is important for business continuity and compliance with licensing regulations.\n        self.create_readme() #This code defines a function called `create_readme` that creates a README.md file for a project. It retrieves and renders prompt templates based on the project's name, type, summary, and other details, and then appends the rendered content to a list of messages. The function also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n        self.create_api_documentation()","documentation":"This code is a function that generates documentation for a project. It creates a LICENSE file, a README.md file, and API documentation based on the project's details."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#create_license().","attributes":{"range":[24,4,26,14],"symbol":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#create_license().","content":"def create_license(self):\n        # check if LICENSE file exists and if not create one. We want to create it only once.\n        return","file":"/pilot/helpers/agents/TechnicalWriter.py","language":"python","fileHash":"2e3be962f1ff60a54c1abe5aad040601ed5477e4197c3f6d923fa25d5ff6bb4d","hash":"93252ccd6ab408a14462059717376c1320a7ea447af5cd5673579eeb83eeb092","processedContent":"def create_license(self):\n        # check if LICENSE file exists and if not create one. We want to create it only once.\n        return","documentation":"This code checks if a LICENSE file exists and creates one if it doesn't. It's used to ensure that the LICENSE file is created only once, which is important for business continuity and compliance with licensing regulations."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#create_readme().","attributes":{"range":[28,4,49,20],"symbol":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#create_readme().","content":"def create_readme(self):\n        print(color_green('Creating README.md'))\n        convo = AgentConvo(self)\n\n        llm_response = convo.send_message('documentation/create_readme.prompt', {\n            \"name\": self.project.args['name'],\n            \"app_type\": self.project.args['app_type'],\n            \"app_summary\": self.project.project_description,\n            \"clarifications\": self.project.clarifications,\n            \"user_stories\": self.project.user_stories,\n            \"user_tasks\": self.project.user_tasks,\n            \"technologies\": self.project.architecture,\n            \"directory_tree\": self.project.get_directory_tree(True),\n            \"files\": self.project.get_all_coded_files(),\n        }, GET_DOCUMENTATION_FILE)\n\n        changes = self.project.developer.replace_old_code_comments([llm_response])\n\n        for file_data in changes:\n            self.project.save_file(file_data)\n\n        return convo","file":"/pilot/helpers/agents/TechnicalWriter.py","language":"python","fileHash":"2e3be962f1ff60a54c1abe5aad040601ed5477e4197c3f6d923fa25d5ff6bb4d","hash":"f20257fabbf8ef2df71220ed2af1019f3c2bf678ddceaacda5ebd5d4234c797e","processedContent":"def create_readme(self):\n        print(color_green('Creating README.md')) #undefined\n        convo = AgentConvo(self) #This code defines a class called `AgentConvo` that represents a conversation with an agent. It includes functions for sending and receiving messages, as well as formatting and rendering prompts. The code also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n\n        llm_response = convo.send_message('documentation/create_readme.prompt', { #The code defines a function called `send_message` that sends a message in a conversation, retrieving and rendering a prompt template based on the provided name, and then appending the rendered content to a list of messages. It also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n            \"name\": self.project.args['name'], #undefined\n            \"app_type\": self.project.args['app_type'], #undefined\n            \"app_summary\": self.project.project_description, #undefined\n            \"clarifications\": self.project.clarifications, #undefined\n            \"user_stories\": self.project.user_stories, #undefined\n            \"user_tasks\": self.project.user_tasks, #undefined\n            \"technologies\": self.project.architecture, #undefined\n            \"directory_tree\": self.project.get_directory_tree(True), #undefined\n            \"files\": self.project.get_all_coded_files(), #undefined\n        }, GET_DOCUMENTATION_FILE) #undefined\n\n        changes = self.project.developer.replace_old_code_comments([llm_response]) #undefined\n\n        for file_data in changes:\n            self.project.save_file(file_data) #undefined\n\n        return convo","documentation":"This code defines a function called `create_readme` that creates a README.md file for a project. It retrieves and renders prompt templates based on the project's name, type, summary, and other details, and then appends the rendered content to a list of messages. The function also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#create_api_documentation().","attributes":{"range":[51,4,53,14],"symbol":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#create_api_documentation().","content":"def create_api_documentation(self):\n        # create API documentation\n        return","file":"/pilot/helpers/agents/TechnicalWriter.py","language":"python","fileHash":"2e3be962f1ff60a54c1abe5aad040601ed5477e4197c3f6d923fa25d5ff6bb4d","hash":"f6fbba8a2ae9ec7a1d5183ed8d7f03e7bc0dc8bdf85435f0d7d44c97760dd2eb","processedContent":"def create_api_documentation(self):\n        # create API documentation\n        return","documentation":"This code creates API documentation for the application."}},{"key":"scip-python python temp indexer `pilot.const.function_calls`/GET_DOCUMENTATION_FILE.","attributes":{"symbol":"scip-python python temp indexer `pilot.const.function_calls`/GET_DOCUMENTATION_FILE.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.files`/count_lines_of_code().","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.files`/count_lines_of_code().","language":"python","range":[45,0,46,67],"content":"def count_lines_of_code(files):\n    return sum(len(file['content'].splitlines()) for file in files)","file":"/pilot/utils/files.py","fileHash":"b8e9808e0ebcc100b416f5d656e4c8ebbc6a19f516ccb3dd0fb01b16c34cc823","hash":"1a78ab70a4b57fbfed57c1916e9423c45f22814366cd285fe56bcd87850ab7bc","processedContent":"def count_lines_of_code(files):\n    return sum(len(file['content'].splitlines()) for file in files)","documentation":"This code counts the number of lines of code in a list of files by splitting each file's content into lines and then summing the lengths of those lines."}},{"key":"scip-python python temp indexer `pilot.helpers.agents`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents`/__init__:","range":[0,0,4,0],"content":"from .Architect import Architect, ARCHITECTURE_STEP\nfrom .CodeMonkey import CodeMonkey, IMPLEMENT_CHANGES, GET_FILES\nfrom .Developer import Developer, ENVIRONMENT_SETUP_STEP\nfrom .TechLead import TechLead\n","file":"/pilot/helpers/agents/__init__.py","language":"python","fileHash":"1ea6b846ead6e25ab4fda655435ffcbe14fac0ead263d8d11519549f09eee701","hash":"1ea6b846ead6e25ab4fda655435ffcbe14fac0ead263d8d11519549f09eee701","processedContent":"from .Architect import Architect, ARCHITECTURE_STEP\n\"\"\"\nscip-python python temp indexer `pilot.helpers.agents.architect`/__init__:: The code defines a class called \"Architect\" that represents a person working on a specific project, with attributes for role and project. It also includes functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model.\nscip-python python temp indexer `pilot.helpers.agents.architect`/__init__:: The code defines a class called \"Architect\" that represents a person working on a specific project, with attributes for role and project. It also includes functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model.\nscip-python python temp indexer `pilot.helpers.agents.architect`/ARCHITECTURE_STEP.: undefined\n\"\"\"\nfrom .CodeMonkey import CodeMonkey, IMPLEMENT_CHANGES, GET_FILES\n\"\"\"\nscip-python python temp indexer `pilot.helpers.agents.codemonkey`/__init__:: The code defines a class called \"CodeMonkey\" that represents a person who is working on a specific project. The class has two attributes: \"role\" and \"project\". The \"implement_code_changes\" method sends a message to the developer to implement changes in the code based on the task description and step index.\nscip-python python temp indexer `pilot.helpers.agents.codemonkey`/__init__:: The code defines a class called \"CodeMonkey\" that represents a person who is working on a specific project. The class has two attributes: \"role\" and \"project\". The \"implement_code_changes\" method sends a message to the developer to implement changes in the code based on the task description and step index.\nscip-python python temp indexer `pilot.const.function_calls`/IMPLEMENT_CHANGES.: undefined\nscip-python python temp indexer `pilot.const.function_calls`/GET_FILES.: undefined\n\"\"\"\nfrom .Developer import Developer, ENVIRONMENT_SETUP_STEP\n\"\"\"\nscip-python python temp indexer `pilot.helpers.agents.developer`/__init__:: The code defines a class called \"Developer\" that represents a person working on a specific project, and includes functions for implementing tasks, running commands, and handling human intervention during the development process.\nscip-python python temp indexer `pilot.helpers.agents.developer`/__init__:: The code defines a class called \"Developer\" that represents a person working on a specific project, and includes functions for implementing tasks, running commands, and handling human intervention during the development process.\nscip-python python temp indexer `pilot.helpers.agents.developer`/ENVIRONMENT_SETUP_STEP.: undefined\n\"\"\"\nfrom .TechLead import TechLead\n\"\"\"\nscip-python python temp indexer `pilot.helpers.agents.techlead`/__init__:: The code defines a class called \"TechLead\" that represents a person working on a specific project, and includes functions for retrieving progress data, updating the status of the app in the database, and saving the development plan for the app.\nscip-python python temp indexer `pilot.helpers.agents.techlead`/__init__:: The code defines a class called \"TechLead\" that represents a person working on a specific project, and includes functions for retrieving progress data, updating the status of the app in the database, and saving the development plan for the app.\n\"\"\"\n","documentation":"The code defines several classes and functions that are used in a software development project, including \"Architect\", \"CodeMonkey\", \"Developer\", and \"TechLead\". These classes and functions are used to manage the development process, retrieve progress data, and update the status of the app in the database."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#","attributes":{"range":[18,0,122,65],"symbol":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#","content":"class TestCodeMonkey:\r\n    def setup_method(self):\r\n        name = 'TestDeveloper'\r\n        self.project = Project({\r\n                'app_id': 'test-developer',\r\n                'name': name,\r\n                'app_type': ''\r\n            },\r\n            name=name,\r\n            architecture=[],\r\n            user_stories=[],\r\n            current_step='coding',\r\n        )\r\n\r\n        self.project.set_root_path(os.path.abspath(os.path.join(os.path.dirname(os.path.abspath(__file__)),\r\n                                                              '../../../workspace/TestDeveloper')))\r\n        self.project.technologies = []\r\n        last_step = DevelopmentSteps()\r\n        last_step.id = 1\r\n        self.project.checkpoints = {'last_development_step': last_step}\r\n        self.project.app = None\r\n        self.developer = Developer(self.project)\r\n        self.codeMonkey = CodeMonkey(self.project, developer=self.developer)\r\n\r\n    @patch('helpers.AgentConvo.get_saved_development_step', return_value=None)\r\n    @patch('helpers.AgentConvo.save_development_step')\r\n    @patch('os.get_terminal_size', mock_terminal_size)\r\n    @patch.object(File, 'insert')\r\n    def test_implement_code_changes(self, mock_get_dev, mock_save_dev, mock_file_insert):\r\n        # Given\r\n        task_description = \"High level description of the task\"\r\n        code_changes_description = \"Write the word 'Washington' to a .txt file\"\r\n        self.project.get_all_coded_files = lambda: []\r\n\r\n        if SEND_TO_LLM:\r\n            convo = AgentConvo(self.codeMonkey)\r\n        else:\r\n            convo = MagicMock()\r\n            mock_responses = [\r\n                # [],\r\n                {'files': [{\r\n                    'content': 'Washington',\r\n                    'description': \"A new .txt file with the word 'Washington' in it.\",\r\n                    'name': 'washington.txt',\r\n                    'path': 'washington.txt'\r\n                }]}\r\n            ]\r\n            convo.send_message.side_effect = mock_responses\r\n\r\n        if WRITE_TO_FILE:\r\n            self.codeMonkey.implement_code_changes(convo, task_description, code_changes_description, {})\r\n        else:\r\n            # don't write the file, just\r\n            with patch.object(Project, 'save_file') as mock_save_file:\r\n                # When\r\n                self.codeMonkey.implement_code_changes(convo, task_description, code_changes_description, {})\r\n\r\n                # Then\r\n                mock_save_file.assert_called_once()\r\n                called_data = mock_save_file.call_args[0][0]\r\n                assert re.match(r'\\w+\\.txt$', called_data['name'])\r\n                assert (called_data['path'] == '/' or called_data['path'] == called_data['name'])\r\n                assert called_data['content'] == 'Washington'\r\n\r\n    @patch('helpers.AgentConvo.get_saved_development_step')\r\n    @patch('helpers.AgentConvo.save_development_step')\r\n    @patch('os.get_terminal_size', mock_terminal_size)\r\n    @patch.object(File, 'insert')\r\n    def test_implement_code_changes_with_read(self, mock_get_dev, mock_save_dev, mock_file_insert):\r\n        # Given\r\n        task_description = \"High level description of the task\"\r\n        code_changes_description = \"Read the file called file_to_read.txt and write its content to a file called output.txt\"\r\n        workspace = self.project.root_path\r\n        update_file(os.path.join(workspace, 'file_to_read.txt'), 'Hello World!\\n')\r\n        self.project.get_all_coded_files = lambda: []\r\n\r\n        if SEND_TO_LLM:\r\n            convo = AgentConvo(self.codeMonkey)\r\n        else:\r\n            convo = MagicMock()\r\n            mock_responses = [\r\n                # ['file_to_read.txt', 'output.txt'],\r\n                {'files': [{\r\n                    'content': 'Hello World!\\n',\r\n                    'description': 'This file is the output file. The content of file_to_read.txt is copied into this file.',\r\n                    'name': 'output.txt',\r\n                    'path': 'output.txt'\r\n                }]}\r\n            ]\r\n            convo.send_message.side_effect = mock_responses\r\n\r\n        if WRITE_TO_FILE:\r\n            self.codeMonkey.implement_code_changes(convo, task_description, code_changes_description, {})\r\n        else:\r\n            with patch.object(Project, 'save_file') as mock_save_file:\r\n                # When\r\n                self.codeMonkey.implement_code_changes(convo, task_description, code_changes_description, {})\r\n\r\n                # Then\r\n                clear_directory(workspace)\r\n                mock_save_file.assert_called_once()\r\n                called_data = mock_save_file.call_args[0][0]\r\n                assert called_data['name'] == 'output.txt'\r\n                assert (called_data['path'] == '/' or called_data['path'] == called_data['name'])\r\n                assert called_data['content'] == 'Hello World!\\n'","file":"/pilot/helpers/agents/test_CodeMonkey.py","language":"python","fileHash":"d5dc08350e5e87af0df9249af405c651dca21f0918dcad28c8ad0ec23d9a1578","hash":"4b360e736c63f18f7e262eafddf912fdde1ef846df90d3294098ee4e07fefbc0","processedContent":"class TestCodeMonkey:\r\n    def setup_method(self):\r\n        \"\"\"The code defines a class called \"Project\" that represents a software development project, and includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\"\"\"\n        pass\n\r\n    @patch('helpers.AgentConvo.get_saved_development_step', return_value=None)\r\n    @patch('helpers.AgentConvo.save_development_step')\r\n    @patch('os.get_terminal_size', mock_terminal_size)\r\n    @patch.object(File, 'insert')\r\n    def test_implement_code_changes(self, mock_get_dev, mock_save_dev, mock_file_insert):\r\n        \"\"\"This code defines a function called `implement_code_changes` that sends a message to an agent and receives a response. It then replaces old code comments with new ones and saves the changes to the project files.\"\"\"\n        pass\n\r\n    @patch('helpers.AgentConvo.get_saved_development_step')\r\n    @patch('helpers.AgentConvo.save_development_step')\r\n    @patch('os.get_terminal_size', mock_terminal_size)\r\n    @patch.object(File, 'insert')\r\n    def test_implement_code_changes_with_read(self, mock_get_dev, mock_save_dev, mock_file_insert):\r\n        # Given\r\n        task_description = \"High level description of the task\"\r\n        code_changes_description = \"Read the file called file_to_read.txt and write its content to a file called output.txt\"\r\n        workspace = self.project.root_path\r\n        update_file(os.path.join(workspace, 'file_to_read.txt'), 'Hello World!\\n')\r\n        self.project.get_all_coded_files = lambda: []\r\n\r\n        if SEND_TO_LLM:\r\n            convo = AgentConvo(self.codeMonkey)\r\n        else:\r\n            convo = MagicMock()\r\n            mock_responses = [\r\n                # ['file_to_read.txt', 'output.txt'],\r\n                {'files': [{\r\n                    'content': 'Hello World!\\n',\r\n                    'description': 'This file is the output file. The content of file_to_read.txt is copied into this file.',\r\n                    'name': 'output.txt',\r\n                    'path': 'output.txt'\r\n                }]}\r\n            ]\r\n            convo.send_message.side_effect = mock_responses\r\n\r\n        if WRITE_TO_FILE:\r\n            self.codeMonkey.implement_code_changes(convo, task_description, code_changes_description, {})\r\n        else:\r\n            with patch.object(Project, 'save_file') as mock_save_file:\r\n                # When\r\n                self.codeMonkey.implement_code_changes(convo, task_description, code_changes_description, {})\r\n\r\n                # Then\r\n                clear_directory(workspace)\r\n                mock_save_file.assert_called_once()\r\n                called_data = mock_save_file.call_args[0][0]\r\n                assert called_data['name'] == 'output.txt'\r\n                assert (called_data['path'] == '/' or called_data['path'] == called_data['name'])\r\n                assert called_data['content'] == 'Hello World!\\n'","documentation":"This code defines a class called \"TestCodeMonkey\" that includes functions for testing the implementation of code changes in a software development project."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#setup_method().","attributes":{"range":[19,4,40,76],"symbol":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#setup_method().","content":"def setup_method(self):\r\n        name = 'TestDeveloper'\r\n        self.project = Project({\r\n                'app_id': 'test-developer',\r\n                'name': name,\r\n                'app_type': ''\r\n            },\r\n            name=name,\r\n            architecture=[],\r\n            user_stories=[],\r\n            current_step='coding',\r\n        )\r\n\r\n        self.project.set_root_path(os.path.abspath(os.path.join(os.path.dirname(os.path.abspath(__file__)),\r\n                                                              '../../../workspace/TestDeveloper')))\r\n        self.project.technologies = []\r\n        last_step = DevelopmentSteps()\r\n        last_step.id = 1\r\n        self.project.checkpoints = {'last_development_step': last_step}\r\n        self.project.app = None\r\n        self.developer = Developer(self.project)\r\n        self.codeMonkey = CodeMonkey(self.project, developer=self.developer)","file":"/pilot/helpers/agents/test_CodeMonkey.py","language":"python","fileHash":"d5dc08350e5e87af0df9249af405c651dca21f0918dcad28c8ad0ec23d9a1578","hash":"cebffc7a5ad26735b49e8005be06d28602bde4c26069e047b78ae6172925be1a","processedContent":"def setup_method(self):\r\n        name = 'TestDeveloper'\r\n        self.project = Project({\r #The code defines a class called \"Project\" that represents a software development project. It includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\n                'app_id': 'test-developer',\r\n                'name': name,\r\n                'app_type': ''\r\n            },\r\n            name=name,\r\n            architecture=[],\r\n            user_stories=[],\r\n            current_step='coding',\r\n        )\r\n\r\n        self.project.set_root_path(os.path.abspath(os.path.join(os.path.dirname(os.path.abspath(__file__)),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#project.: undefined\n        scip-python python temp indexer `pilot.helpers.project`/Project#set_root_path().: This code sets the root path for a file system, allowing the program to access files and directories within that path.\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/path.: undefined\n        scip-python python python-stdlib 3.11 os/path.: undefined\n        scip-python python python-stdlib 3.11 os/path.: undefined\n        scip-python python python-stdlib 3.11 os/path.: undefined\n        scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n        scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n        scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n        scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n        scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/: undefined\n        \"\"\"\n                                                              '../../../workspace/TestDeveloper')))\r\n        self.project.technologies = []\r #undefined\n        last_step = DevelopmentSteps()\r #This code defines a model for the development steps table in the database. It includes fields for an ID, creation and update timestamps, and a foreign key to the app entity. The model also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\n        last_step.id = 1\r #undefined\n        self.project.checkpoints = {'last_development_step': last_step}\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#project.: undefined\n        scip-python python temp indexer `pilot.helpers.project`/Project#checkpoints.: undefined\n        \"\"\"\n        self.project.app = None\r #undefined\n        self.developer = Developer(self.project)\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#project.: undefined\n        scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#: The code defines a class called \"Developer\" that represents a person working on a specific project. It has functions for implementing tasks, running commands, and handling human intervention during the development process.\n        \"\"\"\n        self.codeMonkey = CodeMonkey(self.project, developer=self.developer)","documentation":"The code defines a class called \"Project\" that represents a software development project, and includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#test_implement_code_changes().","attributes":{"range":[42,4,80,61],"symbol":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#test_implement_code_changes().","content":"@patch('helpers.AgentConvo.get_saved_development_step', return_value=None)\r\n    @patch('helpers.AgentConvo.save_development_step')\r\n    @patch('os.get_terminal_size', mock_terminal_size)\r\n    @patch.object(File, 'insert')\r\n    def test_implement_code_changes(self, mock_get_dev, mock_save_dev, mock_file_insert):\r\n        # Given\r\n        task_description = \"High level description of the task\"\r\n        code_changes_description = \"Write the word 'Washington' to a .txt file\"\r\n        self.project.get_all_coded_files = lambda: []\r\n\r\n        if SEND_TO_LLM:\r\n            convo = AgentConvo(self.codeMonkey)\r\n        else:\r\n            convo = MagicMock()\r\n            mock_responses = [\r\n                # [],\r\n                {'files': [{\r\n                    'content': 'Washington',\r\n                    'description': \"A new .txt file with the word 'Washington' in it.\",\r\n                    'name': 'washington.txt',\r\n                    'path': 'washington.txt'\r\n                }]}\r\n            ]\r\n            convo.send_message.side_effect = mock_responses\r\n\r\n        if WRITE_TO_FILE:\r\n            self.codeMonkey.implement_code_changes(convo, task_description, code_changes_description, {})\r\n        else:\r\n            # don't write the file, just\r\n            with patch.object(Project, 'save_file') as mock_save_file:\r\n                # When\r\n                self.codeMonkey.implement_code_changes(convo, task_description, code_changes_description, {})\r\n\r\n                # Then\r\n                mock_save_file.assert_called_once()\r\n                called_data = mock_save_file.call_args[0][0]\r\n                assert re.match(r'\\w+\\.txt$', called_data['name'])\r\n                assert (called_data['path'] == '/' or called_data['path'] == called_data['name'])\r\n                assert called_data['content'] == 'Washington'","file":"/pilot/helpers/agents/test_CodeMonkey.py","language":"python","fileHash":"d5dc08350e5e87af0df9249af405c651dca21f0918dcad28c8ad0ec23d9a1578","hash":"5b880e3ab2dcbee05610e42ab0fe7c81eaf8f2a8ff9717ce72dc101a50fe586c","processedContent":"@patch('helpers.AgentConvo.get_saved_development_step', return_value=None)\r\n    @patch('helpers.AgentConvo.save_development_step')\r\n    @patch('os.get_terminal_size', mock_terminal_size)\r #This code defines a function called `mock_terminal_size` that returns a mock object with a fixed width of 80 columns.\n    @patch.object(File, 'insert')\r #This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n    def test_implement_code_changes(self, mock_get_dev, mock_save_dev, mock_file_insert):\r\n        # Given\r\n        task_description = \"High level description of the task\"\r\n        code_changes_description = \"Write the word 'Washington' to a .txt file\"\r\n        self.project.get_all_coded_files = lambda: []\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#project.: undefined\n        scip-python python temp indexer `pilot.helpers.project`/Project#get_all_coded_files().: This code defines a function called `get_all_coded_files` that retrieves all files in a project and returns them as a list of dictionaries, each containing the file's path, contents, and other metadata.\n        \"\"\"\n\r\n        if SEND_TO_LLM:\r #undefined\n            convo = AgentConvo(self.codeMonkey)\r\n            \"\"\"\n            scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#: This code defines a class called `AgentConvo` that represents a conversation with an agent. It includes functions for sending and receiving messages, as well as formatting and rendering prompts. The code also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n            scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#codeMonkey.: undefined\n            \"\"\"\n        else:\r\n            convo = MagicMock()\r\n            mock_responses = [\r\n                # [],\r\n                {'files': [{\r\n                    'content': 'Washington',\r\n                    'description': \"A new .txt file with the word 'Washington' in it.\",\r\n                    'name': 'washington.txt',\r\n                    'path': 'washington.txt'\r\n                }]}\r\n            ]\r\n            convo.send_message.side_effect = mock_responses\r\n\r\n        if WRITE_TO_FILE:\r #undefined\n            self.codeMonkey.implement_code_changes(convo, task_description, code_changes_description, {})\r\n            \"\"\"\n            scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#codeMonkey.: undefined\n            scip-python python temp indexer `pilot.helpers.agents.codemonkey`/CodeMonkey#implement_code_changes().: The code defines a function called `implement_code_changes` that sends a message to an agent and receives a response. It then replaces old code comments with new ones and saves the changes to the project files.\n            \"\"\"\n        else:\r\n            # don't write the file, just\r\n            with patch.object(Project, 'save_file') as mock_save_file:\r #The code defines a class called \"Project\" that represents a software development project. It includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\n                # When\r\n                self.codeMonkey.implement_code_changes(convo, task_description, code_changes_description, {})\r\n                \"\"\"\n                scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#codeMonkey.: undefined\n                scip-python python temp indexer `pilot.helpers.agents.codemonkey`/CodeMonkey#implement_code_changes().: The code defines a function called `implement_code_changes` that sends a message to an agent and receives a response. It then replaces old code comments with new ones and saves the changes to the project files.\n                \"\"\"\n\r\n                # Then\r\n                mock_save_file.assert_called_once()\r\n                called_data = mock_save_file.call_args[0][0]\r\n                assert re.match(r'\\w+\\.txt                assert (called_data['path'] == '/' or called_data['path'] == called_data['name'])\r\n                assert called_data['content'] == 'Washington', called_data['name'])\r\n                \"\"\"\n                scip-python python python-stdlib 3.11 re/__init__:: undefined\n                scip-python python python-stdlib 3.11 re/match().: undefined\n                \"\"\"\n                assert (called_data['path'] == '/' or called_data['path'] == called_data['name'])\r\n                assert called_data['content'] == 'Washington'","documentation":"This code defines a function called `implement_code_changes` that sends a message to an agent and receives a response. It then replaces old code comments with new ones and saves the changes to the project files."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#test_implement_code_changes_with_read().","attributes":{"range":[82,4,122,65],"symbol":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#test_implement_code_changes_with_read().","content":"@patch('helpers.AgentConvo.get_saved_development_step')\r\n    @patch('helpers.AgentConvo.save_development_step')\r\n    @patch('os.get_terminal_size', mock_terminal_size)\r\n    @patch.object(File, 'insert')\r\n    def test_implement_code_changes_with_read(self, mock_get_dev, mock_save_dev, mock_file_insert):\r\n        # Given\r\n        task_description = \"High level description of the task\"\r\n        code_changes_description = \"Read the file called file_to_read.txt and write its content to a file called output.txt\"\r\n        workspace = self.project.root_path\r\n        update_file(os.path.join(workspace, 'file_to_read.txt'), 'Hello World!\\n')\r\n        self.project.get_all_coded_files = lambda: []\r\n\r\n        if SEND_TO_LLM:\r\n            convo = AgentConvo(self.codeMonkey)\r\n        else:\r\n            convo = MagicMock()\r\n            mock_responses = [\r\n                # ['file_to_read.txt', 'output.txt'],\r\n                {'files': [{\r\n                    'content': 'Hello World!\\n',\r\n                    'description': 'This file is the output file. The content of file_to_read.txt is copied into this file.',\r\n                    'name': 'output.txt',\r\n                    'path': 'output.txt'\r\n                }]}\r\n            ]\r\n            convo.send_message.side_effect = mock_responses\r\n\r\n        if WRITE_TO_FILE:\r\n            self.codeMonkey.implement_code_changes(convo, task_description, code_changes_description, {})\r\n        else:\r\n            with patch.object(Project, 'save_file') as mock_save_file:\r\n                # When\r\n                self.codeMonkey.implement_code_changes(convo, task_description, code_changes_description, {})\r\n\r\n                # Then\r\n                clear_directory(workspace)\r\n                mock_save_file.assert_called_once()\r\n                called_data = mock_save_file.call_args[0][0]\r\n                assert called_data['name'] == 'output.txt'\r\n                assert (called_data['path'] == '/' or called_data['path'] == called_data['name'])\r\n                assert called_data['content'] == 'Hello World!\\n'","file":"/pilot/helpers/agents/test_CodeMonkey.py","language":"python","fileHash":"d5dc08350e5e87af0df9249af405c651dca21f0918dcad28c8ad0ec23d9a1578","hash":"35ea14d9af28b045de8321c9d46f29a9fad6a41a845ce302969d154c3a238f91","processedContent":"@patch('helpers.AgentConvo.get_saved_development_step')\r\n    @patch('helpers.AgentConvo.save_development_step')\r\n    @patch('os.get_terminal_size', mock_terminal_size)\r #This code defines a function called `mock_terminal_size` that returns a mock object with a fixed width of 80 columns.\n    @patch.object(File, 'insert')\r #This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n    def test_implement_code_changes_with_read(self, mock_get_dev, mock_save_dev, mock_file_insert):\r\n        # Given\r\n        task_description = \"High level description of the task\"\r\n        code_changes_description = \"Read the file called file_to_read.txt and write its content to a file called output.txt\"\r\n        workspace = self.project.root_path\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#project.: undefined\n        scip-python python temp indexer `pilot.helpers.project`/Project#root_path.: undefined\n        \"\"\"\n        update_file(os.path.join(workspace, 'file_to_read.txt'), 'Hello World!\\n')\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.files`/update_file().: This code updates a file with new content. It creates any necessary intermediate directories, writes the file using UTF-8 encoding if it's text, and prints a success message.\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/path.: undefined\n        scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n        \"\"\"\n        self.project.get_all_coded_files = lambda: []\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#project.: undefined\n        scip-python python temp indexer `pilot.helpers.project`/Project#get_all_coded_files().: This code defines a function called `get_all_coded_files` that retrieves all files in a project and returns them as a list of dictionaries, each containing the file's path, contents, and other metadata.\n        \"\"\"\n\r\n        if SEND_TO_LLM:\r #undefined\n            convo = AgentConvo(self.codeMonkey)\r\n            \"\"\"\n            scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#: This code defines a class called `AgentConvo` that represents a conversation with an agent. It includes functions for sending and receiving messages, as well as formatting and rendering prompts. The code also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n            scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#codeMonkey.: undefined\n            \"\"\"\n        else:\r\n            convo = MagicMock()\r\n            mock_responses = [\r\n                # ['file_to_read.txt', 'output.txt'],\r\n                {'files': [{\r\n                    'content': 'Hello World!\\n',\r\n                    'description': 'This file is the output file. The content of file_to_read.txt is copied into this file.',\r\n                    'name': 'output.txt',\r\n                    'path': 'output.txt'\r\n                }]}\r\n            ]\r\n            convo.send_message.side_effect = mock_responses\r\n\r\n        if WRITE_TO_FILE:\r #undefined\n            self.codeMonkey.implement_code_changes(convo, task_description, code_changes_description, {})\r\n            \"\"\"\n            scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#codeMonkey.: undefined\n            scip-python python temp indexer `pilot.helpers.agents.codemonkey`/CodeMonkey#implement_code_changes().: The code defines a function called `implement_code_changes` that sends a message to an agent and receives a response. It then replaces old code comments with new ones and saves the changes to the project files.\n            \"\"\"\n        else:\r\n            with patch.object(Project, 'save_file') as mock_save_file:\r #The code defines a class called \"Project\" that represents a software development project. It includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\n                # When\r\n                self.codeMonkey.implement_code_changes(convo, task_description, code_changes_description, {})\r\n                \"\"\"\n                scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#codeMonkey.: undefined\n                scip-python python temp indexer `pilot.helpers.agents.codemonkey`/CodeMonkey#implement_code_changes().: The code defines a function called `implement_code_changes` that sends a message to an agent and receives a response. It then replaces old code comments with new ones and saves the changes to the project files.\n                \"\"\"\n\r\n                # Then\r\n                clear_directory(workspace)\r #This code defines a function called `clear_directory` that takes a directory path and an optional list of files or folders to ignore. It recursively traverses the directory and its subdirectories, deleting all files and empty subdirectories except for those in the ignore list.\n                mock_save_file.assert_called_once()\r\n                called_data = mock_save_file.call_args[0][0]\r\n                assert called_data['name'] == 'output.txt'\r\n                assert (called_data['path'] == '/' or called_data['path'] == called_data['name'])\r\n                assert called_data['content'] == 'Hello World!\\n'","documentation":"This code defines a function called `implement_code_changes` that sends a message to an agent and receives a response. It then replaces old code comments with new ones and saves the changes to the project files."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/__init__:","range":[0,0,123,0],"content":"import re\r\nimport os\r\nfrom unittest.mock import patch, MagicMock\r\nfrom dotenv import load_dotenv\r\nload_dotenv()\r\n\r\nfrom .CodeMonkey import CodeMonkey\r\nfrom .Developer import Developer\r\nfrom database.models.files import File\r\nfrom database.models.development_steps import DevelopmentSteps\r\nfrom helpers.Project import Project, update_file, clear_directory\r\nfrom helpers.AgentConvo import AgentConvo\r\nfrom test.test_utils import mock_terminal_size\r\n\r\nSEND_TO_LLM = False\r\nWRITE_TO_FILE = False\r\n\r\n\r\nclass TestCodeMonkey:\r\n    def setup_method(self):\r\n        name = 'TestDeveloper'\r\n        self.project = Project({\r\n                'app_id': 'test-developer',\r\n                'name': name,\r\n                'app_type': ''\r\n            },\r\n            name=name,\r\n            architecture=[],\r\n            user_stories=[],\r\n            current_step='coding',\r\n        )\r\n\r\n        self.project.set_root_path(os.path.abspath(os.path.join(os.path.dirname(os.path.abspath(__file__)),\r\n                                                              '../../../workspace/TestDeveloper')))\r\n        self.project.technologies = []\r\n        last_step = DevelopmentSteps()\r\n        last_step.id = 1\r\n        self.project.checkpoints = {'last_development_step': last_step}\r\n        self.project.app = None\r\n        self.developer = Developer(self.project)\r\n        self.codeMonkey = CodeMonkey(self.project, developer=self.developer)\r\n\r\n    @patch('helpers.AgentConvo.get_saved_development_step', return_value=None)\r\n    @patch('helpers.AgentConvo.save_development_step')\r\n    @patch('os.get_terminal_size', mock_terminal_size)\r\n    @patch.object(File, 'insert')\r\n    def test_implement_code_changes(self, mock_get_dev, mock_save_dev, mock_file_insert):\r\n        # Given\r\n        task_description = \"High level description of the task\"\r\n        code_changes_description = \"Write the word 'Washington' to a .txt file\"\r\n        self.project.get_all_coded_files = lambda: []\r\n\r\n        if SEND_TO_LLM:\r\n            convo = AgentConvo(self.codeMonkey)\r\n        else:\r\n            convo = MagicMock()\r\n            mock_responses = [\r\n                # [],\r\n                {'files': [{\r\n                    'content': 'Washington',\r\n                    'description': \"A new .txt file with the word 'Washington' in it.\",\r\n                    'name': 'washington.txt',\r\n                    'path': 'washington.txt'\r\n                }]}\r\n            ]\r\n            convo.send_message.side_effect = mock_responses\r\n\r\n        if WRITE_TO_FILE:\r\n            self.codeMonkey.implement_code_changes(convo, task_description, code_changes_description, {})\r\n        else:\r\n            # don't write the file, just\r\n            with patch.object(Project, 'save_file') as mock_save_file:\r\n                # When\r\n                self.codeMonkey.implement_code_changes(convo, task_description, code_changes_description, {})\r\n\r\n                # Then\r\n                mock_save_file.assert_called_once()\r\n                called_data = mock_save_file.call_args[0][0]\r\n                assert re.match(r'\\w+\\.txt$', called_data['name'])\r\n                assert (called_data['path'] == '/' or called_data['path'] == called_data['name'])\r\n                assert called_data['content'] == 'Washington'\r\n\r\n    @patch('helpers.AgentConvo.get_saved_development_step')\r\n    @patch('helpers.AgentConvo.save_development_step')\r\n    @patch('os.get_terminal_size', mock_terminal_size)\r\n    @patch.object(File, 'insert')\r\n    def test_implement_code_changes_with_read(self, mock_get_dev, mock_save_dev, mock_file_insert):\r\n        # Given\r\n        task_description = \"High level description of the task\"\r\n        code_changes_description = \"Read the file called file_to_read.txt and write its content to a file called output.txt\"\r\n        workspace = self.project.root_path\r\n        update_file(os.path.join(workspace, 'file_to_read.txt'), 'Hello World!\\n')\r\n        self.project.get_all_coded_files = lambda: []\r\n\r\n        if SEND_TO_LLM:\r\n            convo = AgentConvo(self.codeMonkey)\r\n        else:\r\n            convo = MagicMock()\r\n            mock_responses = [\r\n                # ['file_to_read.txt', 'output.txt'],\r\n                {'files': [{\r\n                    'content': 'Hello World!\\n',\r\n                    'description': 'This file is the output file. The content of file_to_read.txt is copied into this file.',\r\n                    'name': 'output.txt',\r\n                    'path': 'output.txt'\r\n                }]}\r\n            ]\r\n            convo.send_message.side_effect = mock_responses\r\n\r\n        if WRITE_TO_FILE:\r\n            self.codeMonkey.implement_code_changes(convo, task_description, code_changes_description, {})\r\n        else:\r\n            with patch.object(Project, 'save_file') as mock_save_file:\r\n                # When\r\n                self.codeMonkey.implement_code_changes(convo, task_description, code_changes_description, {})\r\n\r\n                # Then\r\n                clear_directory(workspace)\r\n                mock_save_file.assert_called_once()\r\n                called_data = mock_save_file.call_args[0][0]\r\n                assert called_data['name'] == 'output.txt'\r\n                assert (called_data['path'] == '/' or called_data['path'] == called_data['name'])\r\n                assert called_data['content'] == 'Hello World!\\n'\r\n","file":"/pilot/helpers/agents/test_CodeMonkey.py","language":"python","fileHash":"d5dc08350e5e87af0df9249af405c651dca21f0918dcad28c8ad0ec23d9a1578","hash":"d5dc08350e5e87af0df9249af405c651dca21f0918dcad28c8ad0ec23d9a1578","processedContent":"import re\r #undefined\nimport os\r #undefined\nfrom unittest.mock import patch, MagicMock\r #undefined\nfrom dotenv import load_dotenv\r\n\"\"\"\nscip-python python python-dotenv 1.0.0 dotenv/__init__:: undefined\nscip-python python python-dotenv 1.0.0 `dotenv.main`/load_dotenv().: undefined\n\"\"\"\nload_dotenv()\r #undefined\n\r\nfrom .CodeMonkey import CodeMonkey\r\n\"\"\"\nscip-python python temp indexer `pilot.helpers.agents.codemonkey`/__init__:: The code defines a class called \"CodeMonkey\" that represents a person who is working on a specific project. The class has two attributes: \"role\" and \"project\". The \"implement_code_changes\" method sends a message to the developer to implement changes in the code based on the task description and step index.\nscip-python python temp indexer `pilot.helpers.agents.codemonkey`/CodeMonkey#: This code defines a class called \"CodeMonkey\" that represents a person who is working on a specific project. The class has two attributes: \"role\" and \"project\". The \"implement_code_changes\" method sends a message to the developer to implement changes in the code based on the task description and step index.\n\"\"\"\nfrom .Developer import Developer\r\n\"\"\"\nscip-python python temp indexer `pilot.helpers.agents.developer`/__init__:: The code defines a class called \"Developer\" that represents a person working on a specific project, and includes functions for implementing tasks, running commands, and handling human intervention during the development process.\nscip-python python temp indexer `pilot.helpers.agents.developer`/Developer#: The code defines a class called \"Developer\" that represents a person working on a specific project. It has functions for implementing tasks, running commands, and handling human intervention during the development process.\n\"\"\"\nfrom database.models.files import File\r\n\"\"\"\nscip-python python temp indexer `pilot.database.models.files`/__init__:: The code defines a base model class for an app entity with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\nscip-python python temp indexer `pilot.database.models.files`/File#: This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n\"\"\"\nfrom database.models.development_steps import DevelopmentSteps\r\n\"\"\"\nscip-python python temp indexer `pilot.database.models.development_steps`/__init__:: The code defines a model for the development steps table in a database, with fields for an ID, creation and update timestamps, and a foreign key to the app entity. It also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\nscip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#: This code defines a model for the development steps table in the database. It includes fields for an ID, creation and update timestamps, and a foreign key to the app entity. The model also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\n\"\"\"\nfrom helpers.Project import Project, update_file, clear_directory\r\n\"\"\"\nscip-python python temp indexer `pilot.helpers.project`/__init__:: The code defines a Python class called \"Project\" that represents a software development project, with functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\nscip-python python temp indexer `pilot.helpers.project`/Project#: The code defines a class called \"Project\" that represents a software development project. It includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\nscip-python python temp indexer `pilot.helpers.files`/update_file().: This code updates a file with new content. It creates any necessary intermediate directories, writes the file using UTF-8 encoding if it's text, and prints a success message.\nscip-python python temp indexer `pilot.helpers.files`/clear_directory().: This code defines a function called `clear_directory` that takes a directory path and an optional list of files or folders to ignore. It recursively traverses the directory and its subdirectories, deleting all files and empty subdirectories except for those in the ignore list.\n\"\"\"\nfrom helpers.AgentConvo import AgentConvo\r\n\"\"\"\nscip-python python temp indexer `pilot.helpers.agentconvo`/__init__:: The code defines a class called `AgentConvo` that represents a conversation with an agent, including functions for sending and receiving messages, formatting and rendering prompts, and error handling for GPT model token limits.\nscip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#: This code defines a class called `AgentConvo` that represents a conversation with an agent. It includes functions for sending and receiving messages, as well as formatting and rendering prompts. The code also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n\"\"\"\nfrom test.test_utils import mock_terminal_size\r\n\"\"\"\nscip-python python temp indexer `pilot.test.test_utils`/__init__:: The code defines two functions: `mock_terminal_size` and `assert_non_empty_string`. The first function returns a mock object with a fixed width of 80 columns, while the second function checks that a value is a non-empty string by checking if it's an instance of the `str` class and has a length greater than 0.\nscip-python python temp indexer `pilot.test.test_utils`/mock_terminal_size().: This code defines a function called `mock_terminal_size` that returns a mock object with a fixed width of 80 columns.\n\"\"\"\n\r\nSEND_TO_LLM = False\r\nWRITE_TO_FILE = False\r\n\r\n\r\nclass TestCodeMonkey:\r\n    \"\"\"This code defines a class called \"TestCodeMonkey\" that includes functions for testing the implementation of code changes in a software development project.\"\"\"\n    pass\n","documentation":"This code defines a class called \"TestCodeMonkey\" that includes functions for testing the implementation of code changes in a software development project."}},{"key":"scip-python python temp indexer `pilot.test.test_utils`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.test.test_utils`/__init__:","language":"python","range":[0,0,11,0],"content":"from unittest.mock import Mock\r\n\r\n\r\ndef mock_terminal_size():\r\n    mock_size = Mock()\r\n    mock_size.columns = 80  # or whatever width you want\r\n    return mock_size\r\n\r\ndef assert_non_empty_string(value):\r\n    assert isinstance(value, str)\r\n    assert len(value) > 0\r\n","file":"/pilot/test/test_utils.py","fileHash":"97acdfe4271aefbb335d4b52bf13b331eab2aff4866f71baf15fc45e10cd6336","hash":"97acdfe4271aefbb335d4b52bf13b331eab2aff4866f71baf15fc45e10cd6336","processedContent":"from unittest.mock import Mock\r #undefined\n\r\n\r\ndef mock_terminal_size():\r\n    \"\"\"This code defines a function called `mock_terminal_size` that returns a mock object with a fixed width of 80 columns.\"\"\"\n    pass\n\r\ndef assert_non_empty_string(value):\r\n    \"\"\"This code checks that a value is a non-empty string. It does this by first checking that the value is an instance of the `str` class, and then checking that the length of the string is greater than 0.\"\"\"\n    pass\n","documentation":"The code defines two functions: `mock_terminal_size` and `assert_non_empty_string`. The first function returns a mock object with a fixed width of 80 columns, while the second function checks that a value is a non-empty string by checking if it's an instance of the `str` class and has a length greater than 0."}},{"key":"scip-python python temp indexer `pilot.test.test_utils`/mock_terminal_size().","attributes":{"symbol":"scip-python python temp indexer `pilot.test.test_utils`/mock_terminal_size().","language":"python","range":[3,0,6,20],"content":"def mock_terminal_size():\r\n    mock_size = Mock()\r\n    mock_size.columns = 80  # or whatever width you want\r\n    return mock_size","file":"/pilot/test/test_utils.py","fileHash":"97acdfe4271aefbb335d4b52bf13b331eab2aff4866f71baf15fc45e10cd6336","hash":"c8e1e8c692b2c2d85241c9d41164ead9194effc171b5a6d490d7d869ddd6b7f9","processedContent":"def mock_terminal_size():\r\n    mock_size = Mock()\r\n    mock_size.columns = 80  # or whatever width you want\r\n    return mock_size","documentation":"This code defines a function called `mock_terminal_size` that returns a mock object with a fixed width of 80 columns."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#project.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#project.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#developer.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#developer.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/SEND_TO_LLM.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/SEND_TO_LLM.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#codeMonkey.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#codeMonkey.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/WRITE_TO_FILE.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/WRITE_TO_FILE.","language":"python"}},{"key":"scip-python python python-stdlib 3.11 re/match().","attributes":{"symbol":"scip-python python python-stdlib 3.11 re/match().","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#","attributes":{"range":[18,0,237,49],"symbol":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#","content":"class TestDeveloper:\r\n    def setup_method(self):\r\n        builtins.print, ipc_client_instance = get_custom_print({})\r\n\r\n        name = 'TestDeveloper'\r\n        self.project = create_project()\r\n        self.project.app_id = 'test-developer'\r\n        self.project.name = name\r\n        self.project.set_root_path(os.path.abspath(os.path.join(os.path.dirname(os.path.abspath(__file__)),\r\n                                                              '../../../workspace/TestDeveloper')))\r\n\r\n        self.project.technologies = []\r\n        self.project.current_step = ENVIRONMENT_SETUP_STEP\r\n        self.developer = Developer(self.project)\r\n\r\n    @pytest.mark.uses_tokens\r\n    @patch('helpers.AgentConvo.get_saved_development_step')\r\n    @patch('helpers.AgentConvo.save_development_step')\r\n    @patch('helpers.AgentConvo.create_gpt_chat_completion',\r\n           return_value={'text': '{\"command\": \"python --version\", \"timeout\": 10}'})\r\n    @patch('helpers.cli.execute_command', return_value=('', 'DONE', None))\r\n    def test_install_technology(self, mock_execute_command,\r\n                                mock_completion, mock_save, mock_get_saved_step):\r\n        # Given\r\n        self.developer.convo_os_specific_tech = AgentConvo(self.developer)\r\n\r\n        # When\r\n        llm_response = self.developer.install_technology('python')\r\n\r\n        # Then\r\n        assert llm_response == 'DONE'\r\n        mock_execute_command.assert_called_once_with(self.project, 'python --version', timeout=10, command_id=None)\r\n\r\n    @patch('helpers.AgentConvo.get_saved_development_step')\r\n    @patch('helpers.AgentConvo.save_development_step')\r\n    @patch('helpers.AgentConvo.create_gpt_chat_completion',\r\n           return_value={'text': '{\"tasks\": [{\"command\": \"ls -al\"}]}'})\r\n    def test_implement_task(self, mock_completion, mock_save, mock_get_saved_step):\r\n        # Given any project\r\n        project = create_project()\r\n        project.project_description = 'Test Project'\r\n        project.development_plan = [{\r\n            'description': 'Do stuff',\r\n            'user_review_goal': 'Do stuff',\r\n        }]\r\n        project.get_all_coded_files = lambda: []\r\n        project.current_step = 'test'\r\n\r\n        # and a developer who will execute any task\r\n        developer = Developer(project)\r\n        developer.execute_task = MagicMock()\r\n        developer.execute_task.return_value = {'success': True}\r\n\r\n        # When\r\n        developer.implement_task(0, {'description': 'Do stuff'})\r\n\r\n        # Then we parse the response correctly and send list of steps to execute_task()\r\n        assert developer.execute_task.call_count == 1\r\n        assert developer.execute_task.call_args[0][2] == [{'command': 'ls -al'}]\r\n\r\n    @patch('helpers.AgentConvo.get_saved_development_step')\r\n    @patch('helpers.AgentConvo.save_development_step')\r\n    @patch('helpers.AgentConvo.create_gpt_chat_completion',\r\n           return_value={'text': '{\"tasks\": [{\"command\": \"ls -al\"}, {\"command\": \"ls -al src\"}, {\"command\": \"ls -al test\"}, {\"command\": \"ls -al build\"}]}'})\r\n    def test_implement_task_reject_with_user_input(self, mock_completion, mock_save, mock_get_saved_step):\r\n        # Given any project\r\n        project = create_project()\r\n        project.project_description = 'Test Project'\r\n        project.development_plan = [{\r\n            'description': 'Do stuff',\r\n            'user_review_goal': 'Do stuff',\r\n        }]\r\n        project.get_all_coded_files = lambda: []\r\n        project.current_step = 'test'\r\n\r\n        # and a developer who will execute any task except for `ls -al test`\r\n        developer = Developer(project)\r\n        developer.execute_task = MagicMock()\r\n        developer.execute_task.side_effect = [\r\n            {'success': False, 'step_index': 2, 'user_input': 'no, use a better command'},\r\n            {'success': True}\r\n        ]\r\n\r\n        # When\r\n        developer.implement_task(0, {'description': 'Do stuff'})\r\n\r\n        # Then we include the user input in the conversation to update the task list\r\n        assert mock_completion.call_count == 3\r\n        prompt = mock_completion.call_args_list[2].args[0][2]['content']\r\n        assert prompt.startswith('{\"tasks\": [{\"command\": \"ls -al\"}, {\"command\": \"ls -al src\"}, {\"command\": \"ls -al test\"}, {\"command\": \"ls -al build\"}]}'.lstrip())\r\n        # and call `execute_task()` again\r\n        assert developer.execute_task.call_count == 2\r\n\r\n    @patch('helpers.AgentConvo.get_saved_development_step')\r\n    @patch('helpers.AgentConvo.save_development_step')\r\n    # GET_TEST_TYPE has optional properties, so we need to be able to handle missing args.\r\n    @patch('helpers.AgentConvo.create_gpt_chat_completion',\r\n           return_value={'text': '{\"type\": \"command_test\", \"command\": {\"command\": \"npm run test\", \"timeout\": 3000}}'})\r\n    # 2nd arg of return_value: `None` to debug, 'DONE' if successful\r\n    @patch('helpers.cli.execute_command', return_value=('stdout:\\n```\\n\\n```', 'DONE', None))\r\n    # @patch('helpers.cli.ask_user', return_value='yes')\r\n    # @patch('helpers.cli.get_saved_command_run')\r\n    def test_code_changes_command_test(self, mock_get_saved_step, mock_save, mock_chat_completion,\r\n                               # Note: the 2nd line below will use the LLM to debug, uncomment the @patches accordingly\r\n                               mock_execute_command):\r\n                               # mock_ask_user, mock_get_saved_command_run):\r\n        # Given\r\n        monkey = None\r\n        convo = AgentConvo(self.developer)\r\n        convo.save_branch = lambda branch_name=None: branch_name\r\n\r\n        # When\r\n        # \"Now, we need to verify if this change was successfully implemented...\r\n        result = self.developer.test_code_changes(monkey, convo)\r\n\r\n        # Then\r\n        assert result == {'success': True}\r\n\r\n    @patch('helpers.AgentConvo.get_saved_development_step')\r\n    @patch('helpers.AgentConvo.save_development_step')\r\n    # GET_TEST_TYPE has optional properties, so we need to be able to handle missing args.\r\n    @patch('helpers.AgentConvo.create_gpt_chat_completion',\r\n           return_value={'text': '{\"type\": \"manual_test\", \"manual_test_description\": \"Does it look good?\"}'})\r\n    @patch('helpers.Project.ask_user', return_value='continue')\r\n    def test_code_changes_manual_test_continue(self, mock_get_saved_step, mock_save, mock_chat_completion, mock_ask_user):\r\n        # Given\r\n        monkey = None\r\n        convo = AgentConvo(self.developer)\r\n        convo.save_branch = lambda branch_name=None: branch_name\r\n\r\n        # When\r\n        result = self.developer.test_code_changes(monkey, convo)\r\n\r\n        # Then\r\n        assert result == {'success': True}\r\n\r\n    @pytest.mark.skip(\"endless loop in questionary\")\r\n    @patch('helpers.AgentConvo.get_saved_development_step')\r\n    @patch('helpers.AgentConvo.save_development_step')\r\n    @patch('helpers.AgentConvo.create_gpt_chat_completion')\r\n    @patch('utils.questionary.get_saved_user_input')\r\n    # https://github.com/Pythagora-io/gpt-pilot/issues/35\r\n    def test_code_changes_manual_test_no(self, mock_get_saved_user_input, mock_chat_completion, mock_save, mock_get_saved_step):\r\n        # Given\r\n        monkey = None\r\n        convo = AgentConvo(self.developer)\r\n        convo.save_branch = lambda branch_name=None: branch_name\r\n        convo.load_branch = lambda function_uuid=None: function_uuid\r\n        self.project.developer = self.developer\r\n\r\n        mock_chat_completion.side_effect = [\r\n            {'text': '{\"type\": \"manual_test\", \"manual_test_description\": \"Does it look good?\"}'},\r\n            {'text': '{\"thoughts\": \"hmmm...\", \"reasoning\": \"testing\", \"steps\": [{\"type\": \"command\", \"command\": {\"command\": \"something scary\", \"timeout\": 3000}, \"check_if_fixed\": true}]}'},\r\n            {'text': 'do something else scary'},\r\n        ]\r\n\r\n        mock_questionary = MockQuestionary(['no', 'no'])\r\n\r\n        with patch('utils.questionary.questionary', mock_questionary):\r\n            # When\r\n            result = self.developer.test_code_changes(monkey, convo)\r\n\r\n            # Then\r\n            assert result == {'success': True, 'user_input': 'no'}\r\n\r\n    @patch('helpers.cli.execute_command', return_value=('stdout:\\n```\\n\\n```', 'DONE', None))\r\n    @patch('helpers.AgentConvo.get_saved_development_step')\r\n    @patch('helpers.AgentConvo.save_development_step')\r\n    @patch('utils.llm_connection.requests.post')\r\n    @patch('utils.questionary.get_saved_user_input')\r\n    def test_test_code_changes_invalid_json(self, mock_get_saved_user_input,\r\n                                            mock_requests_post,\r\n                                            mock_save,\r\n                                            mock_get_saved_step,\r\n                                            mock_execute,\r\n                                            monkeypatch):\r\n        # Given\r\n        monkey = None\r\n        convo = AgentConvo(self.developer)\r\n        convo.save_branch = lambda branch_name=None: branch_name\r\n        convo.load_branch = lambda function_uuid=None: function_uuid\r\n        self.project.developer = self.developer\r\n\r\n        # we send a GET_TEST_TYPE spec, but the 1st response is invalid\r\n        types_in_response = ['command', 'wrong_again', 'command_test']\r\n        json_received = []\r\n\r\n        def generate_response(*args, **kwargs):\r\n            # Copy messages, including the validation errors from the request\r\n            content = [msg['content'] for msg in kwargs['json']['messages']]\r\n            json_received.append(content)\r\n\r\n            gpt_response = json.dumps({\r\n                'type': types_in_response.pop(0),\r\n                'command': {\r\n                    'command': 'node server.js',\r\n                    'timeout': 3000\r\n                }\r\n            })\r\n            choice = json.dumps({'delta': {'content': gpt_response}})\r\n            line = json.dumps({'choices': [json.loads(choice)]}).encode('utf-8')\r\n\r\n            response = requests.Response()\r\n            response.status_code = 200\r\n            response.iter_lines = lambda: [line]\r\n            print(f'##### mock response: {response}')\r\n            return response\r\n\r\n        mock_requests_post.side_effect = generate_response\r\n        monkeypatch.setenv('OPENAI_API_KEY', 'secret')\r\n\r\n        # mock_questionary = MockQuestionary([''])\r\n\r\n        # with patch('utils.questionary.questionary', mock_questionary):\r\n        # When\r\n        result = self.developer.test_code_changes(monkey, convo)\r\n\r\n        # Then\r\n        assert result == {'success': True}\r\n        assert mock_requests_post.call_count == 0","file":"/pilot/helpers/agents/test_Developer.py","language":"python","fileHash":"d32718b531af57559666e64633afee9c2814ef1e43cf8f6a86a552a097e68ec8","hash":"221bce4eb3ca30c504861fc8293c9af70b16b4bfd64c5d786d2a144638d36011","processedContent":"class TestDeveloper:\r\n    def setup_method(self):\r\n        \"\"\"The code defines a class called \"TestDeveloper\" that represents a software development project. It includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\"\"\"\n        pass\n\r\n    @pytest.mark.uses_tokens\r\n    @patch('helpers.AgentConvo.get_saved_development_step')\r\n    @patch('helpers.AgentConvo.save_development_step')\r\n    @patch('helpers.AgentConvo.create_gpt_chat_completion',\r\n           return_value={'text': '{\"command\": \"python --version\", \"timeout\": 10}'})\r\n    @patch('helpers.cli.execute_command', return_value=('', 'DONE', None))\r\n    def test_install_technology(self, mock_execute_command,\r\n                                \"\"\"This code defines a class called `AgentConvo` that represents a conversation with an agent, and includes functions for sending and receiving messages, as well as formatting and rendering prompts. The `install_technology` function sends a message in a conversation to check if a technology is installed on the machine.\"\"\"\n                                pass\n\r\n    @patch('helpers.AgentConvo.get_saved_development_step')\r\n    @patch('helpers.AgentConvo.save_development_step')\r\n    @patch('helpers.AgentConvo.create_gpt_chat_completion',\r\n           return_value={'text': '{\"tasks\": [{\"command\": \"ls -al\"}]}'})\r\n    def test_implement_task(self, mock_completion, mock_save, mock_get_saved_step):\r\n        \"\"\"The code defines a class called \"Developer\" that represents a person working on a specific project. It has functions for implementing tasks, running commands, and handling human intervention during the development process.\"\"\"\n        pass\n\r\n    @patch('helpers.AgentConvo.get_saved_development_step')\r\n    @patch('helpers.AgentConvo.save_development_step')\r\n    @patch('helpers.AgentConvo.create_gpt_chat_completion',\r\n           return_value={'text': '{\"tasks\": [{\"command\": \"ls -al\"}, {\"command\": \"ls -al src\"}, {\"command\": \"ls -al test\"}, {\"command\": \"ls -al build\"}]}'})\r\n    def test_implement_task_reject_with_user_input(self, mock_completion, mock_save, mock_get_saved_step):\r\n        \"\"\"The code defines a test function that simulates the development process of a software project, including user input and task execution. It uses mock objects to isolate the business logic and focus on testing the conversation flow between the developer and the user.\"\"\"\n        pass\n\r\n    @patch('helpers.AgentConvo.get_saved_development_step')\r\n    @patch('helpers.AgentConvo.save_development_step')\r\n    # GET_TEST_TYPE has optional properties, so we need to be able to handle missing args.\r\n    @patch('helpers.AgentConvo.create_gpt_chat_completion',\r\n           return_value={'text': '{\"type\": \"command_test\", \"command\": {\"command\": \"npm run test\", \"timeout\": 3000}}'})\r\n    # 2nd arg of return_value: `None` to debug, 'DONE' if successful\r\n    @patch('helpers.cli.execute_command', return_value=('stdout:\\n```\\n\\n```', 'DONE', None))\r\n    # @patch('helpers.cli.ask_user', return_value='yes')\r\n    # @patch('helpers.cli.get_saved_command_run')\r\n    def test_code_changes_command_test(self, mock_get_saved_step, mock_save, mock_chat_completion,\r\n                               \"\"\"This code defines a function called `test_code_changes` that tests the changes made to the code by a developer. It sends a message to the user asking for their input on whether the changes were successful or not, and then handles any errors that may occur during the testing process.\"\"\"\n                               pass\n\r\n    @patch('helpers.AgentConvo.get_saved_development_step')\r\n    @patch('helpers.AgentConvo.save_development_step')\r\n    # GET_TEST_TYPE has optional properties, so we need to be able to handle missing args.\r\n    @patch('helpers.AgentConvo.create_gpt_chat_completion',\r\n           return_value={'text': '{\"type\": \"manual_test\", \"manual_test_description\": \"Does it look good?\"}'})\r\n    @patch('helpers.Project.ask_user', return_value='continue')\r\n    def test_code_changes_manual_test_continue(self, mock_get_saved_step, mock_save, mock_chat_completion, mock_ask_user):\r\n        \"\"\"This code defines a function called `test_code_changes` that tests the changes made to the code by a developer. It sends a message to the user asking for their input on whether the changes were successful or not, and if the user provides feedback, it will debug the issue and send another message to the user for further assistance.\"\"\"\n        pass\n\r\n    @pytest.mark.skip(\"endless loop in questionary\")\r\n    @patch('helpers.AgentConvo.get_saved_development_step')\r\n    @patch('helpers.AgentConvo.save_development_step')\r\n    @patch('helpers.AgentConvo.create_gpt_chat_completion')\r\n    @patch('utils.questionary.get_saved_user_input')\r\n    # https://github.com/Pythagora-io/gpt-pilot/issues/35\r\n    def test_code_changes_manual_test_no(self, mock_get_saved_user_input, mock_chat_completion, mock_save, mock_get_saved_step):\r\n        \"\"\"This code defines a function called `test_code_changes` that tests the changes made to the code by a developer. It sends a message to the user asking for their input on whether the changes were successful or not, and then returns a dictionary with the result of the test and the user's input.\"\"\"\n        pass\n\r\n    @patch('helpers.cli.execute_command', return_value=('stdout:\\n```\\n\\n```', 'DONE', None))\r\n    @patch('helpers.AgentConvo.get_saved_development_step')\r\n    @patch('helpers.AgentConvo.save_development_step')\r\n    @patch('utils.llm_connection.requests.post')\r\n    @patch('utils.questionary.get_saved_user_input')\r\n    def test_test_code_changes_invalid_json(self, mock_get_saved_user_input,\r\n                                            mock_requests_post,\r\n                                            mock_save,\r\n                                            mock_get_saved_step,\r\n                                            mock_execute,\r\n                                            monkeypatch):\r\n        # Given\r\n        monkey = None\r\n        convo = AgentConvo(self.developer)\r\n        convo.save_branch = lambda branch_name=None: branch_name\r\n        convo.load_branch = lambda function_uuid=None: function_uuid\r\n        self.project.developer = self.developer\r\n\r\n        # we send a GET_TEST_TYPE spec, but the 1st response is invalid\r\n        types_in_response = ['command', 'wrong_again', 'command_test']\r\n        json_received = []\r\n\r\n        def generate_response(*args, **kwargs):\r\n            # Copy messages, including the validation errors from the request\r\n            content = [msg['content'] for msg in kwargs['json']['messages']]\r\n            json_received.append(content)\r\n\r\n            gpt_response = json.dumps({\r\n                'type': types_in_response.pop(0),\r\n                'command': {\r\n                    'command': 'node server.js',\r\n                    'timeout': 3000\r\n                }\r\n            })\r\n            choice = json.dumps({'delta': {'content': gpt_response}})\r\n            line = json.dumps({'choices': [json.loads(choice)]}).encode('utf-8')\r\n\r\n            response = requests.Response()\r\n            response.status_code = 200\r\n            response.iter_lines = lambda: [line]\r\n            print(f'##### mock response: {response}')\r\n            return response\r\n\r\n        mock_requests_post.side_effect = generate_response\r\n        monkeypatch.setenv('OPENAI_API_KEY', 'secret')\r\n\r\n        # mock_questionary = MockQuestionary([''])\r\n\r\n        # with patch('utils.questionary.questionary', mock_questionary):\r\n        # When\r\n        result = self.developer.test_code_changes(monkey, convo)\r\n\r\n        # Then\r\n        assert result == {'success': True}\r\n        assert mock_requests_post.call_count == 0","documentation":"The code defines a class called \"Developer\" that represents a person working on a specific project. It has functions for implementing tasks, running commands, and handling human intervention during the development process."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#setup_method().","attributes":{"range":[19,4,31,48],"symbol":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#setup_method().","content":"def setup_method(self):\r\n        builtins.print, ipc_client_instance = get_custom_print({})\r\n\r\n        name = 'TestDeveloper'\r\n        self.project = create_project()\r\n        self.project.app_id = 'test-developer'\r\n        self.project.name = name\r\n        self.project.set_root_path(os.path.abspath(os.path.join(os.path.dirname(os.path.abspath(__file__)),\r\n                                                              '../../../workspace/TestDeveloper')))\r\n\r\n        self.project.technologies = []\r\n        self.project.current_step = ENVIRONMENT_SETUP_STEP\r\n        self.developer = Developer(self.project)","file":"/pilot/helpers/agents/test_Developer.py","language":"python","fileHash":"d32718b531af57559666e64633afee9c2814ef1e43cf8f6a86a552a097e68ec8","hash":"34aea88dd8803e2e16a30f3198fabde04eb02e5d2dd8c0d996bad57f29734bab","processedContent":"def setup_method(self):\r\n        builtins.print, ipc_client_instance = get_custom_print({})\r #This code defines a function called `get_custom_print` that returns a tuple of two functions: `print_to_external_process` and `local_print`. The first function sends a message to an external process over a network connection, while the second function prints the message to the console.\n\r\n        name = 'TestDeveloper'\r\n        self.project = create_project()\r #This code defines a class called \"Project\" that represents a software development project. It includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\n        self.project.app_id = 'test-developer'\r #undefined\n        self.project.name = name\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#project.: undefined\n        scip-python python temp indexer `pilot.helpers.project`/Project#name.: undefined\n        \"\"\"\n        self.project.set_root_path(os.path.abspath(os.path.join(os.path.dirname(os.path.abspath(__file__)),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#project.: undefined\n        scip-python python temp indexer `pilot.helpers.project`/Project#set_root_path().: This code sets the root path for a file system, allowing the program to access files and directories within that path.\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/path.: undefined\n        scip-python python python-stdlib 3.11 os/path.: undefined\n        scip-python python python-stdlib 3.11 os/path.: undefined\n        scip-python python python-stdlib 3.11 os/path.: undefined\n        scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n        scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n        scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n        scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n        scip-python python temp indexer `pilot.helpers.agents.test_developer`/: undefined\n        \"\"\"\n                                                              '../../../workspace/TestDeveloper')))\r\n\r\n        self.project.technologies = []\r #undefined\n        self.project.current_step = ENVIRONMENT_SETUP_STEP\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#project.: undefined\n        scip-python python temp indexer `pilot.helpers.project`/Project#current_step.: undefined\n        scip-python python temp indexer `pilot.helpers.agents.developer`/ENVIRONMENT_SETUP_STEP.: undefined\n        \"\"\"\n        self.developer = Developer(self.project)","documentation":"The code defines a class called \"TestDeveloper\" that represents a software development project. It includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_install_technology().","attributes":{"range":[33,4,49,115],"symbol":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_install_technology().","content":"@pytest.mark.uses_tokens\r\n    @patch('helpers.AgentConvo.get_saved_development_step')\r\n    @patch('helpers.AgentConvo.save_development_step')\r\n    @patch('helpers.AgentConvo.create_gpt_chat_completion',\r\n           return_value={'text': '{\"command\": \"python --version\", \"timeout\": 10}'})\r\n    @patch('helpers.cli.execute_command', return_value=('', 'DONE', None))\r\n    def test_install_technology(self, mock_execute_command,\r\n                                mock_completion, mock_save, mock_get_saved_step):\r\n        # Given\r\n        self.developer.convo_os_specific_tech = AgentConvo(self.developer)\r\n\r\n        # When\r\n        llm_response = self.developer.install_technology('python')\r\n\r\n        # Then\r\n        assert llm_response == 'DONE'\r\n        mock_execute_command.assert_called_once_with(self.project, 'python --version', timeout=10, command_id=None)","file":"/pilot/helpers/agents/test_Developer.py","language":"python","fileHash":"d32718b531af57559666e64633afee9c2814ef1e43cf8f6a86a552a097e68ec8","hash":"4a6f1ba77de9db74dc80ab21e43c508076afe2a439778fc513d48f8bd9ab9e55","processedContent":"@pytest.mark.uses_tokens\r\n    @patch('helpers.AgentConvo.get_saved_development_step')\r\n    @patch('helpers.AgentConvo.save_development_step')\r\n    @patch('helpers.AgentConvo.create_gpt_chat_completion',\r\n           return_value={'text': '{\"command\": \"python --version\", \"timeout\": 10}'})\r\n    @patch('helpers.cli.execute_command', return_value=('', 'DONE', None))\r\n    def test_install_technology(self, mock_execute_command,\r\n                                mock_completion, mock_save, mock_get_saved_step):\r\n        # Given\r\n        self.developer.convo_os_specific_tech = AgentConvo(self.developer)\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#developer.: undefined\n        scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#developer.: undefined\n        scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#convo_os_specific_tech.: undefined\n        scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#: This code defines a class called `AgentConvo` that represents a conversation with an agent. It includes functions for sending and receiving messages, as well as formatting and rendering prompts. The code also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n        \"\"\"\n\r\n        # When\r\n        llm_response = self.developer.install_technology('python')\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#developer.: undefined\n        scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#install_technology().: The code defines a function called `install_technology` that sends a message in a conversation to check if a technology is installed on the machine. It also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n        \"\"\"\n\r\n        # Then\r\n        assert llm_response == 'DONE'\r\n        mock_execute_command.assert_called_once_with(self.project, 'python --version', timeout=10, command_id=None)","documentation":"This code defines a class called `AgentConvo` that represents a conversation with an agent, and includes functions for sending and receiving messages, as well as formatting and rendering prompts. The `install_technology` function sends a message in a conversation to check if a technology is installed on the machine."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_implement_task().","attributes":{"range":[51,4,76,80],"symbol":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_implement_task().","content":"@patch('helpers.AgentConvo.get_saved_development_step')\r\n    @patch('helpers.AgentConvo.save_development_step')\r\n    @patch('helpers.AgentConvo.create_gpt_chat_completion',\r\n           return_value={'text': '{\"tasks\": [{\"command\": \"ls -al\"}]}'})\r\n    def test_implement_task(self, mock_completion, mock_save, mock_get_saved_step):\r\n        # Given any project\r\n        project = create_project()\r\n        project.project_description = 'Test Project'\r\n        project.development_plan = [{\r\n            'description': 'Do stuff',\r\n            'user_review_goal': 'Do stuff',\r\n        }]\r\n        project.get_all_coded_files = lambda: []\r\n        project.current_step = 'test'\r\n\r\n        # and a developer who will execute any task\r\n        developer = Developer(project)\r\n        developer.execute_task = MagicMock()\r\n        developer.execute_task.return_value = {'success': True}\r\n\r\n        # When\r\n        developer.implement_task(0, {'description': 'Do stuff'})\r\n\r\n        # Then we parse the response correctly and send list of steps to execute_task()\r\n        assert developer.execute_task.call_count == 1\r\n        assert developer.execute_task.call_args[0][2] == [{'command': 'ls -al'}]","file":"/pilot/helpers/agents/test_Developer.py","language":"python","fileHash":"d32718b531af57559666e64633afee9c2814ef1e43cf8f6a86a552a097e68ec8","hash":"ce55a5bf472c5e5491d0bc1524bd3d37991e5460b36f623c72e5a7fa7a170235","processedContent":"@patch('helpers.AgentConvo.get_saved_development_step')\r\n    @patch('helpers.AgentConvo.save_development_step')\r\n    @patch('helpers.AgentConvo.create_gpt_chat_completion',\r\n           return_value={'text': '{\"tasks\": [{\"command\": \"ls -al\"}]}'})\r\n    def test_implement_task(self, mock_completion, mock_save, mock_get_saved_step):\r\n        # Given any project\r\n        project = create_project()\r #This code defines a class called \"Project\" that represents a software development project. It includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\n        project.project_description = 'Test Project'\r #undefined\n        project.development_plan = [{\r #undefined\n            'description': 'Do stuff',\r\n            'user_review_goal': 'Do stuff',\r\n        }]\r\n        project.get_all_coded_files = lambda: []\r #This code defines a function called `get_all_coded_files` that retrieves all files in a project and returns them as a list of dictionaries, each containing the file's path, contents, and other metadata.\n        project.current_step = 'test'\r #undefined\n\r\n        # and a developer who will execute any task\r\n        developer = Developer(project)\r #The code defines a class called \"Developer\" that represents a person working on a specific project. It has functions for implementing tasks, running commands, and handling human intervention during the development process.\n        developer.execute_task = MagicMock()\r #The code defines a function called `execute_task` that takes in a task description and step index, and executes the steps in the task until it succeeds or reaches a timeout. It also checks if the command was successful by checking the exit code of the process that ran the command.\n        developer.execute_task.return_value = {'success': True}\r #The code defines a function called `execute_task` that takes in a task description and step index, and executes the steps in the task until it succeeds or reaches a timeout. It also checks if the command was successful by checking the exit code of the process that ran the command.\n\r\n        # When\r\n        developer.implement_task(0, {'description': 'Do stuff'})\r #The code defines a function called `implement_task` that takes in a task description and step index, and executes the steps in the task until it succeeds or reaches a timeout. It also checks if the command was successful by checking the exit code of the process that ran the command.\n\r\n        # Then we parse the response correctly and send list of steps to execute_task()\r\n        assert developer.execute_task.call_count == 1\r #The code defines a function called `execute_task` that takes in a task description and step index, and executes the steps in the task until it succeeds or reaches a timeout. It also checks if the command was successful by checking the exit code of the process that ran the command.\n        assert developer.execute_task.call_args[0][2] == [{'command': 'ls -al'}]","documentation":"The code defines a class called \"Developer\" that represents a person working on a specific project. It has functions for implementing tasks, running commands, and handling human intervention during the development process."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_implement_task_reject_with_user_input().","attributes":{"range":[78,4,109,53],"symbol":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_implement_task_reject_with_user_input().","content":"@patch('helpers.AgentConvo.get_saved_development_step')\r\n    @patch('helpers.AgentConvo.save_development_step')\r\n    @patch('helpers.AgentConvo.create_gpt_chat_completion',\r\n           return_value={'text': '{\"tasks\": [{\"command\": \"ls -al\"}, {\"command\": \"ls -al src\"}, {\"command\": \"ls -al test\"}, {\"command\": \"ls -al build\"}]}'})\r\n    def test_implement_task_reject_with_user_input(self, mock_completion, mock_save, mock_get_saved_step):\r\n        # Given any project\r\n        project = create_project()\r\n        project.project_description = 'Test Project'\r\n        project.development_plan = [{\r\n            'description': 'Do stuff',\r\n            'user_review_goal': 'Do stuff',\r\n        }]\r\n        project.get_all_coded_files = lambda: []\r\n        project.current_step = 'test'\r\n\r\n        # and a developer who will execute any task except for `ls -al test`\r\n        developer = Developer(project)\r\n        developer.execute_task = MagicMock()\r\n        developer.execute_task.side_effect = [\r\n            {'success': False, 'step_index': 2, 'user_input': 'no, use a better command'},\r\n            {'success': True}\r\n        ]\r\n\r\n        # When\r\n        developer.implement_task(0, {'description': 'Do stuff'})\r\n\r\n        # Then we include the user input in the conversation to update the task list\r\n        assert mock_completion.call_count == 3\r\n        prompt = mock_completion.call_args_list[2].args[0][2]['content']\r\n        assert prompt.startswith('{\"tasks\": [{\"command\": \"ls -al\"}, {\"command\": \"ls -al src\"}, {\"command\": \"ls -al test\"}, {\"command\": \"ls -al build\"}]}'.lstrip())\r\n        # and call `execute_task()` again\r\n        assert developer.execute_task.call_count == 2","file":"/pilot/helpers/agents/test_Developer.py","language":"python","fileHash":"d32718b531af57559666e64633afee9c2814ef1e43cf8f6a86a552a097e68ec8","hash":"a3acafc0e2072977e6291206ed56721428cb802db0e1826f2881180497c99633","processedContent":"@patch('helpers.AgentConvo.get_saved_development_step')\r\n    @patch('helpers.AgentConvo.save_development_step')\r\n    @patch('helpers.AgentConvo.create_gpt_chat_completion',\r\n           return_value={'text': '{\"tasks\": [{\"command\": \"ls -al\"}, {\"command\": \"ls -al src\"}, {\"command\": \"ls -al test\"}, {\"command\": \"ls -al build\"}]}'})\r\n    def test_implement_task_reject_with_user_input(self, mock_completion, mock_save, mock_get_saved_step):\r\n        # Given any project\r\n        project = create_project()\r #This code defines a class called \"Project\" that represents a software development project. It includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\n        project.project_description = 'Test Project'\r #undefined\n        project.development_plan = [{\r #undefined\n            'description': 'Do stuff',\r\n            'user_review_goal': 'Do stuff',\r\n        }]\r\n        project.get_all_coded_files = lambda: []\r #This code defines a function called `get_all_coded_files` that retrieves all files in a project and returns them as a list of dictionaries, each containing the file's path, contents, and other metadata.\n        project.current_step = 'test'\r #undefined\n\r\n        # and a developer who will execute any task except for `ls -al test`\r\n        developer = Developer(project)\r #The code defines a class called \"Developer\" that represents a person working on a specific project. It has functions for implementing tasks, running commands, and handling human intervention during the development process.\n        developer.execute_task = MagicMock()\r #The code defines a function called `execute_task` that takes in a task description and step index, and executes the steps in the task until it succeeds or reaches a timeout. It also checks if the command was successful by checking the exit code of the process that ran the command.\n        developer.execute_task.side_effect = [\r #The code defines a function called `execute_task` that takes in a task description and step index, and executes the steps in the task until it succeeds or reaches a timeout. It also checks if the command was successful by checking the exit code of the process that ran the command.\n            {'success': False, 'step_index': 2, 'user_input': 'no, use a better command'},\r\n            {'success': True}\r\n        ]\r\n\r\n        # When\r\n        developer.implement_task(0, {'description': 'Do stuff'})\r #The code defines a function called `implement_task` that takes in a task description and step index, and executes the steps in the task until it succeeds or reaches a timeout. It also checks if the command was successful by checking the exit code of the process that ran the command.\n\r\n        # Then we include the user input in the conversation to update the task list\r\n        assert mock_completion.call_count == 3\r\n        prompt = mock_completion.call_args_list[2].args[0][2]['content']\r\n        assert prompt.startswith('{\"tasks\": [{\"command\": \"ls -al\"}, {\"command\": \"ls -al src\"}, {\"command\": \"ls -al test\"}, {\"command\": \"ls -al build\"}]}'.lstrip())\r\n        # and call `execute_task()` again\r\n        assert developer.execute_task.call_count == 2","documentation":"The code defines a test function that simulates the development process of a software project, including user input and task execution. It uses mock objects to isolate the business logic and focus on testing the conversation flow between the developer and the user."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_code_changes_command_test().","attributes":{"range":[111,4,134,42],"symbol":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_code_changes_command_test().","content":"@patch('helpers.AgentConvo.get_saved_development_step')\r\n    @patch('helpers.AgentConvo.save_development_step')\r\n    # GET_TEST_TYPE has optional properties, so we need to be able to handle missing args.\r\n    @patch('helpers.AgentConvo.create_gpt_chat_completion',\r\n           return_value={'text': '{\"type\": \"command_test\", \"command\": {\"command\": \"npm run test\", \"timeout\": 3000}}'})\r\n    # 2nd arg of return_value: `None` to debug, 'DONE' if successful\r\n    @patch('helpers.cli.execute_command', return_value=('stdout:\\n```\\n\\n```', 'DONE', None))\r\n    # @patch('helpers.cli.ask_user', return_value='yes')\r\n    # @patch('helpers.cli.get_saved_command_run')\r\n    def test_code_changes_command_test(self, mock_get_saved_step, mock_save, mock_chat_completion,\r\n                               # Note: the 2nd line below will use the LLM to debug, uncomment the @patches accordingly\r\n                               mock_execute_command):\r\n                               # mock_ask_user, mock_get_saved_command_run):\r\n        # Given\r\n        monkey = None\r\n        convo = AgentConvo(self.developer)\r\n        convo.save_branch = lambda branch_name=None: branch_name\r\n\r\n        # When\r\n        # \"Now, we need to verify if this change was successfully implemented...\r\n        result = self.developer.test_code_changes(monkey, convo)\r\n\r\n        # Then\r\n        assert result == {'success': True}","file":"/pilot/helpers/agents/test_Developer.py","language":"python","fileHash":"d32718b531af57559666e64633afee9c2814ef1e43cf8f6a86a552a097e68ec8","hash":"c59e54ba59b2919ab58c48bc36246d8606edcefea549c9efac2dce1006547bb9","processedContent":"@patch('helpers.AgentConvo.get_saved_development_step')\r\n    @patch('helpers.AgentConvo.save_development_step')\r\n    # GET_TEST_TYPE has optional properties, so we need to be able to handle missing args.\r\n    @patch('helpers.AgentConvo.create_gpt_chat_completion',\r\n           return_value={'text': '{\"type\": \"command_test\", \"command\": {\"command\": \"npm run test\", \"timeout\": 3000}}'})\r\n    # 2nd arg of return_value: `None` to debug, 'DONE' if successful\r\n    @patch('helpers.cli.execute_command', return_value=('stdout:\\n```\\n\\n```', 'DONE', None))\r\n    # @patch('helpers.cli.ask_user', return_value='yes')\r\n    # @patch('helpers.cli.get_saved_command_run')\r\n    def test_code_changes_command_test(self, mock_get_saved_step, mock_save, mock_chat_completion,\r\n                               # Note: the 2nd line below will use the LLM to debug, uncomment the @patches accordingly\r\n                               mock_execute_command):\r\n                               # mock_ask_user, mock_get_saved_command_run):\r\n        # Given\r\n        monkey = None\r\n        convo = AgentConvo(self.developer)\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#: This code defines a class called `AgentConvo` that represents a conversation with an agent. It includes functions for sending and receiving messages, as well as formatting and rendering prompts. The code also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n        scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#developer.: undefined\n        \"\"\"\n        convo.save_branch = lambda branch_name=None: branch_name\r #This code defines a function called `save_branch` that creates a new branch in an agent conversation. It takes an optional argument `branch_name`, which defaults to a randomly generated UUID if not provided. The function then copies the current message list into the new branch and returns the branch name.\n\r\n        # When\r\n        # \"Now, we need to verify if this change was successfully implemented...\r\n        result = self.developer.test_code_changes(monkey, convo)\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#developer.: undefined\n        scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#test_code_changes().: This code is a function that tests the changes made to the code by a developer. It sends a message to the user asking for their input on whether the changes were successful or not. If the user provides feedback, the code will debug the issue and send another message to the user for further assistance.\n        \"\"\"\n\r\n        # Then\r\n        assert result == {'success': True}","documentation":"This code defines a function called `test_code_changes` that tests the changes made to the code by a developer. It sends a message to the user asking for their input on whether the changes were successful or not, and then handles any errors that may occur during the testing process."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_code_changes_manual_test_continue().","attributes":{"range":[136,4,152,42],"symbol":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_code_changes_manual_test_continue().","content":"@patch('helpers.AgentConvo.get_saved_development_step')\r\n    @patch('helpers.AgentConvo.save_development_step')\r\n    # GET_TEST_TYPE has optional properties, so we need to be able to handle missing args.\r\n    @patch('helpers.AgentConvo.create_gpt_chat_completion',\r\n           return_value={'text': '{\"type\": \"manual_test\", \"manual_test_description\": \"Does it look good?\"}'})\r\n    @patch('helpers.Project.ask_user', return_value='continue')\r\n    def test_code_changes_manual_test_continue(self, mock_get_saved_step, mock_save, mock_chat_completion, mock_ask_user):\r\n        # Given\r\n        monkey = None\r\n        convo = AgentConvo(self.developer)\r\n        convo.save_branch = lambda branch_name=None: branch_name\r\n\r\n        # When\r\n        result = self.developer.test_code_changes(monkey, convo)\r\n\r\n        # Then\r\n        assert result == {'success': True}","file":"/pilot/helpers/agents/test_Developer.py","language":"python","fileHash":"d32718b531af57559666e64633afee9c2814ef1e43cf8f6a86a552a097e68ec8","hash":"9f3fb9c6a37cb9cc55e100f2d4d8cebd92739f5a1a37fbe89e19bb788416c645","processedContent":"@patch('helpers.AgentConvo.get_saved_development_step')\r\n    @patch('helpers.AgentConvo.save_development_step')\r\n    # GET_TEST_TYPE has optional properties, so we need to be able to handle missing args.\r\n    @patch('helpers.AgentConvo.create_gpt_chat_completion',\r\n           return_value={'text': '{\"type\": \"manual_test\", \"manual_test_description\": \"Does it look good?\"}'})\r\n    @patch('helpers.Project.ask_user', return_value='continue')\r\n    def test_code_changes_manual_test_continue(self, mock_get_saved_step, mock_save, mock_chat_completion, mock_ask_user):\r\n        # Given\r\n        monkey = None\r\n        convo = AgentConvo(self.developer)\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#: This code defines a class called `AgentConvo` that represents a conversation with an agent. It includes functions for sending and receiving messages, as well as formatting and rendering prompts. The code also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n        scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#developer.: undefined\n        \"\"\"\n        convo.save_branch = lambda branch_name=None: branch_name\r #This code defines a function called `save_branch` that creates a new branch in an agent conversation. It takes an optional argument `branch_name`, which defaults to a randomly generated UUID if not provided. The function then copies the current message list into the new branch and returns the branch name.\n\r\n        # When\r\n        result = self.developer.test_code_changes(monkey, convo)\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#developer.: undefined\n        scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#test_code_changes().: This code is a function that tests the changes made to the code by a developer. It sends a message to the user asking for their input on whether the changes were successful or not. If the user provides feedback, the code will debug the issue and send another message to the user for further assistance.\n        \"\"\"\n\r\n        # Then\r\n        assert result == {'success': True}","documentation":"This code defines a function called `test_code_changes` that tests the changes made to the code by a developer. It sends a message to the user asking for their input on whether the changes were successful or not, and if the user provides feedback, it will debug the issue and send another message to the user for further assistance."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_code_changes_manual_test_no().","attributes":{"range":[154,4,181,66],"symbol":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_code_changes_manual_test_no().","content":"@pytest.mark.skip(\"endless loop in questionary\")\r\n    @patch('helpers.AgentConvo.get_saved_development_step')\r\n    @patch('helpers.AgentConvo.save_development_step')\r\n    @patch('helpers.AgentConvo.create_gpt_chat_completion')\r\n    @patch('utils.questionary.get_saved_user_input')\r\n    # https://github.com/Pythagora-io/gpt-pilot/issues/35\r\n    def test_code_changes_manual_test_no(self, mock_get_saved_user_input, mock_chat_completion, mock_save, mock_get_saved_step):\r\n        # Given\r\n        monkey = None\r\n        convo = AgentConvo(self.developer)\r\n        convo.save_branch = lambda branch_name=None: branch_name\r\n        convo.load_branch = lambda function_uuid=None: function_uuid\r\n        self.project.developer = self.developer\r\n\r\n        mock_chat_completion.side_effect = [\r\n            {'text': '{\"type\": \"manual_test\", \"manual_test_description\": \"Does it look good?\"}'},\r\n            {'text': '{\"thoughts\": \"hmmm...\", \"reasoning\": \"testing\", \"steps\": [{\"type\": \"command\", \"command\": {\"command\": \"something scary\", \"timeout\": 3000}, \"check_if_fixed\": true}]}'},\r\n            {'text': 'do something else scary'},\r\n        ]\r\n\r\n        mock_questionary = MockQuestionary(['no', 'no'])\r\n\r\n        with patch('utils.questionary.questionary', mock_questionary):\r\n            # When\r\n            result = self.developer.test_code_changes(monkey, convo)\r\n\r\n            # Then\r\n            assert result == {'success': True, 'user_input': 'no'}","file":"/pilot/helpers/agents/test_Developer.py","language":"python","fileHash":"d32718b531af57559666e64633afee9c2814ef1e43cf8f6a86a552a097e68ec8","hash":"8f8968d38bd8af5d9effb676fae537ce4da164f45d8a61c4eab8586499af800d","processedContent":"@pytest.mark.skip(\"endless loop in questionary\")\r\n    @patch('helpers.AgentConvo.get_saved_development_step')\r\n    @patch('helpers.AgentConvo.save_development_step')\r\n    @patch('helpers.AgentConvo.create_gpt_chat_completion')\r\n    @patch('utils.questionary.get_saved_user_input')\r\n    # https://github.com/Pythagora-io/gpt-pilot/issues/35\r\n    def test_code_changes_manual_test_no(self, mock_get_saved_user_input, mock_chat_completion, mock_save, mock_get_saved_step):\r\n        # Given\r\n        monkey = None\r\n        convo = AgentConvo(self.developer)\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#: This code defines a class called `AgentConvo` that represents a conversation with an agent. It includes functions for sending and receiving messages, as well as formatting and rendering prompts. The code also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n        scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#developer.: undefined\n        \"\"\"\n        convo.save_branch = lambda branch_name=None: branch_name\r #This code defines a function called `save_branch` that creates a new branch in an agent conversation. It takes an optional argument `branch_name`, which defaults to a randomly generated UUID if not provided. The function then copies the current message list into the new branch and returns the branch name.\n        convo.load_branch = lambda function_uuid=None: function_uuid\r #This code defines a function called `load_branch` that loads a branch of messages from a dictionary called `branches`. It also copies the messages from the loaded branch to a variable called `messages`. If the `reload_files` parameter is set to `True`, it replaces the files with the new messages.\n        self.project.developer = self.developer\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#developer.: undefined\n        scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#project.: undefined\n        scip-python python temp indexer `pilot.helpers.project`/Project#developer.: undefined\n        \"\"\"\n\r\n        mock_chat_completion.side_effect = [\r\n            {'text': '{\"type\": \"manual_test\", \"manual_test_description\": \"Does it look good?\"}'},\r\n            {'text': '{\"thoughts\": \"hmmm...\", \"reasoning\": \"testing\", \"steps\": [{\"type\": \"command\", \"command\": {\"command\": \"something scary\", \"timeout\": 3000}, \"check_if_fixed\": true}]}'},\r\n            {'text': 'do something else scary'},\r\n        ]\r\n\r\n        mock_questionary = MockQuestionary(['no', 'no'])\r #This code defines a class called \"MockQuestionary\" that allows users to ask questions and receive answers in a mock interview setting. The class has several methods, including \"__init__\", \"text\", \"ask\", and \"unsafe_ask\". The purpose of the code is to provide a way to simulate a user asking questions and receiving answers in a mock interview setting.\n\r\n        with patch('utils.questionary.questionary', mock_questionary):\r\n            # When\r\n            result = self.developer.test_code_changes(monkey, convo)\r\n            \"\"\"\n            scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#developer.: undefined\n            scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#test_code_changes().: This code is a function that tests the changes made to the code by a developer. It sends a message to the user asking for their input on whether the changes were successful or not. If the user provides feedback, the code will debug the issue and send another message to the user for further assistance.\n            \"\"\"\n\r\n            # Then\r\n            assert result == {'success': True, 'user_input': 'no'}","documentation":"This code defines a function called `test_code_changes` that tests the changes made to the code by a developer. It sends a message to the user asking for their input on whether the changes were successful or not, and then returns a dictionary with the result of the test and the user's input."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_test_code_changes_invalid_json().","attributes":{"range":[183,4,237,49],"symbol":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_test_code_changes_invalid_json().","content":"@patch('helpers.cli.execute_command', return_value=('stdout:\\n```\\n\\n```', 'DONE', None))\r\n    @patch('helpers.AgentConvo.get_saved_development_step')\r\n    @patch('helpers.AgentConvo.save_development_step')\r\n    @patch('utils.llm_connection.requests.post')\r\n    @patch('utils.questionary.get_saved_user_input')\r\n    def test_test_code_changes_invalid_json(self, mock_get_saved_user_input,\r\n                                            mock_requests_post,\r\n                                            mock_save,\r\n                                            mock_get_saved_step,\r\n                                            mock_execute,\r\n                                            monkeypatch):\r\n        # Given\r\n        monkey = None\r\n        convo = AgentConvo(self.developer)\r\n        convo.save_branch = lambda branch_name=None: branch_name\r\n        convo.load_branch = lambda function_uuid=None: function_uuid\r\n        self.project.developer = self.developer\r\n\r\n        # we send a GET_TEST_TYPE spec, but the 1st response is invalid\r\n        types_in_response = ['command', 'wrong_again', 'command_test']\r\n        json_received = []\r\n\r\n        def generate_response(*args, **kwargs):\r\n            # Copy messages, including the validation errors from the request\r\n            content = [msg['content'] for msg in kwargs['json']['messages']]\r\n            json_received.append(content)\r\n\r\n            gpt_response = json.dumps({\r\n                'type': types_in_response.pop(0),\r\n                'command': {\r\n                    'command': 'node server.js',\r\n                    'timeout': 3000\r\n                }\r\n            })\r\n            choice = json.dumps({'delta': {'content': gpt_response}})\r\n            line = json.dumps({'choices': [json.loads(choice)]}).encode('utf-8')\r\n\r\n            response = requests.Response()\r\n            response.status_code = 200\r\n            response.iter_lines = lambda: [line]\r\n            print(f'##### mock response: {response}')\r\n            return response\r\n\r\n        mock_requests_post.side_effect = generate_response\r\n        monkeypatch.setenv('OPENAI_API_KEY', 'secret')\r\n\r\n        # mock_questionary = MockQuestionary([''])\r\n\r\n        # with patch('utils.questionary.questionary', mock_questionary):\r\n        # When\r\n        result = self.developer.test_code_changes(monkey, convo)\r\n\r\n        # Then\r\n        assert result == {'success': True}\r\n        assert mock_requests_post.call_count == 0","file":"/pilot/helpers/agents/test_Developer.py","language":"python","fileHash":"d32718b531af57559666e64633afee9c2814ef1e43cf8f6a86a552a097e68ec8","hash":"a4777b55987e59fa0a9b5be36347f70218a3cc4869a99d1bb4b46b4d7515af41","processedContent":"@patch('helpers.cli.execute_command', return_value=('stdout:\\n```\\n\\n```', 'DONE', None))\r\n    @patch('helpers.AgentConvo.get_saved_development_step')\r\n    @patch('helpers.AgentConvo.save_development_step')\r\n    @patch('utils.llm_connection.requests.post')\r\n    @patch('utils.questionary.get_saved_user_input')\r\n    def test_test_code_changes_invalid_json(self, mock_get_saved_user_input,\r\n                                            mock_requests_post,\r\n                                            mock_save,\r\n                                            mock_get_saved_step,\r\n                                            mock_execute,\r\n                                            monkeypatch):\r\n        # Given\r\n        monkey = None\r\n        convo = AgentConvo(self.developer)\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#: This code defines a class called `AgentConvo` that represents a conversation with an agent. It includes functions for sending and receiving messages, as well as formatting and rendering prompts. The code also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n        scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#developer.: undefined\n        \"\"\"\n        convo.save_branch = lambda branch_name=None: branch_name\r #This code defines a function called `save_branch` that creates a new branch in an agent conversation. It takes an optional argument `branch_name`, which defaults to a randomly generated UUID if not provided. The function then copies the current message list into the new branch and returns the branch name.\n        convo.load_branch = lambda function_uuid=None: function_uuid\r #This code defines a function called `load_branch` that loads a branch of messages from a dictionary called `branches`. It also copies the messages from the loaded branch to a variable called `messages`. If the `reload_files` parameter is set to `True`, it replaces the files with the new messages.\n        self.project.developer = self.developer\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#developer.: undefined\n        scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#project.: undefined\n        scip-python python temp indexer `pilot.helpers.project`/Project#developer.: undefined\n        \"\"\"\n\r\n        # we send a GET_TEST_TYPE spec, but the 1st response is invalid\r\n        types_in_response = ['command', 'wrong_again', 'command_test']\r\n        json_received = []\r\n\r\n        def generate_response(*args, **kwargs):\r\n            \"\"\"This code defines a function called `generate_response` that generates a mock response for a chatbot. It takes in a JSON object with messages and returns a response object with the generated content.\"\"\"\n            pass\n\r\n        mock_requests_post.side_effect = generate_response\r #This code defines a function called `generate_response` that generates a mock response for a chatbot. It takes in a JSON object with messages and returns a response object with the generated content.\n        monkeypatch.setenv('OPENAI_API_KEY', 'secret')\r\n\r\n        # mock_questionary = MockQuestionary([''])\r\n\r\n        # with patch('utils.questionary.questionary', mock_questionary):\r\n        # When\r\n        result = self.developer.test_code_changes(monkey, convo)\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#developer.: undefined\n        scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#test_code_changes().: This code is a function that tests the changes made to the code by a developer. It sends a message to the user asking for their input on whether the changes were successful or not. If the user provides feedback, the code will debug the issue and send another message to the user for further assistance.\n        \"\"\"\n\r\n        # Then\r\n        assert result == {'success': True}\r\n        assert mock_requests_post.call_count == 0","documentation":"This code is a unit test for the `test_code_changes` function in the `Developer` class. It simulates a conversation with a user and tests the changes made to the code by the developer, using a mock chatbot and a mock API response."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#generate_response().","attributes":{"range":[205,8,224,27],"symbol":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#generate_response().","content":"def generate_response(*args, **kwargs):\r\n            # Copy messages, including the validation errors from the request\r\n            content = [msg['content'] for msg in kwargs['json']['messages']]\r\n            json_received.append(content)\r\n\r\n            gpt_response = json.dumps({\r\n                'type': types_in_response.pop(0),\r\n                'command': {\r\n                    'command': 'node server.js',\r\n                    'timeout': 3000\r\n                }\r\n            })\r\n            choice = json.dumps({'delta': {'content': gpt_response}})\r\n            line = json.dumps({'choices': [json.loads(choice)]}).encode('utf-8')\r\n\r\n            response = requests.Response()\r\n            response.status_code = 200\r\n            response.iter_lines = lambda: [line]\r\n            print(f'##### mock response: {response}')\r\n            return response","file":"/pilot/helpers/agents/test_Developer.py","language":"python","fileHash":"d32718b531af57559666e64633afee9c2814ef1e43cf8f6a86a552a097e68ec8","hash":"53ae09378389f3fbb2771f79d4ddfe13fed3e225c08bc2e87040d237a9290248","processedContent":"def generate_response(*args, **kwargs):\r\n            # Copy messages, including the validation errors from the request\r\n            content = [msg['content'] for msg in kwargs['json']['messages']]\r\n            json_received.append(content)\r\n\r\n            gpt_response = json.dumps({\r\n            \"\"\"\n            scip-python python python-stdlib 3.11 json/__init__:: undefined\n            scip-python python python-stdlib 3.11 json/dumps().: undefined\n            \"\"\"\n                'type': types_in_response.pop(0),\r\n                'command': {\r\n                    'command': 'node server.js',\r\n                    'timeout': 3000\r\n                }\r\n            })\r\n            choice = json.dumps({'delta': {'content': gpt_response}})\r\n            \"\"\"\n            scip-python python python-stdlib 3.11 json/__init__:: undefined\n            scip-python python python-stdlib 3.11 json/dumps().: undefined\n            \"\"\"\n            line = json.dumps({'choices': [json.loads(choice)]}).encode('utf-8')\r\n            \"\"\"\n            scip-python python python-stdlib 3.11 json/__init__:: undefined\n            scip-python python python-stdlib 3.11 json/__init__:: undefined\n            scip-python python python-stdlib 3.11 json/dumps().: undefined\n            scip-python python python-stdlib 3.11 json/loads().: undefined\n            \"\"\"\n\r\n            response = requests.Response()\r\n            \"\"\"\n            scip-python python requests 2.31.0 requests/__init__:: undefined\n            scip-python python temp indexer `requests.models`/Response#: undefined\n            \"\"\"\n            response.status_code = 200\r #undefined\n            response.iter_lines = lambda: [line]\r #undefined\n            print(f'##### mock response: {response}')\r\n            return response","documentation":"This code defines a function called `generate_response` that generates a mock response for a chatbot. It takes in a JSON object with messages and returns a response object with the generated content."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/__init__:","range":[0,0,238,0],"content":"import builtins\r\nimport json\r\nimport os\r\nimport pytest\r\nfrom unittest.mock import patch, MagicMock\r\n\r\nimport requests\r\n\r\nfrom helpers.AgentConvo import AgentConvo\r\nfrom dotenv import load_dotenv\r\nload_dotenv()\r\n\r\nfrom main import get_custom_print\r\nfrom .Developer import Developer, ENVIRONMENT_SETUP_STEP\r\nfrom test.mock_questionary import MockQuestionary\r\nfrom helpers.test_Project import create_project\r\n\r\n\r\nclass TestDeveloper:\r\n    def setup_method(self):\r\n        builtins.print, ipc_client_instance = get_custom_print({})\r\n\r\n        name = 'TestDeveloper'\r\n        self.project = create_project()\r\n        self.project.app_id = 'test-developer'\r\n        self.project.name = name\r\n        self.project.set_root_path(os.path.abspath(os.path.join(os.path.dirname(os.path.abspath(__file__)),\r\n                                                              '../../../workspace/TestDeveloper')))\r\n\r\n        self.project.technologies = []\r\n        self.project.current_step = ENVIRONMENT_SETUP_STEP\r\n        self.developer = Developer(self.project)\r\n\r\n    @pytest.mark.uses_tokens\r\n    @patch('helpers.AgentConvo.get_saved_development_step')\r\n    @patch('helpers.AgentConvo.save_development_step')\r\n    @patch('helpers.AgentConvo.create_gpt_chat_completion',\r\n           return_value={'text': '{\"command\": \"python --version\", \"timeout\": 10}'})\r\n    @patch('helpers.cli.execute_command', return_value=('', 'DONE', None))\r\n    def test_install_technology(self, mock_execute_command,\r\n                                mock_completion, mock_save, mock_get_saved_step):\r\n        # Given\r\n        self.developer.convo_os_specific_tech = AgentConvo(self.developer)\r\n\r\n        # When\r\n        llm_response = self.developer.install_technology('python')\r\n\r\n        # Then\r\n        assert llm_response == 'DONE'\r\n        mock_execute_command.assert_called_once_with(self.project, 'python --version', timeout=10, command_id=None)\r\n\r\n    @patch('helpers.AgentConvo.get_saved_development_step')\r\n    @patch('helpers.AgentConvo.save_development_step')\r\n    @patch('helpers.AgentConvo.create_gpt_chat_completion',\r\n           return_value={'text': '{\"tasks\": [{\"command\": \"ls -al\"}]}'})\r\n    def test_implement_task(self, mock_completion, mock_save, mock_get_saved_step):\r\n        # Given any project\r\n        project = create_project()\r\n        project.project_description = 'Test Project'\r\n        project.development_plan = [{\r\n            'description': 'Do stuff',\r\n            'user_review_goal': 'Do stuff',\r\n        }]\r\n        project.get_all_coded_files = lambda: []\r\n        project.current_step = 'test'\r\n\r\n        # and a developer who will execute any task\r\n        developer = Developer(project)\r\n        developer.execute_task = MagicMock()\r\n        developer.execute_task.return_value = {'success': True}\r\n\r\n        # When\r\n        developer.implement_task(0, {'description': 'Do stuff'})\r\n\r\n        # Then we parse the response correctly and send list of steps to execute_task()\r\n        assert developer.execute_task.call_count == 1\r\n        assert developer.execute_task.call_args[0][2] == [{'command': 'ls -al'}]\r\n\r\n    @patch('helpers.AgentConvo.get_saved_development_step')\r\n    @patch('helpers.AgentConvo.save_development_step')\r\n    @patch('helpers.AgentConvo.create_gpt_chat_completion',\r\n           return_value={'text': '{\"tasks\": [{\"command\": \"ls -al\"}, {\"command\": \"ls -al src\"}, {\"command\": \"ls -al test\"}, {\"command\": \"ls -al build\"}]}'})\r\n    def test_implement_task_reject_with_user_input(self, mock_completion, mock_save, mock_get_saved_step):\r\n        # Given any project\r\n        project = create_project()\r\n        project.project_description = 'Test Project'\r\n        project.development_plan = [{\r\n            'description': 'Do stuff',\r\n            'user_review_goal': 'Do stuff',\r\n        }]\r\n        project.get_all_coded_files = lambda: []\r\n        project.current_step = 'test'\r\n\r\n        # and a developer who will execute any task except for `ls -al test`\r\n        developer = Developer(project)\r\n        developer.execute_task = MagicMock()\r\n        developer.execute_task.side_effect = [\r\n            {'success': False, 'step_index': 2, 'user_input': 'no, use a better command'},\r\n            {'success': True}\r\n        ]\r\n\r\n        # When\r\n        developer.implement_task(0, {'description': 'Do stuff'})\r\n\r\n        # Then we include the user input in the conversation to update the task list\r\n        assert mock_completion.call_count == 3\r\n        prompt = mock_completion.call_args_list[2].args[0][2]['content']\r\n        assert prompt.startswith('{\"tasks\": [{\"command\": \"ls -al\"}, {\"command\": \"ls -al src\"}, {\"command\": \"ls -al test\"}, {\"command\": \"ls -al build\"}]}'.lstrip())\r\n        # and call `execute_task()` again\r\n        assert developer.execute_task.call_count == 2\r\n\r\n    @patch('helpers.AgentConvo.get_saved_development_step')\r\n    @patch('helpers.AgentConvo.save_development_step')\r\n    # GET_TEST_TYPE has optional properties, so we need to be able to handle missing args.\r\n    @patch('helpers.AgentConvo.create_gpt_chat_completion',\r\n           return_value={'text': '{\"type\": \"command_test\", \"command\": {\"command\": \"npm run test\", \"timeout\": 3000}}'})\r\n    # 2nd arg of return_value: `None` to debug, 'DONE' if successful\r\n    @patch('helpers.cli.execute_command', return_value=('stdout:\\n```\\n\\n```', 'DONE', None))\r\n    # @patch('helpers.cli.ask_user', return_value='yes')\r\n    # @patch('helpers.cli.get_saved_command_run')\r\n    def test_code_changes_command_test(self, mock_get_saved_step, mock_save, mock_chat_completion,\r\n                               # Note: the 2nd line below will use the LLM to debug, uncomment the @patches accordingly\r\n                               mock_execute_command):\r\n                               # mock_ask_user, mock_get_saved_command_run):\r\n        # Given\r\n        monkey = None\r\n        convo = AgentConvo(self.developer)\r\n        convo.save_branch = lambda branch_name=None: branch_name\r\n\r\n        # When\r\n        # \"Now, we need to verify if this change was successfully implemented...\r\n        result = self.developer.test_code_changes(monkey, convo)\r\n\r\n        # Then\r\n        assert result == {'success': True}\r\n\r\n    @patch('helpers.AgentConvo.get_saved_development_step')\r\n    @patch('helpers.AgentConvo.save_development_step')\r\n    # GET_TEST_TYPE has optional properties, so we need to be able to handle missing args.\r\n    @patch('helpers.AgentConvo.create_gpt_chat_completion',\r\n           return_value={'text': '{\"type\": \"manual_test\", \"manual_test_description\": \"Does it look good?\"}'})\r\n    @patch('helpers.Project.ask_user', return_value='continue')\r\n    def test_code_changes_manual_test_continue(self, mock_get_saved_step, mock_save, mock_chat_completion, mock_ask_user):\r\n        # Given\r\n        monkey = None\r\n        convo = AgentConvo(self.developer)\r\n        convo.save_branch = lambda branch_name=None: branch_name\r\n\r\n        # When\r\n        result = self.developer.test_code_changes(monkey, convo)\r\n\r\n        # Then\r\n        assert result == {'success': True}\r\n\r\n    @pytest.mark.skip(\"endless loop in questionary\")\r\n    @patch('helpers.AgentConvo.get_saved_development_step')\r\n    @patch('helpers.AgentConvo.save_development_step')\r\n    @patch('helpers.AgentConvo.create_gpt_chat_completion')\r\n    @patch('utils.questionary.get_saved_user_input')\r\n    # https://github.com/Pythagora-io/gpt-pilot/issues/35\r\n    def test_code_changes_manual_test_no(self, mock_get_saved_user_input, mock_chat_completion, mock_save, mock_get_saved_step):\r\n        # Given\r\n        monkey = None\r\n        convo = AgentConvo(self.developer)\r\n        convo.save_branch = lambda branch_name=None: branch_name\r\n        convo.load_branch = lambda function_uuid=None: function_uuid\r\n        self.project.developer = self.developer\r\n\r\n        mock_chat_completion.side_effect = [\r\n            {'text': '{\"type\": \"manual_test\", \"manual_test_description\": \"Does it look good?\"}'},\r\n            {'text': '{\"thoughts\": \"hmmm...\", \"reasoning\": \"testing\", \"steps\": [{\"type\": \"command\", \"command\": {\"command\": \"something scary\", \"timeout\": 3000}, \"check_if_fixed\": true}]}'},\r\n            {'text': 'do something else scary'},\r\n        ]\r\n\r\n        mock_questionary = MockQuestionary(['no', 'no'])\r\n\r\n        with patch('utils.questionary.questionary', mock_questionary):\r\n            # When\r\n            result = self.developer.test_code_changes(monkey, convo)\r\n\r\n            # Then\r\n            assert result == {'success': True, 'user_input': 'no'}\r\n\r\n    @patch('helpers.cli.execute_command', return_value=('stdout:\\n```\\n\\n```', 'DONE', None))\r\n    @patch('helpers.AgentConvo.get_saved_development_step')\r\n    @patch('helpers.AgentConvo.save_development_step')\r\n    @patch('utils.llm_connection.requests.post')\r\n    @patch('utils.questionary.get_saved_user_input')\r\n    def test_test_code_changes_invalid_json(self, mock_get_saved_user_input,\r\n                                            mock_requests_post,\r\n                                            mock_save,\r\n                                            mock_get_saved_step,\r\n                                            mock_execute,\r\n                                            monkeypatch):\r\n        # Given\r\n        monkey = None\r\n        convo = AgentConvo(self.developer)\r\n        convo.save_branch = lambda branch_name=None: branch_name\r\n        convo.load_branch = lambda function_uuid=None: function_uuid\r\n        self.project.developer = self.developer\r\n\r\n        # we send a GET_TEST_TYPE spec, but the 1st response is invalid\r\n        types_in_response = ['command', 'wrong_again', 'command_test']\r\n        json_received = []\r\n\r\n        def generate_response(*args, **kwargs):\r\n            # Copy messages, including the validation errors from the request\r\n            content = [msg['content'] for msg in kwargs['json']['messages']]\r\n            json_received.append(content)\r\n\r\n            gpt_response = json.dumps({\r\n                'type': types_in_response.pop(0),\r\n                'command': {\r\n                    'command': 'node server.js',\r\n                    'timeout': 3000\r\n                }\r\n            })\r\n            choice = json.dumps({'delta': {'content': gpt_response}})\r\n            line = json.dumps({'choices': [json.loads(choice)]}).encode('utf-8')\r\n\r\n            response = requests.Response()\r\n            response.status_code = 200\r\n            response.iter_lines = lambda: [line]\r\n            print(f'##### mock response: {response}')\r\n            return response\r\n\r\n        mock_requests_post.side_effect = generate_response\r\n        monkeypatch.setenv('OPENAI_API_KEY', 'secret')\r\n\r\n        # mock_questionary = MockQuestionary([''])\r\n\r\n        # with patch('utils.questionary.questionary', mock_questionary):\r\n        # When\r\n        result = self.developer.test_code_changes(monkey, convo)\r\n\r\n        # Then\r\n        assert result == {'success': True}\r\n        assert mock_requests_post.call_count == 0\r\n","file":"/pilot/helpers/agents/test_Developer.py","language":"python","fileHash":"d32718b531af57559666e64633afee9c2814ef1e43cf8f6a86a552a097e68ec8","hash":"d32718b531af57559666e64633afee9c2814ef1e43cf8f6a86a552a097e68ec8","processedContent":"import builtins\r\nimport json\r #undefined\nimport os\r #undefined\nimport pytest\r\nfrom unittest.mock import patch, MagicMock\r #undefined\n\r\nimport requests\r #undefined\n\r\nfrom helpers.AgentConvo import AgentConvo\r\n\"\"\"\nscip-python python temp indexer `pilot.helpers.agentconvo`/__init__:: The code defines a class called `AgentConvo` that represents a conversation with an agent, including functions for sending and receiving messages, formatting and rendering prompts, and error handling for GPT model token limits.\nscip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#: This code defines a class called `AgentConvo` that represents a conversation with an agent. It includes functions for sending and receiving messages, as well as formatting and rendering prompts. The code also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n\"\"\"\nfrom dotenv import load_dotenv\r\n\"\"\"\nscip-python python python-dotenv 1.0.0 dotenv/__init__:: undefined\nscip-python python python-dotenv 1.0.0 `dotenv.main`/load_dotenv().: undefined\n\"\"\"\nload_dotenv()\r #undefined\n\r\nfrom main import get_custom_print\r\n\"\"\"\nscip-python python temp indexer `pilot.main`/__init__:: The code is a Python script that sets up a custom logger, checks for the existence of a database and tables, creates them if necessary, and retrieves command-line arguments to set up the environment for the Pilot app. It also defines a class called \"Project\" that represents a software development project, and includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\nscip-python python temp indexer `pilot.utils.custom_print`/get_custom_print().: This code defines a function called `get_custom_print` that returns a tuple of two functions: `print_to_external_process` and `local_print`. The first function sends a message to an external process over a network connection, while the second function prints the message to the console.\n\"\"\"\nfrom .Developer import Developer, ENVIRONMENT_SETUP_STEP\r\n\"\"\"\nscip-python python temp indexer `pilot.helpers.agents.developer`/__init__:: The code defines a class called \"Developer\" that represents a person working on a specific project, and includes functions for implementing tasks, running commands, and handling human intervention during the development process.\nscip-python python temp indexer `pilot.helpers.agents.developer`/Developer#: The code defines a class called \"Developer\" that represents a person working on a specific project. It has functions for implementing tasks, running commands, and handling human intervention during the development process.\nscip-python python temp indexer `pilot.helpers.agents.developer`/ENVIRONMENT_SETUP_STEP.: undefined\n\"\"\"\nfrom test.mock_questionary import MockQuestionary\r\n\"\"\"\nscip-python python temp indexer `pilot.test.mock_questionary`/__init__:: This code defines a class called \"MockQuestionary\" that allows users to ask questions and receive answers in a mock interview setting.\nscip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#: This code defines a class called \"MockQuestionary\" that allows users to ask questions and receive answers in a mock interview setting. The class has several methods, including \"__init__\", \"text\", \"ask\", and \"unsafe_ask\". The purpose of the code is to provide a way to simulate a user asking questions and receiving answers in a mock interview setting.\n\"\"\"\nfrom helpers.test_Project import create_project\r\n\"\"\"\nscip-python python temp indexer `pilot.helpers.test_project`/__init__:: The code defines a class called \"Project\" that represents a software development project, with functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\nscip-python python temp indexer `pilot.helpers.test_project`/create_project().: This code defines a class called \"Project\" that represents a software development project. It includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\n\"\"\"\n\r\n\r\nclass TestDeveloper:\r\n    \"\"\"The code defines a class called \"Developer\" that represents a person working on a specific project. It has functions for implementing tasks, running commands, and handling human intervention during the development process.\"\"\"\n    pass\n","documentation":"The code defines a class called \"Developer\" that represents a person working on a specific project, and includes functions for implementing tasks, running commands, and handling human intervention during the development process."}},{"key":"scip-python python requests 2.31.0 requests/__init__:","attributes":{"symbol":"scip-python python requests 2.31.0 requests/__init__:","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#project.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#project.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.project`/Project#name.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.project`/Project#name.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#developer.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#developer.","language":"python"}},{"key":"scip-python python temp indexer `requests.models`/Response#","attributes":{"symbol":"scip-python python temp indexer `requests.models`/Response#","language":"python"}},{"key":"scip-python python temp indexer `requests.models`/Response#status_code.","attributes":{"symbol":"scip-python python temp indexer `requests.models`/Response#status_code.","language":"python"}},{"key":"scip-python python temp indexer `requests.models`/Response#iter_lines().","attributes":{"symbol":"scip-python python temp indexer `requests.models`/Response#iter_lines().","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.agents.test_productowner`/TestProductOwner#","attributes":{"range":[12,0,66,45],"symbol":"scip-python python temp indexer `pilot.helpers.agents.test_productowner`/TestProductOwner#","content":"class TestProductOwner:\r\n    def setup_method(self):\r\n        builtins.print, ipc_client_instance = get_custom_print({})\r\n\r\n    @patch('prompts.prompts.ask_user', return_value='yes')\r\n    @patch('prompts.prompts.create_gpt_chat_completion')\r\n    def test_ask_clarifying_questions(self, mock_completion, mock_ask):\r\n        # Given\r\n        project = create_project()\r\n        product_owner = ProductOwner(project)\r\n        mock_completion.side_effect = [\r\n            {'text': 'Will the app run in the console?'},\r\n            {'text': 'Will it always print \"Hello World\"?'},\r\n            {'text': 'EVERYTHING_CLEAR'}\r\n        ]\r\n\r\n        # When\r\n        high_level_messages = product_owner.ask_clarifying_questions('A Python version of the typical \"hello world\" application.')\r\n\r\n        # Then\r\n        for msg in high_level_messages:\r\n            assert msg['role'] != 'system'\r\n            assert 'You are an experienced project owner' not in msg['content']\r\n            assert 'I\\'m going to show you an overview of tasks' not in msg['content']\r\n            assert 'Getting additional answers' not in msg['content']\r\n\r\n    @pytest.mark.uses_tokens\r\n    @patch('helpers.AgentConvo.get_saved_development_step')\r\n    # @patch('helpers.AgentConvo.create_gpt_chat_completion', return_value={'text': 'A python app which displays \"Hello World\" on the console'})\r\n    def test_generate_project_summary(self,\r\n                                      # mock_completion,\r\n                                      mock_get_step):\r\n        # Given\r\n        project = create_project()\r\n        product_owner = ProductOwner(project)\r\n\r\n        # When\r\n        summary = product_owner.generate_project_summary([\r\n            {'role': 'user', 'content': 'I want you to create the app (let\\'s call it \"TestProject\") that can be described like this:\\n'\r\n                                        '```\\nA Python version of the typical \"hello world\" application.\\n```'},\r\n            {'role': 'assistant', 'content': 'Should the application produce a text-based output?'},\r\n            {'role': 'user', 'content': 'yes'},\r\n            {'role': 'assistant', 'content': 'Should the application be command-line based or should it have a GUI (Graphical User Interface)?'},\r\n            {'role': 'user', 'content': 'command-line'},\r\n            {'role': 'assistant', 'content': 'Is there a specific version of Python you prefer the application to be written in?'},\r\n            {'role': 'user', 'content': 'no'},\r\n            {'role': 'assistant', 'content': 'Are there any specific packages or libraries you want to be used in the development of this application?'},\r\n            {'role': 'user', 'content': 'no'},\r\n        ])\r\n\r\n        # Then the summary should not include instructions as reported in #246\r\n        assert isinstance(summary, str)\r\n        assert 'EVERYTHING_CLEAR' not in summary\r\n        assert 'neutral tone' not in summary\r\n        assert 'clarification' not in summary","file":"/pilot/helpers/agents/test_ProductOwner.py","language":"python","fileHash":"45610f5da3b0a0bf9a04affdaa50a42b7dd44b83eccdc4a87a4429073831ccdb","hash":"652b6b4e891e8135116740e4ffad963381b0a74fff412747bbfdbe2297b797d7","processedContent":"class TestProductOwner:\r\n    def setup_method(self):\r\n        \"\"\"This code sets up a custom print function for the test class, which allows for easier debugging and testing of the code.\"\"\"\n        pass\n\r\n    @patch('prompts.prompts.ask_user', return_value='yes')\r\n    @patch('prompts.prompts.create_gpt_chat_completion')\r\n    def test_ask_clarifying_questions(self, mock_completion, mock_ask):\r\n        \"\"\"The code defines a class called \"ProductOwner\" that inherits from another class called \"User\". It initializes the object with a project parameter and sets the user's role to \"product_owner\". The class includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\"\"\"\n        pass\n\r\n    @pytest.mark.uses_tokens\r\n    @patch('helpers.AgentConvo.get_saved_development_step')\r\n    # @patch('helpers.AgentConvo.create_gpt_chat_completion', return_value={'text': 'A python app which displays \"Hello World\" on the console'})\r\n    def test_generate_project_summary(self,\r\n                                      # mock_completion,\r\n                                      mock_get_step):\r\n        # Given\r\n        project = create_project()\r\n        product_owner = ProductOwner(project)\r\n\r\n        # When\r\n        summary = product_owner.generate_project_summary([\r\n            {'role': 'user', 'content': 'I want you to create the app (let\\'s call it \"TestProject\") that can be described like this:\\n'\r\n                                        '```\\nA Python version of the typical \"hello world\" application.\\n```'},\r\n            {'role': 'assistant', 'content': 'Should the application produce a text-based output?'},\r\n            {'role': 'user', 'content': 'yes'},\r\n            {'role': 'assistant', 'content': 'Should the application be command-line based or should it have a GUI (Graphical User Interface)?'},\r\n            {'role': 'user', 'content': 'command-line'},\r\n            {'role': 'assistant', 'content': 'Is there a specific version of Python you prefer the application to be written in?'},\r\n            {'role': 'user', 'content': 'no'},\r\n            {'role': 'assistant', 'content': 'Are there any specific packages or libraries you want to be used in the development of this application?'},\r\n            {'role': 'user', 'content': 'no'},\r\n        ])\r\n\r\n        # Then the summary should not include instructions as reported in #246\r\n        assert isinstance(summary, str)\r\n        assert 'EVERYTHING_CLEAR' not in summary\r\n        assert 'neutral tone' not in summary\r\n        assert 'clarification' not in summary","documentation":"The code defines a class called \"ProductOwner\" that inherits from another class called \"User\". It initializes the object with a project parameter and sets the user's role to \"product_owner\". The class includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.test_productowner`/TestProductOwner#setup_method().","attributes":{"range":[13,4,14,66],"symbol":"scip-python python temp indexer `pilot.helpers.agents.test_productowner`/TestProductOwner#setup_method().","content":"def setup_method(self):\r\n        builtins.print, ipc_client_instance = get_custom_print({})","file":"/pilot/helpers/agents/test_ProductOwner.py","language":"python","fileHash":"45610f5da3b0a0bf9a04affdaa50a42b7dd44b83eccdc4a87a4429073831ccdb","hash":"dd9cd4c5462f62c0e490cb671012f8cc285300384e9614806706143f06f19e65","processedContent":"def setup_method(self):\r\n        builtins.print, ipc_client_instance = get_custom_print({})","documentation":"This code sets up a custom print function for the test class, which allows for easier debugging and testing of the code."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.test_productowner`/TestProductOwner#test_ask_clarifying_questions().","attributes":{"range":[16,4,36,69],"symbol":"scip-python python temp indexer `pilot.helpers.agents.test_productowner`/TestProductOwner#test_ask_clarifying_questions().","content":"@patch('prompts.prompts.ask_user', return_value='yes')\r\n    @patch('prompts.prompts.create_gpt_chat_completion')\r\n    def test_ask_clarifying_questions(self, mock_completion, mock_ask):\r\n        # Given\r\n        project = create_project()\r\n        product_owner = ProductOwner(project)\r\n        mock_completion.side_effect = [\r\n            {'text': 'Will the app run in the console?'},\r\n            {'text': 'Will it always print \"Hello World\"?'},\r\n            {'text': 'EVERYTHING_CLEAR'}\r\n        ]\r\n\r\n        # When\r\n        high_level_messages = product_owner.ask_clarifying_questions('A Python version of the typical \"hello world\" application.')\r\n\r\n        # Then\r\n        for msg in high_level_messages:\r\n            assert msg['role'] != 'system'\r\n            assert 'You are an experienced project owner' not in msg['content']\r\n            assert 'I\\'m going to show you an overview of tasks' not in msg['content']\r\n            assert 'Getting additional answers' not in msg['content']","file":"/pilot/helpers/agents/test_ProductOwner.py","language":"python","fileHash":"45610f5da3b0a0bf9a04affdaa50a42b7dd44b83eccdc4a87a4429073831ccdb","hash":"e8c25383db6ab4257242ac1badf0b74806877e5ff095edd8c39faee251d7d29e","processedContent":"@patch('prompts.prompts.ask_user', return_value='yes')\r\n    @patch('prompts.prompts.create_gpt_chat_completion')\r\n    def test_ask_clarifying_questions(self, mock_completion, mock_ask):\r\n        # Given\r\n        project = create_project()\r #This code defines a class called \"Project\" that represents a software development project. It includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\n        product_owner = ProductOwner(project)\r #The code defines a class called \"ProductOwner\" that inherits from another class called \"User\". It initializes the object with a project parameter and sets the user's role to \"product_owner\". The class includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\n        mock_completion.side_effect = [\r\n            {'text': 'Will the app run in the console?'},\r\n            {'text': 'Will it always print \"Hello World\"?'},\r\n            {'text': 'EVERYTHING_CLEAR'}\r\n        ]\r\n\r\n        # When\r\n        high_level_messages = product_owner.ask_clarifying_questions('A Python version of the typical \"hello world\" application.')\r #This code defines a function called `ask_clarifying_questions` that takes in a description, app type, and name as input. It returns a list of messages that are used to guide the user through the process of creating an app.\n\r\n        # Then\r\n        for msg in high_level_messages:\r\n            assert msg['role'] != 'system'\r\n            assert 'You are an experienced project owner' not in msg['content']\r\n            assert 'I\\'m going to show you an overview of tasks' not in msg['content']\r\n            assert 'Getting additional answers' not in msg['content']","documentation":"The code defines a class called \"ProductOwner\" that inherits from another class called \"User\". It initializes the object with a project parameter and sets the user's role to \"product_owner\". The class includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.test_productowner`/TestProductOwner#test_generate_project_summary().","attributes":{"range":[38,4,66,45],"symbol":"scip-python python temp indexer `pilot.helpers.agents.test_productowner`/TestProductOwner#test_generate_project_summary().","content":"@pytest.mark.uses_tokens\r\n    @patch('helpers.AgentConvo.get_saved_development_step')\r\n    # @patch('helpers.AgentConvo.create_gpt_chat_completion', return_value={'text': 'A python app which displays \"Hello World\" on the console'})\r\n    def test_generate_project_summary(self,\r\n                                      # mock_completion,\r\n                                      mock_get_step):\r\n        # Given\r\n        project = create_project()\r\n        product_owner = ProductOwner(project)\r\n\r\n        # When\r\n        summary = product_owner.generate_project_summary([\r\n            {'role': 'user', 'content': 'I want you to create the app (let\\'s call it \"TestProject\") that can be described like this:\\n'\r\n                                        '```\\nA Python version of the typical \"hello world\" application.\\n```'},\r\n            {'role': 'assistant', 'content': 'Should the application produce a text-based output?'},\r\n            {'role': 'user', 'content': 'yes'},\r\n            {'role': 'assistant', 'content': 'Should the application be command-line based or should it have a GUI (Graphical User Interface)?'},\r\n            {'role': 'user', 'content': 'command-line'},\r\n            {'role': 'assistant', 'content': 'Is there a specific version of Python you prefer the application to be written in?'},\r\n            {'role': 'user', 'content': 'no'},\r\n            {'role': 'assistant', 'content': 'Are there any specific packages or libraries you want to be used in the development of this application?'},\r\n            {'role': 'user', 'content': 'no'},\r\n        ])\r\n\r\n        # Then the summary should not include instructions as reported in #246\r\n        assert isinstance(summary, str)\r\n        assert 'EVERYTHING_CLEAR' not in summary\r\n        assert 'neutral tone' not in summary\r\n        assert 'clarification' not in summary","file":"/pilot/helpers/agents/test_ProductOwner.py","language":"python","fileHash":"45610f5da3b0a0bf9a04affdaa50a42b7dd44b83eccdc4a87a4429073831ccdb","hash":"d248ad418a9cd559fc2d068563ff8f96ab9b2df8b36b1d8eb013646fce1f114a","processedContent":"@pytest.mark.uses_tokens\r\n    @patch('helpers.AgentConvo.get_saved_development_step')\r\n    # @patch('helpers.AgentConvo.create_gpt_chat_completion', return_value={'text': 'A python app which displays \"Hello World\" on the console'})\r\n    def test_generate_project_summary(self,\r\n                                      # mock_completion,\r\n                                      mock_get_step):\r\n        # Given\r\n        project = create_project()\r #This code defines a class called \"Project\" that represents a software development project. It includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\n        product_owner = ProductOwner(project)\r #The code defines a class called \"ProductOwner\" that inherits from another class called \"User\". It initializes the object with a project parameter and sets the user's role to \"product_owner\". The class includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\n\r\n        # When\r\n        summary = product_owner.generate_project_summary([\r #This code defines a function called `generate_project_summary` that generates a summary of a project based on a list of high-level messages. It uses a class called `AgentConvo` to send and receive messages, and includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n            {'role': 'user', 'content': 'I want you to create the app (let\\'s call it \"TestProject\") that can be described like this:\\n'\r\n                                        '```\\nA Python version of the typical \"hello world\" application.\\n```'},\r\n            {'role': 'assistant', 'content': 'Should the application produce a text-based output?'},\r\n            {'role': 'user', 'content': 'yes'},\r\n            {'role': 'assistant', 'content': 'Should the application be command-line based or should it have a GUI (Graphical User Interface)?'},\r\n            {'role': 'user', 'content': 'command-line'},\r\n            {'role': 'assistant', 'content': 'Is there a specific version of Python you prefer the application to be written in?'},\r\n            {'role': 'user', 'content': 'no'},\r\n            {'role': 'assistant', 'content': 'Are there any specific packages or libraries you want to be used in the development of this application?'},\r\n            {'role': 'user', 'content': 'no'},\r\n        ])\r\n\r\n        # Then the summary should not include instructions as reported in #246\r\n        assert isinstance(summary, str)\r\n        assert 'EVERYTHING_CLEAR' not in summary\r\n        assert 'neutral tone' not in summary\r\n        assert 'clarification' not in summary","documentation":"The code defines a test function that generates a summary of a software development project based on a list of high-level messages. It uses a class called `AgentConvo` to send and receive messages, and includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.test_productowner`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.test_productowner`/__init__:","range":[0,0,67,0],"content":"import builtins\r\n\r\nimport pytest\r\nfrom dotenv import load_dotenv\r\nfrom unittest.mock import patch, MagicMock\r\nfrom main import get_custom_print\r\nfrom helpers.test_Project import create_project\r\nfrom .ProductOwner import ProductOwner\r\n\r\nload_dotenv()\r\n\r\n\r\nclass TestProductOwner:\r\n    def setup_method(self):\r\n        builtins.print, ipc_client_instance = get_custom_print({})\r\n\r\n    @patch('prompts.prompts.ask_user', return_value='yes')\r\n    @patch('prompts.prompts.create_gpt_chat_completion')\r\n    def test_ask_clarifying_questions(self, mock_completion, mock_ask):\r\n        # Given\r\n        project = create_project()\r\n        product_owner = ProductOwner(project)\r\n        mock_completion.side_effect = [\r\n            {'text': 'Will the app run in the console?'},\r\n            {'text': 'Will it always print \"Hello World\"?'},\r\n            {'text': 'EVERYTHING_CLEAR'}\r\n        ]\r\n\r\n        # When\r\n        high_level_messages = product_owner.ask_clarifying_questions('A Python version of the typical \"hello world\" application.')\r\n\r\n        # Then\r\n        for msg in high_level_messages:\r\n            assert msg['role'] != 'system'\r\n            assert 'You are an experienced project owner' not in msg['content']\r\n            assert 'I\\'m going to show you an overview of tasks' not in msg['content']\r\n            assert 'Getting additional answers' not in msg['content']\r\n\r\n    @pytest.mark.uses_tokens\r\n    @patch('helpers.AgentConvo.get_saved_development_step')\r\n    # @patch('helpers.AgentConvo.create_gpt_chat_completion', return_value={'text': 'A python app which displays \"Hello World\" on the console'})\r\n    def test_generate_project_summary(self,\r\n                                      # mock_completion,\r\n                                      mock_get_step):\r\n        # Given\r\n        project = create_project()\r\n        product_owner = ProductOwner(project)\r\n\r\n        # When\r\n        summary = product_owner.generate_project_summary([\r\n            {'role': 'user', 'content': 'I want you to create the app (let\\'s call it \"TestProject\") that can be described like this:\\n'\r\n                                        '```\\nA Python version of the typical \"hello world\" application.\\n```'},\r\n            {'role': 'assistant', 'content': 'Should the application produce a text-based output?'},\r\n            {'role': 'user', 'content': 'yes'},\r\n            {'role': 'assistant', 'content': 'Should the application be command-line based or should it have a GUI (Graphical User Interface)?'},\r\n            {'role': 'user', 'content': 'command-line'},\r\n            {'role': 'assistant', 'content': 'Is there a specific version of Python you prefer the application to be written in?'},\r\n            {'role': 'user', 'content': 'no'},\r\n            {'role': 'assistant', 'content': 'Are there any specific packages or libraries you want to be used in the development of this application?'},\r\n            {'role': 'user', 'content': 'no'},\r\n        ])\r\n\r\n        # Then the summary should not include instructions as reported in #246\r\n        assert isinstance(summary, str)\r\n        assert 'EVERYTHING_CLEAR' not in summary\r\n        assert 'neutral tone' not in summary\r\n        assert 'clarification' not in summary\r\n","file":"/pilot/helpers/agents/test_ProductOwner.py","language":"python","fileHash":"45610f5da3b0a0bf9a04affdaa50a42b7dd44b83eccdc4a87a4429073831ccdb","hash":"45610f5da3b0a0bf9a04affdaa50a42b7dd44b83eccdc4a87a4429073831ccdb","processedContent":"import builtins\r\n\r\nimport pytest\r\nfrom dotenv import load_dotenv\r\n\"\"\"\nscip-python python python-dotenv 1.0.0 dotenv/__init__:: undefined\nscip-python python python-dotenv 1.0.0 `dotenv.main`/load_dotenv().: undefined\n\"\"\"\nfrom unittest.mock import patch, MagicMock\r #undefined\nfrom main import get_custom_print\r\n\"\"\"\nscip-python python temp indexer `pilot.main`/__init__:: The code is a Python script that sets up a custom logger, checks for the existence of a database and tables, creates them if necessary, and retrieves command-line arguments to set up the environment for the Pilot app. It also defines a class called \"Project\" that represents a software development project, and includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\nscip-python python temp indexer `pilot.utils.custom_print`/get_custom_print().: This code defines a function called `get_custom_print` that returns a tuple of two functions: `print_to_external_process` and `local_print`. The first function sends a message to an external process over a network connection, while the second function prints the message to the console.\n\"\"\"\nfrom helpers.test_Project import create_project\r\n\"\"\"\nscip-python python temp indexer `pilot.helpers.test_project`/__init__:: The code defines a class called \"Project\" that represents a software development project, with functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\nscip-python python temp indexer `pilot.helpers.test_project`/create_project().: This code defines a class called \"Project\" that represents a software development project. It includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\n\"\"\"\nfrom .ProductOwner import ProductOwner\r\n\"\"\"\nscip-python python temp indexer `pilot.helpers.agents.productowner`/__init__:: The code defines a series of functions and classes for a chatbot application that allows users to create and customize their own apps. It includes functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model.\nscip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#: The code defines a class called \"ProductOwner\" that inherits from another class called \"User\". It initializes the object with a project parameter and sets the user's role to \"product_owner\". The class includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\n\"\"\"\n\r\nload_dotenv()\r #undefined\n\r\n\r\nclass TestProductOwner:\r\n    \"\"\"The code defines a class called \"ProductOwner\" that inherits from another class called \"User\". It initializes the object with a project parameter and sets the user's role to \"product_owner\". The class includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\"\"\"\n    pass\n","documentation":"The code defines a class called \"ProductOwner\" that inherits from another class called \"User\". It initializes the object with a project parameter and sets the user's role to \"product_owner\"."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#","attributes":{"range":[14,0,68,76],"symbol":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#","content":"class TestTechLead:\r\n    def setup_method(self):\r\n        builtins.print, ipc_client_instance = get_custom_print({})\r\n\r\n        name = 'TestTechLead'\r\n        self.project = Project({\r\n                'app_id': 'test-tech-lead',\r\n                'name': name,\r\n                'app_type': ''\r\n            },\r\n            name=name,\r\n            architecture=[],\r\n            user_stories=[]\r\n        )\r\n\r\n        self.project.set_root_path(os.path.abspath(os.path.join(os.path.dirname(os.path.abspath(__file__)),\r\n                                                              '../../../workspace/TestTechLead')))\r\n        self.project.technologies = []\r\n        self.project.project_description = '''\r\nThe project entails creating a web-based chat application, tentatively named \"chat_app.\" \r\nThis application does not require user authentication or chat history storage. \r\nIt solely supports one-on-one messaging, excluding group chats or multimedia sharing like photos, videos, or files. \r\nAdditionally, there are no specific requirements for real-time functionality, like live typing indicators or read receipts. \r\nThe development of this application will strictly follow a monolithic structure, avoiding the use of microservices, as per the client's demand. \r\nThe development process will include the creation of user stories and tasks, based on detailed discussions with the client. \r\n        '''\r\n        self.project.user_stories = [\r\n            'User Story 1: As a user, I can access the web-based \"chat_app\" directly without needing to authenticate or log in. Do you want to add anything else? If not, just press ENTER.',\r\n            'User Story 2: As a user, I can start one-on-one conversations with another user on the \"chat_app\". Do you want to add anything else? If not, just press ENTER.',\r\n            'User Story 3: As a user, I can send and receive messages in real-time within my one-on-one conversation on the \"chat_app\". Do you want to add anything else? If not, just press ENTER.',\r\n            'User Story 4: As a user, I do not need to worry about deleting or storing my chats because the \"chat_app\" does not store chat histories. Do you want to add anything else? If not, just press ENTER.',\r\n            'User Story 5: As a user, I will only be able to send text messages, as the \"chat_app\" does not support any kind of multimedia sharing like photos, videos, or files. Do you want to add anything else? If not, just press ENTER.',\r\n            'User Story 6: As a user, I will not see any live typing indicators or read receipts since the \"chat_app\" does not provide any additional real-time functionality beyond message exchange. Do you want to add anything else? If not, just press ENTER.',\r\n        ]\r\n        self.project.architecture = ['Node.js', 'Socket.io', 'Bootstrap', 'JavaScript', 'HTML5', 'CSS3']\r\n        self.project.current_step = DEVELOPMENT_PLANNING_STEP\r\n\r\n    @pytest.mark.uses_tokens\r\n    @patch('helpers.AgentConvo.get_saved_development_step', return_value=None)\r\n    @patch('helpers.agents.TechLead.save_progress', return_value=None)\r\n    @patch('helpers.agents.TechLead.get_progress_steps', return_value=None)\r\n    def test_create_development_plan(self, mock_get_saved_step, mock_save_progress, mock_get_progress_steps):\r\n        self.techLead = TechLead(self.project)\r\n\r\n        mock_questionary = MockQuestionary(['', '', 'no'])\r\n\r\n        with patch('utils.questionary.questionary', mock_questionary):\r\n            # When\r\n            development_plan = self.techLead.create_development_plan()\r\n\r\n            # Then\r\n            assert development_plan is not None\r\n            assert_non_empty_string(development_plan[0]['description'])\r\n            assert_non_empty_string(development_plan[0]['programmatic_goal'])\r\n            assert_non_empty_string(development_plan[0]['user_review_goal'])","file":"/pilot/helpers/agents/test_TechLead.py","language":"python","fileHash":"98f037d508ae018fa66186fd9c6355685b85873f0bc92ca97b1d06dad00a5978","hash":"3d886d086950c68ddf4da95533b71215907ecfb0915eabc67003e2a2b024582b","processedContent":"class TestTechLead:\r\n    def setup_method(self):\r\n        \"\"\"The code defines a class called \"Project\" that represents a software development project. It includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\"\"\"\n        pass\n\r\n    @pytest.mark.uses_tokens\r\n    @patch('helpers.AgentConvo.get_saved_development_step', return_value=None)\r\n    @patch('helpers.agents.TechLead.save_progress', return_value=None)\r\n    @patch('helpers.agents.TechLead.get_progress_steps', return_value=None)\r\n    def test_create_development_plan(self, mock_get_saved_step, mock_save_progress, mock_get_progress_steps):\r\n        self.techLead = TechLead(self.project)\r\n\r\n        mock_questionary = MockQuestionary(['', '', 'no'])\r\n\r\n        with patch('utils.questionary.questionary', mock_questionary):\r\n            # When\r\n            development_plan = self.techLead.create_development_plan()\r\n\r\n            # Then\r\n            assert development_plan is not None\r\n            assert_non_empty_string(development_plan[0]['description'])\r\n            assert_non_empty_string(development_plan[0]['programmatic_goal'])\r\n            assert_non_empty_string(development_plan[0]['user_review_goal'])","documentation":"The code defines a class called \"TechLead\" that represents a software development project. It includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#setup_method().","attributes":{"range":[15,4,49,61],"symbol":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#setup_method().","content":"def setup_method(self):\r\n        builtins.print, ipc_client_instance = get_custom_print({})\r\n\r\n        name = 'TestTechLead'\r\n        self.project = Project({\r\n                'app_id': 'test-tech-lead',\r\n                'name': name,\r\n                'app_type': ''\r\n            },\r\n            name=name,\r\n            architecture=[],\r\n            user_stories=[]\r\n        )\r\n\r\n        self.project.set_root_path(os.path.abspath(os.path.join(os.path.dirname(os.path.abspath(__file__)),\r\n                                                              '../../../workspace/TestTechLead')))\r\n        self.project.technologies = []\r\n        self.project.project_description = '''\r\nThe project entails creating a web-based chat application, tentatively named \"chat_app.\" \r\nThis application does not require user authentication or chat history storage. \r\nIt solely supports one-on-one messaging, excluding group chats or multimedia sharing like photos, videos, or files. \r\nAdditionally, there are no specific requirements for real-time functionality, like live typing indicators or read receipts. \r\nThe development of this application will strictly follow a monolithic structure, avoiding the use of microservices, as per the client's demand. \r\nThe development process will include the creation of user stories and tasks, based on detailed discussions with the client. \r\n        '''\r\n        self.project.user_stories = [\r\n            'User Story 1: As a user, I can access the web-based \"chat_app\" directly without needing to authenticate or log in. Do you want to add anything else? If not, just press ENTER.',\r\n            'User Story 2: As a user, I can start one-on-one conversations with another user on the \"chat_app\". Do you want to add anything else? If not, just press ENTER.',\r\n            'User Story 3: As a user, I can send and receive messages in real-time within my one-on-one conversation on the \"chat_app\". Do you want to add anything else? If not, just press ENTER.',\r\n            'User Story 4: As a user, I do not need to worry about deleting or storing my chats because the \"chat_app\" does not store chat histories. Do you want to add anything else? If not, just press ENTER.',\r\n            'User Story 5: As a user, I will only be able to send text messages, as the \"chat_app\" does not support any kind of multimedia sharing like photos, videos, or files. Do you want to add anything else? If not, just press ENTER.',\r\n            'User Story 6: As a user, I will not see any live typing indicators or read receipts since the \"chat_app\" does not provide any additional real-time functionality beyond message exchange. Do you want to add anything else? If not, just press ENTER.',\r\n        ]\r\n        self.project.architecture = ['Node.js', 'Socket.io', 'Bootstrap', 'JavaScript', 'HTML5', 'CSS3']\r\n        self.project.current_step = DEVELOPMENT_PLANNING_STEP","file":"/pilot/helpers/agents/test_TechLead.py","language":"python","fileHash":"98f037d508ae018fa66186fd9c6355685b85873f0bc92ca97b1d06dad00a5978","hash":"8081d749e4393d8634ece86d01210ee76a2ba2c855cc334112043797455cee54","processedContent":"def setup_method(self):\r\n        builtins.print, ipc_client_instance = get_custom_print({})\r #This code defines a function called `get_custom_print` that returns a tuple of two functions: `print_to_external_process` and `local_print`. The first function sends a message to an external process over a network connection, while the second function prints the message to the console.\n\r\n        name = 'TestTechLead'\r\n        self.project = Project({\r #The code defines a class called \"Project\" that represents a software development project. It includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\n                'app_id': 'test-tech-lead',\r\n                'name': name,\r\n                'app_type': ''\r\n            },\r\n            name=name,\r\n            architecture=[],\r\n            user_stories=[]\r\n        )\r\n\r\n        self.project.set_root_path(os.path.abspath(os.path.join(os.path.dirname(os.path.abspath(__file__)),\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#project.: undefined\n        scip-python python temp indexer `pilot.helpers.project`/Project#set_root_path().: This code sets the root path for a file system, allowing the program to access files and directories within that path.\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/path.: undefined\n        scip-python python python-stdlib 3.11 os/path.: undefined\n        scip-python python python-stdlib 3.11 os/path.: undefined\n        scip-python python python-stdlib 3.11 os/path.: undefined\n        scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n        scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n        scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n        scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n        scip-python python temp indexer `pilot.helpers.agents.test_techlead`/: undefined\n        \"\"\"\n                                                              '../../../workspace/TestTechLead')))\r\n        self.project.technologies = []\r #undefined\n        self.project.project_description = '''\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#project.: undefined\n        scip-python python temp indexer `pilot.helpers.project`/Project#project_description.: undefined\n        \"\"\"\nThe project entails creating a web-based chat application, tentatively named \"chat_app.\" \r\nThis application does not require user authentication or chat history storage. \r\nIt solely supports one-on-one messaging, excluding group chats or multimedia sharing like photos, videos, or files. \r\nAdditionally, there are no specific requirements for real-time functionality, like live typing indicators or read receipts. \r\nThe development of this application will strictly follow a monolithic structure, avoiding the use of microservices, as per the client's demand. \r\nThe development process will include the creation of user stories and tasks, based on detailed discussions with the client. \r\n        '''\r\n        self.project.user_stories = [\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#project.: undefined\n        scip-python python temp indexer `pilot.helpers.project`/Project#user_stories.: undefined\n        \"\"\"\n            'User Story 1: As a user, I can access the web-based \"chat_app\" directly without needing to authenticate or log in. Do you want to add anything else? If not, just press ENTER.',\r\n            'User Story 2: As a user, I can start one-on-one conversations with another user on the \"chat_app\". Do you want to add anything else? If not, just press ENTER.',\r\n            'User Story 3: As a user, I can send and receive messages in real-time within my one-on-one conversation on the \"chat_app\". Do you want to add anything else? If not, just press ENTER.',\r\n            'User Story 4: As a user, I do not need to worry about deleting or storing my chats because the \"chat_app\" does not store chat histories. Do you want to add anything else? If not, just press ENTER.',\r\n            'User Story 5: As a user, I will only be able to send text messages, as the \"chat_app\" does not support any kind of multimedia sharing like photos, videos, or files. Do you want to add anything else? If not, just press ENTER.',\r\n            'User Story 6: As a user, I will not see any live typing indicators or read receipts since the \"chat_app\" does not provide any additional real-time functionality beyond message exchange. Do you want to add anything else? If not, just press ENTER.',\r\n        ]\r\n        self.project.architecture = ['Node.js', 'Socket.io', 'Bootstrap', 'JavaScript', 'HTML5', 'CSS3']\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#project.: undefined\n        scip-python python temp indexer `pilot.helpers.project`/Project#architecture.: undefined\n        \"\"\"\n        self.project.current_step = DEVELOPMENT_PLANNING_STEP","documentation":"The code defines a class called \"Project\" that represents a software development project. It includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#test_create_development_plan().","attributes":{"range":[51,4,68,76],"symbol":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#test_create_development_plan().","content":"@pytest.mark.uses_tokens\r\n    @patch('helpers.AgentConvo.get_saved_development_step', return_value=None)\r\n    @patch('helpers.agents.TechLead.save_progress', return_value=None)\r\n    @patch('helpers.agents.TechLead.get_progress_steps', return_value=None)\r\n    def test_create_development_plan(self, mock_get_saved_step, mock_save_progress, mock_get_progress_steps):\r\n        self.techLead = TechLead(self.project)\r\n\r\n        mock_questionary = MockQuestionary(['', '', 'no'])\r\n\r\n        with patch('utils.questionary.questionary', mock_questionary):\r\n            # When\r\n            development_plan = self.techLead.create_development_plan()\r\n\r\n            # Then\r\n            assert development_plan is not None\r\n            assert_non_empty_string(development_plan[0]['description'])\r\n            assert_non_empty_string(development_plan[0]['programmatic_goal'])\r\n            assert_non_empty_string(development_plan[0]['user_review_goal'])","file":"/pilot/helpers/agents/test_TechLead.py","language":"python","fileHash":"98f037d508ae018fa66186fd9c6355685b85873f0bc92ca97b1d06dad00a5978","hash":"69eb85396333fabfb704d58e63ade24f04f275f48a44b9aef58868e12b309b90","processedContent":"@pytest.mark.uses_tokens\r\n    @patch('helpers.AgentConvo.get_saved_development_step', return_value=None)\r\n    @patch('helpers.agents.TechLead.save_progress', return_value=None)\r\n    @patch('helpers.agents.TechLead.get_progress_steps', return_value=None)\r\n    def test_create_development_plan(self, mock_get_saved_step, mock_save_progress, mock_get_progress_steps):\r\n        self.techLead = TechLead(self.project)\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#: This code defines a class called \"TechLead\" that represents a person who is working on a specific project. The class has two attributes: \"role\" and \"project\". The \"role\" attribute specifies the type of work the agent is doing, and the \"project\" attribute specifies the project they are working on. The class also defines several functions, including `create_development_plan`, `create_feature_plan`, and `create_feature_summary`, which retrieve progress data for an app from a database, update the status of the app in the database, and save the development plan for the app.\n        scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#project.: undefined\n        \"\"\"\n\r\n        mock_questionary = MockQuestionary(['', '', 'no'])\r #This code defines a class called \"MockQuestionary\" that allows users to ask questions and receive answers in a mock interview setting. The class has several methods, including \"__init__\", \"text\", \"ask\", and \"unsafe_ask\". The purpose of the code is to provide a way to simulate a user asking questions and receiving answers in a mock interview setting.\n\r\n        with patch('utils.questionary.questionary', mock_questionary):\r\n            # When\r\n            development_plan = self.techLead.create_development_plan()\r\n            \"\"\"\n            scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#techLead.: undefined\n            scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_development_plan().: The code defines a function called `create_development_plan` that retrieves progress data for an app from a database, updates the status of the app in the database, and saves the development plan for the app.\n            \"\"\"\n\r\n            # Then\r\n            assert development_plan is not None\r\n            assert_non_empty_string(development_plan[0]['description'])\r #This code checks that a value is a non-empty string. It does this by first checking that the value is an instance of the `str` class, and then checking that the length of the string is greater than 0.\n            assert_non_empty_string(development_plan[0]['programmatic_goal'])\r #This code checks that a value is a non-empty string. It does this by first checking that the value is an instance of the `str` class, and then checking that the length of the string is greater than 0.\n            assert_non_empty_string(development_plan[0]['user_review_goal'])","documentation":"This code defines a class called \"TechLead\" that retrieves progress data for an app from a database, updates the status of the app in the database, and saves the development plan for the app."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/__init__:","range":[0,0,69,0],"content":"import builtins\r\nimport os\r\nimport pytest\r\nfrom unittest.mock import patch\r\nfrom dotenv import load_dotenv\r\nload_dotenv()\r\n\r\nfrom main import get_custom_print\r\nfrom helpers.agents.TechLead import TechLead, DEVELOPMENT_PLANNING_STEP\r\nfrom helpers.Project import Project\r\nfrom test.test_utils import assert_non_empty_string\r\nfrom test.mock_questionary import MockQuestionary\r\n\r\n\r\nclass TestTechLead:\r\n    def setup_method(self):\r\n        builtins.print, ipc_client_instance = get_custom_print({})\r\n\r\n        name = 'TestTechLead'\r\n        self.project = Project({\r\n                'app_id': 'test-tech-lead',\r\n                'name': name,\r\n                'app_type': ''\r\n            },\r\n            name=name,\r\n            architecture=[],\r\n            user_stories=[]\r\n        )\r\n\r\n        self.project.set_root_path(os.path.abspath(os.path.join(os.path.dirname(os.path.abspath(__file__)),\r\n                                                              '../../../workspace/TestTechLead')))\r\n        self.project.technologies = []\r\n        self.project.project_description = '''\r\nThe project entails creating a web-based chat application, tentatively named \"chat_app.\" \r\nThis application does not require user authentication or chat history storage. \r\nIt solely supports one-on-one messaging, excluding group chats or multimedia sharing like photos, videos, or files. \r\nAdditionally, there are no specific requirements for real-time functionality, like live typing indicators or read receipts. \r\nThe development of this application will strictly follow a monolithic structure, avoiding the use of microservices, as per the client's demand. \r\nThe development process will include the creation of user stories and tasks, based on detailed discussions with the client. \r\n        '''\r\n        self.project.user_stories = [\r\n            'User Story 1: As a user, I can access the web-based \"chat_app\" directly without needing to authenticate or log in. Do you want to add anything else? If not, just press ENTER.',\r\n            'User Story 2: As a user, I can start one-on-one conversations with another user on the \"chat_app\". Do you want to add anything else? If not, just press ENTER.',\r\n            'User Story 3: As a user, I can send and receive messages in real-time within my one-on-one conversation on the \"chat_app\". Do you want to add anything else? If not, just press ENTER.',\r\n            'User Story 4: As a user, I do not need to worry about deleting or storing my chats because the \"chat_app\" does not store chat histories. Do you want to add anything else? If not, just press ENTER.',\r\n            'User Story 5: As a user, I will only be able to send text messages, as the \"chat_app\" does not support any kind of multimedia sharing like photos, videos, or files. Do you want to add anything else? If not, just press ENTER.',\r\n            'User Story 6: As a user, I will not see any live typing indicators or read receipts since the \"chat_app\" does not provide any additional real-time functionality beyond message exchange. Do you want to add anything else? If not, just press ENTER.',\r\n        ]\r\n        self.project.architecture = ['Node.js', 'Socket.io', 'Bootstrap', 'JavaScript', 'HTML5', 'CSS3']\r\n        self.project.current_step = DEVELOPMENT_PLANNING_STEP\r\n\r\n    @pytest.mark.uses_tokens\r\n    @patch('helpers.AgentConvo.get_saved_development_step', return_value=None)\r\n    @patch('helpers.agents.TechLead.save_progress', return_value=None)\r\n    @patch('helpers.agents.TechLead.get_progress_steps', return_value=None)\r\n    def test_create_development_plan(self, mock_get_saved_step, mock_save_progress, mock_get_progress_steps):\r\n        self.techLead = TechLead(self.project)\r\n\r\n        mock_questionary = MockQuestionary(['', '', 'no'])\r\n\r\n        with patch('utils.questionary.questionary', mock_questionary):\r\n            # When\r\n            development_plan = self.techLead.create_development_plan()\r\n\r\n            # Then\r\n            assert development_plan is not None\r\n            assert_non_empty_string(development_plan[0]['description'])\r\n            assert_non_empty_string(development_plan[0]['programmatic_goal'])\r\n            assert_non_empty_string(development_plan[0]['user_review_goal'])\r\n","file":"/pilot/helpers/agents/test_TechLead.py","language":"python","fileHash":"98f037d508ae018fa66186fd9c6355685b85873f0bc92ca97b1d06dad00a5978","hash":"98f037d508ae018fa66186fd9c6355685b85873f0bc92ca97b1d06dad00a5978","processedContent":"import builtins\r\nimport os\r #undefined\nimport pytest\r\nfrom unittest.mock import patch\r #undefined\nfrom dotenv import load_dotenv\r\n\"\"\"\nscip-python python python-dotenv 1.0.0 dotenv/__init__:: undefined\nscip-python python python-dotenv 1.0.0 `dotenv.main`/load_dotenv().: undefined\n\"\"\"\nload_dotenv()\r #undefined\n\r\nfrom main import get_custom_print\r\n\"\"\"\nscip-python python temp indexer `pilot.main`/__init__:: The code is a Python script that sets up a custom logger, checks for the existence of a database and tables, creates them if necessary, and retrieves command-line arguments to set up the environment for the Pilot app. It also defines a class called \"Project\" that represents a software development project, and includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\nscip-python python temp indexer `pilot.utils.custom_print`/get_custom_print().: This code defines a function called `get_custom_print` that returns a tuple of two functions: `print_to_external_process` and `local_print`. The first function sends a message to an external process over a network connection, while the second function prints the message to the console.\n\"\"\"\nfrom helpers.agents.TechLead import TechLead, DEVELOPMENT_PLANNING_STEP\r\n\"\"\"\nscip-python python temp indexer `pilot.helpers.agents.techlead`/__init__:: The code defines a class called \"TechLead\" that represents a person working on a specific project, and includes functions for retrieving progress data, updating the status of the app in the database, and saving the development plan for the app.\nscip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#: This code defines a class called \"TechLead\" that represents a person who is working on a specific project. The class has two attributes: \"role\" and \"project\". The \"role\" attribute specifies the type of work the agent is doing, and the \"project\" attribute specifies the project they are working on. The class also defines several functions, including `create_development_plan`, `create_feature_plan`, and `create_feature_summary`, which retrieve progress data for an app from a database, update the status of the app in the database, and save the development plan for the app.\nscip-python python temp indexer `pilot.helpers.agents.techlead`/DEVELOPMENT_PLANNING_STEP.: undefined\n\"\"\"\nfrom helpers.Project import Project\r\n\"\"\"\nscip-python python temp indexer `pilot.helpers.project`/__init__:: The code defines a Python class called \"Project\" that represents a software development project, with functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\nscip-python python temp indexer `pilot.helpers.project`/Project#: The code defines a class called \"Project\" that represents a software development project. It includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\n\"\"\"\nfrom test.test_utils import assert_non_empty_string\r\n\"\"\"\nscip-python python temp indexer `pilot.test.test_utils`/__init__:: The code defines two functions: `mock_terminal_size` and `assert_non_empty_string`. The first function returns a mock object with a fixed width of 80 columns, while the second function checks that a value is a non-empty string by checking if it's an instance of the `str` class and has a length greater than 0.\nscip-python python temp indexer `pilot.test.test_utils`/assert_non_empty_string().: This code checks that a value is a non-empty string. It does this by first checking that the value is an instance of the `str` class, and then checking that the length of the string is greater than 0.\n\"\"\"\nfrom test.mock_questionary import MockQuestionary\r\n\"\"\"\nscip-python python temp indexer `pilot.test.mock_questionary`/__init__:: This code defines a class called \"MockQuestionary\" that allows users to ask questions and receive answers in a mock interview setting.\nscip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#: This code defines a class called \"MockQuestionary\" that allows users to ask questions and receive answers in a mock interview setting. The class has several methods, including \"__init__\", \"text\", \"ask\", and \"unsafe_ask\". The purpose of the code is to provide a way to simulate a user asking questions and receiving answers in a mock interview setting.\n\"\"\"\n\r\n\r\nclass TestTechLead:\r\n    \"\"\"The code defines a class called \"TechLead\" that represents a software development project. It includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\"\"\"\n    pass\n","documentation":"The code defines a class called \"TechLead\" that represents a person working on a specific project, and includes functions for retrieving progress data, updating the status of the app in the database, and saving the development plan for the app."}},{"key":"scip-python python temp indexer `pilot.test.test_utils`/assert_non_empty_string().","attributes":{"symbol":"scip-python python temp indexer `pilot.test.test_utils`/assert_non_empty_string().","language":"python","range":[8,0,10,25],"content":"def assert_non_empty_string(value):\r\n    assert isinstance(value, str)\r\n    assert len(value) > 0","file":"/pilot/test/test_utils.py","fileHash":"97acdfe4271aefbb335d4b52bf13b331eab2aff4866f71baf15fc45e10cd6336","hash":"5d06cfd01af3c6cc03a2079adb1e287e262215d7725e3d9b4eedddcdbd60d3e3","processedContent":"def assert_non_empty_string(value):\r\n    assert isinstance(value, str)\r\n    assert len(value) > 0","documentation":"This code checks that a value is a non-empty string. It does this by first checking that the value is an instance of the `str` class, and then checking that the length of the string is greater than 0."}},{"key":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#project.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#project.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.project`/Project#user_stories.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.project`/Project#user_stories.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.project`/Project#architecture.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.project`/Project#architecture.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#techLead.","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#techLead.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.exceptions.apikeynotdefinederror`/ApiKeyNotDefinedError#","attributes":{"range":[0,0,3,71],"symbol":"scip-python python temp indexer `pilot.helpers.exceptions.apikeynotdefinederror`/ApiKeyNotDefinedError#","content":"class ApiKeyNotDefinedError(Exception):\n    def __init__(self, env_key: str):\n        self.env_key = env_key\n        super().__init__(f\"API Key has not been configured: {env_key}\")","file":"/pilot/helpers/exceptions/ApiKeyNotDefinedError.py","language":"python","fileHash":"09e56ea09a367820297c6a94d0e89b3512b85af3ff855cd07b267ff8cc5835de","hash":"9a6d8210bf7bcb69a21095c062b443200ecd7c9074be1bfd935cec8e6231584e","processedContent":"class ApiKeyNotDefinedError(Exception):\n    def __init__(self, env_key: str):\n        self.env_key = env_key\n        super().__init__(f\"API Key has not been configured: {env_key}\")","documentation":"This code defines a custom exception class called `ApiKeyNotDefinedError` that is raised when an API key is not defined in the environment. The class takes an environment key as an argument and initializes the exception with a message indicating the missing API key."}},{"key":"scip-python python temp indexer `pilot.helpers.exceptions.apikeynotdefinederror`/ApiKeyNotDefinedError#__init__().","attributes":{"range":[1,4,3,71],"symbol":"scip-python python temp indexer `pilot.helpers.exceptions.apikeynotdefinederror`/ApiKeyNotDefinedError#__init__().","content":"def __init__(self, env_key: str):\n        self.env_key = env_key\n        super().__init__(f\"API Key has not been configured: {env_key}\")","file":"/pilot/helpers/exceptions/ApiKeyNotDefinedError.py","language":"python","fileHash":"09e56ea09a367820297c6a94d0e89b3512b85af3ff855cd07b267ff8cc5835de","hash":"2b3f0d07ea91940407049b6c8fb8f2692c910ae2a8e7a57af9752e470873f56b","processedContent":"def __init__(self, env_key: str):\n        self.env_key = env_key\n        super().__init__(f\"API Key has not been configured: {env_key}\")","documentation":"This code defines a custom exception class for handling missing API keys. The `env_key` parameter is used to identify the specific key that is missing, and the superclass constructor is called with a custom error message."}},{"key":"scip-python python temp indexer `pilot.helpers.exceptions.apikeynotdefinederror`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.exceptions.apikeynotdefinederror`/__init__:","range":[0,0,4,0],"content":"class ApiKeyNotDefinedError(Exception):\n    def __init__(self, env_key: str):\n        self.env_key = env_key\n        super().__init__(f\"API Key has not been configured: {env_key}\")\n","file":"/pilot/helpers/exceptions/ApiKeyNotDefinedError.py","language":"python","fileHash":"09e56ea09a367820297c6a94d0e89b3512b85af3ff855cd07b267ff8cc5835de","hash":"09e56ea09a367820297c6a94d0e89b3512b85af3ff855cd07b267ff8cc5835de","processedContent":"class ApiKeyNotDefinedError(Exception):\n    \"\"\"This code defines a custom exception class called `ApiKeyNotDefinedError` that is raised when an API key is not defined in the environment. The class takes an environment key as an argument and initializes the exception with a message indicating the missing API key.\"\"\"\n    pass\n","documentation":"This code defines a custom exception class called `ApiKeyNotDefinedError` that is raised when an API key is not defined in the environment."}},{"key":"scip-python python temp indexer `pilot.helpers.exceptions.commandfinishedearly`/CommandFinishedEarly#__init__().","attributes":{"range":[1,4,3,33],"symbol":"scip-python python temp indexer `pilot.helpers.exceptions.commandfinishedearly`/CommandFinishedEarly#__init__().","content":"def __init__(self, message='Command finished before timeout. Handling early completion...'):\n        self.message = message\n        super().__init__(message)","file":"/pilot/helpers/exceptions/CommandFinishedEarly.py","language":"python","fileHash":"653291a03d34888c6dda1eca2ea6906ede53d491c801f5f002d29a77dd354cd2","hash":"eb8e137b41c42872cccb92606531f26606301d9d072f9a349fe62083c4c99003","processedContent":"def __init__(self, message='Command finished before timeout. Handling early completion...'):\n        self.message = message\n        super().__init__(message)","documentation":"This code defines a custom exception class for handling early completion of a command. The message parameter is set to a default value, and the superclass constructor is called with the same message."}},{"key":"scip-python python temp indexer `pilot.helpers.exceptions.tokenlimiterror`/TokenLimitError#__init__().","attributes":{"range":[4,4,7,114],"symbol":"scip-python python temp indexer `pilot.helpers.exceptions.tokenlimiterror`/TokenLimitError#__init__().","content":"def __init__(self, tokens_in_messages, max_tokens=MAX_GPT_MODEL_TOKENS):\n        self.tokens_in_messages = tokens_in_messages\n        self.max_tokens = max_tokens\n        super().__init__(f\"Token limit error happened with {tokens_in_messages}/{max_tokens} tokens in messages!\")","file":"/pilot/helpers/exceptions/TokenLimitError.py","language":"python","fileHash":"eda0410d1a4b07f9d30a9123e0366bb26c1af461081f9a84c68618872c9947e3","hash":"8316dc5df13908bbba1e9f9da4e8b1dd3433e5a234ee4f19141657cae1333af4","processedContent":"def __init__(self, tokens_in_messages, max_tokens=MAX_GPT_MODEL_TOKENS):\n        self.tokens_in_messages = tokens_in_messages\n        self.max_tokens = max_tokens\n        super().__init__(f\"Token limit error happened with {tokens_in_messages}/{max_tokens} tokens in messages!\")","documentation":"This code defines a custom exception class for handling token limit errors in a GPT-based model. The class takes two parameters: the number of tokens in the messages and the maximum number of tokens allowed. When the token limit is exceeded, the class raises an exception with a custom message indicating the number of tokens in the messages and the maximum number of tokens allowed."}},{"key":"scip-python python temp indexer `pilot.const.llm`/MAX_GPT_MODEL_TOKENS.","attributes":{"symbol":"scip-python python temp indexer `pilot.const.llm`/MAX_GPT_MODEL_TOKENS.","language":"python"}},{"key":"scip-python python temp indexer `pilot.helpers.exceptions.toodeeprecursionerror`/TooDeepRecursionError#__init__().","attributes":{"range":[1,4,3,33],"symbol":"scip-python python temp indexer `pilot.helpers.exceptions.toodeeprecursionerror`/TooDeepRecursionError#__init__().","content":"def __init__(self, message='Recursion is too deep!'):\n        self.message = message\n        super().__init__(message)","file":"/pilot/helpers/exceptions/TooDeepRecursionError.py","language":"python","fileHash":"788cc30ec9343b9d24dbd66541e8bd529bee693635d0288bf37f7cfa64331eea","hash":"189693c9ca2b45b72860a96bbaacd160347773e826713a0fcc0674ac0ed3e619","processedContent":"def __init__(self, message='Recursion is too deep!'):\n        self.message = message\n        super().__init__(message)","documentation":"This code defines a custom exception class that inherits from the built-in `Exception` class. The `__init__` method initializes the exception with a message, which is set to \"Recursion is too deep!\" by default. The `super().__init__(message)` call calls the parent class's constructor and passes in the message as an argument."}},{"key":"scip-python python temp indexer `pilot.helpers.exceptions`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.helpers.exceptions`/__init__:","range":[0,0,3,0],"content":"from .ApiKeyNotDefinedError import ApiKeyNotDefinedError\r\nfrom .TokenLimitError import TokenLimitError\r\nfrom .TooDeepRecursionError import TooDeepRecursionError\r\n","file":"/pilot/helpers/exceptions/__init__.py","language":"python","fileHash":"e66cba77bf2aa89ae12e44d4879882ce03e091c4bcca0237461ece1d18f2781b","hash":"e66cba77bf2aa89ae12e44d4879882ce03e091c4bcca0237461ece1d18f2781b","processedContent":"from .ApiKeyNotDefinedError import ApiKeyNotDefinedError\r\n\"\"\"\nscip-python python temp indexer `pilot.helpers.exceptions.apikeynotdefinederror`/__init__:: This code defines a custom exception class called `ApiKeyNotDefinedError` that is raised when an API key is not defined in the environment.\nscip-python python temp indexer `pilot.helpers.exceptions.apikeynotdefinederror`/__init__:: This code defines a custom exception class called `ApiKeyNotDefinedError` that is raised when an API key is not defined in the environment.\n\"\"\"\nfrom .TokenLimitError import TokenLimitError\r\n\"\"\"\nscip-python python temp indexer `pilot.helpers.exceptions.tokenlimiterror`/__init__:: This code defines constants for the maximum number of tokens allowed in a GPT model and the minimum number of tokens required for a response. It also sets the maximum number of questions that can be asked and the response when the conversation is complete.\nscip-python python temp indexer `pilot.helpers.exceptions.tokenlimiterror`/__init__:: This code defines constants for the maximum number of tokens allowed in a GPT model and the minimum number of tokens required for a response. It also sets the maximum number of questions that can be asked and the response when the conversation is complete.\n\"\"\"\nfrom .TooDeepRecursionError import TooDeepRecursionError\r\n\"\"\"\nscip-python python temp indexer `pilot.helpers.exceptions.toodeeprecursionerror`/__init__:: This code defines a custom exception class called \"TooDeepRecursionError\" that is raised when the recursion depth exceeds a certain limit, indicating a potential infinite loop in the code.\nscip-python python temp indexer `pilot.helpers.exceptions.toodeeprecursionerror`/__init__:: This code defines a custom exception class called \"TooDeepRecursionError\" that is raised when the recursion depth exceeds a certain limit, indicating a potential infinite loop in the code.\n\"\"\"\n","documentation":"The code defines custom exception classes for API key not defined, token limit exceeded, and too deep recursion errors."}},{"key":"scip-python python temp indexer `pilot.logger`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.logger`/__init__:","range":[0,0,0,0],"content":"","file":"/pilot/logger/__init__.py","language":"python","fileHash":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855","hash":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855","processedContent":""}},{"key":"scip-python python temp indexer `pilot.logger.logger`/setup_logger().","attributes":{"range":[5,0,31,17],"symbol":"scip-python python temp indexer `pilot.logger.logger`/setup_logger().","content":"def setup_logger():\n    # Create a custom format for your logs\n    log_format = \"%(asctime)s [%(filename)s:%(lineno)s - %(funcName)20s() ] %(levelname)s: %(message)s\"\n\n    # Create a log handler for file output\n    file_handler = logging.FileHandler(\n        filename=os.path.join(os.path.dirname(__file__), 'debug.log'),\n        mode='w',\n        encoding='utf-8',\n    )\n\n    # Apply the custom format to the handler\n    formatter = logging.Formatter(log_format)\n    file_handler.setFormatter(formatter)\n    # file_handler.addFilter(lambda record: record.levelno <= logging.INFO)\n    file_handler.addFilter(filter_sensitive_fields)\n\n    # Create a logger and add the handler\n    logger = logging.getLogger()\n    logger.addHandler(file_handler)\n\n    if os.getenv('DEBUG') == 'true':\n        logger.setLevel(logging.DEBUG)\n    else:\n        logger.setLevel(logging.INFO)\n\n    return logger","file":"/pilot/logger/logger.py","language":"python","fileHash":"fd5e0d6270076a253a46194786594e122f1988ef416a372733b2b434d1b85847","hash":"11d3149f6e68c1bbc2030931f90a48615a632f14069ed1a20f2130e4e04116e9","processedContent":"def setup_logger():\n    # Create a custom format for your logs\n    log_format = \"%(asctime)s [%(filename)s:%(lineno)s - %(funcName)20s() ] %(levelname)s: %(message)s\"\n\n    # Create a log handler for file output\n    file_handler = logging.FileHandler(\n    \"\"\"\n    scip-python python python-stdlib 3.11 logging/__init__:: undefined\n    scip-python python python-stdlib 3.11 logging/FileHandler#: undefined\n    \"\"\"\n        filename=os.path.join(os.path.dirname(__file__), 'debug.log'),\n        \"\"\"\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/path.: undefined\n        scip-python python python-stdlib 3.11 os/path.: undefined\n        scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n        scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n        scip-python python temp indexer `pilot.logger.logger`/: undefined\n        \"\"\"\n        mode='w',\n        encoding='utf-8',\n    )\n\n    # Apply the custom format to the handler\n    formatter = logging.Formatter(log_format)\n    \"\"\"\n    scip-python python python-stdlib 3.11 logging/__init__:: undefined\n    scip-python python python-stdlib 3.11 logging/Formatter#: undefined\n    \"\"\"\n    file_handler.setFormatter(formatter) #undefined\n    # file_handler.addFilter(lambda record: record.levelno <= logging.INFO)\n    file_handler.addFilter(filter_sensitive_fields)\n    \"\"\"\n    scip-python python python-stdlib 3.11 logging/Filterer#addFilter().: undefined\n    scip-python python temp indexer `pilot.logger.logger`/filter_sensitive_fields().: This code is a filter function that removes sensitive information from log records. It checks if the record's arguments are a dictionary or a tuple, and replaces any matching fields with asterisks. Additionally, it removes ANSI escape sequences from the message.\n    \"\"\"\n\n    # Create a logger and add the handler\n    logger = logging.getLogger()\n    \"\"\"\n    scip-python python python-stdlib 3.11 logging/__init__:: undefined\n    scip-python python python-stdlib 3.11 logging/getLogger().: undefined\n    \"\"\"\n    logger.addHandler(file_handler) #undefined\n\n    if os.getenv('DEBUG') == 'true':\n    \"\"\"\n    scip-python python python-stdlib 3.11 os/__init__:: undefined\n    scip-python python python-stdlib 3.11 os/getenv().: undefined\n    \"\"\"\n        logger.setLevel(logging.DEBUG)\n        \"\"\"\n        scip-python python python-stdlib 3.11 logging/__init__:: undefined\n        scip-python python python-stdlib 3.11 logging/Logger#setLevel().: undefined\n        scip-python python python-stdlib 3.11 logging/DEBUG.DEBUG.: undefined\n        \"\"\"\n    else:\n        logger.setLevel(logging.INFO)\n        \"\"\"\n        scip-python python python-stdlib 3.11 logging/__init__:: undefined\n        scip-python python python-stdlib 3.11 logging/Logger#setLevel().: undefined\n        scip-python python python-stdlib 3.11 logging/INFO.INFO.: undefined\n        \"\"\"\n\n    return logger","documentation":"This code sets up a custom logger for the application. It creates a file handler that writes logs to a file, applies a custom format to the handler, and adds the handler to a logger. The logger is then returned for use in the application."}},{"key":"scip-python python temp indexer `pilot.logger.logger`/filter_sensitive_fields().","attributes":{"range":[37,0,57,15],"symbol":"scip-python python temp indexer `pilot.logger.logger`/filter_sensitive_fields().","content":"def filter_sensitive_fields(record):\n    # TODO: also remove escape sequences for colors, bold etc\n    if isinstance(record.args, dict):  # check if args is a dictionary\n        args = record.args.copy()\n        for field in sensitive_fields:\n            if field in args:\n                args[field] = '*****'\n        record.args = args\n\n    elif isinstance(record.args, tuple):  # check if args is a tuple\n        args_list = list(record.args)\n        # Convert the tuple to a list and replace sensitive fields\n        args_list = ['*****' if arg in sensitive_fields else arg for arg in args_list]\n        record.args = tuple(args_list)\n\n    # Remove ANSI escape sequences - colours & bold\n    # Peewee passes a tuple as record.msg\n    if isinstance(record.msg, str):\n        record.msg = re.sub(r'\\x1B(?:[@-Z\\\\-_]|\\[[0-?]*[ -/]*[@-~])', '', record.msg)\n\n    return True","file":"/pilot/logger/logger.py","language":"python","fileHash":"fd5e0d6270076a253a46194786594e122f1988ef416a372733b2b434d1b85847","hash":"4eb3f22b33625147569f6af0f8d1a885111b31a040ef4331ae4c545fbb36e7db","processedContent":"def filter_sensitive_fields(record):\n    # TODO: also remove escape sequences for colors, bold etc\n    if isinstance(record.args, dict):  # check if args is a dictionary\n        args = record.args.copy()\n        for field in sensitive_fields: #undefined\n            if field in args:\n                args[field] = '*****'\n        record.args = args\n\n    elif isinstance(record.args, tuple):  # check if args is a tuple\n        args_list = list(record.args)\n        # Convert the tuple to a list and replace sensitive fields\n        args_list = ['*****' if arg in sensitive_fields else arg for arg in args_list] #undefined\n        record.args = tuple(args_list)\n\n    # Remove ANSI escape sequences - colours & bold\n    # Peewee passes a tuple as record.msg\n    if isinstance(record.msg, str):\n        record.msg = re.sub(r'\\x1B(?:[@-Z\\\\-_]|\\[[0-?]*[ -/]*[@-~])', '', record.msg)\n        \"\"\"\n        scip-python python python-stdlib 3.11 re/__init__:: undefined\n        scip-python python python-stdlib 3.11 re/sub().: undefined\n        \"\"\"\n\n    return True","documentation":"This code is a filter function that removes sensitive information from log records. It checks if the record's arguments are a dictionary or a tuple, and replaces any matching fields with asterisks. Additionally, it removes ANSI escape sequences from the message."}},{"key":"scip-python python python-stdlib 3.11 logging/FileHandler#","attributes":{"symbol":"scip-python python python-stdlib 3.11 logging/FileHandler#","language":"python"}},{"key":"scip-python python temp indexer `pilot.logger.logger`/","attributes":{"symbol":"scip-python python temp indexer `pilot.logger.logger`/","language":"python"}},{"key":"scip-python python python-stdlib 3.11 logging/Formatter#","attributes":{"symbol":"scip-python python python-stdlib 3.11 logging/Formatter#","language":"python"}},{"key":"scip-python python python-stdlib 3.11 logging/Handler#setFormatter().","attributes":{"symbol":"scip-python python python-stdlib 3.11 logging/Handler#setFormatter().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 logging/Filterer#addFilter().","attributes":{"symbol":"scip-python python python-stdlib 3.11 logging/Filterer#addFilter().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 logging/Logger#addHandler().","attributes":{"symbol":"scip-python python python-stdlib 3.11 logging/Logger#addHandler().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 logging/Logger#setLevel().","attributes":{"symbol":"scip-python python python-stdlib 3.11 logging/Logger#setLevel().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 logging/DEBUG.DEBUG.","attributes":{"symbol":"scip-python python python-stdlib 3.11 logging/DEBUG.DEBUG.","language":"python"}},{"key":"scip-python python python-stdlib 3.11 logging/INFO.INFO.","attributes":{"symbol":"scip-python python python-stdlib 3.11 logging/INFO.INFO.","language":"python"}},{"key":"scip-python python temp indexer `pilot.logger.logger`/sensitive_fields.","attributes":{"symbol":"scip-python python temp indexer `pilot.logger.logger`/sensitive_fields.","language":"python"}},{"key":"scip-python python temp indexer `pilot.prompts`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.prompts`/__init__:","range":[0,0,0,0],"content":"","file":"/pilot/prompts/__init__.py","language":"python","fileHash":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855","hash":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855","processedContent":""}},{"key":"scip-python python temp indexer `pilot.prompts.prompts`/generate_messages_from_custom_conversation().","attributes":{"range":[150,0,178,17],"symbol":"scip-python python temp indexer `pilot.prompts.prompts`/generate_messages_from_custom_conversation().","content":"def generate_messages_from_custom_conversation(role, messages, start_role='user'):\n    \"\"\"\n    :param role: 'product_owner', 'architect', 'dev_ops', 'tech_lead', 'full_stack_developer', 'code_monkey'\n    :param messages: [\n        \"I will show you some of your message to which I want you to make some updates. Please just modify your last message per my instructions.\",\n        {LLM's previous message},\n        {user's request for change}\n    ]\n    :param start_role: 'user'\n    :return: [\n      { \"role\": \"system\", \"content\": \"You are a ..., You do ...\" },\n      { \"role\": start_role, \"content\": messages[i + even] },\n      { \"role\": \"assistant\" (or \"user\" for other start_role), \"content\": messages[i + odd] },\n      ... ]\n    \"\"\"\n    # messages is list of strings\n    system_message = get_sys_message(role)\n    result = [system_message]\n    logger.info(f'\\n>>>>>>>>>> {role} Prompt >>>>>>>>>>\\n%s\\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', system_message['content'])\n\n    for i, message in enumerate(messages):\n        if i % 2 == 0:\n            result.append({\"role\": start_role, \"content\": message})\n            logger.info(f'\\n>>>>>>>>>> {start_role} Prompt >>>>>>>>>>\\n%s\\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', message)\n        else:\n            result.append({\"role\": \"assistant\" if start_role == \"user\" else \"user\", \"content\": message})\n            logger.info('\\n>>>>>>>>>> Assistant Prompt >>>>>>>>>>\\n%s\\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', message)\n\n    return result","file":"/pilot/prompts/prompts.py","language":"python","fileHash":"6b5eafecb74f005f8a70e0458cd97a106567f3631af5f5bc5d228298d9eccb01","hash":"01446d3a6066c490c33e76cd6c40d5589016c4590b343228fcc498dc28e1e678","processedContent":"def generate_messages_from_custom_conversation(role, messages, start_role='user'):\n    \"\"\"\n    :param role: 'product_owner', 'architect', 'dev_ops', 'tech_lead', 'full_stack_developer', 'code_monkey'\n    :param messages: [\n        \"I will show you some of your message to which I want you to make some updates. Please just modify your last message per my instructions.\",\n        {LLM's previous message},\n        {user's request for change}\n    ]\n    :param start_role: 'user'\n    :return: [\n      { \"role\": \"system\", \"content\": \"You are a ..., You do ...\" },\n      { \"role\": start_role, \"content\": messages[i + even] },\n      { \"role\": \"assistant\" (or \"user\" for other start_role), \"content\": messages[i + odd] },\n      ... ]\n    \"\"\"\n    # messages is list of strings\n    system_message = get_sys_message(role) #This code defines a function called `get_sys_message` that retrieves and renders a system message based on the provided role. The message is rendered using a prompt template stored in a dictionary called `prompts_components`.\n    result = [system_message]\n    logger.info(f'\\n>>>>>>>>>> {role} Prompt >>>>>>>>>>\\n%s\\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', system_message['content'])\n    \"\"\"\n    scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n    scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n    \"\"\"\n\n    for i, message in enumerate(messages):\n        if i % 2 == 0:\n            result.append({\"role\": start_role, \"content\": message})\n            logger.info(f'\\n>>>>>>>>>> {start_role} Prompt >>>>>>>>>>\\n%s\\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', message)\n            \"\"\"\n            scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n            scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n            \"\"\"\n        else:\n            result.append({\"role\": \"assistant\" if start_role == \"user\" else \"user\", \"content\": message})\n            logger.info('\\n>>>>>>>>>> Assistant Prompt >>>>>>>>>>\\n%s\\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', message)\n            \"\"\"\n            scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n            scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n            \"\"\"\n\n    return result","documentation":"This code defines a function called `generate_messages_from_custom_conversation` that takes in a role, messages, and start_role as input. It then generates a list of messages based on the provided role, messages, and start_role. The function uses a prompt template to render the system message and returns the list of messages."}},{"key":"scip-python python temp indexer const/__init__:","attributes":{"symbol":"scip-python python temp indexer const/__init__:","language":"python"}},{"key":"scip-python python temp indexer `const.common`/__init__:","attributes":{"symbol":"scip-python python temp indexer `const.common`/__init__:","language":"python"}},{"key":"scip-python python temp indexer `pilot.const.llm`/MAX_QUESTIONS.","attributes":{"symbol":"scip-python python temp indexer `pilot.const.llm`/MAX_QUESTIONS.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.questionary`/styled_select().","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.questionary`/styled_select().","language":"python","range":[13,0,16,59],"content":"def styled_select(*args, **kwargs):\n    kwargs[\"style\"] = style_config.get_style()\n    # TODO add saving and loading of user input\n    return questionary.select(*args, **kwargs).unsafe_ask()","file":"/pilot/utils/questionary.py","fileHash":"2423013aaf514ea6889adc9400c20b32a8be4a858e060672e0c3e0e52d59a081","hash":"3e0b5e2a3af9ff206b3a8e2e3892084fd2475c2c004dfb0e5995f18ea2c1268b","processedContent":"def styled_select(*args, **kwargs):\n    kwargs[\"style\"] = style_config.get_style()\n    \"\"\"\n    scip-python python temp indexer `pilot.utils.style`/style_config.: undefined\n    scip-python python temp indexer `pilot.utils.style`/StyleConfig#get_style().: This code retrieves the Style configuration from a theme_style instance and returns it as a questionary.Style object.\n    \"\"\"\n    # TODO add saving and loading of user input\n    return questionary.select(*args, **kwargs).unsafe_ask()","documentation":"This code defines a function called `styled_select` that retrieves the style configuration from a theme_style instance and returns it as a questionary.Style object."}},{"key":"scip-python python temp indexer `pilot.prompts.test_prompts`/test_prompt_ran_command_None_exit().","attributes":{"range":[3,0,26,11],"symbol":"scip-python python temp indexer `pilot.prompts.test_prompts`/test_prompt_ran_command_None_exit().","content":"def test_prompt_ran_command_None_exit():\r\n    # When\r\n    prompt = get_prompt('dev_ops/ran_command.prompt', {\r\n        'cli_response': 'stdout:\\n```\\nsuccess\\n```',\r\n        'command': './scripts/run_tests',\r\n        'additional_message': 'Some additional message\\n',\r\n        'exit_code': None\r\n    })\r\n\r\n    # Then\r\n    assert prompt == '''\r\nSome additional message\r\n\r\nI ran the command `./scripts/run_tests`. The output was:\r\n\r\nstdout:\r\n```\r\nsuccess\r\n```\r\n\r\nThink about this output and not any output in previous messages. If the command was successfully executed, respond with `DONE`. If it wasn't, respond with `NEEDS_DEBUGGING`.\r\n\r\nDo not respond with anything other than these two keywords.\r\n'''.strip()","file":"/pilot/prompts/test_prompts.py","language":"python","fileHash":"f55e961eddba1527c0d3a8f2946283c87260c209058bcba65a6d34e09dee7f20","hash":"04180e3105b8048f2d5a3db45ca69d4158bc52157739c7b5179d41f0cc59222b","processedContent":"def test_prompt_ran_command_None_exit():\r\n    # When\r\n    prompt = get_prompt('dev_ops/ran_command.prompt', {\r #This code defines a function called `get_prompt` that retrieves and renders a prompt template based on the provided name. It uses Jinja2 to render the templates with no variables, and stores the rendered content in a dictionary called `prompts_components`.\n        'cli_response': 'stdout:\\n```\\nsuccess\\n```',\r\n        'command': './scripts/run_tests',\r\n        'additional_message': 'Some additional message\\n',\r\n        'exit_code': None\r\n    })\r\n\r\n    # Then\r\n    assert prompt == '''\r\nSome additional message\r\n\r\nI ran the command `./scripts/run_tests`. The output was:\r\n\r\nstdout:\r\n```\r\nsuccess\r\n```\r\n\r\nThink about this output and not any output in previous messages. If the command was successfully executed, respond with `DONE`. If it wasn't, respond with `NEEDS_DEBUGGING`.\r\n\r\nDo not respond with anything other than these two keywords.\r\n'''.strip()","documentation":"This code defines a function called `get_prompt` that retrieves and renders a prompt template based on the provided name. It uses Jinja2 to render the templates with no variables, and stores the rendered content in a dictionary called `prompts_components`. The function is used to retrieve a prompt message for a chatbot, which includes a command to be run, the output of the command, and a response based on the exit code of the command."}},{"key":"scip-python python temp indexer `pilot.prompts.test_prompts`/test_prompt_ran_command_0_exit().","attributes":{"range":[29,0,52,11],"symbol":"scip-python python temp indexer `pilot.prompts.test_prompts`/test_prompt_ran_command_0_exit().","content":"def test_prompt_ran_command_0_exit():\r\n    # When\r\n    prompt = get_prompt('dev_ops/ran_command.prompt', {\r\n        'cli_response': 'stdout:\\n```\\nsuccess\\n```',\r\n        'command': './scripts/run_tests',\r\n        'additional_message': 'Some additional message\\n',\r\n        'exit_code': 0\r\n    })\r\n\r\n    # Then\r\n    assert prompt == '''\r\nSome additional message\r\n\r\nI ran the command `./scripts/run_tests`. The output was:\r\n\r\nstdout:\r\n```\r\nsuccess\r\n```\r\n\r\nThink about this output and not any output in previous messages. If the command was successfully executed, respond with `DONE`. If it wasn't, respond with `NEEDS_DEBUGGING`.\r\n\r\nDo not respond with anything other than these two keywords.\r\n'''.strip()","file":"/pilot/prompts/test_prompts.py","language":"python","fileHash":"f55e961eddba1527c0d3a8f2946283c87260c209058bcba65a6d34e09dee7f20","hash":"3bf37e5e3e9d50bf6fb99732c5a603f5d80204391b4cba13362eb3a391edb097","processedContent":"def test_prompt_ran_command_0_exit():\r\n    # When\r\n    prompt = get_prompt('dev_ops/ran_command.prompt', {\r #This code defines a function called `get_prompt` that retrieves and renders a prompt template based on the provided name. It uses Jinja2 to render the templates with no variables, and stores the rendered content in a dictionary called `prompts_components`.\n        'cli_response': 'stdout:\\n```\\nsuccess\\n```',\r\n        'command': './scripts/run_tests',\r\n        'additional_message': 'Some additional message\\n',\r\n        'exit_code': 0\r\n    })\r\n\r\n    # Then\r\n    assert prompt == '''\r\nSome additional message\r\n\r\nI ran the command `./scripts/run_tests`. The output was:\r\n\r\nstdout:\r\n```\r\nsuccess\r\n```\r\n\r\nThink about this output and not any output in previous messages. If the command was successfully executed, respond with `DONE`. If it wasn't, respond with `NEEDS_DEBUGGING`.\r\n\r\nDo not respond with anything other than these two keywords.\r\n'''.strip()","documentation":"This code defines a function called `get_prompt` that retrieves and renders a prompt template based on the provided name. It uses Jinja2 to render the templates with no variables, and stores the rendered content in a dictionary called `prompts_components`. The function is used to generate a response to a user's command, based on the output of the command and the exit code."}},{"key":"scip-python python temp indexer `pilot.prompts.test_prompts`/test_parse_task_no_processes().","attributes":{"range":[55,0,62,50],"symbol":"scip-python python temp indexer `pilot.prompts.test_prompts`/test_parse_task_no_processes().","content":"def test_parse_task_no_processes():\r\n    # When\r\n    prompt = get_prompt('development/parse_task.prompt', {\r\n        'running_processes': {}\r\n    })\r\n\r\n    # Then\r\n    assert 'the following processes' not in prompt","file":"/pilot/prompts/test_prompts.py","language":"python","fileHash":"f55e961eddba1527c0d3a8f2946283c87260c209058bcba65a6d34e09dee7f20","hash":"ec8ef4d284f3e886367841a356b0d99c23ba75dc29dfef1a5cbc1ed23eb78745","processedContent":"def test_parse_task_no_processes():\r\n    # When\r\n    prompt = get_prompt('development/parse_task.prompt', {\r #This code defines a function called `get_prompt` that retrieves and renders a prompt template based on the provided name. It uses Jinja2 to render the templates with no variables, and stores the rendered content in a dictionary called `prompts_components`.\n        'running_processes': {}\r\n    })\r\n\r\n    # Then\r\n    assert 'the following processes' not in prompt","documentation":"This code defines a function called `get_prompt` that retrieves and renders a prompt template based on the provided name. It uses Jinja2 to render the templates with no variables, and stores the rendered content in a dictionary called `prompts_components`."}},{"key":"scip-python python temp indexer `pilot.prompts.test_prompts`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.prompts.test_prompts`/__init__:","range":[0,0,63,0],"content":"from .prompts import get_prompt\r\n\r\n\r\ndef test_prompt_ran_command_None_exit():\r\n    # When\r\n    prompt = get_prompt('dev_ops/ran_command.prompt', {\r\n        'cli_response': 'stdout:\\n```\\nsuccess\\n```',\r\n        'command': './scripts/run_tests',\r\n        'additional_message': 'Some additional message\\n',\r\n        'exit_code': None\r\n    })\r\n\r\n    # Then\r\n    assert prompt == '''\r\nSome additional message\r\n\r\nI ran the command `./scripts/run_tests`. The output was:\r\n\r\nstdout:\r\n```\r\nsuccess\r\n```\r\n\r\nThink about this output and not any output in previous messages. If the command was successfully executed, respond with `DONE`. If it wasn't, respond with `NEEDS_DEBUGGING`.\r\n\r\nDo not respond with anything other than these two keywords.\r\n'''.strip()\r\n\r\n\r\ndef test_prompt_ran_command_0_exit():\r\n    # When\r\n    prompt = get_prompt('dev_ops/ran_command.prompt', {\r\n        'cli_response': 'stdout:\\n```\\nsuccess\\n```',\r\n        'command': './scripts/run_tests',\r\n        'additional_message': 'Some additional message\\n',\r\n        'exit_code': 0\r\n    })\r\n\r\n    # Then\r\n    assert prompt == '''\r\nSome additional message\r\n\r\nI ran the command `./scripts/run_tests`. The output was:\r\n\r\nstdout:\r\n```\r\nsuccess\r\n```\r\n\r\nThink about this output and not any output in previous messages. If the command was successfully executed, respond with `DONE`. If it wasn't, respond with `NEEDS_DEBUGGING`.\r\n\r\nDo not respond with anything other than these two keywords.\r\n'''.strip()\r\n\r\n\r\ndef test_parse_task_no_processes():\r\n    # When\r\n    prompt = get_prompt('development/parse_task.prompt', {\r\n        'running_processes': {}\r\n    })\r\n\r\n    # Then\r\n    assert 'the following processes' not in prompt\r\n","file":"/pilot/prompts/test_prompts.py","language":"python","fileHash":"f55e961eddba1527c0d3a8f2946283c87260c209058bcba65a6d34e09dee7f20","hash":"f55e961eddba1527c0d3a8f2946283c87260c209058bcba65a6d34e09dee7f20","processedContent":"from .prompts import get_prompt\r\n\"\"\"\nscip-python python temp indexer `pilot.prompts.prompts`/__init__:: The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.utils.utils`/get_prompt().: This code defines a function called `get_prompt` that retrieves and renders a prompt template based on the provided name. It uses Jinja2 to render the templates with no variables, and stores the rendered content in a dictionary called `prompts_components`.\n\"\"\"\n\r\n\r\ndef test_prompt_ran_command_None_exit():\r\n    \"\"\"This code defines a function called `get_prompt` that retrieves and renders a prompt template based on the provided name. It uses Jinja2 to render the templates with no variables, and stores the rendered content in a dictionary called `prompts_components`. The function is used to retrieve a prompt message for a chatbot, which includes a command to be run, the output of the command, and a response based on the exit code of the command.\"\"\"\n    pass\n\r\n\r\ndef test_prompt_ran_command_0_exit():\r\n    \"\"\"This code defines a function called `get_prompt` that retrieves and renders a prompt template based on the provided name. It uses Jinja2 to render the templates with no variables, and stores the rendered content in a dictionary called `prompts_components`. The function is used to generate a response to a user's command, based on the output of the command and the exit code.\"\"\"\n    pass\n\r\n\r\ndef test_parse_task_no_processes():\r\n    \"\"\"This code defines a function called `get_prompt` that retrieves and renders a prompt template based on the provided name. It uses Jinja2 to render the templates with no variables, and stores the rendered content in a dictionary called `prompts_components`.\"\"\"\n    pass\n","documentation":"The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model."}},{"key":"scip-python python temp indexer `pilot.steps.architecture.architecture`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.steps.architecture.architecture`/__init__:","range":[0,0,0,0],"content":"","file":"/pilot/steps/architecture/architecture.py","language":"python","fileHash":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855","hash":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855","processedContent":""}},{"key":"scip-python python temp indexer `pilot.test`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.test`/__init__:","range":[0,0,0,0],"content":"","file":"/pilot/test/__init__.py","language":"python","fileHash":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855","hash":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855","processedContent":""}},{"key":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#__init__().","attributes":{"range":[1,4,5,34],"symbol":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#__init__().","content":"def __init__(self, answers=None, initial_state='project_description'):\r\n        if answers is None:\r\n            answers = []\r\n        self.answers = iter(answers)\r\n        self.state = initial_state","file":"/pilot/test/mock_questionary.py","language":"python","fileHash":"28c1a02faa514227838895a5ee4f9e85c6642177152b23eae06edb4615d9f5f9","hash":"667b161da97a5734723a77fa02fd53e1fabe39122f68680b79d7b805e41f47cb","processedContent":"def __init__(self, answers=None, initial_state='project_description'):\r\n        if answers is None:\r\n            answers = []\r\n        self.answers = iter(answers)\r\n        self.state = initial_state","documentation":"This code defines a function that initializes an object with a list of answers and sets the initial state to \"project_description\"."}},{"key":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#Style#","attributes":{"range":[7,4,9,16],"symbol":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#Style#","content":"class Style:\r\n        def __init__(self, *args, **kwargs):\r\n            pass","file":"/pilot/test/mock_questionary.py","language":"python","fileHash":"28c1a02faa514227838895a5ee4f9e85c6642177152b23eae06edb4615d9f5f9","hash":"78f7898eae19e4edb6e9777182e9ca8b0254eae9da3e840c4ebcfef33041475d","processedContent":"class Style:\r\n        def __init__(self, *args, **kwargs):\r\n            pass","documentation":"This code defines a class called \"Style\" that initializes an instance of the class with no arguments."}},{"key":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#Style#__init__().","attributes":{"range":[8,8,9,16],"symbol":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#Style#__init__().","content":"def __init__(self, *args, **kwargs):\r\n            pass","file":"/pilot/test/mock_questionary.py","language":"python","fileHash":"28c1a02faa514227838895a5ee4f9e85c6642177152b23eae06edb4615d9f5f9","hash":"c580a127075d8044f84e6db8e0c918c22bc02d9e00927ac9a972f32d72f6c249","processedContent":"def __init__(self, *args, **kwargs):\r\n            pass","documentation":"This code defines a constructor method for the class, which is used to initialize the object when it is created. It takes in any number of positional arguments and keyword arguments, and does nothing with them."}},{"key":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#text().","attributes":{"range":[11,4,17,19],"symbol":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#text().","content":"def text(self, question: str, style=None):\r\n        print('AI: ' + question)\r\n        if question.startswith('User Story'):\r\n            self.state = 'user_stories'\r\n        elif question.endswith('write \"DONE\"'):\r\n            self.state = 'DONE'\r\n        return self","file":"/pilot/test/mock_questionary.py","language":"python","fileHash":"28c1a02faa514227838895a5ee4f9e85c6642177152b23eae06edb4615d9f5f9","hash":"07900932bede3051259d71e5c5c90964d19c780f89aee6b25269e001e57f3482","processedContent":"def text(self, question: str, style=None):\r\n        print('AI: ' + question)\r\n        if question.startswith('User Story'):\r\n            self.state = 'user_stories'\r #undefined\n        elif question.endswith('write \"DONE\"'):\r\n            self.state = 'DONE'\r #undefined\n        return self","documentation":"This code defines a function called \"text\" that takes in a string parameter called \"question\" and returns an instance of the class. The function prints a message to the console and sets the state of the object to either \"user_stories\" or \"DONE\" depending on the value of the \"question\" parameter."}},{"key":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#ask().","attributes":{"range":[19,4,20,32],"symbol":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#ask().","content":"def ask(self):\r\n        return self.unsafe_ask()","file":"/pilot/test/mock_questionary.py","language":"python","fileHash":"28c1a02faa514227838895a5ee4f9e85c6642177152b23eae06edb4615d9f5f9","hash":"42c9dc765bc1be09f94f8d66539240ad8c3eb4d1bf8c105a77b7444242d7dca0","processedContent":"def ask(self):\r\n        return self.unsafe_ask()","documentation":"This code defines a function called \"ask\" that returns the result of another function called \"unsafe_ask\". The purpose of this code is to provide a way to safely call the \"unsafe_ask\" function while still allowing it to be overridden in subclasses."}},{"key":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#unsafe_ask().","attributes":{"range":[22,4,31,21],"symbol":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#unsafe_ask().","content":"def unsafe_ask(self):\r\n        if self.state == 'user_stories':\r\n            answer = ''\r\n        elif self.state == 'DONE':\r\n            answer = 'DONE'\r\n        else:  # if self.state == 'project_description':\r\n            answer = next(self.answers, '')\r\n\r\n        print('User:', answer)\r\n        return answer","file":"/pilot/test/mock_questionary.py","language":"python","fileHash":"28c1a02faa514227838895a5ee4f9e85c6642177152b23eae06edb4615d9f5f9","hash":"3ff0d04469b8f0ccf8392426540d48d9d09dea90ae9cf8d3e0c5485cd36690ca","processedContent":"def unsafe_ask(self):\r\n        if self.state == 'user_stories':\r #undefined\n            answer = ''\r\n        elif self.state == 'DONE':\r #undefined\n            answer = 'DONE'\r\n        else:  # if self.state == 'project_description':\r\n            answer = next(self.answers, '')\r #undefined\n\r\n        print('User:', answer)\r\n        return answer","documentation":"This code defines a function called `unsafe_ask` that prints a user's response to a question based on the current state of the program. The function checks the current state and returns a predefined answer if it matches one of the defined states, or an empty string otherwise."}},{"key":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#state.","attributes":{"symbol":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#state.","language":"python"}},{"key":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#answers.","attributes":{"symbol":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#answers.","language":"python"}},{"key":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#","attributes":{"range":[4,0,54,81],"symbol":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#","content":"class TestColorStyle(unittest.TestCase):\n    def test_initialization(self):\n        print(\"\\n[INFO] Testing Theme Initialization...\")\n        style_config.set_theme(Theme.DARK)\n        print(f\"[INFO] Set theme to: {Theme.DARK}, Current theme: {style_config.theme}\")\n        self.assertEqual(style_config.theme, Theme.DARK)\n\n        style_config.set_theme(Theme.LIGHT)\n        print(f\"[INFO] Set theme to: {Theme.LIGHT}, Current theme: {style_config.theme}\")\n        self.assertEqual(style_config.theme, Theme.LIGHT)\n\n    def test_color_function(self):\n        dark_color_codes = {\n            ColorName.RED: \"\\x1b[31m\",\n            ColorName.GREEN: \"\\x1b[32m\",\n            # ... other colors\n        }\n        light_color_codes = {\n            ColorName.RED: \"\\x1b[91m\",\n            ColorName.GREEN: \"\\x1b[92m\",\n            # ... other colors\n        }\n        reset = \"\\x1b[0m\"\n\n        # Test DARK theme\n        print(\"\\n[INFO] Testing DARK Theme Colors...\")\n        style_config.set_theme(Theme.DARK)\n        for color_name, code in dark_color_codes.items():\n            with self.subTest(color=color_name):\n                color_func = get_color_function(color_name, bold=False)\n                print(f\"[INFO] Testing color: {color_name}, Expect: {code}Test, Got: {color_func('Test')}\")\n                self.assertEqual(color_func(\"Test\"), f\"{code}Test{reset}\")\n\n                color_func = get_color_function(color_name, bold=True)\n                print(\n                    f\"[INFO] Testing color (bold): {color_name}, Expect: {code}\\x1b[1mTest, Got: {color_func('Test')}\")\n                self.assertEqual(color_func(\"Test\"), f\"{code}\\x1b[1mTest{reset}\")\n\n        # Test LIGHT theme\n        print(\"\\n[INFO] Testing LIGHT Theme Colors...\")\n        style_config.set_theme(Theme.LIGHT)\n        for color_name, code in light_color_codes.items():\n            with self.subTest(color=color_name):\n                color_func = get_color_function(color_name, bold=False)\n                print(f\"[INFO] Testing color: {color_name}, Expect: {code}Test, Got: {color_func('Test')}\")\n                self.assertEqual(color_func(\"Test\"), f\"{code}Test{reset}\")\n\n                color_func = get_color_function(color_name, bold=True)\n                print(\n                    f\"[INFO] Testing color (bold): {color_name}, Expect: {code}\\x1b[1mTest, Got: {color_func('Test')}\")\n                self.assertEqual(color_func(\"Test\"), f\"{code}\\x1b[1mTest{reset}\")","file":"/pilot/test/test_colors.py","language":"python","fileHash":"2be7cf0a60a759148b24924bc581fcc44a3bce403ad0b7d3efce08b36aa687cc","hash":"a012e0976a7c56707765e940d403bd9521b2794d8b6fa62f5bb8fdef6d81552b","processedContent":"class TestColorStyle(unittest.TestCase):\n\"\"\"\nscip-python python python-stdlib 3.11 unittest/__init__:: undefined\nscip-python python temp indexer `unittest.case`/TestCase#: undefined\n\"\"\"\n    def test_initialization(self):\n        \"\"\"The code is testing the initialization of a theme in a style configuration object. It sets the theme to dark and then to light, and asserts that the theme has been updated correctly.\"\"\"\n        pass\n\n    def test_color_function(self):\n        dark_color_codes = {\n            ColorName.RED: \"\\x1b[31m\",\n            ColorName.GREEN: \"\\x1b[32m\",\n            # ... other colors\n        }\n        light_color_codes = {\n            ColorName.RED: \"\\x1b[91m\",\n            ColorName.GREEN: \"\\x1b[92m\",\n            # ... other colors\n        }\n        reset = \"\\x1b[0m\"\n\n        # Test DARK theme\n        print(\"\\n[INFO] Testing DARK Theme Colors...\")\n        style_config.set_theme(Theme.DARK)\n        for color_name, code in dark_color_codes.items():\n            with self.subTest(color=color_name):\n                color_func = get_color_function(color_name, bold=False)\n                print(f\"[INFO] Testing color: {color_name}, Expect: {code}Test, Got: {color_func('Test')}\")\n                self.assertEqual(color_func(\"Test\"), f\"{code}Test{reset}\")\n\n                color_func = get_color_function(color_name, bold=True)\n                print(\n                    f\"[INFO] Testing color (bold): {color_name}, Expect: {code}\\x1b[1mTest, Got: {color_func('Test')}\")\n                self.assertEqual(color_func(\"Test\"), f\"{code}\\x1b[1mTest{reset}\")\n\n        # Test LIGHT theme\n        print(\"\\n[INFO] Testing LIGHT Theme Colors...\")\n        style_config.set_theme(Theme.LIGHT)\n        for color_name, code in light_color_codes.items():\n            with self.subTest(color=color_name):\n                color_func = get_color_function(color_name, bold=False)\n                print(f\"[INFO] Testing color: {color_name}, Expect: {code}Test, Got: {color_func('Test')}\")\n                self.assertEqual(color_func(\"Test\"), f\"{code}Test{reset}\")\n\n                color_func = get_color_function(color_name, bold=True)\n                print(\n                    f\"[INFO] Testing color (bold): {color_name}, Expect: {code}\\x1b[1mTest, Got: {color_func('Test')}\")\n                self.assertEqual(color_func(\"Test\"), f\"{code}\\x1b[1mTest{reset}\")","documentation":"This code is a unit test for a Python module that provides functions to colorize text in the terminal. It tests the functionality of the module by setting the theme to dark and light, and then asserting that the correct color codes are returned for each color."}},{"key":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#test_initialization().","attributes":{"range":[5,4,13,57],"symbol":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#test_initialization().","content":"def test_initialization(self):\n        print(\"\\n[INFO] Testing Theme Initialization...\")\n        style_config.set_theme(Theme.DARK)\n        print(f\"[INFO] Set theme to: {Theme.DARK}, Current theme: {style_config.theme}\")\n        self.assertEqual(style_config.theme, Theme.DARK)\n\n        style_config.set_theme(Theme.LIGHT)\n        print(f\"[INFO] Set theme to: {Theme.LIGHT}, Current theme: {style_config.theme}\")\n        self.assertEqual(style_config.theme, Theme.LIGHT)","file":"/pilot/test/test_colors.py","language":"python","fileHash":"2be7cf0a60a759148b24924bc581fcc44a3bce403ad0b7d3efce08b36aa687cc","hash":"63bda155b272a50a4869ff3d85853ed83b3a583f2f287ccc5ec390ed10401fa3","processedContent":"def test_initialization(self):\n        print(\"\\n[INFO] Testing Theme Initialization...\")\n        style_config.set_theme(Theme.DARK)\n        \"\"\"\n        scip-python python temp indexer `pilot.utils.style`/style_config.: undefined\n        scip-python python temp indexer `pilot.utils.style`/StyleConfig#set_theme().: This code updates the theme of a StyleConfig object by setting its theme attribute to a new value and also updating the theme attribute of its theme_style instance.\n        scip-python python temp indexer `pilot.utils.style`/Theme#: This code defines an Enum class called Theme, which represents themes that can be either DARK or LIGHT.\n        scip-python python temp indexer `pilot.utils.style`/Theme#DARK.: undefined\n        \"\"\"\n        print(f\"[INFO] Set theme to: {Theme.DARK}, Current theme: {style_config.theme}\")\n        \"\"\"\n        scip-python python temp indexer `pilot.utils.style`/style_config.: undefined\n        scip-python python temp indexer `pilot.utils.style`/Theme#: This code defines an Enum class called Theme, which represents themes that can be either DARK or LIGHT.\n        scip-python python temp indexer `pilot.utils.style`/Theme#DARK.: undefined\n        scip-python python temp indexer `pilot.utils.style`/StyleConfig#theme.: undefined\n        \"\"\"\n        self.assertEqual(style_config.theme, Theme.DARK)\n        \"\"\"\n        scip-python python temp indexer `pilot.utils.style`/style_config.: undefined\n        scip-python python temp indexer `pilot.utils.style`/Theme#: This code defines an Enum class called Theme, which represents themes that can be either DARK or LIGHT.\n        scip-python python temp indexer `pilot.utils.style`/Theme#DARK.: undefined\n        scip-python python temp indexer `pilot.utils.style`/StyleConfig#theme.: undefined\n        \"\"\"\n\n        style_config.set_theme(Theme.LIGHT)\n        \"\"\"\n        scip-python python temp indexer `pilot.utils.style`/style_config.: undefined\n        scip-python python temp indexer `pilot.utils.style`/StyleConfig#set_theme().: This code updates the theme of a StyleConfig object by setting its theme attribute to a new value and also updating the theme attribute of its theme_style instance.\n        scip-python python temp indexer `pilot.utils.style`/Theme#: This code defines an Enum class called Theme, which represents themes that can be either DARK or LIGHT.\n        scip-python python temp indexer `pilot.utils.style`/Theme#LIGHT.: undefined\n        \"\"\"\n        print(f\"[INFO] Set theme to: {Theme.LIGHT}, Current theme: {style_config.theme}\")\n        \"\"\"\n        scip-python python temp indexer `pilot.utils.style`/style_config.: undefined\n        scip-python python temp indexer `pilot.utils.style`/Theme#: This code defines an Enum class called Theme, which represents themes that can be either DARK or LIGHT.\n        scip-python python temp indexer `pilot.utils.style`/StyleConfig#theme.: undefined\n        scip-python python temp indexer `pilot.utils.style`/Theme#LIGHT.: undefined\n        \"\"\"\n        self.assertEqual(style_config.theme, Theme.LIGHT)","documentation":"The code is testing the initialization of a theme in a style configuration object. It sets the theme to dark and then to light, and asserts that the theme has been updated correctly."}},{"key":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#test_color_function().","attributes":{"range":[15,4,54,81],"symbol":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#test_color_function().","content":"def test_color_function(self):\n        dark_color_codes = {\n            ColorName.RED: \"\\x1b[31m\",\n            ColorName.GREEN: \"\\x1b[32m\",\n            # ... other colors\n        }\n        light_color_codes = {\n            ColorName.RED: \"\\x1b[91m\",\n            ColorName.GREEN: \"\\x1b[92m\",\n            # ... other colors\n        }\n        reset = \"\\x1b[0m\"\n\n        # Test DARK theme\n        print(\"\\n[INFO] Testing DARK Theme Colors...\")\n        style_config.set_theme(Theme.DARK)\n        for color_name, code in dark_color_codes.items():\n            with self.subTest(color=color_name):\n                color_func = get_color_function(color_name, bold=False)\n                print(f\"[INFO] Testing color: {color_name}, Expect: {code}Test, Got: {color_func('Test')}\")\n                self.assertEqual(color_func(\"Test\"), f\"{code}Test{reset}\")\n\n                color_func = get_color_function(color_name, bold=True)\n                print(\n                    f\"[INFO] Testing color (bold): {color_name}, Expect: {code}\\x1b[1mTest, Got: {color_func('Test')}\")\n                self.assertEqual(color_func(\"Test\"), f\"{code}\\x1b[1mTest{reset}\")\n\n        # Test LIGHT theme\n        print(\"\\n[INFO] Testing LIGHT Theme Colors...\")\n        style_config.set_theme(Theme.LIGHT)\n        for color_name, code in light_color_codes.items():\n            with self.subTest(color=color_name):\n                color_func = get_color_function(color_name, bold=False)\n                print(f\"[INFO] Testing color: {color_name}, Expect: {code}Test, Got: {color_func('Test')}\")\n                self.assertEqual(color_func(\"Test\"), f\"{code}Test{reset}\")\n\n                color_func = get_color_function(color_name, bold=True)\n                print(\n                    f\"[INFO] Testing color (bold): {color_name}, Expect: {code}\\x1b[1mTest, Got: {color_func('Test')}\")\n                self.assertEqual(color_func(\"Test\"), f\"{code}\\x1b[1mTest{reset}\")","file":"/pilot/test/test_colors.py","language":"python","fileHash":"2be7cf0a60a759148b24924bc581fcc44a3bce403ad0b7d3efce08b36aa687cc","hash":"b7173cc4128ba1c8634edee77c73bd3151e1d4e241670a48f4b0e9993dccdfd9","processedContent":"def test_color_function(self):\n        dark_color_codes = {\n            ColorName.RED: \"\\x1b[31m\",\n            \"\"\"\n            scip-python python temp indexer `pilot.utils.style`/ColorName#: This code defines an enumeration called `ColorName` that represents different colors and their corresponding ANSI color codes. The enumeration has six elements, each of which is a tuple containing two values: the normal and light versions of a color.\n            scip-python python temp indexer `pilot.utils.style`/ColorName#RED.: undefined\n            \"\"\"\n            ColorName.GREEN: \"\\x1b[32m\",\n            \"\"\"\n            scip-python python temp indexer `pilot.utils.style`/ColorName#: This code defines an enumeration called `ColorName` that represents different colors and their corresponding ANSI color codes. The enumeration has six elements, each of which is a tuple containing two values: the normal and light versions of a color.\n            scip-python python temp indexer `pilot.utils.style`/ColorName#GREEN.: undefined\n            \"\"\"\n            # ... other colors\n        }\n        light_color_codes = {\n            ColorName.RED: \"\\x1b[91m\",\n            \"\"\"\n            scip-python python temp indexer `pilot.utils.style`/ColorName#: This code defines an enumeration called `ColorName` that represents different colors and their corresponding ANSI color codes. The enumeration has six elements, each of which is a tuple containing two values: the normal and light versions of a color.\n            scip-python python temp indexer `pilot.utils.style`/ColorName#RED.: undefined\n            \"\"\"\n            ColorName.GREEN: \"\\x1b[92m\",\n            \"\"\"\n            scip-python python temp indexer `pilot.utils.style`/ColorName#: This code defines an enumeration called `ColorName` that represents different colors and their corresponding ANSI color codes. The enumeration has six elements, each of which is a tuple containing two values: the normal and light versions of a color.\n            scip-python python temp indexer `pilot.utils.style`/ColorName#GREEN.: undefined\n            \"\"\"\n            # ... other colors\n        }\n        reset = \"\\x1b[0m\"\n\n        # Test DARK theme\n        print(\"\\n[INFO] Testing DARK Theme Colors...\")\n        style_config.set_theme(Theme.DARK)\n        \"\"\"\n        scip-python python temp indexer `pilot.utils.style`/style_config.: undefined\n        scip-python python temp indexer `pilot.utils.style`/StyleConfig#set_theme().: This code updates the theme of a StyleConfig object by setting its theme attribute to a new value and also updating the theme attribute of its theme_style instance.\n        scip-python python temp indexer `pilot.utils.style`/Theme#: This code defines an Enum class called Theme, which represents themes that can be either DARK or LIGHT.\n        scip-python python temp indexer `pilot.utils.style`/Theme#DARK.: undefined\n        \"\"\"\n        for color_name, code in dark_color_codes.items():\n            with self.subTest(color=color_name):\n                color_func = get_color_function(color_name, bold=False) #This code defines a function called `get_color_function` that takes two arguments: `color_name` and `bold`. It returns a function that colorizes text using the provided color name and optionally makes it bold.\n                print(f\"[INFO] Testing color: {color_name}, Expect: {code}Test, Got: {color_func('Test')}\")\n                self.assertEqual(color_func(\"Test\"), f\"{code}Test{reset}\")\n\n                color_func = get_color_function(color_name, bold=True) #This code defines a function called `get_color_function` that takes two arguments: `color_name` and `bold`. It returns a function that colorizes text using the provided color name and optionally makes it bold.\n                print(\n                    f\"[INFO] Testing color (bold): {color_name}, Expect: {code}\\x1b[1mTest, Got: {color_func('Test')}\")\n                self.assertEqual(color_func(\"Test\"), f\"{code}\\x1b[1mTest{reset}\")\n\n        # Test LIGHT theme\n        print(\"\\n[INFO] Testing LIGHT Theme Colors...\")\n        style_config.set_theme(Theme.LIGHT)\n        \"\"\"\n        scip-python python temp indexer `pilot.utils.style`/style_config.: undefined\n        scip-python python temp indexer `pilot.utils.style`/StyleConfig#set_theme().: This code updates the theme of a StyleConfig object by setting its theme attribute to a new value and also updating the theme attribute of its theme_style instance.\n        scip-python python temp indexer `pilot.utils.style`/Theme#: This code defines an Enum class called Theme, which represents themes that can be either DARK or LIGHT.\n        scip-python python temp indexer `pilot.utils.style`/Theme#LIGHT.: undefined\n        \"\"\"\n        for color_name, code in light_color_codes.items():\n            with self.subTest(color=color_name):\n                color_func = get_color_function(color_name, bold=False) #This code defines a function called `get_color_function` that takes two arguments: `color_name` and `bold`. It returns a function that colorizes text using the provided color name and optionally makes it bold.\n                print(f\"[INFO] Testing color: {color_name}, Expect: {code}Test, Got: {color_func('Test')}\")\n                self.assertEqual(color_func(\"Test\"), f\"{code}Test{reset}\")\n\n                color_func = get_color_function(color_name, bold=True) #This code defines a function called `get_color_function` that takes two arguments: `color_name` and `bold`. It returns a function that colorizes text using the provided color name and optionally makes it bold.\n                print(\n                    f\"[INFO] Testing color (bold): {color_name}, Expect: {code}\\x1b[1mTest, Got: {color_func('Test')}\")\n                self.assertEqual(color_func(\"Test\"), f\"{code}\\x1b[1mTest{reset}\")","documentation":"This code defines a function called `get_color_function` that takes two arguments: `color_name` and `bold`. It returns a function that colorizes text using the provided color name and optionally makes it bold. The code also defines an enumeration called `ColorName` that represents different colors and their corresponding ANSI color codes, and tests the functionality of the `get_color_function` function for both DARK and LIGHT themes."}},{"key":"scip-python python temp indexer `pilot.test.test_colors`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.test.test_colors`/__init__:","range":[0,0,55,0],"content":"import unittest\nfrom pilot.utils.style import style_config, Theme, ColorName, get_color_function\n\n\nclass TestColorStyle(unittest.TestCase):\n    def test_initialization(self):\n        print(\"\\n[INFO] Testing Theme Initialization...\")\n        style_config.set_theme(Theme.DARK)\n        print(f\"[INFO] Set theme to: {Theme.DARK}, Current theme: {style_config.theme}\")\n        self.assertEqual(style_config.theme, Theme.DARK)\n\n        style_config.set_theme(Theme.LIGHT)\n        print(f\"[INFO] Set theme to: {Theme.LIGHT}, Current theme: {style_config.theme}\")\n        self.assertEqual(style_config.theme, Theme.LIGHT)\n\n    def test_color_function(self):\n        dark_color_codes = {\n            ColorName.RED: \"\\x1b[31m\",\n            ColorName.GREEN: \"\\x1b[32m\",\n            # ... other colors\n        }\n        light_color_codes = {\n            ColorName.RED: \"\\x1b[91m\",\n            ColorName.GREEN: \"\\x1b[92m\",\n            # ... other colors\n        }\n        reset = \"\\x1b[0m\"\n\n        # Test DARK theme\n        print(\"\\n[INFO] Testing DARK Theme Colors...\")\n        style_config.set_theme(Theme.DARK)\n        for color_name, code in dark_color_codes.items():\n            with self.subTest(color=color_name):\n                color_func = get_color_function(color_name, bold=False)\n                print(f\"[INFO] Testing color: {color_name}, Expect: {code}Test, Got: {color_func('Test')}\")\n                self.assertEqual(color_func(\"Test\"), f\"{code}Test{reset}\")\n\n                color_func = get_color_function(color_name, bold=True)\n                print(\n                    f\"[INFO] Testing color (bold): {color_name}, Expect: {code}\\x1b[1mTest, Got: {color_func('Test')}\")\n                self.assertEqual(color_func(\"Test\"), f\"{code}\\x1b[1mTest{reset}\")\n\n        # Test LIGHT theme\n        print(\"\\n[INFO] Testing LIGHT Theme Colors...\")\n        style_config.set_theme(Theme.LIGHT)\n        for color_name, code in light_color_codes.items():\n            with self.subTest(color=color_name):\n                color_func = get_color_function(color_name, bold=False)\n                print(f\"[INFO] Testing color: {color_name}, Expect: {code}Test, Got: {color_func('Test')}\")\n                self.assertEqual(color_func(\"Test\"), f\"{code}Test{reset}\")\n\n                color_func = get_color_function(color_name, bold=True)\n                print(\n                    f\"[INFO] Testing color (bold): {color_name}, Expect: {code}\\x1b[1mTest, Got: {color_func('Test')}\")\n                self.assertEqual(color_func(\"Test\"), f\"{code}\\x1b[1mTest{reset}\")\n","file":"/pilot/test/test_colors.py","language":"python","fileHash":"2be7cf0a60a759148b24924bc581fcc44a3bce403ad0b7d3efce08b36aa687cc","hash":"2be7cf0a60a759148b24924bc581fcc44a3bce403ad0b7d3efce08b36aa687cc","processedContent":"import unittest #undefined\nfrom pilot.utils.style import style_config, Theme, ColorName, get_color_function\n\"\"\"\nscip-python python temp indexer `pilot.utils.style`/__init__:: This code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.utils.style`/style_config.: undefined\nscip-python python temp indexer `pilot.utils.style`/Theme#: This code defines an Enum class called Theme, which represents themes that can be either DARK or LIGHT.\nscip-python python temp indexer `pilot.utils.style`/ColorName#: This code defines an enumeration called `ColorName` that represents different colors and their corresponding ANSI color codes. The enumeration has six elements, each of which is a tuple containing two values: the normal and light versions of a color.\nscip-python python temp indexer `pilot.utils.style`/get_color_function().: This code defines a function called `get_color_function` that takes two arguments: `color_name` and `bold`. It returns a function that colorizes text using the provided color name and optionally makes it bold.\n\"\"\"\n\n\nclass TestColorStyle(unittest.TestCase):\n    \"\"\"This code is a unit test for a Python module that provides functions to colorize text in the terminal. It tests the functionality of the module by setting the theme to dark and light, and then asserting that the correct color codes are returned for each color.\"\"\"\n    pass\n","documentation":"This code defines a Python module for styling text in the terminal, including functions for colorizing text and setting the theme to dark or light. It also includes unit tests to ensure the functionality of the module."}},{"key":"scip-python python python-stdlib 3.11 unittest/__init__:","attributes":{"symbol":"scip-python python python-stdlib 3.11 unittest/__init__:","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.style`/style_config.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.style`/style_config.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.style`/Theme#","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.style`/Theme#","language":"python","range":[8,0,14,21],"content":"class Theme(Enum):\r\n    \"\"\"\r\n    Enum representing themes, which can be either DARK or LIGHT.\r\n    \"\"\"\r\n    DARK = 'dark'\r\n    LIGHT = 'light'\r\n    YELLOW = 'yellow'","file":"/pilot/utils/style.py","fileHash":"33e7fefaa7ec7f2c2886680d98d91761ef9d5b339dcbe55923c17e4bb3475750","hash":"9683a163acb9220c1e9cefe4f8535907818f155636ff9b47e848637e9b98d292","processedContent":"class Theme(Enum):\r #undefined\n    \"\"\"\r\n    Enum representing themes, which can be either DARK or LIGHT.\r\n    \"\"\"\r\n    DARK = 'dark'\r\n    LIGHT = 'light'\r\n    YELLOW = 'yellow'","documentation":"This code defines an Enum class called Theme, which represents themes that can be either DARK or LIGHT."}},{"key":"scip-python python temp indexer `pilot.utils.style`/ColorName#","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.style`/ColorName#","language":"python","range":[17,0,27,44],"content":"class ColorName(Enum):\r\n    \"\"\"\r\n    Enum representing color names and their corresponding ANSI color codes.\r\n    Each color has a normal and a light version, indicated by the two elements in the tuple.\r\n    \"\"\"\r\n    RED = (Fore.RED, Fore.LIGHTRED_EX)\r\n    GREEN = (Fore.GREEN, Fore.LIGHTGREEN_EX)\r\n    YELLOW = (Fore.YELLOW, Fore.LIGHTYELLOW_EX)\r\n    BLUE = (Fore.BLUE, Fore.LIGHTBLUE_EX)\r\n    CYAN = (Fore.CYAN, Fore.LIGHTCYAN_EX)\r\n    WHITE = (Fore.WHITE, Fore.LIGHTWHITE_EX)","file":"/pilot/utils/style.py","fileHash":"33e7fefaa7ec7f2c2886680d98d91761ef9d5b339dcbe55923c17e4bb3475750","hash":"bd63a8e69017a2fe15b8509fa684c69b2d1987077142867d2cd0fff2628c88ea","processedContent":"class ColorName(Enum):\r #undefined\n    \"\"\"\r\n    Enum representing color names and their corresponding ANSI color codes.\r\n    Each color has a normal and a light version, indicated by the two elements in the tuple.\r\n    \"\"\"\r\n    RED = (Fore.RED, Fore.LIGHTRED_EX)\r\n    \"\"\"\n    scip-python python colorama 0.4.6 `colorama.ansi`/Fore.Fore.: undefined\n    scip-python python colorama 0.4.6 `colorama.ansi`/Fore.Fore.: undefined\n    scip-python python colorama 0.4.6 `colorama.ansi`/AnsiFore#RED.: undefined\n    scip-python python colorama 0.4.6 `colorama.ansi`/AnsiFore#LIGHTRED_EX.: undefined\n    \"\"\"\n    GREEN = (Fore.GREEN, Fore.LIGHTGREEN_EX)\r\n    \"\"\"\n    scip-python python colorama 0.4.6 `colorama.ansi`/Fore.Fore.: undefined\n    scip-python python colorama 0.4.6 `colorama.ansi`/Fore.Fore.: undefined\n    scip-python python colorama 0.4.6 `colorama.ansi`/AnsiFore#GREEN.: undefined\n    scip-python python colorama 0.4.6 `colorama.ansi`/AnsiFore#LIGHTGREEN_EX.: undefined\n    \"\"\"\n    YELLOW = (Fore.YELLOW, Fore.LIGHTYELLOW_EX)\r\n    \"\"\"\n    scip-python python colorama 0.4.6 `colorama.ansi`/Fore.Fore.: undefined\n    scip-python python colorama 0.4.6 `colorama.ansi`/Fore.Fore.: undefined\n    scip-python python colorama 0.4.6 `colorama.ansi`/AnsiFore#YELLOW.: undefined\n    scip-python python colorama 0.4.6 `colorama.ansi`/AnsiFore#LIGHTYELLOW_EX.: undefined\n    \"\"\"\n    BLUE = (Fore.BLUE, Fore.LIGHTBLUE_EX)\r\n    \"\"\"\n    scip-python python colorama 0.4.6 `colorama.ansi`/Fore.Fore.: undefined\n    scip-python python colorama 0.4.6 `colorama.ansi`/Fore.Fore.: undefined\n    scip-python python colorama 0.4.6 `colorama.ansi`/AnsiFore#BLUE.: undefined\n    scip-python python colorama 0.4.6 `colorama.ansi`/AnsiFore#LIGHTBLUE_EX.: undefined\n    \"\"\"\n    CYAN = (Fore.CYAN, Fore.LIGHTCYAN_EX)\r\n    \"\"\"\n    scip-python python colorama 0.4.6 `colorama.ansi`/Fore.Fore.: undefined\n    scip-python python colorama 0.4.6 `colorama.ansi`/Fore.Fore.: undefined\n    scip-python python colorama 0.4.6 `colorama.ansi`/AnsiFore#CYAN.: undefined\n    scip-python python colorama 0.4.6 `colorama.ansi`/AnsiFore#LIGHTCYAN_EX.: undefined\n    \"\"\"\n    WHITE = (Fore.WHITE, Fore.LIGHTWHITE_EX)","documentation":"This code defines an enumeration called `ColorName` that represents different colors and their corresponding ANSI color codes. The enumeration has six elements, each of which is a tuple containing two values: the normal and light versions of a color."}},{"key":"scip-python python temp indexer `pilot.utils.style`/get_color_function().","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.style`/get_color_function().","language":"python","range":[127,0,154,21],"content":"def get_color_function(color_name: ColorName, bold: bool = False):\r\n    \"\"\"\r\n    Returns a function that colorizes text using the provided color_name and optionally makes it bold.\r\n\r\n    Args:\r\n        color_name (ColorName): Enum member indicating the color to use.\r\n        bold (bool, optional): If True, the returned function will bold text. Defaults to False.\r\n\r\n    Returns:\r\n        Callable[[str], str]: A function that takes a string and returns it colorized.\r\n    \"\"\"\r\n\r\n    def color_func(text: str) -> str:\r\n        \"\"\"\r\n        Colorizes the input text using the color and boldness provided when `get_color_function` was called.\r\n\r\n        Args:\r\n            text (str): The text to colorize.\r\n\r\n        Returns:\r\n            str: The colorized text.\r\n        \"\"\"\r\n        color = style_config.get_color(color_name)\r\n        style = ColoramaStyle.BRIGHT if bold else \"\"\r\n        reset = ColoramaStyle.RESET_ALL  # Reset code to reset the color\r\n        return f'{color}{style}{text}{reset}'\r\n\r\n    return color_func","file":"/pilot/utils/style.py","fileHash":"33e7fefaa7ec7f2c2886680d98d91761ef9d5b339dcbe55923c17e4bb3475750","hash":"96febef0a653ae6ed3f960949dca59f76b16fcb409f735fa49a61fe491875fd8","processedContent":"def get_color_function(color_name: ColorName, bold: bool = False):\r #This code defines an enumeration called `ColorName` that represents different colors and their corresponding ANSI color codes. The enumeration has six elements, each of which is a tuple containing two values: the normal and light versions of a color.\n    \"\"\"\r\n    Returns a function that colorizes text using the provided color_name and optionally makes it bold.\r\n\r\n    Args:\r\n        color_name (ColorName): Enum member indicating the color to use.\r\n        bold (bool, optional): If True, the returned function will bold text. Defaults to False.\r\n\r\n    Returns:\r\n        Callable[[str], str]: A function that takes a string and returns it colorized.\r\n    \"\"\"\r\n\r\n    def color_func(text: str) -> str:\r\n        \"\"\"This code defines a function called `color_func` that takes a string as input and returns a colorized version of the string using the ANSI color code for the specified color name, taking into account the current theme.\"\"\"\n        pass\n\r\n    return color_func","documentation":"This code defines a function called `get_color_function` that takes two arguments: `color_name` and `bold`. It returns a function that colorizes text using the provided color name and optionally makes it bold."}},{"key":"scip-python python temp indexer `unittest.case`/TestCase#","attributes":{"symbol":"scip-python python temp indexer `unittest.case`/TestCase#","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#set_theme().","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#set_theme().","language":"python","range":[116,4,124,38],"content":"def set_theme(self, theme: Theme):\r\n        \"\"\"\r\n        Updates the theme of both the StyleConfig and its theme_style instance.\r\n\r\n        Args:\r\n            theme (Theme): Enum member indicating the new theme.\r\n        \"\"\"\r\n        self.theme = theme\r\n        self.theme_style.theme = theme","file":"/pilot/utils/style.py","fileHash":"33e7fefaa7ec7f2c2886680d98d91761ef9d5b339dcbe55923c17e4bb3475750","hash":"229c6947a8c61ac57c92f4fd6f505701ac71efb2714b93b86375cf620b653c6c","processedContent":"def set_theme(self, theme: Theme):\r\n        \"\"\"\r\n        Updates the theme of both the StyleConfig and its theme_style instance.\r\n\r\n        Args:\r\n            theme (Theme): Enum member indicating the new theme.\r\n        \"\"\"\r\n        self.theme = theme\r #undefined\n        self.theme_style.theme = theme","documentation":"This code updates the theme of a StyleConfig object by setting its theme attribute to a new value and also updating the theme attribute of its theme_style instance."}},{"key":"scip-python python temp indexer `pilot.utils.style`/Theme#DARK.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.style`/Theme#DARK.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#theme.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#theme.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.style`/Theme#LIGHT.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.style`/Theme#LIGHT.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.style`/ColorName#RED.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.style`/ColorName#RED.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.style`/ColorName#GREEN.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.style`/ColorName#GREEN.","language":"python"}},{"key":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/database().","attributes":{"range":[25,0,78,34],"symbol":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/database().","content":"@pytest.fixture(autouse=True)\ndef database():\n    \"\"\"\n    Set up a new empty initialized test database.\n\n    In case of SQlite, the database is created in-memory. In case of PostgreSQL,\n    the database should already exist and be empty.\n\n    This fixture will create all the tables and run the test in an isolated transaction.\n    which gets rolled back after the test. The fixture also drops all the tables at the\n    end.\n    \"\"\"\n    if DATABASE_TYPE == \"postgres\":\n        if not DB_NAME:\n            raise ValueError(\n                \"PostgreSQL database name (DB_NAME) environment variable not set\"\n            )\n        db = PostgresqlDatabase(\n            DB_NAME,\n            host=DB_HOST,\n            port=DB_PORT,\n            user=DB_USER,\n            password=DB_PASSWORD,\n        )\n    elif DATABASE_TYPE == \"sqlite\":\n        db = SqliteDatabase(\":memory:\")\n    else:\n        raise ValueError(f\"Unexpected database type: {DATABASE_TYPE}\")\n\n    db.bind(TABLES)\n\n    class PostgresRollback(Exception):\n        \"\"\"\n        Mock exception to ensure rollback after each test.\n\n        Even though we drop the tables at the end of each test, if the test\n        fails due to database integrity error, we have to roll back the\n        transaction otherwise PostgreSQL will refuse any further work.\n\n        The easiest and safest is to always roll back the transaction.\n        \"\"\"\n\n        pass\n\n    with db:\n        try:\n            db.create_tables(TABLES)\n            with db.atomic():\n                yield db\n                raise PostgresRollback()\n        except PostgresRollback:\n            pass\n        finally:\n            db.drop_tables(TABLES)","file":"/pilot/test/database/test_file_snapshot.py","language":"python","fileHash":"9169dd34c2e394eb1bed988518d0ef37ec207e3d42ea69de4560662d36d1292c","hash":"5e8e5449c06bf6b5adb57a7b607dd3724800589b72b12c8448c17267d25f1a3c","processedContent":"@pytest.fixture(autouse=True)\ndef database():\n    \"\"\"\n    Set up a new empty initialized test database.\n\n    In case of SQlite, the database is created in-memory. In case of PostgreSQL,\n    the database should already exist and be empty.\n\n    This fixture will create all the tables and run the test in an isolated transaction.\n    which gets rolled back after the test. The fixture also drops all the tables at the\n    end.\n    \"\"\"\n    if DATABASE_TYPE == \"postgres\": #undefined\n        if not DB_NAME: #undefined\n            raise ValueError(\n                \"PostgreSQL database name (DB_NAME) environment variable not set\"\n            )\n        db = PostgresqlDatabase(\n            DB_NAME, #undefined\n            host=DB_HOST, #undefined\n            port=DB_PORT, #undefined\n            user=DB_USER, #undefined\n            password=DB_PASSWORD, #undefined\n        )\n    elif DATABASE_TYPE == \"sqlite\": #undefined\n        db = SqliteDatabase(\":memory:\")\n    else:\n        raise ValueError(f\"Unexpected database type: {DATABASE_TYPE}\") #undefined\n\n    db.bind(TABLES) #undefined\n\n    class PostgresRollback(Exception):\n        \"\"\"This code defines a custom exception class called `PostgresRollback` that is used to ensure that the database transaction is rolled back after each test, even if the test fails due to database integrity errors.\"\"\"\n        pass\n\n    with db:\n        try:\n            db.create_tables(TABLES) #undefined\n            with db.atomic():\n                yield db\n                raise PostgresRollback() #This code defines a custom exception class called `PostgresRollback` that is used to ensure that the database transaction is rolled back after each test, even if the test fails due to database integrity errors.\n        except PostgresRollback: #This code defines a custom exception class called `PostgresRollback` that is used to ensure that the database transaction is rolled back after each test, even if the test fails due to database integrity errors.\n            pass\n        finally:\n            db.drop_tables(TABLES)","documentation":"This code sets up a test database for a Python application using the `peewee` ORM. It creates a new empty database, runs the tests in an isolated transaction, and rolls back the transaction after each test to ensure data integrity."}},{"key":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/database().PostgresRollback#","attributes":{"range":[56,4,67,12],"symbol":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/database().PostgresRollback#","content":"class PostgresRollback(Exception):\n        \"\"\"\n        Mock exception to ensure rollback after each test.\n\n        Even though we drop the tables at the end of each test, if the test\n        fails due to database integrity error, we have to roll back the\n        transaction otherwise PostgreSQL will refuse any further work.\n\n        The easiest and safest is to always roll back the transaction.\n        \"\"\"\n\n        pass","file":"/pilot/test/database/test_file_snapshot.py","language":"python","fileHash":"9169dd34c2e394eb1bed988518d0ef37ec207e3d42ea69de4560662d36d1292c","hash":"6af82c194ce21e84954edae63a4629e2c26d186f5d017dff235cd948996680b0","processedContent":"class PostgresRollback(Exception):\n        \"\"\"\n        Mock exception to ensure rollback after each test.\n\n        Even though we drop the tables at the end of each test, if the test\n        fails due to database integrity error, we have to roll back the\n        transaction otherwise PostgreSQL will refuse any further work.\n\n        The easiest and safest is to always roll back the transaction.\n        \"\"\"\n\n        pass","documentation":"This code defines a custom exception class called `PostgresRollback` that is used to ensure that the database transaction is rolled back after each test, even if the test fails due to database integrity errors."}},{"key":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/test_create_tables().","attributes":{"range":[81,0,90,50],"symbol":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/test_create_tables().","content":"def test_create_tables(database):\n    \"\"\"\n    Test that database tables are created for all the models.\n    \"\"\"\n    from database.database import TABLES\n\n    with database:\n        tables = database.get_tables()\n        expected_tables = [table._meta.table_name for table in TABLES]\n        assert set(tables) == set(expected_tables)","file":"/pilot/test/database/test_file_snapshot.py","language":"python","fileHash":"9169dd34c2e394eb1bed988518d0ef37ec207e3d42ea69de4560662d36d1292c","hash":"3a98cdf0a5bff5c39b174558a15f035ea25c3cc94a175290febabbabd8857a99","processedContent":"def test_create_tables(database):\n    \"\"\"\n    Test that database tables are created for all the models.\n    \"\"\"\n    from database.database import TABLES\n    \"\"\"\n    scip-python python temp indexer `pilot.database.database`/__init__:: The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\n    scip-python python temp indexer `pilot.database.database`/TABLES.: undefined\n    \"\"\"\n\n    with database:\n        tables = database.get_tables()\n        expected_tables = [table._meta.table_name for table in TABLES] #undefined\n        assert set(tables) == set(expected_tables)","documentation":"This code tests that the database tables are created for all the models in the `TABLES` list."}},{"key":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/test_file_snapshot().","attributes":{"range":[93,0,115,46],"symbol":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/test_file_snapshot().","content":"@pytest.mark.parametrize(\n    (\"content\", \"expected_content\"),\n    [\n        (\"ascii text\", \"ascii text\"),\n        (\"non-ascii text: ščćž\", \"non-ascii text: ščćž\"),\n        (\"with null byte \\0\", \"with null byte \\0\"),\n        (EMPTY_PNG, EMPTY_PNG),\n    ],\n)\ndef test_file_snapshot(content, expected_content):\n    user = User.create(email=\"\", password=\"\")\n    app = App.create(user=user)\n    step = DevelopmentSteps.create(app=app, llm_response={})\n    file = File.create(app=app, name=\"test\", path=\"test\", full_path=\"test\")\n\n    fs = FileSnapshot.create(\n        app=app,\n        development_step=step,\n        file=file,\n        content=content,\n    )\n    from_db = FileSnapshot.get(id=fs.id)\n    assert from_db.content == expected_content","file":"/pilot/test/database/test_file_snapshot.py","language":"python","fileHash":"9169dd34c2e394eb1bed988518d0ef37ec207e3d42ea69de4560662d36d1292c","hash":"dd089abc3b5326cebb731a9c1998cadd2d42429b2c257c1378c7475d9eb993ef","processedContent":"@pytest.mark.parametrize(\n    (\"content\", \"expected_content\"),\n    [\n        (\"ascii text\", \"ascii text\"),\n        (\"non-ascii text: ščćž\", \"non-ascii text: ščćž\"),\n        (\"with null byte \\0\", \"with null byte \\0\"),\n        (EMPTY_PNG, EMPTY_PNG),\n        \"\"\"\n        scip-python python temp indexer `pilot.test.database.test_file_snapshot`/EMPTY_PNG.: undefined\n        scip-python python temp indexer `pilot.test.database.test_file_snapshot`/EMPTY_PNG.: undefined\n        \"\"\"\n    ],\n)\ndef test_file_snapshot(content, expected_content):\n    user = User.create(email=\"\", password=\"\") #This code defines a base model class for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The Meta class sets the database to be used.\n    app = App.create(user=user) #This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n    step = DevelopmentSteps.create(app=app, llm_response={}) #This code defines a model for the development steps table in the database. It includes fields for an ID, creation and update timestamps, and a foreign key to the app entity. The model also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\n    file = File.create(app=app, name=\"test\", path=\"test\", full_path=\"test\") #This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n\n    fs = FileSnapshot.create( #This code defines a model for a file snapshot entity in a database, with fields for an ID, creation and update timestamps, and foreign keys to other entities such as apps, development steps, and files. It also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\n        app=app,\n        development_step=step,\n        file=file,\n        content=content,\n    )\n    from_db = FileSnapshot.get(id=fs.id) #This code defines a model for a file snapshot entity in a database, with fields for an ID, creation and update timestamps, and foreign keys to other entities such as apps, development steps, and files. It also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\n    assert from_db.content == expected_content","documentation":"The code defines a model for a file snapshot entity in a database, with fields for an ID, creation and update timestamps, and foreign keys to other entities such as apps, development steps, and files. It also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field."}},{"key":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/__init__:","range":[0,0,116,0],"content":"from base64 import b64decode\n\nfrom peewee import SqliteDatabase, PostgresqlDatabase\nimport pytest\n\nfrom database.config import (\n    DATABASE_TYPE,\n    DB_NAME,\n    DB_HOST,\n    DB_PORT,\n    DB_USER,\n    DB_PASSWORD,\n)\nfrom database.database import TABLES\nfrom database.models.user import User\nfrom database.models.app import App\nfrom database.models.file_snapshot import FileSnapshot\nfrom database.models.files import File\nfrom database.models.development_steps import DevelopmentSteps\n\nEMPTY_PNG = b64decode(\n    \"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==\"\n)\n\n\n@pytest.fixture(autouse=True)\ndef database():\n    \"\"\"\n    Set up a new empty initialized test database.\n\n    In case of SQlite, the database is created in-memory. In case of PostgreSQL,\n    the database should already exist and be empty.\n\n    This fixture will create all the tables and run the test in an isolated transaction.\n    which gets rolled back after the test. The fixture also drops all the tables at the\n    end.\n    \"\"\"\n    if DATABASE_TYPE == \"postgres\":\n        if not DB_NAME:\n            raise ValueError(\n                \"PostgreSQL database name (DB_NAME) environment variable not set\"\n            )\n        db = PostgresqlDatabase(\n            DB_NAME,\n            host=DB_HOST,\n            port=DB_PORT,\n            user=DB_USER,\n            password=DB_PASSWORD,\n        )\n    elif DATABASE_TYPE == \"sqlite\":\n        db = SqliteDatabase(\":memory:\")\n    else:\n        raise ValueError(f\"Unexpected database type: {DATABASE_TYPE}\")\n\n    db.bind(TABLES)\n\n    class PostgresRollback(Exception):\n        \"\"\"\n        Mock exception to ensure rollback after each test.\n\n        Even though we drop the tables at the end of each test, if the test\n        fails due to database integrity error, we have to roll back the\n        transaction otherwise PostgreSQL will refuse any further work.\n\n        The easiest and safest is to always roll back the transaction.\n        \"\"\"\n\n        pass\n\n    with db:\n        try:\n            db.create_tables(TABLES)\n            with db.atomic():\n                yield db\n                raise PostgresRollback()\n        except PostgresRollback:\n            pass\n        finally:\n            db.drop_tables(TABLES)\n\n\ndef test_create_tables(database):\n    \"\"\"\n    Test that database tables are created for all the models.\n    \"\"\"\n    from database.database import TABLES\n\n    with database:\n        tables = database.get_tables()\n        expected_tables = [table._meta.table_name for table in TABLES]\n        assert set(tables) == set(expected_tables)\n\n\n@pytest.mark.parametrize(\n    (\"content\", \"expected_content\"),\n    [\n        (\"ascii text\", \"ascii text\"),\n        (\"non-ascii text: ščćž\", \"non-ascii text: ščćž\"),\n        (\"with null byte \\0\", \"with null byte \\0\"),\n        (EMPTY_PNG, EMPTY_PNG),\n    ],\n)\ndef test_file_snapshot(content, expected_content):\n    user = User.create(email=\"\", password=\"\")\n    app = App.create(user=user)\n    step = DevelopmentSteps.create(app=app, llm_response={})\n    file = File.create(app=app, name=\"test\", path=\"test\", full_path=\"test\")\n\n    fs = FileSnapshot.create(\n        app=app,\n        development_step=step,\n        file=file,\n        content=content,\n    )\n    from_db = FileSnapshot.get(id=fs.id)\n    assert from_db.content == expected_content\n","file":"/pilot/test/database/test_file_snapshot.py","language":"python","fileHash":"9169dd34c2e394eb1bed988518d0ef37ec207e3d42ea69de4560662d36d1292c","hash":"9169dd34c2e394eb1bed988518d0ef37ec207e3d42ea69de4560662d36d1292c","processedContent":"from base64 import b64decode\n\"\"\"\nscip-python python python-stdlib 3.11 base64/__init__:: undefined\nscip-python python python-stdlib 3.11 base64/b64decode().: undefined\n\"\"\"\n\nfrom peewee import SqliteDatabase, PostgresqlDatabase #undefined\nimport pytest\n\nfrom database.config import ( #The code defines environment variables for a database connection, using the `os.getenv()` function to retrieve the values from the operating system environment.\n    DATABASE_TYPE, #undefined\n    DB_NAME, #undefined\n    DB_HOST, #undefined\n    DB_PORT, #undefined\n    DB_USER, #undefined\n    DB_PASSWORD, #undefined\n)\nfrom database.database import TABLES\n\"\"\"\nscip-python python temp indexer `pilot.database.database`/__init__:: The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.database.database`/TABLES.: undefined\n\"\"\"\nfrom database.models.user import User\n\"\"\"\nscip-python python temp indexer `pilot.database.models.user`/__init__:: The code defines a base model class for a database and a user entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used.\nscip-python python temp indexer `pilot.database.models.user`/User#: This code defines a base model class for a user entity, with fields for an email address and password, as well as timestamps for creation and update. The Meta class sets the database to be used.\n\"\"\"\nfrom database.models.app import App\n\"\"\"\nscip-python python temp indexer `pilot.database.models.app`/__init__:: The code defines a base model class for an application, with fields for a user ID, app type, name, and status. It also includes a ForeignKeyField to the User model and a CharField for each of these fields.\nscip-python python temp indexer `pilot.database.models.app`/App#: This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n\"\"\"\nfrom database.models.file_snapshot import FileSnapshot\n\"\"\"\nscip-python python temp indexer `pilot.database.models.file_snapshot`/__init__:: The code defines a base model class for a database, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes functions to create a PostgreSQL or SQLite database connection based on the environment variable `DATABASE_TYPE`.\nscip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#: This code defines a model for a file snapshot entity in a database, with fields for an ID, creation and update timestamps, and foreign keys to other entities such as apps, development steps, and files. It also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\n\"\"\"\nfrom database.models.files import File\n\"\"\"\nscip-python python temp indexer `pilot.database.models.files`/__init__:: The code defines a base model class for an app entity with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\nscip-python python temp indexer `pilot.database.models.files`/File#: This code defines a base model class for an app entity, with fields for an ID, creation and update timestamps, and a Meta class that sets the database to be used. It also includes fields for a user entity, with fields for an email address and password, as well as timestamps for creation and update.\n\"\"\"\nfrom database.models.development_steps import DevelopmentSteps\n\"\"\"\nscip-python python temp indexer `pilot.database.models.development_steps`/__init__:: The code defines a model for the development steps table in a database, with fields for an ID, creation and update timestamps, and a foreign key to the app entity. It also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\nscip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#: This code defines a model for the development steps table in the database. It includes fields for an ID, creation and update timestamps, and a foreign key to the app entity. The model also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\n\"\"\"\n\nEMPTY_PNG = b64decode( #undefined\n    \"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==\"\n)\n\n\n@pytest.fixture(autouse=True)\ndef database():\n    \"\"\"This code sets up a test database for a Python application using the `peewee` ORM. It creates a new empty database, runs the tests in an isolated transaction, and rolls back the transaction after each test to ensure data integrity.\"\"\"\n    pass\n\n\ndef test_create_tables(database):\n    \"\"\"This code tests that the database tables are created for all the models in the `TABLES` list.\"\"\"\n    pass\n\n\n@pytest.mark.parametrize(\n    (\"content\", \"expected_content\"),\n    [\n        (\"ascii text\", \"ascii text\"),\n        (\"non-ascii text: ščćž\", \"non-ascii text: ščćž\"),\n        (\"with null byte \\0\", \"with null byte \\0\"),\n        (EMPTY_PNG, EMPTY_PNG),\n    ],\n)\ndef test_file_snapshot(content, expected_content):\n    \"\"\"The code defines a model for a file snapshot entity in a database, with fields for an ID, creation and update timestamps, and foreign keys to other entities such as apps, development steps, and files. It also includes custom JSON fields for storing and retrieving data, as well as a previous step foreign key and a high-level step field.\"\"\"\n    pass\n","documentation":"The code defines a Python application that uses the `peewee` ORM to interact with a database. It includes models for user, app, file snapshot, and development steps entities, as well as functions for creating and retrieving data."}},{"key":"scip-python python python-stdlib 3.11 base64/__init__:","attributes":{"symbol":"scip-python python python-stdlib 3.11 base64/__init__:","language":"python"}},{"key":"scip-python python python-stdlib 3.11 base64/b64decode().","attributes":{"symbol":"scip-python python python-stdlib 3.11 base64/b64decode().","language":"python"}},{"key":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/EMPTY_PNG.","attributes":{"symbol":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/EMPTY_PNG.","language":"python"}},{"key":"scip-python python temp indexer `pilot.test.helpers`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.test.helpers`/__init__:","range":[0,0,0,0],"content":"","file":"/pilot/test/helpers/__init__.py","language":"python","fileHash":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855","hash":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855","processedContent":""}},{"key":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_update_file_creates_directories().","attributes":{"range":[10,0,17,71],"symbol":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_update_file_creates_directories().","content":"@patch(\"pilot.helpers.files.open\")\n@patch(\"pilot.helpers.files.os\")\ndef test_update_file_creates_directories(mock_os, mock_open):\n    \"\"\"Test that update_file creates intermediate directories if they don't exist.\"\"\"\n\n    mock_os.path.dirname = os.path.dirname\n    update_file(\"/path/to/file\", \"content\")\n    mock_os.makedirs.assert_called_once_with(\"/path/to\", exist_ok=True)","file":"/pilot/test/helpers/test_files.py","language":"python","fileHash":"a2232425db843768e810ae759d77ec48b6c69bc71272d0cae198bd7325a6e305","hash":"b52b536ee3794937380ad2b8239ccff1c6a790de8933621a3e932a4a3ef99d84","processedContent":"@patch(\"pilot.helpers.files.open\")\n@patch(\"pilot.helpers.files.os\")\ndef test_update_file_creates_directories(mock_os, mock_open):\n    \"\"\"Test that update_file creates intermediate directories if they don't exist.\"\"\"\n\n    mock_os.path.dirname = os.path.dirname\n    \"\"\"\n    scip-python python python-stdlib 3.11 os/__init__:: undefined\n    scip-python python python-stdlib 3.11 os/path.: undefined\n    scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n    \"\"\"\n    update_file(\"/path/to/file\", \"content\") #This code updates a file with new content. It creates any necessary intermediate directories, writes the file using UTF-8 encoding if it's text, and prints a success message.\n    mock_os.makedirs.assert_called_once_with(\"/path/to\", exist_ok=True)","documentation":"This code tests the `update_file` function, which updates a file with new content. It creates any necessary intermediate directories and writes the file using UTF-8 encoding if it's text."}},{"key":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_update_file_creates_text_file().","attributes":{"range":[20,0,27,85],"symbol":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_update_file_creates_text_file().","content":"@patch(\"pilot.helpers.files.open\")\n@patch(\"pilot.helpers.files.os\")\ndef test_update_file_creates_text_file(mock_os, mock_open):\n    \"\"\"Test that update_file creates intermediate directories if they don't exist.\"\"\"\n\n    update_file(\"/path/to/file\", \"無為\")\n    mock_open.assert_called_once_with(\"/path/to/file\", \"w\", encoding=\"utf-8\")\n    mock_open.return_value.__enter__.return_value.write.assert_called_once_with(\"無為\")","file":"/pilot/test/helpers/test_files.py","language":"python","fileHash":"a2232425db843768e810ae759d77ec48b6c69bc71272d0cae198bd7325a6e305","hash":"c0a9ad25df70c80b7801dffd33ed9f339e3c5c2270ed16ebca53e2d0bc377d92","processedContent":"@patch(\"pilot.helpers.files.open\")\n@patch(\"pilot.helpers.files.os\")\ndef test_update_file_creates_text_file(mock_os, mock_open):\n    \"\"\"Test that update_file creates intermediate directories if they don't exist.\"\"\"\n\n    update_file(\"/path/to/file\", \"無為\") #This code updates a file with new content. It creates any necessary intermediate directories, writes the file using UTF-8 encoding if it's text, and prints a success message.\n    mock_open.assert_called_once_with(\"/path/to/file\", \"w\", encoding=\"utf-8\")\n    mock_open.return_value.__enter__.return_value.write.assert_called_once_with(\"無為\")","documentation":"This code tests the `update_file` function by mocking the `open` and `os` modules. It creates a mock file object and checks if it was called with the correct parameters and if the file was written with the correct content."}},{"key":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_update_file_creates_binary_file().","attributes":{"range":[30,0,37,96],"symbol":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_update_file_creates_binary_file().","content":"@patch(\"pilot.helpers.files.open\")\n@patch(\"pilot.helpers.files.os\")\ndef test_update_file_creates_binary_file(mock_os, mock_open):\n    \"\"\"Test that update_file creates intermediate directories if they don't exist.\"\"\"\n\n    update_file(\"/path/to/file\", b\"\\x00\\x00\\x00\")\n    mock_open.assert_called_once_with(\"/path/to/file\", \"wb\", encoding=None)\n    mock_open.return_value.__enter__.return_value.write.assert_called_once_with(b\"\\x00\\x00\\x00\")","file":"/pilot/test/helpers/test_files.py","language":"python","fileHash":"a2232425db843768e810ae759d77ec48b6c69bc71272d0cae198bd7325a6e305","hash":"156448321fbba440bd2463a7680ba1ecbd3e071cddf188d77267453bd00b7804","processedContent":"@patch(\"pilot.helpers.files.open\")\n@patch(\"pilot.helpers.files.os\")\ndef test_update_file_creates_binary_file(mock_os, mock_open):\n    \"\"\"Test that update_file creates intermediate directories if they don't exist.\"\"\"\n\n    update_file(\"/path/to/file\", b\"\\x00\\x00\\x00\") #This code updates a file with new content. It creates any necessary intermediate directories, writes the file using UTF-8 encoding if it's text, and prints a success message.\n    mock_open.assert_called_once_with(\"/path/to/file\", \"wb\", encoding=None)\n    mock_open.return_value.__enter__.return_value.write.assert_called_once_with(b\"\\x00\\x00\\x00\")","documentation":"This code updates a file with new content, creating any necessary intermediate directories and writing the file using UTF-8 encoding if it's text."}},{"key":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_update_file_with_encoded_content().","attributes":{"range":[40,0,57,24],"symbol":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_update_file_with_encoded_content().","content":"@pytest.mark.parametrize(\n    (\"source\", \"expected_encoded\"),\n    [\n        (\"file.txt\", b\"file.txt\"),\n        (\"foo.txt - 無為\", b\"foo.txt - \\xe7\\x84\\xa1\\xe7\\x82\\xba\"),\n        (b\"\\xff\\xff\\xff\", b\"\\xff\\xff\\xff\"),\n    ],\n)\ndef test_update_file_with_encoded_content(source, expected_encoded):\n    # Can't use NamedTemporaryFile this as a context manager because Windows\n    # doesn't allow O_TEMPORARY files (with delete=True) to be opened\n    # twice, defeating the purpose.\n    file = NamedTemporaryFile(delete=False)\n    update_file(file.name, source)\n    assert file.read() == expected_encoded\n\n    file.close()\n    os.remove(file.name)","file":"/pilot/test/helpers/test_files.py","language":"python","fileHash":"a2232425db843768e810ae759d77ec48b6c69bc71272d0cae198bd7325a6e305","hash":"e9338022f195389f9f73ee60d6b22210dc01553ebaba5ec0d5e935b87872fe98","processedContent":"@pytest.mark.parametrize(\n    (\"source\", \"expected_encoded\"),\n    [\n        (\"file.txt\", b\"file.txt\"),\n        (\"foo.txt - 無為\", b\"foo.txt - \\xe7\\x84\\xa1\\xe7\\x82\\xba\"),\n        (b\"\\xff\\xff\\xff\", b\"\\xff\\xff\\xff\"),\n    ],\n)\ndef test_update_file_with_encoded_content(source, expected_encoded):\n    # Can't use NamedTemporaryFile this as a context manager because Windows\n    # doesn't allow O_TEMPORARY files (with delete=True) to be opened\n    # twice, defeating the purpose.\n    file = NamedTemporaryFile(delete=False) #undefined\n    update_file(file.name, source)\n    \"\"\"\n    scip-python python temp indexer `pilot.helpers.files`/update_file().: This code updates a file with new content. It creates any necessary intermediate directories, writes the file using UTF-8 encoding if it's text, and prints a success message.\n    scip-python python python-stdlib 3.11 tempfile/_TemporaryFileWrapper#name.: undefined\n    \"\"\"\n    assert file.read() == expected_encoded #undefined\n\n    file.close() #undefined\n    os.remove(file.name)","documentation":"This code updates a file with new content using UTF-8 encoding if it's text, and prints a success message."}},{"key":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_get_file_contents().","attributes":{"range":[59,0,81,24],"symbol":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_get_file_contents().","content":"@pytest.mark.parametrize(\n    (\"encoded\", \"expected\"),\n    [\n        (b\"file.txt\", \"file.txt\"),\n        (b\"foo.txt - \\xe7\\x84\\xa1\\xe7\\x82\\xba\", \"foo.txt - 無為\"),\n        (b\"\\xff\\xff\\xff\", b\"\\xff\\xff\\xff\"),\n    ],\n)\ndef test_get_file_contents(encoded, expected):\n    file = NamedTemporaryFile(delete=False)\n    file.write(encoded)\n    file.flush()\n\n    file_path = Path(file.name)\n    data = get_file_contents(file.name, file_path.anchor)\n    assert data == {\n        \"content\": expected,\n        \"name\": file_path.name,\n        \"path\": str(file_path.parent.relative_to(file_path.anchor)),\n        \"full_path\": file.name,\n    }\n    file.close()\n    os.remove(file.name)","file":"/pilot/test/helpers/test_files.py","language":"python","fileHash":"a2232425db843768e810ae759d77ec48b6c69bc71272d0cae198bd7325a6e305","hash":"6e5fe06a01b251907aa7396d3f4255d906a5e793613592064cd633fc19027bc8","processedContent":"@pytest.mark.parametrize(\n    (\"encoded\", \"expected\"),\n    [\n        (b\"file.txt\", \"file.txt\"),\n        (b\"foo.txt - \\xe7\\x84\\xa1\\xe7\\x82\\xba\", \"foo.txt - 無為\"),\n        (b\"\\xff\\xff\\xff\", b\"\\xff\\xff\\xff\"),\n    ],\n)\ndef test_get_file_contents(encoded, expected):\n    file = NamedTemporaryFile(delete=False) #undefined\n    file.write(encoded) #undefined\n    file.flush() #undefined\n\n    file_path = Path(file.name)\n    \"\"\"\n    scip-python python python-stdlib 3.11 pathlib/Path#: undefined\n    scip-python python python-stdlib 3.11 tempfile/_TemporaryFileWrapper#name.: undefined\n    \"\"\"\n    data = get_file_contents(file.name, file_path.anchor)\n    \"\"\"\n    scip-python python python-stdlib 3.11 tempfile/_TemporaryFileWrapper#name.: undefined\n    scip-python python temp indexer `pilot.helpers.files`/get_file_contents().: This code defines a function called `get_file_contents` that takes two parameters: `path` and `project_root_path`. It returns an object with four keys: `name`, `path`, `content`, and `full_path`. The function first tries to read the file using UTF-8 encoding, but if that fails, it treats the file as a binary file. It then returns the file name, relative path, content (as a string or bytes object), and full path as values in the object.\n    scip-python python python-stdlib 3.11 pathlib/PurePath#anchor().: undefined\n    \"\"\"\n    assert data == {\n        \"content\": expected,\n        \"name\": file_path.name, #undefined\n        \"path\": str(file_path.parent.relative_to(file_path.anchor)),\n        \"\"\"\n        scip-python python python-stdlib 3.11 pathlib/PurePath#anchor().: undefined\n        scip-python python python-stdlib 3.11 pathlib/PurePath#parent().: undefined\n        scip-python python python-stdlib 3.11 pathlib/PurePath#relative_to().: undefined\n        \"\"\"\n        \"full_path\": file.name, #undefined\n    }\n    file.close() #undefined\n    os.remove(file.name)","documentation":"This code defines a function called `get_file_contents` that reads the contents of a file and returns an object with four keys: `name`, `path`, `content`, and `full_path`. The function first tries to read the file using UTF-8 encoding, but if that fails, it treats the file as a binary file."}},{"key":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_get_directory_contents_mocked().","attributes":{"range":[83,0,145,5],"symbol":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_get_directory_contents_mocked().","content":"@patch(\"pilot.helpers.files.open\")\n@patch(\"pilot.helpers.files.os\")\ndef test_get_directory_contents_mocked(mock_os, mock_open):\n    \"\"\"\n    Test that get_directory_contents traverses the directory tree,\n    ignores specified ignore files/folders, and can handle both\n    text and binary files.\n    \"\"\"\n\n    # Normalize path to use correct path separators\n    def np(path: str) -> str:\n        return str(Path(path))\n\n    mock_os.path.join = os.path.join\n    mock_os.path.basename = os.path.basename\n\n    mock_walk = mock_os.walk\n    mock_walk.return_value = [\n        (np(\"/fake/root\"), [\"foo\", \"to-ignore\", \"bar\"], [\"file.txt\", \"to-ignore.txt\"]),\n        (np(\"/fake/root/foo\"), [], [\"foo.txt\"]),\n        (np(\"/fake/root/bar\"), [], [\"bar.txt\"]),\n    ]\n    mock_open.return_value.read.side_effect = [\n        \"file.txt\",\n        \"foo.txt - 無為\",\n        UnicodeDecodeError(\"utf-8\", b\"\\xff\\xff\\xff\", 0, 1, \"invalid start byte\"),\n        b\"\\xff\\xff\\xff\",\n    ]\n\n    data = get_directory_contents(np(\"/fake/root\"), [\"to-ignore\", \"to-ignore.txt\"])\n    assert data == [\n        {\n            \"content\": \"file.txt\",\n            \"full_path\": np(\"/fake/root/file.txt\"),\n            \"name\": \"file.txt\",\n            \"path\": \"\",\n        },\n        {\n            \"content\": \"foo.txt - 無為\",\n            \"full_path\": np(\"/fake/root/foo/foo.txt\"),\n            \"name\": \"foo.txt\",\n            \"path\": \"foo\",\n        },\n        {\n            \"content\": b\"\\xff\\xff\\xff\",\n            \"full_path\": np(\"/fake/root/bar/bar.txt\"),\n            \"name\": \"bar.txt\",\n            \"path\": \"bar\",\n        },\n    ]\n    mock_walk.assert_called_once_with(np(\"/fake/root\"))\n    mock_open.assert_has_calls(\n        [\n            call(np(\"/fake/root/file.txt\"), \"r\", encoding=\"utf-8\"),\n            call().read(),\n            call(np(\"/fake/root/foo/foo.txt\"), \"r\", encoding=\"utf-8\"),\n            call().read(),\n            call(np(\"/fake/root/bar/bar.txt\"), \"r\", encoding=\"utf-8\"),\n            call().read(),\n            call(np(\"/fake/root/bar/bar.txt\"), \"rb\"),\n            call().read(),\n        ]\n    )","file":"/pilot/test/helpers/test_files.py","language":"python","fileHash":"a2232425db843768e810ae759d77ec48b6c69bc71272d0cae198bd7325a6e305","hash":"65b4cd67c9e2a8b29549cadd66cbe5588a3d33a753cb04a6ea37cee5d9ed7d6f","processedContent":"@patch(\"pilot.helpers.files.open\")\n@patch(\"pilot.helpers.files.os\")\ndef test_get_directory_contents_mocked(mock_os, mock_open):\n    \"\"\"\n    Test that get_directory_contents traverses the directory tree,\n    ignores specified ignore files/folders, and can handle both\n    text and binary files.\n    \"\"\"\n\n    # Normalize path to use correct path separators\n    def np(path: str) -> str:\n        \"\"\"This code defines a function called \"np\" that takes a string argument \"path\" and returns a string representation of the path as a Path object.\"\"\"\n        pass\n\n    mock_os.path.join = os.path.join\n    \"\"\"\n    scip-python python python-stdlib 3.11 os/__init__:: undefined\n    scip-python python python-stdlib 3.11 os/path.: undefined\n    scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n    \"\"\"\n    mock_os.path.basename = os.path.basename\n    \"\"\"\n    scip-python python python-stdlib 3.11 os/__init__:: undefined\n    scip-python python python-stdlib 3.11 os/path.: undefined\n    scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n    \"\"\"\n\n    mock_walk = mock_os.walk\n    mock_walk.return_value = [\n        (np(\"/fake/root\"), [\"foo\", \"to-ignore\", \"bar\"], [\"file.txt\", \"to-ignore.txt\"]),\n        (np(\"/fake/root/foo\"), [], [\"foo.txt\"]),\n        (np(\"/fake/root/bar\"), [], [\"bar.txt\"]),\n    ]\n    mock_open.return_value.read.side_effect = [\n        \"file.txt\",\n        \"foo.txt - 無為\",\n        UnicodeDecodeError(\"utf-8\", b\"\\xff\\xff\\xff\", 0, 1, \"invalid start byte\"),\n        b\"\\xff\\xff\\xff\",\n    ]\n\n    data = get_directory_contents(np(\"/fake/root\"), [\"to-ignore\", \"to-ignore.txt\"]) #This code defines a function called `get_directory_contents` that takes two parameters: `directory` and `ignore`. It returns a list of file objects as returned by `get_file_contents`, which includes the file name, relative path, content (as a string or bytes object), and full path. The function uses `os.walk()` to traverse the directory and its subdirectories, and it ignores files or folders in the `ignore` list.\n    assert data == [\n        {\n            \"content\": \"file.txt\",\n            \"full_path\": np(\"/fake/root/file.txt\"),\n            \"name\": \"file.txt\",\n            \"path\": \"\",\n        },\n        {\n            \"content\": \"foo.txt - 無為\",\n            \"full_path\": np(\"/fake/root/foo/foo.txt\"),\n            \"name\": \"foo.txt\",\n            \"path\": \"foo\",\n        },\n        {\n            \"content\": b\"\\xff\\xff\\xff\",\n            \"full_path\": np(\"/fake/root/bar/bar.txt\"),\n            \"name\": \"bar.txt\",\n            \"path\": \"bar\",\n        },\n    ]\n    mock_walk.assert_called_once_with(np(\"/fake/root\"))\n    mock_open.assert_has_calls(\n        [\n            call(np(\"/fake/root/file.txt\"), \"r\", encoding=\"utf-8\"),\n            call().read(),\n            call(np(\"/fake/root/foo/foo.txt\"), \"r\", encoding=\"utf-8\"),\n            call().read(),\n            call(np(\"/fake/root/bar/bar.txt\"), \"r\", encoding=\"utf-8\"),\n            call().read(),\n            call(np(\"/fake/root/bar/bar.txt\"), \"rb\"),\n            call().read(),\n        ]\n    )","documentation":"This code defines a function called `get_directory_contents` that traverses a directory tree, ignores specified files or folders, and returns a list of file objects with their content, name, path, and full path."}},{"key":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_get_directory_contents_mocked().np().","attributes":{"range":[93,4,94,30],"symbol":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_get_directory_contents_mocked().np().","content":"def np(path: str) -> str:\n        return str(Path(path))","file":"/pilot/test/helpers/test_files.py","language":"python","fileHash":"a2232425db843768e810ae759d77ec48b6c69bc71272d0cae198bd7325a6e305","hash":"5ab265dc66f7e9da6dfa79b232a4fe0c6ab025b9cb017d0d937cdb0b4857108c","processedContent":"def np(path: str) -> str:\n        return str(Path(path))","documentation":"This code defines a function called \"np\" that takes a string argument \"path\" and returns a string representation of the path as a Path object."}},{"key":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_get_directory_contents_live().","attributes":{"range":[148,0,171,60],"symbol":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_get_directory_contents_live().","content":"def test_get_directory_contents_live():\n    files = get_directory_contents(\n        os.path.dirname(os.path.dirname(__file__)), [\".pytest_cache\", \"agents\", \"__init__.py\"]\n    )\n\n    # Check this file was loaded as a text file\n    this_file = [f for f in files if f[\"name\"] == \"test_files.py\"][0]\n    assert this_file[\"path\"] == \"helpers\"\n    assert this_file[\"full_path\"] == __file__\n    assert isinstance(this_file[\"content\"], str)\n    assert \"test_get_directory_contents_live()\" in this_file[\"content\"]\n\n    # Check that the Python cache was loaded as a binary file\n    print(\"FILES\", [(f[\"path\"], f[\"name\"]) for f in files])\n    pycache_file = [\n        f\n        for f in files\n        if f[\"path\"] == \"helpers\" and f[\"name\"] == \"testlogo.png\"\n    ][0]\n    assert isinstance(pycache_file[\"content\"], bytes)\n\n    # Check that the ignore list works\n    assert all(file[\"name\"] != \"__init__.py\" for file in files)\n    assert any(file[\"path\"] == \"database\" for file in files)","file":"/pilot/test/helpers/test_files.py","language":"python","fileHash":"a2232425db843768e810ae759d77ec48b6c69bc71272d0cae198bd7325a6e305","hash":"1032fd666444b7910a7e9ee7a543e784712843e6633a522323cd5631c14e8436","processedContent":"def test_get_directory_contents_live():\n    files = get_directory_contents( #This code defines a function called `get_directory_contents` that takes two parameters: `directory` and `ignore`. It returns a list of file objects as returned by `get_file_contents`, which includes the file name, relative path, content (as a string or bytes object), and full path. The function uses `os.walk()` to traverse the directory and its subdirectories, and it ignores files or folders in the `ignore` list.\n        os.path.dirname(os.path.dirname(__file__)), [\".pytest_cache\", \"agents\", \"__init__.py\"]\n        \"\"\"\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/path.: undefined\n        scip-python python python-stdlib 3.11 os/path.: undefined\n        scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n        scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n        scip-python python temp indexer `pilot.test.helpers.test_files`/: undefined\n        \"\"\"\n    )\n\n    # Check this file was loaded as a text file\n    this_file = [f for f in files if f[\"name\"] == \"test_files.py\"][0]\n    assert this_file[\"path\"] == \"helpers\"\n    assert this_file[\"full_path\"] == __file__ #undefined\n    assert isinstance(this_file[\"content\"], str)\n    assert \"test_get_directory_contents_live()\" in this_file[\"content\"]\n\n    # Check that the Python cache was loaded as a binary file\n    print(\"FILES\", [(f[\"path\"], f[\"name\"]) for f in files])\n    pycache_file = [\n        f\n        for f in files\n        if f[\"path\"] == \"helpers\" and f[\"name\"] == \"testlogo.png\"\n    ][0]\n    assert isinstance(pycache_file[\"content\"], bytes)\n\n    # Check that the ignore list works\n    assert all(file[\"name\"] != \"__init__.py\" for file in files)\n    assert any(file[\"path\"] == \"database\" for file in files)","documentation":"This code defines a function called `get_directory_contents` that returns a list of file objects from a given directory, including the file name, relative path, content (as a string or bytes object), and full path. The function uses `os.walk()` to traverse the directory and its subdirectories, and it ignores files or folders in the `ignore` list."}},{"key":"scip-python python temp indexer `pilot.test.helpers.test_files`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.test.helpers.test_files`/__init__:","range":[0,0,172,0],"content":"import os\nfrom pathlib import Path\nfrom tempfile import NamedTemporaryFile\nfrom unittest.mock import patch, call\n\nimport pytest\n\nfrom pilot.helpers.files import get_file_contents, get_directory_contents, update_file\n\n\n@patch(\"pilot.helpers.files.open\")\n@patch(\"pilot.helpers.files.os\")\ndef test_update_file_creates_directories(mock_os, mock_open):\n    \"\"\"Test that update_file creates intermediate directories if they don't exist.\"\"\"\n\n    mock_os.path.dirname = os.path.dirname\n    update_file(\"/path/to/file\", \"content\")\n    mock_os.makedirs.assert_called_once_with(\"/path/to\", exist_ok=True)\n\n\n@patch(\"pilot.helpers.files.open\")\n@patch(\"pilot.helpers.files.os\")\ndef test_update_file_creates_text_file(mock_os, mock_open):\n    \"\"\"Test that update_file creates intermediate directories if they don't exist.\"\"\"\n\n    update_file(\"/path/to/file\", \"無為\")\n    mock_open.assert_called_once_with(\"/path/to/file\", \"w\", encoding=\"utf-8\")\n    mock_open.return_value.__enter__.return_value.write.assert_called_once_with(\"無為\")\n\n\n@patch(\"pilot.helpers.files.open\")\n@patch(\"pilot.helpers.files.os\")\ndef test_update_file_creates_binary_file(mock_os, mock_open):\n    \"\"\"Test that update_file creates intermediate directories if they don't exist.\"\"\"\n\n    update_file(\"/path/to/file\", b\"\\x00\\x00\\x00\")\n    mock_open.assert_called_once_with(\"/path/to/file\", \"wb\", encoding=None)\n    mock_open.return_value.__enter__.return_value.write.assert_called_once_with(b\"\\x00\\x00\\x00\")\n\n\n@pytest.mark.parametrize(\n    (\"source\", \"expected_encoded\"),\n    [\n        (\"file.txt\", b\"file.txt\"),\n        (\"foo.txt - 無為\", b\"foo.txt - \\xe7\\x84\\xa1\\xe7\\x82\\xba\"),\n        (b\"\\xff\\xff\\xff\", b\"\\xff\\xff\\xff\"),\n    ],\n)\ndef test_update_file_with_encoded_content(source, expected_encoded):\n    # Can't use NamedTemporaryFile this as a context manager because Windows\n    # doesn't allow O_TEMPORARY files (with delete=True) to be opened\n    # twice, defeating the purpose.\n    file = NamedTemporaryFile(delete=False)\n    update_file(file.name, source)\n    assert file.read() == expected_encoded\n\n    file.close()\n    os.remove(file.name)\n\n@pytest.mark.parametrize(\n    (\"encoded\", \"expected\"),\n    [\n        (b\"file.txt\", \"file.txt\"),\n        (b\"foo.txt - \\xe7\\x84\\xa1\\xe7\\x82\\xba\", \"foo.txt - 無為\"),\n        (b\"\\xff\\xff\\xff\", b\"\\xff\\xff\\xff\"),\n    ],\n)\ndef test_get_file_contents(encoded, expected):\n    file = NamedTemporaryFile(delete=False)\n    file.write(encoded)\n    file.flush()\n\n    file_path = Path(file.name)\n    data = get_file_contents(file.name, file_path.anchor)\n    assert data == {\n        \"content\": expected,\n        \"name\": file_path.name,\n        \"path\": str(file_path.parent.relative_to(file_path.anchor)),\n        \"full_path\": file.name,\n    }\n    file.close()\n    os.remove(file.name)\n\n@patch(\"pilot.helpers.files.open\")\n@patch(\"pilot.helpers.files.os\")\ndef test_get_directory_contents_mocked(mock_os, mock_open):\n    \"\"\"\n    Test that get_directory_contents traverses the directory tree,\n    ignores specified ignore files/folders, and can handle both\n    text and binary files.\n    \"\"\"\n\n    # Normalize path to use correct path separators\n    def np(path: str) -> str:\n        return str(Path(path))\n\n    mock_os.path.join = os.path.join\n    mock_os.path.basename = os.path.basename\n\n    mock_walk = mock_os.walk\n    mock_walk.return_value = [\n        (np(\"/fake/root\"), [\"foo\", \"to-ignore\", \"bar\"], [\"file.txt\", \"to-ignore.txt\"]),\n        (np(\"/fake/root/foo\"), [], [\"foo.txt\"]),\n        (np(\"/fake/root/bar\"), [], [\"bar.txt\"]),\n    ]\n    mock_open.return_value.read.side_effect = [\n        \"file.txt\",\n        \"foo.txt - 無為\",\n        UnicodeDecodeError(\"utf-8\", b\"\\xff\\xff\\xff\", 0, 1, \"invalid start byte\"),\n        b\"\\xff\\xff\\xff\",\n    ]\n\n    data = get_directory_contents(np(\"/fake/root\"), [\"to-ignore\", \"to-ignore.txt\"])\n    assert data == [\n        {\n            \"content\": \"file.txt\",\n            \"full_path\": np(\"/fake/root/file.txt\"),\n            \"name\": \"file.txt\",\n            \"path\": \"\",\n        },\n        {\n            \"content\": \"foo.txt - 無為\",\n            \"full_path\": np(\"/fake/root/foo/foo.txt\"),\n            \"name\": \"foo.txt\",\n            \"path\": \"foo\",\n        },\n        {\n            \"content\": b\"\\xff\\xff\\xff\",\n            \"full_path\": np(\"/fake/root/bar/bar.txt\"),\n            \"name\": \"bar.txt\",\n            \"path\": \"bar\",\n        },\n    ]\n    mock_walk.assert_called_once_with(np(\"/fake/root\"))\n    mock_open.assert_has_calls(\n        [\n            call(np(\"/fake/root/file.txt\"), \"r\", encoding=\"utf-8\"),\n            call().read(),\n            call(np(\"/fake/root/foo/foo.txt\"), \"r\", encoding=\"utf-8\"),\n            call().read(),\n            call(np(\"/fake/root/bar/bar.txt\"), \"r\", encoding=\"utf-8\"),\n            call().read(),\n            call(np(\"/fake/root/bar/bar.txt\"), \"rb\"),\n            call().read(),\n        ]\n    )\n\n\ndef test_get_directory_contents_live():\n    files = get_directory_contents(\n        os.path.dirname(os.path.dirname(__file__)), [\".pytest_cache\", \"agents\", \"__init__.py\"]\n    )\n\n    # Check this file was loaded as a text file\n    this_file = [f for f in files if f[\"name\"] == \"test_files.py\"][0]\n    assert this_file[\"path\"] == \"helpers\"\n    assert this_file[\"full_path\"] == __file__\n    assert isinstance(this_file[\"content\"], str)\n    assert \"test_get_directory_contents_live()\" in this_file[\"content\"]\n\n    # Check that the Python cache was loaded as a binary file\n    print(\"FILES\", [(f[\"path\"], f[\"name\"]) for f in files])\n    pycache_file = [\n        f\n        for f in files\n        if f[\"path\"] == \"helpers\" and f[\"name\"] == \"testlogo.png\"\n    ][0]\n    assert isinstance(pycache_file[\"content\"], bytes)\n\n    # Check that the ignore list works\n    assert all(file[\"name\"] != \"__init__.py\" for file in files)\n    assert any(file[\"path\"] == \"database\" for file in files)\n","file":"/pilot/test/helpers/test_files.py","language":"python","fileHash":"a2232425db843768e810ae759d77ec48b6c69bc71272d0cae198bd7325a6e305","hash":"a2232425db843768e810ae759d77ec48b6c69bc71272d0cae198bd7325a6e305","processedContent":"import os #undefined\nfrom pathlib import Path\n\"\"\"\nscip-python python python-stdlib 3.11 pathlib/__init__:: undefined\nscip-python python python-stdlib 3.11 pathlib/Path#: undefined\n\"\"\"\nfrom tempfile import NamedTemporaryFile\n\"\"\"\nscip-python python python-stdlib 3.11 tempfile/__init__:: undefined\nscip-python python python-stdlib 3.11 tempfile/NamedTemporaryFile().: undefined\n\"\"\"\nfrom unittest.mock import patch, call #undefined\n\nimport pytest\n\nfrom pilot.helpers.files import get_file_contents, get_directory_contents, update_file\n\"\"\"\nscip-python python temp indexer `pilot.helpers.files`/__init__:: The code defines a series of functions for working with files and directories, including updating a file's content, retrieving the contents of a file or directory, and deleting files and empty subdirectories.\nscip-python python temp indexer `pilot.helpers.files`/get_file_contents().: This code defines a function called `get_file_contents` that takes two parameters: `path` and `project_root_path`. It returns an object with four keys: `name`, `path`, `content`, and `full_path`. The function first tries to read the file using UTF-8 encoding, but if that fails, it treats the file as a binary file. It then returns the file name, relative path, content (as a string or bytes object), and full path as values in the object.\nscip-python python temp indexer `pilot.helpers.files`/get_directory_contents().: This code defines a function called `get_directory_contents` that takes two parameters: `directory` and `ignore`. It returns a list of file objects as returned by `get_file_contents`, which includes the file name, relative path, content (as a string or bytes object), and full path. The function uses `os.walk()` to traverse the directory and its subdirectories, and it ignores files or folders in the `ignore` list.\nscip-python python temp indexer `pilot.helpers.files`/update_file().: This code updates a file with new content. It creates any necessary intermediate directories, writes the file using UTF-8 encoding if it's text, and prints a success message.\n\"\"\"\n\n\n@patch(\"pilot.helpers.files.open\")\n@patch(\"pilot.helpers.files.os\")\ndef test_update_file_creates_directories(mock_os, mock_open):\n    \"\"\"This code tests the `update_file` function, which updates a file with new content. It creates any necessary intermediate directories and writes the file using UTF-8 encoding if it's text.\"\"\"\n    pass\n\n\n@patch(\"pilot.helpers.files.open\")\n@patch(\"pilot.helpers.files.os\")\ndef test_update_file_creates_text_file(mock_os, mock_open):\n    \"\"\"This code tests the `update_file` function by mocking the `open` and `os` modules. It creates a mock file object and checks if it was called with the correct parameters and if the file was written with the correct content.\"\"\"\n    pass\n\n\n@patch(\"pilot.helpers.files.open\")\n@patch(\"pilot.helpers.files.os\")\ndef test_update_file_creates_binary_file(mock_os, mock_open):\n    \"\"\"This code updates a file with new content, creating any necessary intermediate directories and writing the file using UTF-8 encoding if it's text.\"\"\"\n    pass\n\n\n@pytest.mark.parametrize(\n    (\"source\", \"expected_encoded\"),\n    [\n        (\"file.txt\", b\"file.txt\"),\n        (\"foo.txt - 無為\", b\"foo.txt - \\xe7\\x84\\xa1\\xe7\\x82\\xba\"),\n        (b\"\\xff\\xff\\xff\", b\"\\xff\\xff\\xff\"),\n    ],\n)\ndef test_update_file_with_encoded_content(source, expected_encoded):\n    \"\"\"This code updates a file with new content using UTF-8 encoding if it's text, and prints a success message.\"\"\"\n    pass\n\n@pytest.mark.parametrize(\n    (\"encoded\", \"expected\"),\n    [\n        (b\"file.txt\", \"file.txt\"),\n        (b\"foo.txt - \\xe7\\x84\\xa1\\xe7\\x82\\xba\", \"foo.txt - 無為\"),\n        (b\"\\xff\\xff\\xff\", b\"\\xff\\xff\\xff\"),\n    ],\n)\ndef test_get_file_contents(encoded, expected):\n    \"\"\"This code defines a function called `get_file_contents` that reads the contents of a file and returns an object with four keys: `name`, `path`, `content`, and `full_path`. The function first tries to read the file using UTF-8 encoding, but if that fails, it treats the file as a binary file.\"\"\"\n    pass\n\n@patch(\"pilot.helpers.files.open\")\n@patch(\"pilot.helpers.files.os\")\ndef test_get_directory_contents_mocked(mock_os, mock_open):\n    \"\"\"This code defines a function called `get_directory_contents` that traverses a directory tree, ignores specified files or folders, and returns a list of file objects with their content, name, path, and full path.\"\"\"\n    pass\n\n\ndef test_get_directory_contents_live():\n    \"\"\"This code defines a function called `get_directory_contents` that returns a list of file objects from a given directory, including the file name, relative path, content (as a string or bytes object), and full path. The function uses `os.walk()` to traverse the directory and its subdirectories, and it ignores files or folders in the `ignore` list.\"\"\"\n    pass\n","documentation":"The code defines a series of functions for working with files and directories, including updating a file's content, retrieving the contents of a file or directory, and deleting files and empty subdirectories."}},{"key":"scip-python python python-stdlib 3.11 tempfile/__init__:","attributes":{"symbol":"scip-python python python-stdlib 3.11 tempfile/__init__:","language":"python"}},{"key":"scip-python python python-stdlib 3.11 tempfile/NamedTemporaryFile().","attributes":{"symbol":"scip-python python python-stdlib 3.11 tempfile/NamedTemporaryFile().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 tempfile/_TemporaryFileWrapper#name.","attributes":{"symbol":"scip-python python python-stdlib 3.11 tempfile/_TemporaryFileWrapper#name.","language":"python"}},{"key":"scip-python python python-stdlib 3.11 tempfile/_TemporaryFileWrapper#read().","attributes":{"symbol":"scip-python python python-stdlib 3.11 tempfile/_TemporaryFileWrapper#read().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 tempfile/_TemporaryFileWrapper#close().","attributes":{"symbol":"scip-python python python-stdlib 3.11 tempfile/_TemporaryFileWrapper#close().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 tempfile/_TemporaryFileWrapper#write().","attributes":{"symbol":"scip-python python python-stdlib 3.11 tempfile/_TemporaryFileWrapper#write().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 tempfile/_TemporaryFileWrapper#flush().","attributes":{"symbol":"scip-python python python-stdlib 3.11 tempfile/_TemporaryFileWrapper#flush().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 pathlib/PurePath#anchor().","attributes":{"symbol":"scip-python python python-stdlib 3.11 pathlib/PurePath#anchor().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 pathlib/PurePath#name().","attributes":{"symbol":"scip-python python python-stdlib 3.11 pathlib/PurePath#name().","language":"python"}},{"key":"scip-python python temp indexer `pilot.test.helpers.test_files`/","attributes":{"symbol":"scip-python python temp indexer `pilot.test.helpers.test_files`/","language":"python"}},{"key":"scip-python python temp indexer `pilot.test.utils.test_settings`/expected_config_location().","attributes":{"range":[20,0,30,63],"symbol":"scip-python python temp indexer `pilot.test.utils.test_settings`/expected_config_location().","content":"@pytest.fixture\ndef expected_config_location():\n    xdg_config_home = getenv(\"XDG_CONFIG_HOME\")\n    if xdg_config_home:\n        return join(xdg_config_home, \"gpt-pilot\", \"config.json\")\n    elif sys.platform in [\"darwin\", \"linux\"]:\n        return expanduser(\"~/.gpt-pilot/config.json\")\n    elif sys.platform == \"win32\":\n        return expandvars(\"%APPDATA%\\\\GPT Pilot\\\\config.json\")\n    else:\n        raise RuntimeError(f\"Unknown platform: {sys.platform}\")","file":"/pilot/test/utils/test_settings.py","language":"python","fileHash":"28f9b424fa444a80b731a635977bc67376f74f6074f58cb87033aa6244ab401f","hash":"8db0c33f81ea2496b88bf1f299843e92fe45a73e3d465d4ae7e86462019b5b9a","processedContent":"@pytest.fixture\ndef expected_config_location():\n    xdg_config_home = getenv(\"XDG_CONFIG_HOME\") #undefined\n    if xdg_config_home:\n        return join(xdg_config_home, \"gpt-pilot\", \"config.json\") #undefined\n    elif sys.platform in [\"darwin\", \"linux\"]:\n    \"\"\"\n    scip-python python python-stdlib 3.11 sys/__init__:: undefined\n    scip-python python python-stdlib 3.11 sys/platform.platform.: undefined\n    \"\"\"\n        return expanduser(\"~/.gpt-pilot/config.json\") #undefined\n    elif sys.platform == \"win32\":\n    \"\"\"\n    scip-python python python-stdlib 3.11 sys/__init__:: undefined\n    scip-python python python-stdlib 3.11 sys/platform.platform.: undefined\n    \"\"\"\n        return expandvars(\"%APPDATA%\\\\GPT Pilot\\\\config.json\") #undefined\n    else:\n        raise RuntimeError(f\"Unknown platform: {sys.platform}\")","documentation":"This code defines a fixture function called `expected_config_location` that returns the location of a configuration file for a program called GPT Pilot. The function first checks if an environment variable called `XDG_CONFIG_HOME` is set, and if so, it returns a path based on that variable. If `XDG_CONFIG_HOME` is not set, the function checks the platform and returns a path based on the platform-specific conventions for user data directories."}},{"key":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_settings_initializes_known_variables().","attributes":{"range":[33,0,36,37],"symbol":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_settings_initializes_known_variables().","content":"def test_settings_initializes_known_variables():\n    settings = Settings()\n    assert settings.openai_api_key is None\n    assert settings.telemetry is None","file":"/pilot/test/utils/test_settings.py","language":"python","fileHash":"28f9b424fa444a80b731a635977bc67376f74f6074f58cb87033aa6244ab401f","hash":"5507f2f69c9a8aac7d2bdc2b4ad6270561e5e08d234c3b84949a5a3f62fe55b3","processedContent":"def test_settings_initializes_known_variables():\n    settings = Settings() #This code defines a class called `Settings` that holds all the settings for an application. It allows you to get, set, and update settings using a simple API.\n    assert settings.openai_api_key is None\n    assert settings.telemetry is None","documentation":"This code defines a class called `Settings` that holds all the settings for an application. It allows you to get, set, and update settings using a simple API."}},{"key":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_settings_init_ignores_unknown_variables().","attributes":{"range":[39,0,41,43],"symbol":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_settings_init_ignores_unknown_variables().","content":"def test_settings_init_ignores_unknown_variables():\n    settings = Settings(unknown=\"value\")\n    assert not hasattr(settings, \"unknown\")","file":"/pilot/test/utils/test_settings.py","language":"python","fileHash":"28f9b424fa444a80b731a635977bc67376f74f6074f58cb87033aa6244ab401f","hash":"7b4fd0e58082f74317a4d2703a0ffa69175c22f9eb598ea015b54a1976bbd660","processedContent":"def test_settings_init_ignores_unknown_variables():\n    settings = Settings(unknown=\"value\") #This code defines a class called `Settings` that holds all the settings for an application. It allows you to get, set, and update settings using a simple API.\n    assert not hasattr(settings, \"unknown\")","documentation":"This code defines a class called `Settings` that allows you to get, set, and update settings for an application. It ignores unknown variables when initializing the class."}},{"key":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_settings_forbids_saving_unknown_variables().","attributes":{"range":[44,0,48,34],"symbol":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_settings_forbids_saving_unknown_variables().","content":"def test_settings_forbids_saving_unknown_variables():\n    settings = Settings()\n\n    with pytest.raises(AttributeError):\n        settings.unknown = \"value\"","file":"/pilot/test/utils/test_settings.py","language":"python","fileHash":"28f9b424fa444a80b731a635977bc67376f74f6074f58cb87033aa6244ab401f","hash":"efc938d0e7d01e7c5169ad842104ef26bdf839267ee0293b900b79fda4ca5d17","processedContent":"def test_settings_forbids_saving_unknown_variables():\n    settings = Settings() #This code defines a class called `Settings` that holds all the settings for an application. It allows you to get, set, and update settings using a simple API.\n\n    with pytest.raises(AttributeError):\n        settings.unknown = \"value\"","documentation":"This code defines a test function that checks if the `Settings` class raises an `AttributeError` when trying to set an unknown variable."}},{"key":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_settings_update().","attributes":{"range":[51,0,54,48],"symbol":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_settings_update().","content":"def test_settings_update():\n    settings = Settings()\n    settings.update(openai_api_key=\"test_key\")\n    assert settings.openai_api_key == \"test_key\"","file":"/pilot/test/utils/test_settings.py","language":"python","fileHash":"28f9b424fa444a80b731a635977bc67376f74f6074f58cb87033aa6244ab401f","hash":"d99da64f5def3d614baa190406103e8d8b75aa254b97ecfa09fc493b6e8db2cf","processedContent":"def test_settings_update():\n    settings = Settings() #This code defines a class called `Settings` that holds all the settings for an application. It allows you to get, set, and update settings using a simple API.\n    settings.update(openai_api_key=\"test_key\") #This code defines a method called `update` that takes in a variable number of keyword arguments, which are then used to update the settings of an object. The method checks if each setting is valid and updates it accordingly. If an invalid setting is passed, it logs a warning message.\n    assert settings.openai_api_key == \"test_key\"","documentation":"This code defines a class called `Settings` that allows you to update and retrieve settings for an application. The `update` method takes in keyword arguments and updates the settings accordingly, while the `openai_api_key` setting is set to \"test_key\" for testing purposes."}},{"key":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_settings_to_dict().","attributes":{"range":[57,0,63,5],"symbol":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_settings_to_dict().","content":"def test_settings_to_dict():\n    settings = Settings()\n    settings.update(openai_api_key=\"test_key\")\n    assert dict(settings) == {\n        \"openai_api_key\": \"test_key\",\n        \"telemetry\": None,\n    }","file":"/pilot/test/utils/test_settings.py","language":"python","fileHash":"28f9b424fa444a80b731a635977bc67376f74f6074f58cb87033aa6244ab401f","hash":"1d745b12ee620f8f0dbee403a953a4516490cabaf4ac95bfc628d4957a200728","processedContent":"def test_settings_to_dict():\n    settings = Settings() #This code defines a class called `Settings` that holds all the settings for an application. It allows you to get, set, and update settings using a simple API.\n    settings.update(openai_api_key=\"test_key\") #This code defines a method called `update` that takes in a variable number of keyword arguments, which are then used to update the settings of an object. The method checks if each setting is valid and updates it accordingly. If an invalid setting is passed, it logs a warning message.\n    assert dict(settings) == {\n        \"openai_api_key\": \"test_key\",\n        \"telemetry\": None,\n    }","documentation":"This code defines a class called `Settings` that holds all the settings for an application. It allows you to get, set, and update settings using a simple API."}},{"key":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_loader_config_file_location().","attributes":{"range":[66,0,68,60],"symbol":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_loader_config_file_location().","content":"def test_loader_config_file_location(expected_config_location):\n    settings = Settings()\n    Loader(settings).config_path == expected_config_location","file":"/pilot/test/utils/test_settings.py","language":"python","fileHash":"28f9b424fa444a80b731a635977bc67376f74f6074f58cb87033aa6244ab401f","hash":"112eb2c6191139243db6a4fade461d4929e33f955f093de28b16dd507e43d32a","processedContent":"def test_loader_config_file_location(expected_config_location):\n    settings = Settings() #This code defines a class called `Settings` that holds all the settings for an application. It allows you to get, set, and update settings using a simple API.\n    Loader(settings).config_path == expected_config_location","documentation":"This code defines a test function that checks the location of the configuration file for an application. It uses a `Settings` class to get and set the configuration file path, and compares it to the expected location using the `Loader` class."}},{"key":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_loader_load_config_file().","attributes":{"range":[71,0,97,66],"symbol":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_loader_load_config_file().","content":"@patch(\"utils.settings.open\")\n@patch(\"utils.settings.Loader.update_settings_from_env\")\ndef test_loader_load_config_file(_mock_from_env, mock_open, expected_config_location):\n    settings = Settings()\n    fake_config = json.dumps(\n        {\n            \"openai_api_key\": \"test_key\",\n            \"telemetry\": {\n                \"id\": \"fake-id\",\n                \"endpoint\": \"https://example.com\",\n            },\n        }\n    )\n    mock_open.return_value.__enter__.return_value = StringIO(fake_config)\n\n    loader = Loader(settings)\n    assert loader.config_path == Path(expected_config_location)\n\n    loader.config_path = MagicMock()\n    loader.load()\n\n    loader.config_path.exists.assert_called_once_with()\n    mock_open.assert_called_once_with(loader.config_path, \"r\", encoding=\"utf-8\")\n\n    assert settings.openai_api_key == \"test_key\"\n    assert settings.telemetry[\"id\"] == \"fake-id\"\n    assert settings.telemetry[\"endpoint\"] == \"https://example.com\"","file":"/pilot/test/utils/test_settings.py","language":"python","fileHash":"28f9b424fa444a80b731a635977bc67376f74f6074f58cb87033aa6244ab401f","hash":"d1eb366e8732adb2240086ff786b45d2c8b3851178b8bd07c036d43700610892","processedContent":"@patch(\"utils.settings.open\")\n@patch(\"utils.settings.Loader.update_settings_from_env\")\ndef test_loader_load_config_file(_mock_from_env, mock_open, expected_config_location):\n    settings = Settings() #This code defines a class called `Settings` that holds all the settings for an application. It allows you to get, set, and update settings using a simple API.\n    fake_config = json.dumps(\n    \"\"\"\n    scip-python python python-stdlib 3.11 json/__init__:: undefined\n    scip-python python python-stdlib 3.11 json/dumps().: undefined\n    \"\"\"\n        {\n            \"openai_api_key\": \"test_key\",\n            \"telemetry\": {\n                \"id\": \"fake-id\",\n                \"endpoint\": \"https://example.com\",\n            },\n        }\n    )\n    mock_open.return_value.__enter__.return_value = StringIO(fake_config) #undefined\n\n    loader = Loader(settings) #This code defines a class called `Loader` that loads and saves application settings from a JSON file. It also updates the settings with values from environment variables and command line arguments.\n    assert loader.config_path == Path(expected_config_location)\n    \"\"\"\n    scip-python python temp indexer `pilot.utils.settings`/Loader#config_path.: undefined\n    scip-python python python-stdlib 3.11 pathlib/Path#: undefined\n    \"\"\"\n\n    loader.config_path = MagicMock() #undefined\n    loader.load() #This code defines a method called `load` that loads settings from a JSON file, environment variables, and command-line arguments. It updates the settings of an object with valid values and logs a warning message if invalid settings are passed.\n\n    loader.config_path.exists.assert_called_once_with() #undefined\n    mock_open.assert_called_once_with(loader.config_path, \"r\", encoding=\"utf-8\") #undefined\n\n    assert settings.openai_api_key == \"test_key\"\n    assert settings.telemetry[\"id\"] == \"fake-id\"\n    assert settings.telemetry[\"endpoint\"] == \"https://example.com\"","documentation":"This code defines a class called `Loader` that loads and saves application settings from a JSON file, environment variables, and command-line arguments. It updates the settings of an object with valid values and logs a warning message if invalid settings are passed."}},{"key":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_loader_load_no_config_file().","attributes":{"range":[100,0,115,37],"symbol":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_loader_load_no_config_file().","content":"@patch(\"utils.settings.open\")\n@patch(\"utils.settings.Loader.update_settings_from_env\")\ndef test_loader_load_no_config_file(_mock_from_env, mock_open, expected_config_location):\n    settings = Settings()\n    loader = Loader(settings)\n    assert loader.config_path == Path(expected_config_location)\n\n    loader.config_path = MagicMock()\n    loader.config_path.exists.return_value = False\n    loader.load()\n\n    loader.config_path.exists.assert_called_once_with()\n    mock_open.assert_not_called()\n\n    assert settings.openai_api_key is None\n    assert settings.telemetry is None","file":"/pilot/test/utils/test_settings.py","language":"python","fileHash":"28f9b424fa444a80b731a635977bc67376f74f6074f58cb87033aa6244ab401f","hash":"18a9a88b410858957d064bf3e66e1852b217d31292cdc11e3442d7ae56d70662","processedContent":"@patch(\"utils.settings.open\")\n@patch(\"utils.settings.Loader.update_settings_from_env\")\ndef test_loader_load_no_config_file(_mock_from_env, mock_open, expected_config_location):\n    settings = Settings() #This code defines a class called `Settings` that holds all the settings for an application. It allows you to get, set, and update settings using a simple API.\n    loader = Loader(settings) #This code defines a class called `Loader` that loads and saves application settings from a JSON file. It also updates the settings with values from environment variables and command line arguments.\n    assert loader.config_path == Path(expected_config_location)\n    \"\"\"\n    scip-python python temp indexer `pilot.utils.settings`/Loader#config_path.: undefined\n    scip-python python python-stdlib 3.11 pathlib/Path#: undefined\n    \"\"\"\n\n    loader.config_path = MagicMock() #undefined\n    loader.config_path.exists.return_value = False #undefined\n    loader.load() #This code defines a method called `load` that loads settings from a JSON file, environment variables, and command-line arguments. It updates the settings of an object with valid values and logs a warning message if invalid settings are passed.\n\n    loader.config_path.exists.assert_called_once_with() #undefined\n    mock_open.assert_not_called()\n\n    assert settings.openai_api_key is None\n    assert settings.telemetry is None","documentation":"This code defines a `Loader` class that loads and saves application settings from a JSON file, environment variables, and command-line arguments. It updates the settings of an object with valid values and logs a warning message if invalid settings are passed."}},{"key":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_loader_load_from_env().","attributes":{"range":[118,0,130,66],"symbol":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_loader_load_from_env().","content":"@patch(\"utils.settings.getenv\")\ndef test_loader_load_from_env(mock_getenv):\n    settings = Settings()\n    mock_getenv.side_effect = lambda key: {\n        \"TELEMETRY_ID\": \"fake-id\",\n        \"TELEMETRY_ENDPOINT\": \"https://example.com\",\n        \"OPENAI_API_KEY\": \"test_key\",\n    }.get(key)\n\n    Loader(settings).update_settings_from_env(settings)\n    assert settings.openai_api_key == \"test_key\"\n    assert settings.telemetry[\"id\"] == \"fake-id\"\n    assert settings.telemetry[\"endpoint\"] == \"https://example.com\"","file":"/pilot/test/utils/test_settings.py","language":"python","fileHash":"28f9b424fa444a80b731a635977bc67376f74f6074f58cb87033aa6244ab401f","hash":"8665740207516db93008057da8cd9b0659667c303c0b8f0c21ab581f23ce4a82","processedContent":"@patch(\"utils.settings.getenv\")\ndef test_loader_load_from_env(mock_getenv):\n    settings = Settings() #This code defines a class called `Settings` that holds all the settings for an application. It allows you to get, set, and update settings using a simple API.\n    mock_getenv.side_effect = lambda key: {\n        \"TELEMETRY_ID\": \"fake-id\",\n        \"TELEMETRY_ENDPOINT\": \"https://example.com\",\n        \"OPENAI_API_KEY\": \"test_key\",\n    }.get(key)\n\n    Loader(settings).update_settings_from_env(settings)\n    \"\"\"\n    scip-python python temp indexer `pilot.utils.settings`/Loader#: This code defines a class called `Loader` that loads and saves application settings from a JSON file. It also updates the settings with values from environment variables and command line arguments.\n    scip-python python temp indexer `pilot.utils.settings`/Loader#update_settings_from_env().: This code updates a settings object with values from environment variables. It checks for the presence of telemetry and OpenAI API keys, and sets them in the settings object if they are defined.\n    \"\"\"\n    assert settings.openai_api_key == \"test_key\"\n    assert settings.telemetry[\"id\"] == \"fake-id\"\n    assert settings.telemetry[\"endpoint\"] == \"https://example.com\"","documentation":"This code defines a `Loader` class that loads and saves application settings from a JSON file, and updates the settings with values from environment variables and command line arguments."}},{"key":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_get_git_commit().","attributes":{"range":[133,0,141,51],"symbol":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_get_git_commit().","content":"def test_get_git_commit():\n    try:\n        expected_commit_hash = check_output(\n            [\"git\", \"rev-parse\", \"HEAD\"], encoding=\"ascii\"\n        ).strip()\n    except Exception:\n        expected_commit_hash = None\n\n    assert get_git_commit() == expected_commit_hash","file":"/pilot/test/utils/test_settings.py","language":"python","fileHash":"28f9b424fa444a80b731a635977bc67376f74f6074f58cb87033aa6244ab401f","hash":"703417088394c680d00cc4d023d04d6d407f1d935c53f766cc008b08378f5168","processedContent":"def test_get_git_commit():\n    try:\n        expected_commit_hash = check_output( #undefined\n            [\"git\", \"rev-parse\", \"HEAD\"], encoding=\"ascii\"\n        ).strip()\n    except Exception:\n        expected_commit_hash = None\n\n    assert get_git_commit() == expected_commit_hash","documentation":"This code tests the `get_git_commit()` function by comparing its output with the actual commit hash of the current Git repository."}},{"key":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_get_package_version().","attributes":{"range":[144,0,145,43],"symbol":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_get_package_version().","content":"def test_get_package_version():\n    assert get_package_version() == \"0.0.0\"","file":"/pilot/test/utils/test_settings.py","language":"python","fileHash":"28f9b424fa444a80b731a635977bc67376f74f6074f58cb87033aa6244ab401f","hash":"f296d1db09bdc51cd92a236009e9f7609b8d31c9b79f1d77c09c717cfa95a5a9","processedContent":"def test_get_package_version():\n    assert get_package_version() == \"0.0.0\"","documentation":"This code tests the functionality of a function called `get_package_version()` by asserting that it returns a string with the value \"0.0.0\"."}},{"key":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_get_version().","attributes":{"range":[148,0,157,51],"symbol":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_get_version().","content":"def test_get_version():\n    try:\n        commit_suffix = (\n            \"-git\"\n            + check_output([\"git\", \"rev-parse\", \"HEAD\"], encoding=\"ascii\").strip()[:7]\n        )\n    except Exception:\n        commit_suffix = \"\"\n\n    assert get_version() == \"0.0.0\" + commit_suffix","file":"/pilot/test/utils/test_settings.py","language":"python","fileHash":"28f9b424fa444a80b731a635977bc67376f74f6074f58cb87033aa6244ab401f","hash":"c5e1e7bda2bdd83b43e2f48b9c11ed88f4a748759adbd9a7248f3a4d51269293","processedContent":"def test_get_version():\n    try:\n        commit_suffix = (\n            \"-git\"\n            + check_output([\"git\", \"rev-parse\", \"HEAD\"], encoding=\"ascii\").strip()[:7] #undefined\n        )\n    except Exception:\n        commit_suffix = \"\"\n\n    assert get_version() == \"0.0.0\" + commit_suffix","documentation":"This code is a unit test that checks the version of the software. It uses the `check_output` function to get the current commit hash from Git, and then appends it to the version number. The test asserts that the version returned by the `get_version` function matches the expected value, which includes the commit hash."}},{"key":"scip-python python temp indexer `pilot.test.utils.test_settings`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.test.utils.test_settings`/__init__:","range":[0,0,158,0],"content":"from io import StringIO\nimport json\nfrom os.path import expanduser, expandvars, join\nfrom os import getenv\nfrom pathlib import Path\nfrom subprocess import check_output\nimport sys\nfrom unittest.mock import patch, MagicMock\n\nimport pytest\n\nfrom utils.settings import (\n    Loader,\n    Settings,\n    get_git_commit,\n    get_package_version,\n    get_version,\n)\n\n\n@pytest.fixture\ndef expected_config_location():\n    xdg_config_home = getenv(\"XDG_CONFIG_HOME\")\n    if xdg_config_home:\n        return join(xdg_config_home, \"gpt-pilot\", \"config.json\")\n    elif sys.platform in [\"darwin\", \"linux\"]:\n        return expanduser(\"~/.gpt-pilot/config.json\")\n    elif sys.platform == \"win32\":\n        return expandvars(\"%APPDATA%\\\\GPT Pilot\\\\config.json\")\n    else:\n        raise RuntimeError(f\"Unknown platform: {sys.platform}\")\n\n\ndef test_settings_initializes_known_variables():\n    settings = Settings()\n    assert settings.openai_api_key is None\n    assert settings.telemetry is None\n\n\ndef test_settings_init_ignores_unknown_variables():\n    settings = Settings(unknown=\"value\")\n    assert not hasattr(settings, \"unknown\")\n\n\ndef test_settings_forbids_saving_unknown_variables():\n    settings = Settings()\n\n    with pytest.raises(AttributeError):\n        settings.unknown = \"value\"\n\n\ndef test_settings_update():\n    settings = Settings()\n    settings.update(openai_api_key=\"test_key\")\n    assert settings.openai_api_key == \"test_key\"\n\n\ndef test_settings_to_dict():\n    settings = Settings()\n    settings.update(openai_api_key=\"test_key\")\n    assert dict(settings) == {\n        \"openai_api_key\": \"test_key\",\n        \"telemetry\": None,\n    }\n\n\ndef test_loader_config_file_location(expected_config_location):\n    settings = Settings()\n    Loader(settings).config_path == expected_config_location\n\n\n@patch(\"utils.settings.open\")\n@patch(\"utils.settings.Loader.update_settings_from_env\")\ndef test_loader_load_config_file(_mock_from_env, mock_open, expected_config_location):\n    settings = Settings()\n    fake_config = json.dumps(\n        {\n            \"openai_api_key\": \"test_key\",\n            \"telemetry\": {\n                \"id\": \"fake-id\",\n                \"endpoint\": \"https://example.com\",\n            },\n        }\n    )\n    mock_open.return_value.__enter__.return_value = StringIO(fake_config)\n\n    loader = Loader(settings)\n    assert loader.config_path == Path(expected_config_location)\n\n    loader.config_path = MagicMock()\n    loader.load()\n\n    loader.config_path.exists.assert_called_once_with()\n    mock_open.assert_called_once_with(loader.config_path, \"r\", encoding=\"utf-8\")\n\n    assert settings.openai_api_key == \"test_key\"\n    assert settings.telemetry[\"id\"] == \"fake-id\"\n    assert settings.telemetry[\"endpoint\"] == \"https://example.com\"\n\n\n@patch(\"utils.settings.open\")\n@patch(\"utils.settings.Loader.update_settings_from_env\")\ndef test_loader_load_no_config_file(_mock_from_env, mock_open, expected_config_location):\n    settings = Settings()\n    loader = Loader(settings)\n    assert loader.config_path == Path(expected_config_location)\n\n    loader.config_path = MagicMock()\n    loader.config_path.exists.return_value = False\n    loader.load()\n\n    loader.config_path.exists.assert_called_once_with()\n    mock_open.assert_not_called()\n\n    assert settings.openai_api_key is None\n    assert settings.telemetry is None\n\n\n@patch(\"utils.settings.getenv\")\ndef test_loader_load_from_env(mock_getenv):\n    settings = Settings()\n    mock_getenv.side_effect = lambda key: {\n        \"TELEMETRY_ID\": \"fake-id\",\n        \"TELEMETRY_ENDPOINT\": \"https://example.com\",\n        \"OPENAI_API_KEY\": \"test_key\",\n    }.get(key)\n\n    Loader(settings).update_settings_from_env(settings)\n    assert settings.openai_api_key == \"test_key\"\n    assert settings.telemetry[\"id\"] == \"fake-id\"\n    assert settings.telemetry[\"endpoint\"] == \"https://example.com\"\n\n\ndef test_get_git_commit():\n    try:\n        expected_commit_hash = check_output(\n            [\"git\", \"rev-parse\", \"HEAD\"], encoding=\"ascii\"\n        ).strip()\n    except Exception:\n        expected_commit_hash = None\n\n    assert get_git_commit() == expected_commit_hash\n\n\ndef test_get_package_version():\n    assert get_package_version() == \"0.0.0\"\n\n\ndef test_get_version():\n    try:\n        commit_suffix = (\n            \"-git\"\n            + check_output([\"git\", \"rev-parse\", \"HEAD\"], encoding=\"ascii\").strip()[:7]\n        )\n    except Exception:\n        commit_suffix = \"\"\n\n    assert get_version() == \"0.0.0\" + commit_suffix\n","file":"/pilot/test/utils/test_settings.py","language":"python","fileHash":"28f9b424fa444a80b731a635977bc67376f74f6074f58cb87033aa6244ab401f","hash":"28f9b424fa444a80b731a635977bc67376f74f6074f58cb87033aa6244ab401f","processedContent":"from io import StringIO\n\"\"\"\nscip-python python python-stdlib 3.11 io/__init__:: undefined\nscip-python python python-stdlib 3.11 io/StringIO#: undefined\n\"\"\"\nimport json #undefined\nfrom os.path import expanduser, expandvars, join\n\"\"\"\nscip-python python python-stdlib 3.11 `os.path`/__init__:: undefined\nscip-python python python-stdlib 3.11 posixpath/expanduser().: undefined\nscip-python python python-stdlib 3.11 posixpath/expandvars().: undefined\nscip-python python python-stdlib 3.11 posixpath/join().: undefined\n\"\"\"\nfrom os import getenv\n\"\"\"\nscip-python python python-stdlib 3.11 os/__init__:: undefined\nscip-python python python-stdlib 3.11 os/getenv().: undefined\n\"\"\"\nfrom pathlib import Path\n\"\"\"\nscip-python python python-stdlib 3.11 pathlib/__init__:: undefined\nscip-python python python-stdlib 3.11 pathlib/Path#: undefined\n\"\"\"\nfrom subprocess import check_output\n\"\"\"\nscip-python python python-stdlib 3.11 subprocess/__init__:: undefined\nscip-python python python-stdlib 3.11 subprocess/check_output().: undefined\n\"\"\"\nimport sys #undefined\nfrom unittest.mock import patch, MagicMock #undefined\n\nimport pytest\n\nfrom utils.settings import ( #This code defines a class called `Settings` that holds all the settings for an application, and a class called `Loader` that loads and saves application settings from a JSON file. It also updates the settings with values from environment variables and command line arguments.\n    Loader, #This code defines a class called `Loader` that loads and saves application settings from a JSON file. It also updates the settings with values from environment variables and command line arguments.\n    Settings, #This code defines a class called `Settings` that holds all the settings for an application. It allows you to get, set, and update settings using a simple API.\n    get_git_commit, #This code defines a function called `get_git_commit()` that returns the current git commit hash if the program is running from a git repository. It does this by reading the `HEAD` file in the `.git` directory and returning the contents of the file, which should be the commit hash. If the program is not running from a git repository, it returns `None`.\n    get_package_version, #This code defines a function called `get_package_version` that returns the version of the package as defined in the setup.py or pyproject.toml file.\n    get_version, #This code defines a function called `get_version()` that returns the current version of GPT Pilot, which is built from the package version and the current git commit hash (if running from a git repository).\n)\n\n\n@pytest.fixture\ndef expected_config_location():\n    \"\"\"This code defines a fixture function called `expected_config_location` that returns the location of a configuration file for a program called GPT Pilot. The function first checks if an environment variable called `XDG_CONFIG_HOME` is set, and if so, it returns a path based on that variable. If `XDG_CONFIG_HOME` is not set, the function checks the platform and returns a path based on the platform-specific conventions for user data directories.\"\"\"\n    pass\n\n\ndef test_settings_initializes_known_variables():\n    \"\"\"This code defines a class called `Settings` that holds all the settings for an application. It allows you to get, set, and update settings using a simple API.\"\"\"\n    pass\n\n\ndef test_settings_init_ignores_unknown_variables():\n    \"\"\"This code defines a class called `Settings` that allows you to get, set, and update settings for an application. It ignores unknown variables when initializing the class.\"\"\"\n    pass\n\n\ndef test_settings_forbids_saving_unknown_variables():\n    \"\"\"This code defines a test function that checks if the `Settings` class raises an `AttributeError` when trying to set an unknown variable.\"\"\"\n    pass\n\n\ndef test_settings_update():\n    \"\"\"This code defines a class called `Settings` that allows you to update and retrieve settings for an application. The `update` method takes in keyword arguments and updates the settings accordingly, while the `openai_api_key` setting is set to \"test_key\" for testing purposes.\"\"\"\n    pass\n\n\ndef test_settings_to_dict():\n    \"\"\"This code defines a class called `Settings` that holds all the settings for an application. It allows you to get, set, and update settings using a simple API.\"\"\"\n    pass\n\n\ndef test_loader_config_file_location(expected_config_location):\n    \"\"\"This code defines a test function that checks the location of the configuration file for an application. It uses a `Settings` class to get and set the configuration file path, and compares it to the expected location using the `Loader` class.\"\"\"\n    pass\n\n\n@patch(\"utils.settings.open\")\n@patch(\"utils.settings.Loader.update_settings_from_env\")\ndef test_loader_load_config_file(_mock_from_env, mock_open, expected_config_location):\n    \"\"\"This code defines a class called `Loader` that loads and saves application settings from a JSON file, environment variables, and command-line arguments. It updates the settings of an object with valid values and logs a warning message if invalid settings are passed.\"\"\"\n    pass\n\n\n@patch(\"utils.settings.open\")\n@patch(\"utils.settings.Loader.update_settings_from_env\")\ndef test_loader_load_no_config_file(_mock_from_env, mock_open, expected_config_location):\n    \"\"\"This code defines a `Loader` class that loads and saves application settings from a JSON file, environment variables, and command-line arguments. It updates the settings of an object with valid values and logs a warning message if invalid settings are passed.\"\"\"\n    pass\n\n\n@patch(\"utils.settings.getenv\")\ndef test_loader_load_from_env(mock_getenv):\n    \"\"\"This code defines a `Loader` class that loads and saves application settings from a JSON file, and updates the settings with values from environment variables and command line arguments.\"\"\"\n    pass\n\n\ndef test_get_git_commit():\n    \"\"\"This code tests the `get_git_commit()` function by comparing its output with the actual commit hash of the current Git repository.\"\"\"\n    pass\n\n\ndef test_get_package_version():\n    \"\"\"This code tests the functionality of a function called `get_package_version()` by asserting that it returns a string with the value \"0.0.0\".\"\"\"\n    pass\n\n\ndef test_get_version():\n    \"\"\"This code is a unit test that checks the version of the software. It uses the `check_output` function to get the current commit hash from Git, and then appends it to the version number. The test asserts that the version returned by the `get_version` function matches the expected value, which includes the commit hash.\"\"\"\n    pass\n","documentation":"The code defines a `Settings` class that holds all the settings for an application, and a `Loader` class that loads and saves application settings from a JSON file. It also updates the settings with values from environment variables and command line arguments."}},{"key":"scip-python python python-stdlib 3.11 io/__init__:","attributes":{"symbol":"scip-python python python-stdlib 3.11 io/__init__:","language":"python"}},{"key":"scip-python python python-stdlib 3.11 io/StringIO#","attributes":{"symbol":"scip-python python python-stdlib 3.11 io/StringIO#","language":"python"}},{"key":"scip-python python python-stdlib 3.11 posixpath/expanduser().","attributes":{"symbol":"scip-python python python-stdlib 3.11 posixpath/expanduser().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 posixpath/expandvars().","attributes":{"symbol":"scip-python python python-stdlib 3.11 posixpath/expandvars().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 posixpath/join().","attributes":{"symbol":"scip-python python python-stdlib 3.11 posixpath/join().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 subprocess/check_output().","attributes":{"symbol":"scip-python python python-stdlib 3.11 subprocess/check_output().","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.settings`/Loader#","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.settings`/Loader#","language":"python","range":[88,0,264,12],"content":"class Loader:\n    \"\"\"\n    Loader for application settings.\n\n    The app settings are stored in a JSON file in the config directory.\n\n    The config directory is determined by the following rules:\n    * If the XDG_CONFIG_HOME environment variable is set (desktop Linux), use that.\n    * If the APPDATA environment variable is set (Windows), use that.\n    * Otherwise, use the POSIX default ~/.<app-name> (MacOS, server Linux).\n\n    Settings from the config file can be overriden by environment variables\n    (all caps) or command line arguments.\n\n    This is a singleton object, use it by importing the instance directly\n    from the module:\n\n    >>> from utils.settings import loader\n\n    This will load the settings automatically.\n\n    To get the config file location:\n\n    >>> from utils.settings import config_path\n    >>> print(config_path)\n\n    To get the current version of GPT Pilot:\n\n    >>> from utils.settings import version\n    >>> print(version)\n    \"\"\"\n\n    APP_NAME = \"GPT Pilot\"\n\n    def __init__(self, settings: Settings):\n        self.config_dir = self.resolve_config_dir()\n        self.config_path = self.config_dir / \"config.json\"\n        self.settings = settings\n\n    def load(self):\n        \"\"\"\n        Load settings from the config file, environment\n        variables and the command-line arguments.\n        \"\"\"\n        self.settings.update(**self._load_config())\n        self.update_settings_from_env(self.settings)\n        self.update_settings_from_args(self.settings)\n\n    @classmethod\n    def resolve_config_dir(cls) -> Path:\n        \"\"\"\n        Figure out where to store the config file(s).\n\n        :return: path to the desired location config directory\n\n        See the clas docstring for details on how the config directory is\n        determined.\n        \"\"\"\n        posix_app_name = cls.APP_NAME.replace(\" \", \"-\").lower()\n\n        xdg_config_home = getenv(\"XDG_CONFIG_HOME\")\n        if xdg_config_home:\n            return Path(xdg_config_home) / Path(posix_app_name)\n\n        if sys.platform == \"win32\" and getenv(\"APPDATA\"):\n            return Path(getenv(\"APPDATA\")) / Path(cls.APP_NAME)\n\n        return Path(\"~\").expanduser() / Path(f\".{posix_app_name}\")\n\n    def _load_config(self) -> dict[str, Any]:\n        \"\"\"\n        Load settings from the config file.\n\n        :returns: dict of settings loaded from the config file\n\n        If the file doesn't exist or there is an error loading the\n        config file, an empty settings dict will be returned.\n\n        This is a low-level method used automatically by `Loader.load()`.\n        \"\"\"\n\n        if not self.config_path.exists():\n            log.debug(f\"Config file not found: {self.config_path}\")\n            return {}\n\n        log.debug(f\"Loading settings from config file: {self.config_path}\")\n        try:\n            with open(self.config_path, \"r\", encoding=\"utf-8\") as fp:\n                return json.load(fp)\n        except Exception as e:\n            log.error(\n                f\"Error loading config file {self.config_path}: {e}\", exc_info=True\n            )\n            return {}\n\n    def _save_config(self, config: dict[str, Any]):\n        \"\"\"\n        Save provided settings to the config file.\n\n        :param config: dict of settings to save\n\n        This is a low-level method that will overwrite the entire\n        config with what's passed in. You should probably use\n        `update()` instead.\n        \"\"\"\n\n        if not self.config_dir.exists():\n            log.debug(f\"Creating config directory: {self.config_dir}\")\n            makedirs(self.config_dir, exist_ok=True)\n\n        log.debug(f\"Saving settings to config file: {self.config_path}\")\n        with open(self.config_path, \"w\", encoding=\"utf-8\") as fp:\n            json.dump(config, fp, indent=2, sort_keys=True)\n\n    def save(self, *args: list[str]):\n        \"\"\"\n        Save one or more settings to the config file, creating it\n        if neccessary.\n\n        :param args: list of setting names to set\n\n        This method will update the current config file with\n        *ONLY* the settings listed here.\n\n        The reason we don't want to store all settings is that some\n        might have been overridden from environment variables or\n        command line arguments, that might be temporary.\n\n        We don't want to overwrite the config file with those\n        (potentially temporary) values.\n        \"\"\"\n\n        settings_from_config = self._load_config()\n        for key in args:\n            try:\n                value = getattr(self.settings, key)\n                settings_from_config[key] = value\n            except AttributeError:\n                pass\n\n        self._save_config(settings_from_config)\n\n    def update_settings_from_env(self, settings: Settings):\n        \"\"\"\n        Update settings from environment variables.\n\n        :param settings: Settings object to update in-place\n\n        Note that environment variable names are hardcoded here,\n        because they're not always the same as the setting names.\n        \"\"\"\n        # Telemetry (see utils.telemetry)\n        telemetry_id = getenv(\"TELEMETRY_ID\")\n        telemetry_endpoint = getenv(\"TELEMETRY_ENDPOINT\")\n\n        if settings.telemetry is None and (telemetry_id or telemetry_endpoint):\n            settings.telemetry = {}\n\n        if telemetry_id:\n            settings.telemetry[\"id\"] = telemetry_id\n        if telemetry_endpoint:\n            settings.telemetry[\"endpoint\"] = telemetry_endpoint\n\n        # OpenAI API key\n        openai_api_key = getenv(\"OPENAI_API_KEY\")\n        settings.openai_api_key = openai_api_key\n\n    def update_settings_from_args(self, _settings: Settings):\n        \"\"\"\n        Update settings from command line arguments.\n\n        :param settings: Settings object to update in-place\n\n        Note: this is not implemented yet, and currently does nothing.\n        \"\"\"\n        # TODO: implement this\n        pass","file":"/pilot/utils/settings.py","fileHash":"0501193abe2886d78c5a219d5b99d381aba84fcb86ace5b8a56046be5874e0d6","hash":"e9d5c99194725c19aea9bbcedea8b8a23981449ca7941c9dd40d477b722ac3ec","processedContent":"class Loader:\n    \"\"\"\n    Loader for application settings.\n\n    The app settings are stored in a JSON file in the config directory.\n\n    The config directory is determined by the following rules:\n    * If the XDG_CONFIG_HOME environment variable is set (desktop Linux), use that.\n    * If the APPDATA environment variable is set (Windows), use that.\n    * Otherwise, use the POSIX default ~/.<app-name> (MacOS, server Linux).\n\n    Settings from the config file can be overriden by environment variables\n    (all caps) or command line arguments.\n\n    This is a singleton object, use it by importing the instance directly\n    from the module:\n\n    >>> from utils.settings import loader\n\n    This will load the settings automatically.\n\n    To get the config file location:\n\n    >>> from utils.settings import config_path\n    >>> print(config_path)\n\n    To get the current version of GPT Pilot:\n\n    >>> from utils.settings import version\n    >>> print(version)\n    \"\"\"\n\n    APP_NAME = \"GPT Pilot\"\n\n    def __init__(self, settings: Settings):\n        \"\"\"This code initializes a new instance of the class, setting up the configuration directory and file path based on environment variables and user preferences.\"\"\"\n        pass\n\n    def load(self):\n        \"\"\"This code defines a method called `load` that loads settings from a JSON file, environment variables, and command-line arguments. It updates the settings of an object with valid values and logs a warning message if invalid settings are passed.\"\"\"\n        pass\n\n    @classmethod\n    def resolve_config_dir(cls) -> Path:\n        \"\"\"This code determines the location where a config file should be stored. It first checks for an XDG_CONFIG_HOME environment variable, and if it exists, uses that as the base directory. If not, it checks for the APPDATA environment variable on Windows, and if it exists, uses that as the base directory. If neither of those exist, it uses the user's home directory with a subdirectory named after the app name.\"\"\"\n        pass\n\n    def _load_config(self) -> dict[str, Any]:\n        \"\"\"This code defines a function called `_load_config()` that loads settings from a JSON file. If the file doesn't exist or there's an error loading the config file, an empty settings dict is returned.\"\"\"\n        pass\n\n    def _save_config(self, config: dict[str, Any]):\n        \"\"\"This code defines a method called `_save_config` that saves a dictionary of settings to a JSON file. It creates the directory if it doesn't exist and then writes the settings to the file using the `json` module.\"\"\"\n        pass\n\n    def save(self, *args: list[str]):\n        \"\"\"This code defines a `save()` method that updates the config file with only the settings listed in the `args` parameter, while preserving any existing settings that might have been overridden from environment variables or command line arguments.\"\"\"\n        pass\n\n    def update_settings_from_env(self, settings: Settings):\n        \"\"\"This code updates a settings object with values from environment variables. It checks for the presence of telemetry and OpenAI API keys, and sets them in the settings object if they are defined.\"\"\"\n        pass\n\n    def update_settings_from_args(self, _settings: Settings):\n        \"\"\"\n        Update settings from command line arguments.\n\n        :param settings: Settings object to update in-place\n\n        Note: this is not implemented yet, and currently does nothing.\n        \"\"\"\n        # TODO: implement this\n        pass","documentation":"This code defines a class called `Loader` that loads and saves application settings from a JSON file. It also updates the settings with values from environment variables and command line arguments."}},{"key":"scip-python python temp indexer `pilot.utils.settings`/Settings#","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.settings`/Settings#","language":"python","range":[19,0,85,63],"content":"class Settings:\n    \"\"\"\n    Application settings\n\n    This object holds all the settings for the application, whether they are\n    loaded from the config file, set via environment variables or the command\n    line arguments.\n\n    Available settings are listed in the `AVAILABLE_SETTINGS` list.\n\n    This is a singleton object, use it by importing the instance\n    directly from the module:\n\n    >>> from utils.settings import settings\n\n    To get a setting:\n\n    >>> settings.openai_api_key\n\n    To get all settings as a dictionary:\n\n    >>> dict(settings)\n\n    To set (update) one setting:\n\n    >>> settings.openai_api_key = \"test_key\"\n\n    To update multiple settings at once:\n\n    >>> settings.update(openai_api_key=\"test_key\", telemetry=None)\n\n    Note: updating settings will not save them to the config file.\n    To do that, use the `loader.save()` method:\n\n    >>> from utils.settings import loader\n    >>> loader.save(\"openai_api_key\", \"telemetry\")\n\n    To see all available settings:\n\n    >>> from utils.settings import AVAILABLE_SETTINGS\n    >>> print(AVAILABLE_SETTINGS)\n    \"\"\"\n\n    # Available settings.\n    __slots__ = AVAILABLE_SETTINGS\n\n    def __init__(self, **kwargs):\n        for key in self.__slots__:\n            setattr(self, key, None)\n\n        self.update(**kwargs)\n\n    def __iter__(self):\n        for key in self.__slots__:\n            yield key, getattr(self, key)\n\n    def update(self, **kwargs):\n        \"\"\"\n        Update settings.\n\n        :param kwargs: settings to update (name=value)\n        \"\"\"\n        for key, value in kwargs.items():\n            try:\n                setattr(self, key, value)\n            except AttributeError:\n                log.warning(f\"Ignoring unknown setting: {key}\")","file":"/pilot/utils/settings.py","fileHash":"0501193abe2886d78c5a219d5b99d381aba84fcb86ace5b8a56046be5874e0d6","hash":"fc97a7030779abb18a57f9a38902d64883b78766870ab660c8513f2fa8ac4401","processedContent":"class Settings:\n    \"\"\"\n    Application settings\n\n    This object holds all the settings for the application, whether they are\n    loaded from the config file, set via environment variables or the command\n    line arguments.\n\n    Available settings are listed in the `AVAILABLE_SETTINGS` list.\n\n    This is a singleton object, use it by importing the instance\n    directly from the module:\n\n    >>> from utils.settings import settings\n\n    To get a setting:\n\n    >>> settings.openai_api_key\n\n    To get all settings as a dictionary:\n\n    >>> dict(settings)\n\n    To set (update) one setting:\n\n    >>> settings.openai_api_key = \"test_key\"\n\n    To update multiple settings at once:\n\n    >>> settings.update(openai_api_key=\"test_key\", telemetry=None)\n\n    Note: updating settings will not save them to the config file.\n    To do that, use the `loader.save()` method:\n\n    >>> from utils.settings import loader\n    >>> loader.save(\"openai_api_key\", \"telemetry\")\n\n    To see all available settings:\n\n    >>> from utils.settings import AVAILABLE_SETTINGS\n    >>> print(AVAILABLE_SETTINGS)\n    \"\"\"\n\n    # Available settings.\n    __slots__ = AVAILABLE_SETTINGS #undefined\n\n    def __init__(self, **kwargs):\n        \"\"\"This code initializes a new instance of the class by setting all attributes to None and then updating them with the provided keyword arguments.\"\"\"\n        pass\n\n    def __iter__(self):\n        \"\"\"This code defines a custom iterator for a class. It iterates over the class's attributes and yields each attribute's name and value as a tuple.\"\"\"\n        pass\n\n    def update(self, **kwargs):\n        \"\"\"\n        Update settings.\n\n        :param kwargs: settings to update (name=value)\n        \"\"\"\n        for key, value in kwargs.items():\n            try:\n                setattr(self, key, value)\n            except AttributeError:\n                log.warning(f\"Ignoring unknown setting: {key}\")","documentation":"This code defines a class called `Settings` that holds all the settings for an application. It allows you to get, set, and update settings using a simple API."}},{"key":"scip-python python temp indexer `pilot.utils.settings`/get_git_commit().","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.settings`/get_git_commit().","language":"python","range":[267,0,288,22],"content":"def get_git_commit() -> Optional[str]:\n    \"\"\"\n    Return the current git commit (if running from a repo).\n\n    :return: commit hash or None if not running from a git repo\n    \"\"\"\n    git_dir = Path(__file__).parent.parent.parent / \".git\"\n    if not git_dir.is_dir():\n        return None\n\n    git_head = git_dir / \"HEAD\"\n    if not git_head.is_file():\n        return None\n\n    with open(git_head, \"r\", encoding=\"utf-8\") as fp:\n        ref = fp.read().strip()\n        if ref.startswith(\"ref: \"):\n            ref = ref[5:]\n            with open(git_dir / ref, \"r\", encoding=\"utf-8\") as fp:\n                return fp.read().strip()\n        else:\n            return ref","file":"/pilot/utils/settings.py","fileHash":"0501193abe2886d78c5a219d5b99d381aba84fcb86ace5b8a56046be5874e0d6","hash":"31c03417f3bb651600de98a47b2a4f2fa8b17a3c2228e31bf056671f87c25d10","processedContent":"def get_git_commit() -> Optional[str]: #undefined\n    \"\"\"\n    Return the current git commit (if running from a repo).\n\n    :return: commit hash or None if not running from a git repo\n    \"\"\"\n    git_dir = Path(__file__).parent.parent.parent / \".git\"\n    \"\"\"\n    scip-python python python-stdlib 3.11 pathlib/Path#: undefined\n    scip-python python temp indexer `pilot.utils.settings`/: undefined\n    scip-python python python-stdlib 3.11 pathlib/PurePath#parent().: undefined\n    scip-python python python-stdlib 3.11 pathlib/PurePath#parent().: undefined\n    scip-python python python-stdlib 3.11 pathlib/PurePath#parent().: undefined\n    \"\"\"\n    if not git_dir.is_dir(): #undefined\n        return None\n\n    git_head = git_dir / \"HEAD\"\n    if not git_head.is_file(): #undefined\n        return None\n\n    with open(git_head, \"r\", encoding=\"utf-8\") as fp:\n        ref = fp.read().strip() #undefined\n        if ref.startswith(\"ref: \"):\n            ref = ref[5:]\n            with open(git_dir / ref, \"r\", encoding=\"utf-8\") as fp:\n                return fp.read().strip() #undefined\n        else:\n            return ref","documentation":"This code defines a function called `get_git_commit()` that returns the current git commit hash if the program is running from a git repository. It does this by reading the `HEAD` file in the `.git` directory and returning the contents of the file, which should be the commit hash. If the program is not running from a git repository, it returns `None`."}},{"key":"scip-python python temp indexer `pilot.utils.settings`/get_package_version().","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.settings`/get_package_version().","language":"python","range":[291,0,299,18],"content":"def get_package_version() -> str:\n    \"\"\"\n    Get package version.\n\n    Note: until we have the packaging set up, this always returns \"0.0.0\".\n\n    :return: package version as defined in setup.py or pyproject.toml\n    \"\"\"\n    return \"0.0.0\"","file":"/pilot/utils/settings.py","fileHash":"0501193abe2886d78c5a219d5b99d381aba84fcb86ace5b8a56046be5874e0d6","hash":"9547f141aa09e06bfa5f09c6a3d4e1362e975fbd1048b1bc0ccd91cff0e8774a","processedContent":"def get_package_version() -> str:\n    \"\"\"\n    Get package version.\n\n    Note: until we have the packaging set up, this always returns \"0.0.0\".\n\n    :return: package version as defined in setup.py or pyproject.toml\n    \"\"\"\n    return \"0.0.0\"","documentation":"This code defines a function called `get_package_version` that returns the version of the package as defined in the setup.py or pyproject.toml file."}},{"key":"scip-python python temp indexer `pilot.utils.settings`/get_version().","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.settings`/get_version().","language":"python","range":[302,0,319,18],"content":"def get_version() -> str:\n    \"\"\"\n    Find and return the current version of GPT Pilot.\n\n    The version string is built from the package version and the current\n    git commit hash (if running from a git repo).\n\n    Example: 0.0.0-gitbf01c19\n\n    :return: version string\n    \"\"\"\n\n    version = get_package_version()\n    commit = get_git_commit()\n    if commit:\n        version = version + \"-git\" + commit[:7]\n\n    return version","file":"/pilot/utils/settings.py","fileHash":"0501193abe2886d78c5a219d5b99d381aba84fcb86ace5b8a56046be5874e0d6","hash":"19f10a44f31d7cc6da2930c59e688d565089647cda650134a1eb634a0b8f0cd7","processedContent":"def get_version() -> str:\n    \"\"\"\n    Find and return the current version of GPT Pilot.\n\n    The version string is built from the package version and the current\n    git commit hash (if running from a git repo).\n\n    Example: 0.0.0-gitbf01c19\n\n    :return: version string\n    \"\"\"\n\n    version = get_package_version() #This code defines a function called `get_package_version` that returns the version of the package as defined in the setup.py or pyproject.toml file.\n    commit = get_git_commit() #This code defines a function called `get_git_commit()` that returns the current git commit hash if the program is running from a git repository. It does this by reading the `HEAD` file in the `.git` directory and returning the contents of the file, which should be the commit hash. If the program is not running from a git repository, it returns `None`.\n    if commit:\n        version = version + \"-git\" + commit[:7]\n\n    return version","documentation":"This code defines a function called `get_version()` that returns the current version of GPT Pilot, which is built from the package version and the current git commit hash (if running from a git repository)."}},{"key":"scip-python python python-stdlib 3.11 sys/platform.platform.","attributes":{"symbol":"scip-python python python-stdlib 3.11 sys/platform.platform.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.settings`/Settings#update().","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.settings`/Settings#update().","language":"python","range":[75,4,85,63],"content":"def update(self, **kwargs):\n        \"\"\"\n        Update settings.\n\n        :param kwargs: settings to update (name=value)\n        \"\"\"\n        for key, value in kwargs.items():\n            try:\n                setattr(self, key, value)\n            except AttributeError:\n                log.warning(f\"Ignoring unknown setting: {key}\")","file":"/pilot/utils/settings.py","fileHash":"0501193abe2886d78c5a219d5b99d381aba84fcb86ace5b8a56046be5874e0d6","hash":"45b0ebecf8e9f6df2b4ca4af249987b960a445417e933a3a00086c9e5ad3a7be","processedContent":"def update(self, **kwargs):\n        \"\"\"\n        Update settings.\n\n        :param kwargs: settings to update (name=value)\n        \"\"\"\n        for key, value in kwargs.items():\n            try:\n                setattr(self, key, value)\n            except AttributeError:\n                log.warning(f\"Ignoring unknown setting: {key}\")","documentation":"This code defines a method called `update` that takes in a variable number of keyword arguments, which are then used to update the settings of an object. The method checks if each setting is valid and updates it accordingly. If an invalid setting is passed, it logs a warning message."}},{"key":"scip-python python temp indexer `pilot.utils.settings`/Loader#config_path.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.settings`/Loader#config_path.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.settings`/Loader#load().","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.settings`/Loader#load().","language":"python","range":[127,4,134,53],"content":"def load(self):\n        \"\"\"\n        Load settings from the config file, environment\n        variables and the command-line arguments.\n        \"\"\"\n        self.settings.update(**self._load_config())\n        self.update_settings_from_env(self.settings)\n        self.update_settings_from_args(self.settings)","file":"/pilot/utils/settings.py","fileHash":"0501193abe2886d78c5a219d5b99d381aba84fcb86ace5b8a56046be5874e0d6","hash":"06ca57322679c45b7add28c59a99acf883e5c02be2497af2a4c0acb074838870","processedContent":"def load(self):\n        \"\"\"\n        Load settings from the config file, environment\n        variables and the command-line arguments.\n        \"\"\"\n        self.settings.update(**self._load_config())\n        \"\"\"\n        scip-python python temp indexer `pilot.utils.settings`/Loader#settings.: undefined\n        scip-python python temp indexer `pilot.utils.settings`/Settings#update().: This code defines a method called `update` that takes in a variable number of keyword arguments, which are then used to update the settings of an object. The method checks if each setting is valid and updates it accordingly. If an invalid setting is passed, it logs a warning message.\n        scip-python python temp indexer `pilot.utils.settings`/Loader#_load_config().: This code defines a function called `_load_config()` that loads settings from a JSON file. If the file doesn't exist or there's an error loading the config file, an empty settings dict is returned.\n        \"\"\"\n        self.update_settings_from_env(self.settings)\n        \"\"\"\n        scip-python python temp indexer `pilot.utils.settings`/Loader#settings.: undefined\n        scip-python python temp indexer `pilot.utils.settings`/Loader#update_settings_from_env().: This code updates a settings object with values from environment variables. It checks for the presence of telemetry and OpenAI API keys, and sets them in the settings object if they are defined.\n        \"\"\"\n        self.update_settings_from_args(self.settings)","documentation":"This code defines a method called `load` that loads settings from a JSON file, environment variables, and command-line arguments. It updates the settings of an object with valid values and logs a warning message if invalid settings are passed."}},{"key":"scip-python python temp indexer `pilot.utils.settings`/Loader#update_settings_from_env().","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.settings`/Loader#update_settings_from_env().","language":"python","range":[230,4,253,48],"content":"def update_settings_from_env(self, settings: Settings):\n        \"\"\"\n        Update settings from environment variables.\n\n        :param settings: Settings object to update in-place\n\n        Note that environment variable names are hardcoded here,\n        because they're not always the same as the setting names.\n        \"\"\"\n        # Telemetry (see utils.telemetry)\n        telemetry_id = getenv(\"TELEMETRY_ID\")\n        telemetry_endpoint = getenv(\"TELEMETRY_ENDPOINT\")\n\n        if settings.telemetry is None and (telemetry_id or telemetry_endpoint):\n            settings.telemetry = {}\n\n        if telemetry_id:\n            settings.telemetry[\"id\"] = telemetry_id\n        if telemetry_endpoint:\n            settings.telemetry[\"endpoint\"] = telemetry_endpoint\n\n        # OpenAI API key\n        openai_api_key = getenv(\"OPENAI_API_KEY\")\n        settings.openai_api_key = openai_api_key","file":"/pilot/utils/settings.py","fileHash":"0501193abe2886d78c5a219d5b99d381aba84fcb86ace5b8a56046be5874e0d6","hash":"5608723d4295adb41786f23d7867f267d49ecb6e32cd47686d066f92ad370fc2","processedContent":"def update_settings_from_env(self, settings: Settings):\n        \"\"\"\n        Update settings from environment variables.\n\n        :param settings: Settings object to update in-place\n\n        Note that environment variable names are hardcoded here,\n        because they're not always the same as the setting names.\n        \"\"\"\n        # Telemetry (see utils.telemetry)\n        telemetry_id = getenv(\"TELEMETRY_ID\") #undefined\n        telemetry_endpoint = getenv(\"TELEMETRY_ENDPOINT\") #undefined\n\n        if settings.telemetry is None and (telemetry_id or telemetry_endpoint):\n            settings.telemetry = {}\n\n        if telemetry_id:\n            settings.telemetry[\"id\"] = telemetry_id\n        if telemetry_endpoint:\n            settings.telemetry[\"endpoint\"] = telemetry_endpoint\n\n        # OpenAI API key\n        openai_api_key = getenv(\"OPENAI_API_KEY\") #undefined\n        settings.openai_api_key = openai_api_key","documentation":"This code updates a settings object with values from environment variables. It checks for the presence of telemetry and OpenAI API keys, and sets them in the settings object if they are defined."}},{"key":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_telemetry_constructor_with_telemetry_enabled().","attributes":{"range":[6,0,16,48],"symbol":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_telemetry_constructor_with_telemetry_enabled().","content":"@patch(\"utils.telemetry.settings\")\ndef test_telemetry_constructor_with_telemetry_enabled(mock_settings):\n    mock_settings.telemetry = {\n        \"id\": \"test-id\",\n        \"endpoint\": \"test-endpoint\",\n        \"enabled\": True,\n    }\n    telemetry = Telemetry()\n    assert telemetry.enabled\n    assert telemetry.telemetry_id == \"test-id\"\n    assert telemetry.endpoint == \"test-endpoint\"","file":"/pilot/test/utils/test_telemetry.py","language":"python","fileHash":"ba9b532293475addd07c34ee1bbea0da8c6e9f75b9a47d0279404d8c6dc6cc35","hash":"884e7ae871558fbb35e824f5f1651defd4ba7c67200a108552b198e1da2e35fc","processedContent":"@patch(\"utils.telemetry.settings\")\ndef test_telemetry_constructor_with_telemetry_enabled(mock_settings):\n    mock_settings.telemetry = {\n        \"id\": \"test-id\",\n        \"endpoint\": \"test-endpoint\",\n        \"enabled\": True,\n    }\n    telemetry = Telemetry() #This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled.\n    assert telemetry.enabled #undefined\n    assert telemetry.telemetry_id == \"test-id\" #undefined\n    assert telemetry.endpoint == \"test-endpoint\"","documentation":"This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled."}},{"key":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_telemetry_constructor_with_telemetry_disabled().","attributes":{"range":[19,0,23,32],"symbol":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_telemetry_constructor_with_telemetry_disabled().","content":"@patch(\"utils.telemetry.settings\")\ndef test_telemetry_constructor_with_telemetry_disabled(mock_settings):\n    mock_settings.telemetry = {\"id\": \"existing-id\", \"enabled\": False}\n    telemetry = Telemetry()\n    assert not telemetry.enabled","file":"/pilot/test/utils/test_telemetry.py","language":"python","fileHash":"ba9b532293475addd07c34ee1bbea0da8c6e9f75b9a47d0279404d8c6dc6cc35","hash":"c5630a8fffd8704d7b1fd7589bc32190e17968a6c0e94e9447504cfa7c3069e8","processedContent":"@patch(\"utils.telemetry.settings\")\ndef test_telemetry_constructor_with_telemetry_disabled(mock_settings):\n    mock_settings.telemetry = {\"id\": \"existing-id\", \"enabled\": False}\n    telemetry = Telemetry() #This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled.\n    assert not telemetry.enabled","documentation":"This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled."}},{"key":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_telemetry_constructor_with_telemetry_not_configured().","attributes":{"range":[26,0,30,32],"symbol":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_telemetry_constructor_with_telemetry_not_configured().","content":"@patch(\"utils.telemetry.settings\")\ndef test_telemetry_constructor_with_telemetry_not_configured(mock_settings):\n    mock_settings.telemetry = None\n    telemetry = Telemetry()\n    assert not telemetry.enabled","file":"/pilot/test/utils/test_telemetry.py","language":"python","fileHash":"ba9b532293475addd07c34ee1bbea0da8c6e9f75b9a47d0279404d8c6dc6cc35","hash":"a2039821c77fa620ea26dcf7e837bf307612e613326a400e155e5af66e614172","processedContent":"@patch(\"utils.telemetry.settings\")\ndef test_telemetry_constructor_with_telemetry_not_configured(mock_settings):\n    mock_settings.telemetry = None\n    telemetry = Telemetry() #This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled.\n    assert not telemetry.enabled","documentation":"This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled."}},{"key":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_telemetry_constructor_logging_enabled().","attributes":{"range":[33,0,46,5],"symbol":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_telemetry_constructor_logging_enabled().","content":"@patch(\"utils.telemetry.config_path\", \"/path/to/config\")\n@patch(\"utils.telemetry.settings\")\ndef test_telemetry_constructor_logging_enabled(mock_settings, caplog):\n    caplog.set_level(\"DEBUG\")\n    mock_settings.telemetry = {\n        \"id\": \"test-id\",\n        \"endpoint\": \"test-endpoint\",\n        \"enabled\": True,\n    }\n    Telemetry()\n    assert (\n        \"Anonymous telemetry enabled (id=test-id), configure or disable it in /path/to/config\"\n        in caplog.text\n    )","file":"/pilot/test/utils/test_telemetry.py","language":"python","fileHash":"ba9b532293475addd07c34ee1bbea0da8c6e9f75b9a47d0279404d8c6dc6cc35","hash":"861a41f4fa4153459f00507f8c44853bc80df8ce3f79b6f4d442419c73cd8825","processedContent":"@patch(\"utils.telemetry.config_path\", \"/path/to/config\")\n@patch(\"utils.telemetry.settings\")\ndef test_telemetry_constructor_logging_enabled(mock_settings, caplog):\n    caplog.set_level(\"DEBUG\")\n    mock_settings.telemetry = {\n        \"id\": \"test-id\",\n        \"endpoint\": \"test-endpoint\",\n        \"enabled\": True,\n    }\n    Telemetry() #This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled.\n    assert (\n        \"Anonymous telemetry enabled (id=test-id), configure or disable it in /path/to/config\"\n        in caplog.text\n    )","documentation":"This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled."}},{"key":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_clear_data_resets_data().","attributes":{"range":[49,0,70,39],"symbol":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_clear_data_resets_data().","content":"@patch(\"utils.telemetry.sys.platform\", \"test_platform\")\n@patch(\"utils.telemetry.sys.version\", \"test_version\")\n@patch(\"utils.telemetry.version\", \"test_pilot_version\")\ndef test_clear_data_resets_data():\n    telemetry = Telemetry()\n    empty = Telemetry()\n\n    telemetry.data = {\n        \"model\": \"test-model\",\n        \"num_llm_requests\": 10,\n        \"num_llm_tokens\": 100,\n        \"num_steps\": 5,\n        \"elapsed_time\": 123.45,\n        \"end_result\": \"success\",\n        \"user_feedback\": \"Great!\",\n        \"user_contact\": \"user@example.com\",\n    }\n    assert telemetry.data != empty.data\n\n    telemetry.clear_data()\n\n    assert telemetry.data == empty.data","file":"/pilot/test/utils/test_telemetry.py","language":"python","fileHash":"ba9b532293475addd07c34ee1bbea0da8c6e9f75b9a47d0279404d8c6dc6cc35","hash":"d3cd6281a9b776438a0fc837bcadb223a1c7b567fb8841433c2c19d0207a38c5","processedContent":"@patch(\"utils.telemetry.sys.platform\", \"test_platform\")\n@patch(\"utils.telemetry.sys.version\", \"test_version\")\n@patch(\"utils.telemetry.version\", \"test_pilot_version\")\ndef test_clear_data_resets_data():\n    telemetry = Telemetry() #This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled.\n    empty = Telemetry() #This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled.\n\n    telemetry.data = { #undefined\n        \"model\": \"test-model\",\n        \"num_llm_requests\": 10,\n        \"num_llm_tokens\": 100,\n        \"num_steps\": 5,\n        \"elapsed_time\": 123.45,\n        \"end_result\": \"success\",\n        \"user_feedback\": \"Great!\",\n        \"user_contact\": \"user@example.com\",\n    }\n    assert telemetry.data != empty.data\n    \"\"\"\n    scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#data.: undefined\n    scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#data.: undefined\n    \"\"\"\n\n    telemetry.clear_data() #This code defines a function called `clear_data` that resets all telemetry data to default values. It sets various attributes to None or empty strings, and also checks the system platform to set additional attributes like the Linux distribution name if running on Linux.\n\n    assert telemetry.data == empty.data","documentation":"The code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled. The `clear_data` function resets all telemetry data to default values."}},{"key":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_clear_data_resets_times().","attributes":{"range":[73,0,81,37],"symbol":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_clear_data_resets_times().","content":"def test_clear_data_resets_times():\n    telemetry = Telemetry()\n    telemetry.start_time = 1234567890\n    telemetry.end_time = 1234567895\n\n    telemetry.clear_data()\n\n    assert telemetry.start_time is None\n    assert telemetry.end_time is None","file":"/pilot/test/utils/test_telemetry.py","language":"python","fileHash":"ba9b532293475addd07c34ee1bbea0da8c6e9f75b9a47d0279404d8c6dc6cc35","hash":"348f90f0a32540856f4d667320997c658bf3ff496e50450d987fcd8d14ab3636","processedContent":"def test_clear_data_resets_times():\n    telemetry = Telemetry() #This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled.\n    telemetry.start_time = 1234567890 #undefined\n    telemetry.end_time = 1234567895 #undefined\n\n    telemetry.clear_data() #This code defines a function called `clear_data` that resets all telemetry data to default values. It sets various attributes to None or empty strings, and also checks the system platform to set additional attributes like the Linux distribution name if running on Linux.\n\n    assert telemetry.start_time is None #undefined\n    assert telemetry.end_time is None","documentation":"The code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It has a function called `clear_data` that resets all telemetry data to default values, including setting various attributes to None or empty strings and checking the system platform to set additional attributes like the Linux distribution name if running on Linux."}},{"key":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_telemetry_setup_already_enabled().","attributes":{"range":[84,0,90,34],"symbol":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_telemetry_setup_already_enabled().","content":"@patch(\"utils.telemetry.settings\")\n@patch(\"utils.telemetry.uuid4\")\ndef test_telemetry_setup_already_enabled(mock_uuid4, mock_settings):\n    mock_settings.telemetry = {\"id\": \"existing-id\", \"enabled\": True}\n    telemetry = Telemetry()\n    telemetry.setup()\n    mock_uuid4.assert_not_called()","file":"/pilot/test/utils/test_telemetry.py","language":"python","fileHash":"ba9b532293475addd07c34ee1bbea0da8c6e9f75b9a47d0279404d8c6dc6cc35","hash":"8f0cf4f9d070f56cd74864dce8c6a4f8cbc569d29cbec1591dddbd68b182bcd0","processedContent":"@patch(\"utils.telemetry.settings\")\n@patch(\"utils.telemetry.uuid4\")\ndef test_telemetry_setup_already_enabled(mock_uuid4, mock_settings):\n    mock_settings.telemetry = {\"id\": \"existing-id\", \"enabled\": True}\n    telemetry = Telemetry() #This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled.\n    telemetry.setup() #This code sets up a new unique telemetry ID and default phone-home endpoint. It should only be called once at initial GPT-Pilot setup.\n    mock_uuid4.assert_not_called()","documentation":"This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled."}},{"key":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_telemetry_setup_enable().","attributes":{"range":[93,0,108,5],"symbol":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_telemetry_setup_enable().","content":"@patch(\"utils.telemetry.settings\")\n@patch(\"utils.telemetry.uuid4\")\ndef test_telemetry_setup_enable(mock_uuid4, mock_settings):\n    mock_settings.telemetry = {\"id\": \"existing-id\", \"enabled\": False}\n    mock_uuid4.return_value = \"fake-id\"\n    telemetry = Telemetry()\n    telemetry.setup()\n\n    mock_uuid4.assert_called_once()\n    assert telemetry.telemetry_id == \"telemetry-fake-id\"\n\n    assert mock_settings.telemetry == {\n        \"id\": \"telemetry-fake-id\",\n        \"endpoint\": Telemetry.DEFAULT_ENDPOINT,\n        \"enabled\": True,\n    }","file":"/pilot/test/utils/test_telemetry.py","language":"python","fileHash":"ba9b532293475addd07c34ee1bbea0da8c6e9f75b9a47d0279404d8c6dc6cc35","hash":"a5f74e18dfe97c5b8721a8941c521be2f8c4f9ff89d01d42ad08c033f75b74ae","processedContent":"@patch(\"utils.telemetry.settings\")\n@patch(\"utils.telemetry.uuid4\")\ndef test_telemetry_setup_enable(mock_uuid4, mock_settings):\n    mock_settings.telemetry = {\"id\": \"existing-id\", \"enabled\": False}\n    mock_uuid4.return_value = \"fake-id\"\n    telemetry = Telemetry() #This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled.\n    telemetry.setup() #This code sets up a new unique telemetry ID and default phone-home endpoint. It should only be called once at initial GPT-Pilot setup.\n\n    mock_uuid4.assert_called_once()\n    assert telemetry.telemetry_id == \"telemetry-fake-id\" #undefined\n\n    assert mock_settings.telemetry == {\n        \"id\": \"telemetry-fake-id\",\n        \"endpoint\": Telemetry.DEFAULT_ENDPOINT,\n        \"\"\"\n        scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#: This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled.\n        scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#DEFAULT_ENDPOINT.: undefined\n        \"\"\"\n        \"enabled\": True,\n    }","documentation":"This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled."}},{"key":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_set_ignores_data_if_disabled().","attributes":{"range":[111,0,116,54],"symbol":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_set_ignores_data_if_disabled().","content":"@patch(\"utils.telemetry.settings\")\ndef test_set_ignores_data_if_disabled(mock_settings):\n    mock_settings.telemetry = {\"id\": \"existing-id\", \"enabled\": False}\n    telemetry = Telemetry()\n    telemetry.set(\"model\", \"fake-model\")\n    assert telemetry.data.get(\"model\") != \"fake-model\"","file":"/pilot/test/utils/test_telemetry.py","language":"python","fileHash":"ba9b532293475addd07c34ee1bbea0da8c6e9f75b9a47d0279404d8c6dc6cc35","hash":"4ede38051ef09989a8b9676154e03685ebede9a62f7cff7213a602a7f880bd70","processedContent":"@patch(\"utils.telemetry.settings\")\ndef test_set_ignores_data_if_disabled(mock_settings):\n    mock_settings.telemetry = {\"id\": \"existing-id\", \"enabled\": False}\n    telemetry = Telemetry() #This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled.\n    telemetry.set(\"model\", \"fake-model\")\n    assert telemetry.data.get(\"model\") != \"fake-model\"","documentation":"This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled."}},{"key":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_set_updates_data_if_enabled().","attributes":{"range":[119,0,128,50],"symbol":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_set_updates_data_if_enabled().","content":"@patch(\"utils.telemetry.settings\")\ndef test_set_updates_data_if_enabled(mock_settings):\n    mock_settings.telemetry = {\n        \"id\": \"test-id\",\n        \"endpoint\": \"test-endpoint\",\n        \"enabled\": True,\n    }\n    telemetry = Telemetry()\n    telemetry.set(\"model\", \"fake-model\")\n    assert telemetry.data[\"model\"] == \"fake-model\"","file":"/pilot/test/utils/test_telemetry.py","language":"python","fileHash":"ba9b532293475addd07c34ee1bbea0da8c6e9f75b9a47d0279404d8c6dc6cc35","hash":"8d319c43858520a3fceaf870744cbc9dba2b7c9a736f9f137d0bb44b673158e9","processedContent":"@patch(\"utils.telemetry.settings\")\ndef test_set_updates_data_if_enabled(mock_settings):\n    mock_settings.telemetry = {\n        \"id\": \"test-id\",\n        \"endpoint\": \"test-endpoint\",\n        \"enabled\": True,\n    }\n    telemetry = Telemetry() #This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled.\n    telemetry.set(\"model\", \"fake-model\")\n    assert telemetry.data[\"model\"] == \"fake-model\"","documentation":"This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled."}},{"key":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_set_ignores_unknown_field().","attributes":{"range":[131,0,140,52],"symbol":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_set_ignores_unknown_field().","content":"@patch(\"utils.telemetry.settings\")\ndef test_set_ignores_unknown_field(mock_settings):\n    mock_settings.telemetry = {\n        \"id\": \"test-id\",\n        \"endpoint\": \"test-endpoint\",\n        \"enabled\": True,\n    }\n    telemetry = Telemetry()\n    telemetry.set(\"nonexistent_field\", \"value\")\n    assert \"nonexistent_field\" not in telemetry.data","file":"/pilot/test/utils/test_telemetry.py","language":"python","fileHash":"ba9b532293475addd07c34ee1bbea0da8c6e9f75b9a47d0279404d8c6dc6cc35","hash":"3045ee9ecfeff12fa69672b2f6d458b1fb4266d590b32039c16973afb7147acd","processedContent":"@patch(\"utils.telemetry.settings\")\ndef test_set_ignores_unknown_field(mock_settings):\n    mock_settings.telemetry = {\n        \"id\": \"test-id\",\n        \"endpoint\": \"test-endpoint\",\n        \"enabled\": True,\n    }\n    telemetry = Telemetry() #This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled.\n    telemetry.set(\"nonexistent_field\", \"value\")\n    assert \"nonexistent_field\" not in telemetry.data","documentation":"This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled."}},{"key":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_inc_increments_known_data_field().","attributes":{"range":[143,0,152,51],"symbol":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_inc_increments_known_data_field().","content":"@patch(\"utils.telemetry.settings\")\ndef test_inc_increments_known_data_field(mock_settings):\n    mock_settings.telemetry = {\n        \"id\": \"test-id\",\n        \"endpoint\": \"test-endpoint\",\n        \"enabled\": True,\n    }\n    telemetry = Telemetry()\n    telemetry.inc(\"num_llm_requests\", 42)\n    assert telemetry.data[\"num_llm_requests\"] == 42","file":"/pilot/test/utils/test_telemetry.py","language":"python","fileHash":"ba9b532293475addd07c34ee1bbea0da8c6e9f75b9a47d0279404d8c6dc6cc35","hash":"aebeb5716f0fccbafc86df20864d6faa5ad050ae45ff3ebefb2b1c795948d1d2","processedContent":"@patch(\"utils.telemetry.settings\")\ndef test_inc_increments_known_data_field(mock_settings):\n    mock_settings.telemetry = {\n        \"id\": \"test-id\",\n        \"endpoint\": \"test-endpoint\",\n        \"enabled\": True,\n    }\n    telemetry = Telemetry() #This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled.\n    telemetry.inc(\"num_llm_requests\", 42) #The code defines a function called `inc` that increases the value of a telemetry data field by a specified amount. It checks if the field is known and if it's enabled, and logs an error message if the field is not known or the telemetry is disabled.\n    assert telemetry.data[\"num_llm_requests\"] == 42","documentation":"This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled. The `inc` function increases the value of a telemetry data field by a specified amount, checking if the field is known and if it's enabled."}},{"key":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_inc_does_not_increment_when_disabled().","attributes":{"range":[155,0,160,50],"symbol":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_inc_does_not_increment_when_disabled().","content":"@patch(\"utils.telemetry.settings\")\ndef test_inc_does_not_increment_when_disabled(mock_settings):\n    mock_settings.telemetry = {\"id\": \"existing-id\", \"enabled\": False}\n    telemetry = Telemetry()\n    telemetry.inc(\"num_llm_requests\", 42)\n    assert telemetry.data[\"num_llm_requests\"] == 0","file":"/pilot/test/utils/test_telemetry.py","language":"python","fileHash":"ba9b532293475addd07c34ee1bbea0da8c6e9f75b9a47d0279404d8c6dc6cc35","hash":"1a94506bb374aa1f6aef37725cbe05781ce6fc82f91e517618fbacda5a48f897","processedContent":"@patch(\"utils.telemetry.settings\")\ndef test_inc_does_not_increment_when_disabled(mock_settings):\n    mock_settings.telemetry = {\"id\": \"existing-id\", \"enabled\": False}\n    telemetry = Telemetry() #This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled.\n    telemetry.inc(\"num_llm_requests\", 42) #The code defines a function called `inc` that increases the value of a telemetry data field by a specified amount. It checks if the field is known and if it's enabled, and logs an error message if the field is not known or the telemetry is disabled.\n    assert telemetry.data[\"num_llm_requests\"] == 0","documentation":"This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled. The `inc` function increases the value of a telemetry data field by a specified amount, but only if the field is known and telemetry is enabled."}},{"key":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_inc_ignores_unknown_data_field().","attributes":{"range":[163,0,172,48],"symbol":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_inc_ignores_unknown_data_field().","content":"@patch(\"utils.telemetry.settings\")\ndef test_inc_ignores_unknown_data_field(mock_settings):\n    mock_settings.telemetry = {\n        \"id\": \"test-id\",\n        \"endpoint\": \"test-endpoint\",\n        \"enabled\": True,\n    }\n    telemetry = Telemetry()\n    telemetry.inc(\"unknown_field\")\n    assert \"unknown_field\" not in telemetry.data","file":"/pilot/test/utils/test_telemetry.py","language":"python","fileHash":"ba9b532293475addd07c34ee1bbea0da8c6e9f75b9a47d0279404d8c6dc6cc35","hash":"40f1a239733ae9bad449dfb78c4dc279fb0e8bbd63de46728fc9aec7c5f46324","processedContent":"@patch(\"utils.telemetry.settings\")\ndef test_inc_ignores_unknown_data_field(mock_settings):\n    mock_settings.telemetry = {\n        \"id\": \"test-id\",\n        \"endpoint\": \"test-endpoint\",\n        \"enabled\": True,\n    }\n    telemetry = Telemetry() #This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled.\n    telemetry.inc(\"unknown_field\") #The code defines a function called `inc` that increases the value of a telemetry data field by a specified amount. It checks if the field is known and if it's enabled, and logs an error message if the field is not known or the telemetry is disabled.\n    assert \"unknown_field\" not in telemetry.data","documentation":"This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled. The `inc` function increases the value of a telemetry data field by a specified amount, but only if the field is known and telemetry is enabled."}},{"key":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_start_with_telemetry_disabled().","attributes":{"range":[175,0,180,39],"symbol":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_start_with_telemetry_disabled().","content":"@patch(\"utils.telemetry.settings\")\ndef test_start_with_telemetry_disabled(mock_settings):\n    mock_settings.telemetry = {\"id\": \"existing-id\", \"enabled\": False}\n    telemetry = Telemetry()\n    telemetry.start()\n    assert telemetry.start_time is None","file":"/pilot/test/utils/test_telemetry.py","language":"python","fileHash":"ba9b532293475addd07c34ee1bbea0da8c6e9f75b9a47d0279404d8c6dc6cc35","hash":"7aee4099d9a9cfd6911bfa587743229e4adeb96ed115338494878bfca0324c5f","processedContent":"@patch(\"utils.telemetry.settings\")\ndef test_start_with_telemetry_disabled(mock_settings):\n    mock_settings.telemetry = {\"id\": \"existing-id\", \"enabled\": False}\n    telemetry = Telemetry() #This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled.\n    telemetry.start() #This code records the start of an application creation process by setting a start time variable to the current time.\n    assert telemetry.start_time is None","documentation":"This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled."}},{"key":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_start_with_telemetry_enabled().","attributes":{"range":[183,0,196,41],"symbol":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_start_with_telemetry_enabled().","content":"@patch(\"utils.telemetry.time\")\n@patch(\"utils.telemetry.settings\")\ndef test_start_with_telemetry_enabled(mock_settings, mock_time):\n    mock_settings.telemetry = {\n        \"id\": \"test-id\",\n        \"endpoint\": \"test-endpoint\",\n        \"enabled\": True,\n    }\n    mock_time.time.return_value = 1234.0\n\n    telemetry = Telemetry()\n\n    telemetry.start()\n    assert telemetry.start_time == 1234.0","file":"/pilot/test/utils/test_telemetry.py","language":"python","fileHash":"ba9b532293475addd07c34ee1bbea0da8c6e9f75b9a47d0279404d8c6dc6cc35","hash":"0a2e10a8e192aa7f0df4c808259dc9b28cb7f9b7c3b0ad2676a84f2a7797b6d2","processedContent":"@patch(\"utils.telemetry.time\")\n@patch(\"utils.telemetry.settings\")\ndef test_start_with_telemetry_enabled(mock_settings, mock_time):\n    mock_settings.telemetry = {\n        \"id\": \"test-id\",\n        \"endpoint\": \"test-endpoint\",\n        \"enabled\": True,\n    }\n    mock_time.time.return_value = 1234.0\n\n    telemetry = Telemetry() #This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled.\n\n    telemetry.start() #This code records the start of an application creation process by setting a start time variable to the current time.\n    assert telemetry.start_time == 1234.0","documentation":"This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled."}},{"key":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_stop_when_not_enabled_does_nothing().","attributes":{"range":[199,0,206,37],"symbol":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_stop_when_not_enabled_does_nothing().","content":"@patch(\"utils.telemetry.settings\")\ndef test_stop_when_not_enabled_does_nothing(mock_settings):\n    mock_settings.telemetry = {\"id\": \"existing-id\", \"enabled\": False}\n\n    telemetry = Telemetry()\n    telemetry.stop()\n\n    assert telemetry.end_time is None","file":"/pilot/test/utils/test_telemetry.py","language":"python","fileHash":"ba9b532293475addd07c34ee1bbea0da8c6e9f75b9a47d0279404d8c6dc6cc35","hash":"e1cbfcabae0afbed073609e333cc10bf409e5770a421d1fce55390faf8c1941d","processedContent":"@patch(\"utils.telemetry.settings\")\ndef test_stop_when_not_enabled_does_nothing(mock_settings):\n    mock_settings.telemetry = {\"id\": \"existing-id\", \"enabled\": False}\n\n    telemetry = Telemetry() #This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled.\n    telemetry.stop() #This code records the end of an application creation process and calculates the elapsed time between the start and end times.\n\n    assert telemetry.end_time is None","documentation":"This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled."}},{"key":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_stop_without_start_logs_error().","attributes":{"range":[209,0,218,48],"symbol":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_stop_without_start_logs_error().","content":"@patch(\"utils.telemetry.settings\")\ndef test_stop_without_start_logs_error(mock_settings, caplog):\n    mock_settings.telemetry = {\n        \"id\": \"test-id\",\n        \"endpoint\": \"test-endpoint\",\n        \"enabled\": True,\n    }\n    telemetry = Telemetry()\n    telemetry.stop()\n    assert \"it was never started\" in caplog.text","file":"/pilot/test/utils/test_telemetry.py","language":"python","fileHash":"ba9b532293475addd07c34ee1bbea0da8c6e9f75b9a47d0279404d8c6dc6cc35","hash":"f47caf8ce00a68e91162343c727646f6a003c88dda03e9edd6e487c164100070","processedContent":"@patch(\"utils.telemetry.settings\")\ndef test_stop_without_start_logs_error(mock_settings, caplog):\n    mock_settings.telemetry = {\n        \"id\": \"test-id\",\n        \"endpoint\": \"test-endpoint\",\n        \"enabled\": True,\n    }\n    telemetry = Telemetry() #This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled.\n    telemetry.stop() #This code records the end of an application creation process and calculates the elapsed time between the start and end times.\n    assert \"it was never started\" in caplog.text","documentation":"This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled."}},{"key":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_stop_calculates_elapsed_time().","attributes":{"range":[221,0,235,46],"symbol":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_stop_calculates_elapsed_time().","content":"@patch(\"utils.telemetry.time\")\n@patch(\"utils.telemetry.settings\")\ndef test_stop_calculates_elapsed_time(mock_settings, mock_time):\n    mock_settings.telemetry = {\n        \"id\": \"test-id\",\n        \"endpoint\": \"test-endpoint\",\n        \"enabled\": True,\n    }\n    mock_time.time.side_effect = [1234, 1235]\n    telemetry = Telemetry()\n\n    telemetry.start()\n    telemetry.stop()\n\n    assert telemetry.data[\"elapsed_time\"] == 1","file":"/pilot/test/utils/test_telemetry.py","language":"python","fileHash":"ba9b532293475addd07c34ee1bbea0da8c6e9f75b9a47d0279404d8c6dc6cc35","hash":"44d7f330052074085dc4d969ca8663997ea2a572980bd241f6bf53dbadb39021","processedContent":"@patch(\"utils.telemetry.time\")\n@patch(\"utils.telemetry.settings\")\ndef test_stop_calculates_elapsed_time(mock_settings, mock_time):\n    mock_settings.telemetry = {\n        \"id\": \"test-id\",\n        \"endpoint\": \"test-endpoint\",\n        \"enabled\": True,\n    }\n    mock_time.time.side_effect = [1234, 1235]\n    telemetry = Telemetry() #This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled.\n\n    telemetry.start() #This code records the start of an application creation process by setting a start time variable to the current time.\n    telemetry.stop() #This code records the end of an application creation process and calculates the elapsed time between the start and end times.\n\n    assert telemetry.data[\"elapsed_time\"] == 1","documentation":"This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled."}},{"key":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_send_enabled_and_successful().","attributes":{"range":[238,0,257,77],"symbol":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_send_enabled_and_successful().","content":"@patch(\"utils.telemetry.requests.post\")\n@patch(\"utils.telemetry.settings\")\ndef test_send_enabled_and_successful(mock_settings, mock_post, caplog):\n    caplog.set_level(\"DEBUG\")\n    mock_settings.telemetry = {\n        \"id\": \"test-id\",\n        \"endpoint\": \"test-endpoint\",\n        \"enabled\": True,\n    }\n\n    telemetry = Telemetry()\n    telemetry.send()\n\n    expected = {\n        \"pathId\": \"test-id\",\n        \"event\": \"pilot-telemetry\",\n        \"data\": telemetry.data,\n    }\n    mock_post.assert_called_once_with(\"test-endpoint\", json=expected)\n    assert \"sending anonymous telemetry data to test-endpoint\" in caplog.text","file":"/pilot/test/utils/test_telemetry.py","language":"python","fileHash":"ba9b532293475addd07c34ee1bbea0da8c6e9f75b9a47d0279404d8c6dc6cc35","hash":"8473f5def781b4ee84499026cd34c86067d048ab9643899681aa495d3f28b28a","processedContent":"@patch(\"utils.telemetry.requests.post\")\n@patch(\"utils.telemetry.settings\")\ndef test_send_enabled_and_successful(mock_settings, mock_post, caplog):\n    caplog.set_level(\"DEBUG\")\n    mock_settings.telemetry = {\n        \"id\": \"test-id\",\n        \"endpoint\": \"test-endpoint\",\n        \"enabled\": True,\n    }\n\n    telemetry = Telemetry() #This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled.\n    telemetry.send() #This code sends telemetry data to a phone-home endpoint, with the ability to clear all telemetry data after sending it.\n\n    expected = {\n        \"pathId\": \"test-id\",\n        \"event\": \"pilot-telemetry\",\n        \"data\": telemetry.data, #undefined\n    }\n    mock_post.assert_called_once_with(\"test-endpoint\", json=expected)\n    assert \"sending anonymous telemetry data to test-endpoint\" in caplog.text","documentation":"This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled."}},{"key":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_send_enabled_but_post_fails().","attributes":{"range":[260,0,278,72],"symbol":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_send_enabled_but_post_fails().","content":"@patch(\"utils.telemetry.requests.post\")\n@patch(\"utils.telemetry.settings\")\ndef test_send_enabled_but_post_fails(mock_settings, mock_post):\n    mock_settings.telemetry = {\n        \"id\": \"test-id\",\n        \"endpoint\": \"test-endpoint\",\n        \"enabled\": True,\n    }\n    mock_post.side_effect = Exception(\"Connection error\")\n\n    telemetry = Telemetry()\n    telemetry.send()\n\n    expected = {\n        \"pathId\": \"test-id\",\n        \"event\": \"pilot-telemetry\",\n        \"data\": telemetry.data,\n    }\n    mock_post.assert_called_once_with(telemetry.endpoint, json=expected)","file":"/pilot/test/utils/test_telemetry.py","language":"python","fileHash":"ba9b532293475addd07c34ee1bbea0da8c6e9f75b9a47d0279404d8c6dc6cc35","hash":"61acbc88ab0592c108a50f0df34319c28c3f60383c8abc521b5ddc8b8a59f69d","processedContent":"@patch(\"utils.telemetry.requests.post\")\n@patch(\"utils.telemetry.settings\")\ndef test_send_enabled_but_post_fails(mock_settings, mock_post):\n    mock_settings.telemetry = {\n        \"id\": \"test-id\",\n        \"endpoint\": \"test-endpoint\",\n        \"enabled\": True,\n    }\n    mock_post.side_effect = Exception(\"Connection error\")\n\n    telemetry = Telemetry() #This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled.\n    telemetry.send() #This code sends telemetry data to a phone-home endpoint, with the ability to clear all telemetry data after sending it.\n\n    expected = {\n        \"pathId\": \"test-id\",\n        \"event\": \"pilot-telemetry\",\n        \"data\": telemetry.data, #undefined\n    }\n    mock_post.assert_called_once_with(telemetry.endpoint, json=expected)","documentation":"This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled."}},{"key":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_send_not_enabled().","attributes":{"range":[281,0,293,33],"symbol":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_send_not_enabled().","content":"@patch(\"utils.telemetry.requests.post\")\n@patch(\"utils.telemetry.settings\")\ndef test_send_not_enabled(mock_settings, mock_post):\n    mock_settings.telemetry = {\n        \"id\": \"test-id\",\n        \"endpoint\": \"test-endpoint\",\n        \"enabled\": False,\n    }\n\n    telemetry = Telemetry()\n    telemetry.send()\n\n    mock_post.assert_not_called()","file":"/pilot/test/utils/test_telemetry.py","language":"python","fileHash":"ba9b532293475addd07c34ee1bbea0da8c6e9f75b9a47d0279404d8c6dc6cc35","hash":"e2d64a3a6246213c2226388a346659895af4a43fecee54e725f8f2f1eae2e901","processedContent":"@patch(\"utils.telemetry.requests.post\")\n@patch(\"utils.telemetry.settings\")\ndef test_send_not_enabled(mock_settings, mock_post):\n    mock_settings.telemetry = {\n        \"id\": \"test-id\",\n        \"endpoint\": \"test-endpoint\",\n        \"enabled\": False,\n    }\n\n    telemetry = Telemetry() #This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled.\n    telemetry.send() #This code sends telemetry data to a phone-home endpoint, with the ability to clear all telemetry data after sending it.\n\n    mock_post.assert_not_called()","documentation":"This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled."}},{"key":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_send_no_endpoint_configured().","attributes":{"range":[296,0,305,73],"symbol":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_send_no_endpoint_configured().","content":"@patch(\"utils.telemetry.requests.post\")\n@patch(\"utils.telemetry.settings\")\ndef test_send_no_endpoint_configured(mock_settings, mock_post, caplog):\n    mock_settings.telemetry = {\"id\": \"test-id\", \"endpoint\": None, \"enabled\": True}\n\n    telemetry = Telemetry()\n    telemetry.send()\n\n    mock_post.assert_not_called()\n    assert \"cannot send telemetry, no endpoint configured\" in caplog.text","file":"/pilot/test/utils/test_telemetry.py","language":"python","fileHash":"ba9b532293475addd07c34ee1bbea0da8c6e9f75b9a47d0279404d8c6dc6cc35","hash":"d1389cc0c70ca77528b4721a1d23b60858bcb1121e06c55191ba5ab7283f80ee","processedContent":"@patch(\"utils.telemetry.requests.post\")\n@patch(\"utils.telemetry.settings\")\ndef test_send_no_endpoint_configured(mock_settings, mock_post, caplog):\n    mock_settings.telemetry = {\"id\": \"test-id\", \"endpoint\": None, \"enabled\": True}\n\n    telemetry = Telemetry() #This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled.\n    telemetry.send() #This code sends telemetry data to a phone-home endpoint, with the ability to clear all telemetry data after sending it.\n\n    mock_post.assert_not_called()\n    assert \"cannot send telemetry, no endpoint configured\" in caplog.text","documentation":"This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled."}},{"key":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_send_clears_data_after_sending().","attributes":{"range":[308,0,321,42],"symbol":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_send_clears_data_after_sending().","content":"@patch(\"utils.telemetry.requests.post\")\n@patch(\"utils.telemetry.settings\")\ndef test_send_clears_data_after_sending(mock_settings, _mock_post):\n    mock_settings.telemetry = {\n        \"id\": \"test-id\",\n        \"endpoint\": \"test-endpoint\",\n        \"enabled\": True,\n    }\n\n    telemetry = Telemetry()\n    telemetry.data[\"model\"] = \"test-model\"\n    telemetry.send()\n\n    assert telemetry.data[\"model\"] is None","file":"/pilot/test/utils/test_telemetry.py","language":"python","fileHash":"ba9b532293475addd07c34ee1bbea0da8c6e9f75b9a47d0279404d8c6dc6cc35","hash":"bdc8d700f6edc3c0ea6bb4ebd0723924c2ab15f4cee20aeb8e0078ed4f37e5c5","processedContent":"@patch(\"utils.telemetry.requests.post\")\n@patch(\"utils.telemetry.settings\")\ndef test_send_clears_data_after_sending(mock_settings, _mock_post):\n    mock_settings.telemetry = {\n        \"id\": \"test-id\",\n        \"endpoint\": \"test-endpoint\",\n        \"enabled\": True,\n    }\n\n    telemetry = Telemetry() #This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled.\n    telemetry.data[\"model\"] = \"test-model\" #undefined\n    telemetry.send() #This code sends telemetry data to a phone-home endpoint, with the ability to clear all telemetry data after sending it.\n\n    assert telemetry.data[\"model\"] is None","documentation":"This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled."}},{"key":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/__init__:","range":[0,0,322,0],"content":"from unittest.mock import patch\n\n\nfrom utils.telemetry import Telemetry\n\n\n@patch(\"utils.telemetry.settings\")\ndef test_telemetry_constructor_with_telemetry_enabled(mock_settings):\n    mock_settings.telemetry = {\n        \"id\": \"test-id\",\n        \"endpoint\": \"test-endpoint\",\n        \"enabled\": True,\n    }\n    telemetry = Telemetry()\n    assert telemetry.enabled\n    assert telemetry.telemetry_id == \"test-id\"\n    assert telemetry.endpoint == \"test-endpoint\"\n\n\n@patch(\"utils.telemetry.settings\")\ndef test_telemetry_constructor_with_telemetry_disabled(mock_settings):\n    mock_settings.telemetry = {\"id\": \"existing-id\", \"enabled\": False}\n    telemetry = Telemetry()\n    assert not telemetry.enabled\n\n\n@patch(\"utils.telemetry.settings\")\ndef test_telemetry_constructor_with_telemetry_not_configured(mock_settings):\n    mock_settings.telemetry = None\n    telemetry = Telemetry()\n    assert not telemetry.enabled\n\n\n@patch(\"utils.telemetry.config_path\", \"/path/to/config\")\n@patch(\"utils.telemetry.settings\")\ndef test_telemetry_constructor_logging_enabled(mock_settings, caplog):\n    caplog.set_level(\"DEBUG\")\n    mock_settings.telemetry = {\n        \"id\": \"test-id\",\n        \"endpoint\": \"test-endpoint\",\n        \"enabled\": True,\n    }\n    Telemetry()\n    assert (\n        \"Anonymous telemetry enabled (id=test-id), configure or disable it in /path/to/config\"\n        in caplog.text\n    )\n\n\n@patch(\"utils.telemetry.sys.platform\", \"test_platform\")\n@patch(\"utils.telemetry.sys.version\", \"test_version\")\n@patch(\"utils.telemetry.version\", \"test_pilot_version\")\ndef test_clear_data_resets_data():\n    telemetry = Telemetry()\n    empty = Telemetry()\n\n    telemetry.data = {\n        \"model\": \"test-model\",\n        \"num_llm_requests\": 10,\n        \"num_llm_tokens\": 100,\n        \"num_steps\": 5,\n        \"elapsed_time\": 123.45,\n        \"end_result\": \"success\",\n        \"user_feedback\": \"Great!\",\n        \"user_contact\": \"user@example.com\",\n    }\n    assert telemetry.data != empty.data\n\n    telemetry.clear_data()\n\n    assert telemetry.data == empty.data\n\n\ndef test_clear_data_resets_times():\n    telemetry = Telemetry()\n    telemetry.start_time = 1234567890\n    telemetry.end_time = 1234567895\n\n    telemetry.clear_data()\n\n    assert telemetry.start_time is None\n    assert telemetry.end_time is None\n\n\n@patch(\"utils.telemetry.settings\")\n@patch(\"utils.telemetry.uuid4\")\ndef test_telemetry_setup_already_enabled(mock_uuid4, mock_settings):\n    mock_settings.telemetry = {\"id\": \"existing-id\", \"enabled\": True}\n    telemetry = Telemetry()\n    telemetry.setup()\n    mock_uuid4.assert_not_called()\n\n\n@patch(\"utils.telemetry.settings\")\n@patch(\"utils.telemetry.uuid4\")\ndef test_telemetry_setup_enable(mock_uuid4, mock_settings):\n    mock_settings.telemetry = {\"id\": \"existing-id\", \"enabled\": False}\n    mock_uuid4.return_value = \"fake-id\"\n    telemetry = Telemetry()\n    telemetry.setup()\n\n    mock_uuid4.assert_called_once()\n    assert telemetry.telemetry_id == \"telemetry-fake-id\"\n\n    assert mock_settings.telemetry == {\n        \"id\": \"telemetry-fake-id\",\n        \"endpoint\": Telemetry.DEFAULT_ENDPOINT,\n        \"enabled\": True,\n    }\n\n\n@patch(\"utils.telemetry.settings\")\ndef test_set_ignores_data_if_disabled(mock_settings):\n    mock_settings.telemetry = {\"id\": \"existing-id\", \"enabled\": False}\n    telemetry = Telemetry()\n    telemetry.set(\"model\", \"fake-model\")\n    assert telemetry.data.get(\"model\") != \"fake-model\"\n\n\n@patch(\"utils.telemetry.settings\")\ndef test_set_updates_data_if_enabled(mock_settings):\n    mock_settings.telemetry = {\n        \"id\": \"test-id\",\n        \"endpoint\": \"test-endpoint\",\n        \"enabled\": True,\n    }\n    telemetry = Telemetry()\n    telemetry.set(\"model\", \"fake-model\")\n    assert telemetry.data[\"model\"] == \"fake-model\"\n\n\n@patch(\"utils.telemetry.settings\")\ndef test_set_ignores_unknown_field(mock_settings):\n    mock_settings.telemetry = {\n        \"id\": \"test-id\",\n        \"endpoint\": \"test-endpoint\",\n        \"enabled\": True,\n    }\n    telemetry = Telemetry()\n    telemetry.set(\"nonexistent_field\", \"value\")\n    assert \"nonexistent_field\" not in telemetry.data\n\n\n@patch(\"utils.telemetry.settings\")\ndef test_inc_increments_known_data_field(mock_settings):\n    mock_settings.telemetry = {\n        \"id\": \"test-id\",\n        \"endpoint\": \"test-endpoint\",\n        \"enabled\": True,\n    }\n    telemetry = Telemetry()\n    telemetry.inc(\"num_llm_requests\", 42)\n    assert telemetry.data[\"num_llm_requests\"] == 42\n\n\n@patch(\"utils.telemetry.settings\")\ndef test_inc_does_not_increment_when_disabled(mock_settings):\n    mock_settings.telemetry = {\"id\": \"existing-id\", \"enabled\": False}\n    telemetry = Telemetry()\n    telemetry.inc(\"num_llm_requests\", 42)\n    assert telemetry.data[\"num_llm_requests\"] == 0\n\n\n@patch(\"utils.telemetry.settings\")\ndef test_inc_ignores_unknown_data_field(mock_settings):\n    mock_settings.telemetry = {\n        \"id\": \"test-id\",\n        \"endpoint\": \"test-endpoint\",\n        \"enabled\": True,\n    }\n    telemetry = Telemetry()\n    telemetry.inc(\"unknown_field\")\n    assert \"unknown_field\" not in telemetry.data\n\n\n@patch(\"utils.telemetry.settings\")\ndef test_start_with_telemetry_disabled(mock_settings):\n    mock_settings.telemetry = {\"id\": \"existing-id\", \"enabled\": False}\n    telemetry = Telemetry()\n    telemetry.start()\n    assert telemetry.start_time is None\n\n\n@patch(\"utils.telemetry.time\")\n@patch(\"utils.telemetry.settings\")\ndef test_start_with_telemetry_enabled(mock_settings, mock_time):\n    mock_settings.telemetry = {\n        \"id\": \"test-id\",\n        \"endpoint\": \"test-endpoint\",\n        \"enabled\": True,\n    }\n    mock_time.time.return_value = 1234.0\n\n    telemetry = Telemetry()\n\n    telemetry.start()\n    assert telemetry.start_time == 1234.0\n\n\n@patch(\"utils.telemetry.settings\")\ndef test_stop_when_not_enabled_does_nothing(mock_settings):\n    mock_settings.telemetry = {\"id\": \"existing-id\", \"enabled\": False}\n\n    telemetry = Telemetry()\n    telemetry.stop()\n\n    assert telemetry.end_time is None\n\n\n@patch(\"utils.telemetry.settings\")\ndef test_stop_without_start_logs_error(mock_settings, caplog):\n    mock_settings.telemetry = {\n        \"id\": \"test-id\",\n        \"endpoint\": \"test-endpoint\",\n        \"enabled\": True,\n    }\n    telemetry = Telemetry()\n    telemetry.stop()\n    assert \"it was never started\" in caplog.text\n\n\n@patch(\"utils.telemetry.time\")\n@patch(\"utils.telemetry.settings\")\ndef test_stop_calculates_elapsed_time(mock_settings, mock_time):\n    mock_settings.telemetry = {\n        \"id\": \"test-id\",\n        \"endpoint\": \"test-endpoint\",\n        \"enabled\": True,\n    }\n    mock_time.time.side_effect = [1234, 1235]\n    telemetry = Telemetry()\n\n    telemetry.start()\n    telemetry.stop()\n\n    assert telemetry.data[\"elapsed_time\"] == 1\n\n\n@patch(\"utils.telemetry.requests.post\")\n@patch(\"utils.telemetry.settings\")\ndef test_send_enabled_and_successful(mock_settings, mock_post, caplog):\n    caplog.set_level(\"DEBUG\")\n    mock_settings.telemetry = {\n        \"id\": \"test-id\",\n        \"endpoint\": \"test-endpoint\",\n        \"enabled\": True,\n    }\n\n    telemetry = Telemetry()\n    telemetry.send()\n\n    expected = {\n        \"pathId\": \"test-id\",\n        \"event\": \"pilot-telemetry\",\n        \"data\": telemetry.data,\n    }\n    mock_post.assert_called_once_with(\"test-endpoint\", json=expected)\n    assert \"sending anonymous telemetry data to test-endpoint\" in caplog.text\n\n\n@patch(\"utils.telemetry.requests.post\")\n@patch(\"utils.telemetry.settings\")\ndef test_send_enabled_but_post_fails(mock_settings, mock_post):\n    mock_settings.telemetry = {\n        \"id\": \"test-id\",\n        \"endpoint\": \"test-endpoint\",\n        \"enabled\": True,\n    }\n    mock_post.side_effect = Exception(\"Connection error\")\n\n    telemetry = Telemetry()\n    telemetry.send()\n\n    expected = {\n        \"pathId\": \"test-id\",\n        \"event\": \"pilot-telemetry\",\n        \"data\": telemetry.data,\n    }\n    mock_post.assert_called_once_with(telemetry.endpoint, json=expected)\n\n\n@patch(\"utils.telemetry.requests.post\")\n@patch(\"utils.telemetry.settings\")\ndef test_send_not_enabled(mock_settings, mock_post):\n    mock_settings.telemetry = {\n        \"id\": \"test-id\",\n        \"endpoint\": \"test-endpoint\",\n        \"enabled\": False,\n    }\n\n    telemetry = Telemetry()\n    telemetry.send()\n\n    mock_post.assert_not_called()\n\n\n@patch(\"utils.telemetry.requests.post\")\n@patch(\"utils.telemetry.settings\")\ndef test_send_no_endpoint_configured(mock_settings, mock_post, caplog):\n    mock_settings.telemetry = {\"id\": \"test-id\", \"endpoint\": None, \"enabled\": True}\n\n    telemetry = Telemetry()\n    telemetry.send()\n\n    mock_post.assert_not_called()\n    assert \"cannot send telemetry, no endpoint configured\" in caplog.text\n\n\n@patch(\"utils.telemetry.requests.post\")\n@patch(\"utils.telemetry.settings\")\ndef test_send_clears_data_after_sending(mock_settings, _mock_post):\n    mock_settings.telemetry = {\n        \"id\": \"test-id\",\n        \"endpoint\": \"test-endpoint\",\n        \"enabled\": True,\n    }\n\n    telemetry = Telemetry()\n    telemetry.data[\"model\"] = \"test-model\"\n    telemetry.send()\n\n    assert telemetry.data[\"model\"] is None\n","file":"/pilot/test/utils/test_telemetry.py","language":"python","fileHash":"ba9b532293475addd07c34ee1bbea0da8c6e9f75b9a47d0279404d8c6dc6cc35","hash":"ba9b532293475addd07c34ee1bbea0da8c6e9f75b9a47d0279404d8c6dc6cc35","processedContent":"from unittest.mock import patch #undefined\n\n\nfrom utils.telemetry import Telemetry\n\"\"\"\nscip-python python temp indexer `pilot.utils.telemetry`/__init__:: This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server.\nscip-python python temp indexer `pilot.utils.telemetry`/Telemetry#: This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled.\n\"\"\"\n\n\n@patch(\"utils.telemetry.settings\")\ndef test_telemetry_constructor_with_telemetry_enabled(mock_settings):\n    \"\"\"This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled.\"\"\"\n    pass\n\n\n@patch(\"utils.telemetry.settings\")\ndef test_telemetry_constructor_with_telemetry_disabled(mock_settings):\n    \"\"\"This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled.\"\"\"\n    pass\n\n\n@patch(\"utils.telemetry.settings\")\ndef test_telemetry_constructor_with_telemetry_not_configured(mock_settings):\n    \"\"\"This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled.\"\"\"\n    pass\n\n\n@patch(\"utils.telemetry.config_path\", \"/path/to/config\")\n@patch(\"utils.telemetry.settings\")\ndef test_telemetry_constructor_logging_enabled(mock_settings, caplog):\n    \"\"\"This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled.\"\"\"\n    pass\n\n\n@patch(\"utils.telemetry.sys.platform\", \"test_platform\")\n@patch(\"utils.telemetry.sys.version\", \"test_version\")\n@patch(\"utils.telemetry.version\", \"test_pilot_version\")\ndef test_clear_data_resets_data():\n    \"\"\"The code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled. The `clear_data` function resets all telemetry data to default values.\"\"\"\n    pass\n\n\ndef test_clear_data_resets_times():\n    \"\"\"The code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It has a function called `clear_data` that resets all telemetry data to default values, including setting various attributes to None or empty strings and checking the system platform to set additional attributes like the Linux distribution name if running on Linux.\"\"\"\n    pass\n\n\n@patch(\"utils.telemetry.settings\")\n@patch(\"utils.telemetry.uuid4\")\ndef test_telemetry_setup_already_enabled(mock_uuid4, mock_settings):\n    \"\"\"This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled.\"\"\"\n    pass\n\n\n@patch(\"utils.telemetry.settings\")\n@patch(\"utils.telemetry.uuid4\")\ndef test_telemetry_setup_enable(mock_uuid4, mock_settings):\n    \"\"\"This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled.\"\"\"\n    pass\n\n\n@patch(\"utils.telemetry.settings\")\ndef test_set_ignores_data_if_disabled(mock_settings):\n    \"\"\"This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled.\"\"\"\n    pass\n\n\n@patch(\"utils.telemetry.settings\")\ndef test_set_updates_data_if_enabled(mock_settings):\n    \"\"\"This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled.\"\"\"\n    pass\n\n\n@patch(\"utils.telemetry.settings\")\ndef test_set_ignores_unknown_field(mock_settings):\n    \"\"\"This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled.\"\"\"\n    pass\n\n\n@patch(\"utils.telemetry.settings\")\ndef test_inc_increments_known_data_field(mock_settings):\n    \"\"\"This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled. The `inc` function increases the value of a telemetry data field by a specified amount, checking if the field is known and if it's enabled.\"\"\"\n    pass\n\n\n@patch(\"utils.telemetry.settings\")\ndef test_inc_does_not_increment_when_disabled(mock_settings):\n    \"\"\"This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled. The `inc` function increases the value of a telemetry data field by a specified amount, but only if the field is known and telemetry is enabled.\"\"\"\n    pass\n\n\n@patch(\"utils.telemetry.settings\")\ndef test_inc_ignores_unknown_data_field(mock_settings):\n    \"\"\"This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled. The `inc` function increases the value of a telemetry data field by a specified amount, but only if the field is known and telemetry is enabled.\"\"\"\n    pass\n\n\n@patch(\"utils.telemetry.settings\")\ndef test_start_with_telemetry_disabled(mock_settings):\n    \"\"\"This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled.\"\"\"\n    pass\n\n\n@patch(\"utils.telemetry.time\")\n@patch(\"utils.telemetry.settings\")\ndef test_start_with_telemetry_enabled(mock_settings, mock_time):\n    \"\"\"This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled.\"\"\"\n    pass\n\n\n@patch(\"utils.telemetry.settings\")\ndef test_stop_when_not_enabled_does_nothing(mock_settings):\n    \"\"\"This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled.\"\"\"\n    pass\n\n\n@patch(\"utils.telemetry.settings\")\ndef test_stop_without_start_logs_error(mock_settings, caplog):\n    \"\"\"This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled.\"\"\"\n    pass\n\n\n@patch(\"utils.telemetry.time\")\n@patch(\"utils.telemetry.settings\")\ndef test_stop_calculates_elapsed_time(mock_settings, mock_time):\n    \"\"\"This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled.\"\"\"\n    pass\n\n\n@patch(\"utils.telemetry.requests.post\")\n@patch(\"utils.telemetry.settings\")\ndef test_send_enabled_and_successful(mock_settings, mock_post, caplog):\n    \"\"\"This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled.\"\"\"\n    pass\n\n\n@patch(\"utils.telemetry.requests.post\")\n@patch(\"utils.telemetry.settings\")\ndef test_send_enabled_but_post_fails(mock_settings, mock_post):\n    \"\"\"This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled.\"\"\"\n    pass\n\n\n@patch(\"utils.telemetry.requests.post\")\n@patch(\"utils.telemetry.settings\")\ndef test_send_not_enabled(mock_settings, mock_post):\n    \"\"\"This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled.\"\"\"\n    pass\n\n\n@patch(\"utils.telemetry.requests.post\")\n@patch(\"utils.telemetry.settings\")\ndef test_send_no_endpoint_configured(mock_settings, mock_post, caplog):\n    \"\"\"This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled.\"\"\"\n    pass\n\n\n@patch(\"utils.telemetry.requests.post\")\n@patch(\"utils.telemetry.settings\")\ndef test_send_clears_data_after_sending(mock_settings, _mock_post):\n    \"\"\"This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled.\"\"\"\n    pass\n","documentation":"The code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled."}},{"key":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#","language":"python","range":[13,0,230,29],"content":"class Telemetry:\n    \"\"\"\n    Anonymous telemetry.\n\n    See ../../docs/TELEMETRY.md for more information on what is collected\n    and how to disable it on a configuration level.\n\n    This class is a singleton, use the `telemetry` global variable to access it:\n\n    >>> from utils.telemetry import telemetry\n\n    To set up telemetry (only once, at GPT-Pilot setup), use the\n    `telemetry.setup()` method:\n\n    >>> telemetry.setup()\n\n    To record start of application creation process:\n\n    >>> telemetry.start()\n\n    To record data or increase counters:\n\n    >>> telemetry.set(\"model\", \"gpt-4\")\n    >>> telemetry.inc(\"num_llm_requests\", 5)\n\n    To stop recording and send the data:\n\n    >>> telemetry.stop()\n    >>> telemetry.send()\n\n    Note: all methods are no-ops if telemetry is not enabled.\n    \"\"\"\n\n    DEFAULT_ENDPOINT = \"https://api.pythagora.io/telemetry\"\n\n    def __init__(self):\n        self.enabled = False\n        self.telemetry_id = None\n        self.endpoint = None\n        self.clear_data()\n\n        if settings.telemetry is not None:\n            self.enabled = settings.telemetry.get(\"enabled\", False)\n            self.telemetry_id = settings.telemetry.get(\"id\")\n            self.endpoint = settings.telemetry.get(\"endpoint\")\n\n        if self.enabled:\n            log.debug(\n                f\"Anonymous telemetry enabled (id={self.telemetry_id}), \"\n                f\"configure or disable it in {config_path}\"\n            )\n\n    def clear_data(self):\n        \"\"\"\n        Reset all telemetry data to default values.\n        \"\"\"\n        self.data = {\n            # System platform\n            \"platform\": sys.platform,\n            # Python version used for GPT Pilot\n            \"python_version\": sys.version,\n            # GPT Pilot version\n            \"pilot_version\": version,\n            # LLM used\n            \"model\": None,\n            # Initial prompt\n            \"initial_prompt\": None,\n            # Number of LLM requests made\n            \"num_llm_requests\": 0,\n            # Number of tokens used for LLM requests\n            \"num_llm_tokens\": 0,\n            # Number of development steps\n            \"num_steps\": 0,\n            # Number of commands run during development\n            \"num_commands\": 0,\n            # Number of times a human input was required during development\n            \"num_inputs\": 0,\n            # Number of seconds elapsed during development\n            \"elapsed_time\": 0,\n            # End result of development (\"success\", \"failure\", or None if interrupted)\n            \"end_result\": None,\n            # Whether the project is continuation of a previous project\n            \"is_continuation\": False,\n            # Optional user feedback\n            \"user_feedback\": None,\n            # Optional user contact email\n            \"user_contact\": None,\n        }\n        if sys.platform == \"linux\":\n            try:\n                import distro\n                self.data[\"linux_distro\"] = distro.name(pretty=True)\n            except Exception as err:\n                log.debug(f\"Error getting Linux distribution info: {err}\", exc_info=True)\n\n        self.start_time = None\n        self.end_time = None\n\n    def setup(self):\n        \"\"\"\n        Set up a new unique telemetry ID and default phone-home endpoint.\n\n        This should only be called once at initial GPT-Pilot setup.\n        \"\"\"\n        if self.enabled:\n            log.debug(\"Telemetry already set up, not doing anything\")\n            return\n\n        self.telemetry_id = f\"telemetry-{uuid4()}\"\n        self.endpoint = self.DEFAULT_ENDPOINT\n        self.enabled = True\n        log.debug(\n            f\"Telemetry.setup(): setting up anonymous telemetry (id={self.telemetry_id})\"\n        )\n\n        settings.telemetry = {\n            \"id\": self.telemetry_id,\n            \"endpoint\": self.endpoint,\n            \"enabled\": self.enabled,\n        }\n\n    def set(self, name: str, value: Any):\n        \"\"\"\n        Set a telemetry data field to a value.\n\n        :param name: name of the telemetry data field\n        :param value: value to set the field to\n\n        Note: only known data fields may be set, see `Telemetry.clear_data()` for a list.\n        \"\"\"\n        if not self.enabled:\n            return\n\n        if name not in self.data:\n            log.error(\n                f\"Telemetry.record(): ignoring unknown telemetry data field: {name}\"\n            )\n            return\n\n        self.data[name] = value\n\n    def inc(self, name: str, value: int = 1):\n        \"\"\"\n        Increase a telemetry data field by a value.\n\n        :param name: name of the telemetry data field\n        :param value: value to increase the field by (default: 1)\n\n        Note: only known data fields may be increased, see `Telemetry.clear_data()` for a list.\n        \"\"\"\n        if not self.enabled:\n            return\n\n        if name not in self.data:\n            log.error(\n                f\"Telemetry.increase(): ignoring unknown telemetry data field: {name}\"\n            )\n            return\n\n        self.data[name] += value\n\n    def start(self):\n        \"\"\"\n        Record start of application creation process.\n        \"\"\"\n        if not self.enabled:\n            return\n\n        self.start_time = time.time()\n        self.end_time = None\n\n    def stop(self):\n        \"\"\"\n        Record end of application creation process.\n        \"\"\"\n        if not self.enabled:\n            return\n\n        if self.start_time is None:\n            log.error(\"Telemetry.stop(): cannot stop telemetry, it was never started\")\n            return\n\n        self.end_time = time.time()\n        self.data[\"elapsed_time\"] = self.end_time - self.start_time\n\n    def send(self, event:str = \"pilot-telemetry\"):\n        \"\"\"\n        Send telemetry data to the phone-home endpoint.\n\n        Note: this method clears all telemetry data after sending it.\n        \"\"\"\n        if not self.enabled:\n            return\n\n        if self.endpoint is None:\n            log.error(\"Telemetry.send(): cannot send telemetry, no endpoint configured\")\n            return\n\n        if self.start_time is not None and self.end_time is None:\n            self.stop()\n\n        payload = {\n            \"pathId\": self.telemetry_id,\n            \"event\": event,\n            \"data\": self.data,\n        }\n\n        log.debug(\n            f\"Telemetry.send(): sending anonymous telemetry data to {self.endpoint}\"\n        )\n        try:\n            requests.post(self.endpoint, json=payload)\n        except Exception as e:\n            log.error(\n                f\"Telemetry.send(): failed to send telemetry data: {e}\", exc_info=True\n            )\n        finally:\n            self.clear_data()","file":"/pilot/utils/telemetry.py","fileHash":"500b9e782c148aa6137a800cd6924871cd09de08b047ebfbb66ad8b67400a963","hash":"5388351ba29ad287ffc8101e2e268447c42943659b79b08e8916c72cbe66cf72","processedContent":"class Telemetry:\n    \"\"\"\n    Anonymous telemetry.\n\n    See ../../docs/TELEMETRY.md for more information on what is collected\n    and how to disable it on a configuration level.\n\n    This class is a singleton, use the `telemetry` global variable to access it:\n\n    >>> from utils.telemetry import telemetry\n\n    To set up telemetry (only once, at GPT-Pilot setup), use the\n    `telemetry.setup()` method:\n\n    >>> telemetry.setup()\n\n    To record start of application creation process:\n\n    >>> telemetry.start()\n\n    To record data or increase counters:\n\n    >>> telemetry.set(\"model\", \"gpt-4\")\n    >>> telemetry.inc(\"num_llm_requests\", 5)\n\n    To stop recording and send the data:\n\n    >>> telemetry.stop()\n    >>> telemetry.send()\n\n    Note: all methods are no-ops if telemetry is not enabled.\n    \"\"\"\n\n    DEFAULT_ENDPOINT = \"https://api.pythagora.io/telemetry\"\n\n    def __init__(self):\n        \"\"\"This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled.\"\"\"\n        pass\n\n    def clear_data(self):\n        \"\"\"This code defines a function called `clear_data` that resets all telemetry data to default values. It sets various attributes to None or empty strings, and also checks the system platform to set additional attributes like the Linux distribution name if running on Linux.\"\"\"\n        pass\n\n    def setup(self):\n        \"\"\"This code sets up a new unique telemetry ID and default phone-home endpoint. It should only be called once at initial GPT-Pilot setup.\"\"\"\n        pass\n\n    def set(self, name: str, value: Any):\n        \"\"\"This code defines a method called `set` that allows you to set the value of a telemetry data field. It checks if the field is known and if it's enabled, and then sets the value.\"\"\"\n        pass\n\n    def inc(self, name: str, value: int = 1):\n        \"\"\"The code defines a function called `inc` that increases the value of a telemetry data field by a specified amount. It checks if the field is known and if it's enabled, and logs an error message if the field is not known or the telemetry is disabled.\"\"\"\n        pass\n\n    def start(self):\n        \"\"\"This code records the start of an application creation process by setting a start time variable to the current time.\"\"\"\n        pass\n\n    def stop(self):\n        \"\"\"This code records the end of an application creation process and calculates the elapsed time between the start and end times.\"\"\"\n        pass\n\n    def send(self, event:str = \"pilot-telemetry\"):\n        \"\"\"\n        Send telemetry data to the phone-home endpoint.\n\n        Note: this method clears all telemetry data after sending it.\n        \"\"\"\n        if not self.enabled:\n            return\n\n        if self.endpoint is None:\n            log.error(\"Telemetry.send(): cannot send telemetry, no endpoint configured\")\n            return\n\n        if self.start_time is not None and self.end_time is None:\n            self.stop()\n\n        payload = {\n            \"pathId\": self.telemetry_id,\n            \"event\": event,\n            \"data\": self.data,\n        }\n\n        log.debug(\n            f\"Telemetry.send(): sending anonymous telemetry data to {self.endpoint}\"\n        )\n        try:\n            requests.post(self.endpoint, json=payload)\n        except Exception as e:\n            log.error(\n                f\"Telemetry.send(): failed to send telemetry data: {e}\", exc_info=True\n            )\n        finally:\n            self.clear_data()","documentation":"This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled."}},{"key":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#enabled.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#enabled.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#telemetry_id.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#telemetry_id.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#endpoint.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#endpoint.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#data.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#data.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#clear_data().","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#clear_data().","language":"python","range":[65,4,109,28],"content":"def clear_data(self):\n        \"\"\"\n        Reset all telemetry data to default values.\n        \"\"\"\n        self.data = {\n            # System platform\n            \"platform\": sys.platform,\n            # Python version used for GPT Pilot\n            \"python_version\": sys.version,\n            # GPT Pilot version\n            \"pilot_version\": version,\n            # LLM used\n            \"model\": None,\n            # Initial prompt\n            \"initial_prompt\": None,\n            # Number of LLM requests made\n            \"num_llm_requests\": 0,\n            # Number of tokens used for LLM requests\n            \"num_llm_tokens\": 0,\n            # Number of development steps\n            \"num_steps\": 0,\n            # Number of commands run during development\n            \"num_commands\": 0,\n            # Number of times a human input was required during development\n            \"num_inputs\": 0,\n            # Number of seconds elapsed during development\n            \"elapsed_time\": 0,\n            # End result of development (\"success\", \"failure\", or None if interrupted)\n            \"end_result\": None,\n            # Whether the project is continuation of a previous project\n            \"is_continuation\": False,\n            # Optional user feedback\n            \"user_feedback\": None,\n            # Optional user contact email\n            \"user_contact\": None,\n        }\n        if sys.platform == \"linux\":\n            try:\n                import distro\n                self.data[\"linux_distro\"] = distro.name(pretty=True)\n            except Exception as err:\n                log.debug(f\"Error getting Linux distribution info: {err}\", exc_info=True)\n\n        self.start_time = None\n        self.end_time = None","file":"/pilot/utils/telemetry.py","fileHash":"500b9e782c148aa6137a800cd6924871cd09de08b047ebfbb66ad8b67400a963","hash":"07d0fde7f947c49a1074b246fd1fbb727871896f7133fd02c00225db08a6472f","processedContent":"def clear_data(self):\n        \"\"\"\n        Reset all telemetry data to default values.\n        \"\"\"\n        self.data = {\n            # System platform\n            \"platform\": sys.platform,\n            \"\"\"\n            scip-python python python-stdlib 3.11 sys/__init__:: undefined\n            scip-python python python-stdlib 3.11 sys/platform.platform.: undefined\n            \"\"\"\n            # Python version used for GPT Pilot\n            \"python_version\": sys.version,\n            \"\"\"\n            scip-python python python-stdlib 3.11 sys/__init__:: undefined\n            scip-python python python-stdlib 3.11 sys/version.version.: undefined\n            \"\"\"\n            # GPT Pilot version\n            \"pilot_version\": version, #undefined\n            # LLM used\n            \"model\": None,\n            # Initial prompt\n            \"initial_prompt\": None,\n            # Number of LLM requests made\n            \"num_llm_requests\": 0,\n            # Number of tokens used for LLM requests\n            \"num_llm_tokens\": 0,\n            # Number of development steps\n            \"num_steps\": 0,\n            # Number of commands run during development\n            \"num_commands\": 0,\n            # Number of times a human input was required during development\n            \"num_inputs\": 0,\n            # Number of seconds elapsed during development\n            \"elapsed_time\": 0,\n            # End result of development (\"success\", \"failure\", or None if interrupted)\n            \"end_result\": None,\n            # Whether the project is continuation of a previous project\n            \"is_continuation\": False,\n            # Optional user feedback\n            \"user_feedback\": None,\n            # Optional user contact email\n            \"user_contact\": None,\n        }\n        if sys.platform == \"linux\":\n        \"\"\"\n        scip-python python python-stdlib 3.11 sys/__init__:: undefined\n        scip-python python python-stdlib 3.11 sys/platform.platform.: undefined\n        \"\"\"\n            try:\n                import distro\n                self.data[\"linux_distro\"] = distro.name(pretty=True) #undefined\n            except Exception as err:\n                log.debug(f\"Error getting Linux distribution info: {err}\", exc_info=True)\n                \"\"\"\n                scip-python python temp indexer `pilot.utils.telemetry`/log.: undefined\n                scip-python python python-stdlib 3.11 logging/Logger#debug().: undefined\n                \"\"\"\n\n        self.start_time = None\n        self.end_time = None","documentation":"This code defines a function called `clear_data` that resets all telemetry data to default values. It sets various attributes to None or empty strings, and also checks the system platform to set additional attributes like the Linux distribution name if running on Linux."}},{"key":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#start_time.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#start_time.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#end_time.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#end_time.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#DEFAULT_ENDPOINT.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#DEFAULT_ENDPOINT.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#inc().","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#inc().","language":"python","range":[154,4,172,32],"content":"def inc(self, name: str, value: int = 1):\n        \"\"\"\n        Increase a telemetry data field by a value.\n\n        :param name: name of the telemetry data field\n        :param value: value to increase the field by (default: 1)\n\n        Note: only known data fields may be increased, see `Telemetry.clear_data()` for a list.\n        \"\"\"\n        if not self.enabled:\n            return\n\n        if name not in self.data:\n            log.error(\n                f\"Telemetry.increase(): ignoring unknown telemetry data field: {name}\"\n            )\n            return\n\n        self.data[name] += value","file":"/pilot/utils/telemetry.py","fileHash":"500b9e782c148aa6137a800cd6924871cd09de08b047ebfbb66ad8b67400a963","hash":"3ad7c9b02089178a5480815fb10cc2871d2b75fe1cb4f592556dc8d072b79924","processedContent":"def inc(self, name: str, value: int = 1):\n        \"\"\"\n        Increase a telemetry data field by a value.\n\n        :param name: name of the telemetry data field\n        :param value: value to increase the field by (default: 1)\n\n        Note: only known data fields may be increased, see `Telemetry.clear_data()` for a list.\n        \"\"\"\n        if not self.enabled: #undefined\n            return\n\n        if name not in self.data: #undefined\n            log.error(\n            \"\"\"\n            scip-python python temp indexer `pilot.utils.telemetry`/log.: undefined\n            scip-python python python-stdlib 3.11 logging/Logger#error().: undefined\n            \"\"\"\n                f\"Telemetry.increase(): ignoring unknown telemetry data field: {name}\"\n            )\n            return\n\n        self.data[name] += value","documentation":"The code defines a function called `inc` that increases the value of a telemetry data field by a specified amount. It checks if the field is known and if it's enabled, and logs an error message if the field is not known or the telemetry is disabled."}},{"key":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#stop().","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#stop().","language":"python","range":[184,4,196,67],"content":"def stop(self):\n        \"\"\"\n        Record end of application creation process.\n        \"\"\"\n        if not self.enabled:\n            return\n\n        if self.start_time is None:\n            log.error(\"Telemetry.stop(): cannot stop telemetry, it was never started\")\n            return\n\n        self.end_time = time.time()\n        self.data[\"elapsed_time\"] = self.end_time - self.start_time","file":"/pilot/utils/telemetry.py","fileHash":"500b9e782c148aa6137a800cd6924871cd09de08b047ebfbb66ad8b67400a963","hash":"42f7370da41f5153cb252f7ee207ecbaae52d1f0f5cd87070bad7f090159d83b","processedContent":"def stop(self):\n        \"\"\"\n        Record end of application creation process.\n        \"\"\"\n        if not self.enabled: #undefined\n            return\n\n        if self.start_time is None: #undefined\n            log.error(\"Telemetry.stop(): cannot stop telemetry, it was never started\")\n            \"\"\"\n            scip-python python temp indexer `pilot.utils.telemetry`/log.: undefined\n            scip-python python python-stdlib 3.11 logging/Logger#error().: undefined\n            \"\"\"\n            return\n\n        self.end_time = time.time()\n        \"\"\"\n        scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#end_time.: undefined\n        scip-python python python-stdlib 3.11 time/__init__:: undefined\n        scip-python python python-stdlib 3.11 time/time().: undefined\n        \"\"\"\n        self.data[\"elapsed_time\"] = self.end_time - self.start_time","documentation":"This code records the end of an application creation process and calculates the elapsed time between the start and end times."}},{"key":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#send().","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#send().","language":"python","range":[198,4,230,29],"content":"def send(self, event:str = \"pilot-telemetry\"):\n        \"\"\"\n        Send telemetry data to the phone-home endpoint.\n\n        Note: this method clears all telemetry data after sending it.\n        \"\"\"\n        if not self.enabled:\n            return\n\n        if self.endpoint is None:\n            log.error(\"Telemetry.send(): cannot send telemetry, no endpoint configured\")\n            return\n\n        if self.start_time is not None and self.end_time is None:\n            self.stop()\n\n        payload = {\n            \"pathId\": self.telemetry_id,\n            \"event\": event,\n            \"data\": self.data,\n        }\n\n        log.debug(\n            f\"Telemetry.send(): sending anonymous telemetry data to {self.endpoint}\"\n        )\n        try:\n            requests.post(self.endpoint, json=payload)\n        except Exception as e:\n            log.error(\n                f\"Telemetry.send(): failed to send telemetry data: {e}\", exc_info=True\n            )\n        finally:\n            self.clear_data()","file":"/pilot/utils/telemetry.py","fileHash":"500b9e782c148aa6137a800cd6924871cd09de08b047ebfbb66ad8b67400a963","hash":"4c6a727c2225beb6fd3a12b01917e27ef1e71c9751cf62bb8933ff53c89db6b8","processedContent":"def send(self, event:str = \"pilot-telemetry\"):\n        \"\"\"\n        Send telemetry data to the phone-home endpoint.\n\n        Note: this method clears all telemetry data after sending it.\n        \"\"\"\n        if not self.enabled: #undefined\n            return\n\n        if self.endpoint is None: #undefined\n            log.error(\"Telemetry.send(): cannot send telemetry, no endpoint configured\")\n            \"\"\"\n            scip-python python temp indexer `pilot.utils.telemetry`/log.: undefined\n            scip-python python python-stdlib 3.11 logging/Logger#error().: undefined\n            \"\"\"\n            return\n\n        if self.start_time is not None and self.end_time is None:\n        \"\"\"\n        scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#start_time.: undefined\n        scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#end_time.: undefined\n        \"\"\"\n            self.stop() #This code records the end of an application creation process and calculates the elapsed time between the start and end times.\n\n        payload = {\n            \"pathId\": self.telemetry_id, #undefined\n            \"event\": event,\n            \"data\": self.data, #undefined\n        }\n\n        log.debug(\n        \"\"\"\n        scip-python python temp indexer `pilot.utils.telemetry`/log.: undefined\n        scip-python python python-stdlib 3.11 logging/Logger#debug().: undefined\n        \"\"\"\n            f\"Telemetry.send(): sending anonymous telemetry data to {self.endpoint}\" #undefined\n        )\n        try:\n            requests.post(self.endpoint, json=payload)\n            \"\"\"\n            scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#endpoint.: undefined\n            scip-python python requests 2.31.0 requests/__init__:: undefined\n            scip-python python requests 2.31.0 `requests.api`/post().: undefined\n            \"\"\"\n        except Exception as e:\n            log.error(\n            \"\"\"\n            scip-python python temp indexer `pilot.utils.telemetry`/log.: undefined\n            scip-python python python-stdlib 3.11 logging/Logger#error().: undefined\n            \"\"\"\n                f\"Telemetry.send(): failed to send telemetry data: {e}\", exc_info=True\n            )\n        finally:\n            self.clear_data()","documentation":"This code sends telemetry data to a phone-home endpoint, with the ability to clear all telemetry data after sending it."}},{"key":"scip-python python temp indexer `pilot.test.ux_tests.dev_continue_development`/test_continue_development().","attributes":{"range":[10,0,35,33],"symbol":"scip-python python temp indexer `pilot.test.ux_tests.dev_continue_development`/test_continue_development().","content":"@pytest.mark.ux_test\r\n@patch('utils.questionary.get_saved_user_input')\r\n@patch('helpers.cli.get_saved_command_run')\r\n@patch('helpers.AgentConvo.get_saved_development_step')\r\n@patch('helpers.AgentConvo.save_development_step')\r\ndef test_continue_development(mock_4, mock_3, mock_2, mock_1):\r\n    # Given\r\n    project = create_project('continue_development', 'hello_world_server')\r\n    # execute_command(project, 'npm install', 13000)\r\n\r\n    developer = Developer(project)\r\n    project.developer = developer\r\n    convo = AgentConvo(developer)\r\n    convo.load_branch = lambda last_branch_name: None\r\n    developer.run_command = 'node server.js'\r\n\r\n    # Note: uncomment the following 2 lines and indent the remaining lines when debugging without console input\r\n    mock_questionary = MockQuestionary(['r', 'continue'])\r\n    with patch('utils.questionary.questionary', mock_questionary):\r\n\r\n        # When\r\n        # `continue_development` calls `run_command_until_success()` if the user types \"r\"\r\n        developer.continue_development(convo, 'branch_name', 'The web page should say \"Hello, World!\"')\r\n        print('end of \"continue_development\" scenario')\r\n\r\n    terminate_running_processes()","file":"/pilot/test/ux_tests/Dev_continue_development.py","language":"python","fileHash":"4927906b6f671f28eede3e54faec41c541358933ee8df46cf81de8df4ad0bc09","hash":"1dac9c0650b3e8ec27be7954601b3a8a54c339887a8d88f125aee1780728c5a7","processedContent":"@pytest.mark.ux_test\r\n@patch('utils.questionary.get_saved_user_input')\r\n@patch('helpers.cli.get_saved_command_run')\r\n@patch('helpers.AgentConvo.get_saved_development_step')\r\n@patch('helpers.AgentConvo.save_development_step')\r\ndef test_continue_development(mock_4, mock_3, mock_2, mock_1):\r\n    # Given\r\n    project = create_project('continue_development', 'hello_world_server')\r\n    # execute_command(project, 'npm install', 13000)\r\n\r\n    developer = Developer(project)\r #The code defines a class called \"Developer\" that represents a person working on a specific project. It has functions for implementing tasks, running commands, and handling human intervention during the development process.\n    project.developer = developer\r\n    convo = AgentConvo(developer)\r #This code defines a class called `AgentConvo` that represents a conversation with an agent. It includes functions for sending and receiving messages, as well as formatting and rendering prompts. The code also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n    convo.load_branch = lambda last_branch_name: None\r #This code defines a function called `load_branch` that loads a branch of messages from a dictionary called `branches`. It also copies the messages from the loaded branch to a variable called `messages`. If the `reload_files` parameter is set to `True`, it replaces the files with the new messages.\n    developer.run_command = 'node server.js'\r #undefined\n\r\n    # Note: uncomment the following 2 lines and indent the remaining lines when debugging without console input\r\n    mock_questionary = MockQuestionary(['r', 'continue'])\r #This code defines a class called \"MockQuestionary\" that allows users to ask questions and receive answers in a mock interview setting. The class has several methods, including \"__init__\", \"text\", \"ask\", and \"unsafe_ask\". The purpose of the code is to provide a way to simulate a user asking questions and receiving answers in a mock interview setting.\n    with patch('utils.questionary.questionary', mock_questionary):\r\n\r\n        # When\r\n        # `continue_development` calls `run_command_until_success()` if the user types \"r\"\r\n        developer.continue_development(convo, 'branch_name', 'The web page should say \"Hello, World!\"')\r #The code defines a function called `continue_development` that allows the user to continue developing an app by asking for feedback on the current iteration and then executing the next task in the development plan.\n        print('end of \"continue_development\" scenario')\r\n\r\n    terminate_running_processes()","documentation":"The code defines a class called \"Developer\" that allows users to continue developing an app by asking for feedback on the current iteration and then executing the next task in the development plan."}},{"key":"scip-python python temp indexer `pilot.test.ux_tests.dev_continue_development`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.test.ux_tests.dev_continue_development`/__init__:","range":[0,0,36,0],"content":"import pytest\r\nfrom unittest.mock import patch\r\n\r\nfrom helpers.AgentConvo import AgentConvo\r\nfrom helpers.agents import Developer\r\nfrom .utils import create_project\r\nfrom helpers.cli import terminate_running_processes\r\nfrom test.mock_questionary import MockQuestionary\r\n\r\n\r\n@pytest.mark.ux_test\r\n@patch('utils.questionary.get_saved_user_input')\r\n@patch('helpers.cli.get_saved_command_run')\r\n@patch('helpers.AgentConvo.get_saved_development_step')\r\n@patch('helpers.AgentConvo.save_development_step')\r\ndef test_continue_development(mock_4, mock_3, mock_2, mock_1):\r\n    # Given\r\n    project = create_project('continue_development', 'hello_world_server')\r\n    # execute_command(project, 'npm install', 13000)\r\n\r\n    developer = Developer(project)\r\n    project.developer = developer\r\n    convo = AgentConvo(developer)\r\n    convo.load_branch = lambda last_branch_name: None\r\n    developer.run_command = 'node server.js'\r\n\r\n    # Note: uncomment the following 2 lines and indent the remaining lines when debugging without console input\r\n    mock_questionary = MockQuestionary(['r', 'continue'])\r\n    with patch('utils.questionary.questionary', mock_questionary):\r\n\r\n        # When\r\n        # `continue_development` calls `run_command_until_success()` if the user types \"r\"\r\n        developer.continue_development(convo, 'branch_name', 'The web page should say \"Hello, World!\"')\r\n        print('end of \"continue_development\" scenario')\r\n\r\n    terminate_running_processes()\r\n","file":"/pilot/test/ux_tests/Dev_continue_development.py","language":"python","fileHash":"4927906b6f671f28eede3e54faec41c541358933ee8df46cf81de8df4ad0bc09","hash":"4927906b6f671f28eede3e54faec41c541358933ee8df46cf81de8df4ad0bc09","processedContent":"import pytest\r\nfrom unittest.mock import patch\r #undefined\n\r\nfrom helpers.AgentConvo import AgentConvo\r\n\"\"\"\nscip-python python temp indexer `pilot.helpers.agentconvo`/__init__:: The code defines a class called `AgentConvo` that represents a conversation with an agent, including functions for sending and receiving messages, formatting and rendering prompts, and error handling for GPT model token limits.\nscip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#: This code defines a class called `AgentConvo` that represents a conversation with an agent. It includes functions for sending and receiving messages, as well as formatting and rendering prompts. The code also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n\"\"\"\nfrom helpers.agents import Developer\r\n\"\"\"\nscip-python python temp indexer `pilot.helpers.agents`/__init__:: The code defines several classes and functions that are used in a software development project, including \"Architect\", \"CodeMonkey\", \"Developer\", and \"TechLead\". These classes and functions are used to manage the development process, retrieve progress data, and update the status of the app in the database.\nscip-python python temp indexer `pilot.helpers.agents.developer`/Developer#: The code defines a class called \"Developer\" that represents a person working on a specific project. It has functions for implementing tasks, running commands, and handling human intervention during the development process.\n\"\"\"\nfrom .utils import create_project\r #undefined\nfrom helpers.cli import terminate_running_processes\r\n\"\"\"\nscip-python python temp indexer `pilot.helpers.cli`/__init__:: The code defines a command-line interface (CLI) that allows users to execute commands and interact with a language model. It includes functions for running commands, checking their output, and handling errors.\nscip-python python temp indexer `pilot.helpers.cli`/terminate_running_processes().: This code terminates running processes by iterating over a list of running processes and calling the `terminate_process` function for each process.\n\"\"\"\nfrom test.mock_questionary import MockQuestionary\r\n\"\"\"\nscip-python python temp indexer `pilot.test.mock_questionary`/__init__:: This code defines a class called \"MockQuestionary\" that allows users to ask questions and receive answers in a mock interview setting.\nscip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#: This code defines a class called \"MockQuestionary\" that allows users to ask questions and receive answers in a mock interview setting. The class has several methods, including \"__init__\", \"text\", \"ask\", and \"unsafe_ask\". The purpose of the code is to provide a way to simulate a user asking questions and receiving answers in a mock interview setting.\n\"\"\"\n\r\n\r\n@pytest.mark.ux_test\r\n@patch('utils.questionary.get_saved_user_input')\r\n@patch('helpers.cli.get_saved_command_run')\r\n@patch('helpers.AgentConvo.get_saved_development_step')\r\n@patch('helpers.AgentConvo.save_development_step')\r\ndef test_continue_development(mock_4, mock_3, mock_2, mock_1):\r\n    \"\"\"The code defines a class called \"Developer\" that allows users to continue developing an app by asking for feedback on the current iteration and then executing the next task in the development plan.\"\"\"\n    pass\n","documentation":"The code defines a class called \"Developer\" that allows users to continue developing an app by asking for feedback on the current iteration and then executing the next task in the development plan."}},{"key":"scip-python python temp indexer utils/__init__:","attributes":{"symbol":"scip-python python temp indexer utils/__init__:","language":"python"}},{"key":"scip-python python temp indexer cli_execute_command/__init__:","attributes":{"symbol":"scip-python python temp indexer cli_execute_command/__init__:","language":"python"}},{"key":"scip-python python temp indexer `pilot.test.ux_tests.run_command_until_success`/run_command_until_success().","attributes":{"range":[7,0,40,50],"symbol":"scip-python python temp indexer `pilot.test.ux_tests.run_command_until_success`/run_command_until_success().","content":"def run_command_until_success():\r\n    name = 'run_command_until_success'\r\n    project = Project({\r\n        'app_id': '84c2c532-e07c-4694-bcb0-70767c348b07',\r\n        'name': name,\r\n        'app_type': '',\r\n        'user_id': '97510ce7-dbca-44b6-973c-d27346ce4009',\r\n        'email': '7ed2f578-c791-4719-959c-dedf94394ad3',\r\n        'password': 'secret',\r\n    },\r\n        name=name,\r\n        architecture=[],\r\n        user_stories=[]\r\n    )\r\n\r\n    project.set_root_path(os.path.abspath(os.path.join(os.path.dirname(os.path.abspath(__file__)),\r\n                                                     '../../../workspace/TestDeveloper')))\r\n    project.technologies = []\r\n    project.current_step = ENVIRONMENT_SETUP_STEP\r\n    project.app = save_app(project)\r\n\r\n    update_file(f'{project.root_path}/package.json',\r\n                '{\"dependencies\": {\"axios\": \"^1.5.0\", \"express\": \"^4.18.2\", \"mongoose\": \"^7.5.0\"}}')\r\n\r\n    developer = Developer(project)\r\n    developer.run_command = 'npm install'\r\n\r\n    convo = AgentConvo(developer)\r\n    step = {\r\n        'type': 'human_intervention',\r\n        'human_intervention_description': 'I want you to test that this process works from the CLI _and_ from the UI.',\r\n    }\r\n\r\n    developer.step_human_intervention(convo, step)","file":"/pilot/test/ux_tests/run_command_until_success.py","language":"python","fileHash":"4903a055dbcebb19590469ba4bba4bb31b5067119abe5e63338bbe118bdc0267","hash":"2a045c485523f67557645c8e92b5b106ae533222cd5ec250a396d053d49a2614","processedContent":"def run_command_until_success():\r\n    name = 'run_command_until_success'\r\n    project = Project({\r\n        'app_id': '84c2c532-e07c-4694-bcb0-70767c348b07',\r\n        'name': name,\r\n        'app_type': '',\r\n        'user_id': '97510ce7-dbca-44b6-973c-d27346ce4009',\r\n        'email': '7ed2f578-c791-4719-959c-dedf94394ad3',\r\n        'password': 'secret',\r\n    },\r\n        name=name,\r\n        architecture=[],\r\n        user_stories=[]\r\n    )\r\n\r\n    project.set_root_path(os.path.abspath(os.path.join(os.path.dirname(os.path.abspath(__file__)),\r\n    \"\"\"\n    scip-python python python-stdlib 3.11 os/__init__:: undefined\n    scip-python python python-stdlib 3.11 os/__init__:: undefined\n    scip-python python python-stdlib 3.11 os/__init__:: undefined\n    scip-python python python-stdlib 3.11 os/__init__:: undefined\n    scip-python python python-stdlib 3.11 os/path.: undefined\n    scip-python python python-stdlib 3.11 os/path.: undefined\n    scip-python python python-stdlib 3.11 os/path.: undefined\n    scip-python python python-stdlib 3.11 os/path.: undefined\n    scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n    scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n    scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n    scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n    scip-python python temp indexer `pilot.test.ux_tests.run_command_until_success`/: undefined\n    \"\"\"\n                                                     '../../../workspace/TestDeveloper')))\r\n    project.technologies = []\r\n    project.current_step = ENVIRONMENT_SETUP_STEP\r #undefined\n    project.app = save_app(project)\r\n\r\n    update_file(f'{project.root_path}/package.json',\r #This code updates a file with new content. It creates any necessary intermediate directories, writes the file using UTF-8 encoding if it's text, and prints a success message.\n                '{\"dependencies\": {\"axios\": \"^1.5.0\", \"express\": \"^4.18.2\", \"mongoose\": \"^7.5.0\"}}')\r\n\r\n    developer = Developer(project)\r #The code defines a class called \"Developer\" that represents a person working on a specific project. It has functions for implementing tasks, running commands, and handling human intervention during the development process.\n    developer.run_command = 'npm install'\r #undefined\n\r\n    convo = AgentConvo(developer)\r\n    step = {\r\n        'type': 'human_intervention',\r\n        'human_intervention_description': 'I want you to test that this process works from the CLI _and_ from the UI.',\r\n    }\r\n\r\n    developer.step_human_intervention(convo, step)","documentation":"This code defines a function called \"run_command_until_success\" that updates a file with new content and runs a command using the \"npm install\" command."}},{"key":"scip-python python temp indexer `pilot.test.ux_tests.run_command_until_success`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.test.ux_tests.run_command_until_success`/__init__:","range":[0,0,41,0],"content":"import os\r\nfrom helpers.agents import Developer, ENVIRONMENT_SETUP_STEP\r\nfrom helpers import AgentConvo, Project\r\nfrom helpers.files import update_file\r\nfrom database import save_app\r\n\r\n\r\ndef run_command_until_success():\r\n    name = 'run_command_until_success'\r\n    project = Project({\r\n        'app_id': '84c2c532-e07c-4694-bcb0-70767c348b07',\r\n        'name': name,\r\n        'app_type': '',\r\n        'user_id': '97510ce7-dbca-44b6-973c-d27346ce4009',\r\n        'email': '7ed2f578-c791-4719-959c-dedf94394ad3',\r\n        'password': 'secret',\r\n    },\r\n        name=name,\r\n        architecture=[],\r\n        user_stories=[]\r\n    )\r\n\r\n    project.set_root_path(os.path.abspath(os.path.join(os.path.dirname(os.path.abspath(__file__)),\r\n                                                     '../../../workspace/TestDeveloper')))\r\n    project.technologies = []\r\n    project.current_step = ENVIRONMENT_SETUP_STEP\r\n    project.app = save_app(project)\r\n\r\n    update_file(f'{project.root_path}/package.json',\r\n                '{\"dependencies\": {\"axios\": \"^1.5.0\", \"express\": \"^4.18.2\", \"mongoose\": \"^7.5.0\"}}')\r\n\r\n    developer = Developer(project)\r\n    developer.run_command = 'npm install'\r\n\r\n    convo = AgentConvo(developer)\r\n    step = {\r\n        'type': 'human_intervention',\r\n        'human_intervention_description': 'I want you to test that this process works from the CLI _and_ from the UI.',\r\n    }\r\n\r\n    developer.step_human_intervention(convo, step)\r\n","file":"/pilot/test/ux_tests/run_command_until_success.py","language":"python","fileHash":"4903a055dbcebb19590469ba4bba4bb31b5067119abe5e63338bbe118bdc0267","hash":"4903a055dbcebb19590469ba4bba4bb31b5067119abe5e63338bbe118bdc0267","processedContent":"import os\r #undefined\nfrom helpers.agents import Developer, ENVIRONMENT_SETUP_STEP\r\n\"\"\"\nscip-python python temp indexer `pilot.helpers.agents`/__init__:: The code defines several classes and functions that are used in a software development project, including \"Architect\", \"CodeMonkey\", \"Developer\", and \"TechLead\". These classes and functions are used to manage the development process, retrieve progress data, and update the status of the app in the database.\nscip-python python temp indexer `pilot.helpers.agents.developer`/Developer#: The code defines a class called \"Developer\" that represents a person working on a specific project. It has functions for implementing tasks, running commands, and handling human intervention during the development process.\nscip-python python temp indexer `pilot.helpers.agents.developer`/ENVIRONMENT_SETUP_STEP.: undefined\n\"\"\"\nfrom helpers import AgentConvo, Project\r #undefined\nfrom helpers.files import update_file\r\n\"\"\"\nscip-python python temp indexer `pilot.helpers.files`/__init__:: The code defines a series of functions for working with files and directories, including updating a file's content, retrieving the contents of a file or directory, and deleting files and empty subdirectories.\nscip-python python temp indexer `pilot.helpers.files`/update_file().: This code updates a file with new content. It creates any necessary intermediate directories, writes the file using UTF-8 encoding if it's text, and prints a success message.\n\"\"\"\nfrom database import save_app\r #undefined\n\r\n\r\ndef run_command_until_success():\r\n    \"\"\"This code defines a function called \"run_command_until_success\" that updates a file with new content and runs a command using the \"npm install\" command.\"\"\"\n    pass\n","documentation":"The code defines several classes and functions for software development, including \"Developer\" and \"TechLead\", which are used to manage the development process and update the status of the app in the database."}},{"key":"scip-python python temp indexer database/__init__:","attributes":{"symbol":"scip-python python temp indexer database/__init__:","language":"python"}},{"key":"scip-python python temp indexer `pilot.test.ux_tests.run_command_until_success`/","attributes":{"symbol":"scip-python python temp indexer `pilot.test.ux_tests.run_command_until_success`/","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.utils`/__init__:","range":[0,0,0,0],"content":"","file":"/pilot/utils/__init__.py","language":"python","fileHash":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855","hash":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855","processedContent":""}},{"key":"scip-python python temp indexer `pilot.utils.arguments`/get_email().","attributes":{"range":[81,0,98,28],"symbol":"scip-python python temp indexer `pilot.utils.arguments`/get_email().","content":"def get_email():\n    # Attempt to get email from .gitconfig\n    gitconfig_path = os.path.expanduser('~/.gitconfig')\n\n    if os.path.exists(gitconfig_path):\n        with open(gitconfig_path, 'r', encoding=\"utf-8\") as file:\n            content = file.read()\n\n            # Use regex to search for email address\n            email_match = re.search(r'email\\s*=\\s*([\\w\\.-]+@[\\w\\.-]+)', content)\n\n            if email_match:\n                return email_match.group(1)\n\n    # If not found, return a UUID\n    # todo change email so its not uuid4 but make sure to fix storing of development steps where\n    #  1 user can have multiple apps. In that case each app should have its own development steps\n    return str(uuid.uuid4())","file":"/pilot/utils/arguments.py","language":"python","fileHash":"1fb9c708bed0af886d7c0613f91d00bddb8a9d144f9e4a3681ba9fe9c09580ed","hash":"3fbff98de0e2b73a89bd01cfdee65ebc937bb2146c3f799defc36eb4509aad02","processedContent":"def get_email():\n    # Attempt to get email from .gitconfig\n    gitconfig_path = os.path.expanduser('~/.gitconfig')\n    \"\"\"\n    scip-python python python-stdlib 3.11 os/__init__:: undefined\n    scip-python python python-stdlib 3.11 os/path.: undefined\n    scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n    \"\"\"\n\n    if os.path.exists(gitconfig_path):\n    \"\"\"\n    scip-python python python-stdlib 3.11 os/__init__:: undefined\n    scip-python python python-stdlib 3.11 os/path.: undefined\n    scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n    \"\"\"\n        with open(gitconfig_path, 'r', encoding=\"utf-8\") as file:\n            content = file.read() #undefined\n\n            # Use regex to search for email address\n            email_match = re.search(r'email\\s*=\\s*([\\w\\.-]+@[\\w\\.-]+)', content)\n            \"\"\"\n            scip-python python python-stdlib 3.11 re/__init__:: undefined\n            scip-python python python-stdlib 3.11 re/search().: undefined\n            \"\"\"\n\n            if email_match:\n                return email_match.group(1) #undefined\n\n    # If not found, return a UUID\n    # todo change email so its not uuid4 but make sure to fix storing of development steps where\n    #  1 user can have multiple apps. In that case each app should have its own development steps\n    return str(uuid.uuid4())","documentation":"This code defines a function called `get_email()` that attempts to retrieve the user's email address from their `.gitconfig` file. If the email is not found, it returns a UUID instead."}},{"key":"scip-python python temp indexer `pilot.utils.arguments`/username_to_uuid().","attributes":{"range":[102,0,110,35],"symbol":"scip-python python temp indexer `pilot.utils.arguments`/username_to_uuid().","content":"def username_to_uuid(username):\n    \"\"\"\n    Creates a consistent UUID from a username\n    :param username:\n    :return:\n    \"\"\"\n    sha1 = hashlib.sha1(username.encode()).hexdigest()\n    uuid_str = \"{}-{}-{}-{}-{}\".format(sha1[:8], sha1[8:12], sha1[12:16], sha1[16:20], sha1[20:32])\n    return str(uuid.UUID(uuid_str))","file":"/pilot/utils/arguments.py","language":"python","fileHash":"1fb9c708bed0af886d7c0613f91d00bddb8a9d144f9e4a3681ba9fe9c09580ed","hash":"ad64f527748846ebb6766238de0a9901f7c57e751d571b390adfb0509e21bf4c","processedContent":"def username_to_uuid(username):\n    \"\"\"\n    Creates a consistent UUID from a username\n    :param username:\n    :return:\n    \"\"\"\n    sha1 = hashlib.sha1(username.encode()).hexdigest()\n    \"\"\"\n    scip-python python python-stdlib 3.11 hashlib/__init__:: undefined\n    scip-python python python-stdlib 3.11 hashlib/sha1().: undefined\n    scip-python python python-stdlib 3.11 hashlib/_Hash#hexdigest().: undefined\n    \"\"\"\n    uuid_str = \"{}-{}-{}-{}-{}\".format(sha1[:8], sha1[8:12], sha1[12:16], sha1[16:20], sha1[20:32])\n    return str(uuid.UUID(uuid_str))","documentation":"This code takes a username as input and generates a consistent UUID based on the SHA-1 hash of the username."}},{"key":"scip-python python python-stdlib 3.11 hashlib/__init__:","attributes":{"symbol":"scip-python python python-stdlib 3.11 hashlib/__init__:","language":"python"}},{"key":"scip-python python python-stdlib 3.11 getpass/__init__:","attributes":{"symbol":"scip-python python python-stdlib 3.11 getpass/__init__:","language":"python"}},{"key":"scip-python python python-stdlib 3.11 getpass/getuser().","attributes":{"symbol":"scip-python python python-stdlib 3.11 getpass/getuser().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 sys/argv.argv.","attributes":{"symbol":"scip-python python python-stdlib 3.11 sys/argv.argv.","language":"python"}},{"key":"scip-python python python-stdlib 3.11 hashlib/sha1().","attributes":{"symbol":"scip-python python python-stdlib 3.11 hashlib/sha1().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 hashlib/_Hash#hexdigest().","attributes":{"symbol":"scip-python python python-stdlib 3.11 hashlib/_Hash#hexdigest().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 uuid/UUID#","attributes":{"symbol":"scip-python python python-stdlib 3.11 uuid/UUID#","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.custom_print`/get_custom_print().print_to_external_process().","attributes":{"range":[8,4,23,47],"symbol":"scip-python python temp indexer `pilot.utils.custom_print`/get_custom_print().print_to_external_process().","content":"def print_to_external_process(*args, **kwargs):\r\n        # message = \" \".join(map(str, args))\r\n        message = args[0]\r\n\r\n        if 'type' not in kwargs:\r\n            kwargs['type'] = 'verbose'\r\n        elif kwargs['type'] == MESSAGE_TYPE['local']:\r\n            local_print(*args, **kwargs)\r\n            return\r\n\r\n        ipc_client_instance.send({\r\n            'type': MESSAGE_TYPE[kwargs['type']],\r\n            'content': message,\r\n        })\r\n        if kwargs['type'] == MESSAGE_TYPE['user_input_request']:\r\n            return ipc_client_instance.listen()","file":"/pilot/utils/custom_print.py","language":"python","fileHash":"b444ebb5505cf48276b4e98d66d58bbee2158a98241200cb04b6f8269aed02f4","hash":"6544bf144329c4bb935116f9ada77bdaf51e185bd56025e105ea8539129d6465","processedContent":"def print_to_external_process(*args, **kwargs):\r\n        # message = \" \".join(map(str, args))\r\n        message = args[0]\r\n\r\n        if 'type' not in kwargs:\r\n            kwargs['type'] = 'verbose'\r\n        elif kwargs['type'] == MESSAGE_TYPE['local']:\r #undefined\n            local_print(*args, **kwargs)\r\n            return\r\n\r\n        ipc_client_instance.send({\r #This code defines a function called `send` that takes an object as input and sends it to a client over a network connection. The function first serializes the object into a JSON-compatible string using the `json_serial` function, then sends the length of the serialized data in bytes followed by the actual data.\n            'type': MESSAGE_TYPE[kwargs['type']],\r #undefined\n            'content': message,\r\n        })\r\n        if kwargs['type'] == MESSAGE_TYPE['user_input_request']:\r #undefined\n            return ipc_client_instance.listen()","documentation":"This code defines a function called `print_to_external_process` that sends a message to an external process over a network connection. The function first serializes the message into a JSON-compatible string and then sends the length of the serialized data in bytes followed by the actual data."}},{"key":"scip-python python temp indexer `pilot.utils.custom_print`/get_custom_print().local_print().","attributes":{"range":[25,4,32,41],"symbol":"scip-python python temp indexer `pilot.utils.custom_print`/get_custom_print().local_print().","content":"def local_print(*args, **kwargs):\r\n        message = \" \".join(map(str, args))\r\n        if 'type' in kwargs:\r\n            if kwargs['type'] in LOCAL_IGNORE_MESSAGE_TYPES:\r\n                return\r\n            del kwargs['type']\r\n\r\n        built_in_print(message, **kwargs)","file":"/pilot/utils/custom_print.py","language":"python","fileHash":"b444ebb5505cf48276b4e98d66d58bbee2158a98241200cb04b6f8269aed02f4","hash":"88cd3b70e66c421801d673ad5e0b84579da4a3da61a28bc0784472e1579f7c6d","processedContent":"def local_print(*args, **kwargs):\r\n        message = \" \".join(map(str, args))\r\n        if 'type' in kwargs:\r\n            if kwargs['type'] in LOCAL_IGNORE_MESSAGE_TYPES:\r #undefined\n                return\r\n            del kwargs['type']\r\n\r\n        built_in_print(message, **kwargs)","documentation":"This code defines a local print function that takes in arguments and prints them to the console. It also allows for additional keyword arguments to be passed, such as the type of message to print. The function checks if the type is in a list of ignored types and returns early if it is. Otherwise, it calls the built-in print function with the message and any additional keyword arguments."}},{"key":"scip-python python temp indexer `pilot.const.ipc`/LOCAL_IGNORE_MESSAGE_TYPES.","attributes":{"symbol":"scip-python python temp indexer `pilot.const.ipc`/LOCAL_IGNORE_MESSAGE_TYPES.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#__init__().","attributes":{"range":[17,4,22,55],"symbol":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#__init__().","content":"def __init__(self, log_chat_completions: bool = True):\r\n        if not USE_GPTPILOT_FOLDER:\r\n            return\r\n        self.log_chat_completions = log_chat_completions\r\n        self.dot_gpt_pilot_path = self.with_root_path('~', create=False)\r\n        self.chat_log_path = self.chat_log_folder(None)","file":"/pilot/utils/dot_gpt_pilot.py","language":"python","fileHash":"9d5eadb20790072b38c38716b5afb2df4edf103287026a753aaf356c758a0e6a","hash":"31c3eff02bb2735dd61f6f51cc6482931fe181258f223ccc6c47c8e8896f05a3","processedContent":"def __init__(self, log_chat_completions: bool = True):\r\n        if not USE_GPTPILOT_FOLDER:\r #undefined\n            return\r\n        self.log_chat_completions = log_chat_completions\r\n        self.dot_gpt_pilot_path = self.with_root_path('~', create=False)\r #This code defines a function called `with_root_path` that creates a folder for storing chat logs. It takes a task as an argument and appends the task number to the folder name if the task is not None. The function then creates the folder using `os.makedirs()` and sets the `chat_log_path` attribute to the created folder path.\n        self.chat_log_path = self.chat_log_folder(None)","documentation":"This code defines a function called `with_root_path` that creates a folder for storing chat logs. It takes a task as an argument and appends the task number to the folder name if the task is not None. The function then creates the folder using `os.makedirs()` and sets the `chat_log_path` attribute to the created folder path."}},{"key":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#chat_log_folder().","attributes":{"range":[36,4,45,28],"symbol":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#chat_log_folder().","content":"def chat_log_folder(self, task):\r\n        if not USE_GPTPILOT_FOLDER:\r\n            return\r\n        chat_log_path = os.path.join(self.dot_gpt_pilot_path, 'chat_log')\r\n        if task is not None:\r\n            chat_log_path = os.path.join(chat_log_path, 'task_' + str(task))\r\n\r\n        os.makedirs(chat_log_path, exist_ok=True)\r\n        self.chat_log_path = chat_log_path\r\n        return chat_log_path","file":"/pilot/utils/dot_gpt_pilot.py","language":"python","fileHash":"9d5eadb20790072b38c38716b5afb2df4edf103287026a753aaf356c758a0e6a","hash":"ee0b0243c3a441edc682c5a7809c6c09eacb343d12a4bdc48389f4c76787fb6a","processedContent":"def chat_log_folder(self, task):\r\n        if not USE_GPTPILOT_FOLDER:\r #undefined\n            return\r\n        chat_log_path = os.path.join(self.dot_gpt_pilot_path, 'chat_log')\r\n        \"\"\"\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/path.: undefined\n        scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n        scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#dot_gpt_pilot_path.: undefined\n        \"\"\"\n        if task is not None:\r\n            chat_log_path = os.path.join(chat_log_path, 'task_' + str(task))\r\n            \"\"\"\n            scip-python python python-stdlib 3.11 os/__init__:: undefined\n            scip-python python python-stdlib 3.11 os/path.: undefined\n            scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n            \"\"\"\n\r\n        os.makedirs(chat_log_path, exist_ok=True)\r\n        \"\"\"\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/makedirs().: undefined\n        \"\"\"\n        self.chat_log_path = chat_log_path\r #undefined\n        return chat_log_path","documentation":"This code defines a function called `chat_log_folder` that creates a folder for storing chat logs. It takes a task as an argument and appends the task number to the folder name if the task is not None. The function then creates the folder using `os.makedirs()` and sets the `chat_log_path` attribute to the created folder path."}},{"key":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#log_chat_completion().","attributes":{"range":[47,4,60,106],"symbol":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#log_chat_completion().","content":"def log_chat_completion(self, endpoint: str, model: str, req_type: str, messages: list[dict], response: str):\r\n        if not USE_GPTPILOT_FOLDER:\r\n            return\r\n        if self.log_chat_completions:\r\n            time = datetime.now().strftime('%Y-%m-%d_%H_%M_%S')\r\n            with open(os.path.join(self.chat_log_path, f'{time}-{req_type}.yaml'), 'w', encoding=\"utf-8\") as file:\r\n                data = {\r\n                    'endpoint': endpoint,\r\n                    'model': model,\r\n                    'messages': messages,\r\n                    'response': response,\r\n                }\r\n\r\n                yaml.safe_dump(data, file, width=120, indent=2, default_flow_style=False, sort_keys=False)","file":"/pilot/utils/dot_gpt_pilot.py","language":"python","fileHash":"9d5eadb20790072b38c38716b5afb2df4edf103287026a753aaf356c758a0e6a","hash":"54dc2257d323fe8d7fdcc904e7bfd88a39dceb16a779561cd5e903da96248ac1","processedContent":"def log_chat_completion(self, endpoint: str, model: str, req_type: str, messages: list[dict], response: str):\r\n        if not USE_GPTPILOT_FOLDER:\r #undefined\n            return\r\n        if self.log_chat_completions:\r #undefined\n            time = datetime.now().strftime('%Y-%m-%d_%H_%M_%S')\r\n            \"\"\"\n            scip-python python python-stdlib 3.11 datetime/datetime#: undefined\n            scip-python python python-stdlib 3.11 datetime/datetime#now().: undefined\n            scip-python python python-stdlib 3.11 datetime/date#strftime().: undefined\n            \"\"\"\n            with open(os.path.join(self.chat_log_path, f'{time}-{req_type}.yaml'), 'w', encoding=\"utf-8\") as file:\r\n            \"\"\"\n            scip-python python python-stdlib 3.11 os/__init__:: undefined\n            scip-python python python-stdlib 3.11 os/path.: undefined\n            scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n            scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#chat_log_path.: undefined\n            \"\"\"\n                data = {\r\n                    'endpoint': endpoint,\r\n                    'model': model,\r\n                    'messages': messages,\r\n                    'response': response,\r\n                }\r\n\r\n                yaml.safe_dump(data, file, width=120, indent=2, default_flow_style=False, sort_keys=False)","documentation":"This code is a function that logs chat completion data to a YAML file. It takes in several parameters, including the endpoint, model, request type, messages, and response. The function checks if logging is enabled and then opens a file with the current date and time as the filename. It then writes the data to the file using the YAML format."}},{"key":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#log_chat_completion_json().","attributes":{"range":[62,4,76,47],"symbol":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#log_chat_completion_json().","content":"def log_chat_completion_json(self, endpoint: str, model: str, req_type: str, functions: dict, json_response: str):\r\n        if not USE_GPTPILOT_FOLDER:\r\n            return\r\n        if self.log_chat_completions:\r\n            time = datetime.now().strftime('%Y-%m-%d_%H_%M_%S')\r\n\r\n            with open(os.path.join(self.chat_log_path, f'{time}-{req_type}.json'), 'w', encoding=\"utf-8\") as file:\r\n                data = {\r\n                    'endpoint': endpoint,\r\n                    'model': model,\r\n                    'functions': functions,\r\n                    'response': json.loads(json_response),\r\n                }\r\n\r\n                json.dump(data, file, indent=2)","file":"/pilot/utils/dot_gpt_pilot.py","language":"python","fileHash":"9d5eadb20790072b38c38716b5afb2df4edf103287026a753aaf356c758a0e6a","hash":"51037103cb06dbe35d3592f127e528f9b43ef4296847859cf35a4d381e607157","processedContent":"def log_chat_completion_json(self, endpoint: str, model: str, req_type: str, functions: dict, json_response: str):\r\n        if not USE_GPTPILOT_FOLDER:\r #undefined\n            return\r\n        if self.log_chat_completions:\r #undefined\n            time = datetime.now().strftime('%Y-%m-%d_%H_%M_%S')\r\n            \"\"\"\n            scip-python python python-stdlib 3.11 datetime/datetime#: undefined\n            scip-python python python-stdlib 3.11 datetime/datetime#now().: undefined\n            scip-python python python-stdlib 3.11 datetime/date#strftime().: undefined\n            \"\"\"\n\r\n            with open(os.path.join(self.chat_log_path, f'{time}-{req_type}.json'), 'w', encoding=\"utf-8\") as file:\r\n            \"\"\"\n            scip-python python python-stdlib 3.11 os/__init__:: undefined\n            scip-python python python-stdlib 3.11 os/path.: undefined\n            scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n            scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#chat_log_path.: undefined\n            \"\"\"\n                data = {\r\n                    'endpoint': endpoint,\r\n                    'model': model,\r\n                    'functions': functions,\r\n                    'response': json.loads(json_response),\r\n                    \"\"\"\n                    scip-python python python-stdlib 3.11 json/__init__:: undefined\n                    scip-python python python-stdlib 3.11 json/loads().: undefined\n                    \"\"\"\n                }\r\n\r\n                json.dump(data, file, indent=2)","documentation":"This code logs chat completion data in a JSON file. It checks if logging is enabled and then creates a new file with the current timestamp and request type. The data is then written to the file as a JSON object."}},{"key":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/USE_GPTPILOT_FOLDER.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/USE_GPTPILOT_FOLDER.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#dot_gpt_pilot_path.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#dot_gpt_pilot_path.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#log_chat_completions.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#log_chat_completions.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#chat_log_path.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#chat_log_path.","language":"python"}},{"key":"scip-python python python-stdlib 3.11 datetime/date#strftime().","attributes":{"symbol":"scip-python python python-stdlib 3.11 datetime/date#strftime().","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.exit`/send_telemetry().","attributes":{"range":[10,0,22,54],"symbol":"scip-python python temp indexer `pilot.utils.exit`/send_telemetry().","content":"def send_telemetry(path_id):\n\n    # Prepare the telemetry data\n    telemetry_data = {\n        \"pathId\": path_id,\n        \"event\": \"pilot-exit\"\n    }\n\n    try:\n        response = requests.post(\"https://api.pythagora.io/telemetry\", json=telemetry_data)\n        response.raise_for_status()\n    except requests.RequestException as err:\n        print(f\"Failed to send telemetry data: {err}\")","file":"/pilot/utils/exit.py","language":"python","fileHash":"3b8525daaf8fa3f98b7777614195b181a4cbf7b9ba4ab7b9749e7a78e7ae6ddd","hash":"3b1a94839ee2f945d8e251814ec38ceaa059fd6e1786d0cc8077c66b49baa9be","processedContent":"def send_telemetry(path_id):\n\n    # Prepare the telemetry data\n    telemetry_data = {\n        \"pathId\": path_id,\n        \"event\": \"pilot-exit\"\n    }\n\n    try:\n        response = requests.post(\"https://api.pythagora.io/telemetry\", json=telemetry_data)\n        \"\"\"\n        scip-python python requests 2.31.0 requests/__init__:: undefined\n        scip-python python requests 2.31.0 `requests.api`/post().: undefined\n        \"\"\"\n        response.raise_for_status() #undefined\n    except requests.RequestException as err:\n    \"\"\"\n    scip-python python requests 2.31.0 requests/__init__:: undefined\n    scip-python python temp indexer `requests.exceptions`/RequestException#: undefined\n    \"\"\"\n        print(f\"Failed to send telemetry data: {err}\")","documentation":"This code sends telemetry data to a remote API when the pilot exits the vehicle. It prepares the data and sends it using the `requests` library, handling any errors that may occur during the request."}},{"key":"scip-python python temp indexer `pilot.utils.exit`/send_feedback().","attributes":{"range":[25,0,38,53],"symbol":"scip-python python temp indexer `pilot.utils.exit`/send_feedback().","content":"def send_feedback(feedback, path_id):\n    \"\"\"Send the collected feedback to the endpoint.\"\"\"\n    # Prepare the feedback data (you can adjust the structure as per your backend needs)\n    feedback_data = {\n        \"pathId\": path_id,\n        \"data\": feedback,\n        \"event\": \"pilot-feedback\"\n    }\n\n    try:\n        response = requests.post(\"https://api.pythagora.io/telemetry\", json=feedback_data)\n        response.raise_for_status()\n    except requests.RequestException as err:\n        print(f\"Failed to send feedback data: {err}\")","file":"/pilot/utils/exit.py","language":"python","fileHash":"3b8525daaf8fa3f98b7777614195b181a4cbf7b9ba4ab7b9749e7a78e7ae6ddd","hash":"80009e90eac6c4c4ed441346f440b276e2300ecf619523d713d3d7cf8f996de2","processedContent":"def send_feedback(feedback, path_id):\n    \"\"\"Send the collected feedback to the endpoint.\"\"\"\n    # Prepare the feedback data (you can adjust the structure as per your backend needs)\n    feedback_data = {\n        \"pathId\": path_id,\n        \"data\": feedback,\n        \"event\": \"pilot-feedback\"\n    }\n\n    try:\n        response = requests.post(\"https://api.pythagora.io/telemetry\", json=feedback_data)\n        \"\"\"\n        scip-python python requests 2.31.0 requests/__init__:: undefined\n        scip-python python requests 2.31.0 `requests.api`/post().: undefined\n        \"\"\"\n        response.raise_for_status() #undefined\n    except requests.RequestException as err:\n    \"\"\"\n    scip-python python requests 2.31.0 requests/__init__:: undefined\n    scip-python python temp indexer `requests.exceptions`/RequestException#: undefined\n    \"\"\"\n        print(f\"Failed to send feedback data: {err}\")","documentation":"This code sends collected feedback to a remote endpoint using the `requests` library. It prepares the data and sends it as a JSON payload, handling any errors that may occur during the request."}},{"key":"scip-python python temp indexer `pilot.utils.exit`/get_path_id().","attributes":{"range":[41,0,44,70],"symbol":"scip-python python temp indexer `pilot.utils.exit`/get_path_id().","content":"def get_path_id():\n    # Calculate the SHA-256 hash of the installation directory\n    installation_directory = os.path.abspath(os.path.join(os.getcwd(), \"..\"))\n    return hashlib.sha256(installation_directory.encode()).hexdigest()","file":"/pilot/utils/exit.py","language":"python","fileHash":"3b8525daaf8fa3f98b7777614195b181a4cbf7b9ba4ab7b9749e7a78e7ae6ddd","hash":"22af3d8a797764af42d75eb492b0fb4f76bf7eae66fba703523b8f4c809e0acf","processedContent":"def get_path_id():\n    # Calculate the SHA-256 hash of the installation directory\n    installation_directory = os.path.abspath(os.path.join(os.getcwd(), \"..\"))\n    \"\"\"\n    scip-python python python-stdlib 3.11 os/__init__:: undefined\n    scip-python python python-stdlib 3.11 os/__init__:: undefined\n    scip-python python python-stdlib 3.11 os/__init__:: undefined\n    scip-python python python-stdlib 3.11 os/path.: undefined\n    scip-python python python-stdlib 3.11 os/path.: undefined\n    scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n    scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n    scip-python python python-stdlib 3.11 os/getcwd().: undefined\n    \"\"\"\n    return hashlib.sha256(installation_directory.encode()).hexdigest()","documentation":"This code calculates a unique identifier for the current installation directory by hashing the absolute path of the directory using SHA-256."}},{"key":"scip-python python temp indexer `pilot.utils.exit`/ask_to_store_prompt().","attributes":{"range":[47,0,68,47],"symbol":"scip-python python temp indexer `pilot.utils.exit`/ask_to_store_prompt().","content":"def ask_to_store_prompt(project, path_id):\n    init_prompt = project.main_prompt if project is not None and project.main_prompt else None\n    if init_prompt is None:\n        return\n\n    # Prepare the prompt data\n    telemetry_data = {\n        \"pathId\": path_id,\n        \"event\": \"pilot-prompt\",\n        \"data\": init_prompt\n    }\n    question = ('We would appreciate if you let us store your initial app prompt. If you are OK with that, please just '\n                'press ENTER')\n\n    try:\n        answer = styled_text(project, question, ignore_user_input_count=True)\n        if answer == '':\n            telemetry.set(\"initial_prompt\", init_prompt)\n            response = requests.post(\"https://api.pythagora.io/telemetry\", json=telemetry_data)\n            response.raise_for_status()\n    except requests.RequestException as err:\n        print(f\"Failed to store prompt: {err}\")","file":"/pilot/utils/exit.py","language":"python","fileHash":"3b8525daaf8fa3f98b7777614195b181a4cbf7b9ba4ab7b9749e7a78e7ae6ddd","hash":"b6e55bc930ddabea5b17af422b15ece8a1b70a4dc9b837a73f2171b6664f6e86","processedContent":"def ask_to_store_prompt(project, path_id):\n    init_prompt = project.main_prompt if project is not None and project.main_prompt else None\n    if init_prompt is None:\n        return\n\n    # Prepare the prompt data\n    telemetry_data = {\n        \"pathId\": path_id,\n        \"event\": \"pilot-prompt\",\n        \"data\": init_prompt\n    }\n    question = ('We would appreciate if you let us store your initial app prompt. If you are OK with that, please just '\n                'press ENTER')\n\n    try:\n        answer = styled_text(project, question, ignore_user_input_count=True) #This code defines a function called `styled_text` that retrieves user input from a database, styles the question, and saves the response to the database.\n        if answer == '':\n            telemetry.set(\"initial_prompt\", init_prompt) #undefined\n            response = requests.post(\"https://api.pythagora.io/telemetry\", json=telemetry_data)\n            \"\"\"\n            scip-python python requests 2.31.0 requests/__init__:: undefined\n            scip-python python requests 2.31.0 `requests.api`/post().: undefined\n            \"\"\"\n            response.raise_for_status() #undefined\n    except requests.RequestException as err:\n    \"\"\"\n    scip-python python requests 2.31.0 requests/__init__:: undefined\n    scip-python python temp indexer `requests.exceptions`/RequestException#: undefined\n    \"\"\"\n        print(f\"Failed to store prompt: {err}\")","documentation":"This code is asking the user if they want to store their initial app prompt. If they agree, it sends the prompt to a database and stores it for future use."}},{"key":"scip-python python temp indexer `pilot.utils.exit`/ask_user_feedback().","attributes":{"range":[71,0,78,40],"symbol":"scip-python python temp indexer `pilot.utils.exit`/ask_user_feedback().","content":"def ask_user_feedback(project, path_id, ask_feedback):\n    question = ('Were you able to create any app that works? Please write any feedback you have or just press ENTER to exit:')\n    feedback = None\n    if ask_feedback:\n        feedback = styled_text(project, question, ignore_user_input_count=True)\n    if feedback:  # only send if user provided feedback\n        telemetry.set(\"user_feedback\", feedback)\n        send_feedback(feedback, path_id)","file":"/pilot/utils/exit.py","language":"python","fileHash":"3b8525daaf8fa3f98b7777614195b181a4cbf7b9ba4ab7b9749e7a78e7ae6ddd","hash":"24bab7a43182a8b089303a115181534375ee287f9e6bbea896182f0e2f50842f","processedContent":"def ask_user_feedback(project, path_id, ask_feedback):\n    question = ('Were you able to create any app that works? Please write any feedback you have or just press ENTER to exit:')\n    feedback = None\n    if ask_feedback:\n        feedback = styled_text(project, question, ignore_user_input_count=True) #This code defines a function called `styled_text` that retrieves user input from a database, styles the question, and saves the response to the database.\n    if feedback:  # only send if user provided feedback\n        telemetry.set(\"user_feedback\", feedback) #undefined\n        send_feedback(feedback, path_id)","documentation":"This code defines a function called `ask_user_feedback` that retrieves user input from a database, styles the question, and saves the response to the database."}},{"key":"scip-python python temp indexer `pilot.utils.exit`/ask_user_email().","attributes":{"range":[81,0,93,16],"symbol":"scip-python python temp indexer `pilot.utils.exit`/ask_user_email().","content":"def ask_user_email(project, path_id, ask_feedback):\n    if not ask_feedback:\n        return False\n\n    question = (\n        \"How did GPT Pilot do? We'd love to talk with you and hear your thoughts. \"\n        \"If you'd like to be contacted by us, please provide your email address, or just press ENTER to exit:\"\n    )\n    feedback = styled_text(project, question, ignore_user_input_count=True)\n    if feedback:  # only send if user provided feedback\n        telemetry.set(\"user_contact\", feedback)\n        return True\n    return False","file":"/pilot/utils/exit.py","language":"python","fileHash":"3b8525daaf8fa3f98b7777614195b181a4cbf7b9ba4ab7b9749e7a78e7ae6ddd","hash":"428be54ee818c270ad6b8771295025c1c2136fe89a8618f69aa1ad8159b14d6c","processedContent":"def ask_user_email(project, path_id, ask_feedback):\n    if not ask_feedback:\n        return False\n\n    question = (\n        \"How did GPT Pilot do? We'd love to talk with you and hear your thoughts. \"\n        \"If you'd like to be contacted by us, please provide your email address, or just press ENTER to exit:\"\n    )\n    feedback = styled_text(project, question, ignore_user_input_count=True) #This code defines a function called `styled_text` that retrieves user input from a database, styles the question, and saves the response to the database.\n    if feedback:  # only send if user provided feedback\n        telemetry.set(\"user_contact\", feedback) #undefined\n        return True\n    return False","documentation":"This code defines a function called `ask_user_email` that retrieves user input from a database, styles the question, and saves the response to the database."}},{"key":"scip-python python requests 2.31.0 `requests.api`/post().","attributes":{"symbol":"scip-python python requests 2.31.0 `requests.api`/post().","language":"python"}},{"key":"scip-python python temp indexer `requests.models`/Response#raise_for_status().","attributes":{"symbol":"scip-python python temp indexer `requests.models`/Response#raise_for_status().","language":"python"}},{"key":"scip-python python temp indexer `requests.exceptions`/RequestException#","attributes":{"symbol":"scip-python python temp indexer `requests.exceptions`/RequestException#","language":"python"}},{"key":"scip-python python python-stdlib 3.11 os/getcwd().","attributes":{"symbol":"scip-python python python-stdlib 3.11 os/getcwd().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 hashlib/sha256().","attributes":{"symbol":"scip-python python python-stdlib 3.11 hashlib/sha256().","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.files`/get_parent_folder().","attributes":{"range":[5,0,11,30],"symbol":"scip-python python temp indexer `pilot.utils.files`/get_parent_folder().","content":"def get_parent_folder(folder_name):\n    current_path = Path(os.path.abspath(__file__))  # get the path of the current script\n\n    while current_path.name != folder_name:  # while the current folder name is not 'folder_name'\n        current_path = current_path.parent  # go up one level\n\n    return current_path.parent","file":"/pilot/utils/files.py","language":"python","fileHash":"b8e9808e0ebcc100b416f5d656e4c8ebbc6a19f516ccb3dd0fb01b16c34cc823","hash":"24ee211b33bf27f43f49c8881b39a2e6cfc7db75a22e9aeb98851538d6494359","processedContent":"def get_parent_folder(folder_name):\n    current_path = Path(os.path.abspath(__file__))  # get the path of the current script\n    \"\"\"\n    scip-python python python-stdlib 3.11 pathlib/Path#: undefined\n    scip-python python python-stdlib 3.11 os/__init__:: undefined\n    scip-python python python-stdlib 3.11 os/path.: undefined\n    scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n    scip-python python temp indexer `pilot.utils.files`/: undefined\n    \"\"\"\n\n    while current_path.name != folder_name:  # while the current folder name is not 'folder_name' #undefined\n        current_path = current_path.parent  # go up one level #undefined\n\n    return current_path.parent","documentation":"This code defines a function called `get_parent_folder` that takes a string argument `folder_name`. It uses the `Path` class from the `pathlib` module to get the current script's path and then iterates up the directory tree until it finds the folder with the specified name. The function returns the parent folder of the found folder."}},{"key":"scip-python python temp indexer `pilot.utils.files`/create_directory().","attributes":{"range":[38,0,42,29],"symbol":"scip-python python temp indexer `pilot.utils.files`/create_directory().","content":"def create_directory(parent_directory, new_directory):\n    new_directory_path = os.path.join(parent_directory, new_directory)\n    os.makedirs(new_directory_path, exist_ok=True)\n\n    return new_directory_path","file":"/pilot/utils/files.py","language":"python","fileHash":"b8e9808e0ebcc100b416f5d656e4c8ebbc6a19f516ccb3dd0fb01b16c34cc823","hash":"fa2a37ac1fa07adb54dee5acae8c8005ebb3be610ed6bb10ddef64dc31dc3e80","processedContent":"def create_directory(parent_directory, new_directory):\n    new_directory_path = os.path.join(parent_directory, new_directory)\n    \"\"\"\n    scip-python python python-stdlib 3.11 os/__init__:: undefined\n    scip-python python python-stdlib 3.11 os/path.: undefined\n    scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n    \"\"\"\n    os.makedirs(new_directory_path, exist_ok=True)\n    \"\"\"\n    scip-python python python-stdlib 3.11 os/__init__:: undefined\n    scip-python python python-stdlib 3.11 os/makedirs().: undefined\n    \"\"\"\n\n    return new_directory_path","documentation":"This code defines a function called `create_directory` that creates a new directory with the specified name in the specified parent directory. It does this by joining the parent directory and new directory names, checking if the directory already exists, and creating it if it doesn't."}},{"key":"scip-python python temp indexer `pilot.utils.files`/","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.files`/","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.function_calling`/FunctionParameters#","attributes":{"range":[8,0,13,33],"symbol":"scip-python python temp indexer `pilot.utils.function_calling`/FunctionParameters#","content":"class FunctionParameters(TypedDict):\r\n    \"\"\"Function parameters\"\"\"\r\n\r\n    type: Literal[\"object\"]\r\n    properties: dict[str, JsonType]\r\n    required: Optional[list[str]]","file":"/pilot/utils/function_calling.py","language":"python","fileHash":"4fa33ffd67d54374bc275c9eb7d0f2bf0f445fc52d2ee1431662ecd0a037fa35","hash":"ea3fa2fe1c48a71bd52bd54940d52d499a3daf927fef8a9f5eaa1966253eab68","processedContent":"class FunctionParameters(TypedDict):\r #undefined\n    \"\"\"Function parameters\"\"\"\r\n\r\n    type: Literal[\"object\"]\r #undefined\n    properties: dict[str, JsonType]\r #undefined\n    required: Optional[list[str]]","documentation":"This code defines a custom data type called \"FunctionParameters\" that represents the parameters of a function. It specifies that the type of the parameter is an object, and it has properties that are defined as a dictionary of strings to JSON types. Additionally, it optionally specifies a list of required parameters."}},{"key":"scip-python python temp indexer `pilot.utils.function_calling`/FunctionType#","attributes":{"range":[16,0,21,34],"symbol":"scip-python python temp indexer `pilot.utils.function_calling`/FunctionType#","content":"class FunctionType(TypedDict):\r\n    \"\"\"Function type\"\"\"\r\n\r\n    name: str\r\n    description: Optional[str]\r\n    parameters: FunctionParameters","file":"/pilot/utils/function_calling.py","language":"python","fileHash":"4fa33ffd67d54374bc275c9eb7d0f2bf0f445fc52d2ee1431662ecd0a037fa35","hash":"a066ad558b1089f3b67ef9968e4f5fca8e1411594c0e250ff012d1975e4a91bc","processedContent":"class FunctionType(TypedDict):\r #undefined\n    \"\"\"Function type\"\"\"\r\n\r\n    name: str\r\n    description: Optional[str]\r #undefined\n    parameters: FunctionParameters","documentation":"This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It is used to define the structure of a function in a typed dictionary."}},{"key":"scip-python python temp indexer `pilot.utils.function_calling`/FunctionCall#","attributes":{"range":[24,0,28,19],"symbol":"scip-python python temp indexer `pilot.utils.function_calling`/FunctionCall#","content":"class FunctionCall(TypedDict):\r\n    \"\"\"Function call\"\"\"\r\n\r\n    name: str\r\n    parameters: str","file":"/pilot/utils/function_calling.py","language":"python","fileHash":"4fa33ffd67d54374bc275c9eb7d0f2bf0f445fc52d2ee1431662ecd0a037fa35","hash":"fa5a59c183940ed0f06076b9e35409aebabdcd2db85da0f83f1f9dbabd111652","processedContent":"class FunctionCall(TypedDict):\r #undefined\n    \"\"\"Function call\"\"\"\r\n\r\n    name: str\r\n    parameters: str","documentation":"This code defines a custom data type called \"FunctionCall\" that represents a function call with a name and parameters. It is used to store information about function calls in a typed dictionary."}},{"key":"scip-python python temp indexer `pilot.utils.function_calling`/add_function_calls_to_request().","attributes":{"range":[36,0,55,6],"symbol":"scip-python python temp indexer `pilot.utils.function_calling`/add_function_calls_to_request().","content":"def add_function_calls_to_request(gpt_data, function_calls: Union[FunctionCallSet, None]):\r\n    if function_calls is None:\r\n        return\r\n\r\n    model: str = gpt_data['model']\r\n    is_instruct = 'llama' in model or 'anthropic' in model\r\n\r\n    gpt_data['functions'] = function_calls['definitions']\r\n\r\n    prompter = JsonPrompter(is_instruct)\r\n\r\n    if len(function_calls['definitions']) > 1:\r\n        function_call = None\r\n    else:\r\n        function_call = function_calls['definitions'][0]['name']\r\n\r\n    gpt_data['messages'].append({\r\n        'role': 'user',\r\n        'content': prompter.prompt('', function_calls['definitions'], function_call)\r\n    })","file":"/pilot/utils/function_calling.py","language":"python","fileHash":"4fa33ffd67d54374bc275c9eb7d0f2bf0f445fc52d2ee1431662ecd0a037fa35","hash":"3b1bcc9ea4bbea0ff71b5843e45eedc9b2b53a367aaac79d8aa86df924fca158","processedContent":"def add_function_calls_to_request(gpt_data, function_calls: Union[FunctionCallSet, None]):\r\n\"\"\"\nscip-python python python-stdlib 3.11 typing/Union.: undefined\nscip-python python temp indexer `pilot.utils.function_calling`/FunctionCallSet#: This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It is used to define the structure of a function in a typed dictionary.\n\"\"\"\n    if function_calls is None:\r\n        return\r\n\r\n    model: str = gpt_data['model']\r\n    is_instruct = 'llama' in model or 'anthropic' in model\r\n\r\n    gpt_data['functions'] = function_calls['definitions']\r\n\r\n    prompter = JsonPrompter(is_instruct)\r #The code defines a class called `JsonPrompter` that generates a prompt for a chatbot to answer a user's question. It takes a list of functions and a string representing the function to call as arguments, and returns a JSON schema with the parameters of the selected function.\n\r\n    if len(function_calls['definitions']) > 1:\r\n        function_call = None\r\n    else:\r\n        function_call = function_calls['definitions'][0]['name']\r\n\r\n    gpt_data['messages'].append({\r\n        'role': 'user',\r\n        'content': prompter.prompt('', function_calls['definitions'], function_call)\r #The code defines a function called `prompt` that generates a prompt for the user to choose a function to call. It takes two arguments: a list of functions and a string representing the function to call. If no function is specified, it returns a summary of the functions in the form of a bulleted list. If a function is specified, it returns the parameters of the function as a JSON schema.\n    })","documentation":"This code defines a function called `add_function_calls_to_request` that takes two arguments: a dictionary called `gpt_data` and a list of functions called `function_calls`. It then appends a new message to the `messages` list in `gpt_data` with a prompt for the user to choose a function to call."}},{"key":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#","attributes":{"range":[75,0,199,52],"symbol":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#","content":"class JsonPrompter:\r\n    \"\"\"\r\n    Adapted from local_llm_function_calling\r\n    \"\"\"\r\n    def __init__(self, is_instruct: bool = False):\r\n        self.is_instruct = is_instruct\r\n\r\n    def function_descriptions(\r\n        self, functions: list[FunctionType], function_to_call: str\r\n    ) -> list[str]:\r\n        \"\"\"Get the descriptions of the functions\r\n\r\n        Args:\r\n            functions (list[FunctionType]): The functions to get the descriptions of\r\n            function_to_call (str): The function to call\r\n\r\n        Returns:\r\n            list[str]: The descriptions of the functions\r\n                (empty if the function doesn't exist or has no description)\r\n        \"\"\"\r\n        return [\r\n            f'# {function[\"name\"]}: {function[\"description\"]}'\r\n            for function in functions\r\n            if function[\"name\"] == function_to_call and \"description\" in function\r\n        ]\r\n\r\n    def function_parameters(\r\n        self, functions: list[FunctionType], function_to_call: str\r\n    ) -> str:\r\n        \"\"\"Get the parameters of the function\r\n\r\n        Args:\r\n            functions (list[FunctionType]): The functions to get the parameters of\r\n            function_to_call (str): The function to call\r\n\r\n        Returns:\r\n            str: The parameters of the function as a JSON schema\r\n        \"\"\"\r\n        return next(\r\n            json.dumps(function[\"parameters\"][\"properties\"], indent=4)\r\n            for function in functions\r\n            if function[\"name\"] == function_to_call\r\n        )\r\n\r\n    def function_data(\r\n        self, functions: list[FunctionType], function_to_call: str\r\n    ) -> str:\r\n        \"\"\"Get the data for the function\r\n\r\n        Args:\r\n            functions (list[FunctionType]): The functions to get the data for\r\n            function_to_call (str): The function to call\r\n\r\n        Returns:\r\n            str: The data necessary to generate the arguments for the function\r\n        \"\"\"\r\n        return \"\\n\".join(\r\n            [\r\n                \"Here is the schema for the expected JSON object:\",\r\n                \"```json\",\r\n                self.function_parameters(functions, function_to_call),\r\n                \"```\",\r\n            ]\r\n        )\r\n\r\n    def function_summary(self, function: FunctionType) -> str:\r\n        \"\"\"Get a summary of a function\r\n\r\n        Args:\r\n            function (FunctionType): The function to get the summary of\r\n\r\n        Returns:\r\n            str: The summary of the function, as a bullet point\r\n        \"\"\"\r\n        return f\"- {function['name']}\" + (\r\n            f\" - {function['description']}\" if \"description\" in function else \"\"\r\n        )\r\n\r\n    def functions_summary(self, functions: list[FunctionType]) -> str:\r\n        \"\"\"Get a summary of the functions\r\n\r\n        Args:\r\n            functions (list[FunctionType]): The functions to get the summary of\r\n\r\n        Returns:\r\n            str: The summary of the functions, as a bulleted list\r\n        \"\"\"\r\n        return \"Available functions:\\n\" + \"\\n\".join(\r\n            self.function_summary(function) for function in functions\r\n        )\r\n\r\n    def prompt(\r\n        self,\r\n        prompt: str,\r\n        functions: list[FunctionType],\r\n        function_to_call: Union[str, None] = None,\r\n    ) -> str:\r\n        \"\"\"Generate the llama prompt\r\n\r\n        Args:\r\n            prompt (str): The prompt to generate the response to\r\n            functions (list[FunctionType]): The functions to generate the response from\r\n            function_to_call (str | None): The function to call. Defaults to None.\r\n\r\n        Returns:\r\n            list[bytes | int]: The llama prompt, a function selection prompt if no\r\n                function is specified, or a function argument prompt if a function is\r\n                specified\r\n        \"\"\"\r\n        system = (\r\n            \"Help choose the appropriate function to call to answer the user's question.\"\r\n            if function_to_call is None\r\n            else \"**IMPORTANT**\"\r\n        ) + \"\\nYou must respond with ONLY the JSON object, with NO additional text or explanation.\"\r\n\r\n        data = (\r\n            self.function_data(functions, function_to_call)\r\n            if function_to_call\r\n            else self.functions_summary(functions)\r\n        )\r\n\r\n        if self.is_instruct:\r\n            return f\"[INST] <<SYS>>\\n{system}\\n\\n{data}\\n<</SYS>>\\n\\n{prompt} [/INST]\"\r\n        else:\r\n            return f\"{system}\\n\\n{data}\\n\\n{prompt}\"","file":"/pilot/utils/function_calling.py","language":"python","fileHash":"4fa33ffd67d54374bc275c9eb7d0f2bf0f445fc52d2ee1431662ecd0a037fa35","hash":"542019e27bf10ad091aa3812f4ae07a64740a8d36232b8324ba253fed721563e","processedContent":"class JsonPrompter:\r\n    \"\"\"\r\n    Adapted from local_llm_function_calling\r\n    \"\"\"\r\n    def __init__(self, is_instruct: bool = False):\r\n        \"\"\"This code defines a constructor for the class, which sets an initial value for the `is_instruct` attribute. The attribute is set to `False` by default, but can be overridden in the constructor if needed.\"\"\"\n        pass\n\r\n    def function_descriptions(\r\n        \"\"\"This code defines a function called \"function_descriptions\" that takes two arguments: a list of functions and a string representing the name of the function to call. It returns a list of strings containing the descriptions of the functions in the list that match the specified function name, or an empty list if no matching function is found.\"\"\"\n        pass\n\r\n    def function_parameters(\r\n        \"\"\"This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It is used to define the structure of a function in a typed dictionary. The function takes two arguments: a list of functions and a string representing the function to call. It returns the parameters of the function as a JSON schema.\"\"\"\n        pass\n\r\n    def function_data(\r\n        \"\"\"This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It is used to define the structure of a function in a typed dictionary. The function takes two arguments: a list of functions and a string representing the function to call. It returns the parameters of the function as a JSON schema.\"\"\"\n        pass\n\r\n    def function_summary(self, function: FunctionType) -> str:\r\n        \"\"\"This code defines a function that takes a function object as an argument and returns a summary of the function in the form of a bullet point. The summary includes the name of the function and its description, if it has one.\"\"\"\n        pass\n\r\n    def functions_summary(self, functions: list[FunctionType]) -> str:\r\n        \"\"\"This code defines a function that takes a list of function objects as an argument and returns a summary of the functions in the form of a bulleted list. The summary includes the name of the function and its description, if it has one.\"\"\"\n        pass\n\r\n    def prompt(\r\n        self,\r\n        prompt: str,\r\n        functions: list[FunctionType],\r\n        function_to_call: Union[str, None] = None,\r\n    ) -> str:\r\n        \"\"\"Generate the llama prompt\r\n\r\n        Args:\r\n            prompt (str): The prompt to generate the response to\r\n            functions (list[FunctionType]): The functions to generate the response from\r\n            function_to_call (str | None): The function to call. Defaults to None.\r\n\r\n        Returns:\r\n            list[bytes | int]: The llama prompt, a function selection prompt if no\r\n                function is specified, or a function argument prompt if a function is\r\n                specified\r\n        \"\"\"\r\n        system = (\r\n            \"Help choose the appropriate function to call to answer the user's question.\"\r\n            if function_to_call is None\r\n            else \"**IMPORTANT**\"\r\n        ) + \"\\nYou must respond with ONLY the JSON object, with NO additional text or explanation.\"\r\n\r\n        data = (\r\n            self.function_data(functions, function_to_call)\r\n            if function_to_call\r\n            else self.functions_summary(functions)\r\n        )\r\n\r\n        if self.is_instruct:\r\n            return f\"[INST] <<SYS>>\\n{system}\\n\\n{data}\\n<</SYS>>\\n\\n{prompt} [/INST]\"\r\n        else:\r\n            return f\"{system}\\n\\n{data}\\n\\n{prompt}\"","documentation":"The code defines a class called `JsonPrompter` that generates a prompt for a chatbot to answer a user's question. It takes a list of functions and a string representing the function to call as arguments, and returns a JSON schema with the parameters of the selected function."}},{"key":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#__init__().","attributes":{"range":[79,4,80,38],"symbol":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#__init__().","content":"def __init__(self, is_instruct: bool = False):\r\n        self.is_instruct = is_instruct","file":"/pilot/utils/function_calling.py","language":"python","fileHash":"4fa33ffd67d54374bc275c9eb7d0f2bf0f445fc52d2ee1431662ecd0a037fa35","hash":"1752a6c7ef81350439ee3810621af602e17bbb5aff329b197e6752009904f0e1","processedContent":"def __init__(self, is_instruct: bool = False):\r\n        self.is_instruct = is_instruct","documentation":"This code defines a constructor for the class, which sets an initial value for the `is_instruct` attribute. The attribute is set to `False` by default, but can be overridden in the constructor if needed."}},{"key":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#function_descriptions().","attributes":{"range":[82,4,99,9],"symbol":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#function_descriptions().","content":"def function_descriptions(\r\n        self, functions: list[FunctionType], function_to_call: str\r\n    ) -> list[str]:\r\n        \"\"\"Get the descriptions of the functions\r\n\r\n        Args:\r\n            functions (list[FunctionType]): The functions to get the descriptions of\r\n            function_to_call (str): The function to call\r\n\r\n        Returns:\r\n            list[str]: The descriptions of the functions\r\n                (empty if the function doesn't exist or has no description)\r\n        \"\"\"\r\n        return [\r\n            f'# {function[\"name\"]}: {function[\"description\"]}'\r\n            for function in functions\r\n            if function[\"name\"] == function_to_call and \"description\" in function\r\n        ]","file":"/pilot/utils/function_calling.py","language":"python","fileHash":"4fa33ffd67d54374bc275c9eb7d0f2bf0f445fc52d2ee1431662ecd0a037fa35","hash":"a3bee5836d039c5b2d95dd03f910493f382d636ffab8a5ddd40f4c2c0aa03a9a","processedContent":"def function_descriptions(\r\n        self, functions: list[FunctionType], function_to_call: str\r #This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It is used to define the structure of a function in a typed dictionary.\n    ) -> list[str]:\r\n        \"\"\"Get the descriptions of the functions\r\n\r\n        Args:\r\n            functions (list[FunctionType]): The functions to get the descriptions of\r\n            function_to_call (str): The function to call\r\n\r\n        Returns:\r\n            list[str]: The descriptions of the functions\r\n                (empty if the function doesn't exist or has no description)\r\n        \"\"\"\r\n        return [\r\n            f'# {function[\"name\"]}: {function[\"description\"]}'\r\n            for function in functions\r\n            if function[\"name\"] == function_to_call and \"description\" in function\r\n        ]","documentation":"This code defines a function called \"function_descriptions\" that takes two arguments: a list of functions and a string representing the name of the function to call. It returns a list of strings containing the descriptions of the functions in the list that match the specified function name, or an empty list if no matching function is found."}},{"key":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#function_parameters().","attributes":{"range":[101,4,117,9],"symbol":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#function_parameters().","content":"def function_parameters(\r\n        self, functions: list[FunctionType], function_to_call: str\r\n    ) -> str:\r\n        \"\"\"Get the parameters of the function\r\n\r\n        Args:\r\n            functions (list[FunctionType]): The functions to get the parameters of\r\n            function_to_call (str): The function to call\r\n\r\n        Returns:\r\n            str: The parameters of the function as a JSON schema\r\n        \"\"\"\r\n        return next(\r\n            json.dumps(function[\"parameters\"][\"properties\"], indent=4)\r\n            for function in functions\r\n            if function[\"name\"] == function_to_call\r\n        )","file":"/pilot/utils/function_calling.py","language":"python","fileHash":"4fa33ffd67d54374bc275c9eb7d0f2bf0f445fc52d2ee1431662ecd0a037fa35","hash":"d6de330a1d5f1608408dc2ca20e19636eabba09516a47ffbf14eb42b7ea56241","processedContent":"def function_parameters(\r\n        self, functions: list[FunctionType], function_to_call: str\r #This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It is used to define the structure of a function in a typed dictionary.\n    ) -> str:\r\n        \"\"\"Get the parameters of the function\r\n\r\n        Args:\r\n            functions (list[FunctionType]): The functions to get the parameters of\r\n            function_to_call (str): The function to call\r\n\r\n        Returns:\r\n            str: The parameters of the function as a JSON schema\r\n        \"\"\"\r\n        return next(\r\n            json.dumps(function[\"parameters\"][\"properties\"], indent=4)\r\n            \"\"\"\n            scip-python python python-stdlib 3.11 json/__init__:: undefined\n            scip-python python python-stdlib 3.11 json/dumps().: undefined\n            \"\"\"\n            for function in functions\r\n            if function[\"name\"] == function_to_call\r\n        )","documentation":"This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It is used to define the structure of a function in a typed dictionary. The function takes two arguments: a list of functions and a string representing the function to call. It returns the parameters of the function as a JSON schema."}},{"key":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#function_data().","attributes":{"range":[119,4,138,9],"symbol":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#function_data().","content":"def function_data(\r\n        self, functions: list[FunctionType], function_to_call: str\r\n    ) -> str:\r\n        \"\"\"Get the data for the function\r\n\r\n        Args:\r\n            functions (list[FunctionType]): The functions to get the data for\r\n            function_to_call (str): The function to call\r\n\r\n        Returns:\r\n            str: The data necessary to generate the arguments for the function\r\n        \"\"\"\r\n        return \"\\n\".join(\r\n            [\r\n                \"Here is the schema for the expected JSON object:\",\r\n                \"```json\",\r\n                self.function_parameters(functions, function_to_call),\r\n                \"```\",\r\n            ]\r\n        )","file":"/pilot/utils/function_calling.py","language":"python","fileHash":"4fa33ffd67d54374bc275c9eb7d0f2bf0f445fc52d2ee1431662ecd0a037fa35","hash":"63b3dad0dad014addbe86a9a9b991d335e67c536b47517662802375d791916d3","processedContent":"def function_data(\r\n        self, functions: list[FunctionType], function_to_call: str\r #This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It is used to define the structure of a function in a typed dictionary.\n    ) -> str:\r\n        \"\"\"Get the data for the function\r\n\r\n        Args:\r\n            functions (list[FunctionType]): The functions to get the data for\r\n            function_to_call (str): The function to call\r\n\r\n        Returns:\r\n            str: The data necessary to generate the arguments for the function\r\n        \"\"\"\r\n        return \"\\n\".join(\r\n            [\r\n                \"Here is the schema for the expected JSON object:\",\r\n                \"```json\",\r\n                self.function_parameters(functions, function_to_call),\r #This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It is used to define the structure of a function in a typed dictionary. The function takes two arguments: a list of functions and a string representing the function to call. It returns the parameters of the function as a JSON schema.\n                \"```\",\r\n            ]\r\n        )","documentation":"This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It is used to define the structure of a function in a typed dictionary. The function takes two arguments: a list of functions and a string representing the function to call. It returns the parameters of the function as a JSON schema."}},{"key":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#function_summary().","attributes":{"range":[140,4,151,9],"symbol":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#function_summary().","content":"def function_summary(self, function: FunctionType) -> str:\r\n        \"\"\"Get a summary of a function\r\n\r\n        Args:\r\n            function (FunctionType): The function to get the summary of\r\n\r\n        Returns:\r\n            str: The summary of the function, as a bullet point\r\n        \"\"\"\r\n        return f\"- {function['name']}\" + (\r\n            f\" - {function['description']}\" if \"description\" in function else \"\"\r\n        )","file":"/pilot/utils/function_calling.py","language":"python","fileHash":"4fa33ffd67d54374bc275c9eb7d0f2bf0f445fc52d2ee1431662ecd0a037fa35","hash":"c752a019f23bba51291cef904c6b127580be9c65b3a5f25884c2c925ae52f7b0","processedContent":"def function_summary(self, function: FunctionType) -> str:\r\n        \"\"\"Get a summary of a function\r\n\r\n        Args:\r\n            function (FunctionType): The function to get the summary of\r\n\r\n        Returns:\r\n            str: The summary of the function, as a bullet point\r\n        \"\"\"\r\n        return f\"- {function['name']}\" + (\r\n            f\" - {function['description']}\" if \"description\" in function else \"\"\r\n        )","documentation":"This code defines a function that takes a function object as an argument and returns a summary of the function in the form of a bullet point. The summary includes the name of the function and its description, if it has one."}},{"key":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#functions_summary().","attributes":{"range":[153,4,164,9],"symbol":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#functions_summary().","content":"def functions_summary(self, functions: list[FunctionType]) -> str:\r\n        \"\"\"Get a summary of the functions\r\n\r\n        Args:\r\n            functions (list[FunctionType]): The functions to get the summary of\r\n\r\n        Returns:\r\n            str: The summary of the functions, as a bulleted list\r\n        \"\"\"\r\n        return \"Available functions:\\n\" + \"\\n\".join(\r\n            self.function_summary(function) for function in functions\r\n        )","file":"/pilot/utils/function_calling.py","language":"python","fileHash":"4fa33ffd67d54374bc275c9eb7d0f2bf0f445fc52d2ee1431662ecd0a037fa35","hash":"58b3fd6c6919509a38ea9bc01f320e5849d507c35adcc2a9d97b4f9bd938d2ff","processedContent":"def functions_summary(self, functions: list[FunctionType]) -> str:\r\n        \"\"\"Get a summary of the functions\r\n\r\n        Args:\r\n            functions (list[FunctionType]): The functions to get the summary of\r\n\r\n        Returns:\r\n            str: The summary of the functions, as a bulleted list\r\n        \"\"\"\r\n        return \"Available functions:\\n\" + \"\\n\".join(\r\n            self.function_summary(function) for function in functions\r #This code defines a function that takes a function object as an argument and returns a summary of the function in the form of a bullet point. The summary includes the name of the function and its description, if it has one.\n        )","documentation":"This code defines a function that takes a list of function objects as an argument and returns a summary of the functions in the form of a bulleted list. The summary includes the name of the function and its description, if it has one."}},{"key":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#prompt().","attributes":{"range":[166,4,199,52],"symbol":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#prompt().","content":"def prompt(\r\n        self,\r\n        prompt: str,\r\n        functions: list[FunctionType],\r\n        function_to_call: Union[str, None] = None,\r\n    ) -> str:\r\n        \"\"\"Generate the llama prompt\r\n\r\n        Args:\r\n            prompt (str): The prompt to generate the response to\r\n            functions (list[FunctionType]): The functions to generate the response from\r\n            function_to_call (str | None): The function to call. Defaults to None.\r\n\r\n        Returns:\r\n            list[bytes | int]: The llama prompt, a function selection prompt if no\r\n                function is specified, or a function argument prompt if a function is\r\n                specified\r\n        \"\"\"\r\n        system = (\r\n            \"Help choose the appropriate function to call to answer the user's question.\"\r\n            if function_to_call is None\r\n            else \"**IMPORTANT**\"\r\n        ) + \"\\nYou must respond with ONLY the JSON object, with NO additional text or explanation.\"\r\n\r\n        data = (\r\n            self.function_data(functions, function_to_call)\r\n            if function_to_call\r\n            else self.functions_summary(functions)\r\n        )\r\n\r\n        if self.is_instruct:\r\n            return f\"[INST] <<SYS>>\\n{system}\\n\\n{data}\\n<</SYS>>\\n\\n{prompt} [/INST]\"\r\n        else:\r\n            return f\"{system}\\n\\n{data}\\n\\n{prompt}\"","file":"/pilot/utils/function_calling.py","language":"python","fileHash":"4fa33ffd67d54374bc275c9eb7d0f2bf0f445fc52d2ee1431662ecd0a037fa35","hash":"f15831b21aae93e7806b12a9b27e126d0060a7fc861ee0cdd275d972f0cd3333","processedContent":"def prompt(\r\n        self,\r\n        prompt: str,\r\n        functions: list[FunctionType],\r #This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It is used to define the structure of a function in a typed dictionary.\n        function_to_call: Union[str, None] = None,\r #undefined\n    ) -> str:\r\n        \"\"\"Generate the llama prompt\r\n\r\n        Args:\r\n            prompt (str): The prompt to generate the response to\r\n            functions (list[FunctionType]): The functions to generate the response from\r\n            function_to_call (str | None): The function to call. Defaults to None.\r\n\r\n        Returns:\r\n            list[bytes | int]: The llama prompt, a function selection prompt if no\r\n                function is specified, or a function argument prompt if a function is\r\n                specified\r\n        \"\"\"\r\n        system = (\r\n            \"Help choose the appropriate function to call to answer the user's question.\"\r\n            if function_to_call is None\r\n            else \"**IMPORTANT**\"\r\n        ) + \"\\nYou must respond with ONLY the JSON object, with NO additional text or explanation.\"\r\n\r\n        data = (\r\n            self.function_data(functions, function_to_call)\r #This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It is used to define the structure of a function in a typed dictionary. The function takes two arguments: a list of functions and a string representing the function to call. It returns the parameters of the function as a JSON schema.\n            if function_to_call\r\n            else self.functions_summary(functions)\r #This code defines a function that takes a list of function objects as an argument and returns a summary of the functions in the form of a bulleted list. The summary includes the name of the function and its description, if it has one.\n        )\r\n\r\n        if self.is_instruct:\r #undefined\n            return f\"[INST] <<SYS>>\\n{system}\\n\\n{data}\\n<</SYS>>\\n\\n{prompt} [/INST]\"\r\n        else:\r\n            return f\"{system}\\n\\n{data}\\n\\n{prompt}\"","documentation":"The code defines a function called `prompt` that generates a prompt for the user to choose a function to call. It takes two arguments: a list of functions and a string representing the function to call. If no function is specified, it returns a summary of the functions in the form of a bulleted list. If a function is specified, it returns the parameters of the function as a JSON schema."}},{"key":"scip-python python python-stdlib 3.11 typing/TypeVar#","attributes":{"symbol":"scip-python python python-stdlib 3.11 typing/TypeVar#","language":"python"}},{"key":"scip-python python python-stdlib 3.11 typing/List.","attributes":{"symbol":"scip-python python python-stdlib 3.11 typing/List.","language":"python"}},{"key":"scip-python python python-stdlib 3.11 typing/Literal.","attributes":{"symbol":"scip-python python python-stdlib 3.11 typing/Literal.","language":"python"}},{"key":"scip-python python python-stdlib 3.11 typing/TypedDict.","attributes":{"symbol":"scip-python python python-stdlib 3.11 typing/TypedDict.","language":"python"}},{"key":"scip-python python python-stdlib 3.11 typing/Callable.","attributes":{"symbol":"scip-python python python-stdlib 3.11 typing/Callable.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.function_calling`/JsonTypeBase.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.function_calling`/JsonTypeBase.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.function_calling`/JsonType.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.function_calling`/JsonType.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#is_instruct.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#is_instruct.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.llm_connection`/get_tokens_in_messages().","attributes":{"range":[22,0,25,60],"symbol":"scip-python python temp indexer `pilot.utils.llm_connection`/get_tokens_in_messages().","content":"def get_tokens_in_messages(messages: List[str]) -> int:\n    tokenizer = tiktoken.get_encoding(\"cl100k_base\")  # GPT-4 tokenizer\n    tokenized_messages = [tokenizer.encode(message['content']) for message in messages]\n    return sum(len(tokens) for tokens in tokenized_messages)","file":"/pilot/utils/llm_connection.py","language":"python","fileHash":"42cf6b119f292f460c68eab86733c13aa50b286df215725c06a6561264a03d01","hash":"046e8767b72a2e96d0e1d220c1a90476d970bc6929809dbbbd50e29cf380283f","processedContent":"def get_tokens_in_messages(messages: List[str]) -> int: #undefined\n    tokenizer = tiktoken.get_encoding(\"cl100k_base\")  # GPT-4 tokenizer\n    tokenized_messages = [tokenizer.encode(message['content']) for message in messages]\n    return sum(len(tokens) for tokens in tokenized_messages)","documentation":"This code takes a list of messages and returns the total number of tokens in those messages. It uses a GPT-4 tokenizer to encode each message and then counts the number of tokens in each encoded message before summing them all up."}},{"key":"scip-python python temp indexer `pilot.utils.llm_connection`/num_tokens_from_functions().","attributes":{"range":[28,0,60,21],"symbol":"scip-python python temp indexer `pilot.utils.llm_connection`/num_tokens_from_functions().","content":"def num_tokens_from_functions(functions):\n    \"\"\"Return the number of tokens used by a list of functions.\"\"\"\n    encoding = tiktoken.get_encoding(\"cl100k_base\")\n\n    num_tokens = 0\n    for function in functions:\n        function_tokens = len(encoding.encode(function['name']))\n        function_tokens += len(encoding.encode(function['description']))\n\n        if 'parameters' in function:\n            parameters = function['parameters']\n            if 'properties' in parameters:\n                for propertiesKey in parameters['properties']:\n                    function_tokens += len(encoding.encode(propertiesKey))\n                    v = parameters['properties'][propertiesKey]\n                    for field in v:\n                        if field == 'type':\n                            function_tokens += 2\n                            function_tokens += len(encoding.encode(v['type']))\n                        elif field == 'description':\n                            function_tokens += 2\n                            function_tokens += len(encoding.encode(v['description']))\n                        elif field == 'enum':\n                            function_tokens -= 3\n                            for o in v['enum']:\n                                function_tokens += 3\n                                function_tokens += len(encoding.encode(o))\n                function_tokens += 11\n\n        num_tokens += function_tokens\n\n    num_tokens += 12\n    return num_tokens","file":"/pilot/utils/llm_connection.py","language":"python","fileHash":"42cf6b119f292f460c68eab86733c13aa50b286df215725c06a6561264a03d01","hash":"94e689a8fd364ae174c1c968fa27568a2e002aa142b0768b6c433caa6e868af4","processedContent":"def num_tokens_from_functions(functions):\n    \"\"\"Return the number of tokens used by a list of functions.\"\"\"\n    encoding = tiktoken.get_encoding(\"cl100k_base\")\n\n    num_tokens = 0\n    for function in functions:\n        function_tokens = len(encoding.encode(function['name']))\n        function_tokens += len(encoding.encode(function['description']))\n\n        if 'parameters' in function:\n            parameters = function['parameters']\n            if 'properties' in parameters:\n                for propertiesKey in parameters['properties']:\n                    function_tokens += len(encoding.encode(propertiesKey))\n                    v = parameters['properties'][propertiesKey]\n                    for field in v:\n                        if field == 'type':\n                            function_tokens += 2\n                            function_tokens += len(encoding.encode(v['type']))\n                        elif field == 'description':\n                            function_tokens += 2\n                            function_tokens += len(encoding.encode(v['description']))\n                        elif field == 'enum':\n                            function_tokens -= 3\n                            for o in v['enum']:\n                                function_tokens += 3\n                                function_tokens += len(encoding.encode(o))\n                function_tokens += 11\n\n        num_tokens += function_tokens\n\n    num_tokens += 12\n    return num_tokens","documentation":"This code calculates the number of tokens used by a list of functions. It uses a tokenizer to count the length of each function's name, description, and parameters. The result is returned as an integer."}},{"key":"scip-python python temp indexer `pilot.utils.llm_connection`/delete_last_n_lines().","attributes":{"range":[120,0,125,34],"symbol":"scip-python python temp indexer `pilot.utils.llm_connection`/delete_last_n_lines().","content":"def delete_last_n_lines(n):\n    for _ in range(n):\n        # Move the cursor up one line\n        sys.stdout.write('\\033[F')\n        # Clear the current line\n        sys.stdout.write('\\033[K')","file":"/pilot/utils/llm_connection.py","language":"python","fileHash":"42cf6b119f292f460c68eab86733c13aa50b286df215725c06a6561264a03d01","hash":"a94c3e12735fb8e1646e7c3a0db0b95af11f4e5868b8d186a96784d5f89e9986","processedContent":"def delete_last_n_lines(n):\n    for _ in range(n):\n        # Move the cursor up one line\n        sys.stdout.write('\\033[F')\n        \"\"\"\n        scip-python python python-stdlib 3.11 sys/__init__:: undefined\n        scip-python python python-stdlib 3.11 sys/stdout.stdout.: undefined\n        scip-python python python-stdlib 3.11 typing/IO#write().: undefined\n        \"\"\"\n        # Clear the current line\n        sys.stdout.write('\\033[K')","documentation":"This code deletes the last n lines of output in the terminal."}},{"key":"scip-python python temp indexer `pilot.utils.llm_connection`/count_lines_based_on_width().","attributes":{"range":[128,0,130,25],"symbol":"scip-python python temp indexer `pilot.utils.llm_connection`/count_lines_based_on_width().","content":"def count_lines_based_on_width(content, width):\n    lines_required = sum(len(line) // width + 1 for line in content.split('\\n'))\n    return lines_required","file":"/pilot/utils/llm_connection.py","language":"python","fileHash":"42cf6b119f292f460c68eab86733c13aa50b286df215725c06a6561264a03d01","hash":"f80639989b1de5eb6123e5c9826c7456eb7a09753b8f5ef05f43c0c85d7bde9d","processedContent":"def count_lines_based_on_width(content, width):\n    lines_required = sum(len(line) // width + 1 for line in content.split('\\n'))\n    return lines_required","documentation":"This code counts the number of lines required to display a piece of text based on a given width. It does this by splitting the text into individual lines, calculating the length of each line, and then summing the total number of lines needed to display the text."}},{"key":"scip-python python temp indexer `pilot.utils.llm_connection`/get_tokens_in_messages_from_openai_error().","attributes":{"range":[133,0,149,19],"symbol":"scip-python python temp indexer `pilot.utils.llm_connection`/get_tokens_in_messages_from_openai_error().","content":"def get_tokens_in_messages_from_openai_error(error_message):\n    \"\"\"\n    Extract the token count from a message.\n\n    Args:\n    message (str): The message to extract the token count from.\n\n    Returns:\n    int or None: The token count if found, otherwise None.\n    \"\"\"\n\n    match = re.search(r\"your messages resulted in (\\d+) tokens\", error_message)\n\n    if match:\n        return int(match.group(1))\n    else:\n        return None","file":"/pilot/utils/llm_connection.py","language":"python","fileHash":"42cf6b119f292f460c68eab86733c13aa50b286df215725c06a6561264a03d01","hash":"d6e08964f961d1f0b98b2e79e9d8b676aa69cf145427666f2e94c2002e682db2","processedContent":"def get_tokens_in_messages_from_openai_error(error_message):\n    \"\"\"\n    Extract the token count from a message.\n\n    Args:\n    message (str): The message to extract the token count from.\n\n    Returns:\n    int or None: The token count if found, otherwise None.\n    \"\"\"\n\n    match = re.search(r\"your messages resulted in (\\d+) tokens\", error_message)\n    \"\"\"\n    scip-python python python-stdlib 3.11 re/__init__:: undefined\n    scip-python python python-stdlib 3.11 re/search().: undefined\n    \"\"\"\n\n    if match:\n        return int(match.group(1)) #undefined\n    else:\n        return None","documentation":"This code extracts the token count from an error message returned by the OpenAI API. It uses regular expressions to search for a specific pattern in the message and returns the token count if found, or None otherwise."}},{"key":"scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().","attributes":{"range":[152,0,254,18],"symbol":"scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().","content":"def retry_on_exception(func):\n    def update_error_count(args):\n        function_error_count = 1 if 'function_error' not in args[0] else args[0]['function_error_count'] + 1\n        args[0]['function_error_count'] = function_error_count\n        return function_error_count\n\n    def set_function_error(args, err_str: str):\n        logger.info(err_str)\n\n        args[0]['function_error'] = err_str\n        if 'function_buffer' in args[0]:\n            del args[0]['function_buffer']\n\n    def wrapper(*args, **kwargs):\n        wait_duration_ms = None\n\n        while True:\n            try:\n                # spinner_stop(spinner)\n                return func(*args, **kwargs)\n            except Exception as e:\n                # Convert exception to string\n                err_str = str(e)\n\n                if isinstance(e, json.JSONDecodeError):\n                    # codellama-34b-instruct seems to send incomplete JSON responses.\n                    # We ask for the rest of the JSON object for the following errors:\n                    # - 'Expecting value' (error if `e.pos` not at the end of the doc: True instead of true)\n                    # - \"Expecting ':' delimiter\"\n                    # - 'Expecting property name enclosed in double quotes'\n                    # - 'Unterminated string starting at'\n                    if e.msg.startswith('Expecting') or e.msg == 'Unterminated string starting at':\n                        if e.msg == 'Expecting value' and len(e.doc) > e.pos:\n                            # Note: clean_json_response() should heal True/False boolean values\n                            err_str = re.split(r'[},\\\\n]', e.doc[e.pos:])[0]\n                            err_str = f'Invalid value: `{err_str}`'\n                        else:\n                            # if e.msg == 'Unterminated string starting at' or len(e.doc) == e.pos:\n                            logger.info('Received incomplete JSON response from LLM. Asking for the rest...')\n                            args[0]['function_buffer'] = e.doc\n                            if 'function_error' in args[0]:\n                                del args[0]['function_error']\n                            continue\n\n                    # TODO: (if it ever comes up) e.msg == 'Extra data' -> trim the response\n                    # 'Invalid control character at', 'Invalid \\\\escape', 'Invalid control character',\n                    # or `Expecting value` with `pos` before the end of `e.doc`\n                    function_error_count = update_error_count(args)\n                    logger.warning('Received invalid character in JSON response from LLM. Asking to retry...')\n                    logger.info(f'  received: {e.doc}')\n                    set_function_error(args, err_str)\n                    if function_error_count < 3:\n                        continue\n                elif isinstance(e, ValidationError):\n                    function_error_count = update_error_count(args)\n                    logger.warning('Received invalid JSON response from LLM. Asking to retry...')\n                    # eg:\n                    # json_path: '$.type'\n                    # message:   \"'command' is not one of ['automated_test', 'command_test', 'manual_test', 'no_test']\"\n                    set_function_error(args, f'at {e.json_path} - {e.message}')\n                    # Attempt retry if the JSON schema is invalid, but avoid getting stuck in a loop\n                    if function_error_count < 3:\n                        continue\n                if \"context_length_exceeded\" in err_str:\n                    # If the specific error \"context_length_exceeded\" is present, simply return without retry\n                    # spinner_stop(spinner)\n                    raise TokenLimitError(get_tokens_in_messages_from_openai_error(err_str), MAX_GPT_MODEL_TOKENS)\n                if \"rate_limit_exceeded\" in err_str:\n                    # Extracting the duration from the error string\n                    match = re.search(r\"Please try again in (\\d+)ms.\", err_str)\n                    if match:\n                        # spinner = spinner_start(colored(\"Rate limited. Waiting...\", 'yellow'))\n                        if wait_duration_ms is None:\n                            wait_duration_ms = int(match.group(1))\n                        elif wait_duration_ms < 6000:\n                            # waiting 6ms isn't usually long enough - exponential back-off until about 6 seconds\n                            wait_duration_ms *= 2\n                        logger.debug(f'Rate limited. Waiting {wait_duration_ms}ms...')\n                        time.sleep(wait_duration_ms / 1000)\n                    continue\n\n                print(color_red('There was a problem with request to openai API:'))\n                # spinner_stop(spinner)\n                print(err_str)\n                logger.error(f'There was a problem with request to openai API: {err_str}')\n\n                project = args[2]\n                print('yes/no', type='button')\n                user_message = styled_text(\n                    project,\n                    'Do you want to try make the same request again? If yes, just press ENTER. Otherwise, type \"no\".',\n                    style=Style.from_dict({\n                        'question': '#FF0000 bold',\n                        'answer': '#FF910A bold'\n                    })\n                )\n\n                # TODO: take user's input into consideration - send to LLM?\n                # https://github.com/Pythagora-io/gpt-pilot/issues/122\n                if user_message.lower() not in AFFIRMATIVE_ANSWERS:\n                    return {}\n\n    return wrapper","file":"/pilot/utils/llm_connection.py","language":"python","fileHash":"42cf6b119f292f460c68eab86733c13aa50b286df215725c06a6561264a03d01","hash":"4b87a5ac95b979f36648381f10668e664f68b9e2c5356ec05e15d7fcfa142e2d","processedContent":"def retry_on_exception(func):\n    def update_error_count(args):\n        \"\"\"This code updates the error count for a function by checking if the function has already encountered an error and incrementing the count accordingly.\"\"\"\n        pass\n\n    def set_function_error(args, err_str: str):\n        \"\"\"This code defines a function called `set_function_error` that takes two arguments: `args` and `err_str`. It logs the error message to the console using the `logger.info()` method, and then sets the `function_error` key in the `args` dictionary to the value of `err_str`. If the `function_buffer` key is present in `args`, it deletes it.\"\"\"\n        pass\n\n    def wrapper(*args, **kwargs):\n        \"\"\"This code is a wrapper function that handles errors and retries when the OpenAI API returns invalid responses. It also provides a way for users to retry the request if they want to.\"\"\"\n        pass\n\n    return wrapper","documentation":"This code defines a decorator function called `retry_on_exception` that retries a function if it encounters an exception, and provides a way for users to retry the request if they want to."}},{"key":"scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().update_error_count().","attributes":{"range":[153,4,156,35],"symbol":"scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().update_error_count().","content":"def update_error_count(args):\n        function_error_count = 1 if 'function_error' not in args[0] else args[0]['function_error_count'] + 1\n        args[0]['function_error_count'] = function_error_count\n        return function_error_count","file":"/pilot/utils/llm_connection.py","language":"python","fileHash":"42cf6b119f292f460c68eab86733c13aa50b286df215725c06a6561264a03d01","hash":"42c267f9c63736c804bc08b53819f235e560e4dfb00d8cfa41133048e353d39d","processedContent":"def update_error_count(args):\n        function_error_count = 1 if 'function_error' not in args[0] else args[0]['function_error_count'] + 1\n        args[0]['function_error_count'] = function_error_count\n        return function_error_count","documentation":"This code updates the error count for a function by checking if the function has already encountered an error and incrementing the count accordingly."}},{"key":"scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().set_function_error().","attributes":{"range":[158,4,163,42],"symbol":"scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().set_function_error().","content":"def set_function_error(args, err_str: str):\n        logger.info(err_str)\n\n        args[0]['function_error'] = err_str\n        if 'function_buffer' in args[0]:\n            del args[0]['function_buffer']","file":"/pilot/utils/llm_connection.py","language":"python","fileHash":"42cf6b119f292f460c68eab86733c13aa50b286df215725c06a6561264a03d01","hash":"57b316624e9d476beb024b8a4a69c7a2388769a000dfa3dd5a1a9c0fe5e8b65a","processedContent":"def set_function_error(args, err_str: str):\n        logger.info(err_str)\n        \"\"\"\n        scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n        scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n        \"\"\"\n\n        args[0]['function_error'] = err_str\n        if 'function_buffer' in args[0]:\n            del args[0]['function_buffer']","documentation":"This code defines a function called `set_function_error` that takes two arguments: `args` and `err_str`. It logs the error message to the console using the `logger.info()` method, and then sets the `function_error` key in the `args` dictionary to the value of `err_str`. If the `function_buffer` key is present in `args`, it deletes it."}},{"key":"scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().wrapper().","attributes":{"range":[165,4,252,29],"symbol":"scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().wrapper().","content":"def wrapper(*args, **kwargs):\n        wait_duration_ms = None\n\n        while True:\n            try:\n                # spinner_stop(spinner)\n                return func(*args, **kwargs)\n            except Exception as e:\n                # Convert exception to string\n                err_str = str(e)\n\n                if isinstance(e, json.JSONDecodeError):\n                    # codellama-34b-instruct seems to send incomplete JSON responses.\n                    # We ask for the rest of the JSON object for the following errors:\n                    # - 'Expecting value' (error if `e.pos` not at the end of the doc: True instead of true)\n                    # - \"Expecting ':' delimiter\"\n                    # - 'Expecting property name enclosed in double quotes'\n                    # - 'Unterminated string starting at'\n                    if e.msg.startswith('Expecting') or e.msg == 'Unterminated string starting at':\n                        if e.msg == 'Expecting value' and len(e.doc) > e.pos:\n                            # Note: clean_json_response() should heal True/False boolean values\n                            err_str = re.split(r'[},\\\\n]', e.doc[e.pos:])[0]\n                            err_str = f'Invalid value: `{err_str}`'\n                        else:\n                            # if e.msg == 'Unterminated string starting at' or len(e.doc) == e.pos:\n                            logger.info('Received incomplete JSON response from LLM. Asking for the rest...')\n                            args[0]['function_buffer'] = e.doc\n                            if 'function_error' in args[0]:\n                                del args[0]['function_error']\n                            continue\n\n                    # TODO: (if it ever comes up) e.msg == 'Extra data' -> trim the response\n                    # 'Invalid control character at', 'Invalid \\\\escape', 'Invalid control character',\n                    # or `Expecting value` with `pos` before the end of `e.doc`\n                    function_error_count = update_error_count(args)\n                    logger.warning('Received invalid character in JSON response from LLM. Asking to retry...')\n                    logger.info(f'  received: {e.doc}')\n                    set_function_error(args, err_str)\n                    if function_error_count < 3:\n                        continue\n                elif isinstance(e, ValidationError):\n                    function_error_count = update_error_count(args)\n                    logger.warning('Received invalid JSON response from LLM. Asking to retry...')\n                    # eg:\n                    # json_path: '$.type'\n                    # message:   \"'command' is not one of ['automated_test', 'command_test', 'manual_test', 'no_test']\"\n                    set_function_error(args, f'at {e.json_path} - {e.message}')\n                    # Attempt retry if the JSON schema is invalid, but avoid getting stuck in a loop\n                    if function_error_count < 3:\n                        continue\n                if \"context_length_exceeded\" in err_str:\n                    # If the specific error \"context_length_exceeded\" is present, simply return without retry\n                    # spinner_stop(spinner)\n                    raise TokenLimitError(get_tokens_in_messages_from_openai_error(err_str), MAX_GPT_MODEL_TOKENS)\n                if \"rate_limit_exceeded\" in err_str:\n                    # Extracting the duration from the error string\n                    match = re.search(r\"Please try again in (\\d+)ms.\", err_str)\n                    if match:\n                        # spinner = spinner_start(colored(\"Rate limited. Waiting...\", 'yellow'))\n                        if wait_duration_ms is None:\n                            wait_duration_ms = int(match.group(1))\n                        elif wait_duration_ms < 6000:\n                            # waiting 6ms isn't usually long enough - exponential back-off until about 6 seconds\n                            wait_duration_ms *= 2\n                        logger.debug(f'Rate limited. Waiting {wait_duration_ms}ms...')\n                        time.sleep(wait_duration_ms / 1000)\n                    continue\n\n                print(color_red('There was a problem with request to openai API:'))\n                # spinner_stop(spinner)\n                print(err_str)\n                logger.error(f'There was a problem with request to openai API: {err_str}')\n\n                project = args[2]\n                print('yes/no', type='button')\n                user_message = styled_text(\n                    project,\n                    'Do you want to try make the same request again? If yes, just press ENTER. Otherwise, type \"no\".',\n                    style=Style.from_dict({\n                        'question': '#FF0000 bold',\n                        'answer': '#FF910A bold'\n                    })\n                )\n\n                # TODO: take user's input into consideration - send to LLM?\n                # https://github.com/Pythagora-io/gpt-pilot/issues/122\n                if user_message.lower() not in AFFIRMATIVE_ANSWERS:\n                    return {}","file":"/pilot/utils/llm_connection.py","language":"python","fileHash":"42cf6b119f292f460c68eab86733c13aa50b286df215725c06a6561264a03d01","hash":"0d9bd892244bca8c05e87efd8ad98f8db250d85e6eb95cb4f9689ce868bf0860","processedContent":"def wrapper(*args, **kwargs):\n        wait_duration_ms = None\n\n        while True:\n            try:\n                # spinner_stop(spinner)\n                return func(*args, **kwargs)\n            except Exception as e:\n                # Convert exception to string\n                err_str = str(e)\n\n                if isinstance(e, json.JSONDecodeError):\n                \"\"\"\n                scip-python python python-stdlib 3.11 json/__init__:: undefined\n                scip-python python temp indexer `json.decoder`/JSONDecodeError#: undefined\n                \"\"\"\n                    # codellama-34b-instruct seems to send incomplete JSON responses.\n                    # We ask for the rest of the JSON object for the following errors:\n                    # - 'Expecting value' (error if `e.pos` not at the end of the doc: True instead of true)\n                    # - \"Expecting ':' delimiter\"\n                    # - 'Expecting property name enclosed in double quotes'\n                    # - 'Unterminated string starting at'\n                    if e.msg.startswith('Expecting') or e.msg == 'Unterminated string starting at':\n                        if e.msg == 'Expecting value' and len(e.doc) > e.pos:\n                            # Note: clean_json_response() should heal True/False boolean values\n                            err_str = re.split(r'[},\\\\n]', e.doc[e.pos:])[0]\n                            \"\"\"\n                            scip-python python python-stdlib 3.11 re/__init__:: undefined\n                            scip-python python python-stdlib 3.11 re/split().: undefined\n                            \"\"\"\n                            err_str = f'Invalid value: `{err_str}`'\n                        else:\n                            # if e.msg == 'Unterminated string starting at' or len(e.doc) == e.pos:\n                            logger.info('Received incomplete JSON response from LLM. Asking for the rest...')\n                            \"\"\"\n                            scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n                            scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n                            \"\"\"\n                            args[0]['function_buffer'] = e.doc\n                            if 'function_error' in args[0]:\n                                del args[0]['function_error']\n                            continue\n\n                    # TODO: (if it ever comes up) e.msg == 'Extra data' -> trim the response\n                    # 'Invalid control character at', 'Invalid \\\\escape', 'Invalid control character',\n                    # or `Expecting value` with `pos` before the end of `e.doc`\n                    function_error_count = update_error_count(args)\n                    logger.warning('Received invalid character in JSON response from LLM. Asking to retry...')\n                    \"\"\"\n                    scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n                    scip-python python python-stdlib 3.11 logging/Logger#warning().: undefined\n                    \"\"\"\n                    logger.info(f'  received: {e.doc}')\n                    \"\"\"\n                    scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n                    scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n                    \"\"\"\n                    set_function_error(args, err_str)\n                    if function_error_count < 3:\n                        continue\n                elif isinstance(e, ValidationError):\n                    function_error_count = update_error_count(args)\n                    logger.warning('Received invalid JSON response from LLM. Asking to retry...')\n                    \"\"\"\n                    scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n                    scip-python python python-stdlib 3.11 logging/Logger#warning().: undefined\n                    \"\"\"\n                    # eg:\n                    # json_path: '$.type'\n                    # message:   \"'command' is not one of ['automated_test', 'command_test', 'manual_test', 'no_test']\"\n                    set_function_error(args, f'at {e.json_path} - {e.message}')\n                    # Attempt retry if the JSON schema is invalid, but avoid getting stuck in a loop\n                    if function_error_count < 3:\n                        continue\n                if \"context_length_exceeded\" in err_str:\n                    # If the specific error \"context_length_exceeded\" is present, simply return without retry\n                    # spinner_stop(spinner)\n                    raise TokenLimitError(get_tokens_in_messages_from_openai_error(err_str), MAX_GPT_MODEL_TOKENS)\n                    \"\"\"\n                    scip-python python temp indexer `pilot.helpers.exceptions.tokenlimiterror`/TokenLimitError#: This code defines a custom exception class called `TokenLimitError` that is raised when the number of tokens in a message exceeds the maximum allowed by the GPT model. The class takes two arguments: `tokens_in_messages` and `max_tokens`, which represent the number of tokens in the message and the maximum number of tokens allowed, respectively. The `__init__` method sets the instance variables and calls the parent class's constructor with a formatted error message.\n                    scip-python python temp indexer `pilot.utils.llm_connection`/get_tokens_in_messages_from_openai_error().: This code extracts the token count from an error message returned by the OpenAI API. It uses regular expressions to search for a specific pattern in the message and returns the token count if found, or None otherwise.\n                    scip-python python temp indexer `pilot.const.llm`/MAX_GPT_MODEL_TOKENS.: undefined\n                    \"\"\"\n                if \"rate_limit_exceeded\" in err_str:\n                    # Extracting the duration from the error string\n                    match = re.search(r\"Please try again in (\\d+)ms.\", err_str)\n                    \"\"\"\n                    scip-python python python-stdlib 3.11 re/__init__:: undefined\n                    scip-python python python-stdlib 3.11 re/search().: undefined\n                    \"\"\"\n                    if match:\n                        # spinner = spinner_start(colored(\"Rate limited. Waiting...\", 'yellow'))\n                        if wait_duration_ms is None:\n                            wait_duration_ms = int(match.group(1)) #undefined\n                        elif wait_duration_ms < 6000:\n                            # waiting 6ms isn't usually long enough - exponential back-off until about 6 seconds\n                            wait_duration_ms *= 2\n                        logger.debug(f'Rate limited. Waiting {wait_duration_ms}ms...')\n                        \"\"\"\n                        scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n                        scip-python python python-stdlib 3.11 logging/Logger#debug().: undefined\n                        \"\"\"\n                        time.sleep(wait_duration_ms / 1000)\n                        \"\"\"\n                        scip-python python python-stdlib 3.11 time/__init__:: undefined\n                        scip-python python python-stdlib 3.11 time/sleep().: undefined\n                        \"\"\"\n                    continue\n\n                print(color_red('There was a problem with request to openai API:')) #undefined\n                # spinner_stop(spinner)\n                print(err_str)\n                logger.error(f'There was a problem with request to openai API: {err_str}')\n                \"\"\"\n                scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n                scip-python python python-stdlib 3.11 logging/Logger#error().: undefined\n                \"\"\"\n\n                project = args[2]\n                print('yes/no', type='button')\n                user_message = styled_text( #This code defines a function called `styled_text` that retrieves user input from a database, styles the question, and saves the response to the database.\n                    project,\n                    'Do you want to try make the same request again? If yes, just press ENTER. Otherwise, type \"no\".',\n                    style=Style.from_dict({\n                    \"\"\"\n                    scip-python python prompt-toolkit 3.0.39 `prompt_toolkit.styles.style`/Style#: undefined\n                    scip-python python prompt-toolkit 3.0.39 `prompt_toolkit.styles.style`/Style#from_dict().: undefined\n                    \"\"\"\n                        'question': '#FF0000 bold',\n                        'answer': '#FF910A bold'\n                    })\n                )\n\n                # TODO: take user's input into consideration - send to LLM?\n                # https://github.com/Pythagora-io/gpt-pilot/issues/122\n                if user_message.lower() not in AFFIRMATIVE_ANSWERS: #undefined\n                    return {}","documentation":"This code is a wrapper function that handles errors and retries when the OpenAI API returns invalid responses. It also provides a way for users to retry the request if they want to."}},{"key":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","attributes":{"range":[257,0,433,59],"symbol":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","content":"@retry_on_exception\ndef stream_gpt_completion(data, req_type, project):\n    \"\"\"\n    Called from create_gpt_chat_completion()\n    :param data:\n    :param req_type: 'project_description' etc. See common.STEPS\n    :param project: NEEDED FOR WRAPPER FUNCTION retry_on_exception\n    :return: {'text': str} or {'function_calls': {'name': str, arguments: '{...}'}}\n    \"\"\"\n    # TODO add type dynamically - this isn't working when connected to the external process\n    try:\n        terminal_width = os.get_terminal_size().columns\n    except OSError:\n        terminal_width = 50\n    lines_printed = 2\n    gpt_response = ''\n    buffer = ''  # A buffer to accumulate incoming data\n    expecting_json = None\n    received_json = False\n\n    if 'functions' in data:\n        expecting_json = data['functions']\n        if 'function_buffer' in data:\n            incomplete_json = get_prompt('utils/incomplete_json.prompt', {'received_json': data['function_buffer']})\n            data['messages'].append({'role': 'user', 'content': incomplete_json})\n            gpt_response = data['function_buffer']\n            received_json = True\n        elif 'function_error' in data:\n            invalid_json = get_prompt('utils/invalid_json.prompt', {'invalid_reason': data['function_error']})\n            data['messages'].append({'role': 'user', 'content': invalid_json})\n            received_json = True\n\n        # Don't send the `functions` parameter to Open AI, but don't remove it from `data` in case we need to retry\n        data = {key: value for key, value in data.items() if not key.startswith('function')}\n\n    def return_result(result_data, lines_printed):\n        if buffer:\n            lines_printed += count_lines_based_on_width(buffer, terminal_width)\n        logger.debug(f'lines printed: {lines_printed} - {terminal_width}')\n\n        # delete_last_n_lines(lines_printed)  # TODO fix and test count_lines_based_on_width()\n        return result_data\n\n    # spinner = spinner_start(yellow(\"Waiting for OpenAI API response...\"))\n    # print(yellow(\"Stream response from OpenAI:\"))\n\n    # Configure for the selected ENDPOINT\n    model = os.getenv('MODEL_NAME', 'gpt-4')\n    endpoint = os.getenv('ENDPOINT')\n\n    # This will be set many times but we don't care, as there are no side-effects to it.\n    telemetry.set(\"model\", model)\n    telemetry.inc(\"num_llm_requests\")\n\n    logger.info(f'> Request model: {model}')\n    if logger.isEnabledFor(logging.DEBUG):\n        logger.debug('\\n'.join([f\"{message['role']}: {message['content']}\" for message in data['messages']]))\n\n    if endpoint == 'AZURE':\n        # If yes, get the AZURE_ENDPOINT from .ENV file\n        endpoint_url = os.getenv('AZURE_ENDPOINT') + '/openai/deployments/' + model + '/chat/completions?api-version=2023-05-15'\n        headers = {\n            'Content-Type': 'application/json',\n            'api-key': get_api_key_or_throw('AZURE_API_KEY')\n        }\n    elif endpoint == 'OPENROUTER':\n        # If so, send the request to the OpenRouter API endpoint\n        endpoint_url = os.getenv('OPENROUTER_ENDPOINT', 'https://openrouter.ai/api/v1/chat/completions')\n        headers = {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + get_api_key_or_throw('OPENROUTER_API_KEY'),\n            'HTTP-Referer': 'https://github.com/Pythagora-io/gpt-pilot',\n            'X-Title': 'GPT Pilot'\n        }\n        data['max_tokens'] = MAX_GPT_MODEL_TOKENS\n        data['model'] = model\n    else:\n        # If not, send the request to the OpenAI endpoint\n        endpoint_url = os.getenv('OPENAI_ENDPOINT', 'https://api.openai.com/v1/chat/completions')\n        headers = {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + get_api_key_or_throw('OPENAI_API_KEY')\n        }\n        data['model'] = model\n\n    response = requests.post(\n        endpoint_url,\n        headers=headers,\n        json=data,\n        stream=True\n    )\n\n    if response.status_code != 200:\n        project.dot_pilot_gpt.log_chat_completion(endpoint, model, req_type, data['messages'], response.text)\n        logger.info(f'problem with request (status {response.status_code}): {response.text}')\n        raise Exception(f\"API responded with status code: {response.status_code}. Response text: {response.text}\")\n\n    # function_calls = {'name': '', 'arguments': ''}\n\n    for line in response.iter_lines():\n        # Ignore keep-alive new lines\n        if line and line != b': OPENROUTER PROCESSING':\n            line = line.decode(\"utf-8\")  # decode the bytes to string\n\n            if line.startswith('data: '):\n                line = line[6:]  # remove the 'data: ' prefix\n\n            # Check if the line is \"[DONE]\" before trying to parse it as JSON\n            if line == \"[DONE]\":\n                continue\n\n            try:\n                json_line = json.loads(line)\n\n                if len(json_line['choices']) == 0:\n                    continue\n\n                if 'error' in json_line:\n                    logger.error(f'Error in LLM response: {json_line}')\n                    raise ValueError(f'Error in LLM response: {json_line[\"error\"][\"message\"]}')\n\n                choice = json_line['choices'][0]\n\n                # if 'finish_reason' in choice and choice['finish_reason'] == 'function_call':\n                #     function_calls['arguments'] = load_data_to_json(function_calls['arguments'])\n                #     return return_result({'function_calls': function_calls}, lines_printed)\n\n                json_line = choice['delta']\n\n            except json.JSONDecodeError as e:\n                logger.error(f'Unable to decode line: {line} {e.msg}')\n                continue  # skip to the next line\n\n            # handle the streaming response\n            # if 'function_call' in json_line:\n            #     if 'name' in json_line['function_call']:\n            #         function_calls['name'] = json_line['function_call']['name']\n            #         print(f'Function call: {function_calls[\"name\"]}')\n            #\n            #     if 'arguments' in json_line['function_call']:\n            #         function_calls['arguments'] += json_line['function_call']['arguments']\n            #         print(json_line['function_call']['arguments'], type='stream', end='', flush=True)\n\n            if 'content' in json_line:\n                content = json_line.get('content')\n                if content:\n                    buffer += content  # accumulate the data\n\n                    # If you detect a natural breakpoint (e.g., line break or end of a response object), print & count:\n                    if buffer.endswith('\\n'):\n                        if expecting_json and not received_json:\n                            received_json = assert_json_response(buffer, lines_printed > 2)\n\n                        # or some other condition that denotes a breakpoint\n                        lines_printed += count_lines_based_on_width(buffer, terminal_width)\n                        buffer = \"\"  # reset the buffer\n\n                    gpt_response += content\n                    print(content, type='stream', end='', flush=True)\n\n    print('\\n', type='stream')\n\n    # if function_calls['arguments'] != '':\n    #     logger.info(f'Response via function call: {function_calls[\"arguments\"]}')\n    #     function_calls['arguments'] = load_data_to_json(function_calls['arguments'])\n    #     return return_result({'function_calls': function_calls}, lines_printed)\n    logger.info('<<<<<<<<<< LLM Response <<<<<<<<<<\\n%s\\n<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<', gpt_response)\n    project.dot_pilot_gpt.log_chat_completion(endpoint, model, req_type, data['messages'], gpt_response)\n\n    if expecting_json:\n        gpt_response = clean_json_response(gpt_response)\n        assert_json_schema(gpt_response, expecting_json)\n        # Note, we log JSON separately from the YAML log above incase the JSON is invalid and an error is raised\n        project.dot_pilot_gpt.log_chat_completion_json(endpoint, model, req_type, expecting_json, gpt_response)\n\n    new_code = postprocessing(gpt_response, req_type)  # TODO add type dynamically\n    return return_result({'text': new_code}, lines_printed)","file":"/pilot/utils/llm_connection.py","language":"python","fileHash":"42cf6b119f292f460c68eab86733c13aa50b286df215725c06a6561264a03d01","hash":"5039c7256c25092349b9914eea7ab5a41c974934bed96c4bbfd2268e19f6374f","processedContent":"@retry_on_exception #This code defines a decorator function called `retry_on_exception` that retries a function if it encounters an exception, and provides a way for users to retry the request if they want to.\ndef stream_gpt_completion(data, req_type, project):\n    \"\"\"\n    Called from create_gpt_chat_completion()\n    :param data:\n    :param req_type: 'project_description' etc. See common.STEPS\n    :param project: NEEDED FOR WRAPPER FUNCTION retry_on_exception\n    :return: {'text': str} or {'function_calls': {'name': str, arguments: '{...}'}}\n    \"\"\"\n    # TODO add type dynamically - this isn't working when connected to the external process\n    try:\n        terminal_width = os.get_terminal_size().columns\n        \"\"\"\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/get_terminal_size().: undefined\n        scip-python python python-stdlib 3.11 os/terminal_size#columns().: undefined\n        \"\"\"\n    except OSError:\n        terminal_width = 50\n    lines_printed = 2\n    gpt_response = ''\n    buffer = ''  # A buffer to accumulate incoming data\n    expecting_json = None\n    received_json = False\n\n    if 'functions' in data:\n        expecting_json = data['functions']\n        if 'function_buffer' in data:\n            incomplete_json = get_prompt('utils/incomplete_json.prompt', {'received_json': data['function_buffer']}) #This code defines a function called `get_prompt` that retrieves and renders a prompt template based on the provided name. It uses Jinja2 to render the templates with no variables, and stores the rendered content in a dictionary called `prompts_components`.\n            data['messages'].append({'role': 'user', 'content': incomplete_json})\n            gpt_response = data['function_buffer']\n            received_json = True\n        elif 'function_error' in data:\n            invalid_json = get_prompt('utils/invalid_json.prompt', {'invalid_reason': data['function_error']}) #This code defines a function called `get_prompt` that retrieves and renders a prompt template based on the provided name. It uses Jinja2 to render the templates with no variables, and stores the rendered content in a dictionary called `prompts_components`.\n            data['messages'].append({'role': 'user', 'content': invalid_json})\n            received_json = True\n\n        # Don't send the `functions` parameter to Open AI, but don't remove it from `data` in case we need to retry\n        data = {key: value for key, value in data.items() if not key.startswith('function')}\n\n    def return_result(result_data, lines_printed):\n        \"\"\"This code counts the number of lines required to display a piece of text based on a given width, and then deletes those lines from the buffer.\"\"\"\n        pass\n\n    # spinner = spinner_start(yellow(\"Waiting for OpenAI API response...\"))\n    # print(yellow(\"Stream response from OpenAI:\"))\n\n    # Configure for the selected ENDPOINT\n    model = os.getenv('MODEL_NAME', 'gpt-4')\n    \"\"\"\n    scip-python python python-stdlib 3.11 os/__init__:: undefined\n    scip-python python python-stdlib 3.11 os/getenv().: undefined\n    \"\"\"\n    endpoint = os.getenv('ENDPOINT')\n    \"\"\"\n    scip-python python python-stdlib 3.11 os/__init__:: undefined\n    scip-python python python-stdlib 3.11 os/getenv().: undefined\n    \"\"\"\n\n    # This will be set many times but we don't care, as there are no side-effects to it.\n    telemetry.set(\"model\", model) #undefined\n    telemetry.inc(\"num_llm_requests\")\n    \"\"\"\n    scip-python python temp indexer `pilot.utils.telemetry`/telemetry.: undefined\n    scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#inc().: The code defines a function called `inc` that increases the value of a telemetry data field by a specified amount. It checks if the field is known and if it's enabled, and logs an error message if the field is not known or the telemetry is disabled.\n    \"\"\"\n\n    logger.info(f'> Request model: {model}')\n    \"\"\"\n    scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n    scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n    \"\"\"\n    if logger.isEnabledFor(logging.DEBUG):\n    \"\"\"\n    scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n    scip-python python python-stdlib 3.11 logging/Logger#isEnabledFor().: undefined\n    scip-python python python-stdlib 3.11 logging/__init__:: undefined\n    scip-python python python-stdlib 3.11 logging/DEBUG.DEBUG.: undefined\n    \"\"\"\n        logger.debug('\\n'.join([f\"{message['role']}: {message['content']}\" for message in data['messages']]))\n        \"\"\"\n        scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n        scip-python python python-stdlib 3.11 logging/Logger#debug().: undefined\n        \"\"\"\n\n    if endpoint == 'AZURE':\n        # If yes, get the AZURE_ENDPOINT from .ENV file\n        endpoint_url = os.getenv('AZURE_ENDPOINT') + '/openai/deployments/' + model + '/chat/completions?api-version=2023-05-15'\n        \"\"\"\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/getenv().: undefined\n        \"\"\"\n        headers = {\n            'Content-Type': 'application/json',\n            'api-key': get_api_key_or_throw('AZURE_API_KEY') #This code defines a function called `get_api_key_or_throw` that retrieves an API key from the environment and raises a custom exception if it is not defined.\n        }\n    elif endpoint == 'OPENROUTER':\n        # If so, send the request to the OpenRouter API endpoint\n        endpoint_url = os.getenv('OPENROUTER_ENDPOINT', 'https://openrouter.ai/api/v1/chat/completions')\n        \"\"\"\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/getenv().: undefined\n        \"\"\"\n        headers = {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + get_api_key_or_throw('OPENROUTER_API_KEY'), #This code defines a function called `get_api_key_or_throw` that retrieves an API key from the environment and raises a custom exception if it is not defined.\n            'HTTP-Referer': 'https://github.com/Pythagora-io/gpt-pilot',\n            'X-Title': 'GPT Pilot'\n        }\n        data['max_tokens'] = MAX_GPT_MODEL_TOKENS #undefined\n        data['model'] = model\n    else:\n        # If not, send the request to the OpenAI endpoint\n        endpoint_url = os.getenv('OPENAI_ENDPOINT', 'https://api.openai.com/v1/chat/completions')\n        \"\"\"\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/getenv().: undefined\n        \"\"\"\n        headers = {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + get_api_key_or_throw('OPENAI_API_KEY') #This code defines a function called `get_api_key_or_throw` that retrieves an API key from the environment and raises a custom exception if it is not defined.\n        }\n        data['model'] = model\n\n    response = requests.post(\n    \"\"\"\n    scip-python python requests 2.31.0 requests/__init__:: undefined\n    scip-python python requests 2.31.0 `requests.api`/post().: undefined\n    \"\"\"\n        endpoint_url,\n        headers=headers,\n        json=data,\n        stream=True\n    )\n\n    if response.status_code != 200: #undefined\n        project.dot_pilot_gpt.log_chat_completion(endpoint, model, req_type, data['messages'], response.text) #undefined\n        logger.info(f'problem with request (status {response.status_code}): {response.text}')\n        \"\"\"\n        scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n        scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n        scip-python python temp indexer `requests.models`/Response#status_code.: undefined\n        scip-python python temp indexer `requests.models`/Response#text().: undefined\n        \"\"\"\n        raise Exception(f\"API responded with status code: {response.status_code}. Response text: {response.text}\")\n        \"\"\"\n        scip-python python temp indexer `requests.models`/Response#status_code.: undefined\n        scip-python python temp indexer `requests.models`/Response#text().: undefined\n        \"\"\"\n\n    # function_calls = {'name': '', 'arguments': ''}\n\n    for line in response.iter_lines(): #undefined\n        # Ignore keep-alive new lines\n        if line and line != b': OPENROUTER PROCESSING':\n            line = line.decode(\"utf-8\")  # decode the bytes to string\n\n            if line.startswith('data: '):\n                line = line[6:]  # remove the 'data: ' prefix\n\n            # Check if the line is \"[DONE]\" before trying to parse it as JSON\n            if line == \"[DONE]\":\n                continue\n\n            try:\n                json_line = json.loads(line)\n                \"\"\"\n                scip-python python python-stdlib 3.11 json/__init__:: undefined\n                scip-python python python-stdlib 3.11 json/loads().: undefined\n                \"\"\"\n\n                if len(json_line['choices']) == 0:\n                    continue\n\n                if 'error' in json_line:\n                    logger.error(f'Error in LLM response: {json_line}')\n                    \"\"\"\n                    scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n                    scip-python python python-stdlib 3.11 logging/Logger#error().: undefined\n                    \"\"\"\n                    raise ValueError(f'Error in LLM response: {json_line[\"error\"][\"message\"]}')\n\n                choice = json_line['choices'][0]\n\n                # if 'finish_reason' in choice and choice['finish_reason'] == 'function_call':\n                #     function_calls['arguments'] = load_data_to_json(function_calls['arguments'])\n                #     return return_result({'function_calls': function_calls}, lines_printed)\n\n                json_line = choice['delta']\n\n            except json.JSONDecodeError as e:\n            \"\"\"\n            scip-python python python-stdlib 3.11 json/__init__:: undefined\n            scip-python python temp indexer `json.decoder`/JSONDecodeError#: undefined\n            \"\"\"\n                logger.error(f'Unable to decode line: {line} {e.msg}')\n                \"\"\"\n                scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n                scip-python python python-stdlib 3.11 logging/Logger#error().: undefined\n                \"\"\"\n                continue  # skip to the next line\n\n            # handle the streaming response\n            # if 'function_call' in json_line:\n            #     if 'name' in json_line['function_call']:\n            #         function_calls['name'] = json_line['function_call']['name']\n            #         print(f'Function call: {function_calls[\"name\"]}')\n            #\n            #     if 'arguments' in json_line['function_call']:\n            #         function_calls['arguments'] += json_line['function_call']['arguments']\n            #         print(json_line['function_call']['arguments'], type='stream', end='', flush=True)\n\n            if 'content' in json_line:\n                content = json_line.get('content')\n                if content:\n                    buffer += content  # accumulate the data\n\n                    # If you detect a natural breakpoint (e.g., line break or end of a response object), print & count:\n                    if buffer.endswith('\\n'):\n                        if expecting_json and not received_json:\n                            received_json = assert_json_response(buffer, lines_printed > 2) #This code checks if the response from an API call is in JSON format. If it's not, it logs an error and raises a ValueError.\n\n                        # or some other condition that denotes a breakpoint\n                        lines_printed += count_lines_based_on_width(buffer, terminal_width) #This code counts the number of lines required to display a piece of text based on a given width. It does this by splitting the text into individual lines, calculating the length of each line, and then summing the total number of lines needed to display the text.\n                        buffer = \"\"  # reset the buffer\n\n                    gpt_response += content\n                    print(content, type='stream', end='', flush=True)\n\n    print('\\n', type='stream')\n\n    # if function_calls['arguments'] != '':\n    #     logger.info(f'Response via function call: {function_calls[\"arguments\"]}')\n    #     function_calls['arguments'] = load_data_to_json(function_calls['arguments'])\n    #     return return_result({'function_calls': function_calls}, lines_printed)\n    logger.info('<<<<<<<<<< LLM Response <<<<<<<<<<\\n%s\\n<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<', gpt_response)\n    \"\"\"\n    scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n    scip-python python python-stdlib 3.11 logging/Logger#info().: undefined\n    \"\"\"\n    project.dot_pilot_gpt.log_chat_completion(endpoint, model, req_type, data['messages'], gpt_response)\n\n    if expecting_json:\n        gpt_response = clean_json_response(gpt_response) #This code takes a JSON response and cleans it up by removing unnecessary characters and converting booleans to lowercase strings.\n        assert_json_schema(gpt_response, expecting_json) #This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It is used to define the structure of a function in a typed dictionary. The code then iterates over a list of functions and validates each one against a JSON schema using the `validate()` function from the `json` module.\n        # Note, we log JSON separately from the YAML log above incase the JSON is invalid and an error is raised\n        project.dot_pilot_gpt.log_chat_completion_json(endpoint, model, req_type, expecting_json, gpt_response)\n\n    new_code = postprocessing(gpt_response, req_type)  # TODO add type dynamically #This code defines a function called `postprocessing` that takes two arguments: `gpt_response` and `req_type`. It returns the value of `gpt_response`, which is a string. The function does not perform any complex operations, but it is an important part of the overall system because it helps to ensure that the output from the GPT model is accurate and relevant to the user's request.\n    return return_result({'text': new_code}, lines_printed)","documentation":"The code defines a function called `stream_gpt_completion` that retrieves and renders a prompt template based on the provided name. It uses Jinja2 to render the templates with no variables, and stores the rendered content in a dictionary called `prompts_components`."}},{"key":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().return_result().","attributes":{"range":[292,4,298,26],"symbol":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().return_result().","content":"def return_result(result_data, lines_printed):\n        if buffer:\n            lines_printed += count_lines_based_on_width(buffer, terminal_width)\n        logger.debug(f'lines printed: {lines_printed} - {terminal_width}')\n\n        # delete_last_n_lines(lines_printed)  # TODO fix and test count_lines_based_on_width()\n        return result_data","file":"/pilot/utils/llm_connection.py","language":"python","fileHash":"42cf6b119f292f460c68eab86733c13aa50b286df215725c06a6561264a03d01","hash":"46cb1a6ecb841145deffe1c5f203c215e6a2144b019fa4d57b4891b1de42c1bb","processedContent":"def return_result(result_data, lines_printed):\n        if buffer:\n            lines_printed += count_lines_based_on_width(buffer, terminal_width) #This code counts the number of lines required to display a piece of text based on a given width. It does this by splitting the text into individual lines, calculating the length of each line, and then summing the total number of lines needed to display the text.\n        logger.debug(f'lines printed: {lines_printed} - {terminal_width}')\n        \"\"\"\n        scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n        scip-python python python-stdlib 3.11 logging/Logger#debug().: undefined\n        \"\"\"\n\n        # delete_last_n_lines(lines_printed)  # TODO fix and test count_lines_based_on_width()\n        return result_data","documentation":"This code counts the number of lines required to display a piece of text based on a given width, and then deletes those lines from the buffer."}},{"key":"scip-python python temp indexer `pilot.utils.llm_connection`/get_api_key_or_throw().","attributes":{"range":[436,0,440,18],"symbol":"scip-python python temp indexer `pilot.utils.llm_connection`/get_api_key_or_throw().","content":"def get_api_key_or_throw(env_key: str):\n    api_key = os.getenv(env_key)\n    if api_key is None:\n        raise ApiKeyNotDefinedError(env_key)\n    return api_key","file":"/pilot/utils/llm_connection.py","language":"python","fileHash":"42cf6b119f292f460c68eab86733c13aa50b286df215725c06a6561264a03d01","hash":"41a437ac2e3960fc069f87e5b237bf0c93e1ef240038f61264e2c60ad606a1d2","processedContent":"def get_api_key_or_throw(env_key: str):\n    api_key = os.getenv(env_key)\n    \"\"\"\n    scip-python python python-stdlib 3.11 os/__init__:: undefined\n    scip-python python python-stdlib 3.11 os/getenv().: undefined\n    \"\"\"\n    if api_key is None:\n        raise ApiKeyNotDefinedError(env_key) #This code defines a custom exception class called `ApiKeyNotDefinedError` that is raised when an API key is not defined in the environment. The class takes an environment key as an argument and initializes the exception with a message indicating the missing API key.\n    return api_key","documentation":"This code defines a function called `get_api_key_or_throw` that retrieves an API key from the environment and raises a custom exception if it is not defined."}},{"key":"scip-python python temp indexer `pilot.utils.llm_connection`/assert_json_response().","attributes":{"range":[443,0,450,20],"symbol":"scip-python python temp indexer `pilot.utils.llm_connection`/assert_json_response().","content":"def assert_json_response(response: str, or_fail=True) -> bool:\n    if re.match(r'.*(```(json)?|{|\\[)', response):\n        return True\n    elif or_fail:\n        logger.error(f'LLM did not respond with JSON: {response}')\n        raise ValueError('LLM did not respond with JSON')\n    else:\n        return False","file":"/pilot/utils/llm_connection.py","language":"python","fileHash":"42cf6b119f292f460c68eab86733c13aa50b286df215725c06a6561264a03d01","hash":"296528419ac2af688fed92aecc31ba3b4135f20b4c360a617ffc697e089c2380","processedContent":"def assert_json_response(response: str, or_fail=True) -> bool:\n    if re.match(r'.*(```(json)?|{|\\[)', response):\n    \"\"\"\n    scip-python python python-stdlib 3.11 re/__init__:: undefined\n    scip-python python python-stdlib 3.11 re/match().: undefined\n    \"\"\"\n        return True\n    elif or_fail:\n        logger.error(f'LLM did not respond with JSON: {response}')\n        \"\"\"\n        scip-python python temp indexer `pilot.logger.logger`/logger.: undefined\n        scip-python python python-stdlib 3.11 logging/Logger#error().: undefined\n        \"\"\"\n        raise ValueError('LLM did not respond with JSON')\n    else:\n        return False","documentation":"This code checks if the response from an API call is in JSON format. If it's not, it logs an error and raises a ValueError."}},{"key":"scip-python python temp indexer `pilot.utils.llm_connection`/clean_json_response().","attributes":{"range":[453,0,457,33],"symbol":"scip-python python temp indexer `pilot.utils.llm_connection`/clean_json_response().","content":"def clean_json_response(response: str) -> str:\n    response = re.sub(r'^.*```json\\s*', '', response, flags=re.DOTALL)\n    response = re.sub(r': ?True(,)?$', r':true\\1', response, flags=re.MULTILINE)\n    response = re.sub(r': ?False(,)?$', r':false\\1', response, flags=re.MULTILINE)\n    return response.strip('` \\n')","file":"/pilot/utils/llm_connection.py","language":"python","fileHash":"42cf6b119f292f460c68eab86733c13aa50b286df215725c06a6561264a03d01","hash":"504c0f596cce74b5329225ef661e02766d8690554e9abda43585a3b5b170e84e","processedContent":"def clean_json_response(response: str) -> str:\n    response = re.sub(r'^.*```json\\s*', '', response, flags=re.DOTALL)\n    \"\"\"\n    scip-python python python-stdlib 3.11 re/__init__:: undefined\n    scip-python python python-stdlib 3.11 re/__init__:: undefined\n    scip-python python python-stdlib 3.11 re/sub().: undefined\n    scip-python python python-stdlib 3.11 re/DOTALL.: undefined\n    \"\"\"\n    response = re.sub(r': ?True(,)?    response = re.sub(r': ?False(,)?    return response.strip('` \\n'), r':false\\1', response, flags=re.MULTILINE)\n    \"\"\"\n    scip-python python python-stdlib 3.11 re/__init__:: undefined\n    scip-python python python-stdlib 3.11 re/__init__:: undefined\n    scip-python python python-stdlib 3.11 re/sub().: undefined\n    scip-python python python-stdlib 3.11 re/MULTILINE.: undefined\n    \"\"\"\n    return response.strip('` \\n'), r':true\\1', response, flags=re.MULTILINE)\n    \"\"\"\n    scip-python python python-stdlib 3.11 re/__init__:: undefined\n    scip-python python python-stdlib 3.11 re/__init__:: undefined\n    scip-python python python-stdlib 3.11 re/sub().: undefined\n    scip-python python python-stdlib 3.11 re/MULTILINE.: undefined\n    \"\"\"\n    response = re.sub(r': ?False(,)?    return response.strip('` \\n'), r':false\\1', response, flags=re.MULTILINE)\n    \"\"\"\n    scip-python python python-stdlib 3.11 re/__init__:: undefined\n    scip-python python python-stdlib 3.11 re/__init__:: undefined\n    scip-python python python-stdlib 3.11 re/sub().: undefined\n    scip-python python python-stdlib 3.11 re/MULTILINE.: undefined\n    \"\"\"\n    return response.strip('` \\n')","documentation":"This code takes a JSON response and cleans it up by removing unnecessary characters and converting booleans to lowercase strings."}},{"key":"scip-python python temp indexer `pilot.utils.llm_connection`/assert_json_schema().","attributes":{"range":[460,0,465,19],"symbol":"scip-python python temp indexer `pilot.utils.llm_connection`/assert_json_schema().","content":"def assert_json_schema(response: str, functions: list[FunctionType]) -> True:\n    for function in functions:\n        schema = function['parameters']\n        parsed = json.loads(response)\n        validate(parsed, schema)\n        return True","file":"/pilot/utils/llm_connection.py","language":"python","fileHash":"42cf6b119f292f460c68eab86733c13aa50b286df215725c06a6561264a03d01","hash":"7c521e7671078c15759f38399c1fd6c7edd2807a9a1921dd176e593f3bbc011d","processedContent":"def assert_json_schema(response: str, functions: list[FunctionType]) -> True: #This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It is used to define the structure of a function in a typed dictionary.\n    for function in functions:\n        schema = function['parameters']\n        parsed = json.loads(response)\n        \"\"\"\n        scip-python python python-stdlib 3.11 json/__init__:: undefined\n        scip-python python python-stdlib 3.11 json/loads().: undefined\n        \"\"\"\n        validate(parsed, schema)\n        return True","documentation":"This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It is used to define the structure of a function in a typed dictionary. The code then iterates over a list of functions and validates each one against a JSON schema using the `validate()` function from the `json` module."}},{"key":"scip-python python temp indexer `pilot.utils.llm_connection`/postprocessing().","attributes":{"range":[468,0,469,23],"symbol":"scip-python python temp indexer `pilot.utils.llm_connection`/postprocessing().","content":"def postprocessing(gpt_response: str, req_type) -> str:\n    return gpt_response","file":"/pilot/utils/llm_connection.py","language":"python","fileHash":"42cf6b119f292f460c68eab86733c13aa50b286df215725c06a6561264a03d01","hash":"8aa12294cfa6b9cf9b020cfa971801341ab1c6cf61315957beac8377878c8f33","processedContent":"def postprocessing(gpt_response: str, req_type) -> str:\n    return gpt_response","documentation":"This code defines a function called `postprocessing` that takes two arguments: `gpt_response` and `req_type`. It returns the value of `gpt_response`, which is a string. The function does not perform any complex operations, but it is an important part of the overall system because it helps to ensure that the output from the GPT model is accurate and relevant to the user's request."}},{"key":"scip-python python temp indexer `pilot.utils.llm_connection`/load_data_to_json().","attributes":{"range":[472,0,473,39],"symbol":"scip-python python temp indexer `pilot.utils.llm_connection`/load_data_to_json().","content":"def load_data_to_json(string):\n    return json.loads(fix_json(string))","file":"/pilot/utils/llm_connection.py","language":"python","fileHash":"42cf6b119f292f460c68eab86733c13aa50b286df215725c06a6561264a03d01","hash":"e119d5becc51df787b2de52aa5918382dbfaed7da3080a136ccb9c63ac3d728f","processedContent":"def load_data_to_json(string):\n    return json.loads(fix_json(string))","documentation":"This code takes a string of JSON data and converts it into a Python dictionary using the `json.loads()` function, which is part of the Python standard library. The `fix_json()` function is not included in the code snippet provided, but it is likely used to fix any errors or inconsistencies in the JSON data before it is loaded into the Python dictionary."}},{"key":"scip-python python prompt-toolkit 3.0.39 `prompt_toolkit.styles`/__init__:","attributes":{"symbol":"scip-python python prompt-toolkit 3.0.39 `prompt_toolkit.styles`/__init__:","language":"python"}},{"key":"scip-python python prompt-toolkit 3.0.39 `prompt_toolkit.styles.style`/Style#","attributes":{"symbol":"scip-python python prompt-toolkit 3.0.39 `prompt_toolkit.styles.style`/Style#","language":"python"}},{"key":"scip-python python temp indexer jsonschema/__init__:","attributes":{"symbol":"scip-python python temp indexer jsonschema/__init__:","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.utils`/fix_json().","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.utils`/fix_json().","language":"python","range":[172,0,176,31],"content":"def fix_json(s):\n    s = s.replace('True', 'true')\n    s = s.replace('False', 'false')\n    # s = s.replace('`', '\"')\n    return fix_json_newlines(s)","file":"/pilot/utils/utils.py","fileHash":"ffe0ebca72a8999ffb0084622af3eb69767ceda2cc6d7e7e68e65ebb2b4408c3","hash":"cd9bb2df7023365d95dca8b0cc22f6b8023dd671347f219d81e9342c9c10676b","processedContent":"def fix_json(s):\n    s = s.replace('True', 'true')\n    s = s.replace('False', 'false')\n    # s = s.replace('`', '\"')\n    return fix_json_newlines(s)","documentation":"This code is a function that takes a string of JSON data as input and fixes any inconsistencies in the formatting, such as replacing \"True\" with \"true\" and \"False\" with \"false\". It also replaces backticks with double quotes. The function then returns the fixed JSON data."}},{"key":"scip-python python python-stdlib 3.11 sys/stdout.stdout.","attributes":{"symbol":"scip-python python python-stdlib 3.11 sys/stdout.stdout.","language":"python"}},{"key":"scip-python python temp indexer `json.decoder`/JSONDecodeError#","attributes":{"symbol":"scip-python python temp indexer `json.decoder`/JSONDecodeError#","language":"python"}},{"key":"scip-python python python-stdlib 3.11 re/split().","attributes":{"symbol":"scip-python python python-stdlib 3.11 re/split().","language":"python"}},{"key":"scip-python python prompt-toolkit 3.0.39 `prompt_toolkit.styles.style`/Style#from_dict().","attributes":{"symbol":"scip-python python prompt-toolkit 3.0.39 `prompt_toolkit.styles.style`/Style#from_dict().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 os/get_terminal_size().","attributes":{"symbol":"scip-python python python-stdlib 3.11 os/get_terminal_size().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 os/terminal_size#columns().","attributes":{"symbol":"scip-python python python-stdlib 3.11 os/terminal_size#columns().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 logging/Logger#isEnabledFor().","attributes":{"symbol":"scip-python python python-stdlib 3.11 logging/Logger#isEnabledFor().","language":"python"}},{"key":"scip-python python temp indexer `requests.models`/Response#text().","attributes":{"symbol":"scip-python python temp indexer `requests.models`/Response#text().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 re/MULTILINE.","attributes":{"symbol":"scip-python python python-stdlib 3.11 re/MULTILINE.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.questionary`/remove_ansi_codes().","attributes":{"range":[8,0,10,33],"symbol":"scip-python python temp indexer `pilot.utils.questionary`/remove_ansi_codes().","content":"def remove_ansi_codes(s: str) -> str:\n    ansi_escape = re.compile(r'\\x1B(?:[@-Z\\\\-_]|\\[[0-?]*[ -/]*[@-~])')\n    return ansi_escape.sub('', s)","file":"/pilot/utils/questionary.py","language":"python","fileHash":"2423013aaf514ea6889adc9400c20b32a8be4a858e060672e0c3e0e52d59a081","hash":"74332da6fb3e5c65b7bb8e9b5ae70b238edb7733f003264be2aab4cbe368c02e","processedContent":"def remove_ansi_codes(s: str) -> str:\n    ansi_escape = re.compile(r'\\x1B(?:[@-Z\\\\-_]|\\[[0-?]*[ -/]*[@-~])')\n    \"\"\"\n    scip-python python python-stdlib 3.11 re/__init__:: undefined\n    scip-python python python-stdlib 3.11 re/compile().: undefined\n    \"\"\"\n    return ansi_escape.sub('', s)","documentation":"This code defines a function called `remove_ansi_codes` that takes a string as input and returns the same string with all ANSI escape codes removed."}},{"key":"scip-python python temp indexer `pilot.utils.questionary`/get_user_feedback().","attributes":{"range":[46,0,49,72],"symbol":"scip-python python temp indexer `pilot.utils.questionary`/get_user_feedback().","content":"def get_user_feedback():\n    return questionary.text('How did GPT Pilot do? Were you able to create any app that works? '\n                            'Please write any feedback you have or just press ENTER to exit: ',\n                            style=style_config.get_style()).unsafe_ask()","file":"/pilot/utils/questionary.py","language":"python","fileHash":"2423013aaf514ea6889adc9400c20b32a8be4a858e060672e0c3e0e52d59a081","hash":"36b1c7a89ba8e04d7a9cdbd7efbe9e54bcb437597ffc028dd9ba0ee55cd94178","processedContent":"def get_user_feedback():\n    return questionary.text('How did GPT Pilot do? Were you able to create any app that works? ' #undefined\n                            'Please write any feedback you have or just press ENTER to exit: ',\n                            style=style_config.get_style()).unsafe_ask()","documentation":"This code defines a function called `get_user_feedback` that uses the `questionary` library to ask the user for feedback on the performance of GPT Pilot, a language model developed by OpenAI. The function returns the user's input as a string."}},{"key":"scip-python python temp indexer `pilot.utils.questionary`/ask_user_to_store_init_prompt().","attributes":{"range":[52,0,55,72],"symbol":"scip-python python temp indexer `pilot.utils.questionary`/ask_user_to_store_init_prompt().","content":"def ask_user_to_store_init_prompt():\n    return questionary.text('We would appreciate if you let us store your initial app prompt. '\n                            'If you are OK with that, please just press ENTER',\n                            style=style_config.get_style()).unsafe_ask()","file":"/pilot/utils/questionary.py","language":"python","fileHash":"2423013aaf514ea6889adc9400c20b32a8be4a858e060672e0c3e0e52d59a081","hash":"c4348e5223ea292b6785e838a81f5f41373f9b4257ea6cb1223707360ef35c36","processedContent":"def ask_user_to_store_init_prompt():\n    return questionary.text('We would appreciate if you let us store your initial app prompt. ' #undefined\n                            'If you are OK with that, please just press ENTER',\n                            style=style_config.get_style()).unsafe_ask()","documentation":"This code prompts the user to allow the app to store their initial prompt, which is used for personalization and customization of the app's functionality."}},{"key":"scip-python python temp indexer `pilot.utils.questionary`/flush_input().","attributes":{"range":[58,0,69,12],"symbol":"scip-python python temp indexer `pilot.utils.questionary`/flush_input().","content":"def flush_input():\n    \"\"\"Flush the input buffer, discarding all that's in the buffer.\"\"\"\n    try:\n        if platform.system() == 'Windows':\n            import msvcrt\n            while msvcrt.kbhit():\n                msvcrt.getch()\n        else:\n            import termios\n            termios.tcflush(sys.stdin, termios.TCIOFLUSH)\n    except (ImportError, OSError):\n        pass","file":"/pilot/utils/questionary.py","language":"python","fileHash":"2423013aaf514ea6889adc9400c20b32a8be4a858e060672e0c3e0e52d59a081","hash":"93711a804fde3cf9e8fc53f94b18de6b1117beb25ce171087e5d9f7fa2dfa335","processedContent":"def flush_input():\n    \"\"\"Flush the input buffer, discarding all that's in the buffer.\"\"\"\n    try:\n        if platform.system() == 'Windows':\n        \"\"\"\n        scip-python python python-stdlib 3.11 platform/__init__:: undefined\n        scip-python python python-stdlib 3.11 platform/system().: undefined\n        \"\"\"\n            import msvcrt #undefined\n            while msvcrt.kbhit():\n            \"\"\"\n            scip-python python python-stdlib 3.11 msvcrt/__init__:: undefined\n            scip-python python python-stdlib 3.11 msvcrt/kbhit().: undefined\n            \"\"\"\n                msvcrt.getch()\n                \"\"\"\n                scip-python python python-stdlib 3.11 msvcrt/__init__:: undefined\n                scip-python python python-stdlib 3.11 msvcrt/getch().: undefined\n                \"\"\"\n        else:\n            import termios #undefined\n            termios.tcflush(sys.stdin, termios.TCIOFLUSH)\n            \"\"\"\n            scip-python python python-stdlib 3.11 termios/__init__:: undefined\n            scip-python python python-stdlib 3.11 termios/__init__:: undefined\n            scip-python python python-stdlib 3.11 termios/tcflush().: undefined\n            scip-python python python-stdlib 3.11 sys/__init__:: undefined\n            scip-python python python-stdlib 3.11 sys/stdin.stdin.: undefined\n            scip-python python python-stdlib 3.11 termios/TCIOFLUSH.: undefined\n            \"\"\"\n    except (ImportError, OSError):\n        pass","documentation":"This code is a function called \"flush_input\" that clears the input buffer, discarding all data that has been entered but not yet processed. It does this by checking the operating system and using either the Windows or Unix-specific methods to clear the input buffer."}},{"key":"scip-python python python-stdlib 3.11 re/compile().","attributes":{"symbol":"scip-python python python-stdlib 3.11 re/compile().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 re/Pattern#sub().","attributes":{"symbol":"scip-python python python-stdlib 3.11 re/Pattern#sub().","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#get_style().","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#get_style().","language":"python","range":[95,4,102,43],"content":"def get_style(self):\r\n        \"\"\"\r\n        Retrieves the Style configuration from the theme_style instance.\r\n\r\n        Returns:\r\n            questionary.Style: The Style configuration.\r\n        \"\"\"\r\n        return self.theme_style.get_style()","file":"/pilot/utils/style.py","fileHash":"33e7fefaa7ec7f2c2886680d98d91761ef9d5b339dcbe55923c17e4bb3475750","hash":"90aee861d6a7df673ef5f085c94273c8a83ff64dc87fdf4140db985d6cf3419b","processedContent":"def get_style(self):\r\n        \"\"\"\r\n        Retrieves the Style configuration from the theme_style instance.\r\n\r\n        Returns:\r\n            questionary.Style: The Style configuration.\r\n        \"\"\"\r\n        return self.theme_style.get_style()","documentation":"This code retrieves the Style configuration from a theme_style instance and returns it as a questionary.Style object."}},{"key":"scip-python python temp indexer questionary/__init__:","attributes":{"symbol":"scip-python python temp indexer questionary/__init__:","language":"python"}},{"key":"scip-python python python-stdlib 3.11 msvcrt/__init__:","attributes":{"symbol":"scip-python python python-stdlib 3.11 msvcrt/__init__:","language":"python"}},{"key":"scip-python python python-stdlib 3.11 msvcrt/kbhit().","attributes":{"symbol":"scip-python python python-stdlib 3.11 msvcrt/kbhit().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 msvcrt/getch().","attributes":{"symbol":"scip-python python python-stdlib 3.11 msvcrt/getch().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 termios/__init__:","attributes":{"symbol":"scip-python python python-stdlib 3.11 termios/__init__:","language":"python"}},{"key":"scip-python python python-stdlib 3.11 termios/tcflush().","attributes":{"symbol":"scip-python python python-stdlib 3.11 termios/tcflush().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 sys/stdin.stdin.","attributes":{"symbol":"scip-python python python-stdlib 3.11 sys/stdin.stdin.","language":"python"}},{"key":"scip-python python python-stdlib 3.11 termios/TCIOFLUSH.","attributes":{"symbol":"scip-python python python-stdlib 3.11 termios/TCIOFLUSH.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.settings`/Settings#__init__().","attributes":{"range":[65,4,69,29],"symbol":"scip-python python temp indexer `pilot.utils.settings`/Settings#__init__().","content":"def __init__(self, **kwargs):\n        for key in self.__slots__:\n            setattr(self, key, None)\n\n        self.update(**kwargs)","file":"/pilot/utils/settings.py","language":"python","fileHash":"0501193abe2886d78c5a219d5b99d381aba84fcb86ace5b8a56046be5874e0d6","hash":"99ae5c3bf41b4e88a2ab10ecf39b103e43704f2c6c70aac859905fdee61cf267","processedContent":"def __init__(self, **kwargs):\n        for key in self.__slots__: #undefined\n            setattr(self, key, None)\n\n        self.update(**kwargs)","documentation":"This code initializes a new instance of the class by setting all attributes to None and then updating them with the provided keyword arguments."}},{"key":"scip-python python temp indexer `pilot.utils.settings`/Settings#__iter__().","attributes":{"range":[71,4,73,41],"symbol":"scip-python python temp indexer `pilot.utils.settings`/Settings#__iter__().","content":"def __iter__(self):\n        for key in self.__slots__:\n            yield key, getattr(self, key)","file":"/pilot/utils/settings.py","language":"python","fileHash":"0501193abe2886d78c5a219d5b99d381aba84fcb86ace5b8a56046be5874e0d6","hash":"5d6bcf42704569bee561434d4215ad260f4d5cfb45f13e2a0547dde88da3bdea","processedContent":"def __iter__(self):\n        for key in self.__slots__: #undefined\n            yield key, getattr(self, key)","documentation":"This code defines a custom iterator for a class. It iterates over the class's attributes and yields each attribute's name and value as a tuple."}},{"key":"scip-python python temp indexer `pilot.utils.settings`/Loader#__init__().","attributes":{"range":[122,4,125,32],"symbol":"scip-python python temp indexer `pilot.utils.settings`/Loader#__init__().","content":"def __init__(self, settings: Settings):\n        self.config_dir = self.resolve_config_dir()\n        self.config_path = self.config_dir / \"config.json\"\n        self.settings = settings","file":"/pilot/utils/settings.py","language":"python","fileHash":"0501193abe2886d78c5a219d5b99d381aba84fcb86ace5b8a56046be5874e0d6","hash":"34e484546aa217c7a4e6090dbdf0ff00c565cf665c870c297cb8f8676c7ead19","processedContent":"def __init__(self, settings: Settings):\n        self.config_dir = self.resolve_config_dir() #This code determines the location where a config file should be stored. It first checks for an XDG_CONFIG_HOME environment variable, and if it exists, uses that as the base directory. If not, it checks for the APPDATA environment variable on Windows, and if it exists, uses that as the base directory. If neither of those exist, it uses the user's home directory with a subdirectory named after the app name.\n        self.config_path = self.config_dir / \"config.json\" #undefined\n        self.settings = settings","documentation":"This code initializes a new instance of the class, setting up the configuration directory and file path based on environment variables and user preferences."}},{"key":"scip-python python temp indexer `pilot.utils.settings`/Loader#resolve_config_dir().","attributes":{"range":[136,4,155,66],"symbol":"scip-python python temp indexer `pilot.utils.settings`/Loader#resolve_config_dir().","content":"@classmethod\n    def resolve_config_dir(cls) -> Path:\n        \"\"\"\n        Figure out where to store the config file(s).\n\n        :return: path to the desired location config directory\n\n        See the clas docstring for details on how the config directory is\n        determined.\n        \"\"\"\n        posix_app_name = cls.APP_NAME.replace(\" \", \"-\").lower()\n\n        xdg_config_home = getenv(\"XDG_CONFIG_HOME\")\n        if xdg_config_home:\n            return Path(xdg_config_home) / Path(posix_app_name)\n\n        if sys.platform == \"win32\" and getenv(\"APPDATA\"):\n            return Path(getenv(\"APPDATA\")) / Path(cls.APP_NAME)\n\n        return Path(\"~\").expanduser() / Path(f\".{posix_app_name}\")","file":"/pilot/utils/settings.py","language":"python","fileHash":"0501193abe2886d78c5a219d5b99d381aba84fcb86ace5b8a56046be5874e0d6","hash":"382da36346ecdab0d0e8c603b6920778458faa0ac4f0370107b9ed958bd7828a","processedContent":"@classmethod\n    def resolve_config_dir(cls) -> Path: #undefined\n        \"\"\"\n        Figure out where to store the config file(s).\n\n        :return: path to the desired location config directory\n\n        See the clas docstring for details on how the config directory is\n        determined.\n        \"\"\"\n        posix_app_name = cls.APP_NAME.replace(\" \", \"-\").lower() #undefined\n\n        xdg_config_home = getenv(\"XDG_CONFIG_HOME\") #undefined\n        if xdg_config_home:\n            return Path(xdg_config_home) / Path(posix_app_name)\n            \"\"\"\n            scip-python python python-stdlib 3.11 pathlib/Path#: undefined\n            scip-python python python-stdlib 3.11 pathlib/Path#: undefined\n            \"\"\"\n\n        if sys.platform == \"win32\" and getenv(\"APPDATA\"):\n        \"\"\"\n        scip-python python python-stdlib 3.11 os/getenv().: undefined\n        scip-python python python-stdlib 3.11 sys/__init__:: undefined\n        scip-python python python-stdlib 3.11 sys/platform.platform.: undefined\n        \"\"\"\n            return Path(getenv(\"APPDATA\")) / Path(cls.APP_NAME)\n            \"\"\"\n            scip-python python python-stdlib 3.11 pathlib/Path#: undefined\n            scip-python python python-stdlib 3.11 pathlib/Path#: undefined\n            scip-python python temp indexer `pilot.utils.settings`/Loader#APP_NAME.: undefined\n            scip-python python python-stdlib 3.11 os/getenv().: undefined\n            \"\"\"\n\n        return Path(\"~\").expanduser() / Path(f\".{posix_app_name}\")","documentation":"This code determines the location where a config file should be stored. It first checks for an XDG_CONFIG_HOME environment variable, and if it exists, uses that as the base directory. If not, it checks for the APPDATA environment variable on Windows, and if it exists, uses that as the base directory. If neither of those exist, it uses the user's home directory with a subdirectory named after the app name."}},{"key":"scip-python python temp indexer `pilot.utils.settings`/Loader#_load_config().","attributes":{"range":[157,4,181,21],"symbol":"scip-python python temp indexer `pilot.utils.settings`/Loader#_load_config().","content":"def _load_config(self) -> dict[str, Any]:\n        \"\"\"\n        Load settings from the config file.\n\n        :returns: dict of settings loaded from the config file\n\n        If the file doesn't exist or there is an error loading the\n        config file, an empty settings dict will be returned.\n\n        This is a low-level method used automatically by `Loader.load()`.\n        \"\"\"\n\n        if not self.config_path.exists():\n            log.debug(f\"Config file not found: {self.config_path}\")\n            return {}\n\n        log.debug(f\"Loading settings from config file: {self.config_path}\")\n        try:\n            with open(self.config_path, \"r\", encoding=\"utf-8\") as fp:\n                return json.load(fp)\n        except Exception as e:\n            log.error(\n                f\"Error loading config file {self.config_path}: {e}\", exc_info=True\n            )\n            return {}","file":"/pilot/utils/settings.py","language":"python","fileHash":"0501193abe2886d78c5a219d5b99d381aba84fcb86ace5b8a56046be5874e0d6","hash":"6639172a6b4aa2d6a33a8ca22c1f0227113dfd1d07abd46dce7a7ba73b79a02c","processedContent":"def _load_config(self) -> dict[str, Any]:\n        \"\"\"\n        Load settings from the config file.\n\n        :returns: dict of settings loaded from the config file\n\n        If the file doesn't exist or there is an error loading the\n        config file, an empty settings dict will be returned.\n\n        This is a low-level method used automatically by `Loader.load()`.\n        \"\"\"\n\n        if not self.config_path.exists():\n        \"\"\"\n        scip-python python temp indexer `pilot.utils.settings`/Loader#config_path.: undefined\n        scip-python python python-stdlib 3.11 pathlib/Path#exists().: undefined\n        \"\"\"\n            log.debug(f\"Config file not found: {self.config_path}\")\n            \"\"\"\n            scip-python python temp indexer `pilot.utils.settings`/Loader#config_path.: undefined\n            scip-python python temp indexer `pilot.utils.settings`/log.: undefined\n            scip-python python python-stdlib 3.11 logging/Logger#debug().: undefined\n            \"\"\"\n            return {}\n\n        log.debug(f\"Loading settings from config file: {self.config_path}\")\n        \"\"\"\n        scip-python python temp indexer `pilot.utils.settings`/Loader#config_path.: undefined\n        scip-python python temp indexer `pilot.utils.settings`/log.: undefined\n        scip-python python python-stdlib 3.11 logging/Logger#debug().: undefined\n        \"\"\"\n        try:\n            with open(self.config_path, \"r\", encoding=\"utf-8\") as fp: #undefined\n                return json.load(fp)\n                \"\"\"\n                scip-python python python-stdlib 3.11 json/__init__:: undefined\n                scip-python python python-stdlib 3.11 json/load().: undefined\n                \"\"\"\n        except Exception as e:\n            log.error(\n            \"\"\"\n            scip-python python temp indexer `pilot.utils.settings`/log.: undefined\n            scip-python python python-stdlib 3.11 logging/Logger#error().: undefined\n            \"\"\"\n                f\"Error loading config file {self.config_path}: {e}\", exc_info=True #undefined\n            )\n            return {}","documentation":"This code defines a function called `_load_config()` that loads settings from a JSON file. If the file doesn't exist or there's an error loading the config file, an empty settings dict is returned."}},{"key":"scip-python python temp indexer `pilot.utils.settings`/Loader#_save_config().","attributes":{"range":[183,4,200,59],"symbol":"scip-python python temp indexer `pilot.utils.settings`/Loader#_save_config().","content":"def _save_config(self, config: dict[str, Any]):\n        \"\"\"\n        Save provided settings to the config file.\n\n        :param config: dict of settings to save\n\n        This is a low-level method that will overwrite the entire\n        config with what's passed in. You should probably use\n        `update()` instead.\n        \"\"\"\n\n        if not self.config_dir.exists():\n            log.debug(f\"Creating config directory: {self.config_dir}\")\n            makedirs(self.config_dir, exist_ok=True)\n\n        log.debug(f\"Saving settings to config file: {self.config_path}\")\n        with open(self.config_path, \"w\", encoding=\"utf-8\") as fp:\n            json.dump(config, fp, indent=2, sort_keys=True)","file":"/pilot/utils/settings.py","language":"python","fileHash":"0501193abe2886d78c5a219d5b99d381aba84fcb86ace5b8a56046be5874e0d6","hash":"47a55fc87b82563ae7fefaccc349aa76b0bea6d89f0a752ff5b3054f2df2fd94","processedContent":"def _save_config(self, config: dict[str, Any]):\n        \"\"\"\n        Save provided settings to the config file.\n\n        :param config: dict of settings to save\n\n        This is a low-level method that will overwrite the entire\n        config with what's passed in. You should probably use\n        `update()` instead.\n        \"\"\"\n\n        if not self.config_dir.exists():\n        \"\"\"\n        scip-python python temp indexer `pilot.utils.settings`/Loader#config_dir.: undefined\n        scip-python python python-stdlib 3.11 pathlib/Path#exists().: undefined\n        \"\"\"\n            log.debug(f\"Creating config directory: {self.config_dir}\")\n            \"\"\"\n            scip-python python temp indexer `pilot.utils.settings`/Loader#config_dir.: undefined\n            scip-python python temp indexer `pilot.utils.settings`/log.: undefined\n            scip-python python python-stdlib 3.11 logging/Logger#debug().: undefined\n            \"\"\"\n            makedirs(self.config_dir, exist_ok=True)\n            \"\"\"\n            scip-python python temp indexer `pilot.utils.settings`/Loader#config_dir.: undefined\n            scip-python python python-stdlib 3.11 os/makedirs().: undefined\n            \"\"\"\n\n        log.debug(f\"Saving settings to config file: {self.config_path}\")\n        \"\"\"\n        scip-python python temp indexer `pilot.utils.settings`/log.: undefined\n        scip-python python python-stdlib 3.11 logging/Logger#debug().: undefined\n        scip-python python temp indexer `pilot.utils.settings`/Loader#config_path.: undefined\n        \"\"\"\n        with open(self.config_path, \"w\", encoding=\"utf-8\") as fp: #undefined\n            json.dump(config, fp, indent=2, sort_keys=True)","documentation":"This code defines a method called `_save_config` that saves a dictionary of settings to a JSON file. It creates the directory if it doesn't exist and then writes the settings to the file using the `json` module."}},{"key":"scip-python python temp indexer `pilot.utils.settings`/Loader#update_settings_from_args().","attributes":{"range":[255,4,264,12],"symbol":"scip-python python temp indexer `pilot.utils.settings`/Loader#update_settings_from_args().","content":"def update_settings_from_args(self, _settings: Settings):\n        \"\"\"\n        Update settings from command line arguments.\n\n        :param settings: Settings object to update in-place\n\n        Note: this is not implemented yet, and currently does nothing.\n        \"\"\"\n        # TODO: implement this\n        pass","file":"/pilot/utils/settings.py","language":"python","fileHash":"0501193abe2886d78c5a219d5b99d381aba84fcb86ace5b8a56046be5874e0d6","hash":"5f708321acf666fd01144c2384ef32ddbd493c20d7a1d7be13b66c58dd1a9ebb","processedContent":"def update_settings_from_args(self, _settings: Settings):\n        \"\"\"\n        Update settings from command line arguments.\n\n        :param settings: Settings object to update in-place\n\n        Note: this is not implemented yet, and currently does nothing.\n        \"\"\"\n        # TODO: implement this\n        pass","documentation":"This code defines a function called `update_settings_from_args` that updates a settings object with values passed in as command line arguments."}},{"key":"scip-python python python-stdlib 3.11 typing/Any.","attributes":{"symbol":"scip-python python python-stdlib 3.11 typing/Any.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.settings`/","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.settings`/","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.settings`/AVAILABLE_SETTINGS.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.settings`/AVAILABLE_SETTINGS.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.settings`/Settings#__slots__.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.settings`/Settings#__slots__.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.settings`/log.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.settings`/log.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.settings`/Loader#config_dir.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.settings`/Loader#config_dir.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.settings`/Loader#settings.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.settings`/Loader#settings.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.settings`/Loader#APP_NAME.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.settings`/Loader#APP_NAME.","language":"python"}},{"key":"scip-python python python-stdlib 3.11 pathlib/Path#expanduser().","attributes":{"symbol":"scip-python python python-stdlib 3.11 pathlib/Path#expanduser().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 pathlib/Path#exists().","attributes":{"symbol":"scip-python python python-stdlib 3.11 pathlib/Path#exists().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 json/load().","attributes":{"symbol":"scip-python python python-stdlib 3.11 json/load().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 pathlib/Path#is_dir().","attributes":{"symbol":"scip-python python python-stdlib 3.11 pathlib/Path#is_dir().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 pathlib/Path#is_file().","attributes":{"symbol":"scip-python python python-stdlib 3.11 pathlib/Path#is_file().","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.spinner`/spinner_start().","attributes":{"range":[4,0,7,18],"symbol":"scip-python python temp indexer `pilot.utils.spinner`/spinner_start().","content":"def spinner_start(text=\"Processing...\"):\n    spinner = yaspin(Spinners.line, text=text)\n    spinner.start()\n    return spinner","file":"/pilot/utils/spinner.py","language":"python","fileHash":"13f7579b83dc15c22f73fdcf90c2d03160da308b2dfc791a40cb51d3e61eeac0","hash":"ee6c4dd201a268c168f2f6ab53f29797ef81cbc57fc707f867d611b68fff655e","processedContent":"def spinner_start(text=\"Processing...\"):\n    spinner = yaspin(Spinners.line, text=text)\n    spinner.start()\n    return spinner","documentation":"This code defines a function called `spinner_start` that creates and starts a spinner animation with a default text of \"Processing...\". The spinner is created using the `yaspin` library and the `Spinners.line` spinner style."}},{"key":"scip-python python temp indexer `pilot.utils.spinner`/spinner_stop().","attributes":{"range":[10,0,12,22],"symbol":"scip-python python temp indexer `pilot.utils.spinner`/spinner_stop().","content":"def spinner_stop(spinner):\n    if spinner is not None:\n        spinner.stop()","file":"/pilot/utils/spinner.py","language":"python","fileHash":"13f7579b83dc15c22f73fdcf90c2d03160da308b2dfc791a40cb51d3e61eeac0","hash":"12719cdf7fa47706ce6acbeb45ed8d23a729fe4751471e30c64e6b512432ff93","processedContent":"def spinner_stop(spinner):\n    if spinner is not None:\n        spinner.stop()","documentation":"This code stops a spinner from spinning if it is not None."}},{"key":"scip-python python temp indexer `pilot.utils.spinner`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.spinner`/__init__:","range":[0,0,13,0],"content":"from yaspin import yaspin\nfrom yaspin.spinners import Spinners\n\n\ndef spinner_start(text=\"Processing...\"):\n    spinner = yaspin(Spinners.line, text=text)\n    spinner.start()\n    return spinner\n\n\ndef spinner_stop(spinner):\n    if spinner is not None:\n        spinner.stop()\n","file":"/pilot/utils/spinner.py","language":"python","fileHash":"13f7579b83dc15c22f73fdcf90c2d03160da308b2dfc791a40cb51d3e61eeac0","hash":"13f7579b83dc15c22f73fdcf90c2d03160da308b2dfc791a40cb51d3e61eeac0","processedContent":"from yaspin import yaspin #undefined\nfrom yaspin.spinners import Spinners #undefined\n\n\ndef spinner_start(text=\"Processing...\"):\n    \"\"\"This code defines a function called `spinner_start` that creates and starts a spinner animation with a default text of \"Processing...\". The spinner is created using the `yaspin` library and the `Spinners.line` spinner style.\"\"\"\n    pass\n\n\ndef spinner_stop(spinner):\n    \"\"\"This code stops a spinner from spinning if it is not None.\"\"\"\n    pass\n","documentation":"The code defines two functions, `spinner_start` and `spinner_stop`, which create and stop a spinner animation using the `yaspin` library."}},{"key":"scip-python python temp indexer yaspin/__init__:","attributes":{"symbol":"scip-python python temp indexer yaspin/__init__:","language":"python"}},{"key":"scip-python python temp indexer `yaspin.spinners`/__init__:","attributes":{"symbol":"scip-python python temp indexer `yaspin.spinners`/__init__:","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.style`/ThemeStyle#","attributes":{"range":[56,0,77,39],"symbol":"scip-python python temp indexer `pilot.utils.style`/ThemeStyle#","content":"class ThemeStyle:\r\n    \"\"\"\r\n    Class that provides style configurations for DARK and LIGHT themes.\r\n    \"\"\"\r\n\r\n    def __init__(self, theme):\r\n        \"\"\"\r\n        Initializes a ThemeStyle instance.\r\n\r\n        Args:\r\n            theme (Theme): An enum member indicating the theme to use.\r\n        \"\"\"\r\n        self.theme = theme\r\n\r\n    def get_style(self):\r\n        \"\"\"\r\n        Returns the Style configuration for the current theme.\r\n\r\n        Returns:\r\n            questionary.Style: The Style instance for the current theme.\r\n        \"\"\"\r\n        return THEME_STYLES[self.theme]","file":"/pilot/utils/style.py","language":"python","fileHash":"33e7fefaa7ec7f2c2886680d98d91761ef9d5b339dcbe55923c17e4bb3475750","hash":"d71f1cffd99fab4744714825a6599480f6e30fecd63053c244a53a27f1728520","processedContent":"class ThemeStyle:\r\n    \"\"\"\r\n    Class that provides style configurations for DARK and LIGHT themes.\r\n    \"\"\"\r\n\r\n    def __init__(self, theme):\r\n        \"\"\"This code initializes a ThemeStyle instance with a theme parameter, which is an enum member indicating the theme to use.\"\"\"\n        pass\n\r\n    def get_style(self):\r\n        \"\"\"\r\n        Returns the Style configuration for the current theme.\r\n\r\n        Returns:\r\n            questionary.Style: The Style instance for the current theme.\r\n        \"\"\"\r\n        return THEME_STYLES[self.theme]","documentation":"This code defines a class called ThemeStyle that provides style configurations for DARK and LIGHT themes. The class has an initializer method that takes a theme parameter, which is an enum member indicating the theme to use. The get_style method returns the Style instance for the current theme."}},{"key":"scip-python python temp indexer `pilot.utils.style`/ThemeStyle#__init__().","attributes":{"range":[61,4,68,26],"symbol":"scip-python python temp indexer `pilot.utils.style`/ThemeStyle#__init__().","content":"def __init__(self, theme):\r\n        \"\"\"\r\n        Initializes a ThemeStyle instance.\r\n\r\n        Args:\r\n            theme (Theme): An enum member indicating the theme to use.\r\n        \"\"\"\r\n        self.theme = theme","file":"/pilot/utils/style.py","language":"python","fileHash":"33e7fefaa7ec7f2c2886680d98d91761ef9d5b339dcbe55923c17e4bb3475750","hash":"961c15eca83d509a2bed28907eb8d450eaed3fdf82d96f38f6e3d4129b11616d","processedContent":"def __init__(self, theme):\r\n        \"\"\"\r\n        Initializes a ThemeStyle instance.\r\n\r\n        Args:\r\n            theme (Theme): An enum member indicating the theme to use.\r\n        \"\"\"\r\n        self.theme = theme","documentation":"This code initializes a ThemeStyle instance with a theme parameter, which is an enum member indicating the theme to use."}},{"key":"scip-python python temp indexer `pilot.utils.style`/ThemeStyle#get_style().","attributes":{"range":[70,4,77,39],"symbol":"scip-python python temp indexer `pilot.utils.style`/ThemeStyle#get_style().","content":"def get_style(self):\r\n        \"\"\"\r\n        Returns the Style configuration for the current theme.\r\n\r\n        Returns:\r\n            questionary.Style: The Style instance for the current theme.\r\n        \"\"\"\r\n        return THEME_STYLES[self.theme]","file":"/pilot/utils/style.py","language":"python","fileHash":"33e7fefaa7ec7f2c2886680d98d91761ef9d5b339dcbe55923c17e4bb3475750","hash":"74491913af69a7244ad7946c33e780b887a416635e510af222da6aadcde1a395","processedContent":"def get_style(self):\r\n        \"\"\"\r\n        Returns the Style configuration for the current theme.\r\n\r\n        Returns:\r\n            questionary.Style: The Style instance for the current theme.\r\n        \"\"\"\r\n        return THEME_STYLES[self.theme]","documentation":"This code defines a function called `get_style` that returns the style configuration for the current theme."}},{"key":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#","attributes":{"range":[80,0,124,38],"symbol":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#","content":"class StyleConfig:\r\n    \"\"\"\r\n    Class to manage the application's style and color configurations.\r\n    \"\"\"\r\n\r\n    def __init__(self, theme: Theme = Theme.DARK):\r\n        \"\"\"\r\n        Initializes a StyleConfig instance.\r\n\r\n        Args:\r\n            theme (Theme, optional): The initial theme to use. Defaults to Theme.DARK.\r\n        \"\"\"\r\n        self.theme_style = ThemeStyle(theme)\r\n        self.theme = theme\r\n\r\n    def get_style(self):\r\n        \"\"\"\r\n        Retrieves the Style configuration from the theme_style instance.\r\n\r\n        Returns:\r\n            questionary.Style: The Style configuration.\r\n        \"\"\"\r\n        return self.theme_style.get_style()\r\n\r\n    def get_color(self, color_name: ColorName):\r\n        \"\"\"\r\n        Retrieves the ANSI color code for the provided color_name, taking into account the current theme.\r\n\r\n        Args:\r\n            color_name (ColorName): Enum member indicating the desired color.\r\n\r\n        Returns:\r\n            str: The ANSI color code.\r\n        \"\"\"\r\n        return color_name.value[self.theme == Theme.LIGHT]\r\n\r\n    def set_theme(self, theme: Theme):\r\n        \"\"\"\r\n        Updates the theme of both the StyleConfig and its theme_style instance.\r\n\r\n        Args:\r\n            theme (Theme): Enum member indicating the new theme.\r\n        \"\"\"\r\n        self.theme = theme\r\n        self.theme_style.theme = theme","file":"/pilot/utils/style.py","language":"python","fileHash":"33e7fefaa7ec7f2c2886680d98d91761ef9d5b339dcbe55923c17e4bb3475750","hash":"1a8240bba5f9bcaaec903ab44dc8375ddb3ca26398b0f4e1ef55b3b96dbb0a73","processedContent":"class StyleConfig:\r\n    \"\"\"\r\n    Class to manage the application's style and color configurations.\r\n    \"\"\"\r\n\r\n    def __init__(self, theme: Theme = Theme.DARK):\r\n        \"\"\"This code defines a class called StyleConfig that initializes a theme style based on the provided theme parameter.\"\"\"\n        pass\n\r\n    def get_style(self):\r\n        \"\"\"This code retrieves the Style configuration from a theme_style instance and returns it as a questionary.Style object.\"\"\"\n        pass\n\r\n    def get_color(self, color_name: ColorName):\r\n        \"\"\"This code defines a function called `get_color` that retrieves the ANSI color code for a given color name, taking into account the current theme.\"\"\"\n        pass\n\r\n    def set_theme(self, theme: Theme):\r\n        \"\"\"\r\n        Updates the theme of both the StyleConfig and its theme_style instance.\r\n\r\n        Args:\r\n            theme (Theme): Enum member indicating the new theme.\r\n        \"\"\"\r\n        self.theme = theme\r\n        self.theme_style.theme = theme","documentation":"This code defines a class called StyleConfig that manages the application's style and color configurations. It initializes a theme style based on a provided theme parameter, retrieves the Style configuration from a theme_style instance, and provides functions to retrieve ANSI color codes for given color names based on the current theme."}},{"key":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#__init__().","attributes":{"range":[85,4,93,26],"symbol":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#__init__().","content":"def __init__(self, theme: Theme = Theme.DARK):\r\n        \"\"\"\r\n        Initializes a StyleConfig instance.\r\n\r\n        Args:\r\n            theme (Theme, optional): The initial theme to use. Defaults to Theme.DARK.\r\n        \"\"\"\r\n        self.theme_style = ThemeStyle(theme)\r\n        self.theme = theme","file":"/pilot/utils/style.py","language":"python","fileHash":"33e7fefaa7ec7f2c2886680d98d91761ef9d5b339dcbe55923c17e4bb3475750","hash":"e86ef5a9700277c2df98ff4a17b0cca6cdfd56328f1fe32dca7ba26b065daf08","processedContent":"def __init__(self, theme: Theme = Theme.DARK):\r\n        \"\"\"\r\n        Initializes a StyleConfig instance.\r\n\r\n        Args:\r\n            theme (Theme, optional): The initial theme to use. Defaults to Theme.DARK.\r\n        \"\"\"\r\n        self.theme_style = ThemeStyle(theme)\r #This code defines a class called ThemeStyle that provides style configurations for DARK and LIGHT themes. The class has an initializer method that takes a theme parameter, which is an enum member indicating the theme to use. The get_style method returns the Style instance for the current theme.\n        self.theme = theme","documentation":"This code defines a class called StyleConfig that initializes a theme style based on the provided theme parameter."}},{"key":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#get_color().","attributes":{"range":[104,4,114,58],"symbol":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#get_color().","content":"def get_color(self, color_name: ColorName):\r\n        \"\"\"\r\n        Retrieves the ANSI color code for the provided color_name, taking into account the current theme.\r\n\r\n        Args:\r\n            color_name (ColorName): Enum member indicating the desired color.\r\n\r\n        Returns:\r\n            str: The ANSI color code.\r\n        \"\"\"\r\n        return color_name.value[self.theme == Theme.LIGHT]","file":"/pilot/utils/style.py","language":"python","fileHash":"33e7fefaa7ec7f2c2886680d98d91761ef9d5b339dcbe55923c17e4bb3475750","hash":"f0c76325b8278f4d0157e10a9d0cbcd95ded46a85b5328775f3191cb75b4d8b3","processedContent":"def get_color(self, color_name: ColorName):\r\n        \"\"\"\r\n        Retrieves the ANSI color code for the provided color_name, taking into account the current theme.\r\n\r\n        Args:\r\n            color_name (ColorName): Enum member indicating the desired color.\r\n\r\n        Returns:\r\n            str: The ANSI color code.\r\n        \"\"\"\r\n        return color_name.value[self.theme == Theme.LIGHT]","documentation":"This code defines a function called `get_color` that retrieves the ANSI color code for a given color name, taking into account the current theme."}},{"key":"scip-python python temp indexer `pilot.utils.style`/get_color_function().color_func().","attributes":{"range":[139,4,152,45],"symbol":"scip-python python temp indexer `pilot.utils.style`/get_color_function().color_func().","content":"def color_func(text: str) -> str:\r\n        \"\"\"\r\n        Colorizes the input text using the color and boldness provided when `get_color_function` was called.\r\n\r\n        Args:\r\n            text (str): The text to colorize.\r\n\r\n        Returns:\r\n            str: The colorized text.\r\n        \"\"\"\r\n        color = style_config.get_color(color_name)\r\n        style = ColoramaStyle.BRIGHT if bold else \"\"\r\n        reset = ColoramaStyle.RESET_ALL  # Reset code to reset the color\r\n        return f'{color}{style}{text}{reset}'","file":"/pilot/utils/style.py","language":"python","fileHash":"33e7fefaa7ec7f2c2886680d98d91761ef9d5b339dcbe55923c17e4bb3475750","hash":"2539a5e5895a8eac8dff83395874a5a2061cdccc41abd5f258760abbd257bf1e","processedContent":"def color_func(text: str) -> str:\r\n        \"\"\"\r\n        Colorizes the input text using the color and boldness provided when `get_color_function` was called.\r\n\r\n        Args:\r\n            text (str): The text to colorize.\r\n\r\n        Returns:\r\n            str: The colorized text.\r\n        \"\"\"\r\n        color = style_config.get_color(color_name)\r\n        \"\"\"\n        scip-python python temp indexer `pilot.utils.style`/style_config.: undefined\n        scip-python python temp indexer `pilot.utils.style`/StyleConfig#get_color().: This code defines a function called `get_color` that retrieves the ANSI color code for a given color name, taking into account the current theme.\n        \"\"\"\n        style = ColoramaStyle.BRIGHT if bold else \"\"\r\n        \"\"\"\n        scip-python python colorama 0.4.6 `colorama.ansi`/Style.Style.: undefined\n        scip-python python colorama 0.4.6 `colorama.ansi`/AnsiStyle#BRIGHT.: undefined\n        \"\"\"\n        reset = ColoramaStyle.RESET_ALL  # Reset code to reset the color\r\n        \"\"\"\n        scip-python python colorama 0.4.6 `colorama.ansi`/Style.Style.: undefined\n        scip-python python colorama 0.4.6 `colorama.ansi`/AnsiStyle#RESET_ALL.: undefined\n        \"\"\"\n        return f'{color}{style}{text}{reset}'","documentation":"This code defines a function called `color_func` that takes a string as input and returns a colorized version of the string using the ANSI color code for the specified color name, taking into account the current theme."}},{"key":"scip-python python colorama 0.4.6 colorama/__init__:","attributes":{"symbol":"scip-python python colorama 0.4.6 colorama/__init__:","language":"python"}},{"key":"scip-python python colorama 0.4.6 `colorama.ansi`/Fore.Fore.","attributes":{"symbol":"scip-python python colorama 0.4.6 `colorama.ansi`/Fore.Fore.","language":"python"}},{"key":"scip-python python colorama 0.4.6 `colorama.ansi`/Style.Style.","attributes":{"symbol":"scip-python python colorama 0.4.6 `colorama.ansi`/Style.Style.","language":"python"}},{"key":"scip-python python colorama 0.4.6 `colorama.initialise`/init().","attributes":{"symbol":"scip-python python colorama 0.4.6 `colorama.initialise`/init().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 enum/__init__:","attributes":{"symbol":"scip-python python python-stdlib 3.11 enum/__init__:","language":"python"}},{"key":"scip-python python python-stdlib 3.11 enum/Enum#","attributes":{"symbol":"scip-python python python-stdlib 3.11 enum/Enum#","language":"python"}},{"key":"scip-python python colorama 0.4.6 `colorama.ansi`/AnsiFore#RED.","attributes":{"symbol":"scip-python python colorama 0.4.6 `colorama.ansi`/AnsiFore#RED.","language":"python"}},{"key":"scip-python python colorama 0.4.6 `colorama.ansi`/AnsiFore#LIGHTRED_EX.","attributes":{"symbol":"scip-python python colorama 0.4.6 `colorama.ansi`/AnsiFore#LIGHTRED_EX.","language":"python"}},{"key":"scip-python python colorama 0.4.6 `colorama.ansi`/AnsiFore#GREEN.","attributes":{"symbol":"scip-python python colorama 0.4.6 `colorama.ansi`/AnsiFore#GREEN.","language":"python"}},{"key":"scip-python python colorama 0.4.6 `colorama.ansi`/AnsiFore#LIGHTGREEN_EX.","attributes":{"symbol":"scip-python python colorama 0.4.6 `colorama.ansi`/AnsiFore#LIGHTGREEN_EX.","language":"python"}},{"key":"scip-python python colorama 0.4.6 `colorama.ansi`/AnsiFore#YELLOW.","attributes":{"symbol":"scip-python python colorama 0.4.6 `colorama.ansi`/AnsiFore#YELLOW.","language":"python"}},{"key":"scip-python python colorama 0.4.6 `colorama.ansi`/AnsiFore#LIGHTYELLOW_EX.","attributes":{"symbol":"scip-python python colorama 0.4.6 `colorama.ansi`/AnsiFore#LIGHTYELLOW_EX.","language":"python"}},{"key":"scip-python python colorama 0.4.6 `colorama.ansi`/AnsiFore#BLUE.","attributes":{"symbol":"scip-python python colorama 0.4.6 `colorama.ansi`/AnsiFore#BLUE.","language":"python"}},{"key":"scip-python python colorama 0.4.6 `colorama.ansi`/AnsiFore#LIGHTBLUE_EX.","attributes":{"symbol":"scip-python python colorama 0.4.6 `colorama.ansi`/AnsiFore#LIGHTBLUE_EX.","language":"python"}},{"key":"scip-python python colorama 0.4.6 `colorama.ansi`/AnsiFore#CYAN.","attributes":{"symbol":"scip-python python colorama 0.4.6 `colorama.ansi`/AnsiFore#CYAN.","language":"python"}},{"key":"scip-python python colorama 0.4.6 `colorama.ansi`/AnsiFore#LIGHTCYAN_EX.","attributes":{"symbol":"scip-python python colorama 0.4.6 `colorama.ansi`/AnsiFore#LIGHTCYAN_EX.","language":"python"}},{"key":"scip-python python colorama 0.4.6 `colorama.ansi`/AnsiFore#WHITE.","attributes":{"symbol":"scip-python python colorama 0.4.6 `colorama.ansi`/AnsiFore#WHITE.","language":"python"}},{"key":"scip-python python colorama 0.4.6 `colorama.ansi`/AnsiFore#LIGHTWHITE_EX.","attributes":{"symbol":"scip-python python colorama 0.4.6 `colorama.ansi`/AnsiFore#LIGHTWHITE_EX.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.style`/Theme#YELLOW.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.style`/Theme#YELLOW.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.style`/THEME_STYLES.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.style`/THEME_STYLES.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.style`/ThemeStyle#theme.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.style`/ThemeStyle#theme.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#theme_style.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#theme_style.","language":"python"}},{"key":"scip-python python python-stdlib 3.11 enum/Enum#value().","attributes":{"symbol":"scip-python python python-stdlib 3.11 enum/Enum#value().","language":"python"}},{"key":"scip-python python colorama 0.4.6 `colorama.ansi`/AnsiStyle#BRIGHT.","attributes":{"symbol":"scip-python python colorama 0.4.6 `colorama.ansi`/AnsiStyle#BRIGHT.","language":"python"}},{"key":"scip-python python colorama 0.4.6 `colorama.ansi`/AnsiStyle#RESET_ALL.","attributes":{"symbol":"scip-python python colorama 0.4.6 `colorama.ansi`/AnsiStyle#RESET_ALL.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.style`/ColorName#YELLOW.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.style`/ColorName#YELLOW.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.style`/ColorName#BLUE.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.style`/ColorName#BLUE.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.style`/ColorName#CYAN.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.style`/ColorName#CYAN.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.style`/ColorName#WHITE.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.style`/ColorName#WHITE.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#__init__().","attributes":{"range":[48,4,63,13],"symbol":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#__init__().","content":"def __init__(self):\n        self.enabled = False\n        self.telemetry_id = None\n        self.endpoint = None\n        self.clear_data()\n\n        if settings.telemetry is not None:\n            self.enabled = settings.telemetry.get(\"enabled\", False)\n            self.telemetry_id = settings.telemetry.get(\"id\")\n            self.endpoint = settings.telemetry.get(\"endpoint\")\n\n        if self.enabled:\n            log.debug(\n                f\"Anonymous telemetry enabled (id={self.telemetry_id}), \"\n                f\"configure or disable it in {config_path}\"\n            )","file":"/pilot/utils/telemetry.py","language":"python","fileHash":"500b9e782c148aa6137a800cd6924871cd09de08b047ebfbb66ad8b67400a963","hash":"b244244677de5d07a4cf21358bf3923d15b0bb4b29140da25bcaca225c5be409","processedContent":"def __init__(self):\n        self.enabled = False\n        self.telemetry_id = None\n        self.endpoint = None\n        self.clear_data() #This code defines a function called `clear_data` that resets all telemetry data to default values. It sets various attributes to None or empty strings, and also checks the system platform to set additional attributes like the Linux distribution name if running on Linux.\n\n        if settings.telemetry is not None: #undefined\n            self.enabled = settings.telemetry.get(\"enabled\", False)\n            \"\"\"\n            scip-python python temp indexer `pilot.utils.settings`/settings.: undefined\n            scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#enabled.: undefined\n            \"\"\"\n            self.telemetry_id = settings.telemetry.get(\"id\")\n            \"\"\"\n            scip-python python temp indexer `pilot.utils.settings`/settings.: undefined\n            scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#telemetry_id.: undefined\n            \"\"\"\n            self.endpoint = settings.telemetry.get(\"endpoint\")\n            \"\"\"\n            scip-python python temp indexer `pilot.utils.settings`/settings.: undefined\n            scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#endpoint.: undefined\n            \"\"\"\n\n        if self.enabled: #undefined\n            log.debug(\n            \"\"\"\n            scip-python python temp indexer `pilot.utils.telemetry`/log.: undefined\n            scip-python python python-stdlib 3.11 logging/Logger#debug().: undefined\n            \"\"\"\n                f\"Anonymous telemetry enabled (id={self.telemetry_id}), \" #undefined\n                f\"configure or disable it in {config_path}\" #undefined\n            )","documentation":"This code defines a class called `Telemetry` that allows the system to collect and send anonymous usage data to a remote server. It sets various attributes based on the system's configuration, and logs a message if telemetry is enabled."}},{"key":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#set().","attributes":{"range":[134,4,152,31],"symbol":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#set().","content":"def set(self, name: str, value: Any):\n        \"\"\"\n        Set a telemetry data field to a value.\n\n        :param name: name of the telemetry data field\n        :param value: value to set the field to\n\n        Note: only known data fields may be set, see `Telemetry.clear_data()` for a list.\n        \"\"\"\n        if not self.enabled:\n            return\n\n        if name not in self.data:\n            log.error(\n                f\"Telemetry.record(): ignoring unknown telemetry data field: {name}\"\n            )\n            return\n\n        self.data[name] = value","file":"/pilot/utils/telemetry.py","language":"python","fileHash":"500b9e782c148aa6137a800cd6924871cd09de08b047ebfbb66ad8b67400a963","hash":"2f697f6cdf310915861c8c6df12abf5ef286b7f48cae6a3c3a6c087eed5ec43c","processedContent":"def set(self, name: str, value: Any):\n        \"\"\"\n        Set a telemetry data field to a value.\n\n        :param name: name of the telemetry data field\n        :param value: value to set the field to\n\n        Note: only known data fields may be set, see `Telemetry.clear_data()` for a list.\n        \"\"\"\n        if not self.enabled: #undefined\n            return\n\n        if name not in self.data: #undefined\n            log.error(\n            \"\"\"\n            scip-python python temp indexer `pilot.utils.telemetry`/log.: undefined\n            scip-python python python-stdlib 3.11 logging/Logger#error().: undefined\n            \"\"\"\n                f\"Telemetry.record(): ignoring unknown telemetry data field: {name}\"\n            )\n            return\n\n        self.data[name] = value","documentation":"This code defines a method called `set` that allows you to set the value of a telemetry data field. It checks if the field is known and if it's enabled, and then sets the value."}},{"key":"scip-python python temp indexer `pilot.utils.settings`/version.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.settings`/version.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.settings`/config_path.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.settings`/config_path.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.telemetry`/","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.telemetry`/","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.telemetry`/log.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.telemetry`/log.","language":"python"}},{"key":"scip-python python python-stdlib 3.11 sys/version.version.","attributes":{"symbol":"scip-python python python-stdlib 3.11 sys/version.version.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.test_arguments`/test_email_found_in_gitconfig().","attributes":{"range":[6,0,14,52],"symbol":"scip-python python temp indexer `pilot.utils.test_arguments`/test_email_found_in_gitconfig().","content":"def test_email_found_in_gitconfig():\r\n    mock_file_content = \"\"\"\r\n    [user]\r\n        name = test_user\r\n        email = test@example.com\r\n    \"\"\"\r\n    with patch('os.path.exists', return_value=True):\r\n        with patch('builtins.open', mock_open(read_data=mock_file_content)):\r\n            assert get_email() == \"test@example.com\"","file":"/pilot/utils/test_arguments.py","language":"python","fileHash":"0e28321b6f44685bcccbb80f276b886243401f6741331428bbff7cf53d440263","hash":"047e9c395f3d4aede29c3627422c8d5ed99aca2b87e2cb34fedf82c4b2ec25c1","processedContent":"def test_email_found_in_gitconfig():\r\n    mock_file_content = \"\"\"\r\n    [user]\r\n        name = test_user\r\n        email = test@example.com\r\n    \"\"\"\r\n    with patch('os.path.exists', return_value=True):\r\n        with patch('builtins.open', mock_open(read_data=mock_file_content)):\r\n            assert get_email() == \"test@example.com\"","documentation":"This code is a unit test that checks if the email address found in the Git configuration file is correct. It uses mock objects to simulate the behavior of the `os` and `builtins` modules, and it asserts that the email address returned by the `get_email()` function is \"test@example.com\"."}},{"key":"scip-python python temp indexer `pilot.utils.test_arguments`/test_email_not_found_in_gitconfig().","attributes":{"range":[17,0,27,47],"symbol":"scip-python python temp indexer `pilot.utils.test_arguments`/test_email_not_found_in_gitconfig().","content":"def test_email_not_found_in_gitconfig():\r\n    mock_file_content = \"\"\"\r\n    [user]\r\n        name = test_user\r\n    \"\"\"\r\n    mock_uuid = \"12345678-1234-5678-1234-567812345678\"\r\n\r\n    with patch('os.path.exists', return_value=True):\r\n        with patch('builtins.open', mock_open(read_data=mock_file_content)):\r\n            with patch.object(uuid, \"uuid4\", return_value=mock_uuid):\r\n                assert get_email() == mock_uuid","file":"/pilot/utils/test_arguments.py","language":"python","fileHash":"0e28321b6f44685bcccbb80f276b886243401f6741331428bbff7cf53d440263","hash":"85d44ff4d49dbe3e05b0dbf7a021e7a3fc5d265e9bcce6edfcf4563a51049685","processedContent":"def test_email_not_found_in_gitconfig():\r\n    mock_file_content = \"\"\"\r\n    [user]\r\n        name = test_user\r\n    \"\"\"\r\n    mock_uuid = \"12345678-1234-5678-1234-567812345678\"\r\n\r\n    with patch('os.path.exists', return_value=True):\r\n        with patch('builtins.open', mock_open(read_data=mock_file_content)):\r\n            with patch.object(uuid, \"uuid4\", return_value=mock_uuid):\r #undefined\n                assert get_email() == mock_uuid","documentation":"This code is a unit test for the `get_email()` function. It mocks the behavior of the `os` and `uuid` modules to simulate the presence of a Git configuration file and a unique identifier, respectively. The test asserts that the `get_email()` function returns the expected value based on these mocked inputs."}},{"key":"scip-python python temp indexer `pilot.utils.test_arguments`/test_gitconfig_not_present().","attributes":{"range":[30,0,35,43],"symbol":"scip-python python temp indexer `pilot.utils.test_arguments`/test_gitconfig_not_present().","content":"def test_gitconfig_not_present():\r\n    mock_uuid = \"12345678-1234-5678-1234-567812345678\"\r\n\r\n    with patch('os.path.exists', return_value=False):\r\n        with patch.object(uuid, \"uuid4\", return_value=mock_uuid):\r\n            assert get_email() == mock_uuid","file":"/pilot/utils/test_arguments.py","language":"python","fileHash":"0e28321b6f44685bcccbb80f276b886243401f6741331428bbff7cf53d440263","hash":"a6a2108a316df51aad1e3e0a32949dffb1e71ec5f2ac60972a9d2e42c7a7df1e","processedContent":"def test_gitconfig_not_present():\r\n    mock_uuid = \"12345678-1234-5678-1234-567812345678\"\r\n\r\n    with patch('os.path.exists', return_value=False):\r\n        with patch.object(uuid, \"uuid4\", return_value=mock_uuid):\r #undefined\n            assert get_email() == mock_uuid","documentation":"This code is a unit test for the `get_email()` function. It mocks the absence of a `.gitconfig` file and generates a random UUID using the `uuid4()` method from the `uuid` module. The test asserts that the `get_email()` function returns the generated UUID."}},{"key":"scip-python python temp indexer `pilot.utils.test_arguments`/test_username_to_uuid().","attributes":{"range":[38,0,39,82],"symbol":"scip-python python temp indexer `pilot.utils.test_arguments`/test_username_to_uuid().","content":"def test_username_to_uuid():\r\n    assert username_to_uuid(\"test_user\") == \"31676025-316f-b555-e0bf-a12f0bcfd0ea\"","file":"/pilot/utils/test_arguments.py","language":"python","fileHash":"0e28321b6f44685bcccbb80f276b886243401f6741331428bbff7cf53d440263","hash":"5be38d2f1016fec31aa1b32da28a6cb43fc441728494456b2b1a61a86957cc46","processedContent":"def test_username_to_uuid():\r\n    assert username_to_uuid(\"test_user\") == \"31676025-316f-b555-e0bf-a12f0bcfd0ea\"","documentation":"This code tests a function called `username_to_uuid` that takes a username as input and returns a UUID. The test ensures that the function correctly generates a UUID for a given username."}},{"key":"scip-python python temp indexer `pilot.utils.test_arguments`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.test_arguments`/__init__:","range":[0,0,40,0],"content":"import pytest\r\nfrom unittest.mock import patch, mock_open\r\nimport uuid\r\nfrom .arguments import get_email, username_to_uuid\r\n\r\n\r\ndef test_email_found_in_gitconfig():\r\n    mock_file_content = \"\"\"\r\n    [user]\r\n        name = test_user\r\n        email = test@example.com\r\n    \"\"\"\r\n    with patch('os.path.exists', return_value=True):\r\n        with patch('builtins.open', mock_open(read_data=mock_file_content)):\r\n            assert get_email() == \"test@example.com\"\r\n\r\n\r\ndef test_email_not_found_in_gitconfig():\r\n    mock_file_content = \"\"\"\r\n    [user]\r\n        name = test_user\r\n    \"\"\"\r\n    mock_uuid = \"12345678-1234-5678-1234-567812345678\"\r\n\r\n    with patch('os.path.exists', return_value=True):\r\n        with patch('builtins.open', mock_open(read_data=mock_file_content)):\r\n            with patch.object(uuid, \"uuid4\", return_value=mock_uuid):\r\n                assert get_email() == mock_uuid\r\n\r\n\r\ndef test_gitconfig_not_present():\r\n    mock_uuid = \"12345678-1234-5678-1234-567812345678\"\r\n\r\n    with patch('os.path.exists', return_value=False):\r\n        with patch.object(uuid, \"uuid4\", return_value=mock_uuid):\r\n            assert get_email() == mock_uuid\r\n\r\n\r\ndef test_username_to_uuid():\r\n    assert username_to_uuid(\"test_user\") == \"31676025-316f-b555-e0bf-a12f0bcfd0ea\"\r\n","file":"/pilot/utils/test_arguments.py","language":"python","fileHash":"0e28321b6f44685bcccbb80f276b886243401f6741331428bbff7cf53d440263","hash":"0e28321b6f44685bcccbb80f276b886243401f6741331428bbff7cf53d440263","processedContent":"import pytest\r\nfrom unittest.mock import patch, mock_open\r #undefined\nimport uuid\r #undefined\nfrom .arguments import get_email, username_to_uuid\r\n\"\"\"\nscip-python python temp indexer `pilot.utils.arguments`/__init__:: The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.utils.arguments`/get_email().: This code defines a function called `get_email()` that attempts to retrieve the user's email address from their `.gitconfig` file. If the email is not found, it returns a UUID instead.\nscip-python python temp indexer `pilot.utils.arguments`/username_to_uuid().: This code takes a username as input and generates a consistent UUID based on the SHA-1 hash of the username.\n\"\"\"\n\r\n\r\ndef test_email_found_in_gitconfig():\r\n    \"\"\"This code is a unit test that checks if the email address found in the Git configuration file is correct. It uses mock objects to simulate the behavior of the `os` and `builtins` modules, and it asserts that the email address returned by the `get_email()` function is \"test@example.com\".\"\"\"\n    pass\n\r\n\r\ndef test_email_not_found_in_gitconfig():\r\n    \"\"\"This code is a unit test for the `get_email()` function. It mocks the behavior of the `os` and `uuid` modules to simulate the presence of a Git configuration file and a unique identifier, respectively. The test asserts that the `get_email()` function returns the expected value based on these mocked inputs.\"\"\"\n    pass\n\r\n\r\ndef test_gitconfig_not_present():\r\n    \"\"\"This code is a unit test for the `get_email()` function. It mocks the absence of a `.gitconfig` file and generates a random UUID using the `uuid4()` method from the `uuid` module. The test asserts that the `get_email()` function returns the generated UUID.\"\"\"\n    pass\n\r\n\r\ndef test_username_to_uuid():\r\n    \"\"\"This code tests a function called `username_to_uuid` that takes a username as input and returns a UUID. The test ensures that the function correctly generates a UUID for a given username.\"\"\"\n    pass\n","documentation":"The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt."}},{"key":"scip-python python temp indexer `pilot.utils.test_files`/mocked_create_directory().","attributes":{"range":[5,0,6,10],"symbol":"scip-python python temp indexer `pilot.utils.test_files`/mocked_create_directory().","content":"def mocked_create_directory(path, exist_ok=True):\r\n    return","file":"/pilot/utils/test_files.py","language":"python","fileHash":"39acbeae9181e334873ea9cc84ad5db07afda494d3644de8c028fd5f2dc1c6b5","hash":"6989623a057bdb72fa1df7c4dcbdeef522575b605e01ee632f538b1bd4ae0d9c","processedContent":"def mocked_create_directory(path, exist_ok=True):\r\n    return","documentation":"This code defines a function called `mocked_create_directory` that creates a directory at the specified path. The `exist_ok` parameter is set to `True`, which means that if the directory already exists, it will not raise an error."}},{"key":"scip-python python temp indexer `pilot.utils.test_files`/mocked_abspath().","attributes":{"range":[9,0,10,37],"symbol":"scip-python python temp indexer `pilot.utils.test_files`/mocked_abspath().","content":"def mocked_abspath(file):\r\n    return \"/root_path/pilot/helpers\"","file":"/pilot/utils/test_files.py","language":"python","fileHash":"39acbeae9181e334873ea9cc84ad5db07afda494d3644de8c028fd5f2dc1c6b5","hash":"24309c53a07477ad03391135d7b222c1603c9ca11a7eb7062e602ad66977a478","processedContent":"def mocked_abspath(file):\r\n    return \"/root_path/pilot/helpers\"","documentation":"This code defines a function called `mocked_abspath` that returns a hardcoded path for a file. It is used to mock the `os.path.abspath` function in unit tests, allowing developers to test their code without relying on the actual file system."}},{"key":"scip-python python temp indexer `pilot.utils.test_files`/test_setup_workspace_with_existing_workspace().","attributes":{"range":[13,0,17,38],"symbol":"scip-python python temp indexer `pilot.utils.test_files`/test_setup_workspace_with_existing_workspace().","content":"@patch('utils.files.os.makedirs', side_effect=mocked_create_directory)\r\ndef test_setup_workspace_with_existing_workspace(mock_makedirs):\r\n    args = {'workspace': '/some/directory', 'name': 'sample'}\r\n    result = setup_workspace(args)\r\n    assert result == '/some/directory'","file":"/pilot/utils/test_files.py","language":"python","fileHash":"39acbeae9181e334873ea9cc84ad5db07afda494d3644de8c028fd5f2dc1c6b5","hash":"def658b3f35259601ec6fb80f1082d58419b88ccb23dd808239d89f98e0d8a33","processedContent":"@patch('utils.files.os.makedirs', side_effect=mocked_create_directory)\r #This code defines a function called `mocked_create_directory` that creates a directory at the specified path. The `exist_ok` parameter is set to `True`, which means that if the directory already exists, it will not raise an error.\ndef test_setup_workspace_with_existing_workspace(mock_makedirs):\r\n    args = {'workspace': '/some/directory', 'name': 'sample'}\r\n    result = setup_workspace(args)\r #This code defines a function called `setup_workspace` that creates a new project workspace and returns the path to it. It also creates a 'tests' folder inside the workspace and saves a user-app relationship if one does not already exist.\n    assert result == '/some/directory'","documentation":"This code defines a function called `setup_workspace` that creates a new project workspace and returns the path to it. It also creates a 'tests' folder inside the workspace and saves a user-app relationship if one does not already exist."}},{"key":"scip-python python temp indexer `pilot.utils.test_files`/test_setup_workspace_with_root_arg().","attributes":{"range":[20,0,27,73],"symbol":"scip-python python temp indexer `pilot.utils.test_files`/test_setup_workspace_with_root_arg().","content":"def test_setup_workspace_with_root_arg(monkeypatch):\r\n    args = {'root': '/my/root', 'name': 'project_name'}\r\n\r\n    monkeypatch.setattr('os.path.abspath', mocked_abspath)\r\n    monkeypatch.setattr('os.makedirs', mocked_create_directory)\r\n\r\n    result = setup_workspace(args)\r\n    assert result.replace('\\\\', '/') == \"/my/root/workspace/project_name\"","file":"/pilot/utils/test_files.py","language":"python","fileHash":"39acbeae9181e334873ea9cc84ad5db07afda494d3644de8c028fd5f2dc1c6b5","hash":"68ad663c75a5fa8efadc2489bddf798d6a0a4d7d03871628f033c51aea62d103","processedContent":"def test_setup_workspace_with_root_arg(monkeypatch):\r\n    args = {'root': '/my/root', 'name': 'project_name'}\r\n\r\n    monkeypatch.setattr('os.path.abspath', mocked_abspath)\r #This code defines a function called `mocked_abspath` that returns a hardcoded path for a file. It is used to mock the `os.path.abspath` function in unit tests, allowing developers to test their code without relying on the actual file system.\n    monkeypatch.setattr('os.makedirs', mocked_create_directory)\r #This code defines a function called `mocked_create_directory` that creates a directory at the specified path. The `exist_ok` parameter is set to `True`, which means that if the directory already exists, it will not raise an error.\n\r\n    result = setup_workspace(args)\r #This code defines a function called `setup_workspace` that creates a new project workspace and returns the path to it. It also creates a 'tests' folder inside the workspace and saves a user-app relationship if one does not already exist.\n    assert result.replace('\\\\', '/') == \"/my/root/workspace/project_name\"","documentation":"This code defines a unit test for the `setup_workspace` function, which creates a new project workspace and returns its path. The test mocks the `os.path.abspath` and `os.makedirs` functions to simulate the creation of a directory and the existence of a user-app relationship."}},{"key":"scip-python python temp indexer `pilot.utils.test_files`/test_setup_workspace_without_existing_workspace().","attributes":{"range":[30,0,36,75],"symbol":"scip-python python temp indexer `pilot.utils.test_files`/test_setup_workspace_without_existing_workspace().","content":"@patch('utils.files.os.path.abspath', return_value='/root_path/pilot/helpers')\r\n@patch('utils.files.os.makedirs', side_effect=mocked_create_directory)\r\ndef test_setup_workspace_without_existing_workspace(mock_makedirs, mock_abs_path):\r\n    args = {'workspace': None, 'name': 'project_name'}\r\n\r\n    result = setup_workspace(args)\r\n    assert result.replace('\\\\', '/') == \"/root_path/workspace/project_name\"","file":"/pilot/utils/test_files.py","language":"python","fileHash":"39acbeae9181e334873ea9cc84ad5db07afda494d3644de8c028fd5f2dc1c6b5","hash":"2ac4e3fd3804e53e5e4a99e6249e815d6479bb0c04431f20883a4497c8bbb04c","processedContent":"@patch('utils.files.os.path.abspath', return_value='/root_path/pilot/helpers')\r\n@patch('utils.files.os.makedirs', side_effect=mocked_create_directory)\r #This code defines a function called `mocked_create_directory` that creates a directory at the specified path. The `exist_ok` parameter is set to `True`, which means that if the directory already exists, it will not raise an error.\ndef test_setup_workspace_without_existing_workspace(mock_makedirs, mock_abs_path):\r\n    args = {'workspace': None, 'name': 'project_name'}\r\n\r\n    result = setup_workspace(args)\r #This code defines a function called `setup_workspace` that creates a new project workspace and returns the path to it. It also creates a 'tests' folder inside the workspace and saves a user-app relationship if one does not already exist.\n    assert result.replace('\\\\', '/') == \"/root_path/workspace/project_name\"","documentation":"This code defines a function called `setup_workspace` that creates a new project workspace and returns the path to it. It also creates a 'tests' folder inside the workspace and saves a user-app relationship if one does not already exist."}},{"key":"scip-python python temp indexer `pilot.utils.test_files`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.test_files`/__init__:","range":[0,0,37,0],"content":"import os\r\nfrom unittest.mock import patch\r\nfrom utils.files import setup_workspace\r\n\r\n\r\ndef mocked_create_directory(path, exist_ok=True):\r\n    return\r\n\r\n\r\ndef mocked_abspath(file):\r\n    return \"/root_path/pilot/helpers\"\r\n\r\n\r\n@patch('utils.files.os.makedirs', side_effect=mocked_create_directory)\r\ndef test_setup_workspace_with_existing_workspace(mock_makedirs):\r\n    args = {'workspace': '/some/directory', 'name': 'sample'}\r\n    result = setup_workspace(args)\r\n    assert result == '/some/directory'\r\n\r\n\r\ndef test_setup_workspace_with_root_arg(monkeypatch):\r\n    args = {'root': '/my/root', 'name': 'project_name'}\r\n\r\n    monkeypatch.setattr('os.path.abspath', mocked_abspath)\r\n    monkeypatch.setattr('os.makedirs', mocked_create_directory)\r\n\r\n    result = setup_workspace(args)\r\n    assert result.replace('\\\\', '/') == \"/my/root/workspace/project_name\"\r\n\r\n\r\n@patch('utils.files.os.path.abspath', return_value='/root_path/pilot/helpers')\r\n@patch('utils.files.os.makedirs', side_effect=mocked_create_directory)\r\ndef test_setup_workspace_without_existing_workspace(mock_makedirs, mock_abs_path):\r\n    args = {'workspace': None, 'name': 'project_name'}\r\n\r\n    result = setup_workspace(args)\r\n    assert result.replace('\\\\', '/') == \"/root_path/workspace/project_name\"\r\n","file":"/pilot/utils/test_files.py","language":"python","fileHash":"39acbeae9181e334873ea9cc84ad5db07afda494d3644de8c028fd5f2dc1c6b5","hash":"39acbeae9181e334873ea9cc84ad5db07afda494d3644de8c028fd5f2dc1c6b5","processedContent":"import os\r #undefined\nfrom unittest.mock import patch\r #undefined\nfrom utils.files import setup_workspace\r\n\"\"\"\nscip-python python temp indexer `pilot.utils.files`/__init__:: The code defines a series of functions for working with files and directories, including creating new directories, counting lines of code in a list of files, and saving user input to a database.\nscip-python python temp indexer `pilot.utils.files`/setup_workspace().: This code defines a function called `setup_workspace` that creates a new project workspace and returns the path to it. It also creates a 'tests' folder inside the workspace and saves a user-app relationship if one does not already exist.\n\"\"\"\n\r\n\r\ndef mocked_create_directory(path, exist_ok=True):\r\n    \"\"\"This code defines a function called `mocked_create_directory` that creates a directory at the specified path. The `exist_ok` parameter is set to `True`, which means that if the directory already exists, it will not raise an error.\"\"\"\n    pass\n\r\n\r\ndef mocked_abspath(file):\r\n    \"\"\"This code defines a function called `mocked_abspath` that returns a hardcoded path for a file. It is used to mock the `os.path.abspath` function in unit tests, allowing developers to test their code without relying on the actual file system.\"\"\"\n    pass\n\r\n\r\n@patch('utils.files.os.makedirs', side_effect=mocked_create_directory)\r\ndef test_setup_workspace_with_existing_workspace(mock_makedirs):\r\n    \"\"\"This code defines a function called `setup_workspace` that creates a new project workspace and returns the path to it. It also creates a 'tests' folder inside the workspace and saves a user-app relationship if one does not already exist.\"\"\"\n    pass\n\r\n\r\ndef test_setup_workspace_with_root_arg(monkeypatch):\r\n    \"\"\"This code defines a unit test for the `setup_workspace` function, which creates a new project workspace and returns its path. The test mocks the `os.path.abspath` and `os.makedirs` functions to simulate the creation of a directory and the existence of a user-app relationship.\"\"\"\n    pass\n\r\n\r\n@patch('utils.files.os.path.abspath', return_value='/root_path/pilot/helpers')\r\n@patch('utils.files.os.makedirs', side_effect=mocked_create_directory)\r\ndef test_setup_workspace_without_existing_workspace(mock_makedirs, mock_abs_path):\r\n    \"\"\"This code defines a function called `setup_workspace` that creates a new project workspace and returns the path to it. It also creates a 'tests' folder inside the workspace and saves a user-app relationship if one does not already exist.\"\"\"\n    pass\n","documentation":"The code defines a series of functions for working with files and directories, including creating new directories, counting lines of code in a list of files, and saving user input to a database."}},{"key":"scip-python python temp indexer `pilot.utils.test_function_calling`/TestFunctionCalling#","attributes":{"range":[5,0,61,41],"symbol":"scip-python python temp indexer `pilot.utils.test_function_calling`/TestFunctionCalling#","content":"class TestFunctionCalling:\r\n    def test_parse_agent_response_text(self):\r\n        # Given\r\n        response = {'text': 'Hello world!'}\r\n\r\n        # When\r\n        response = parse_agent_response(response, None)\r\n\r\n        # Then\r\n        assert response == 'Hello world!'\r\n\r\n    def test_parse_agent_response_json(self):\r\n        # Given\r\n        response = {'text': '{\"greeting\": \"Hello world!\"}'}\r\n        function_calls = {'definitions': [], 'functions': {}}\r\n\r\n        # When\r\n        response = parse_agent_response(response, function_calls)\r\n\r\n        # Then\r\n        assert response == {'greeting': 'Hello world!'}\r\n\r\n    def test_parse_agent_response_json_markdown(self):\r\n        # Given\r\n        response = {'text': '```json\\n{\"greeting\": \"Hello world!\"}\\n```'}\r\n        function_calls = {'definitions': [], 'functions': {}}\r\n\r\n        # When\r\n        response['text'] = clean_json_response(response['text'])\r\n        response = parse_agent_response(response, function_calls)\r\n\r\n        # Then\r\n        assert response == {'greeting': 'Hello world!'}\r\n\r\n    def test_parse_agent_response_markdown(self):\r\n        # Given\r\n        response = {'text': '```\\n{\"greeting\": \"Hello world!\"}\\n```'}\r\n        function_calls = {'definitions': [], 'functions': {}}\r\n\r\n        # When\r\n        response['text'] = clean_json_response(response['text'])\r\n        response = parse_agent_response(response, function_calls)\r\n\r\n        # Then\r\n        assert response == {'greeting': 'Hello world!'}\r\n\r\n    def test_parse_agent_response_multiple_args(self):\r\n        # Given\r\n        response = {'text': '{\"greeting\": \"Hello\", \"name\": \"John\"}'}\r\n        function_calls = {'definitions': [], 'functions': {}}\r\n\r\n        # When\r\n        response = parse_agent_response(response, function_calls)\r\n\r\n        # Then\r\n        assert response['greeting'] == 'Hello'\r\n        assert response['name'] == 'John'","file":"/pilot/utils/test_function_calling.py","language":"python","fileHash":"12eb4c72fd6a5eb81528f734021c43f3912f385a0a604e2f1e3c8bcb7ebd9dec","hash":"a9618e7fa8a40737cce43ad1899205513c6bbd84fa60997875cc573a344bbe8a","processedContent":"class TestFunctionCalling:\r\n    def test_parse_agent_response_text(self):\r\n        \"\"\"This code defines a function called \"parse_agent_response\" that takes two arguments: \"response\" and \"function_calls\". If \"function_calls\" is not None, the function returns the response as a JSON object. Otherwise, it returns the response as a string.\"\"\"\n        pass\n\r\n    def test_parse_agent_response_json(self):\r\n        \"\"\"This code defines a function called \"parse_agent_response\" that takes two arguments: \"response\" and \"function_calls\". If \"function_calls\" is not None, the function returns the response as a JSON object. Otherwise, it returns the response as a string.\"\"\"\n        pass\n\r\n    def test_parse_agent_response_json_markdown(self):\r\n        \"\"\"The code defines a function called \"parse_agent_response\" that takes a JSON response and cleans it up by removing unnecessary characters and converting booleans to lowercase strings. If the function is called with a non-None value for \"function_calls\", it returns the response as a JSON object, otherwise it returns the response as a string.\"\"\"\n        pass\n\r\n    def test_parse_agent_response_markdown(self):\r\n        \"\"\"The code defines a function called \"parse_agent_response\" that takes a JSON response and cleans it up by removing unnecessary characters and converting booleans to lowercase strings. If the function is called with a non-None value for \"function_calls\", it returns the response as a JSON object, otherwise it returns the response as a string.\"\"\"\n        pass\n\r\n    def test_parse_agent_response_multiple_args(self):\r\n        # Given\r\n        response = {'text': '{\"greeting\": \"Hello\", \"name\": \"John\"}'}\r\n        function_calls = {'definitions': [], 'functions': {}}\r\n\r\n        # When\r\n        response = parse_agent_response(response, function_calls)\r\n\r\n        # Then\r\n        assert response['greeting'] == 'Hello'\r\n        assert response['name'] == 'John'","documentation":"The code defines a function called \"parse_agent_response\" that takes two arguments: \"response\" and \"function_calls\". If \"function_calls\" is not None, the function returns the response as a JSON object. Otherwise, it returns the response as a string."}},{"key":"scip-python python temp indexer `pilot.utils.test_function_calling`/TestFunctionCalling#test_parse_agent_response_text().","attributes":{"range":[6,4,14,41],"symbol":"scip-python python temp indexer `pilot.utils.test_function_calling`/TestFunctionCalling#test_parse_agent_response_text().","content":"def test_parse_agent_response_text(self):\r\n        # Given\r\n        response = {'text': 'Hello world!'}\r\n\r\n        # When\r\n        response = parse_agent_response(response, None)\r\n\r\n        # Then\r\n        assert response == 'Hello world!'","file":"/pilot/utils/test_function_calling.py","language":"python","fileHash":"12eb4c72fd6a5eb81528f734021c43f3912f385a0a604e2f1e3c8bcb7ebd9dec","hash":"d300a6f05b1c003656795517efac3ad8f8eafae439f7bb26b8a1921b16cbc143","processedContent":"def test_parse_agent_response_text(self):\r\n        # Given\r\n        response = {'text': 'Hello world!'}\r\n\r\n        # When\r\n        response = parse_agent_response(response, None)\r #This code defines a function called \"parse_agent_response\" that takes two arguments: \"response\" and \"function_calls\". If \"function_calls\" is not None, the function returns the response as a JSON object. Otherwise, it returns the response as a string.\n\r\n        # Then\r\n        assert response == 'Hello world!'","documentation":"This code defines a function called \"parse_agent_response\" that takes two arguments: \"response\" and \"function_calls\". If \"function_calls\" is not None, the function returns the response as a JSON object. Otherwise, it returns the response as a string."}},{"key":"scip-python python temp indexer `pilot.utils.test_function_calling`/TestFunctionCalling#test_parse_agent_response_json().","attributes":{"range":[16,4,25,55],"symbol":"scip-python python temp indexer `pilot.utils.test_function_calling`/TestFunctionCalling#test_parse_agent_response_json().","content":"def test_parse_agent_response_json(self):\r\n        # Given\r\n        response = {'text': '{\"greeting\": \"Hello world!\"}'}\r\n        function_calls = {'definitions': [], 'functions': {}}\r\n\r\n        # When\r\n        response = parse_agent_response(response, function_calls)\r\n\r\n        # Then\r\n        assert response == {'greeting': 'Hello world!'}","file":"/pilot/utils/test_function_calling.py","language":"python","fileHash":"12eb4c72fd6a5eb81528f734021c43f3912f385a0a604e2f1e3c8bcb7ebd9dec","hash":"30f2ea9b6379fc5a53b6f70e50bd33b9689fc050a8b009477d6501e9ee69efb1","processedContent":"def test_parse_agent_response_json(self):\r\n        # Given\r\n        response = {'text': '{\"greeting\": \"Hello world!\"}'}\r\n        function_calls = {'definitions': [], 'functions': {}}\r\n\r\n        # When\r\n        response = parse_agent_response(response, function_calls)\r #This code defines a function called \"parse_agent_response\" that takes two arguments: \"response\" and \"function_calls\". If \"function_calls\" is not None, the function returns the response as a JSON object. Otherwise, it returns the response as a string.\n\r\n        # Then\r\n        assert response == {'greeting': 'Hello world!'}","documentation":"This code defines a function called \"parse_agent_response\" that takes two arguments: \"response\" and \"function_calls\". If \"function_calls\" is not None, the function returns the response as a JSON object. Otherwise, it returns the response as a string."}},{"key":"scip-python python temp indexer `pilot.utils.test_function_calling`/TestFunctionCalling#test_parse_agent_response_json_markdown().","attributes":{"range":[27,4,37,55],"symbol":"scip-python python temp indexer `pilot.utils.test_function_calling`/TestFunctionCalling#test_parse_agent_response_json_markdown().","content":"def test_parse_agent_response_json_markdown(self):\r\n        # Given\r\n        response = {'text': '```json\\n{\"greeting\": \"Hello world!\"}\\n```'}\r\n        function_calls = {'definitions': [], 'functions': {}}\r\n\r\n        # When\r\n        response['text'] = clean_json_response(response['text'])\r\n        response = parse_agent_response(response, function_calls)\r\n\r\n        # Then\r\n        assert response == {'greeting': 'Hello world!'}","file":"/pilot/utils/test_function_calling.py","language":"python","fileHash":"12eb4c72fd6a5eb81528f734021c43f3912f385a0a604e2f1e3c8bcb7ebd9dec","hash":"ab93415d1ff7bb36af85ea0a79173fce6529c735d1e4a25025648e4db64758bc","processedContent":"def test_parse_agent_response_json_markdown(self):\r\n        # Given\r\n        response = {'text': '```json\\n{\"greeting\": \"Hello world!\"}\\n```'}\r\n        function_calls = {'definitions': [], 'functions': {}}\r\n\r\n        # When\r\n        response['text'] = clean_json_response(response['text'])\r #This code takes a JSON response and cleans it up by removing unnecessary characters and converting booleans to lowercase strings.\n        response = parse_agent_response(response, function_calls)\r #This code defines a function called \"parse_agent_response\" that takes two arguments: \"response\" and \"function_calls\". If \"function_calls\" is not None, the function returns the response as a JSON object. Otherwise, it returns the response as a string.\n\r\n        # Then\r\n        assert response == {'greeting': 'Hello world!'}","documentation":"The code defines a function called \"parse_agent_response\" that takes a JSON response and cleans it up by removing unnecessary characters and converting booleans to lowercase strings. If the function is called with a non-None value for \"function_calls\", it returns the response as a JSON object, otherwise it returns the response as a string."}},{"key":"scip-python python temp indexer `pilot.utils.test_function_calling`/TestFunctionCalling#test_parse_agent_response_markdown().","attributes":{"range":[39,4,49,55],"symbol":"scip-python python temp indexer `pilot.utils.test_function_calling`/TestFunctionCalling#test_parse_agent_response_markdown().","content":"def test_parse_agent_response_markdown(self):\r\n        # Given\r\n        response = {'text': '```\\n{\"greeting\": \"Hello world!\"}\\n```'}\r\n        function_calls = {'definitions': [], 'functions': {}}\r\n\r\n        # When\r\n        response['text'] = clean_json_response(response['text'])\r\n        response = parse_agent_response(response, function_calls)\r\n\r\n        # Then\r\n        assert response == {'greeting': 'Hello world!'}","file":"/pilot/utils/test_function_calling.py","language":"python","fileHash":"12eb4c72fd6a5eb81528f734021c43f3912f385a0a604e2f1e3c8bcb7ebd9dec","hash":"a51e848f13eaf81be03397622340b8efd424a90994be8c27c9f3dfaa4871f5c2","processedContent":"def test_parse_agent_response_markdown(self):\r\n        # Given\r\n        response = {'text': '```\\n{\"greeting\": \"Hello world!\"}\\n```'}\r\n        function_calls = {'definitions': [], 'functions': {}}\r\n\r\n        # When\r\n        response['text'] = clean_json_response(response['text'])\r #This code takes a JSON response and cleans it up by removing unnecessary characters and converting booleans to lowercase strings.\n        response = parse_agent_response(response, function_calls)\r #This code defines a function called \"parse_agent_response\" that takes two arguments: \"response\" and \"function_calls\". If \"function_calls\" is not None, the function returns the response as a JSON object. Otherwise, it returns the response as a string.\n\r\n        # Then\r\n        assert response == {'greeting': 'Hello world!'}","documentation":"The code defines a function called \"parse_agent_response\" that takes a JSON response and cleans it up by removing unnecessary characters and converting booleans to lowercase strings. If the function is called with a non-None value for \"function_calls\", it returns the response as a JSON object, otherwise it returns the response as a string."}},{"key":"scip-python python temp indexer `pilot.utils.test_function_calling`/TestFunctionCalling#test_parse_agent_response_multiple_args().","attributes":{"range":[51,4,61,41],"symbol":"scip-python python temp indexer `pilot.utils.test_function_calling`/TestFunctionCalling#test_parse_agent_response_multiple_args().","content":"def test_parse_agent_response_multiple_args(self):\r\n        # Given\r\n        response = {'text': '{\"greeting\": \"Hello\", \"name\": \"John\"}'}\r\n        function_calls = {'definitions': [], 'functions': {}}\r\n\r\n        # When\r\n        response = parse_agent_response(response, function_calls)\r\n\r\n        # Then\r\n        assert response['greeting'] == 'Hello'\r\n        assert response['name'] == 'John'","file":"/pilot/utils/test_function_calling.py","language":"python","fileHash":"12eb4c72fd6a5eb81528f734021c43f3912f385a0a604e2f1e3c8bcb7ebd9dec","hash":"e3a42f0bbf4d3a8fe32d8dd2dcbea5f73258a001dfc3eaf8e264a332dc6904f2","processedContent":"def test_parse_agent_response_multiple_args(self):\r\n        # Given\r\n        response = {'text': '{\"greeting\": \"Hello\", \"name\": \"John\"}'}\r\n        function_calls = {'definitions': [], 'functions': {}}\r\n\r\n        # When\r\n        response = parse_agent_response(response, function_calls)\r #This code defines a function called \"parse_agent_response\" that takes two arguments: \"response\" and \"function_calls\". If \"function_calls\" is not None, the function returns the response as a JSON object. Otherwise, it returns the response as a string.\n\r\n        # Then\r\n        assert response['greeting'] == 'Hello'\r\n        assert response['name'] == 'John'","documentation":"This code defines a function called \"parse_agent_response\" that takes two arguments: \"response\" and \"function_calls\". If \"function_calls\" is not None, the function returns the response as a JSON object. Otherwise, it returns the response as a string."}},{"key":"scip-python python temp indexer `pilot.utils.test_function_calling`/test_json_prompter().","attributes":{"range":[64,0,78,30],"symbol":"scip-python python temp indexer `pilot.utils.test_function_calling`/test_json_prompter().","content":"def test_json_prompter():\r\n    # Given\r\n    prompter = JsonPrompter()\r\n\r\n    # When\r\n    prompt = prompter.prompt('Create a web-based chat app', ARCHITECTURE['definitions'])  # , 'process_technologies')\r\n\r\n    # Then\r\n    assert prompt == '''Help choose the appropriate function to call to answer the user's question.\r\nYou must respond with ONLY the JSON object, with NO additional text or explanation.\r\n\r\nAvailable functions:\r\n- process_technologies - Print the list of technologies that are created.\r\n\r\nCreate a web-based chat app'''","file":"/pilot/utils/test_function_calling.py","language":"python","fileHash":"12eb4c72fd6a5eb81528f734021c43f3912f385a0a604e2f1e3c8bcb7ebd9dec","hash":"1c57523777cc4d8ec02834166ae801ebffdf574785d7a03e0596fdc9a606f233","processedContent":"def test_json_prompter():\r\n    # Given\r\n    prompter = JsonPrompter()\r #The code defines a class called `JsonPrompter` that generates a prompt for a chatbot to answer a user's question. It takes a list of functions and a string representing the function to call as arguments, and returns a JSON schema with the parameters of the selected function.\n\r\n    # When\r\n    prompt = prompter.prompt('Create a web-based chat app', ARCHITECTURE['definitions'])  # , 'process_technologies')\r\n    \"\"\"\n    scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#prompt().: The code defines a function called `prompt` that generates a prompt for the user to choose a function to call. It takes two arguments: a list of functions and a string representing the function to call. If no function is specified, it returns a summary of the functions in the form of a bulleted list. If a function is specified, it returns the parameters of the function as a JSON schema.\n    scip-python python temp indexer `pilot.const.function_calls`/ARCHITECTURE.: undefined\n    \"\"\"\n\r\n    # Then\r\n    assert prompt == '''Help choose the appropriate function to call to answer the user's question.\r\nYou must respond with ONLY the JSON object, with NO additional text or explanation.\r\n\r\nAvailable functions:\r\n- process_technologies - Print the list of technologies that are created.\r\n\r\nCreate a web-based chat app'''","documentation":"The code defines a class called `JsonPrompter` that generates a prompt for a chatbot to answer a user's question. It takes a list of functions and a string representing the function to call as arguments, and returns a JSON schema with the parameters of the selected function."}},{"key":"scip-python python temp indexer `pilot.utils.test_function_calling`/test_llama_json_prompter().","attributes":{"range":[81,0,97,38],"symbol":"scip-python python temp indexer `pilot.utils.test_function_calling`/test_llama_json_prompter().","content":"def test_llama_json_prompter():\r\n    # Given\r\n    prompter = JsonPrompter(is_instruct=True)\r\n\r\n    # When\r\n    prompt = prompter.prompt('Create a web-based chat app', ARCHITECTURE['definitions'])  # , 'process_technologies')\r\n\r\n    # Then\r\n    assert prompt == '''[INST] <<SYS>>\r\nHelp choose the appropriate function to call to answer the user's question.\r\nYou must respond with ONLY the JSON object, with NO additional text or explanation.\r\n\r\nAvailable functions:\r\n- process_technologies - Print the list of technologies that are created.\r\n<</SYS>>\r\n\r\nCreate a web-based chat app [/INST]'''","file":"/pilot/utils/test_function_calling.py","language":"python","fileHash":"12eb4c72fd6a5eb81528f734021c43f3912f385a0a604e2f1e3c8bcb7ebd9dec","hash":"a755ac0d3fab15eba3bc0aa8bdfb0e35dc3d9e78d702e7015017dac93e94e729","processedContent":"def test_llama_json_prompter():\r\n    # Given\r\n    prompter = JsonPrompter(is_instruct=True)\r #The code defines a class called `JsonPrompter` that generates a prompt for a chatbot to answer a user's question. It takes a list of functions and a string representing the function to call as arguments, and returns a JSON schema with the parameters of the selected function.\n\r\n    # When\r\n    prompt = prompter.prompt('Create a web-based chat app', ARCHITECTURE['definitions'])  # , 'process_technologies')\r\n    \"\"\"\n    scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#prompt().: The code defines a function called `prompt` that generates a prompt for the user to choose a function to call. It takes two arguments: a list of functions and a string representing the function to call. If no function is specified, it returns a summary of the functions in the form of a bulleted list. If a function is specified, it returns the parameters of the function as a JSON schema.\n    scip-python python temp indexer `pilot.const.function_calls`/ARCHITECTURE.: undefined\n    \"\"\"\n\r\n    # Then\r\n    assert prompt == '''[INST] <<SYS>>\r\nHelp choose the appropriate function to call to answer the user's question.\r\nYou must respond with ONLY the JSON object, with NO additional text or explanation.\r\n\r\nAvailable functions:\r\n- process_technologies - Print the list of technologies that are created.\r\n<</SYS>>\r\n\r\nCreate a web-based chat app [/INST]'''","documentation":"The code defines a function called `prompt` that generates a prompt for the user to choose a function to call. It takes two arguments: a list of functions and a string representing the function to call. If no function is specified, it returns a summary of the functions in the form of a bulleted list. If a function is specified, it returns the parameters of the function as a JSON schema."}},{"key":"scip-python python temp indexer `pilot.utils.test_function_calling`/test_json_prompter_named().","attributes":{"range":[100,0,125,30],"symbol":"scip-python python temp indexer `pilot.utils.test_function_calling`/test_json_prompter_named().","content":"def test_json_prompter_named():\r\n    # Given\r\n    prompter = JsonPrompter()\r\n\r\n    # When\r\n    prompt = prompter.prompt('Create a web-based chat app', ARCHITECTURE['definitions'], 'process_technologies')\r\n\r\n    # Then\r\n    assert prompt == '''**IMPORTANT**\r\nYou must respond with ONLY the JSON object, with NO additional text or explanation.\r\n\r\nHere is the schema for the expected JSON object:\r\n```json\r\n{\r\n    \"technologies\": {\r\n        \"type\": \"array\",\r\n        \"description\": \"List of technologies.\",\r\n        \"items\": {\r\n            \"type\": \"string\",\r\n            \"description\": \"technology\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nCreate a web-based chat app'''","file":"/pilot/utils/test_function_calling.py","language":"python","fileHash":"12eb4c72fd6a5eb81528f734021c43f3912f385a0a604e2f1e3c8bcb7ebd9dec","hash":"e848c67f8dbae98e4ed63d5e54be194fa4be8a4a11fc0f0fbb08fda1d1a5e181","processedContent":"def test_json_prompter_named():\r\n    # Given\r\n    prompter = JsonPrompter()\r #The code defines a class called `JsonPrompter` that generates a prompt for a chatbot to answer a user's question. It takes a list of functions and a string representing the function to call as arguments, and returns a JSON schema with the parameters of the selected function.\n\r\n    # When\r\n    prompt = prompter.prompt('Create a web-based chat app', ARCHITECTURE['definitions'], 'process_technologies')\r\n    \"\"\"\n    scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#prompt().: The code defines a function called `prompt` that generates a prompt for the user to choose a function to call. It takes two arguments: a list of functions and a string representing the function to call. If no function is specified, it returns a summary of the functions in the form of a bulleted list. If a function is specified, it returns the parameters of the function as a JSON schema.\n    scip-python python temp indexer `pilot.const.function_calls`/ARCHITECTURE.: undefined\n    \"\"\"\n\r\n    # Then\r\n    assert prompt == '''**IMPORTANT**\r\nYou must respond with ONLY the JSON object, with NO additional text or explanation.\r\n\r\nHere is the schema for the expected JSON object:\r\n```json\r\n{\r\n    \"technologies\": {\r\n        \"type\": \"array\",\r\n        \"description\": \"List of technologies.\",\r\n        \"items\": {\r\n            \"type\": \"string\",\r\n            \"description\": \"technology\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nCreate a web-based chat app'''","documentation":"The code defines a function called `prompt` that generates a prompt for the user to choose a function to call. It takes two arguments: a list of functions and a string representing the function to call. If no function is specified, it returns a summary of the functions in the form of a bulleted list. If a function is specified, it returns the parameters of the function as a JSON schema."}},{"key":"scip-python python temp indexer `pilot.utils.test_function_calling`/test_llama_json_prompter_named().","attributes":{"range":[128,0,155,38],"symbol":"scip-python python temp indexer `pilot.utils.test_function_calling`/test_llama_json_prompter_named().","content":"def test_llama_json_prompter_named():\r\n    # Given\r\n    prompter = JsonPrompter(is_instruct=True)\r\n\r\n    # When\r\n    prompt = prompter.prompt('Create a web-based chat app', ARCHITECTURE['definitions'], 'process_technologies')\r\n\r\n    # Then\r\n    assert prompt == '''[INST] <<SYS>>\r\n**IMPORTANT**\r\nYou must respond with ONLY the JSON object, with NO additional text or explanation.\r\n\r\nHere is the schema for the expected JSON object:\r\n```json\r\n{\r\n    \"technologies\": {\r\n        \"type\": \"array\",\r\n        \"description\": \"List of technologies.\",\r\n        \"items\": {\r\n            \"type\": \"string\",\r\n            \"description\": \"technology\"\r\n        }\r\n    }\r\n}\r\n```\r\n<</SYS>>\r\n\r\nCreate a web-based chat app [/INST]'''","file":"/pilot/utils/test_function_calling.py","language":"python","fileHash":"12eb4c72fd6a5eb81528f734021c43f3912f385a0a604e2f1e3c8bcb7ebd9dec","hash":"8bde050130f8bd26cf3c3e4c73b941139c0077337d5f32f86988fea4b7691e71","processedContent":"def test_llama_json_prompter_named():\r\n    # Given\r\n    prompter = JsonPrompter(is_instruct=True)\r #The code defines a class called `JsonPrompter` that generates a prompt for a chatbot to answer a user's question. It takes a list of functions and a string representing the function to call as arguments, and returns a JSON schema with the parameters of the selected function.\n\r\n    # When\r\n    prompt = prompter.prompt('Create a web-based chat app', ARCHITECTURE['definitions'], 'process_technologies')\r\n    \"\"\"\n    scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#prompt().: The code defines a function called `prompt` that generates a prompt for the user to choose a function to call. It takes two arguments: a list of functions and a string representing the function to call. If no function is specified, it returns a summary of the functions in the form of a bulleted list. If a function is specified, it returns the parameters of the function as a JSON schema.\n    scip-python python temp indexer `pilot.const.function_calls`/ARCHITECTURE.: undefined\n    \"\"\"\n\r\n    # Then\r\n    assert prompt == '''[INST] <<SYS>>\r\n**IMPORTANT**\r\nYou must respond with ONLY the JSON object, with NO additional text or explanation.\r\n\r\nHere is the schema for the expected JSON object:\r\n```json\r\n{\r\n    \"technologies\": {\r\n        \"type\": \"array\",\r\n        \"description\": \"List of technologies.\",\r\n        \"items\": {\r\n            \"type\": \"string\",\r\n            \"description\": \"technology\"\r\n        }\r\n    }\r\n}\r\n```\r\n<</SYS>>\r\n\r\nCreate a web-based chat app [/INST]'''","documentation":"The code defines a function called `prompt` that generates a prompt for the user to choose a function to call. It takes two arguments: a list of functions and a string representing the function to call. If no function is specified, it returns a summary of the functions in the form of a bulleted list. If a function is specified, it returns the parameters of the function as a JSON schema."}},{"key":"scip-python python temp indexer `pilot.utils.test_function_calling`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.test_function_calling`/__init__:","range":[0,0,156,0],"content":"from const.function_calls import ARCHITECTURE\r\nfrom utils.llm_connection import clean_json_response\r\nfrom .function_calling import parse_agent_response, JsonPrompter\r\n\r\n\r\nclass TestFunctionCalling:\r\n    def test_parse_agent_response_text(self):\r\n        # Given\r\n        response = {'text': 'Hello world!'}\r\n\r\n        # When\r\n        response = parse_agent_response(response, None)\r\n\r\n        # Then\r\n        assert response == 'Hello world!'\r\n\r\n    def test_parse_agent_response_json(self):\r\n        # Given\r\n        response = {'text': '{\"greeting\": \"Hello world!\"}'}\r\n        function_calls = {'definitions': [], 'functions': {}}\r\n\r\n        # When\r\n        response = parse_agent_response(response, function_calls)\r\n\r\n        # Then\r\n        assert response == {'greeting': 'Hello world!'}\r\n\r\n    def test_parse_agent_response_json_markdown(self):\r\n        # Given\r\n        response = {'text': '```json\\n{\"greeting\": \"Hello world!\"}\\n```'}\r\n        function_calls = {'definitions': [], 'functions': {}}\r\n\r\n        # When\r\n        response['text'] = clean_json_response(response['text'])\r\n        response = parse_agent_response(response, function_calls)\r\n\r\n        # Then\r\n        assert response == {'greeting': 'Hello world!'}\r\n\r\n    def test_parse_agent_response_markdown(self):\r\n        # Given\r\n        response = {'text': '```\\n{\"greeting\": \"Hello world!\"}\\n```'}\r\n        function_calls = {'definitions': [], 'functions': {}}\r\n\r\n        # When\r\n        response['text'] = clean_json_response(response['text'])\r\n        response = parse_agent_response(response, function_calls)\r\n\r\n        # Then\r\n        assert response == {'greeting': 'Hello world!'}\r\n\r\n    def test_parse_agent_response_multiple_args(self):\r\n        # Given\r\n        response = {'text': '{\"greeting\": \"Hello\", \"name\": \"John\"}'}\r\n        function_calls = {'definitions': [], 'functions': {}}\r\n\r\n        # When\r\n        response = parse_agent_response(response, function_calls)\r\n\r\n        # Then\r\n        assert response['greeting'] == 'Hello'\r\n        assert response['name'] == 'John'\r\n\r\n\r\ndef test_json_prompter():\r\n    # Given\r\n    prompter = JsonPrompter()\r\n\r\n    # When\r\n    prompt = prompter.prompt('Create a web-based chat app', ARCHITECTURE['definitions'])  # , 'process_technologies')\r\n\r\n    # Then\r\n    assert prompt == '''Help choose the appropriate function to call to answer the user's question.\r\nYou must respond with ONLY the JSON object, with NO additional text or explanation.\r\n\r\nAvailable functions:\r\n- process_technologies - Print the list of technologies that are created.\r\n\r\nCreate a web-based chat app'''\r\n\r\n\r\ndef test_llama_json_prompter():\r\n    # Given\r\n    prompter = JsonPrompter(is_instruct=True)\r\n\r\n    # When\r\n    prompt = prompter.prompt('Create a web-based chat app', ARCHITECTURE['definitions'])  # , 'process_technologies')\r\n\r\n    # Then\r\n    assert prompt == '''[INST] <<SYS>>\r\nHelp choose the appropriate function to call to answer the user's question.\r\nYou must respond with ONLY the JSON object, with NO additional text or explanation.\r\n\r\nAvailable functions:\r\n- process_technologies - Print the list of technologies that are created.\r\n<</SYS>>\r\n\r\nCreate a web-based chat app [/INST]'''\r\n\r\n\r\ndef test_json_prompter_named():\r\n    # Given\r\n    prompter = JsonPrompter()\r\n\r\n    # When\r\n    prompt = prompter.prompt('Create a web-based chat app', ARCHITECTURE['definitions'], 'process_technologies')\r\n\r\n    # Then\r\n    assert prompt == '''**IMPORTANT**\r\nYou must respond with ONLY the JSON object, with NO additional text or explanation.\r\n\r\nHere is the schema for the expected JSON object:\r\n```json\r\n{\r\n    \"technologies\": {\r\n        \"type\": \"array\",\r\n        \"description\": \"List of technologies.\",\r\n        \"items\": {\r\n            \"type\": \"string\",\r\n            \"description\": \"technology\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nCreate a web-based chat app'''\r\n\r\n\r\ndef test_llama_json_prompter_named():\r\n    # Given\r\n    prompter = JsonPrompter(is_instruct=True)\r\n\r\n    # When\r\n    prompt = prompter.prompt('Create a web-based chat app', ARCHITECTURE['definitions'], 'process_technologies')\r\n\r\n    # Then\r\n    assert prompt == '''[INST] <<SYS>>\r\n**IMPORTANT**\r\nYou must respond with ONLY the JSON object, with NO additional text or explanation.\r\n\r\nHere is the schema for the expected JSON object:\r\n```json\r\n{\r\n    \"technologies\": {\r\n        \"type\": \"array\",\r\n        \"description\": \"List of technologies.\",\r\n        \"items\": {\r\n            \"type\": \"string\",\r\n            \"description\": \"technology\"\r\n        }\r\n    }\r\n}\r\n```\r\n<</SYS>>\r\n\r\nCreate a web-based chat app [/INST]'''\r\n","file":"/pilot/utils/test_function_calling.py","language":"python","fileHash":"12eb4c72fd6a5eb81528f734021c43f3912f385a0a604e2f1e3c8bcb7ebd9dec","hash":"12eb4c72fd6a5eb81528f734021c43f3912f385a0a604e2f1e3c8bcb7ebd9dec","processedContent":"from const.function_calls import ARCHITECTURE\r\n\"\"\"\nscip-python python temp indexer `pilot.const.function_calls`/__init__:: The code is a collection of functions and definitions that are used to implement various tasks in a development process. It includes functions for processing user stories, tasks, technologies, commands, and files, as well as definitions for breaking down development tasks into smaller steps and implementing code changes.\nscip-python python temp indexer `pilot.const.function_calls`/ARCHITECTURE.: undefined\n\"\"\"\nfrom utils.llm_connection import clean_json_response\r\n\"\"\"\nscip-python python temp indexer `pilot.utils.llm_connection`/__init__:: The code defines a Python script that uses the OpenAI GPT language model to generate responses to user prompts. It includes functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model.\nscip-python python temp indexer `pilot.utils.llm_connection`/clean_json_response().: This code takes a JSON response and cleans it up by removing unnecessary characters and converting booleans to lowercase strings.\n\"\"\"\nfrom .function_calling import parse_agent_response, JsonPrompter\r\n\"\"\"\nscip-python python temp indexer `pilot.utils.function_calling`/__init__:: The code defines a class called `JsonPrompter` that generates a prompt for a chatbot to answer a user's question. It takes a list of functions and a string representing the function to call as arguments, and returns a JSON schema with the parameters of the selected function.\nscip-python python temp indexer `pilot.utils.function_calling`/parse_agent_response().: This code defines a function called \"parse_agent_response\" that takes two arguments: \"response\" and \"function_calls\". If \"function_calls\" is not None, the function returns the response as a JSON object. Otherwise, it returns the response as a string.\nscip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#: The code defines a class called `JsonPrompter` that generates a prompt for a chatbot to answer a user's question. It takes a list of functions and a string representing the function to call as arguments, and returns a JSON schema with the parameters of the selected function.\n\"\"\"\n\r\n\r\nclass TestFunctionCalling:\r\n    \"\"\"The code defines a function called \"parse_agent_response\" that takes two arguments: \"response\" and \"function_calls\". If \"function_calls\" is not None, the function returns the response as a JSON object. Otherwise, it returns the response as a string.\"\"\"\n    pass\n\r\n\r\ndef test_json_prompter():\r\n    \"\"\"The code defines a class called `JsonPrompter` that generates a prompt for a chatbot to answer a user's question. It takes a list of functions and a string representing the function to call as arguments, and returns a JSON schema with the parameters of the selected function.\"\"\"\n    pass\n\r\n\r\ndef test_llama_json_prompter():\r\n    \"\"\"The code defines a function called `prompt` that generates a prompt for the user to choose a function to call. It takes two arguments: a list of functions and a string representing the function to call. If no function is specified, it returns a summary of the functions in the form of a bulleted list. If a function is specified, it returns the parameters of the function as a JSON schema.\"\"\"\n    pass\n\r\n\r\ndef test_json_prompter_named():\r\n    \"\"\"The code defines a function called `prompt` that generates a prompt for the user to choose a function to call. It takes two arguments: a list of functions and a string representing the function to call. If no function is specified, it returns a summary of the functions in the form of a bulleted list. If a function is specified, it returns the parameters of the function as a JSON schema.\"\"\"\n    pass\n\r\n\r\ndef test_llama_json_prompter_named():\r\n    \"\"\"The code defines a function called `prompt` that generates a prompt for the user to choose a function to call. It takes two arguments: a list of functions and a string representing the function to call. If no function is specified, it returns a summary of the functions in the form of a bulleted list. If a function is specified, it returns the parameters of the function as a JSON schema.\"\"\"\n    pass\n","documentation":"The code is a collection of functions and definitions that are used to implement various tasks in a development process, including processing user stories, tasks, technologies, commands, and files. It also includes definitions for breaking down development tasks into smaller steps and implementing code changes."}},{"key":"scip-python python temp indexer `pilot.utils.test_llm_connection`/test_clean_json_response_True_False().","attributes":{"range":[24,0,56,46],"symbol":"scip-python python temp indexer `pilot.utils.test_llm_connection`/test_clean_json_response_True_False().","content":"def test_clean_json_response_True_False():\r\n    # Given a JSON response with Title Case True and False\r\n    response = '''\r\n```json\r\n{\r\n    \"steps\": [\r\n        {\r\n            \"type\": \"command\",\r\n            \"command\": {\r\n                \"command\": \"git init\",\r\n                \"daemon\": False,\r\n                \"timeout\": 3000,\r\n                \"boolean\": False\r\n            },\r\n            \"another_True\": True,\r\n            \"check_if_fixed\": True\r\n        }\r\n    ]\r\n}\r\n```\r\n'''\r\n\r\n    # When\r\n    response = clean_json_response(response)\r\n\r\n    # Then the markdown is removed\r\n    assert response.startswith('{')\r\n    assert response.endswith('}')\r\n    # And the booleans are converted to lowercase\r\n    assert '\"daemon\":false,' in response\r\n    assert '\"boolean\":false' in response\r\n    assert '\"another_True\":true,' in response\r\n    assert '\"check_if_fixed\":true' in response","file":"/pilot/utils/test_llm_connection.py","language":"python","fileHash":"82c24499d009771d486d5ea5f39243dbdd55be4a542db5f7f2527df11965690d","hash":"53fca06c8577fa7d26fe80dc15992f96887ce29d99c4eeb7fb75121042d3a5a6","processedContent":"def test_clean_json_response_True_False():\r\n    # Given a JSON response with Title Case True and False\r\n    response = '''\r\n```json\r\n{\r\n    \"steps\": [\r\n        {\r\n            \"type\": \"command\",\r\n            \"command\": {\r\n                \"command\": \"git init\",\r\n                \"daemon\": False,\r\n                \"timeout\": 3000,\r\n                \"boolean\": False\r\n            },\r\n            \"another_True\": True,\r\n            \"check_if_fixed\": True\r\n        }\r\n    ]\r\n}\r\n```\r\n'''\r\n\r\n    # When\r\n    response = clean_json_response(response)\r #This code takes a JSON response and cleans it up by removing unnecessary characters and converting booleans to lowercase strings.\n\r\n    # Then the markdown is removed\r\n    assert response.startswith('{')\r\n    assert response.endswith('}')\r\n    # And the booleans are converted to lowercase\r\n    assert '\"daemon\":false,' in response\r\n    assert '\"boolean\":false' in response\r\n    assert '\"another_True\":true,' in response\r\n    assert '\"check_if_fixed\":true' in response","documentation":"This code takes a JSON response and cleans it up by removing unnecessary characters and converting booleans to lowercase strings."}},{"key":"scip-python python temp indexer `pilot.utils.test_llm_connection`/test_clean_json_response_boolean_in_python().","attributes":{"range":[59,0,75,88],"symbol":"scip-python python temp indexer `pilot.utils.test_llm_connection`/test_clean_json_response_boolean_in_python().","content":"def test_clean_json_response_boolean_in_python():\r\n    # Given a JSON response with Python booleans in a content string\r\n    response = '''\r\n{\r\n    \"type\": \"code_change\",\r\n    \"code_change\": {\r\n        \"name\": \"main.py\",\r\n        \"path\": \"./main.py\",\r\n        \"content\": \"json = {'is_true': True,\\\\n 'is_false': False}\"\r\n    }\r\n}'''\r\n\r\n    # When\r\n    response = clean_json_response(response)\r\n\r\n    # Then the content string is left untouched\r\n    assert '\"content\": \"json = {\\'is_true\\': True,\\\\n \\'is_false\\': False}\"' in response","file":"/pilot/utils/test_llm_connection.py","language":"python","fileHash":"82c24499d009771d486d5ea5f39243dbdd55be4a542db5f7f2527df11965690d","hash":"d7fef4d7aec108ec3af12a919e2798ce388d2d62249749832a0c0b6e33d7d024","processedContent":"def test_clean_json_response_boolean_in_python():\r\n    # Given a JSON response with Python booleans in a content string\r\n    response = '''\r\n{\r\n    \"type\": \"code_change\",\r\n    \"code_change\": {\r\n        \"name\": \"main.py\",\r\n        \"path\": \"./main.py\",\r\n        \"content\": \"json = {'is_true': True,\\\\n 'is_false': False}\"\r\n    }\r\n}'''\r\n\r\n    # When\r\n    response = clean_json_response(response)\r #This code takes a JSON response and cleans it up by removing unnecessary characters and converting booleans to lowercase strings.\n\r\n    # Then the content string is left untouched\r\n    assert '\"content\": \"json = {\\'is_true\\': True,\\\\n \\'is_false\\': False}\"' in response","documentation":"This code takes a JSON response and cleans it up by removing unnecessary characters and converting booleans to lowercase strings."}},{"key":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#","attributes":{"range":[78,0,284,47],"symbol":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#","content":"@patch('utils.llm_connection.styled_text', return_value='')\r\nclass TestRetryOnException:\r\n    def setup_method(self):\r\n        self.function: FunctionType = {\r\n            'name': 'test',\r\n            'description': 'test schema',\r\n            'parameters': {\r\n                'type': 'object',\r\n                'properties': {\r\n                    'foo': {'type': 'string'},\r\n                    'boolean': {'type': 'boolean'},\r\n                    'items': {'type': 'array'}\r\n                },\r\n                'required': ['foo']\r\n            }\r\n        }\r\n\r\n    def _create_wrapped_function(self, json_responses: list[str]):\r\n        args = {}, 'test', project\r\n\r\n        def retryable_assert_json_schema(data, _req_type, _project):\r\n            json_string = json_responses.pop(0)\r\n            if 'function_buffer' in data:\r\n                json_string = data['function_buffer'] + json_string\r\n            assert_json_schema(json_string, [self.function])\r\n            return json_string\r\n\r\n        return retry_on_exception(retryable_assert_json_schema), args\r\n\r\n    def test_incomplete_value_string(self, mock_styled_text):\r\n        # Given incomplete JSON\r\n        wrapper, args = self._create_wrapped_function(['{\"foo\": \"bar', '\"}'])\r\n\r\n        # When\r\n        response = wrapper(*args)\r\n\r\n        # Then should tell the LLM the JSON response is incomplete and to continue\r\n        # 'Unterminated string starting at'\r\n        assert response == '{\"foo\": \"bar\"}'\r\n        assert 'function_error' not in args[0]\r\n        # And the user should not need to be notified\r\n        assert mock_styled_text.call_count == 0\r\n\r\n    def test_incomplete_key(self, mock_styled_text):\r\n        # Given invalid JSON boolean\r\n        wrapper, args = self._create_wrapped_function([\r\n            '{\"foo',\r\n            '\": \"bar\"}'\r\n        ])\r\n\r\n        # When\r\n        response = wrapper(*args)\r\n\r\n        # Then should tell the LLM the JSON response is incomplete and to continue\r\n        # 'Unterminated string starting at: line 1 column 2 (char 1)'\r\n        assert response == '{\"foo\": \"bar\"}'\r\n        assert 'function_error' not in args[0]\r\n        # And the user should not need to be notified\r\n        assert mock_styled_text.call_count == 0\r\n\r\n    def test_incomplete_value_missing(self, mock_styled_text):\r\n        # Given invalid JSON boolean\r\n        wrapper, args = self._create_wrapped_function([\r\n            '{\"foo\":',\r\n            ' \"bar\"}'\r\n        ])\r\n\r\n        # When\r\n        response = wrapper(*args)\r\n\r\n        # Then should tell the LLM the JSON response is incomplete and to continue\r\n        # 'Expecting value: line 1 column 8 (char 7)'\r\n        assert response == '{\"foo\": \"bar\"}'\r\n        assert 'function_error' not in args[0]\r\n        # And the user should not need to be notified\r\n        assert mock_styled_text.call_count == 0\r\n\r\n    def test_invalid_boolean(self, mock_styled_text):\r\n        # Given invalid JSON boolean\r\n        wrapper, args = self._create_wrapped_function([\r\n            '{\"foo\": \"bar\", \"boolean\": True}',\r\n            '{\"foo\": \"bar\", \"boolean\": True}',\r\n            '{\"foo\": \"bar\", \"boolean\": True}',\r\n            '{\"foo\": \"bar\", \"boolean\": true}',\r\n        ])\r\n\r\n        # When\r\n        response = wrapper(*args)\r\n\r\n        # Then should tell the LLM there is an error in the JSON response\r\n        # 'Expecting value: line 1 column 13 (char 12)'\r\n        assert response == '{\"foo\": \"bar\", \"boolean\": true}'\r\n        assert args[0]['function_error'] == 'Invalid value: `True`'\r\n        assert 'function_buffer' not in args[0]\r\n        # And the user should not need to be notified\r\n        assert mock_styled_text.call_count == 1\r\n\r\n    def test_invalid_escape(self, mock_styled_text):\r\n        # Given invalid JSON boolean\r\n        wrapper, args = self._create_wrapped_function([\r\n            '{\"foo\": \"\\\\!\"}',\r\n            '{\"foo\": \"\\\\xBADU\"}',\r\n            '{\"foo\": \"\\\\xd800\"}',\r\n            '{\"foo\": \"bar\"}',\r\n        ])\r\n\r\n        # When\r\n        response = wrapper(*args)\r\n\r\n        # Then should tell the LLM there is an error in the JSON response\r\n        # 'Invalid \\\\escape: line 1 column 10 (char 9)'\r\n        assert response == '{\"foo\": \"bar\"}'\r\n        assert len(args[0]['function_error']) > 0\r\n        assert 'function_buffer' not in args[0]\r\n        # And the user should not need to be notified\r\n        assert mock_styled_text.call_count == 1\r\n\r\n    def test_incomplete_json_item(self, mock_styled_text):\r\n        # Given incomplete JSON\r\n        wrapper, args = self._create_wrapped_function([\r\n            '{\"foo\": \"bar\",',\r\n            ' \"boolean\"',\r\n            ': true}'])\r\n\r\n        # When\r\n        response = wrapper(*args)\r\n\r\n        # Then should tell the LLM the JSON response is incomplete and to continue\r\n        # 'Expecting property name enclosed in double quotes: line 1 column 15 (char 14)'\r\n        # \"Expecting ':' delimiter: line 1 column 25 (char 24)\"\r\n        assert response == '{\"foo\": \"bar\", \"boolean\": true}'\r\n        assert 'function_error' not in args[0]\r\n        # And the user should not need to be notified\r\n        assert mock_styled_text.call_count == 0\r\n\r\n    def test_incomplete_json_array(self, mock_styled_text):\r\n        # Given incomplete JSON\r\n        wrapper, args = self._create_wrapped_function([\r\n            '{\"foo\": \"bar\", \"items\": [1, 2, 3, \"4\"',\r\n            ', 5]}'])\r\n\r\n        # When\r\n        response = wrapper(*args)\r\n\r\n        # Then should tell the LLM the JSON response is incomplete and to continue\r\n        # \"Expecting ',' delimiter: line 1 column 24 (char 23)\"\r\n        assert response == '{\"foo\": \"bar\", \"items\": [1, 2, 3, \"4\", 5]}'\r\n        assert 'function_error' not in args[0]\r\n        # And the user should not need to be notified\r\n        assert mock_styled_text.call_count == 0\r\n\r\n    def test_incomplete_then_invalid_by_schema(self, mock_styled_text):\r\n        # Given incomplete JSON\r\n        wrapper, args = self._create_wrapped_function([\r\n            '{\"items\": [1, 2, 3, \"4\"',\r\n            ', 5]}',\r\n            # Please try again with a valid JSON object, referring to the previous JSON schema I provided above\r\n            '{\"foo\": \"bar\",',\r\n            ' \"items\": [1, 2, 3, \"4\"',\r\n            ', 5]}'\r\n        ])\r\n\r\n        # When\r\n        response = wrapper(*args)\r\n\r\n        # Then should tell the LLM the JSON response is incomplete and to continue\r\n        # \"Expecting ',' delimiter: line 1 column 24 (char 23)\"\r\n        # \"'foo' is a required property\"\r\n        assert response == '{\"foo\": \"bar\", \"items\": [1, 2, 3, \"4\", 5]}'\r\n        assert 'function_error' not in args[0]\r\n        # And the user should not need to be notified\r\n        assert mock_styled_text.call_count == 0\r\n\r\n    def test_invalid_boolean_max_retries(self, mock_styled_text):\r\n        # Given invalid JSON boolean\r\n        wrapper, args = self._create_wrapped_function([\r\n            '{\"boolean\": True, \"foo\": \"bar\"}',\r\n            '{\"boolean\": True,\\n \"foo\": \"bar\"}',\r\n            '{\"boolean\": True}',\r\n            '{\"boolean\": true, \"foo\": \"bar\"}',\r\n        ])\r\n\r\n        # When\r\n        response = wrapper(*args)\r\n\r\n        # Then should tell the LLM there is an error in the JSON response\r\n        assert response == '{\"boolean\": true, \"foo\": \"bar\"}'\r\n        assert args[0]['function_error'] == 'Invalid value: `True`'\r\n        assert mock_styled_text.call_count == 1\r\n\r\n    def test_extra_data(self, mock_styled_text):\r\n        # Given invalid JSON boolean\r\n        wrapper, args = self._create_wrapped_function([\r\n            '{\"boolean\": true, \"foo\": \"bar\"}\\n I hope that helps',\r\n            '{\"boolean\": true, \"foo\": \"bar\"}\\n I hope that helps',\r\n            '{\"boolean\": true, \"foo\": \"bar\"}\\n I hope that helps',\r\n            '{\"boolean\": true, \"foo\": \"bar\"}',\r\n        ])\r\n\r\n        # When\r\n        response = wrapper(*args)\r\n\r\n        # Then should tell the LLM there is an error in the JSON response\r\n        assert response == '{\"boolean\": true, \"foo\": \"bar\"}'\r\n        # assert len(args[0]['function_error']) > 0\r\n        assert args[0]['function_error'] == 'Extra data: line 2 column 2 (char 33)'\r\n        assert mock_styled_text.call_count == 1","file":"/pilot/utils/test_llm_connection.py","language":"python","fileHash":"82c24499d009771d486d5ea5f39243dbdd55be4a542db5f7f2527df11965690d","hash":"ec1b332baa42271e3c289a4ca6918627a42d82431e371581d32a5750479134d4","processedContent":"@patch('utils.llm_connection.styled_text', return_value='')\r\nclass TestRetryOnException:\r\n    def setup_method(self):\r\n        \"\"\"This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It is used to define the structure of a function in a typed dictionary.\"\"\"\n        pass\n\r\n    def _create_wrapped_function(self, json_responses: list[str]):\r\n        \"\"\"This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It then iterates over a list of functions and validates each one against a JSON schema using the `validate()` function from the `json` module.\"\"\"\n        pass\n\r\n    def test_incomplete_value_string(self, mock_styled_text):\r\n        \"\"\"The code defines a function that validates a JSON string against a schema and returns an error message if the string is incomplete.\"\"\"\n        pass\n\r\n    def test_incomplete_key(self, mock_styled_text):\r\n        \"\"\"The code defines a function that validates a list of functions against a JSON schema, and notifies the user if any errors are found.\"\"\"\n        pass\n\r\n    def test_incomplete_value_missing(self, mock_styled_text):\r\n        \"\"\"This code defines a function that validates a JSON schema against a list of functions, and notifies the user if the schema is incomplete.\"\"\"\n        pass\n\r\n    def test_invalid_boolean(self, mock_styled_text):\r\n        \"\"\"This code defines a function that validates a list of JSON objects against a schema, and returns an error message if any of the objects are invalid.\"\"\"\n        pass\n\r\n    def test_invalid_escape(self, mock_styled_text):\r\n        \"\"\"This code defines a function that validates a list of JSON functions against a schema, and returns an error message if any of the functions contain invalid escape characters.\"\"\"\n        pass\n\r\n    def test_incomplete_json_item(self, mock_styled_text):\r\n        \"\"\"This code defines a function that validates a list of functions against a JSON schema, and notifies the user if any errors are found.\"\"\"\n        pass\n\r\n    def test_incomplete_json_array(self, mock_styled_text):\r\n        \"\"\"This code defines a function that validates a JSON array against a schema, and if the array is incomplete, it tells the LLM to continue and notifies the user of the error.\"\"\"\n        pass\n\r\n    def test_incomplete_then_invalid_by_schema(self, mock_styled_text):\r\n        \"\"\"This code defines a function that takes a list of JSON strings and validates each one against a schema, returning the validated JSON string or an error message if the input is invalid.\"\"\"\n        pass\n\r\n    def test_invalid_boolean_max_retries(self, mock_styled_text):\r\n        \"\"\"This code defines a function that validates a JSON schema against a list of functions, and returns an error message if the schema is invalid.\"\"\"\n        pass\n\r\n    def test_extra_data(self, mock_styled_text):\r\n        # Given invalid JSON boolean\r\n        wrapper, args = self._create_wrapped_function([\r\n            '{\"boolean\": true, \"foo\": \"bar\"}\\n I hope that helps',\r\n            '{\"boolean\": true, \"foo\": \"bar\"}\\n I hope that helps',\r\n            '{\"boolean\": true, \"foo\": \"bar\"}\\n I hope that helps',\r\n            '{\"boolean\": true, \"foo\": \"bar\"}',\r\n        ])\r\n\r\n        # When\r\n        response = wrapper(*args)\r\n\r\n        # Then should tell the LLM there is an error in the JSON response\r\n        assert response == '{\"boolean\": true, \"foo\": \"bar\"}'\r\n        # assert len(args[0]['function_error']) > 0\r\n        assert args[0]['function_error'] == 'Extra data: line 2 column 2 (char 33)'\r\n        assert mock_styled_text.call_count == 1","documentation":"The code defines a set of unit tests for a function that validates JSON data against a schema. It checks for various errors such as incomplete or invalid data, and notifies the user of any issues found."}},{"key":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#setup_method().","attributes":{"range":[80,4,93,9],"symbol":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#setup_method().","content":"def setup_method(self):\r\n        self.function: FunctionType = {\r\n            'name': 'test',\r\n            'description': 'test schema',\r\n            'parameters': {\r\n                'type': 'object',\r\n                'properties': {\r\n                    'foo': {'type': 'string'},\r\n                    'boolean': {'type': 'boolean'},\r\n                    'items': {'type': 'array'}\r\n                },\r\n                'required': ['foo']\r\n            }\r\n        }","file":"/pilot/utils/test_llm_connection.py","language":"python","fileHash":"82c24499d009771d486d5ea5f39243dbdd55be4a542db5f7f2527df11965690d","hash":"d4b7238608b6d8fc2c63cfe88dd9b4f3cf69b0236f173489126d4d7da6e7af23","processedContent":"def setup_method(self):\r\n        self.function: FunctionType = {\r #This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It is used to define the structure of a function in a typed dictionary.\n            'name': 'test',\r\n            'description': 'test schema',\r\n            'parameters': {\r\n                'type': 'object',\r\n                'properties': {\r\n                    'foo': {'type': 'string'},\r\n                    'boolean': {'type': 'boolean'},\r\n                    'items': {'type': 'array'}\r\n                },\r\n                'required': ['foo']\r\n            }\r\n        }","documentation":"This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It is used to define the structure of a function in a typed dictionary."}},{"key":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#_create_wrapped_function().","attributes":{"range":[95,4,105,69],"symbol":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#_create_wrapped_function().","content":"def _create_wrapped_function(self, json_responses: list[str]):\r\n        args = {}, 'test', project\r\n\r\n        def retryable_assert_json_schema(data, _req_type, _project):\r\n            json_string = json_responses.pop(0)\r\n            if 'function_buffer' in data:\r\n                json_string = data['function_buffer'] + json_string\r\n            assert_json_schema(json_string, [self.function])\r\n            return json_string\r\n\r\n        return retry_on_exception(retryable_assert_json_schema), args","file":"/pilot/utils/test_llm_connection.py","language":"python","fileHash":"82c24499d009771d486d5ea5f39243dbdd55be4a542db5f7f2527df11965690d","hash":"e099b0a2a4bac0630006b94ac21f05751ba26ca0bd124f2a1d0af023087ed952","processedContent":"def _create_wrapped_function(self, json_responses: list[str]):\r\n        args = {}, 'test', project\r #undefined\n\r\n        def retryable_assert_json_schema(data, _req_type, _project):\r\n            \"\"\"This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It then iterates over a list of functions and validates each one against a JSON schema using the `validate()` function from the `json` module.\"\"\"\n            pass\n\r\n        return retry_on_exception(retryable_assert_json_schema), args","documentation":"This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It then iterates over a list of functions and validates each one against a JSON schema using the `validate()` function from the `json` module."}},{"key":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#retryable_assert_json_schema().","attributes":{"range":[98,8,103,30],"symbol":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#retryable_assert_json_schema().","content":"def retryable_assert_json_schema(data, _req_type, _project):\r\n            json_string = json_responses.pop(0)\r\n            if 'function_buffer' in data:\r\n                json_string = data['function_buffer'] + json_string\r\n            assert_json_schema(json_string, [self.function])\r\n            return json_string","file":"/pilot/utils/test_llm_connection.py","language":"python","fileHash":"82c24499d009771d486d5ea5f39243dbdd55be4a542db5f7f2527df11965690d","hash":"71bd9b2666d91558fe36350d69cc111182ebccad7f776da955f9464f4bd1a7ea","processedContent":"def retryable_assert_json_schema(data, _req_type, _project):\r\n            json_string = json_responses.pop(0)\r\n            if 'function_buffer' in data:\r\n                json_string = data['function_buffer'] + json_string\r\n            assert_json_schema(json_string, [self.function])\r #This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It is used to define the structure of a function in a typed dictionary. The code then iterates over a list of functions and validates each one against a JSON schema using the `validate()` function from the `json` module.\n            return json_string","documentation":"This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It then iterates over a list of functions and validates each one against a JSON schema using the `validate()` function from the `json` module."}},{"key":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#test_incomplete_value_string().","attributes":{"range":[107,4,119,47],"symbol":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#test_incomplete_value_string().","content":"def test_incomplete_value_string(self, mock_styled_text):\r\n        # Given incomplete JSON\r\n        wrapper, args = self._create_wrapped_function(['{\"foo\": \"bar', '\"}'])\r\n\r\n        # When\r\n        response = wrapper(*args)\r\n\r\n        # Then should tell the LLM the JSON response is incomplete and to continue\r\n        # 'Unterminated string starting at'\r\n        assert response == '{\"foo\": \"bar\"}'\r\n        assert 'function_error' not in args[0]\r\n        # And the user should not need to be notified\r\n        assert mock_styled_text.call_count == 0","file":"/pilot/utils/test_llm_connection.py","language":"python","fileHash":"82c24499d009771d486d5ea5f39243dbdd55be4a542db5f7f2527df11965690d","hash":"d7216214ad75b952192d7b0d9dcd1ce60aa0b116f41c1a0497063f8d1992a094","processedContent":"def test_incomplete_value_string(self, mock_styled_text):\r\n        # Given incomplete JSON\r\n        wrapper, args = self._create_wrapped_function(['{\"foo\": \"bar', '\"}'])\r #This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It then iterates over a list of functions and validates each one against a JSON schema using the `validate()` function from the `json` module.\n\r\n        # When\r\n        response = wrapper(*args)\r\n\r\n        # Then should tell the LLM the JSON response is incomplete and to continue\r\n        # 'Unterminated string starting at'\r\n        assert response == '{\"foo\": \"bar\"}'\r\n        assert 'function_error' not in args[0]\r\n        # And the user should not need to be notified\r\n        assert mock_styled_text.call_count == 0","documentation":"The code defines a function that validates a JSON string against a schema and returns an error message if the string is incomplete."}},{"key":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#test_incomplete_key().","attributes":{"range":[121,4,136,47],"symbol":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#test_incomplete_key().","content":"def test_incomplete_key(self, mock_styled_text):\r\n        # Given invalid JSON boolean\r\n        wrapper, args = self._create_wrapped_function([\r\n            '{\"foo',\r\n            '\": \"bar\"}'\r\n        ])\r\n\r\n        # When\r\n        response = wrapper(*args)\r\n\r\n        # Then should tell the LLM the JSON response is incomplete and to continue\r\n        # 'Unterminated string starting at: line 1 column 2 (char 1)'\r\n        assert response == '{\"foo\": \"bar\"}'\r\n        assert 'function_error' not in args[0]\r\n        # And the user should not need to be notified\r\n        assert mock_styled_text.call_count == 0","file":"/pilot/utils/test_llm_connection.py","language":"python","fileHash":"82c24499d009771d486d5ea5f39243dbdd55be4a542db5f7f2527df11965690d","hash":"782b4e2c7851b0cd88ecabab1ad9b4bc57cd358bb0bef04834f68b0afe80cd7b","processedContent":"def test_incomplete_key(self, mock_styled_text):\r\n        # Given invalid JSON boolean\r\n        wrapper, args = self._create_wrapped_function([\r #This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It then iterates over a list of functions and validates each one against a JSON schema using the `validate()` function from the `json` module.\n            '{\"foo',\r\n            '\": \"bar\"}'\r\n        ])\r\n\r\n        # When\r\n        response = wrapper(*args)\r\n\r\n        # Then should tell the LLM the JSON response is incomplete and to continue\r\n        # 'Unterminated string starting at: line 1 column 2 (char 1)'\r\n        assert response == '{\"foo\": \"bar\"}'\r\n        assert 'function_error' not in args[0]\r\n        # And the user should not need to be notified\r\n        assert mock_styled_text.call_count == 0","documentation":"The code defines a function that validates a list of functions against a JSON schema, and notifies the user if any errors are found."}},{"key":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#test_incomplete_value_missing().","attributes":{"range":[138,4,153,47],"symbol":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#test_incomplete_value_missing().","content":"def test_incomplete_value_missing(self, mock_styled_text):\r\n        # Given invalid JSON boolean\r\n        wrapper, args = self._create_wrapped_function([\r\n            '{\"foo\":',\r\n            ' \"bar\"}'\r\n        ])\r\n\r\n        # When\r\n        response = wrapper(*args)\r\n\r\n        # Then should tell the LLM the JSON response is incomplete and to continue\r\n        # 'Expecting value: line 1 column 8 (char 7)'\r\n        assert response == '{\"foo\": \"bar\"}'\r\n        assert 'function_error' not in args[0]\r\n        # And the user should not need to be notified\r\n        assert mock_styled_text.call_count == 0","file":"/pilot/utils/test_llm_connection.py","language":"python","fileHash":"82c24499d009771d486d5ea5f39243dbdd55be4a542db5f7f2527df11965690d","hash":"6e3819f54600c976b768d25534c4ef865236b6bea8b65315434ed1536ac4fce1","processedContent":"def test_incomplete_value_missing(self, mock_styled_text):\r\n        # Given invalid JSON boolean\r\n        wrapper, args = self._create_wrapped_function([\r #This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It then iterates over a list of functions and validates each one against a JSON schema using the `validate()` function from the `json` module.\n            '{\"foo\":',\r\n            ' \"bar\"}'\r\n        ])\r\n\r\n        # When\r\n        response = wrapper(*args)\r\n\r\n        # Then should tell the LLM the JSON response is incomplete and to continue\r\n        # 'Expecting value: line 1 column 8 (char 7)'\r\n        assert response == '{\"foo\": \"bar\"}'\r\n        assert 'function_error' not in args[0]\r\n        # And the user should not need to be notified\r\n        assert mock_styled_text.call_count == 0","documentation":"This code defines a function that validates a JSON schema against a list of functions, and notifies the user if the schema is incomplete."}},{"key":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#test_invalid_boolean().","attributes":{"range":[155,4,173,47],"symbol":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#test_invalid_boolean().","content":"def test_invalid_boolean(self, mock_styled_text):\r\n        # Given invalid JSON boolean\r\n        wrapper, args = self._create_wrapped_function([\r\n            '{\"foo\": \"bar\", \"boolean\": True}',\r\n            '{\"foo\": \"bar\", \"boolean\": True}',\r\n            '{\"foo\": \"bar\", \"boolean\": True}',\r\n            '{\"foo\": \"bar\", \"boolean\": true}',\r\n        ])\r\n\r\n        # When\r\n        response = wrapper(*args)\r\n\r\n        # Then should tell the LLM there is an error in the JSON response\r\n        # 'Expecting value: line 1 column 13 (char 12)'\r\n        assert response == '{\"foo\": \"bar\", \"boolean\": true}'\r\n        assert args[0]['function_error'] == 'Invalid value: `True`'\r\n        assert 'function_buffer' not in args[0]\r\n        # And the user should not need to be notified\r\n        assert mock_styled_text.call_count == 1","file":"/pilot/utils/test_llm_connection.py","language":"python","fileHash":"82c24499d009771d486d5ea5f39243dbdd55be4a542db5f7f2527df11965690d","hash":"07f90158672c861c4335a14f3a7ac0172bca4075cac8c5f58b50e7dec6517d86","processedContent":"def test_invalid_boolean(self, mock_styled_text):\r\n        # Given invalid JSON boolean\r\n        wrapper, args = self._create_wrapped_function([\r #This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It then iterates over a list of functions and validates each one against a JSON schema using the `validate()` function from the `json` module.\n            '{\"foo\": \"bar\", \"boolean\": True}',\r\n            '{\"foo\": \"bar\", \"boolean\": True}',\r\n            '{\"foo\": \"bar\", \"boolean\": True}',\r\n            '{\"foo\": \"bar\", \"boolean\": true}',\r\n        ])\r\n\r\n        # When\r\n        response = wrapper(*args)\r\n\r\n        # Then should tell the LLM there is an error in the JSON response\r\n        # 'Expecting value: line 1 column 13 (char 12)'\r\n        assert response == '{\"foo\": \"bar\", \"boolean\": true}'\r\n        assert args[0]['function_error'] == 'Invalid value: `True`'\r\n        assert 'function_buffer' not in args[0]\r\n        # And the user should not need to be notified\r\n        assert mock_styled_text.call_count == 1","documentation":"This code defines a function that validates a list of JSON objects against a schema, and returns an error message if any of the objects are invalid."}},{"key":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#test_invalid_escape().","attributes":{"range":[175,4,193,47],"symbol":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#test_invalid_escape().","content":"def test_invalid_escape(self, mock_styled_text):\r\n        # Given invalid JSON boolean\r\n        wrapper, args = self._create_wrapped_function([\r\n            '{\"foo\": \"\\\\!\"}',\r\n            '{\"foo\": \"\\\\xBADU\"}',\r\n            '{\"foo\": \"\\\\xd800\"}',\r\n            '{\"foo\": \"bar\"}',\r\n        ])\r\n\r\n        # When\r\n        response = wrapper(*args)\r\n\r\n        # Then should tell the LLM there is an error in the JSON response\r\n        # 'Invalid \\\\escape: line 1 column 10 (char 9)'\r\n        assert response == '{\"foo\": \"bar\"}'\r\n        assert len(args[0]['function_error']) > 0\r\n        assert 'function_buffer' not in args[0]\r\n        # And the user should not need to be notified\r\n        assert mock_styled_text.call_count == 1","file":"/pilot/utils/test_llm_connection.py","language":"python","fileHash":"82c24499d009771d486d5ea5f39243dbdd55be4a542db5f7f2527df11965690d","hash":"464b4d06a8b90bb67f6d63e456dc645c9180051537455a9bd2ab13a26aa41a9f","processedContent":"def test_invalid_escape(self, mock_styled_text):\r\n        # Given invalid JSON boolean\r\n        wrapper, args = self._create_wrapped_function([\r #This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It then iterates over a list of functions and validates each one against a JSON schema using the `validate()` function from the `json` module.\n            '{\"foo\": \"\\\\!\"}',\r\n            '{\"foo\": \"\\\\xBADU\"}',\r\n            '{\"foo\": \"\\\\xd800\"}',\r\n            '{\"foo\": \"bar\"}',\r\n        ])\r\n\r\n        # When\r\n        response = wrapper(*args)\r\n\r\n        # Then should tell the LLM there is an error in the JSON response\r\n        # 'Invalid \\\\escape: line 1 column 10 (char 9)'\r\n        assert response == '{\"foo\": \"bar\"}'\r\n        assert len(args[0]['function_error']) > 0\r\n        assert 'function_buffer' not in args[0]\r\n        # And the user should not need to be notified\r\n        assert mock_styled_text.call_count == 1","documentation":"This code defines a function that validates a list of JSON functions against a schema, and returns an error message if any of the functions contain invalid escape characters."}},{"key":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#test_incomplete_json_item().","attributes":{"range":[195,4,211,47],"symbol":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#test_incomplete_json_item().","content":"def test_incomplete_json_item(self, mock_styled_text):\r\n        # Given incomplete JSON\r\n        wrapper, args = self._create_wrapped_function([\r\n            '{\"foo\": \"bar\",',\r\n            ' \"boolean\"',\r\n            ': true}'])\r\n\r\n        # When\r\n        response = wrapper(*args)\r\n\r\n        # Then should tell the LLM the JSON response is incomplete and to continue\r\n        # 'Expecting property name enclosed in double quotes: line 1 column 15 (char 14)'\r\n        # \"Expecting ':' delimiter: line 1 column 25 (char 24)\"\r\n        assert response == '{\"foo\": \"bar\", \"boolean\": true}'\r\n        assert 'function_error' not in args[0]\r\n        # And the user should not need to be notified\r\n        assert mock_styled_text.call_count == 0","file":"/pilot/utils/test_llm_connection.py","language":"python","fileHash":"82c24499d009771d486d5ea5f39243dbdd55be4a542db5f7f2527df11965690d","hash":"222b2e74588754a6bafc0cb0d5593e1368d3e1d1f2d238a3763fd99fbe239ef4","processedContent":"def test_incomplete_json_item(self, mock_styled_text):\r\n        # Given incomplete JSON\r\n        wrapper, args = self._create_wrapped_function([\r #This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It then iterates over a list of functions and validates each one against a JSON schema using the `validate()` function from the `json` module.\n            '{\"foo\": \"bar\",',\r\n            ' \"boolean\"',\r\n            ': true}'])\r\n\r\n        # When\r\n        response = wrapper(*args)\r\n\r\n        # Then should tell the LLM the JSON response is incomplete and to continue\r\n        # 'Expecting property name enclosed in double quotes: line 1 column 15 (char 14)'\r\n        # \"Expecting ':' delimiter: line 1 column 25 (char 24)\"\r\n        assert response == '{\"foo\": \"bar\", \"boolean\": true}'\r\n        assert 'function_error' not in args[0]\r\n        # And the user should not need to be notified\r\n        assert mock_styled_text.call_count == 0","documentation":"This code defines a function that validates a list of functions against a JSON schema, and notifies the user if any errors are found."}},{"key":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#test_incomplete_json_array().","attributes":{"range":[213,4,227,47],"symbol":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#test_incomplete_json_array().","content":"def test_incomplete_json_array(self, mock_styled_text):\r\n        # Given incomplete JSON\r\n        wrapper, args = self._create_wrapped_function([\r\n            '{\"foo\": \"bar\", \"items\": [1, 2, 3, \"4\"',\r\n            ', 5]}'])\r\n\r\n        # When\r\n        response = wrapper(*args)\r\n\r\n        # Then should tell the LLM the JSON response is incomplete and to continue\r\n        # \"Expecting ',' delimiter: line 1 column 24 (char 23)\"\r\n        assert response == '{\"foo\": \"bar\", \"items\": [1, 2, 3, \"4\", 5]}'\r\n        assert 'function_error' not in args[0]\r\n        # And the user should not need to be notified\r\n        assert mock_styled_text.call_count == 0","file":"/pilot/utils/test_llm_connection.py","language":"python","fileHash":"82c24499d009771d486d5ea5f39243dbdd55be4a542db5f7f2527df11965690d","hash":"640f41a4350157ed775ffb4cdda6aa1a059d7db743b10dfdd999aa13d775d6d6","processedContent":"def test_incomplete_json_array(self, mock_styled_text):\r\n        # Given incomplete JSON\r\n        wrapper, args = self._create_wrapped_function([\r #This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It then iterates over a list of functions and validates each one against a JSON schema using the `validate()` function from the `json` module.\n            '{\"foo\": \"bar\", \"items\": [1, 2, 3, \"4\"',\r\n            ', 5]}'])\r\n\r\n        # When\r\n        response = wrapper(*args)\r\n\r\n        # Then should tell the LLM the JSON response is incomplete and to continue\r\n        # \"Expecting ',' delimiter: line 1 column 24 (char 23)\"\r\n        assert response == '{\"foo\": \"bar\", \"items\": [1, 2, 3, \"4\", 5]}'\r\n        assert 'function_error' not in args[0]\r\n        # And the user should not need to be notified\r\n        assert mock_styled_text.call_count == 0","documentation":"This code defines a function that validates a JSON array against a schema, and if the array is incomplete, it tells the LLM to continue and notifies the user of the error."}},{"key":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#test_incomplete_then_invalid_by_schema().","attributes":{"range":[229,4,249,47],"symbol":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#test_incomplete_then_invalid_by_schema().","content":"def test_incomplete_then_invalid_by_schema(self, mock_styled_text):\r\n        # Given incomplete JSON\r\n        wrapper, args = self._create_wrapped_function([\r\n            '{\"items\": [1, 2, 3, \"4\"',\r\n            ', 5]}',\r\n            # Please try again with a valid JSON object, referring to the previous JSON schema I provided above\r\n            '{\"foo\": \"bar\",',\r\n            ' \"items\": [1, 2, 3, \"4\"',\r\n            ', 5]}'\r\n        ])\r\n\r\n        # When\r\n        response = wrapper(*args)\r\n\r\n        # Then should tell the LLM the JSON response is incomplete and to continue\r\n        # \"Expecting ',' delimiter: line 1 column 24 (char 23)\"\r\n        # \"'foo' is a required property\"\r\n        assert response == '{\"foo\": \"bar\", \"items\": [1, 2, 3, \"4\", 5]}'\r\n        assert 'function_error' not in args[0]\r\n        # And the user should not need to be notified\r\n        assert mock_styled_text.call_count == 0","file":"/pilot/utils/test_llm_connection.py","language":"python","fileHash":"82c24499d009771d486d5ea5f39243dbdd55be4a542db5f7f2527df11965690d","hash":"728b1d3751ea0d10730b761f3bddc616bb10f9c00d910b0d8726bb0e5067d5c5","processedContent":"def test_incomplete_then_invalid_by_schema(self, mock_styled_text):\r\n        # Given incomplete JSON\r\n        wrapper, args = self._create_wrapped_function([\r #This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It then iterates over a list of functions and validates each one against a JSON schema using the `validate()` function from the `json` module.\n            '{\"items\": [1, 2, 3, \"4\"',\r\n            ', 5]}',\r\n            # Please try again with a valid JSON object, referring to the previous JSON schema I provided above\r\n            '{\"foo\": \"bar\",',\r\n            ' \"items\": [1, 2, 3, \"4\"',\r\n            ', 5]}'\r\n        ])\r\n\r\n        # When\r\n        response = wrapper(*args)\r\n\r\n        # Then should tell the LLM the JSON response is incomplete and to continue\r\n        # \"Expecting ',' delimiter: line 1 column 24 (char 23)\"\r\n        # \"'foo' is a required property\"\r\n        assert response == '{\"foo\": \"bar\", \"items\": [1, 2, 3, \"4\", 5]}'\r\n        assert 'function_error' not in args[0]\r\n        # And the user should not need to be notified\r\n        assert mock_styled_text.call_count == 0","documentation":"This code defines a function that takes a list of JSON strings and validates each one against a schema, returning the validated JSON string or an error message if the input is invalid."}},{"key":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#test_invalid_boolean_max_retries().","attributes":{"range":[251,4,266,47],"symbol":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#test_invalid_boolean_max_retries().","content":"def test_invalid_boolean_max_retries(self, mock_styled_text):\r\n        # Given invalid JSON boolean\r\n        wrapper, args = self._create_wrapped_function([\r\n            '{\"boolean\": True, \"foo\": \"bar\"}',\r\n            '{\"boolean\": True,\\n \"foo\": \"bar\"}',\r\n            '{\"boolean\": True}',\r\n            '{\"boolean\": true, \"foo\": \"bar\"}',\r\n        ])\r\n\r\n        # When\r\n        response = wrapper(*args)\r\n\r\n        # Then should tell the LLM there is an error in the JSON response\r\n        assert response == '{\"boolean\": true, \"foo\": \"bar\"}'\r\n        assert args[0]['function_error'] == 'Invalid value: `True`'\r\n        assert mock_styled_text.call_count == 1","file":"/pilot/utils/test_llm_connection.py","language":"python","fileHash":"82c24499d009771d486d5ea5f39243dbdd55be4a542db5f7f2527df11965690d","hash":"f6a0e991276176f7e4d4d04180cae4521efc69a11fd4a8bcd7b75af6acf8a008","processedContent":"def test_invalid_boolean_max_retries(self, mock_styled_text):\r\n        # Given invalid JSON boolean\r\n        wrapper, args = self._create_wrapped_function([\r #This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It then iterates over a list of functions and validates each one against a JSON schema using the `validate()` function from the `json` module.\n            '{\"boolean\": True, \"foo\": \"bar\"}',\r\n            '{\"boolean\": True,\\n \"foo\": \"bar\"}',\r\n            '{\"boolean\": True}',\r\n            '{\"boolean\": true, \"foo\": \"bar\"}',\r\n        ])\r\n\r\n        # When\r\n        response = wrapper(*args)\r\n\r\n        # Then should tell the LLM there is an error in the JSON response\r\n        assert response == '{\"boolean\": true, \"foo\": \"bar\"}'\r\n        assert args[0]['function_error'] == 'Invalid value: `True`'\r\n        assert mock_styled_text.call_count == 1","documentation":"This code defines a function that validates a JSON schema against a list of functions, and returns an error message if the schema is invalid."}},{"key":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#test_extra_data().","attributes":{"range":[268,4,284,47],"symbol":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#test_extra_data().","content":"def test_extra_data(self, mock_styled_text):\r\n        # Given invalid JSON boolean\r\n        wrapper, args = self._create_wrapped_function([\r\n            '{\"boolean\": true, \"foo\": \"bar\"}\\n I hope that helps',\r\n            '{\"boolean\": true, \"foo\": \"bar\"}\\n I hope that helps',\r\n            '{\"boolean\": true, \"foo\": \"bar\"}\\n I hope that helps',\r\n            '{\"boolean\": true, \"foo\": \"bar\"}',\r\n        ])\r\n\r\n        # When\r\n        response = wrapper(*args)\r\n\r\n        # Then should tell the LLM there is an error in the JSON response\r\n        assert response == '{\"boolean\": true, \"foo\": \"bar\"}'\r\n        # assert len(args[0]['function_error']) > 0\r\n        assert args[0]['function_error'] == 'Extra data: line 2 column 2 (char 33)'\r\n        assert mock_styled_text.call_count == 1","file":"/pilot/utils/test_llm_connection.py","language":"python","fileHash":"82c24499d009771d486d5ea5f39243dbdd55be4a542db5f7f2527df11965690d","hash":"7baa946ea83c037ba14a05808eedd41e693edb0029b1066f53bf49aa93419896","processedContent":"def test_extra_data(self, mock_styled_text):\r\n        # Given invalid JSON boolean\r\n        wrapper, args = self._create_wrapped_function([\r #This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It then iterates over a list of functions and validates each one against a JSON schema using the `validate()` function from the `json` module.\n            '{\"boolean\": true, \"foo\": \"bar\"}\\n I hope that helps',\r\n            '{\"boolean\": true, \"foo\": \"bar\"}\\n I hope that helps',\r\n            '{\"boolean\": true, \"foo\": \"bar\"}\\n I hope that helps',\r\n            '{\"boolean\": true, \"foo\": \"bar\"}',\r\n        ])\r\n\r\n        # When\r\n        response = wrapper(*args)\r\n\r\n        # Then should tell the LLM there is an error in the JSON response\r\n        assert response == '{\"boolean\": true, \"foo\": \"bar\"}'\r\n        # assert len(args[0]['function_error']) > 0\r\n        assert args[0]['function_error'] == 'Extra data: line 2 column 2 (char 33)'\r\n        assert mock_styled_text.call_count == 1","documentation":"This code defines a function that validates a list of JSON objects against a schema, and returns an error message if any extra data is found."}},{"key":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestSchemaValidation#","attributes":{"range":[287,0,359,46],"symbol":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestSchemaValidation#","content":"class TestSchemaValidation:\r\n    def setup_method(self):\r\n        self.function: FunctionType = {\r\n            'name': 'test',\r\n            'description': 'test schema',\r\n            'parameters': {\r\n                'type': 'object',\r\n                'properties': {'foo': {'type': 'string'}},\r\n                'required': ['foo']\r\n            }\r\n        }\r\n\r\n    def test_assert_json_response(self):\r\n        assert assert_json_response('{\"foo\": \"bar\"}')\r\n        assert assert_json_response('{\\n\"foo\": \"bar\"}')\r\n        assert assert_json_response('```\\n{\"foo\": \"bar\"}')\r\n        assert assert_json_response('```json\\n{\\n\"foo\": \"bar\"}')\r\n        with pytest.raises(ValueError, match='LLM did not respond with JSON'):\r\n            assert assert_json_response('# Foo\\n bar')\r\n\r\n    def test_assert_json_schema(self):\r\n        # When assert_json_schema is called with valid JSON\r\n        # Then no errors\r\n        assert(assert_json_schema('{\"foo\": \"bar\"}', [self.function]))\r\n\r\n    def test_assert_json_schema_incomplete(self):\r\n        # When assert_json_schema is called with incomplete JSON\r\n        # Then error is raised\r\n        with pytest.raises(JSONDecodeError):\r\n            assert_json_schema('{\"foo\": \"b', [self.function])\r\n\r\n    def test_assert_json_schema_invalid(self):\r\n        # When assert_json_schema is called with invalid JSON\r\n        # Then error is raised\r\n        with pytest.raises(ValidationError, match=\"1 is not of type 'string'\"):\r\n            assert_json_schema('{\"foo\": 1}', [self.function])\r\n\r\n    def test_assert_json_schema_required(self):\r\n        # When assert_json_schema is called with missing required property\r\n        # Then error is raised\r\n        self.function['parameters']['properties']['other'] = {'type': 'string'}\r\n        self.function['parameters']['required'] = ['foo', 'other']\r\n\r\n        with pytest.raises(ValidationError, match=\"'other' is a required property\"):\r\n            assert_json_schema('{\"foo\": \"bar\"}', [self.function])\r\n\r\n    def test_DEVELOPMENT_PLAN(self):\r\n        assert(assert_json_schema('''\r\n{\r\n  \"plan\": [\r\n    {\r\n      \"description\": \"Set up project structure including creation of necessary directories and files. Initialize Node.js and install necessary libraries such as express and socket.io.\",\r\n      \"programmatic_goal\": \"Project structure should be set up and Node.js initialized. Express and socket.io libraries should be installed and reflected in the package.json file.\",\r\n      \"user_review_goal\": \"Developer should be able to start an empty express server by running `npm start` command without any errors.\"\r\n    },\r\n    {\r\n      \"description\": \"Create a simple front-end HTML page with CSS and JavaScript that includes input for typing messages and area for displaying messages.\",\r\n      \"programmatic_goal\": \"There should be an HTML file containing an input box for typing messages and an area for displaying the messages. This HTML page should be served when user navigates to the root URL.\",\r\n      \"user_review_goal\": \"Navigating to the root URL (http://localhost:3000) should display the chat front-end with an input box and a message area.\"\r\n    },\r\n    {\r\n      \"description\": \"Set up socket.io on the back-end to handle websocket connections and broadcasting messages to the clients.\",\r\n      \"programmatic_goal\": \"Server should be able to handle websocket connections using socket.io and broadcast messages to all connected clients.\",\r\n      \"user_review_goal\": \"By using two different browsers or browser tabs, when one user sends a message from one tab, it should appear in the other user's browser tab in real-time.\"\r\n    },\r\n    {\r\n      \"description\": \"Integrate front-end with socket.io client to send messages from the input field to the server and display incoming messages in the message area.\",\r\n      \"programmatic_goal\": \"Front-end should be able to send messages to server and display incoming messages in the message area using socket.io client.\",\r\n      \"user_review_goal\": \"Typing a message in the chat input and sending it should then display the message in the chat area.\"\r\n    }\r\n  ]\r\n}\r\n'''.strip(), DEVELOPMENT_PLAN['definitions']))","file":"/pilot/utils/test_llm_connection.py","language":"python","fileHash":"82c24499d009771d486d5ea5f39243dbdd55be4a542db5f7f2527df11965690d","hash":"4bef0e3cd4980d78fc4517479988e8781e4ee294a47c92d086d5dfc782832dd7","processedContent":"class TestSchemaValidation:\r\n    def setup_method(self):\r\n        \"\"\"This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It is used to define the structure of a function in a typed dictionary.\"\"\"\n        pass\n\r\n    def test_assert_json_response(self):\r\n        \"\"\"This code checks if the response from an API call is in JSON format. If it's not, it logs an error and raises a ValueError.\"\"\"\n        pass\n\r\n    def test_assert_json_schema(self):\r\n        \"\"\"This code tests whether a JSON string is valid according to a given schema. It does this by calling the `assert_json_schema` function with the JSON string and the schema as arguments, and then asserts that no errors are raised.\"\"\"\n        pass\n\r\n    def test_assert_json_schema_incomplete(self):\r\n        \"\"\"This code tests the `assert_json_schema` function by passing an incomplete JSON string to it. The test expects an error to be raised when this happens.\"\"\"\n        pass\n\r\n    def test_assert_json_schema_invalid(self):\r\n        \"\"\"This code tests the `assert_json_schema` function by passing invalid JSON data and expecting a `ValidationError` to be raised.\"\"\"\n        pass\n\r\n    def test_assert_json_schema_required(self):\r\n        \"\"\"This code is a unit test that checks if an error is raised when a required property is missing in a JSON object.\"\"\"\n        pass\n\r\n    def test_DEVELOPMENT_PLAN(self):\r\n        assert(assert_json_schema('''\r\n{\r\n  \"plan\": [\r\n    {\r\n      \"description\": \"Set up project structure including creation of necessary directories and files. Initialize Node.js and install necessary libraries such as express and socket.io.\",\r\n      \"programmatic_goal\": \"Project structure should be set up and Node.js initialized. Express and socket.io libraries should be installed and reflected in the package.json file.\",\r\n      \"user_review_goal\": \"Developer should be able to start an empty express server by running `npm start` command without any errors.\"\r\n    },\r\n    {\r\n      \"description\": \"Create a simple front-end HTML page with CSS and JavaScript that includes input for typing messages and area for displaying messages.\",\r\n      \"programmatic_goal\": \"There should be an HTML file containing an input box for typing messages and an area for displaying the messages. This HTML page should be served when user navigates to the root URL.\",\r\n      \"user_review_goal\": \"Navigating to the root URL (http://localhost:3000) should display the chat front-end with an input box and a message area.\"\r\n    },\r\n    {\r\n      \"description\": \"Set up socket.io on the back-end to handle websocket connections and broadcasting messages to the clients.\",\r\n      \"programmatic_goal\": \"Server should be able to handle websocket connections using socket.io and broadcast messages to all connected clients.\",\r\n      \"user_review_goal\": \"By using two different browsers or browser tabs, when one user sends a message from one tab, it should appear in the other user's browser tab in real-time.\"\r\n    },\r\n    {\r\n      \"description\": \"Integrate front-end with socket.io client to send messages from the input field to the server and display incoming messages in the message area.\",\r\n      \"programmatic_goal\": \"Front-end should be able to send messages to server and display incoming messages in the message area using socket.io client.\",\r\n      \"user_review_goal\": \"Typing a message in the chat input and sending it should then display the message in the chat area.\"\r\n    }\r\n  ]\r\n}\r\n'''.strip(), DEVELOPMENT_PLAN['definitions']))","documentation":"This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It is used to define the structure of a function in a typed dictionary."}},{"key":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestSchemaValidation#setup_method().","attributes":{"range":[288,4,297,9],"symbol":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestSchemaValidation#setup_method().","content":"def setup_method(self):\r\n        self.function: FunctionType = {\r\n            'name': 'test',\r\n            'description': 'test schema',\r\n            'parameters': {\r\n                'type': 'object',\r\n                'properties': {'foo': {'type': 'string'}},\r\n                'required': ['foo']\r\n            }\r\n        }","file":"/pilot/utils/test_llm_connection.py","language":"python","fileHash":"82c24499d009771d486d5ea5f39243dbdd55be4a542db5f7f2527df11965690d","hash":"9fac3250f2859fd9ffc2b9944101e5ee481fe3b31e6ce6e6fdea6200fa722930","processedContent":"def setup_method(self):\r\n        self.function: FunctionType = {\r #This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It is used to define the structure of a function in a typed dictionary.\n            'name': 'test',\r\n            'description': 'test schema',\r\n            'parameters': {\r\n                'type': 'object',\r\n                'properties': {'foo': {'type': 'string'}},\r\n                'required': ['foo']\r\n            }\r\n        }","documentation":"This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It is used to define the structure of a function in a typed dictionary."}},{"key":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestSchemaValidation#test_assert_json_response().","attributes":{"range":[299,4,305,54],"symbol":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestSchemaValidation#test_assert_json_response().","content":"def test_assert_json_response(self):\r\n        assert assert_json_response('{\"foo\": \"bar\"}')\r\n        assert assert_json_response('{\\n\"foo\": \"bar\"}')\r\n        assert assert_json_response('```\\n{\"foo\": \"bar\"}')\r\n        assert assert_json_response('```json\\n{\\n\"foo\": \"bar\"}')\r\n        with pytest.raises(ValueError, match='LLM did not respond with JSON'):\r\n            assert assert_json_response('# Foo\\n bar')","file":"/pilot/utils/test_llm_connection.py","language":"python","fileHash":"82c24499d009771d486d5ea5f39243dbdd55be4a542db5f7f2527df11965690d","hash":"5e966ab8a2c0b47e28503ec1e24395d7bc2f307c7c24d78d00f30011a8be4fc0","processedContent":"def test_assert_json_response(self):\r\n        assert assert_json_response('{\"foo\": \"bar\"}')\r #This code checks if the response from an API call is in JSON format. If it's not, it logs an error and raises a ValueError.\n        assert assert_json_response('{\\n\"foo\": \"bar\"}')\r #This code checks if the response from an API call is in JSON format. If it's not, it logs an error and raises a ValueError.\n        assert assert_json_response('```\\n{\"foo\": \"bar\"}')\r #This code checks if the response from an API call is in JSON format. If it's not, it logs an error and raises a ValueError.\n        assert assert_json_response('```json\\n{\\n\"foo\": \"bar\"}')\r #This code checks if the response from an API call is in JSON format. If it's not, it logs an error and raises a ValueError.\n        with pytest.raises(ValueError, match='LLM did not respond with JSON'):\r\n            assert assert_json_response('# Foo\\n bar')","documentation":"This code checks if the response from an API call is in JSON format. If it's not, it logs an error and raises a ValueError."}},{"key":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestSchemaValidation#test_assert_json_schema().","attributes":{"range":[307,4,310,69],"symbol":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestSchemaValidation#test_assert_json_schema().","content":"def test_assert_json_schema(self):\r\n        # When assert_json_schema is called with valid JSON\r\n        # Then no errors\r\n        assert(assert_json_schema('{\"foo\": \"bar\"}', [self.function]))","file":"/pilot/utils/test_llm_connection.py","language":"python","fileHash":"82c24499d009771d486d5ea5f39243dbdd55be4a542db5f7f2527df11965690d","hash":"aea330ff8dea0e89208e1cd9a7501d978d57132c9babb580aa2d57700b81f379","processedContent":"def test_assert_json_schema(self):\r\n        # When assert_json_schema is called with valid JSON\r\n        # Then no errors\r\n        assert(assert_json_schema('{\"foo\": \"bar\"}', [self.function]))","documentation":"This code tests whether a JSON string is valid according to a given schema. It does this by calling the `assert_json_schema` function with the JSON string and the schema as arguments, and then asserts that no errors are raised."}},{"key":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestSchemaValidation#test_assert_json_schema_incomplete().","attributes":{"range":[312,4,316,61],"symbol":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestSchemaValidation#test_assert_json_schema_incomplete().","content":"def test_assert_json_schema_incomplete(self):\r\n        # When assert_json_schema is called with incomplete JSON\r\n        # Then error is raised\r\n        with pytest.raises(JSONDecodeError):\r\n            assert_json_schema('{\"foo\": \"b', [self.function])","file":"/pilot/utils/test_llm_connection.py","language":"python","fileHash":"82c24499d009771d486d5ea5f39243dbdd55be4a542db5f7f2527df11965690d","hash":"476cffdd744f58e7c8df28013f8b8557a0c5af6dab68ce771aeb9aba2bc07f00","processedContent":"def test_assert_json_schema_incomplete(self):\r\n        # When assert_json_schema is called with incomplete JSON\r\n        # Then error is raised\r\n        with pytest.raises(JSONDecodeError):\r #undefined\n            assert_json_schema('{\"foo\": \"b', [self.function])","documentation":"This code tests the `assert_json_schema` function by passing an incomplete JSON string to it. The test expects an error to be raised when this happens."}},{"key":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestSchemaValidation#test_assert_json_schema_invalid().","attributes":{"range":[318,4,322,61],"symbol":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestSchemaValidation#test_assert_json_schema_invalid().","content":"def test_assert_json_schema_invalid(self):\r\n        # When assert_json_schema is called with invalid JSON\r\n        # Then error is raised\r\n        with pytest.raises(ValidationError, match=\"1 is not of type 'string'\"):\r\n            assert_json_schema('{\"foo\": 1}', [self.function])","file":"/pilot/utils/test_llm_connection.py","language":"python","fileHash":"82c24499d009771d486d5ea5f39243dbdd55be4a542db5f7f2527df11965690d","hash":"6b6cfa4c57d8497cc7101a44e2059cd7a0b1f19b69b4be5d8f50f72bb1be7779","processedContent":"def test_assert_json_schema_invalid(self):\r\n        # When assert_json_schema is called with invalid JSON\r\n        # Then error is raised\r\n        with pytest.raises(ValidationError, match=\"1 is not of type 'string'\"):\r\n            assert_json_schema('{\"foo\": 1}', [self.function])","documentation":"This code tests the `assert_json_schema` function by passing invalid JSON data and expecting a `ValidationError` to be raised."}},{"key":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestSchemaValidation#test_assert_json_schema_required().","attributes":{"range":[324,4,331,65],"symbol":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestSchemaValidation#test_assert_json_schema_required().","content":"def test_assert_json_schema_required(self):\r\n        # When assert_json_schema is called with missing required property\r\n        # Then error is raised\r\n        self.function['parameters']['properties']['other'] = {'type': 'string'}\r\n        self.function['parameters']['required'] = ['foo', 'other']\r\n\r\n        with pytest.raises(ValidationError, match=\"'other' is a required property\"):\r\n            assert_json_schema('{\"foo\": \"bar\"}', [self.function])","file":"/pilot/utils/test_llm_connection.py","language":"python","fileHash":"82c24499d009771d486d5ea5f39243dbdd55be4a542db5f7f2527df11965690d","hash":"d3834f18eb9eda88a3668342adf3aaf142d24959c8410036afb159d6fcba6f6f","processedContent":"def test_assert_json_schema_required(self):\r\n        # When assert_json_schema is called with missing required property\r\n        # Then error is raised\r\n        self.function['parameters']['properties']['other'] = {'type': 'string'}\r\n        self.function['parameters']['required'] = ['foo', 'other']\r\n\r\n        with pytest.raises(ValidationError, match=\"'other' is a required property\"):\r\n            assert_json_schema('{\"foo\": \"bar\"}', [self.function])","documentation":"This code is a unit test that checks if an error is raised when a required property is missing in a JSON object."}},{"key":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestSchemaValidation#test_DEVELOPMENT_PLAN().","attributes":{"range":[333,4,359,46],"symbol":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestSchemaValidation#test_DEVELOPMENT_PLAN().","content":"def test_DEVELOPMENT_PLAN(self):\r\n        assert(assert_json_schema('''\r\n{\r\n  \"plan\": [\r\n    {\r\n      \"description\": \"Set up project structure including creation of necessary directories and files. Initialize Node.js and install necessary libraries such as express and socket.io.\",\r\n      \"programmatic_goal\": \"Project structure should be set up and Node.js initialized. Express and socket.io libraries should be installed and reflected in the package.json file.\",\r\n      \"user_review_goal\": \"Developer should be able to start an empty express server by running `npm start` command without any errors.\"\r\n    },\r\n    {\r\n      \"description\": \"Create a simple front-end HTML page with CSS and JavaScript that includes input for typing messages and area for displaying messages.\",\r\n      \"programmatic_goal\": \"There should be an HTML file containing an input box for typing messages and an area for displaying the messages. This HTML page should be served when user navigates to the root URL.\",\r\n      \"user_review_goal\": \"Navigating to the root URL (http://localhost:3000) should display the chat front-end with an input box and a message area.\"\r\n    },\r\n    {\r\n      \"description\": \"Set up socket.io on the back-end to handle websocket connections and broadcasting messages to the clients.\",\r\n      \"programmatic_goal\": \"Server should be able to handle websocket connections using socket.io and broadcast messages to all connected clients.\",\r\n      \"user_review_goal\": \"By using two different browsers or browser tabs, when one user sends a message from one tab, it should appear in the other user's browser tab in real-time.\"\r\n    },\r\n    {\r\n      \"description\": \"Integrate front-end with socket.io client to send messages from the input field to the server and display incoming messages in the message area.\",\r\n      \"programmatic_goal\": \"Front-end should be able to send messages to server and display incoming messages in the message area using socket.io client.\",\r\n      \"user_review_goal\": \"Typing a message in the chat input and sending it should then display the message in the chat area.\"\r\n    }\r\n  ]\r\n}\r\n'''.strip(), DEVELOPMENT_PLAN['definitions']))","file":"/pilot/utils/test_llm_connection.py","language":"python","fileHash":"82c24499d009771d486d5ea5f39243dbdd55be4a542db5f7f2527df11965690d","hash":"9cf18fa2e3f7e4bdb5ac23af99c73abaef640b1886e97796321feece1aa7243d","processedContent":"def test_DEVELOPMENT_PLAN(self):\r\n        assert(assert_json_schema('''\r #This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It is used to define the structure of a function in a typed dictionary. The code then iterates over a list of functions and validates each one against a JSON schema using the `validate()` function from the `json` module.\n{\r\n  \"plan\": [\r\n    {\r\n      \"description\": \"Set up project structure including creation of necessary directories and files. Initialize Node.js and install necessary libraries such as express and socket.io.\",\r\n      \"programmatic_goal\": \"Project structure should be set up and Node.js initialized. Express and socket.io libraries should be installed and reflected in the package.json file.\",\r\n      \"user_review_goal\": \"Developer should be able to start an empty express server by running `npm start` command without any errors.\"\r\n    },\r\n    {\r\n      \"description\": \"Create a simple front-end HTML page with CSS and JavaScript that includes input for typing messages and area for displaying messages.\",\r\n      \"programmatic_goal\": \"There should be an HTML file containing an input box for typing messages and an area for displaying the messages. This HTML page should be served when user navigates to the root URL.\",\r\n      \"user_review_goal\": \"Navigating to the root URL (http://localhost:3000) should display the chat front-end with an input box and a message area.\"\r\n    },\r\n    {\r\n      \"description\": \"Set up socket.io on the back-end to handle websocket connections and broadcasting messages to the clients.\",\r\n      \"programmatic_goal\": \"Server should be able to handle websocket connections using socket.io and broadcast messages to all connected clients.\",\r\n      \"user_review_goal\": \"By using two different browsers or browser tabs, when one user sends a message from one tab, it should appear in the other user's browser tab in real-time.\"\r\n    },\r\n    {\r\n      \"description\": \"Integrate front-end with socket.io client to send messages from the input field to the server and display incoming messages in the message area.\",\r\n      \"programmatic_goal\": \"Front-end should be able to send messages to server and display incoming messages in the message area using socket.io client.\",\r\n      \"user_review_goal\": \"Typing a message in the chat input and sending it should then display the message in the chat area.\"\r\n    }\r\n  ]\r\n}\r\n'''.strip(), DEVELOPMENT_PLAN['definitions']))","documentation":"This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It is used to define the structure of a function in a typed dictionary. The code then iterates over a list of functions and validates each one against a JSON schema using the `validate()` function from the `json` module."}},{"key":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#","attributes":{"range":[362,0,552,72],"symbol":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#","content":"class TestLlmConnection:\r\n    def setup_method(self):\r\n        builtins.print, ipc_client_instance = get_custom_print({})\r\n\r\n    @patch('utils.llm_connection.requests.post')\r\n    @patch('utils.llm_connection.time.sleep')\r\n    def test_rate_limit_error(self, mock_sleep, mock_post, monkeypatch):\r\n        monkeypatch.setenv('OPENAI_API_KEY', 'secret')\r\n\r\n        error_text = '''{\r\n                \"error\": {\r\n                    \"message\": \"Rate limit reached for 10KTPM-200RPM in organization org-OASFC7k1Ff5IzueeLArhQtnT on tokens per min. Limit: 10000 / min. Please try again in 6ms. Contact us through our help center at help.openai.com if you continue to have issues.\",\r\n                    \"type\": \"tokens\",\r\n                    \"param\": null,\r\n                    \"code\": \"rate_limit_exceeded\"\r\n                }\r\n            }'''\r\n        content = 'DONE'\r\n        success_text = '{\"id\": \"gen-123\", \"choices\": [{\"index\": 0, \"delta\": {\"role\": \"assistant\", \"content\": \"' + content + '\"}}]}'\r\n\r\n        error_response = Mock()\r\n        error_response.status_code = 429\r\n        error_response.text = error_text\r\n\r\n        mock_response = Mock()\r\n        mock_response.status_code = 200\r\n        mock_response.iter_lines.return_value = [success_text.encode('utf-8')]\r\n\r\n        mock_post.side_effect = [error_response, error_response, error_response, error_response, error_response,\r\n                                 error_response, error_response, error_response, error_response, error_response,\r\n                                 error_response, error_response, mock_response]\r\n        wrapper = retry_on_exception(stream_gpt_completion)\r\n        data = {\r\n            'model': 'gpt-4',\r\n            'messages': [{'role': 'user', 'content': 'testing'}]\r\n        }\r\n\r\n        # When\r\n        response = wrapper(data, 'test', project)\r\n\r\n        # Then\r\n        assert response == {'text': 'DONE'}\r\n        # assert mock_sleep.call_count == 9\r\n        assert mock_sleep.call_args_list == [call(0.006), call(0.012), call(0.024), call(0.048), call(0.096),\r\n                                             call(0.192), call(0.384), call(0.768), call(1.536), call(3.072),\r\n                                             call(6.144), call(6.144)]\r\n        # mock_sleep.call\r\n\r\n    @patch('utils.llm_connection.requests.post')\r\n    def test_stream_gpt_completion(self, mock_post, monkeypatch):\r\n        # Given streaming JSON response\r\n        monkeypatch.setenv('OPENAI_API_KEY', 'secret')\r\n        deltas = ['{', '\\\\n',\r\n                  '  \\\\\"foo\\\\\": \\\\\"bar\\\\\",', '\\\\n',\r\n                  '  \\\\\"prompt\\\\\": \\\\\"Hello\\\\\",', '\\\\n',\r\n                  '  \\\\\"choices\\\\\": []', '\\\\n',\r\n                  '}']\r\n        lines_to_yield = [\r\n            ('{\"id\": \"gen-123\", \"choices\": [{\"index\": 0, \"delta\": {\"role\": \"assistant\", \"content\": \"' + delta + '\"}}]}')\r\n            .encode('utf-8')\r\n            for delta in deltas\r\n        ]\r\n        lines_to_yield.insert(1, b': OPENROUTER PROCESSING')  # Simulate OpenRoute keep-alive pings\r\n        mock_response = Mock()\r\n        mock_response.status_code = 200\r\n        mock_response.iter_lines.return_value = lines_to_yield\r\n\r\n        mock_post.return_value = mock_response\r\n\r\n        with patch('utils.llm_connection.requests.post', return_value=mock_response):\r\n            # When\r\n            response = stream_gpt_completion({\r\n                'model': 'gpt-4',\r\n                'messages': [],\r\n            }, '', project)\r\n\r\n            # Then\r\n            assert response == {'text': '{\\n  \"foo\": \"bar\",\\n  \"prompt\": \"Hello\",\\n  \"choices\": []\\n}'}\r\n\r\n\r\n    @pytest.mark.uses_tokens\r\n    @pytest.mark.parametrize('endpoint, model', [\r\n        ('OPENAI', 'gpt-4'),                                 # role: system\r\n        ('OPENROUTER', 'openai/gpt-3.5-turbo'),              # role: user\r\n        ('OPENROUTER', 'meta-llama/codellama-34b-instruct'), # rule: user, is_llama\r\n        ('OPENROUTER', 'google/palm-2-chat-bison'),          # role: user/system\r\n        ('OPENROUTER', 'google/palm-2-codechat-bison'),\r\n        ('OPENROUTER', 'anthropic/claude-2'),              # role: user, is_llama\r\n    ])\r\n    def test_chat_completion_Architect(self, endpoint, model, monkeypatch):\r\n        # Given\r\n        monkeypatch.setenv('ENDPOINT', endpoint)\r\n        monkeypatch.setenv('MODEL_NAME', model)\r\n\r\n        agent = Architect(project)\r\n        convo = AgentConvo(agent)\r\n        convo.construct_and_add_message_from_prompt('architecture/technologies.prompt',\r\n                                                        {\r\n                                                            'name': 'Test App',\r\n                                                            'app_summary': '''\r\nThe project involves the development of a web-based chat application named \"Test_App\". \r\nIn this application, users can send direct messages to each other. \r\nHowever, it does not include a group chat functionality. \r\nMultimedia messaging, such as the exchange of images and videos, is not a requirement for this application. \r\nNo clear instructions were given for the inclusion of user profile customization features like profile \r\npicture and status updates, as well as a feature for chat history. The project must be developed strictly \r\nas a monolithic application, regardless of any other suggested methods. \r\nThe project's specifications are subject to the project manager's discretion, implying a need for \r\nsolution-oriented decision-making in areas where precise instructions were not provided.''',\r\n                                                            'app_type': 'web app',\r\n                                                            'user_stories': [\r\n                                                                'User will be able to send direct messages to another user.',\r\n                                                                'User will receive direct messages from other users.',\r\n                                                                'User will view the sent and received messages in a conversation view.',\r\n                                                                'User will select a user to send a direct message.',\r\n                                                                'User will be able to search for users to send direct messages to.',\r\n                                                                'Users can view the online status of other users.',\r\n                                                                'User will be able to log into the application using their credentials.',\r\n                                                                'User will be able to logout from the Test_App.',\r\n                                                                'User will be able to register a new account on Test_App.',\r\n                                                            ]\r\n                                                        })\r\n        function_calls = ARCHITECTURE\r\n\r\n        # When\r\n        response = create_gpt_chat_completion(convo.messages, '', project, function_calls=function_calls)\r\n\r\n        # Then\r\n        assert convo.messages[0]['content'].startswith('You are an experienced software architect')\r\n        assert convo.messages[1]['content'].startswith('You are working in a software development agency')\r\n\r\n        assert response is not None\r\n        response = parse_agent_response(response, function_calls)\r\n        assert 'Node.js' in response['technologies']\r\n\r\n    @pytest.mark.uses_tokens\r\n    @pytest.mark.parametrize('endpoint, model', [\r\n        ('OPENAI', 'gpt-4'),\r\n        ('OPENROUTER', 'openai/gpt-3.5-turbo'),\r\n        ('OPENROUTER', 'meta-llama/codellama-34b-instruct'),\r\n        ('OPENROUTER', 'phind/phind-codellama-34b-v2'),\r\n        ('OPENROUTER', 'google/palm-2-chat-bison'),\r\n        ('OPENROUTER', 'google/palm-2-codechat-bison'),\r\n        ('OPENROUTER', 'anthropic/claude-2'),\r\n        ('OPENROUTER', 'mistralai/mistral-7b-instruct')\r\n    ])\r\n    def test_chat_completion_TechLead(self, endpoint, model, monkeypatch):\r\n        # Given\r\n        monkeypatch.setenv('ENDPOINT', endpoint)\r\n        monkeypatch.setenv('MODEL_NAME', model)\r\n\r\n        agent = TechLead(project)\r\n        convo = AgentConvo(agent)\r\n        convo.construct_and_add_message_from_prompt('development/plan.prompt',\r\n                                                    {\r\n                                                        'name': 'Test App',\r\n                                                        'app_summary': '''\r\n    The project entails creating a web-based chat application, tentatively named \"chat_app.\" \r\nThis application does not require user authentication or chat history storage. \r\nIt solely supports one-on-one messaging, excluding group chats or multimedia sharing like photos, videos, or files. \r\nAdditionally, there are no specific requirements for real-time functionality, like live typing indicators or read receipts. \r\nThe development of this application will strictly follow a monolithic structure, avoiding the use of microservices, as per the client's demand. \r\nThe development process will include the creation of user stories and tasks, based on detailed discussions with the client.''',\r\n                                                        'app_type': 'web app',\r\n                                                        'user_stories': [\r\n            'User Story 1: As a user, I can access the web-based \"chat_app\" directly without needing to authenticate or log in. Do you want to add anything else? If not, just press ENTER.',\r\n            'User Story 2: As a user, I can start one-on-one conversations with another user on the \"chat_app\". Do you want to add anything else? If not, just press ENTER.',\r\n            'User Story 3: As a user, I can send and receive messages in real-time within my one-on-one conversation on the \"chat_app\". Do you want to add anything else? If not, just press ENTER.',\r\n            'User Story 4: As a user, I do not need to worry about deleting or storing my chats because the \"chat_app\" does not store chat histories. Do you want to add anything else? If not, just press ENTER.',\r\n            'User Story 5: As a user, I will only be able to send text messages, as the \"chat_app\" does not support any kind of multimedia sharing like photos, videos, or files. Do you want to add anything else? If not, just press ENTER.',\r\n            'User Story 6: As a user, I will not see any live typing indicators or read receipts since the \"chat_app\" does not provide any additional real-time functionality beyond message exchange. Do you want to add anything else? If not, just press ENTER.',\r\n                                                        ]\r\n                                                    })\r\n        function_calls = DEVELOPMENT_PLAN\r\n\r\n        # Retry on bad LLM responses\r\n        # mock_questionary = MockQuestionary(['', '', 'no'])\r\n\r\n        # with patch('utils.llm_connection.questionary', mock_questionary):\r\n        # When\r\n        response = create_gpt_chat_completion(convo.messages, '', project, function_calls=function_calls)\r\n\r\n        # Then\r\n        assert convo.messages[0]['content'].startswith('You are a tech lead in a software development agency')\r\n        assert convo.messages[1]['content'].startswith('You are working in a software development agency and a project manager and software architect approach you')\r\n\r\n        assert response is not None\r\n        response = parse_agent_response(response, function_calls)\r\n        assert_non_empty_string(response['plan'][0]['description'])\r\n        assert_non_empty_string(response['plan'][0]['programmatic_goal'])\r\n        assert_non_empty_string(response['plan'][0]['user_review_goal'])","file":"/pilot/utils/test_llm_connection.py","language":"python","fileHash":"82c24499d009771d486d5ea5f39243dbdd55be4a542db5f7f2527df11965690d","hash":"caf82fce48092cbdab5cf7d5f6cc6c1843b1f54b1fda19a7c346ac1b6df2abc5","processedContent":"class TestLlmConnection:\r\n    def setup_method(self):\r\n        \"\"\"This code sets up a custom print function for the test class, which allows for easier debugging and testing of the code.\"\"\"\n        pass\n\r\n    @patch('utils.llm_connection.requests.post')\r\n    @patch('utils.llm_connection.time.sleep')\r\n    def test_rate_limit_error(self, mock_sleep, mock_post, monkeypatch):\r\n        \"\"\"This code defines a decorator function called `retry_on_exception` that retries a function if it encounters an exception, and provides a way for users to retry the request if they want to.\"\"\"\n        pass\n        # mock_sleep.call\r\n\r\n    @patch('utils.llm_connection.requests.post')\r\n    def test_stream_gpt_completion(self, mock_post, monkeypatch):\r\n        \"\"\"This code defines a function called `stream_gpt_completion` that retrieves and renders a prompt template based on the provided name. It uses Jinja2 to render the templates with no variables, and stores the rendered content in a dictionary called `prompts_components`.\"\"\"\n        pass\n\r\n\r\n    @pytest.mark.uses_tokens\r\n    @pytest.mark.parametrize('endpoint, model', [\r\n        ('OPENAI', 'gpt-4'),                                 # role: system\r\n        ('OPENROUTER', 'openai/gpt-3.5-turbo'),              # role: user\r\n        ('OPENROUTER', 'meta-llama/codellama-34b-instruct'), # rule: user, is_llama\r\n        ('OPENROUTER', 'google/palm-2-chat-bison'),          # role: user/system\r\n        ('OPENROUTER', 'google/palm-2-codechat-bison'),\r\n        ('OPENROUTER', 'anthropic/claude-2'),              # role: user, is_llama\r\n    ])\r\n    def test_chat_completion_Architect(self, endpoint, model, monkeypatch):\r\n        \"\"\"The code defines a class called \"Architect\" that represents a person working on a specific project, and includes functions for sending and receiving messages. It also defines a function called \"create_gpt_chat_completion\" that uses the OpenAI GPT language model to generate a response based on input messages.\"\"\"\n        pass\n\r\n    @pytest.mark.uses_tokens\r\n    @pytest.mark.parametrize('endpoint, model', [\r\n        ('OPENAI', 'gpt-4'),\r\n        ('OPENROUTER', 'openai/gpt-3.5-turbo'),\r\n        ('OPENROUTER', 'meta-llama/codellama-34b-instruct'),\r\n        ('OPENROUTER', 'phind/phind-codellama-34b-v2'),\r\n        ('OPENROUTER', 'google/palm-2-chat-bison'),\r\n        ('OPENROUTER', 'google/palm-2-codechat-bison'),\r\n        ('OPENROUTER', 'anthropic/claude-2'),\r\n        ('OPENROUTER', 'mistralai/mistral-7b-instruct')\r\n    ])\r\n    def test_chat_completion_TechLead(self, endpoint, model, monkeypatch):\r\n        # Given\r\n        monkeypatch.setenv('ENDPOINT', endpoint)\r\n        monkeypatch.setenv('MODEL_NAME', model)\r\n\r\n        agent = TechLead(project)\r\n        convo = AgentConvo(agent)\r\n        convo.construct_and_add_message_from_prompt('development/plan.prompt',\r\n                                                    {\r\n                                                        'name': 'Test App',\r\n                                                        'app_summary': '''\r\n    The project entails creating a web-based chat application, tentatively named \"chat_app.\" \r\nThis application does not require user authentication or chat history storage. \r\nIt solely supports one-on-one messaging, excluding group chats or multimedia sharing like photos, videos, or files. \r\nAdditionally, there are no specific requirements for real-time functionality, like live typing indicators or read receipts. \r\nThe development of this application will strictly follow a monolithic structure, avoiding the use of microservices, as per the client's demand. \r\nThe development process will include the creation of user stories and tasks, based on detailed discussions with the client.''',\r\n                                                        'app_type': 'web app',\r\n                                                        'user_stories': [\r\n            'User Story 1: As a user, I can access the web-based \"chat_app\" directly without needing to authenticate or log in. Do you want to add anything else? If not, just press ENTER.',\r\n            'User Story 2: As a user, I can start one-on-one conversations with another user on the \"chat_app\". Do you want to add anything else? If not, just press ENTER.',\r\n            'User Story 3: As a user, I can send and receive messages in real-time within my one-on-one conversation on the \"chat_app\". Do you want to add anything else? If not, just press ENTER.',\r\n            'User Story 4: As a user, I do not need to worry about deleting or storing my chats because the \"chat_app\" does not store chat histories. Do you want to add anything else? If not, just press ENTER.',\r\n            'User Story 5: As a user, I will only be able to send text messages, as the \"chat_app\" does not support any kind of multimedia sharing like photos, videos, or files. Do you want to add anything else? If not, just press ENTER.',\r\n            'User Story 6: As a user, I will not see any live typing indicators or read receipts since the \"chat_app\" does not provide any additional real-time functionality beyond message exchange. Do you want to add anything else? If not, just press ENTER.',\r\n                                                        ]\r\n                                                    })\r\n        function_calls = DEVELOPMENT_PLAN\r\n\r\n        # Retry on bad LLM responses\r\n        # mock_questionary = MockQuestionary(['', '', 'no'])\r\n\r\n        # with patch('utils.llm_connection.questionary', mock_questionary):\r\n        # When\r\n        response = create_gpt_chat_completion(convo.messages, '', project, function_calls=function_calls)\r\n\r\n        # Then\r\n        assert convo.messages[0]['content'].startswith('You are a tech lead in a software development agency')\r\n        assert convo.messages[1]['content'].startswith('You are working in a software development agency and a project manager and software architect approach you')\r\n\r\n        assert response is not None\r\n        response = parse_agent_response(response, function_calls)\r\n        assert_non_empty_string(response['plan'][0]['description'])\r\n        assert_non_empty_string(response['plan'][0]['programmatic_goal'])\r\n        assert_non_empty_string(response['plan'][0]['user_review_goal'])","documentation":"The code defines a class called \"Architect\" that represents a person working on a specific project, and includes functions for sending and receiving messages. It also defines a function called \"create_gpt_chat_completion\" that uses the OpenAI GPT language model to generate a response based on input messages."}},{"key":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#setup_method().","attributes":{"range":[363,4,364,66],"symbol":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#setup_method().","content":"def setup_method(self):\r\n        builtins.print, ipc_client_instance = get_custom_print({})","file":"/pilot/utils/test_llm_connection.py","language":"python","fileHash":"82c24499d009771d486d5ea5f39243dbdd55be4a542db5f7f2527df11965690d","hash":"dd9cd4c5462f62c0e490cb671012f8cc285300384e9614806706143f06f19e65","processedContent":"def setup_method(self):\r\n        builtins.print, ipc_client_instance = get_custom_print({})","documentation":"This code sets up a custom print function for the test class, which allows for easier debugging and testing of the code."}},{"key":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#test_rate_limit_error().","attributes":{"range":[366,4,407,70],"symbol":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#test_rate_limit_error().","content":"@patch('utils.llm_connection.requests.post')\r\n    @patch('utils.llm_connection.time.sleep')\r\n    def test_rate_limit_error(self, mock_sleep, mock_post, monkeypatch):\r\n        monkeypatch.setenv('OPENAI_API_KEY', 'secret')\r\n\r\n        error_text = '''{\r\n                \"error\": {\r\n                    \"message\": \"Rate limit reached for 10KTPM-200RPM in organization org-OASFC7k1Ff5IzueeLArhQtnT on tokens per min. Limit: 10000 / min. Please try again in 6ms. Contact us through our help center at help.openai.com if you continue to have issues.\",\r\n                    \"type\": \"tokens\",\r\n                    \"param\": null,\r\n                    \"code\": \"rate_limit_exceeded\"\r\n                }\r\n            }'''\r\n        content = 'DONE'\r\n        success_text = '{\"id\": \"gen-123\", \"choices\": [{\"index\": 0, \"delta\": {\"role\": \"assistant\", \"content\": \"' + content + '\"}}]}'\r\n\r\n        error_response = Mock()\r\n        error_response.status_code = 429\r\n        error_response.text = error_text\r\n\r\n        mock_response = Mock()\r\n        mock_response.status_code = 200\r\n        mock_response.iter_lines.return_value = [success_text.encode('utf-8')]\r\n\r\n        mock_post.side_effect = [error_response, error_response, error_response, error_response, error_response,\r\n                                 error_response, error_response, error_response, error_response, error_response,\r\n                                 error_response, error_response, mock_response]\r\n        wrapper = retry_on_exception(stream_gpt_completion)\r\n        data = {\r\n            'model': 'gpt-4',\r\n            'messages': [{'role': 'user', 'content': 'testing'}]\r\n        }\r\n\r\n        # When\r\n        response = wrapper(data, 'test', project)\r\n\r\n        # Then\r\n        assert response == {'text': 'DONE'}\r\n        # assert mock_sleep.call_count == 9\r\n        assert mock_sleep.call_args_list == [call(0.006), call(0.012), call(0.024), call(0.048), call(0.096),\r\n                                             call(0.192), call(0.384), call(0.768), call(1.536), call(3.072),\r\n                                             call(6.144), call(6.144)]","file":"/pilot/utils/test_llm_connection.py","language":"python","fileHash":"82c24499d009771d486d5ea5f39243dbdd55be4a542db5f7f2527df11965690d","hash":"92ec1641811801eeac7f513334753b471e199344e11e931c9279765f1c7c7b1d","processedContent":"@patch('utils.llm_connection.requests.post')\r\n    @patch('utils.llm_connection.time.sleep')\r\n    def test_rate_limit_error(self, mock_sleep, mock_post, monkeypatch):\r\n        monkeypatch.setenv('OPENAI_API_KEY', 'secret')\r\n\r\n        error_text = '''{\r\n                \"error\": {\r\n                    \"message\": \"Rate limit reached for 10KTPM-200RPM in organization org-OASFC7k1Ff5IzueeLArhQtnT on tokens per min. Limit: 10000 / min. Please try again in 6ms. Contact us through our help center at help.openai.com if you continue to have issues.\",\r\n                    \"type\": \"tokens\",\r\n                    \"param\": null,\r\n                    \"code\": \"rate_limit_exceeded\"\r\n                }\r\n            }'''\r\n        content = 'DONE'\r\n        success_text = '{\"id\": \"gen-123\", \"choices\": [{\"index\": 0, \"delta\": {\"role\": \"assistant\", \"content\": \"' + content + '\"}}]}'\r\n\r\n        error_response = Mock()\r\n        error_response.status_code = 429\r\n        error_response.text = error_text\r\n\r\n        mock_response = Mock()\r\n        mock_response.status_code = 200\r\n        mock_response.iter_lines.return_value = [success_text.encode('utf-8')]\r\n\r\n        mock_post.side_effect = [error_response, error_response, error_response, error_response, error_response,\r\n                                 error_response, error_response, error_response, error_response, error_response,\r\n                                 error_response, error_response, mock_response]\r\n        wrapper = retry_on_exception(stream_gpt_completion)\r\n        \"\"\"\n        scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().: This code defines a decorator function called `retry_on_exception` that retries a function if it encounters an exception, and provides a way for users to retry the request if they want to.\n        scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().: The code defines a function called `stream_gpt_completion` that retrieves and renders a prompt template based on the provided name. It uses Jinja2 to render the templates with no variables, and stores the rendered content in a dictionary called `prompts_components`.\n        \"\"\"\n        data = {\r\n            'model': 'gpt-4',\r\n            'messages': [{'role': 'user', 'content': 'testing'}]\r\n        }\r\n\r\n        # When\r\n        response = wrapper(data, 'test', project)\r #undefined\n\r\n        # Then\r\n        assert response == {'text': 'DONE'}\r\n        # assert mock_sleep.call_count == 9\r\n        assert mock_sleep.call_args_list == [call(0.006), call(0.012), call(0.024), call(0.048), call(0.096),\r\n                                             call(0.192), call(0.384), call(0.768), call(1.536), call(3.072),\r\n                                             call(6.144), call(6.144)]","documentation":"This code defines a decorator function called `retry_on_exception` that retries a function if it encounters an exception, and provides a way for users to retry the request if they want to."}},{"key":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#test_stream_gpt_completion().","attributes":{"range":[410,4,439,103],"symbol":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#test_stream_gpt_completion().","content":"@patch('utils.llm_connection.requests.post')\r\n    def test_stream_gpt_completion(self, mock_post, monkeypatch):\r\n        # Given streaming JSON response\r\n        monkeypatch.setenv('OPENAI_API_KEY', 'secret')\r\n        deltas = ['{', '\\\\n',\r\n                  '  \\\\\"foo\\\\\": \\\\\"bar\\\\\",', '\\\\n',\r\n                  '  \\\\\"prompt\\\\\": \\\\\"Hello\\\\\",', '\\\\n',\r\n                  '  \\\\\"choices\\\\\": []', '\\\\n',\r\n                  '}']\r\n        lines_to_yield = [\r\n            ('{\"id\": \"gen-123\", \"choices\": [{\"index\": 0, \"delta\": {\"role\": \"assistant\", \"content\": \"' + delta + '\"}}]}')\r\n            .encode('utf-8')\r\n            for delta in deltas\r\n        ]\r\n        lines_to_yield.insert(1, b': OPENROUTER PROCESSING')  # Simulate OpenRoute keep-alive pings\r\n        mock_response = Mock()\r\n        mock_response.status_code = 200\r\n        mock_response.iter_lines.return_value = lines_to_yield\r\n\r\n        mock_post.return_value = mock_response\r\n\r\n        with patch('utils.llm_connection.requests.post', return_value=mock_response):\r\n            # When\r\n            response = stream_gpt_completion({\r\n                'model': 'gpt-4',\r\n                'messages': [],\r\n            }, '', project)\r\n\r\n            # Then\r\n            assert response == {'text': '{\\n  \"foo\": \"bar\",\\n  \"prompt\": \"Hello\",\\n  \"choices\": []\\n}'}","file":"/pilot/utils/test_llm_connection.py","language":"python","fileHash":"82c24499d009771d486d5ea5f39243dbdd55be4a542db5f7f2527df11965690d","hash":"c36a49d4d359629b779fbf55e0c20a515e5b681ac6b8496d5f01ad0e8668f33b","processedContent":"@patch('utils.llm_connection.requests.post')\r\n    def test_stream_gpt_completion(self, mock_post, monkeypatch):\r\n        # Given streaming JSON response\r\n        monkeypatch.setenv('OPENAI_API_KEY', 'secret')\r\n        deltas = ['{', '\\\\n',\r\n                  '  \\\\\"foo\\\\\": \\\\\"bar\\\\\",', '\\\\n',\r\n                  '  \\\\\"prompt\\\\\": \\\\\"Hello\\\\\",', '\\\\n',\r\n                  '  \\\\\"choices\\\\\": []', '\\\\n',\r\n                  '}']\r\n        lines_to_yield = [\r\n            ('{\"id\": \"gen-123\", \"choices\": [{\"index\": 0, \"delta\": {\"role\": \"assistant\", \"content\": \"' + delta + '\"}}]}')\r\n            .encode('utf-8')\r\n            for delta in deltas\r\n        ]\r\n        lines_to_yield.insert(1, b': OPENROUTER PROCESSING')  # Simulate OpenRoute keep-alive pings\r\n        mock_response = Mock()\r\n        mock_response.status_code = 200\r\n        mock_response.iter_lines.return_value = lines_to_yield\r\n\r\n        mock_post.return_value = mock_response\r\n\r\n        with patch('utils.llm_connection.requests.post', return_value=mock_response):\r\n            # When\r\n            response = stream_gpt_completion({\r #The code defines a function called `stream_gpt_completion` that retrieves and renders a prompt template based on the provided name. It uses Jinja2 to render the templates with no variables, and stores the rendered content in a dictionary called `prompts_components`.\n                'model': 'gpt-4',\r\n                'messages': [],\r\n            }, '', project)\r #undefined\n\r\n            # Then\r\n            assert response == {'text': '{\\n  \"foo\": \"bar\",\\n  \"prompt\": \"Hello\",\\n  \"choices\": []\\n}'}","documentation":"This code defines a function called `stream_gpt_completion` that retrieves and renders a prompt template based on the provided name. It uses Jinja2 to render the templates with no variables, and stores the rendered content in a dictionary called `prompts_components`."}},{"key":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#test_chat_completion_Architect().","attributes":{"range":[442,4,495,52],"symbol":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#test_chat_completion_Architect().","content":"@pytest.mark.uses_tokens\r\n    @pytest.mark.parametrize('endpoint, model', [\r\n        ('OPENAI', 'gpt-4'),                                 # role: system\r\n        ('OPENROUTER', 'openai/gpt-3.5-turbo'),              # role: user\r\n        ('OPENROUTER', 'meta-llama/codellama-34b-instruct'), # rule: user, is_llama\r\n        ('OPENROUTER', 'google/palm-2-chat-bison'),          # role: user/system\r\n        ('OPENROUTER', 'google/palm-2-codechat-bison'),\r\n        ('OPENROUTER', 'anthropic/claude-2'),              # role: user, is_llama\r\n    ])\r\n    def test_chat_completion_Architect(self, endpoint, model, monkeypatch):\r\n        # Given\r\n        monkeypatch.setenv('ENDPOINT', endpoint)\r\n        monkeypatch.setenv('MODEL_NAME', model)\r\n\r\n        agent = Architect(project)\r\n        convo = AgentConvo(agent)\r\n        convo.construct_and_add_message_from_prompt('architecture/technologies.prompt',\r\n                                                        {\r\n                                                            'name': 'Test App',\r\n                                                            'app_summary': '''\r\nThe project involves the development of a web-based chat application named \"Test_App\". \r\nIn this application, users can send direct messages to each other. \r\nHowever, it does not include a group chat functionality. \r\nMultimedia messaging, such as the exchange of images and videos, is not a requirement for this application. \r\nNo clear instructions were given for the inclusion of user profile customization features like profile \r\npicture and status updates, as well as a feature for chat history. The project must be developed strictly \r\nas a monolithic application, regardless of any other suggested methods. \r\nThe project's specifications are subject to the project manager's discretion, implying a need for \r\nsolution-oriented decision-making in areas where precise instructions were not provided.''',\r\n                                                            'app_type': 'web app',\r\n                                                            'user_stories': [\r\n                                                                'User will be able to send direct messages to another user.',\r\n                                                                'User will receive direct messages from other users.',\r\n                                                                'User will view the sent and received messages in a conversation view.',\r\n                                                                'User will select a user to send a direct message.',\r\n                                                                'User will be able to search for users to send direct messages to.',\r\n                                                                'Users can view the online status of other users.',\r\n                                                                'User will be able to log into the application using their credentials.',\r\n                                                                'User will be able to logout from the Test_App.',\r\n                                                                'User will be able to register a new account on Test_App.',\r\n                                                            ]\r\n                                                        })\r\n        function_calls = ARCHITECTURE\r\n\r\n        # When\r\n        response = create_gpt_chat_completion(convo.messages, '', project, function_calls=function_calls)\r\n\r\n        # Then\r\n        assert convo.messages[0]['content'].startswith('You are an experienced software architect')\r\n        assert convo.messages[1]['content'].startswith('You are working in a software development agency')\r\n\r\n        assert response is not None\r\n        response = parse_agent_response(response, function_calls)\r\n        assert 'Node.js' in response['technologies']","file":"/pilot/utils/test_llm_connection.py","language":"python","fileHash":"82c24499d009771d486d5ea5f39243dbdd55be4a542db5f7f2527df11965690d","hash":"56d9a657f8daa4d3237305375702bddf4e1b4a1896a33addeb44da0e98b3fe28","processedContent":"@pytest.mark.uses_tokens\r\n    @pytest.mark.parametrize('endpoint, model', [\r\n        ('OPENAI', 'gpt-4'),                                 # role: system\r\n        ('OPENROUTER', 'openai/gpt-3.5-turbo'),              # role: user\r\n        ('OPENROUTER', 'meta-llama/codellama-34b-instruct'), # rule: user, is_llama\r\n        ('OPENROUTER', 'google/palm-2-chat-bison'),          # role: user/system\r\n        ('OPENROUTER', 'google/palm-2-codechat-bison'),\r\n        ('OPENROUTER', 'anthropic/claude-2'),              # role: user, is_llama\r\n    ])\r\n    def test_chat_completion_Architect(self, endpoint, model, monkeypatch):\r\n        # Given\r\n        monkeypatch.setenv('ENDPOINT', endpoint)\r\n        monkeypatch.setenv('MODEL_NAME', model)\r\n\r\n        agent = Architect(project)\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#: This code defines a class called \"Architect\" that represents a person who is working on a specific project. The class has two attributes: \"role\" and \"project\". The \"role\" attribute specifies the type of work the agent is doing, and the \"project\" attribute specifies the project they are working on. The class also has a constructor that initializes an object with a role (architect) and a project, and sets the object's convo_architecture attribute to None.\n        scip-python python temp indexer `pilot.utils.test_llm_connection`/project.: undefined\n        \"\"\"\n        convo = AgentConvo(agent)\r #This code defines a class called `AgentConvo` that represents a conversation with an agent. It includes functions for sending and receiving messages, as well as formatting and rendering prompts. The code also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n        convo.construct_and_add_message_from_prompt('architecture/technologies.prompt',\r #This code defines a function called `construct_and_add_message_from_prompt` that retrieves and renders a prompt template based on the provided name, and then appends the rendered content to a list of messages.\n                                                        {\r\n                                                            'name': 'Test App',\r\n                                                            'app_summary': '''\r\nThe project involves the development of a web-based chat application named \"Test_App\". \r\nIn this application, users can send direct messages to each other. \r\nHowever, it does not include a group chat functionality. \r\nMultimedia messaging, such as the exchange of images and videos, is not a requirement for this application. \r\nNo clear instructions were given for the inclusion of user profile customization features like profile \r\npicture and status updates, as well as a feature for chat history. The project must be developed strictly \r\nas a monolithic application, regardless of any other suggested methods. \r\nThe project's specifications are subject to the project manager's discretion, implying a need for \r\nsolution-oriented decision-making in areas where precise instructions were not provided.''',\r\n                                                            'app_type': 'web app',\r\n                                                            'user_stories': [\r\n                                                                'User will be able to send direct messages to another user.',\r\n                                                                'User will receive direct messages from other users.',\r\n                                                                'User will view the sent and received messages in a conversation view.',\r\n                                                                'User will select a user to send a direct message.',\r\n                                                                'User will be able to search for users to send direct messages to.',\r\n                                                                'Users can view the online status of other users.',\r\n                                                                'User will be able to log into the application using their credentials.',\r\n                                                                'User will be able to logout from the Test_App.',\r\n                                                                'User will be able to register a new account on Test_App.',\r\n                                                            ]\r\n                                                        })\r\n        function_calls = ARCHITECTURE\r #undefined\n\r\n        # When\r\n        response = create_gpt_chat_completion(convo.messages, '', project, function_calls=function_calls)\r\n        \"\"\"\n        scip-python python temp indexer `pilot.utils.test_llm_connection`/project.: undefined\n        scip-python python temp indexer `pilot.utils.llm_connection`/create_gpt_chat_completion().: This code defines a function called `create_gpt_chat_completion` that takes in a list of messages, a request type, and a project. It then uses the OpenAI GPT language model to generate a response based on the input messages. The function also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n        scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#messages.: undefined\n        \"\"\"\n\r\n        # Then\r\n        assert convo.messages[0]['content'].startswith('You are an experienced software architect')\r #undefined\n        assert convo.messages[1]['content'].startswith('You are working in a software development agency')\r #undefined\n\r\n        assert response is not None\r\n        response = parse_agent_response(response, function_calls)\r #This code defines a function called \"parse_agent_response\" that takes two arguments: \"response\" and \"function_calls\". If \"function_calls\" is not None, the function returns the response as a JSON object. Otherwise, it returns the response as a string.\n        assert 'Node.js' in response['technologies']","documentation":"The code defines a class called \"Architect\" that represents a person working on a specific project, and includes functions for sending and receiving messages. It also defines a function called \"create_gpt_chat_completion\" that uses the OpenAI GPT language model to generate a response based on input messages."}},{"key":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#test_chat_completion_TechLead().","attributes":{"range":[497,4,552,72],"symbol":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#test_chat_completion_TechLead().","content":"@pytest.mark.uses_tokens\r\n    @pytest.mark.parametrize('endpoint, model', [\r\n        ('OPENAI', 'gpt-4'),\r\n        ('OPENROUTER', 'openai/gpt-3.5-turbo'),\r\n        ('OPENROUTER', 'meta-llama/codellama-34b-instruct'),\r\n        ('OPENROUTER', 'phind/phind-codellama-34b-v2'),\r\n        ('OPENROUTER', 'google/palm-2-chat-bison'),\r\n        ('OPENROUTER', 'google/palm-2-codechat-bison'),\r\n        ('OPENROUTER', 'anthropic/claude-2'),\r\n        ('OPENROUTER', 'mistralai/mistral-7b-instruct')\r\n    ])\r\n    def test_chat_completion_TechLead(self, endpoint, model, monkeypatch):\r\n        # Given\r\n        monkeypatch.setenv('ENDPOINT', endpoint)\r\n        monkeypatch.setenv('MODEL_NAME', model)\r\n\r\n        agent = TechLead(project)\r\n        convo = AgentConvo(agent)\r\n        convo.construct_and_add_message_from_prompt('development/plan.prompt',\r\n                                                    {\r\n                                                        'name': 'Test App',\r\n                                                        'app_summary': '''\r\n    The project entails creating a web-based chat application, tentatively named \"chat_app.\" \r\nThis application does not require user authentication or chat history storage. \r\nIt solely supports one-on-one messaging, excluding group chats or multimedia sharing like photos, videos, or files. \r\nAdditionally, there are no specific requirements for real-time functionality, like live typing indicators or read receipts. \r\nThe development of this application will strictly follow a monolithic structure, avoiding the use of microservices, as per the client's demand. \r\nThe development process will include the creation of user stories and tasks, based on detailed discussions with the client.''',\r\n                                                        'app_type': 'web app',\r\n                                                        'user_stories': [\r\n            'User Story 1: As a user, I can access the web-based \"chat_app\" directly without needing to authenticate or log in. Do you want to add anything else? If not, just press ENTER.',\r\n            'User Story 2: As a user, I can start one-on-one conversations with another user on the \"chat_app\". Do you want to add anything else? If not, just press ENTER.',\r\n            'User Story 3: As a user, I can send and receive messages in real-time within my one-on-one conversation on the \"chat_app\". Do you want to add anything else? If not, just press ENTER.',\r\n            'User Story 4: As a user, I do not need to worry about deleting or storing my chats because the \"chat_app\" does not store chat histories. Do you want to add anything else? If not, just press ENTER.',\r\n            'User Story 5: As a user, I will only be able to send text messages, as the \"chat_app\" does not support any kind of multimedia sharing like photos, videos, or files. Do you want to add anything else? If not, just press ENTER.',\r\n            'User Story 6: As a user, I will not see any live typing indicators or read receipts since the \"chat_app\" does not provide any additional real-time functionality beyond message exchange. Do you want to add anything else? If not, just press ENTER.',\r\n                                                        ]\r\n                                                    })\r\n        function_calls = DEVELOPMENT_PLAN\r\n\r\n        # Retry on bad LLM responses\r\n        # mock_questionary = MockQuestionary(['', '', 'no'])\r\n\r\n        # with patch('utils.llm_connection.questionary', mock_questionary):\r\n        # When\r\n        response = create_gpt_chat_completion(convo.messages, '', project, function_calls=function_calls)\r\n\r\n        # Then\r\n        assert convo.messages[0]['content'].startswith('You are a tech lead in a software development agency')\r\n        assert convo.messages[1]['content'].startswith('You are working in a software development agency and a project manager and software architect approach you')\r\n\r\n        assert response is not None\r\n        response = parse_agent_response(response, function_calls)\r\n        assert_non_empty_string(response['plan'][0]['description'])\r\n        assert_non_empty_string(response['plan'][0]['programmatic_goal'])\r\n        assert_non_empty_string(response['plan'][0]['user_review_goal'])","file":"/pilot/utils/test_llm_connection.py","language":"python","fileHash":"82c24499d009771d486d5ea5f39243dbdd55be4a542db5f7f2527df11965690d","hash":"fdc3efa7902a9dbf0ff7dc1bed3092e15c6956d9d499b54a6682fb04d19456ce","processedContent":"@pytest.mark.uses_tokens\r\n    @pytest.mark.parametrize('endpoint, model', [\r\n        ('OPENAI', 'gpt-4'),\r\n        ('OPENROUTER', 'openai/gpt-3.5-turbo'),\r\n        ('OPENROUTER', 'meta-llama/codellama-34b-instruct'),\r\n        ('OPENROUTER', 'phind/phind-codellama-34b-v2'),\r\n        ('OPENROUTER', 'google/palm-2-chat-bison'),\r\n        ('OPENROUTER', 'google/palm-2-codechat-bison'),\r\n        ('OPENROUTER', 'anthropic/claude-2'),\r\n        ('OPENROUTER', 'mistralai/mistral-7b-instruct')\r\n    ])\r\n    def test_chat_completion_TechLead(self, endpoint, model, monkeypatch):\r\n        # Given\r\n        monkeypatch.setenv('ENDPOINT', endpoint)\r\n        monkeypatch.setenv('MODEL_NAME', model)\r\n\r\n        agent = TechLead(project)\r\n        \"\"\"\n        scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#: This code defines a class called \"TechLead\" that represents a person who is working on a specific project. The class has two attributes: \"role\" and \"project\". The \"role\" attribute specifies the type of work the agent is doing, and the \"project\" attribute specifies the project they are working on. The class also defines several functions, including `create_development_plan`, `create_feature_plan`, and `create_feature_summary`, which retrieve progress data for an app from a database, update the status of the app in the database, and save the development plan for the app.\n        scip-python python temp indexer `pilot.utils.test_llm_connection`/project.: undefined\n        \"\"\"\n        convo = AgentConvo(agent)\r #This code defines a class called `AgentConvo` that represents a conversation with an agent. It includes functions for sending and receiving messages, as well as formatting and rendering prompts. The code also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n        convo.construct_and_add_message_from_prompt('development/plan.prompt',\r #This code defines a function called `construct_and_add_message_from_prompt` that retrieves and renders a prompt template based on the provided name, and then appends the rendered content to a list of messages.\n                                                    {\r\n                                                        'name': 'Test App',\r\n                                                        'app_summary': '''\r\n    The project entails creating a web-based chat application, tentatively named \"chat_app.\" \r\nThis application does not require user authentication or chat history storage. \r\nIt solely supports one-on-one messaging, excluding group chats or multimedia sharing like photos, videos, or files. \r\nAdditionally, there are no specific requirements for real-time functionality, like live typing indicators or read receipts. \r\nThe development of this application will strictly follow a monolithic structure, avoiding the use of microservices, as per the client's demand. \r\nThe development process will include the creation of user stories and tasks, based on detailed discussions with the client.''',\r\n                                                        'app_type': 'web app',\r\n                                                        'user_stories': [\r\n            'User Story 1: As a user, I can access the web-based \"chat_app\" directly without needing to authenticate or log in. Do you want to add anything else? If not, just press ENTER.',\r\n            'User Story 2: As a user, I can start one-on-one conversations with another user on the \"chat_app\". Do you want to add anything else? If not, just press ENTER.',\r\n            'User Story 3: As a user, I can send and receive messages in real-time within my one-on-one conversation on the \"chat_app\". Do you want to add anything else? If not, just press ENTER.',\r\n            'User Story 4: As a user, I do not need to worry about deleting or storing my chats because the \"chat_app\" does not store chat histories. Do you want to add anything else? If not, just press ENTER.',\r\n            'User Story 5: As a user, I will only be able to send text messages, as the \"chat_app\" does not support any kind of multimedia sharing like photos, videos, or files. Do you want to add anything else? If not, just press ENTER.',\r\n            'User Story 6: As a user, I will not see any live typing indicators or read receipts since the \"chat_app\" does not provide any additional real-time functionality beyond message exchange. Do you want to add anything else? If not, just press ENTER.',\r\n                                                        ]\r\n                                                    })\r\n        function_calls = DEVELOPMENT_PLAN\r #undefined\n\r\n        # Retry on bad LLM responses\r\n        # mock_questionary = MockQuestionary(['', '', 'no'])\r\n\r\n        # with patch('utils.llm_connection.questionary', mock_questionary):\r\n        # When\r\n        response = create_gpt_chat_completion(convo.messages, '', project, function_calls=function_calls)\r\n        \"\"\"\n        scip-python python temp indexer `pilot.utils.test_llm_connection`/project.: undefined\n        scip-python python temp indexer `pilot.utils.llm_connection`/create_gpt_chat_completion().: This code defines a function called `create_gpt_chat_completion` that takes in a list of messages, a request type, and a project. It then uses the OpenAI GPT language model to generate a response based on the input messages. The function also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n        scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#messages.: undefined\n        \"\"\"\n\r\n        # Then\r\n        assert convo.messages[0]['content'].startswith('You are a tech lead in a software development agency')\r #undefined\n        assert convo.messages[1]['content'].startswith('You are working in a software development agency and a project manager and software architect approach you')\r #undefined\n\r\n        assert response is not None\r\n        response = parse_agent_response(response, function_calls)\r #This code defines a function called \"parse_agent_response\" that takes two arguments: \"response\" and \"function_calls\". If \"function_calls\" is not None, the function returns the response as a JSON object. Otherwise, it returns the response as a string.\n        assert_non_empty_string(response['plan'][0]['description'])\r #This code checks that a value is a non-empty string. It does this by first checking that the value is an instance of the `str` class, and then checking that the length of the string is greater than 0.\n        assert_non_empty_string(response['plan'][0]['programmatic_goal'])\r #This code checks that a value is a non-empty string. It does this by first checking that the value is an instance of the `str` class, and then checking that the length of the string is greater than 0.\n        assert_non_empty_string(response['plan'][0]['user_review_goal'])","documentation":"The code defines a class called \"TechLead\" that represents a person working on a specific project. It also defines a function called \"create_gpt_chat_completion\" that uses the OpenAI GPT language model to generate a response based on input messages."}},{"key":"scip-python python temp indexer `pilot.utils.test_llm_connection`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.test_llm_connection`/__init__:","range":[0,0,580,0],"content":"import builtins\r\nfrom json import JSONDecodeError\r\n\r\nimport pytest\r\nfrom unittest.mock import call, patch, Mock\r\nfrom dotenv import load_dotenv\r\nfrom jsonschema import ValidationError\r\nfrom const.function_calls import ARCHITECTURE, DEVELOPMENT_PLAN\r\nfrom helpers.AgentConvo import AgentConvo\r\nfrom helpers.Project import Project\r\nfrom helpers.agents.Architect import Architect\r\nfrom helpers.agents.TechLead import TechLead\r\nfrom utils.function_calling import parse_agent_response, FunctionType\r\nfrom test.test_utils import assert_non_empty_string\r\nfrom test.mock_questionary import MockQuestionary\r\nfrom utils.llm_connection import create_gpt_chat_completion, stream_gpt_completion, \\\r\n    assert_json_response, assert_json_schema, clean_json_response, retry_on_exception\r\nfrom main import get_custom_print\r\n\r\nload_dotenv()\r\n\r\nproject = Project({'app_id': 'test-app'}, current_step='test', enable_dot_pilot_gpt=False)\r\n\r\n\r\ndef test_clean_json_response_True_False():\r\n    # Given a JSON response with Title Case True and False\r\n    response = '''\r\n```json\r\n{\r\n    \"steps\": [\r\n        {\r\n            \"type\": \"command\",\r\n            \"command\": {\r\n                \"command\": \"git init\",\r\n                \"daemon\": False,\r\n                \"timeout\": 3000,\r\n                \"boolean\": False\r\n            },\r\n            \"another_True\": True,\r\n            \"check_if_fixed\": True\r\n        }\r\n    ]\r\n}\r\n```\r\n'''\r\n\r\n    # When\r\n    response = clean_json_response(response)\r\n\r\n    # Then the markdown is removed\r\n    assert response.startswith('{')\r\n    assert response.endswith('}')\r\n    # And the booleans are converted to lowercase\r\n    assert '\"daemon\":false,' in response\r\n    assert '\"boolean\":false' in response\r\n    assert '\"another_True\":true,' in response\r\n    assert '\"check_if_fixed\":true' in response\r\n\r\n\r\ndef test_clean_json_response_boolean_in_python():\r\n    # Given a JSON response with Python booleans in a content string\r\n    response = '''\r\n{\r\n    \"type\": \"code_change\",\r\n    \"code_change\": {\r\n        \"name\": \"main.py\",\r\n        \"path\": \"./main.py\",\r\n        \"content\": \"json = {'is_true': True,\\\\n 'is_false': False}\"\r\n    }\r\n}'''\r\n\r\n    # When\r\n    response = clean_json_response(response)\r\n\r\n    # Then the content string is left untouched\r\n    assert '\"content\": \"json = {\\'is_true\\': True,\\\\n \\'is_false\\': False}\"' in response\r\n\r\n\r\n@patch('utils.llm_connection.styled_text', return_value='')\r\nclass TestRetryOnException:\r\n    def setup_method(self):\r\n        self.function: FunctionType = {\r\n            'name': 'test',\r\n            'description': 'test schema',\r\n            'parameters': {\r\n                'type': 'object',\r\n                'properties': {\r\n                    'foo': {'type': 'string'},\r\n                    'boolean': {'type': 'boolean'},\r\n                    'items': {'type': 'array'}\r\n                },\r\n                'required': ['foo']\r\n            }\r\n        }\r\n\r\n    def _create_wrapped_function(self, json_responses: list[str]):\r\n        args = {}, 'test', project\r\n\r\n        def retryable_assert_json_schema(data, _req_type, _project):\r\n            json_string = json_responses.pop(0)\r\n            if 'function_buffer' in data:\r\n                json_string = data['function_buffer'] + json_string\r\n            assert_json_schema(json_string, [self.function])\r\n            return json_string\r\n\r\n        return retry_on_exception(retryable_assert_json_schema), args\r\n\r\n    def test_incomplete_value_string(self, mock_styled_text):\r\n        # Given incomplete JSON\r\n        wrapper, args = self._create_wrapped_function(['{\"foo\": \"bar', '\"}'])\r\n\r\n        # When\r\n        response = wrapper(*args)\r\n\r\n        # Then should tell the LLM the JSON response is incomplete and to continue\r\n        # 'Unterminated string starting at'\r\n        assert response == '{\"foo\": \"bar\"}'\r\n        assert 'function_error' not in args[0]\r\n        # And the user should not need to be notified\r\n        assert mock_styled_text.call_count == 0\r\n\r\n    def test_incomplete_key(self, mock_styled_text):\r\n        # Given invalid JSON boolean\r\n        wrapper, args = self._create_wrapped_function([\r\n            '{\"foo',\r\n            '\": \"bar\"}'\r\n        ])\r\n\r\n        # When\r\n        response = wrapper(*args)\r\n\r\n        # Then should tell the LLM the JSON response is incomplete and to continue\r\n        # 'Unterminated string starting at: line 1 column 2 (char 1)'\r\n        assert response == '{\"foo\": \"bar\"}'\r\n        assert 'function_error' not in args[0]\r\n        # And the user should not need to be notified\r\n        assert mock_styled_text.call_count == 0\r\n\r\n    def test_incomplete_value_missing(self, mock_styled_text):\r\n        # Given invalid JSON boolean\r\n        wrapper, args = self._create_wrapped_function([\r\n            '{\"foo\":',\r\n            ' \"bar\"}'\r\n        ])\r\n\r\n        # When\r\n        response = wrapper(*args)\r\n\r\n        # Then should tell the LLM the JSON response is incomplete and to continue\r\n        # 'Expecting value: line 1 column 8 (char 7)'\r\n        assert response == '{\"foo\": \"bar\"}'\r\n        assert 'function_error' not in args[0]\r\n        # And the user should not need to be notified\r\n        assert mock_styled_text.call_count == 0\r\n\r\n    def test_invalid_boolean(self, mock_styled_text):\r\n        # Given invalid JSON boolean\r\n        wrapper, args = self._create_wrapped_function([\r\n            '{\"foo\": \"bar\", \"boolean\": True}',\r\n            '{\"foo\": \"bar\", \"boolean\": True}',\r\n            '{\"foo\": \"bar\", \"boolean\": True}',\r\n            '{\"foo\": \"bar\", \"boolean\": true}',\r\n        ])\r\n\r\n        # When\r\n        response = wrapper(*args)\r\n\r\n        # Then should tell the LLM there is an error in the JSON response\r\n        # 'Expecting value: line 1 column 13 (char 12)'\r\n        assert response == '{\"foo\": \"bar\", \"boolean\": true}'\r\n        assert args[0]['function_error'] == 'Invalid value: `True`'\r\n        assert 'function_buffer' not in args[0]\r\n        # And the user should not need to be notified\r\n        assert mock_styled_text.call_count == 1\r\n\r\n    def test_invalid_escape(self, mock_styled_text):\r\n        # Given invalid JSON boolean\r\n        wrapper, args = self._create_wrapped_function([\r\n            '{\"foo\": \"\\\\!\"}',\r\n            '{\"foo\": \"\\\\xBADU\"}',\r\n            '{\"foo\": \"\\\\xd800\"}',\r\n            '{\"foo\": \"bar\"}',\r\n        ])\r\n\r\n        # When\r\n        response = wrapper(*args)\r\n\r\n        # Then should tell the LLM there is an error in the JSON response\r\n        # 'Invalid \\\\escape: line 1 column 10 (char 9)'\r\n        assert response == '{\"foo\": \"bar\"}'\r\n        assert len(args[0]['function_error']) > 0\r\n        assert 'function_buffer' not in args[0]\r\n        # And the user should not need to be notified\r\n        assert mock_styled_text.call_count == 1\r\n\r\n    def test_incomplete_json_item(self, mock_styled_text):\r\n        # Given incomplete JSON\r\n        wrapper, args = self._create_wrapped_function([\r\n            '{\"foo\": \"bar\",',\r\n            ' \"boolean\"',\r\n            ': true}'])\r\n\r\n        # When\r\n        response = wrapper(*args)\r\n\r\n        # Then should tell the LLM the JSON response is incomplete and to continue\r\n        # 'Expecting property name enclosed in double quotes: line 1 column 15 (char 14)'\r\n        # \"Expecting ':' delimiter: line 1 column 25 (char 24)\"\r\n        assert response == '{\"foo\": \"bar\", \"boolean\": true}'\r\n        assert 'function_error' not in args[0]\r\n        # And the user should not need to be notified\r\n        assert mock_styled_text.call_count == 0\r\n\r\n    def test_incomplete_json_array(self, mock_styled_text):\r\n        # Given incomplete JSON\r\n        wrapper, args = self._create_wrapped_function([\r\n            '{\"foo\": \"bar\", \"items\": [1, 2, 3, \"4\"',\r\n            ', 5]}'])\r\n\r\n        # When\r\n        response = wrapper(*args)\r\n\r\n        # Then should tell the LLM the JSON response is incomplete and to continue\r\n        # \"Expecting ',' delimiter: line 1 column 24 (char 23)\"\r\n        assert response == '{\"foo\": \"bar\", \"items\": [1, 2, 3, \"4\", 5]}'\r\n        assert 'function_error' not in args[0]\r\n        # And the user should not need to be notified\r\n        assert mock_styled_text.call_count == 0\r\n\r\n    def test_incomplete_then_invalid_by_schema(self, mock_styled_text):\r\n        # Given incomplete JSON\r\n        wrapper, args = self._create_wrapped_function([\r\n            '{\"items\": [1, 2, 3, \"4\"',\r\n            ', 5]}',\r\n            # Please try again with a valid JSON object, referring to the previous JSON schema I provided above\r\n            '{\"foo\": \"bar\",',\r\n            ' \"items\": [1, 2, 3, \"4\"',\r\n            ', 5]}'\r\n        ])\r\n\r\n        # When\r\n        response = wrapper(*args)\r\n\r\n        # Then should tell the LLM the JSON response is incomplete and to continue\r\n        # \"Expecting ',' delimiter: line 1 column 24 (char 23)\"\r\n        # \"'foo' is a required property\"\r\n        assert response == '{\"foo\": \"bar\", \"items\": [1, 2, 3, \"4\", 5]}'\r\n        assert 'function_error' not in args[0]\r\n        # And the user should not need to be notified\r\n        assert mock_styled_text.call_count == 0\r\n\r\n    def test_invalid_boolean_max_retries(self, mock_styled_text):\r\n        # Given invalid JSON boolean\r\n        wrapper, args = self._create_wrapped_function([\r\n            '{\"boolean\": True, \"foo\": \"bar\"}',\r\n            '{\"boolean\": True,\\n \"foo\": \"bar\"}',\r\n            '{\"boolean\": True}',\r\n            '{\"boolean\": true, \"foo\": \"bar\"}',\r\n        ])\r\n\r\n        # When\r\n        response = wrapper(*args)\r\n\r\n        # Then should tell the LLM there is an error in the JSON response\r\n        assert response == '{\"boolean\": true, \"foo\": \"bar\"}'\r\n        assert args[0]['function_error'] == 'Invalid value: `True`'\r\n        assert mock_styled_text.call_count == 1\r\n\r\n    def test_extra_data(self, mock_styled_text):\r\n        # Given invalid JSON boolean\r\n        wrapper, args = self._create_wrapped_function([\r\n            '{\"boolean\": true, \"foo\": \"bar\"}\\n I hope that helps',\r\n            '{\"boolean\": true, \"foo\": \"bar\"}\\n I hope that helps',\r\n            '{\"boolean\": true, \"foo\": \"bar\"}\\n I hope that helps',\r\n            '{\"boolean\": true, \"foo\": \"bar\"}',\r\n        ])\r\n\r\n        # When\r\n        response = wrapper(*args)\r\n\r\n        # Then should tell the LLM there is an error in the JSON response\r\n        assert response == '{\"boolean\": true, \"foo\": \"bar\"}'\r\n        # assert len(args[0]['function_error']) > 0\r\n        assert args[0]['function_error'] == 'Extra data: line 2 column 2 (char 33)'\r\n        assert mock_styled_text.call_count == 1\r\n\r\n\r\nclass TestSchemaValidation:\r\n    def setup_method(self):\r\n        self.function: FunctionType = {\r\n            'name': 'test',\r\n            'description': 'test schema',\r\n            'parameters': {\r\n                'type': 'object',\r\n                'properties': {'foo': {'type': 'string'}},\r\n                'required': ['foo']\r\n            }\r\n        }\r\n\r\n    def test_assert_json_response(self):\r\n        assert assert_json_response('{\"foo\": \"bar\"}')\r\n        assert assert_json_response('{\\n\"foo\": \"bar\"}')\r\n        assert assert_json_response('```\\n{\"foo\": \"bar\"}')\r\n        assert assert_json_response('```json\\n{\\n\"foo\": \"bar\"}')\r\n        with pytest.raises(ValueError, match='LLM did not respond with JSON'):\r\n            assert assert_json_response('# Foo\\n bar')\r\n\r\n    def test_assert_json_schema(self):\r\n        # When assert_json_schema is called with valid JSON\r\n        # Then no errors\r\n        assert(assert_json_schema('{\"foo\": \"bar\"}', [self.function]))\r\n\r\n    def test_assert_json_schema_incomplete(self):\r\n        # When assert_json_schema is called with incomplete JSON\r\n        # Then error is raised\r\n        with pytest.raises(JSONDecodeError):\r\n            assert_json_schema('{\"foo\": \"b', [self.function])\r\n\r\n    def test_assert_json_schema_invalid(self):\r\n        # When assert_json_schema is called with invalid JSON\r\n        # Then error is raised\r\n        with pytest.raises(ValidationError, match=\"1 is not of type 'string'\"):\r\n            assert_json_schema('{\"foo\": 1}', [self.function])\r\n\r\n    def test_assert_json_schema_required(self):\r\n        # When assert_json_schema is called with missing required property\r\n        # Then error is raised\r\n        self.function['parameters']['properties']['other'] = {'type': 'string'}\r\n        self.function['parameters']['required'] = ['foo', 'other']\r\n\r\n        with pytest.raises(ValidationError, match=\"'other' is a required property\"):\r\n            assert_json_schema('{\"foo\": \"bar\"}', [self.function])\r\n\r\n    def test_DEVELOPMENT_PLAN(self):\r\n        assert(assert_json_schema('''\r\n{\r\n  \"plan\": [\r\n    {\r\n      \"description\": \"Set up project structure including creation of necessary directories and files. Initialize Node.js and install necessary libraries such as express and socket.io.\",\r\n      \"programmatic_goal\": \"Project structure should be set up and Node.js initialized. Express and socket.io libraries should be installed and reflected in the package.json file.\",\r\n      \"user_review_goal\": \"Developer should be able to start an empty express server by running `npm start` command without any errors.\"\r\n    },\r\n    {\r\n      \"description\": \"Create a simple front-end HTML page with CSS and JavaScript that includes input for typing messages and area for displaying messages.\",\r\n      \"programmatic_goal\": \"There should be an HTML file containing an input box for typing messages and an area for displaying the messages. This HTML page should be served when user navigates to the root URL.\",\r\n      \"user_review_goal\": \"Navigating to the root URL (http://localhost:3000) should display the chat front-end with an input box and a message area.\"\r\n    },\r\n    {\r\n      \"description\": \"Set up socket.io on the back-end to handle websocket connections and broadcasting messages to the clients.\",\r\n      \"programmatic_goal\": \"Server should be able to handle websocket connections using socket.io and broadcast messages to all connected clients.\",\r\n      \"user_review_goal\": \"By using two different browsers or browser tabs, when one user sends a message from one tab, it should appear in the other user's browser tab in real-time.\"\r\n    },\r\n    {\r\n      \"description\": \"Integrate front-end with socket.io client to send messages from the input field to the server and display incoming messages in the message area.\",\r\n      \"programmatic_goal\": \"Front-end should be able to send messages to server and display incoming messages in the message area using socket.io client.\",\r\n      \"user_review_goal\": \"Typing a message in the chat input and sending it should then display the message in the chat area.\"\r\n    }\r\n  ]\r\n}\r\n'''.strip(), DEVELOPMENT_PLAN['definitions']))\r\n\r\n\r\nclass TestLlmConnection:\r\n    def setup_method(self):\r\n        builtins.print, ipc_client_instance = get_custom_print({})\r\n\r\n    @patch('utils.llm_connection.requests.post')\r\n    @patch('utils.llm_connection.time.sleep')\r\n    def test_rate_limit_error(self, mock_sleep, mock_post, monkeypatch):\r\n        monkeypatch.setenv('OPENAI_API_KEY', 'secret')\r\n\r\n        error_text = '''{\r\n                \"error\": {\r\n                    \"message\": \"Rate limit reached for 10KTPM-200RPM in organization org-OASFC7k1Ff5IzueeLArhQtnT on tokens per min. Limit: 10000 / min. Please try again in 6ms. Contact us through our help center at help.openai.com if you continue to have issues.\",\r\n                    \"type\": \"tokens\",\r\n                    \"param\": null,\r\n                    \"code\": \"rate_limit_exceeded\"\r\n                }\r\n            }'''\r\n        content = 'DONE'\r\n        success_text = '{\"id\": \"gen-123\", \"choices\": [{\"index\": 0, \"delta\": {\"role\": \"assistant\", \"content\": \"' + content + '\"}}]}'\r\n\r\n        error_response = Mock()\r\n        error_response.status_code = 429\r\n        error_response.text = error_text\r\n\r\n        mock_response = Mock()\r\n        mock_response.status_code = 200\r\n        mock_response.iter_lines.return_value = [success_text.encode('utf-8')]\r\n\r\n        mock_post.side_effect = [error_response, error_response, error_response, error_response, error_response,\r\n                                 error_response, error_response, error_response, error_response, error_response,\r\n                                 error_response, error_response, mock_response]\r\n        wrapper = retry_on_exception(stream_gpt_completion)\r\n        data = {\r\n            'model': 'gpt-4',\r\n            'messages': [{'role': 'user', 'content': 'testing'}]\r\n        }\r\n\r\n        # When\r\n        response = wrapper(data, 'test', project)\r\n\r\n        # Then\r\n        assert response == {'text': 'DONE'}\r\n        # assert mock_sleep.call_count == 9\r\n        assert mock_sleep.call_args_list == [call(0.006), call(0.012), call(0.024), call(0.048), call(0.096),\r\n                                             call(0.192), call(0.384), call(0.768), call(1.536), call(3.072),\r\n                                             call(6.144), call(6.144)]\r\n        # mock_sleep.call\r\n\r\n    @patch('utils.llm_connection.requests.post')\r\n    def test_stream_gpt_completion(self, mock_post, monkeypatch):\r\n        # Given streaming JSON response\r\n        monkeypatch.setenv('OPENAI_API_KEY', 'secret')\r\n        deltas = ['{', '\\\\n',\r\n                  '  \\\\\"foo\\\\\": \\\\\"bar\\\\\",', '\\\\n',\r\n                  '  \\\\\"prompt\\\\\": \\\\\"Hello\\\\\",', '\\\\n',\r\n                  '  \\\\\"choices\\\\\": []', '\\\\n',\r\n                  '}']\r\n        lines_to_yield = [\r\n            ('{\"id\": \"gen-123\", \"choices\": [{\"index\": 0, \"delta\": {\"role\": \"assistant\", \"content\": \"' + delta + '\"}}]}')\r\n            .encode('utf-8')\r\n            for delta in deltas\r\n        ]\r\n        lines_to_yield.insert(1, b': OPENROUTER PROCESSING')  # Simulate OpenRoute keep-alive pings\r\n        mock_response = Mock()\r\n        mock_response.status_code = 200\r\n        mock_response.iter_lines.return_value = lines_to_yield\r\n\r\n        mock_post.return_value = mock_response\r\n\r\n        with patch('utils.llm_connection.requests.post', return_value=mock_response):\r\n            # When\r\n            response = stream_gpt_completion({\r\n                'model': 'gpt-4',\r\n                'messages': [],\r\n            }, '', project)\r\n\r\n            # Then\r\n            assert response == {'text': '{\\n  \"foo\": \"bar\",\\n  \"prompt\": \"Hello\",\\n  \"choices\": []\\n}'}\r\n\r\n\r\n    @pytest.mark.uses_tokens\r\n    @pytest.mark.parametrize('endpoint, model', [\r\n        ('OPENAI', 'gpt-4'),                                 # role: system\r\n        ('OPENROUTER', 'openai/gpt-3.5-turbo'),              # role: user\r\n        ('OPENROUTER', 'meta-llama/codellama-34b-instruct'), # rule: user, is_llama\r\n        ('OPENROUTER', 'google/palm-2-chat-bison'),          # role: user/system\r\n        ('OPENROUTER', 'google/palm-2-codechat-bison'),\r\n        ('OPENROUTER', 'anthropic/claude-2'),              # role: user, is_llama\r\n    ])\r\n    def test_chat_completion_Architect(self, endpoint, model, monkeypatch):\r\n        # Given\r\n        monkeypatch.setenv('ENDPOINT', endpoint)\r\n        monkeypatch.setenv('MODEL_NAME', model)\r\n\r\n        agent = Architect(project)\r\n        convo = AgentConvo(agent)\r\n        convo.construct_and_add_message_from_prompt('architecture/technologies.prompt',\r\n                                                        {\r\n                                                            'name': 'Test App',\r\n                                                            'app_summary': '''\r\nThe project involves the development of a web-based chat application named \"Test_App\". \r\nIn this application, users can send direct messages to each other. \r\nHowever, it does not include a group chat functionality. \r\nMultimedia messaging, such as the exchange of images and videos, is not a requirement for this application. \r\nNo clear instructions were given for the inclusion of user profile customization features like profile \r\npicture and status updates, as well as a feature for chat history. The project must be developed strictly \r\nas a monolithic application, regardless of any other suggested methods. \r\nThe project's specifications are subject to the project manager's discretion, implying a need for \r\nsolution-oriented decision-making in areas where precise instructions were not provided.''',\r\n                                                            'app_type': 'web app',\r\n                                                            'user_stories': [\r\n                                                                'User will be able to send direct messages to another user.',\r\n                                                                'User will receive direct messages from other users.',\r\n                                                                'User will view the sent and received messages in a conversation view.',\r\n                                                                'User will select a user to send a direct message.',\r\n                                                                'User will be able to search for users to send direct messages to.',\r\n                                                                'Users can view the online status of other users.',\r\n                                                                'User will be able to log into the application using their credentials.',\r\n                                                                'User will be able to logout from the Test_App.',\r\n                                                                'User will be able to register a new account on Test_App.',\r\n                                                            ]\r\n                                                        })\r\n        function_calls = ARCHITECTURE\r\n\r\n        # When\r\n        response = create_gpt_chat_completion(convo.messages, '', project, function_calls=function_calls)\r\n\r\n        # Then\r\n        assert convo.messages[0]['content'].startswith('You are an experienced software architect')\r\n        assert convo.messages[1]['content'].startswith('You are working in a software development agency')\r\n\r\n        assert response is not None\r\n        response = parse_agent_response(response, function_calls)\r\n        assert 'Node.js' in response['technologies']\r\n\r\n    @pytest.mark.uses_tokens\r\n    @pytest.mark.parametrize('endpoint, model', [\r\n        ('OPENAI', 'gpt-4'),\r\n        ('OPENROUTER', 'openai/gpt-3.5-turbo'),\r\n        ('OPENROUTER', 'meta-llama/codellama-34b-instruct'),\r\n        ('OPENROUTER', 'phind/phind-codellama-34b-v2'),\r\n        ('OPENROUTER', 'google/palm-2-chat-bison'),\r\n        ('OPENROUTER', 'google/palm-2-codechat-bison'),\r\n        ('OPENROUTER', 'anthropic/claude-2'),\r\n        ('OPENROUTER', 'mistralai/mistral-7b-instruct')\r\n    ])\r\n    def test_chat_completion_TechLead(self, endpoint, model, monkeypatch):\r\n        # Given\r\n        monkeypatch.setenv('ENDPOINT', endpoint)\r\n        monkeypatch.setenv('MODEL_NAME', model)\r\n\r\n        agent = TechLead(project)\r\n        convo = AgentConvo(agent)\r\n        convo.construct_and_add_message_from_prompt('development/plan.prompt',\r\n                                                    {\r\n                                                        'name': 'Test App',\r\n                                                        'app_summary': '''\r\n    The project entails creating a web-based chat application, tentatively named \"chat_app.\" \r\nThis application does not require user authentication or chat history storage. \r\nIt solely supports one-on-one messaging, excluding group chats or multimedia sharing like photos, videos, or files. \r\nAdditionally, there are no specific requirements for real-time functionality, like live typing indicators or read receipts. \r\nThe development of this application will strictly follow a monolithic structure, avoiding the use of microservices, as per the client's demand. \r\nThe development process will include the creation of user stories and tasks, based on detailed discussions with the client.''',\r\n                                                        'app_type': 'web app',\r\n                                                        'user_stories': [\r\n            'User Story 1: As a user, I can access the web-based \"chat_app\" directly without needing to authenticate or log in. Do you want to add anything else? If not, just press ENTER.',\r\n            'User Story 2: As a user, I can start one-on-one conversations with another user on the \"chat_app\". Do you want to add anything else? If not, just press ENTER.',\r\n            'User Story 3: As a user, I can send and receive messages in real-time within my one-on-one conversation on the \"chat_app\". Do you want to add anything else? If not, just press ENTER.',\r\n            'User Story 4: As a user, I do not need to worry about deleting or storing my chats because the \"chat_app\" does not store chat histories. Do you want to add anything else? If not, just press ENTER.',\r\n            'User Story 5: As a user, I will only be able to send text messages, as the \"chat_app\" does not support any kind of multimedia sharing like photos, videos, or files. Do you want to add anything else? If not, just press ENTER.',\r\n            'User Story 6: As a user, I will not see any live typing indicators or read receipts since the \"chat_app\" does not provide any additional real-time functionality beyond message exchange. Do you want to add anything else? If not, just press ENTER.',\r\n                                                        ]\r\n                                                    })\r\n        function_calls = DEVELOPMENT_PLAN\r\n\r\n        # Retry on bad LLM responses\r\n        # mock_questionary = MockQuestionary(['', '', 'no'])\r\n\r\n        # with patch('utils.llm_connection.questionary', mock_questionary):\r\n        # When\r\n        response = create_gpt_chat_completion(convo.messages, '', project, function_calls=function_calls)\r\n\r\n        # Then\r\n        assert convo.messages[0]['content'].startswith('You are a tech lead in a software development agency')\r\n        assert convo.messages[1]['content'].startswith('You are working in a software development agency and a project manager and software architect approach you')\r\n\r\n        assert response is not None\r\n        response = parse_agent_response(response, function_calls)\r\n        assert_non_empty_string(response['plan'][0]['description'])\r\n        assert_non_empty_string(response['plan'][0]['programmatic_goal'])\r\n        assert_non_empty_string(response['plan'][0]['user_review_goal'])\r\n\r\n\r\n    # def test_break_down_development_task(self):\r\n    #     # Given\r\n    #     agent = Developer(project)\r\n    #     convo = AgentConvo(agent)\r\n    #     # convo.construct_and_add_message_from_prompt('architecture/technologies.prompt',\r\n    #     #                                             {\r\n    #     #                                                 'name': 'Test App',\r\n    #     #                                                 'app_summary': '''\r\n    #\r\n    #     function_calls = DEV_STEPS\r\n    #\r\n    #     # When\r\n    #     response = create_gpt_chat_completion(convo.messages, '', function_calls=function_calls)\r\n    #     # response = {'function_calls': {\r\n    #     #     'name': 'break_down_development_task',\r\n    #     #     'arguments': {'tasks': [{'type': 'command', 'description': 'Run the app'}]}\r\n    #     # }}\r\n    #     response = parse_agent_response(response, function_calls)\r\n    #\r\n    #     # Then\r\n    #     # assert len(convo.messages) == 2\r\n    #     assert response == ([{'type': 'command', 'description': 'Run the app'}], 'more_tasks')\r\n\r\n    # def _create_convo(self, agent):\r\n    #     convo = AgentConvo(agent)\r\n","file":"/pilot/utils/test_llm_connection.py","language":"python","fileHash":"82c24499d009771d486d5ea5f39243dbdd55be4a542db5f7f2527df11965690d","hash":"82c24499d009771d486d5ea5f39243dbdd55be4a542db5f7f2527df11965690d","processedContent":"import builtins\r\nfrom json import JSONDecodeError\r\n\"\"\"\nscip-python python python-stdlib 3.11 json/__init__:: undefined\nscip-python python temp indexer `json.decoder`/JSONDecodeError#: undefined\n\"\"\"\n\r\nimport pytest\r\nfrom unittest.mock import call, patch, Mock\r #undefined\nfrom dotenv import load_dotenv\r\n\"\"\"\nscip-python python python-dotenv 1.0.0 dotenv/__init__:: undefined\nscip-python python python-dotenv 1.0.0 `dotenv.main`/load_dotenv().: undefined\n\"\"\"\nfrom jsonschema import ValidationError\r #undefined\nfrom const.function_calls import ARCHITECTURE, DEVELOPMENT_PLAN\r\n\"\"\"\nscip-python python temp indexer `pilot.const.function_calls`/__init__:: The code is a collection of functions and definitions that are used to implement various tasks in a development process. It includes functions for processing user stories, tasks, technologies, commands, and files, as well as definitions for breaking down development tasks into smaller steps and implementing code changes.\nscip-python python temp indexer `pilot.const.function_calls`/ARCHITECTURE.: undefined\nscip-python python temp indexer `pilot.const.function_calls`/DEVELOPMENT_PLAN.: undefined\n\"\"\"\nfrom helpers.AgentConvo import AgentConvo\r\n\"\"\"\nscip-python python temp indexer `pilot.helpers.agentconvo`/__init__:: The code defines a class called `AgentConvo` that represents a conversation with an agent, including functions for sending and receiving messages, formatting and rendering prompts, and error handling for GPT model token limits.\nscip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#: This code defines a class called `AgentConvo` that represents a conversation with an agent. It includes functions for sending and receiving messages, as well as formatting and rendering prompts. The code also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\n\"\"\"\nfrom helpers.Project import Project\r\n\"\"\"\nscip-python python temp indexer `pilot.helpers.project`/__init__:: The code defines a Python class called \"Project\" that represents a software development project, with functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\nscip-python python temp indexer `pilot.helpers.project`/Project#: The code defines a class called \"Project\" that represents a software development project. It includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\n\"\"\"\nfrom helpers.agents.Architect import Architect\r\n\"\"\"\nscip-python python temp indexer `pilot.helpers.agents.architect`/__init__:: The code defines a class called \"Architect\" that represents a person working on a specific project, with attributes for role and project. It also includes functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model.\nscip-python python temp indexer `pilot.helpers.agents.architect`/Architect#: This code defines a class called \"Architect\" that represents a person who is working on a specific project. The class has two attributes: \"role\" and \"project\". The \"role\" attribute specifies the type of work the agent is doing, and the \"project\" attribute specifies the project they are working on. The class also has a constructor that initializes an object with a role (architect) and a project, and sets the object's convo_architecture attribute to None.\n\"\"\"\nfrom helpers.agents.TechLead import TechLead\r\n\"\"\"\nscip-python python temp indexer `pilot.helpers.agents.techlead`/__init__:: The code defines a class called \"TechLead\" that represents a person working on a specific project, and includes functions for retrieving progress data, updating the status of the app in the database, and saving the development plan for the app.\nscip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#: This code defines a class called \"TechLead\" that represents a person who is working on a specific project. The class has two attributes: \"role\" and \"project\". The \"role\" attribute specifies the type of work the agent is doing, and the \"project\" attribute specifies the project they are working on. The class also defines several functions, including `create_development_plan`, `create_feature_plan`, and `create_feature_summary`, which retrieve progress data for an app from a database, update the status of the app in the database, and save the development plan for the app.\n\"\"\"\nfrom utils.function_calling import parse_agent_response, FunctionType\r\n\"\"\"\nscip-python python temp indexer `pilot.utils.function_calling`/__init__:: The code defines a class called `JsonPrompter` that generates a prompt for a chatbot to answer a user's question. It takes a list of functions and a string representing the function to call as arguments, and returns a JSON schema with the parameters of the selected function.\nscip-python python temp indexer `pilot.utils.function_calling`/parse_agent_response().: This code defines a function called \"parse_agent_response\" that takes two arguments: \"response\" and \"function_calls\". If \"function_calls\" is not None, the function returns the response as a JSON object. Otherwise, it returns the response as a string.\nscip-python python temp indexer `pilot.utils.function_calling`/FunctionType#: This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It is used to define the structure of a function in a typed dictionary.\n\"\"\"\nfrom test.test_utils import assert_non_empty_string\r\n\"\"\"\nscip-python python temp indexer `pilot.test.test_utils`/__init__:: The code defines two functions: `mock_terminal_size` and `assert_non_empty_string`. The first function returns a mock object with a fixed width of 80 columns, while the second function checks that a value is a non-empty string by checking if it's an instance of the `str` class and has a length greater than 0.\nscip-python python temp indexer `pilot.test.test_utils`/assert_non_empty_string().: This code checks that a value is a non-empty string. It does this by first checking that the value is an instance of the `str` class, and then checking that the length of the string is greater than 0.\n\"\"\"\nfrom test.mock_questionary import MockQuestionary\r\n\"\"\"\nscip-python python temp indexer `pilot.test.mock_questionary`/__init__:: This code defines a class called \"MockQuestionary\" that allows users to ask questions and receive answers in a mock interview setting.\nscip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#: This code defines a class called \"MockQuestionary\" that allows users to ask questions and receive answers in a mock interview setting. The class has several methods, including \"__init__\", \"text\", \"ask\", and \"unsafe_ask\". The purpose of the code is to provide a way to simulate a user asking questions and receiving answers in a mock interview setting.\n\"\"\"\nfrom utils.llm_connection import create_gpt_chat_completion, stream_gpt_completion, \\\r\n\"\"\"\nscip-python python temp indexer `pilot.utils.llm_connection`/__init__:: The code defines a Python script that uses the OpenAI GPT language model to generate responses to user prompts. It includes functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model.\nscip-python python temp indexer `pilot.utils.llm_connection`/create_gpt_chat_completion().: This code defines a function called `create_gpt_chat_completion` that takes in a list of messages, a request type, and a project. It then uses the OpenAI GPT language model to generate a response based on the input messages. The function also includes error handling for when the number of tokens in a message exceeds the maximum allowed by the GPT model.\nscip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().: The code defines a function called `stream_gpt_completion` that retrieves and renders a prompt template based on the provided name. It uses Jinja2 to render the templates with no variables, and stores the rendered content in a dictionary called `prompts_components`.\n\"\"\"\n    assert_json_response, assert_json_schema, clean_json_response, retry_on_exception\r\n    \"\"\"\n    scip-python python temp indexer `pilot.utils.llm_connection`/assert_json_response().: This code checks if the response from an API call is in JSON format. If it's not, it logs an error and raises a ValueError.\n    scip-python python temp indexer `pilot.utils.llm_connection`/assert_json_schema().: This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It is used to define the structure of a function in a typed dictionary. The code then iterates over a list of functions and validates each one against a JSON schema using the `validate()` function from the `json` module.\n    scip-python python temp indexer `pilot.utils.llm_connection`/clean_json_response().: This code takes a JSON response and cleans it up by removing unnecessary characters and converting booleans to lowercase strings.\n    scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().: This code defines a decorator function called `retry_on_exception` that retries a function if it encounters an exception, and provides a way for users to retry the request if they want to.\n    \"\"\"\nfrom main import get_custom_print\r\n\"\"\"\nscip-python python temp indexer `pilot.main`/__init__:: The code is a Python script that sets up a custom logger, checks for the existence of a database and tables, creates them if necessary, and retrieves command-line arguments to set up the environment for the Pilot app. It also defines a class called \"Project\" that represents a software development project, and includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\nscip-python python temp indexer `pilot.utils.custom_print`/get_custom_print().: This code defines a function called `get_custom_print` that returns a tuple of two functions: `print_to_external_process` and `local_print`. The first function sends a message to an external process over a network connection, while the second function prints the message to the console.\n\"\"\"\n\r\nload_dotenv()\r #undefined\n\r\nproject = Project({'app_id': 'test-app'}, current_step='test', enable_dot_pilot_gpt=False)\r #The code defines a class called \"Project\" that represents a software development project. It includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks.\n\r\n\r\ndef test_clean_json_response_True_False():\r\n    \"\"\"This code takes a JSON response and cleans it up by removing unnecessary characters and converting booleans to lowercase strings.\"\"\"\n    pass\n\r\n\r\ndef test_clean_json_response_boolean_in_python():\r\n    \"\"\"This code takes a JSON response and cleans it up by removing unnecessary characters and converting booleans to lowercase strings.\"\"\"\n    pass\n\r\n\r\n@patch('utils.llm_connection.styled_text', return_value='')\r\nclass TestRetryOnException:\r\n    \"\"\"The code defines a set of unit tests for a function that validates JSON data against a schema. It checks for various errors such as incomplete or invalid data, and notifies the user of any issues found.\"\"\"\n    pass\n\r\n\r\nclass TestSchemaValidation:\r\n    \"\"\"This code defines a custom data type called \"FunctionType\" that represents a function with a name, description, and parameters. It is used to define the structure of a function in a typed dictionary.\"\"\"\n    pass\n\r\n\r\nclass TestLlmConnection:\r\n    \"\"\"The code defines a class called \"Architect\" that represents a person working on a specific project, and includes functions for sending and receiving messages. It also defines a function called \"create_gpt_chat_completion\" that uses the OpenAI GPT language model to generate a response based on input messages.\"\"\"\n    pass\n\r\n\r\n    # def test_break_down_development_task(self):\r\n    #     # Given\r\n    #     agent = Developer(project)\r\n    #     convo = AgentConvo(agent)\r\n    #     # convo.construct_and_add_message_from_prompt('architecture/technologies.prompt',\r\n    #     #                                             {\r\n    #     #                                                 'name': 'Test App',\r\n    #     #                                                 'app_summary': '''\r\n    #\r\n    #     function_calls = DEV_STEPS\r\n    #\r\n    #     # When\r\n    #     response = create_gpt_chat_completion(convo.messages, '', function_calls=function_calls)\r\n    #     # response = {'function_calls': {\r\n    #     #     'name': 'break_down_development_task',\r\n    #     #     'arguments': {'tasks': [{'type': 'command', 'description': 'Run the app'}]}\r\n    #     # }}\r\n    #     response = parse_agent_response(response, function_calls)\r\n    #\r\n    #     # Then\r\n    #     # assert len(convo.messages) == 2\r\n    #     assert response == ([{'type': 'command', 'description': 'Run the app'}], 'more_tasks')\r\n\r\n    # def _create_convo(self, agent):\r\n    #     convo = AgentConvo(agent)\r\n","documentation":"The code is a Python script that sets up a custom logger, checks for the existence of a database and tables, creates them if necessary, and retrieves command-line arguments to set up the environment for the Pilot app. It also defines a class called \"Project\" that represents a software development project, and includes functions for retrieving and generating project descriptions, asking clarifying questions, generating project summaries, retrieving user stories, and retrieving user tasks."}},{"key":"scip-python python temp indexer `pilot.utils.test_llm_connection`/project.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.test_llm_connection`/project.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.test_utils`/TestShouldExecuteStep#","attributes":{"range":[3,0,18,55],"symbol":"scip-python python temp indexer `pilot.utils.test_utils`/TestShouldExecuteStep#","content":"class TestShouldExecuteStep:\r\n    def test_no_step_arg(self):\r\n        assert should_execute_step(None, 'project_description') is True\r\n        assert should_execute_step(None, 'architecture') is True\r\n        assert should_execute_step(None, 'coding') is True\r\n\r\n    def test_skip_step(self):\r\n        assert should_execute_step('architecture', 'project_description') is False\r\n        assert should_execute_step('architecture', 'architecture') is True\r\n        assert should_execute_step('architecture', 'coding') is True\r\n\r\n    def test_unknown_step(self):\r\n        assert should_execute_step('architecture', 'unknown') is False\r\n        assert should_execute_step('unknown', 'project_description') is False\r\n        assert should_execute_step('unknown', None) is False\r\n        assert should_execute_step(None, None) is False","file":"/pilot/utils/test_utils.py","language":"python","fileHash":"f9b92ed0a57ffedd31b32419b415dec3b63e8936d6154e9667213e84deaa841a","hash":"ce72e75a6181ed015de071b9b48e433f014d0d8cf660b45d4661ac688b929c4a","processedContent":"class TestShouldExecuteStep:\r\n    def test_no_step_arg(self):\r\n        \"\"\"This code checks if the current step should be executed based on the argument passed in and the current step. It returns true if the current step is greater than or equal to the argument step.\"\"\"\n        pass\n\r\n    def test_skip_step(self):\r\n        \"\"\"The code checks if the current step should be executed based on the argument passed in and the current step. It returns true if the current step is greater than or equal to the argument step.\"\"\"\n        pass\n\r\n    def test_unknown_step(self):\r\n        assert should_execute_step('architecture', 'unknown') is False\r\n        assert should_execute_step('unknown', 'project_description') is False\r\n        assert should_execute_step('unknown', None) is False\r\n        assert should_execute_step(None, None) is False","documentation":"This code checks if the current step should be executed based on the argument passed in and the current step. It returns true if the current step is greater than or equal to the argument step."}},{"key":"scip-python python temp indexer `pilot.utils.test_utils`/TestShouldExecuteStep#test_no_step_arg().","attributes":{"range":[4,4,7,58],"symbol":"scip-python python temp indexer `pilot.utils.test_utils`/TestShouldExecuteStep#test_no_step_arg().","content":"def test_no_step_arg(self):\r\n        assert should_execute_step(None, 'project_description') is True\r\n        assert should_execute_step(None, 'architecture') is True\r\n        assert should_execute_step(None, 'coding') is True","file":"/pilot/utils/test_utils.py","language":"python","fileHash":"f9b92ed0a57ffedd31b32419b415dec3b63e8936d6154e9667213e84deaa841a","hash":"009151ac762aa2c269efb04179cb59b6b3167ff77c2708da0c07e9355685e3be","processedContent":"def test_no_step_arg(self):\r\n        assert should_execute_step(None, 'project_description') is True\r #This code checks if the current step should be executed based on the argument passed in and the current step. It returns true if the current step is greater than or equal to the argument step.\n        assert should_execute_step(None, 'architecture') is True\r #This code checks if the current step should be executed based on the argument passed in and the current step. It returns true if the current step is greater than or equal to the argument step.\n        assert should_execute_step(None, 'coding') is True","documentation":"This code checks if the current step should be executed based on the argument passed in and the current step. It returns true if the current step is greater than or equal to the argument step."}},{"key":"scip-python python temp indexer `pilot.utils.test_utils`/TestShouldExecuteStep#test_skip_step().","attributes":{"range":[9,4,12,68],"symbol":"scip-python python temp indexer `pilot.utils.test_utils`/TestShouldExecuteStep#test_skip_step().","content":"def test_skip_step(self):\r\n        assert should_execute_step('architecture', 'project_description') is False\r\n        assert should_execute_step('architecture', 'architecture') is True\r\n        assert should_execute_step('architecture', 'coding') is True","file":"/pilot/utils/test_utils.py","language":"python","fileHash":"f9b92ed0a57ffedd31b32419b415dec3b63e8936d6154e9667213e84deaa841a","hash":"2d15af98a3fee14eaf6fc69edf98d4194657e3f3750f3a360c68312b69d21a60","processedContent":"def test_skip_step(self):\r\n        assert should_execute_step('architecture', 'project_description') is False\r #This code checks if the current step should be executed based on the argument passed in and the current step. It returns true if the current step is greater than or equal to the argument step.\n        assert should_execute_step('architecture', 'architecture') is True\r #This code checks if the current step should be executed based on the argument passed in and the current step. It returns true if the current step is greater than or equal to the argument step.\n        assert should_execute_step('architecture', 'coding') is True","documentation":"The code checks if the current step should be executed based on the argument passed in and the current step. It returns true if the current step is greater than or equal to the argument step."}},{"key":"scip-python python temp indexer `pilot.utils.test_utils`/TestShouldExecuteStep#test_unknown_step().","attributes":{"range":[14,4,18,55],"symbol":"scip-python python temp indexer `pilot.utils.test_utils`/TestShouldExecuteStep#test_unknown_step().","content":"def test_unknown_step(self):\r\n        assert should_execute_step('architecture', 'unknown') is False\r\n        assert should_execute_step('unknown', 'project_description') is False\r\n        assert should_execute_step('unknown', None) is False\r\n        assert should_execute_step(None, None) is False","file":"/pilot/utils/test_utils.py","language":"python","fileHash":"f9b92ed0a57ffedd31b32419b415dec3b63e8936d6154e9667213e84deaa841a","hash":"df6da360f732c86553ba5f7d18eb98b30e17fbe43cf8cb0ba08945b40afd58c6","processedContent":"def test_unknown_step(self):\r\n        assert should_execute_step('architecture', 'unknown') is False\r #This code checks if the current step should be executed based on the argument passed in and the current step. It returns true if the current step is greater than or equal to the argument step.\n        assert should_execute_step('unknown', 'project_description') is False\r #This code checks if the current step should be executed based on the argument passed in and the current step. It returns true if the current step is greater than or equal to the argument step.\n        assert should_execute_step('unknown', None) is False\r #This code checks if the current step should be executed based on the argument passed in and the current step. It returns true if the current step is greater than or equal to the argument step.\n        assert should_execute_step(None, None) is False","documentation":"The code checks if the current step should be executed based on the argument passed in and the current step. It returns true if the current step is greater than or equal to the argument step."}},{"key":"scip-python python temp indexer `pilot.utils.test_utils`/__init__:","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.test_utils`/__init__:","range":[0,0,19,0],"content":"from .utils import should_execute_step\r\n\r\n\r\nclass TestShouldExecuteStep:\r\n    def test_no_step_arg(self):\r\n        assert should_execute_step(None, 'project_description') is True\r\n        assert should_execute_step(None, 'architecture') is True\r\n        assert should_execute_step(None, 'coding') is True\r\n\r\n    def test_skip_step(self):\r\n        assert should_execute_step('architecture', 'project_description') is False\r\n        assert should_execute_step('architecture', 'architecture') is True\r\n        assert should_execute_step('architecture', 'coding') is True\r\n\r\n    def test_unknown_step(self):\r\n        assert should_execute_step('architecture', 'unknown') is False\r\n        assert should_execute_step('unknown', 'project_description') is False\r\n        assert should_execute_step('unknown', None) is False\r\n        assert should_execute_step(None, None) is False\r\n","file":"/pilot/utils/test_utils.py","language":"python","fileHash":"f9b92ed0a57ffedd31b32419b415dec3b63e8936d6154e9667213e84deaa841a","hash":"f9b92ed0a57ffedd31b32419b415dec3b63e8936d6154e9667213e84deaa841a","processedContent":"from .utils import should_execute_step\r\n\"\"\"\nscip-python python temp indexer `pilot.utils.utils`/__init__:: The code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt.\nscip-python python temp indexer `pilot.utils.utils`/should_execute_step().: This code checks if the current step should be executed based on the argument passed in and the current step. It returns true if the current step is greater than or equal to the argument step.\n\"\"\"\n\r\n\r\nclass TestShouldExecuteStep:\r\n    \"\"\"This code checks if the current step should be executed based on the argument passed in and the current step. It returns true if the current step is greater than or equal to the argument step.\"\"\"\n    pass\n","documentation":"This code defines a series of functions for retrieving and saving user input, styling text, and asking for feedback on the performance of a language model. It also includes functions for clearing the input buffer and prompting the user to allow the app to store their initial prompt."}},{"key":"scip-python python temp indexer `pilot.utils.utils`/get_prompt_components().","attributes":{"range":[52,0,83,42],"symbol":"scip-python python temp indexer `pilot.utils.utils`/get_prompt_components().","content":"def get_prompt_components(data):\n    # This function reads and renders all prompts inside /prompts/components and returns them in dictionary\n\n    # Create an empty dictionary to store the file contents.\n    prompts_components = {}\n    data.update({\n        'MAX_QUESTIONS': MAX_QUESTIONS,\n        'END_RESPONSE': END_RESPONSE\n    })\n\n    # Create a FileSystemLoader\n    prompts_path = os.path.join(os.path.dirname(__file__), '..', 'prompts/components')\n    file_loader = FileSystemLoader(prompts_path)\n\n    # Create the Jinja2 environment\n    env = Environment(loader=file_loader)\n\n    # Get the list of template names\n    template_names = env.list_templates()\n\n    # For each template, load and store its content\n    for template_name in template_names:\n        # Get the filename without extension as the dictionary key.\n        file_key = os.path.splitext(template_name)[0]\n\n        # Load the template and render it with no variables\n        file_content = env.get_template(template_name).render(data)\n\n        # Store the file content in the dictionary\n        prompts_components[file_key] = file_content\n\n    return data.update(prompts_components)","file":"/pilot/utils/utils.py","language":"python","fileHash":"ffe0ebca72a8999ffb0084622af3eb69767ceda2cc6d7e7e68e65ebb2b4408c3","hash":"55c34cf7d83f7dcd9dcbd32b97c62b9131be45349b2f0f7b73bd0a2473935d47","processedContent":"def get_prompt_components(data):\n    # This function reads and renders all prompts inside /prompts/components and returns them in dictionary\n\n    # Create an empty dictionary to store the file contents.\n    prompts_components = {}\n    data.update({\n        'MAX_QUESTIONS': MAX_QUESTIONS, #undefined\n        'END_RESPONSE': END_RESPONSE #undefined\n    })\n\n    # Create a FileSystemLoader\n    prompts_path = os.path.join(os.path.dirname(__file__), '..', 'prompts/components')\n    \"\"\"\n    scip-python python python-stdlib 3.11 os/__init__:: undefined\n    scip-python python python-stdlib 3.11 os/__init__:: undefined\n    scip-python python python-stdlib 3.11 os/path.: undefined\n    scip-python python python-stdlib 3.11 os/path.: undefined\n    scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n    scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n    scip-python python temp indexer `pilot.utils.utils`/: undefined\n    \"\"\"\n    file_loader = FileSystemLoader(prompts_path)\n\n    # Create the Jinja2 environment\n    env = Environment(loader=file_loader)\n\n    # Get the list of template names\n    template_names = env.list_templates()\n\n    # For each template, load and store its content\n    for template_name in template_names:\n        # Get the filename without extension as the dictionary key.\n        file_key = os.path.splitext(template_name)[0]\n        \"\"\"\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/path.: undefined\n        scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n        \"\"\"\n\n        # Load the template and render it with no variables\n        file_content = env.get_template(template_name).render(data)\n\n        # Store the file content in the dictionary\n        prompts_components[file_key] = file_content\n\n    return data.update(prompts_components)","documentation":"This code defines a function called `get_prompt_components` that reads and renders all prompts inside the `/prompts/components` directory and returns them in a dictionary. It uses Jinja2 to render the templates with no variables, and stores the rendered content in a dictionary called `prompts_components`."}},{"key":"scip-python python temp indexer `pilot.utils.utils`/find_role_from_step().","attributes":{"range":[99,0,104,26],"symbol":"scip-python python temp indexer `pilot.utils.utils`/find_role_from_step().","content":"def find_role_from_step(target):\n    for role, values in ROLES.items():\n        if target in values:\n            return role\n\n    return 'product_owner'","file":"/pilot/utils/utils.py","language":"python","fileHash":"ffe0ebca72a8999ffb0084622af3eb69767ceda2cc6d7e7e68e65ebb2b4408c3","hash":"1b00463d85ed6aa765620a40cc110f1b19bd541689c8f46b8061f2f0cff04f78","processedContent":"def find_role_from_step(target):\n    for role, values in ROLES.items(): #undefined\n        if target in values:\n            return role\n\n    return 'product_owner'","documentation":"This code defines a function called `find_role_from_step` that takes a target value as an argument and returns the corresponding role from a dictionary of roles. The function iterates over the dictionary's key-value pairs, checks if the target value is in the values list for each key, and returns the corresponding role if it finds a match. If no match is found, it returns a default role of \"product_owner\"."}},{"key":"scip-python python temp indexer `pilot.utils.utils`/hash_data().","attributes":{"range":[156,0,158,54],"symbol":"scip-python python temp indexer `pilot.utils.utils`/hash_data().","content":"def hash_data(data):\n    serialized_data = json.dumps(replace_functions(data), sort_keys=True).encode('utf-8')\n    return hashlib.sha256(serialized_data).hexdigest()","file":"/pilot/utils/utils.py","language":"python","fileHash":"ffe0ebca72a8999ffb0084622af3eb69767ceda2cc6d7e7e68e65ebb2b4408c3","hash":"3ae4909fce4b375a793cfb1ec39b3b594b9ba041a72e2f8b57e52e33c6cfc892","processedContent":"def hash_data(data):\n    serialized_data = json.dumps(replace_functions(data), sort_keys=True).encode('utf-8')\n    \"\"\"\n    scip-python python python-stdlib 3.11 json/__init__:: undefined\n    scip-python python python-stdlib 3.11 json/dumps().: undefined\n    scip-python python temp indexer `pilot.utils.utils`/replace_functions().: This code is a recursive function that takes an object as input and replaces any functions with the string \"function\". It does this by checking the type of the object, and if it's a dictionary or list, it recursively calls itself on each item in the collection. If the object is not a function, it returns the original object.\n    \"\"\"\n    return hashlib.sha256(serialized_data).hexdigest()","documentation":"This code takes an object as input, replaces any functions with the string \"function\", and then hashes the resulting data using SHA-256."}},{"key":"scip-python python temp indexer `pilot.utils.utils`/replace_functions().","attributes":{"range":[161,0,169,18],"symbol":"scip-python python temp indexer `pilot.utils.utils`/replace_functions().","content":"def replace_functions(obj):\n    if isinstance(obj, dict):\n        return {k: replace_functions(v) for k, v in obj.items()}\n    elif isinstance(obj, list):\n        return [replace_functions(item) for item in obj]\n    elif callable(obj):\n        return \"function\"\n    else:\n        return obj","file":"/pilot/utils/utils.py","language":"python","fileHash":"ffe0ebca72a8999ffb0084622af3eb69767ceda2cc6d7e7e68e65ebb2b4408c3","hash":"d24df8520c698864a87bd33a40c20b4139f4ede98f0575d2ab21837ddf79eba3","processedContent":"def replace_functions(obj):\n    if isinstance(obj, dict):\n        return {k: replace_functions(v) for k, v in obj.items()}\n    elif isinstance(obj, list):\n        return [replace_functions(item) for item in obj]\n    elif callable(obj):\n        return \"function\"\n    else:\n        return obj","documentation":"This code is a recursive function that takes an object as input and replaces any functions with the string \"function\". It does this by checking the type of the object, and if it's a dictionary or list, it recursively calls itself on each item in the collection. If the object is not a function, it returns the original object."}},{"key":"scip-python python temp indexer `pilot.utils.utils`/fix_json_newlines().","attributes":{"range":[179,0,185,47],"symbol":"scip-python python temp indexer `pilot.utils.utils`/fix_json_newlines().","content":"def fix_json_newlines(s):\n    pattern = r'(\"(?:\\\\\\\\n|\\\\.|[^\"\\\\])*\")'\n\n    def replace_newlines(match):\n        return match.group(1).replace('\\n', '\\\\n')\n\n    return re.sub(pattern, replace_newlines, s)","file":"/pilot/utils/utils.py","language":"python","fileHash":"ffe0ebca72a8999ffb0084622af3eb69767ceda2cc6d7e7e68e65ebb2b4408c3","hash":"d2b43dffb2fa35bcf04630b1ae07d3fd754d80c5019ab041af72735d225213c0","processedContent":"def fix_json_newlines(s):\n    pattern = r'(\"(?:\\\\\\\\n|\\\\.|[^\"\\\\])*\")'\n\n    def replace_newlines(match):\n        \"\"\"This code replaces all newline characters in a string with the escape sequence \"\\\\n\".\"\"\"\n        pass\n\n    return re.sub(pattern, replace_newlines, s)","documentation":"This code fixes JSON strings by replacing all newline characters with the escape sequence \"\\\\n\"."}},{"key":"scip-python python temp indexer `pilot.utils.utils`/fix_json_newlines().replace_newlines().","attributes":{"range":[182,4,183,50],"symbol":"scip-python python temp indexer `pilot.utils.utils`/fix_json_newlines().replace_newlines().","content":"def replace_newlines(match):\n        return match.group(1).replace('\\n', '\\\\n')","file":"/pilot/utils/utils.py","language":"python","fileHash":"ffe0ebca72a8999ffb0084622af3eb69767ceda2cc6d7e7e68e65ebb2b4408c3","hash":"e8dee82340a37bf7783bed1d54c109e8c7c496a611b5ea8ee43ce579f4c1421e","processedContent":"def replace_newlines(match):\n        return match.group(1).replace('\\n', '\\\\n')","documentation":"This code replaces all newline characters in a string with the escape sequence \"\\\\n\"."}},{"key":"scip-python python temp indexer jinja2/__init__:","attributes":{"symbol":"scip-python python temp indexer jinja2/__init__:","language":"python"}},{"key":"scip-python python temp indexer `pilot.const.common`/ROLES.","attributes":{"symbol":"scip-python python temp indexer `pilot.const.common`/ROLES.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.utils`/","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.utils`/","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.utils`/prompts_path.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.utils`/prompts_path.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.utils`/file_loader.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.utils`/file_loader.","language":"python"}},{"key":"scip-python python temp indexer `pilot.utils.utils`/env.","attributes":{"symbol":"scip-python python temp indexer `pilot.utils.utils`/env.","language":"python"}},{"key":"scip-python python python-stdlib 3.11 platform/version().","attributes":{"symbol":"scip-python python python-stdlib 3.11 platform/version().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 platform/architecture().","attributes":{"symbol":"scip-python python python-stdlib 3.11 platform/architecture().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 platform/machine().","attributes":{"symbol":"scip-python python python-stdlib 3.11 platform/machine().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 platform/node().","attributes":{"symbol":"scip-python python python-stdlib 3.11 platform/node().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 platform/release().","attributes":{"symbol":"scip-python python python-stdlib 3.11 platform/release().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 platform/win32_ver().","attributes":{"symbol":"scip-python python python-stdlib 3.11 platform/win32_ver().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 platform/mac_ver().","attributes":{"symbol":"scip-python python python-stdlib 3.11 platform/mac_ver().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 datetime/date#","attributes":{"symbol":"scip-python python python-stdlib 3.11 datetime/date#","language":"python"}},{"key":"scip-python python python-stdlib 3.11 datetime/datetime#isoformat().","attributes":{"symbol":"scip-python python python-stdlib 3.11 datetime/datetime#isoformat().","language":"python"}},{"key":"scip-python python temp indexer `scripts.package_repo`/main().","attributes":{"range":[4,0,54,44],"symbol":"scip-python python temp indexer `scripts.package_repo`/main().","content":"def main():\n    # Define the base directory (one level up from /scripts)\n    base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n    repo_path = os.path.abspath(base_dir)\n\n    # Files to exclude from the repo temporarily while packaging\n    files_to_exclude = [\n        \"pilot/.env\",\n        \"pilot/gpt-pilot\"\n    ]\n\n    # Step 1: Move excluded files to /tmp\n    tmp_excluded_paths = []\n    for file in files_to_exclude:\n        source_path = os.path.join(repo_path, file)\n        if os.path.exists(source_path):\n            tmp_path = os.path.join(\"/tmp\", os.path.basename(file))\n            shutil.move(source_path, tmp_path)\n            tmp_excluded_paths.append((tmp_path, source_path))\n\n    # Items to package\n    items_to_package = [\n        \"pilot\",\n        \"scripts\",\n        \"Dockerfile\",\n        \"docker-compose.yml\",\n        \"LICENSE\",\n        \"README.md\",\n        \"requirements.txt\"\n    ]\n\n    # Step 2: Package the specified items using Python's zipfile module\n    parent_directory = os.path.dirname(base_dir)\n    archive_path = os.path.join(parent_directory, \"gpt-pilot-packaged.zip\")\n\n    with zipfile.ZipFile(archive_path, 'w', zipfile.ZIP_DEFLATED) as archive:\n        for item in items_to_package:\n            item_path = os.path.join(repo_path, item)\n            if os.path.isfile(item_path):\n                archive.write(item_path, item)\n            elif os.path.isdir(item_path):\n                for root, _, files in os.walk(item_path):\n                    for file in files:\n                        file_path = os.path.join(root, file)\n                        archive_path = os.path.relpath(file_path, repo_path)\n                        archive.write(file_path, archive_path)\n\n    # Step 3: Move the excluded files back\n    for tmp_path, orig_path in tmp_excluded_paths:\n        if os.path.exists(tmp_path):\n            shutil.move(tmp_path, orig_path)","file":"/scripts/package_repo.py","language":"python","fileHash":"db4a87d43b055199baefd8dc8b4f065f659c66efbdf0425b52c417b746420d17","hash":"8de05bfe38638b5c0bbb2b64d5481649189d5503b854d13025ea1965cbf002ae","processedContent":"def main():\n    # Define the base directory (one level up from /scripts)\n    base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n    \"\"\"\n    scip-python python python-stdlib 3.11 os/__init__:: undefined\n    scip-python python python-stdlib 3.11 os/__init__:: undefined\n    scip-python python python-stdlib 3.11 os/__init__:: undefined\n    scip-python python python-stdlib 3.11 os/path.: undefined\n    scip-python python python-stdlib 3.11 os/path.: undefined\n    scip-python python python-stdlib 3.11 os/path.: undefined\n    scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n    scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n    scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n    scip-python python temp indexer `scripts.package_repo`/: undefined\n    \"\"\"\n    repo_path = os.path.abspath(base_dir)\n    \"\"\"\n    scip-python python python-stdlib 3.11 os/__init__:: undefined\n    scip-python python python-stdlib 3.11 os/path.: undefined\n    scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n    \"\"\"\n\n    # Files to exclude from the repo temporarily while packaging\n    files_to_exclude = [\n        \"pilot/.env\",\n        \"pilot/gpt-pilot\"\n    ]\n\n    # Step 1: Move excluded files to /tmp\n    tmp_excluded_paths = []\n    for file in files_to_exclude:\n        source_path = os.path.join(repo_path, file)\n        \"\"\"\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/path.: undefined\n        scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n        \"\"\"\n        if os.path.exists(source_path):\n        \"\"\"\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/path.: undefined\n        scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n        \"\"\"\n            tmp_path = os.path.join(\"/tmp\", os.path.basename(file))\n            \"\"\"\n            scip-python python python-stdlib 3.11 os/__init__:: undefined\n            scip-python python python-stdlib 3.11 os/__init__:: undefined\n            scip-python python python-stdlib 3.11 os/path.: undefined\n            scip-python python python-stdlib 3.11 os/path.: undefined\n            scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n            scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n            \"\"\"\n            shutil.move(source_path, tmp_path)\n            \"\"\"\n            scip-python python python-stdlib 3.11 shutil/__init__:: undefined\n            scip-python python python-stdlib 3.11 shutil/move().: undefined\n            \"\"\"\n            tmp_excluded_paths.append((tmp_path, source_path))\n\n    # Items to package\n    items_to_package = [\n        \"pilot\",\n        \"scripts\",\n        \"Dockerfile\",\n        \"docker-compose.yml\",\n        \"LICENSE\",\n        \"README.md\",\n        \"requirements.txt\"\n    ]\n\n    # Step 2: Package the specified items using Python's zipfile module\n    parent_directory = os.path.dirname(base_dir)\n    \"\"\"\n    scip-python python python-stdlib 3.11 os/__init__:: undefined\n    scip-python python python-stdlib 3.11 os/path.: undefined\n    scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n    \"\"\"\n    archive_path = os.path.join(parent_directory, \"gpt-pilot-packaged.zip\")\n    \"\"\"\n    scip-python python python-stdlib 3.11 os/__init__:: undefined\n    scip-python python python-stdlib 3.11 os/path.: undefined\n    scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n    \"\"\"\n\n    with zipfile.ZipFile(archive_path, 'w', zipfile.ZIP_DEFLATED) as archive:\n    \"\"\"\n    scip-python python python-stdlib 3.11 zipfile/__init__:: undefined\n    scip-python python python-stdlib 3.11 zipfile/__init__:: undefined\n    scip-python python python-stdlib 3.11 zipfile/ZipFile#: undefined\n    scip-python python python-stdlib 3.11 zipfile/ZIP_DEFLATED.ZIP_DEFLATED.: undefined\n    \"\"\"\n        for item in items_to_package:\n            item_path = os.path.join(repo_path, item)\n            \"\"\"\n            scip-python python python-stdlib 3.11 os/__init__:: undefined\n            scip-python python python-stdlib 3.11 os/path.: undefined\n            scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n            \"\"\"\n            if os.path.isfile(item_path):\n            \"\"\"\n            scip-python python python-stdlib 3.11 os/__init__:: undefined\n            scip-python python python-stdlib 3.11 os/path.: undefined\n            scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n            \"\"\"\n                archive.write(item_path, item) #undefined\n            elif os.path.isdir(item_path):\n            \"\"\"\n            scip-python python python-stdlib 3.11 os/__init__:: undefined\n            scip-python python python-stdlib 3.11 os/path.: undefined\n            scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n            \"\"\"\n                for root, _, files in os.walk(item_path):\n                \"\"\"\n                scip-python python python-stdlib 3.11 os/__init__:: undefined\n                scip-python python python-stdlib 3.11 os/walk().: undefined\n                \"\"\"\n                    for file in files:\n                        file_path = os.path.join(root, file)\n                        \"\"\"\n                        scip-python python python-stdlib 3.11 os/__init__:: undefined\n                        scip-python python python-stdlib 3.11 os/path.: undefined\n                        scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n                        \"\"\"\n                        archive_path = os.path.relpath(file_path, repo_path)\n                        \"\"\"\n                        scip-python python python-stdlib 3.11 os/__init__:: undefined\n                        scip-python python python-stdlib 3.11 os/path.: undefined\n                        scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n                        \"\"\"\n                        archive.write(file_path, archive_path) #undefined\n\n    # Step 3: Move the excluded files back\n    for tmp_path, orig_path in tmp_excluded_paths:\n        if os.path.exists(tmp_path):\n        \"\"\"\n        scip-python python python-stdlib 3.11 os/__init__:: undefined\n        scip-python python python-stdlib 3.11 os/path.: undefined\n        scip-python python python-stdlib 3.11 posixpath/basename().: undefined\n        \"\"\"\n            shutil.move(tmp_path, orig_path)","documentation":"The code defines a function called `main` that packages the current directory into a ZIP file called `gpt-pilot-packaged.zip`, excluding certain files and directories specified in the code."}},{"key":"scip-python python temp indexer `scripts.package_repo`/__init__:","attributes":{"symbol":"scip-python python temp indexer `scripts.package_repo`/__init__:","range":[0,0,58,0],"content":"import os\nimport shutil\nimport zipfile\n\ndef main():\n    # Define the base directory (one level up from /scripts)\n    base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n    repo_path = os.path.abspath(base_dir)\n\n    # Files to exclude from the repo temporarily while packaging\n    files_to_exclude = [\n        \"pilot/.env\",\n        \"pilot/gpt-pilot\"\n    ]\n\n    # Step 1: Move excluded files to /tmp\n    tmp_excluded_paths = []\n    for file in files_to_exclude:\n        source_path = os.path.join(repo_path, file)\n        if os.path.exists(source_path):\n            tmp_path = os.path.join(\"/tmp\", os.path.basename(file))\n            shutil.move(source_path, tmp_path)\n            tmp_excluded_paths.append((tmp_path, source_path))\n\n    # Items to package\n    items_to_package = [\n        \"pilot\",\n        \"scripts\",\n        \"Dockerfile\",\n        \"docker-compose.yml\",\n        \"LICENSE\",\n        \"README.md\",\n        \"requirements.txt\"\n    ]\n\n    # Step 2: Package the specified items using Python's zipfile module\n    parent_directory = os.path.dirname(base_dir)\n    archive_path = os.path.join(parent_directory, \"gpt-pilot-packaged.zip\")\n\n    with zipfile.ZipFile(archive_path, 'w', zipfile.ZIP_DEFLATED) as archive:\n        for item in items_to_package:\n            item_path = os.path.join(repo_path, item)\n            if os.path.isfile(item_path):\n                archive.write(item_path, item)\n            elif os.path.isdir(item_path):\n                for root, _, files in os.walk(item_path):\n                    for file in files:\n                        file_path = os.path.join(root, file)\n                        archive_path = os.path.relpath(file_path, repo_path)\n                        archive.write(file_path, archive_path)\n\n    # Step 3: Move the excluded files back\n    for tmp_path, orig_path in tmp_excluded_paths:\n        if os.path.exists(tmp_path):\n            shutil.move(tmp_path, orig_path)\n\nif __name__ == \"__main__\":\n    main()\n","file":"/scripts/package_repo.py","language":"python","fileHash":"db4a87d43b055199baefd8dc8b4f065f659c66efbdf0425b52c417b746420d17","hash":"db4a87d43b055199baefd8dc8b4f065f659c66efbdf0425b52c417b746420d17","processedContent":"import os #undefined\nimport shutil #undefined\nimport zipfile #undefined\n\ndef main():\n    \"\"\"The code defines a function called `main` that packages the current directory into a ZIP file called `gpt-pilot-packaged.zip`, excluding certain files and directories specified in the code.\"\"\"\n    pass\n\nif __name__ == \"__main__\": #undefined\n    main() #The code defines a function called `main` that packages the current directory into a ZIP file called `gpt-pilot-packaged.zip`, excluding certain files and directories specified in the code.\n","documentation":"The code packages the current directory into a ZIP file called `gpt-pilot-packaged.zip`, excluding certain files and directories specified in the code."}},{"key":"scip-python python python-stdlib 3.11 shutil/__init__:","attributes":{"symbol":"scip-python python python-stdlib 3.11 shutil/__init__:","language":"python"}},{"key":"scip-python python python-stdlib 3.11 zipfile/__init__:","attributes":{"symbol":"scip-python python python-stdlib 3.11 zipfile/__init__:","language":"python"}},{"key":"scip-python python temp indexer `scripts.package_repo`/","attributes":{"symbol":"scip-python python temp indexer `scripts.package_repo`/","language":"python"}},{"key":"scip-python python python-stdlib 3.11 shutil/move().","attributes":{"symbol":"scip-python python python-stdlib 3.11 shutil/move().","language":"python"}},{"key":"scip-python python python-stdlib 3.11 zipfile/ZipFile#","attributes":{"symbol":"scip-python python python-stdlib 3.11 zipfile/ZipFile#","language":"python"}},{"key":"scip-python python python-stdlib 3.11 zipfile/ZIP_DEFLATED.ZIP_DEFLATED.","attributes":{"symbol":"scip-python python python-stdlib 3.11 zipfile/ZIP_DEFLATED.ZIP_DEFLATED.","language":"python"}},{"key":"scip-python python python-stdlib 3.11 zipfile/ZipFile#write().","attributes":{"symbol":"scip-python python python-stdlib 3.11 zipfile/ZipFile#write().","language":"python"}}],"edges":[{"key":"geid_128_0","source":"scip-typescript npm . . pilot/const/`convert_to_playground_convo.js`/","target":"scip-typescript npm . . pilot/const/`convert_to_playground_convo.js`/fill_playground().","attributes":{"type":"defines","at":[6,0,44,1]}},{"key":"geid_128_1","source":"scip-typescript npm . . pilot/const/`convert_to_playground_convo.js`/","target":"scip-typescript npm . . pilot/const/`convert_to_playground_convo.js`/sleep().","attributes":{"type":"defines","at":[2,0,4,1]}},{"key":"geid_128_2","source":"scip-typescript npm . . pilot/const/`convert_to_playground_convo.js`/sleep().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`timers.d.ts`/`\"timers\"`/global/setTimeout().","attributes":{"type":"uses","at":[3,32,3,42]}},{"key":"geid_128_3","source":"scip-typescript npm . . pilot/const/`convert_to_playground_convo.js`/sleep().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`timers.d.ts`/`\"timers\"`/global/setTimeout/","attributes":{"type":"uses","at":[3,32,3,42]}},{"key":"geid_128_4","source":"scip-typescript npm . . pilot/const/`convert_to_playground_convo.js`/fill_playground().","target":"scip-typescript npm . . pilot/const/`convert_to_playground_convo.js`/sleep().","attributes":{"type":"uses","at":[13,14,13,19]}},{"key":"geid_128_5","source":"scip-typescript npm . . pilot/const/`convert_to_playground_convo.js`/fill_playground().","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/Event#","attributes":{"type":"uses","at":[20,33,20,38]}},{"key":"geid_128_6","source":"scip-typescript npm . . pilot/const/`convert_to_playground_convo.js`/fill_playground().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`dom-events.d.ts`/global/Event#","attributes":{"type":"uses","at":[20,33,20,38]}},{"key":"geid_128_7","source":"scip-typescript npm . . pilot/const/`convert_to_playground_convo.js`/fill_playground().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`dom-events.d.ts`/global/Event.","attributes":{"type":"uses","at":[20,33,20,38]}},{"key":"geid_128_8","source":"scip-typescript npm . . pilot/const/`convert_to_playground_convo.js`/fill_playground().","target":"scip-typescript npm . . pilot/const/`convert_to_playground_convo.js`/sleep().","attributes":{"type":"uses","at":[32,14,32,19]}},{"key":"geid_128_9","source":"scip-typescript npm . . pilot/const/`convert_to_playground_convo.js`/fill_playground().","target":"scip-typescript npm . . pilot/const/`convert_to_playground_convo.js`/sleep().","attributes":{"type":"uses","at":[42,14,42,19]}},{"key":"geid_128_10","source":"scip-typescript npm . . pilot/const/`convert_to_playground_convo.js`/","target":"scip-typescript npm . . pilot/const/`convert_to_playground_convo.js`/fill_playground().","attributes":{"type":"uses","at":[46,0,46,15]}},{"key":"geid_128_11","source":"scip-typescript npm . . pilot/const/`convert_to_playground_convo.js`/","target":"scip-typescript npm . . pilot/const/`convert_to_playground_convo.js`/messages.","attributes":{"type":"uses","at":[46,16,46,24]}},{"key":"geid_130_0","source":"scip-python python temp indexer `pilot.db_init`/__init__:","target":"scip-python python python-dotenv 1.0.0 dotenv/__init__:","attributes":{"type":"uses","at":[0,5,0,11]}},{"key":"geid_130_1","source":"scip-python python temp indexer `pilot.db_init`/__init__:","target":"scip-python python python-dotenv 1.0.0 `dotenv.main`/load_dotenv().","attributes":{"type":"uses","at":[0,19,0,30]}},{"key":"geid_130_2","source":"scip-python python temp indexer `pilot.db_init`/__init__:","target":"scip-python python python-dotenv 1.0.0 `dotenv.main`/load_dotenv().","attributes":{"type":"uses","at":[1,0,1,11]}},{"key":"geid_130_3","source":"scip-python python temp indexer `pilot.db_init`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/__init__:","attributes":{"type":"uses","at":[2,5,2,22]}},{"key":"geid_130_4","source":"scip-python python temp indexer `pilot.db_init`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/create_tables().","attributes":{"type":"uses","at":[2,30,2,43]}},{"key":"geid_130_5","source":"scip-python python temp indexer `pilot.db_init`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/drop_tables().","attributes":{"type":"uses","at":[2,45,2,56]}},{"key":"geid_130_6","source":"scip-python python temp indexer `pilot.db_init`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/drop_tables().","attributes":{"type":"uses","at":[4,0,4,11]}},{"key":"geid_130_7","source":"scip-python python temp indexer `pilot.db_init`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/create_tables().","attributes":{"type":"uses","at":[5,0,5,13]}},{"key":"geid_130_8","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.main`/init().","attributes":{"type":"defines","at":[21,0,34,20]}},{"key":"geid_130_9","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python python-stdlib 3.11 __future__/__init__:","attributes":{"type":"uses","at":[1,5,1,15]}},{"key":"geid_130_10","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python python-stdlib 3.11 __future__/print_function.print_function.","attributes":{"type":"uses","at":[1,23,1,37]}},{"key":"geid_130_11","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python python-stdlib 3.11 __future__/unicode_literals.unicode_literals.","attributes":{"type":"uses","at":[1,39,1,55]}},{"key":"geid_130_12","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[3,7,3,9]}},{"key":"geid_130_13","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python python-stdlib 3.11 sys/__init__:","attributes":{"type":"uses","at":[5,7,5,10]}},{"key":"geid_130_14","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python python-stdlib 3.11 traceback/__init__:","attributes":{"type":"uses","at":[6,7,6,16]}},{"key":"geid_130_15","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python python-dotenv 1.0.0 dotenv/__init__:","attributes":{"type":"uses","at":[7,5,7,11]}},{"key":"geid_130_16","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python python-dotenv 1.0.0 `dotenv.main`/load_dotenv().","attributes":{"type":"uses","at":[7,19,7,30]}},{"key":"geid_130_17","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python python-dotenv 1.0.0 `dotenv.main`/load_dotenv().","attributes":{"type":"uses","at":[8,0,8,11]}},{"key":"geid_130_18","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/__init__:","attributes":{"type":"uses","at":[10,5,10,16]}},{"key":"geid_130_19","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/color_red.","attributes":{"type":"uses","at":[10,24,10,33]}},{"key":"geid_130_20","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.utils.custom_print`/__init__:","attributes":{"type":"uses","at":[11,5,11,23]}},{"key":"geid_130_21","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.utils.custom_print`/get_custom_print().","attributes":{"type":"uses","at":[11,31,11,47]}},{"key":"geid_130_22","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.helpers.project`/__init__:","attributes":{"type":"uses","at":[12,5,12,20]}},{"key":"geid_130_23","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.helpers.project`/Project#","attributes":{"type":"uses","at":[12,28,12,35]}},{"key":"geid_130_24","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.utils.arguments`/__init__:","attributes":{"type":"uses","at":[13,5,13,20]}},{"key":"geid_130_25","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.utils.arguments`/get_arguments().","attributes":{"type":"uses","at":[13,28,13,41]}},{"key":"geid_130_26","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.utils.exit`/__init__:","attributes":{"type":"uses","at":[14,5,14,15]}},{"key":"geid_130_27","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.utils.exit`/exit_gpt_pilot().","attributes":{"type":"uses","at":[14,23,14,37]}},{"key":"geid_130_28","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.logger.logger`/__init__:","attributes":{"type":"uses","at":[15,5,15,18]}},{"key":"geid_130_29","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[15,26,15,32]}},{"key":"geid_130_30","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/__init__:","attributes":{"type":"uses","at":[16,5,16,22]}},{"key":"geid_130_31","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/database_exists().","attributes":{"type":"uses","at":[16,30,16,45]}},{"key":"geid_130_32","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/create_database().","attributes":{"type":"uses","at":[16,47,16,62]}},{"key":"geid_130_33","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/tables_exist().","attributes":{"type":"uses","at":[16,64,16,76]}},{"key":"geid_130_34","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/create_tables().","attributes":{"type":"uses","at":[16,78,16,91]}},{"key":"geid_130_35","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/get_created_apps_with_steps().","attributes":{"type":"uses","at":[16,93,16,120]}},{"key":"geid_130_36","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.utils.settings`/__init__:","attributes":{"type":"uses","at":[18,5,18,19]}},{"key":"geid_130_37","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.utils.settings`/settings.","attributes":{"type":"uses","at":[18,27,18,35]}},{"key":"geid_130_38","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.utils.settings`/loader.","attributes":{"type":"uses","at":[18,37,18,43]}},{"key":"geid_130_39","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.utils.telemetry`/__init__:","attributes":{"type":"uses","at":[19,5,19,20]}},{"key":"geid_130_40","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.utils.telemetry`/telemetry.","attributes":{"type":"uses","at":[19,28,19,37]}},{"key":"geid_130_41","source":"scip-python python temp indexer `pilot.main`/init().","target":"scip-python python temp indexer `pilot.database.database`/database_exists().","attributes":{"type":"uses","at":[23,11,23,26]}},{"key":"geid_130_42","source":"scip-python python temp indexer `pilot.main`/init().","target":"scip-python python temp indexer `pilot.database.database`/create_database().","attributes":{"type":"uses","at":[24,8,24,23]}},{"key":"geid_130_43","source":"scip-python python temp indexer `pilot.main`/init().","target":"scip-python python temp indexer `pilot.database.database`/tables_exist().","attributes":{"type":"uses","at":[27,11,27,23]}},{"key":"geid_130_44","source":"scip-python python temp indexer `pilot.main`/init().","target":"scip-python python temp indexer `pilot.database.database`/create_tables().","attributes":{"type":"uses","at":[28,8,28,21]}},{"key":"geid_130_45","source":"scip-python python temp indexer `pilot.main`/init().","target":"scip-python python temp indexer `pilot.utils.arguments`/get_arguments().","attributes":{"type":"uses","at":[30,16,30,29]}},{"key":"geid_130_46","source":"scip-python python temp indexer `pilot.main`/init().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[32,4,32,10]}},{"key":"geid_130_47","source":"scip-python python temp indexer `pilot.main`/init().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[32,11,32,15]}},{"key":"geid_130_48","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.main`/","attributes":{"type":"uses","at":[37,3,37,11]}},{"key":"geid_130_49","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.main`/init().","attributes":{"type":"uses","at":[44,15,44,19]}},{"key":"geid_130_50","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.utils.custom_print`/get_custom_print().","attributes":{"type":"uses","at":[46,46,46,62]}},{"key":"geid_130_51","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.main`/args.","attributes":{"type":"uses","at":[46,63,46,67]}},{"key":"geid_130_52","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.main`/args.","attributes":{"type":"uses","at":[49,26,49,30]}},{"key":"geid_130_53","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[50,12,50,14]}},{"key":"geid_130_54","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python python-stdlib 3.11 os/environ.environ.","attributes":{"type":"uses","at":[50,15,50,22]}},{"key":"geid_130_55","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.main`/args.","attributes":{"type":"uses","at":[50,43,50,47]}},{"key":"geid_130_56","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.main`/args.","attributes":{"type":"uses","at":[51,46,51,50]}},{"key":"geid_130_57","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.main`/ipc_client_instance.","attributes":{"type":"uses","at":[52,15,52,34]}},{"key":"geid_130_58","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/get_created_apps_with_steps().","attributes":{"type":"uses","at":[53,35,53,62]}},{"key":"geid_130_59","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/get_created_apps_with_steps().","attributes":{"type":"uses","at":[60,62,60,89]}},{"key":"geid_130_60","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.main`/run_exit_fn.","attributes":{"type":"uses","at":[61,16,61,27]}},{"key":"geid_130_61","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.main`/args.","attributes":{"type":"uses","at":[62,28,62,32]}},{"key":"geid_130_62","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.test.ux_tests`/__init__:","attributes":{"type":"uses","at":[63,17,63,30]}},{"key":"geid_130_63","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.test.ux_tests`/run_test().","attributes":{"type":"uses","at":[63,38,63,46]}},{"key":"geid_130_64","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.test.ux_tests`/run_test().","attributes":{"type":"uses","at":[64,12,64,20]}},{"key":"geid_130_65","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.main`/args.","attributes":{"type":"uses","at":[64,21,64,25]}},{"key":"geid_130_66","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.main`/args.","attributes":{"type":"uses","at":[64,40,64,44]}},{"key":"geid_130_67","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.main`/run_exit_fn.","attributes":{"type":"uses","at":[65,12,65,23]}},{"key":"geid_130_68","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.utils.settings`/settings.","attributes":{"type":"uses","at":[67,15,67,23]}},{"key":"geid_130_69","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.utils.telemetry`/telemetry.","attributes":{"type":"uses","at":[68,16,68,25]}},{"key":"geid_130_70","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#setup().","attributes":{"type":"uses","at":[68,26,68,31]}},{"key":"geid_130_71","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.utils.settings`/loader.","attributes":{"type":"uses","at":[69,16,69,22]}},{"key":"geid_130_72","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#save().","attributes":{"type":"uses","at":[69,23,69,27]}},{"key":"geid_130_73","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.main`/args.","attributes":{"type":"uses","at":[71,15,71,19]}},{"key":"geid_130_74","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.utils.telemetry`/telemetry.","attributes":{"type":"uses","at":[72,16,72,25]}},{"key":"geid_130_75","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.main`/project.","attributes":{"type":"uses","at":[75,12,75,19]}},{"key":"geid_130_76","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.helpers.project`/Project#","attributes":{"type":"uses","at":[75,22,75,29]}},{"key":"geid_130_77","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.main`/args.","attributes":{"type":"uses","at":[75,30,75,34]}},{"key":"geid_130_78","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.main`/ipc_client_instance.","attributes":{"type":"uses","at":[75,56,75,75]}},{"key":"geid_130_79","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.main`/project.","attributes":{"type":"uses","at":[76,12,76,19]}},{"key":"geid_130_80","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","attributes":{"type":"uses","at":[76,20,76,25]}},{"key":"geid_130_81","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.main`/project.","attributes":{"type":"uses","at":[77,12,77,19]}},{"key":"geid_130_82","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.helpers.project`/Project#finish().","attributes":{"type":"uses","at":[77,20,77,26]}},{"key":"geid_130_83","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.utils.telemetry`/telemetry.","attributes":{"type":"uses","at":[78,12,78,21]}},{"key":"geid_130_84","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/color_red.","attributes":{"type":"uses","at":[80,14,80,23]}},{"key":"geid_130_85","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python python-stdlib 3.11 traceback/__init__:","attributes":{"type":"uses","at":[81,8,81,17]}},{"key":"geid_130_86","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python python-stdlib 3.11 traceback/print_exc().","attributes":{"type":"uses","at":[81,18,81,27]}},{"key":"geid_130_87","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/color_red.","attributes":{"type":"uses","at":[82,14,82,23]}},{"key":"geid_130_88","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.main`/ask_feedback.","attributes":{"type":"uses","at":[83,8,83,20]}},{"key":"geid_130_89","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.utils.telemetry`/telemetry.","attributes":{"type":"uses","at":[84,8,84,17]}},{"key":"geid_130_90","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.main`/run_exit_fn.","attributes":{"type":"uses","at":[86,11,86,22]}},{"key":"geid_130_91","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.utils.exit`/exit_gpt_pilot().","attributes":{"type":"uses","at":[87,12,87,26]}},{"key":"geid_130_92","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.main`/project.","attributes":{"type":"uses","at":[87,27,87,34]}},{"key":"geid_130_93","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python temp indexer `pilot.main`/ask_feedback.","attributes":{"type":"uses","at":[87,36,87,48]}},{"key":"geid_130_94","source":"scip-python python temp indexer `pilot.main`/__init__:","target":"scip-python python python-stdlib 3.11 sys/__init__:","attributes":{"type":"uses","at":[88,8,88,11]}},{"key":"geid_130_95","source":"scip-python python temp indexer `pilot.test_main_e2e`/__init__:","target":"scip-python python temp indexer `pilot.test_main_e2e`/test_end_to_end().","attributes":{"type":"defines","at":[24,0,59,23]}},{"key":"geid_130_96","source":"scip-python python temp indexer `pilot.test_main_e2e`/__init__:","target":"scip-python python temp indexer `pilot.test_main_e2e`/test_init().","attributes":{"type":"defines","at":[12,0,21,34]}},{"key":"geid_130_97","source":"scip-python python temp indexer `pilot.test_main_e2e`/__init__:","target":"scip-python python python-stdlib 3.11 `unittest.mock`/__init__:","attributes":{"type":"uses","at":[2,5,2,18]}},{"key":"geid_130_98","source":"scip-python python temp indexer `pilot.test_main_e2e`/__init__:","target":"scip-python python python-dotenv 1.0.0 dotenv/__init__:","attributes":{"type":"uses","at":[3,5,3,11]}},{"key":"geid_130_99","source":"scip-python python temp indexer `pilot.test_main_e2e`/__init__:","target":"scip-python python python-dotenv 1.0.0 `dotenv.main`/load_dotenv().","attributes":{"type":"uses","at":[3,19,3,30]}},{"key":"geid_130_100","source":"scip-python python temp indexer `pilot.test_main_e2e`/__init__:","target":"scip-python python python-dotenv 1.0.0 `dotenv.main`/load_dotenv().","attributes":{"type":"uses","at":[4,0,4,11]}},{"key":"geid_130_101","source":"scip-python python temp indexer `pilot.test_main_e2e`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/__init__:","attributes":{"type":"uses","at":[6,5,6,22]}},{"key":"geid_130_102","source":"scip-python python temp indexer `pilot.test_main_e2e`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/create_tables().","attributes":{"type":"uses","at":[6,30,6,43]}},{"key":"geid_130_103","source":"scip-python python temp indexer `pilot.test_main_e2e`/__init__:","target":"scip-python python temp indexer `pilot.helpers.project`/__init__:","attributes":{"type":"uses","at":[7,5,7,20]}},{"key":"geid_130_104","source":"scip-python python temp indexer `pilot.test_main_e2e`/__init__:","target":"scip-python python temp indexer `pilot.helpers.project`/Project#","attributes":{"type":"uses","at":[7,28,7,35]}},{"key":"geid_130_105","source":"scip-python python temp indexer `pilot.test_main_e2e`/__init__:","target":"scip-python python temp indexer `pilot.test.mock_questionary`/__init__:","attributes":{"type":"uses","at":[8,5,8,26]}},{"key":"geid_130_106","source":"scip-python python temp indexer `pilot.test_main_e2e`/__init__:","target":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#","attributes":{"type":"uses","at":[8,34,8,49]}},{"key":"geid_130_107","source":"scip-python python temp indexer `pilot.test_main_e2e`/__init__:","target":"scip-python python temp indexer `pilot.main`/__init__:","attributes":{"type":"uses","at":[9,5,9,10]}},{"key":"geid_130_108","source":"scip-python python temp indexer `pilot.test_main_e2e`/__init__:","target":"scip-python python temp indexer `pilot.main`/init().","attributes":{"type":"uses","at":[9,18,9,22]}},{"key":"geid_130_109","source":"scip-python python temp indexer `pilot.test_main_e2e`/__init__:","target":"scip-python python temp indexer `pilot.utils.custom_print`/get_custom_print().","attributes":{"type":"uses","at":[9,24,9,40]}},{"key":"geid_130_110","source":"scip-python python temp indexer `pilot.test_main_e2e`/test_init().","target":"scip-python python temp indexer `pilot.main`/init().","attributes":{"type":"uses","at":[14,11,14,15]}},{"key":"geid_130_111","source":"scip-python python temp indexer `pilot.test_main_e2e`/test_end_to_end().","target":"scip-python python temp indexer `pilot.database.database`/create_tables().","attributes":{"type":"uses","at":[42,4,42,17]}},{"key":"geid_130_112","source":"scip-python python temp indexer `pilot.test_main_e2e`/test_end_to_end().","target":"scip-python python temp indexer `pilot.main`/init().","attributes":{"type":"uses","at":[43,11,43,15]}},{"key":"geid_130_113","source":"scip-python python temp indexer `pilot.test_main_e2e`/test_end_to_end().","target":"scip-python python temp indexer `pilot.utils.custom_print`/get_custom_print().","attributes":{"type":"uses","at":[44,42,44,58]}},{"key":"geid_130_114","source":"scip-python python temp indexer `pilot.test_main_e2e`/test_end_to_end().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#","attributes":{"type":"uses","at":[45,14,45,21]}},{"key":"geid_130_115","source":"scip-python python temp indexer `pilot.test_main_e2e`/test_end_to_end().","target":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#","attributes":{"type":"uses","at":[46,23,46,38]}},{"key":"geid_130_116","source":"scip-python python temp indexer `pilot.test_main_e2e`/test_end_to_end().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","attributes":{"type":"uses","at":[59,16,59,21]}},{"key":"geid_130_117","source":"scip-python python temp indexer `pilot.const.common`/__init__:","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[0,7,0,9]}},{"key":"geid_130_118","source":"scip-python python temp indexer `pilot.const.common`/__init__:","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[23,28,23,30]}},{"key":"geid_130_119","source":"scip-python python temp indexer `pilot.const.common`/__init__:","target":"scip-python python python-stdlib 3.11 os/environ.environ.","attributes":{"type":"uses","at":[23,31,23,38]}},{"key":"geid_130_120","source":"scip-python python temp indexer `pilot.const.common`/__init__:","target":"scip-python python python-stdlib 3.11 typing/Mapping#get().","attributes":{"type":"uses","at":[23,39,23,42]}},{"key":"geid_130_121","source":"scip-python python temp indexer `pilot.const.common`/__init__:","target":"scip-python python temp indexer `pilot.const.common`/additional_ignore_folders.","attributes":{"type":"uses","at":[39,26,39,51]}},{"key":"geid_130_122","source":"scip-python python temp indexer `pilot.const.function_calls`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/command_definition().","attributes":{"type":"defines","at":[42,0,72,5]}},{"key":"geid_130_123","source":"scip-python python temp indexer `pilot.const.function_calls`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/return_array_from_prompt().","attributes":{"type":"defines","at":[21,0,39,5]}},{"key":"geid_130_124","source":"scip-python python temp indexer `pilot.const.function_calls`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/return_files().","attributes":{"type":"defines","at":[16,0,18,16]}},{"key":"geid_130_125","source":"scip-python python temp indexer `pilot.const.function_calls`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/run_commands().","attributes":{"type":"defines","at":[12,0,13,19]}},{"key":"geid_130_126","source":"scip-python python temp indexer `pilot.const.function_calls`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/process_os_technologies().","attributes":{"type":"defines","at":[8,0,9,23]}},{"key":"geid_130_127","source":"scip-python python temp indexer `pilot.const.function_calls`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/process_user_tasks().","attributes":{"type":"defines","at":[4,0,5,16]}},{"key":"geid_130_128","source":"scip-python python temp indexer `pilot.const.function_calls`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/process_user_stories().","attributes":{"type":"defines","at":[0,0,1,18]}},{"key":"geid_130_129","source":"scip-python python temp indexer `pilot.const.function_calls`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/return_array_from_prompt().","attributes":{"type":"uses","at":[77,8,77,32]}},{"key":"geid_130_130","source":"scip-python python temp indexer `pilot.const.function_calls`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/process_user_stories().","attributes":{"type":"uses","at":[80,32,80,52]}},{"key":"geid_130_131","source":"scip-python python temp indexer `pilot.const.function_calls`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/return_array_from_prompt().","attributes":{"type":"uses","at":[86,8,86,32]}},{"key":"geid_130_132","source":"scip-python python temp indexer `pilot.const.function_calls`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/process_user_tasks().","attributes":{"type":"uses","at":[89,30,89,48]}},{"key":"geid_130_133","source":"scip-python python temp indexer `pilot.const.function_calls`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/return_array_from_prompt().","attributes":{"type":"uses","at":[95,8,95,32]}},{"key":"geid_130_134","source":"scip-python python temp indexer `pilot.const.function_calls`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/return_array_from_prompt().","attributes":{"type":"uses","at":[104,8,104,32]}},{"key":"geid_130_135","source":"scip-python python temp indexer `pilot.const.function_calls`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/process_os_technologies().","attributes":{"type":"uses","at":[107,44,107,67]}},{"key":"geid_130_136","source":"scip-python python temp indexer `pilot.const.function_calls`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/return_array_from_prompt().","attributes":{"type":"uses","at":[113,8,113,32]}},{"key":"geid_130_137","source":"scip-python python temp indexer `pilot.const.function_calls`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/process_os_technologies().","attributes":{"type":"uses","at":[116,44,116,67]}},{"key":"geid_130_138","source":"scip-python python temp indexer `pilot.const.function_calls`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/return_array_from_prompt().","attributes":{"type":"uses","at":[122,8,122,32]}},{"key":"geid_130_139","source":"scip-python python temp indexer `pilot.const.function_calls`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/run_commands().","attributes":{"type":"uses","at":[125,28,125,40]}},{"key":"geid_130_140","source":"scip-python python temp indexer `pilot.const.function_calls`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/command_definition().","attributes":{"type":"uses","at":[134,26,134,44]}},{"key":"geid_130_141","source":"scip-python python temp indexer `pilot.const.function_calls`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/run_commands().","attributes":{"type":"uses","at":[138,28,138,40]}},{"key":"geid_130_142","source":"scip-python python temp indexer `pilot.const.function_calls`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/command_definition().","attributes":{"type":"uses","at":[162,43,162,61]}},{"key":"geid_130_143","source":"scip-python python temp indexer `pilot.const.function_calls`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/command_definition().","attributes":{"type":"uses","at":[205,43,205,61]}},{"key":"geid_130_144","source":"scip-python python temp indexer `pilot.const.function_calls`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/return_files().","attributes":{"type":"uses","at":[329,21,329,33]}},{"key":"geid_130_145","source":"scip-python python temp indexer `pilot.const.function_calls`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/command_definition().","attributes":{"type":"uses","at":[353,43,353,61]}},{"key":"geid_130_146","source":"scip-python python temp indexer `pilot.const.function_calls`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/command_definition().","attributes":{"type":"uses","at":[421,29,421,47]}},{"key":"geid_130_147","source":"scip-python python temp indexer `pilot.const.function_calls`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/command_definition().","attributes":{"type":"uses","at":[514,27,514,45]}},{"key":"geid_130_148","source":"scip-python python temp indexer `pilot.const.function_calls`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/command_definition().","attributes":{"type":"uses","at":[560,43,560,61]}},{"key":"geid_130_149","source":"scip-python python temp indexer `pilot.const.llm`/__init__:","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[0,7,0,9]}},{"key":"geid_130_150","source":"scip-python python temp indexer `pilot.const.llm`/__init__:","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[1,27,1,29]}},{"key":"geid_130_151","source":"scip-python python temp indexer `pilot.const.llm`/__init__:","target":"scip-python python python-stdlib 3.11 os/getenv().","attributes":{"type":"uses","at":[1,30,1,36]}},{"key":"geid_130_152","source":"scip-python python temp indexer `pilot.database`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/__init__:","attributes":{"type":"uses","at":[0,5,0,14]}},{"key":"geid_130_153","source":"scip-python python temp indexer `pilot.database`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/database_exists().","attributes":{"type":"uses","at":[0,22,0,37]}},{"key":"geid_130_154","source":"scip-python python temp indexer `pilot.database`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/create_database().","attributes":{"type":"uses","at":[0,39,0,54]}},{"key":"geid_130_155","source":"scip-python python temp indexer `pilot.database`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/save_app().","attributes":{"type":"uses","at":[0,56,0,64]}},{"key":"geid_130_156","source":"scip-python python temp indexer `pilot.database.config`/__init__:","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[0,7,0,9]}},{"key":"geid_130_157","source":"scip-python python temp indexer `pilot.database.config`/__init__:","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[2,16,2,18]}},{"key":"geid_130_158","source":"scip-python python temp indexer `pilot.database.config`/__init__:","target":"scip-python python python-stdlib 3.11 os/getenv().","attributes":{"type":"uses","at":[2,19,2,25]}},{"key":"geid_130_159","source":"scip-python python temp indexer `pilot.database.config`/__init__:","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[3,10,3,12]}},{"key":"geid_130_160","source":"scip-python python temp indexer `pilot.database.config`/__init__:","target":"scip-python python python-stdlib 3.11 os/getenv().","attributes":{"type":"uses","at":[3,13,3,19]}},{"key":"geid_130_161","source":"scip-python python temp indexer `pilot.database.config`/__init__:","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[4,10,4,12]}},{"key":"geid_130_162","source":"scip-python python temp indexer `pilot.database.config`/__init__:","target":"scip-python python python-stdlib 3.11 os/getenv().","attributes":{"type":"uses","at":[4,13,4,19]}},{"key":"geid_130_163","source":"scip-python python temp indexer `pilot.database.config`/__init__:","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[5,10,5,12]}},{"key":"geid_130_164","source":"scip-python python temp indexer `pilot.database.config`/__init__:","target":"scip-python python python-stdlib 3.11 os/getenv().","attributes":{"type":"uses","at":[5,13,5,19]}},{"key":"geid_130_165","source":"scip-python python temp indexer `pilot.database.config`/__init__:","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[6,10,6,12]}},{"key":"geid_130_166","source":"scip-python python temp indexer `pilot.database.config`/__init__:","target":"scip-python python python-stdlib 3.11 os/getenv().","attributes":{"type":"uses","at":[6,13,6,19]}},{"key":"geid_130_167","source":"scip-python python temp indexer `pilot.database.config`/__init__:","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[7,14,7,16]}},{"key":"geid_130_168","source":"scip-python python temp indexer `pilot.database.config`/__init__:","target":"scip-python python python-stdlib 3.11 os/getenv().","attributes":{"type":"uses","at":[7,17,7,23]}},{"key":"geid_130_169","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/tables_exist().","attributes":{"type":"defines","at":[500,0,509,15]}},{"key":"geid_130_170","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/create_database().","attributes":{"type":"defines","at":[475,0,497,12]}},{"key":"geid_130_171","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/database_exists().","attributes":{"type":"defines","at":[466,0,472,20]}},{"key":"geid_130_172","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/drop_tables().","attributes":{"type":"defines","at":[453,0,463,37]}},{"key":"geid_130_173","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/create_tables().","attributes":{"type":"defines","at":[448,0,450,38]}},{"key":"geid_130_174","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/get_features_by_app_id().","attributes":{"type":"defines","at":[436,0,445,53]}},{"key":"geid_130_175","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/save_feature().","attributes":{"type":"defines","at":[427,0,433,53]}},{"key":"geid_130_176","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/save_file_description().","attributes":{"type":"defines","at":[418,0,424,16]}},{"key":"geid_130_177","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/delete_unconnected_steps_from().","attributes":{"type":"defines","at":[402,0,415,42]}},{"key":"geid_130_178","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/delete_all_app_development_data().","attributes":{"type":"defines","at":[396,0,399,56]}},{"key":"geid_130_179","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/get_all_connected_steps().","attributes":{"type":"defines","at":[386,0,393,26]}},{"key":"geid_130_180","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/delete_subsequent_steps().","attributes":{"type":"defines","at":[373,0,383,90]}},{"key":"geid_130_181","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/delete_all_subsequent_steps().","attributes":{"type":"defines","at":[366,0,370,84]}},{"key":"geid_130_182","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/get_saved_user_input().","attributes":{"type":"defines","at":[356,0,363,21]}},{"key":"geid_130_183","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/save_user_input().","attributes":{"type":"defines","at":[337,0,353,21]}},{"key":"geid_130_184","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/get_saved_command_run().","attributes":{"type":"defines","at":[327,0,334,22]}},{"key":"geid_130_185","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/save_command_run().","attributes":{"type":"defines","at":[305,0,324,22]}},{"key":"geid_130_186","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/get_saved_development_step().","attributes":{"type":"defines","at":[299,0,302,27]}},{"key":"geid_130_187","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/save_development_step().","attributes":{"type":"defines","at":[273,0,296,27]}},{"key":"geid_130_188","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/hash_and_save_step().","attributes":{"type":"defines","at":[249,0,270,17]}},{"key":"geid_130_189","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/get_db_model_from_hash_id().","attributes":{"type":"defines","at":[240,0,246,17]}},{"key":"geid_130_190","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/get_progress_steps().","attributes":{"type":"defines","at":[207,0,237,20]}},{"key":"geid_130_191","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/get_app_by_user_workspace().","attributes":{"type":"defines","at":[199,0,204,19]}},{"key":"geid_130_192","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/get_app().","attributes":{"type":"defines","at":[189,0,196,19]}},{"key":"geid_130_193","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/save_progress().","attributes":{"type":"defines","at":[156,0,186,19]}},{"key":"geid_130_194","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/save_user_app().","attributes":{"type":"defines","at":[145,0,153,19]}},{"key":"geid_130_195","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/save_app().","attributes":{"type":"defines","at":[109,0,142,14]}},{"key":"geid_130_196","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/get_user().","attributes":{"type":"defines","at":[92,0,106,67]}},{"key":"geid_130_197","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/update_app_status().","attributes":{"type":"defines","at":[82,0,89,20]}},{"key":"geid_130_198","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/save_user().","attributes":{"type":"defines","at":[70,0,79,74]}},{"key":"geid_130_199","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/get_all_app_development_steps().","attributes":{"type":"defines","at":[66,0,67,116]}},{"key":"geid_130_200","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/get_created_apps_with_steps().","attributes":{"type":"defines","at":[54,0,63,15]}},{"key":"geid_130_201","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/get_created_apps().","attributes":{"type":"defines","at":[50,0,51,118]}},{"key":"geid_130_202","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `playhouse.shortcuts`/__init__:","attributes":{"type":"uses","at":[0,5,0,24]}},{"key":"geid_130_203","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/__init__:","attributes":{"type":"uses","at":[1,5,1,16]}},{"key":"geid_130_204","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/color_yellow.","attributes":{"type":"uses","at":[1,24,1,36]}},{"key":"geid_130_205","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/color_red.","attributes":{"type":"uses","at":[1,38,1,47]}},{"key":"geid_130_206","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer peewee/__init__:","attributes":{"type":"uses","at":[2,5,2,11]}},{"key":"geid_130_207","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python python-stdlib 3.11 functools/__init__:","attributes":{"type":"uses","at":[3,5,3,14]}},{"key":"geid_130_208","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python python-stdlib 3.11 functools/reduce().","attributes":{"type":"uses","at":[3,22,3,28]}},{"key":"geid_130_209","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python python-stdlib 3.11 operator/__init__:","attributes":{"type":"uses","at":[4,7,4,15]}},{"key":"geid_130_210","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `psycopg2.extensions`/__init__:","attributes":{"type":"uses","at":[6,5,6,24]}},{"key":"geid_130_211","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[8,7,8,9]}},{"key":"geid_130_212","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.const.common`/__init__:","attributes":{"type":"uses","at":[9,5,9,17]}},{"key":"geid_130_213","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.const.common`/PROMPT_DATA_TO_IGNORE.","attributes":{"type":"uses","at":[9,25,9,46]}},{"key":"geid_130_214","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.const.common`/STEPS.","attributes":{"type":"uses","at":[9,48,9,53]}},{"key":"geid_130_215","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.logger.logger`/__init__:","attributes":{"type":"uses","at":[10,5,10,18]}},{"key":"geid_130_216","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[10,26,10,32]}},{"key":"geid_130_217","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.config`/__init__:","attributes":{"type":"uses","at":[11,5,11,20]}},{"key":"geid_130_218","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.config`/DB_NAME.","attributes":{"type":"uses","at":[11,28,11,35]}},{"key":"geid_130_219","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.config`/DB_HOST.","attributes":{"type":"uses","at":[11,37,11,44]}},{"key":"geid_130_220","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.config`/DB_PORT.","attributes":{"type":"uses","at":[11,46,11,53]}},{"key":"geid_130_221","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.config`/DB_USER.","attributes":{"type":"uses","at":[11,55,11,62]}},{"key":"geid_130_222","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.config`/DB_PASSWORD.","attributes":{"type":"uses","at":[11,64,11,75]}},{"key":"geid_130_223","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.config`/DATABASE_TYPE.","attributes":{"type":"uses","at":[11,77,11,90]}},{"key":"geid_130_224","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.base_models`/__init__:","attributes":{"type":"uses","at":[12,5,12,43]}},{"key":"geid_130_225","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.base_models`/database.","attributes":{"type":"uses","at":[12,51,12,59]}},{"key":"geid_130_226","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.models.user`/__init__:","attributes":{"type":"uses","at":[13,5,13,25]}},{"key":"geid_130_227","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.models.user`/User#","attributes":{"type":"uses","at":[13,33,13,37]}},{"key":"geid_130_228","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.models.app`/__init__:","attributes":{"type":"uses","at":[14,5,14,24]}},{"key":"geid_130_229","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.models.app`/App#","attributes":{"type":"uses","at":[14,32,14,35]}},{"key":"geid_130_230","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.models.project_description`/__init__:","attributes":{"type":"uses","at":[15,5,15,40]}},{"key":"geid_130_231","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.models.project_description`/ProjectDescription#","attributes":{"type":"uses","at":[15,48,15,66]}},{"key":"geid_130_232","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.models.user_stories`/__init__:","attributes":{"type":"uses","at":[16,5,16,33]}},{"key":"geid_130_233","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.models.user_stories`/UserStories#","attributes":{"type":"uses","at":[16,41,16,52]}},{"key":"geid_130_234","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.models.user_tasks`/__init__:","attributes":{"type":"uses","at":[17,5,17,31]}},{"key":"geid_130_235","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.models.user_tasks`/UserTasks#","attributes":{"type":"uses","at":[17,39,17,48]}},{"key":"geid_130_236","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.models.architecture`/__init__:","attributes":{"type":"uses","at":[18,5,18,33]}},{"key":"geid_130_237","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.models.architecture`/Architecture#","attributes":{"type":"uses","at":[18,41,18,53]}},{"key":"geid_130_238","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.models.development_planning`/__init__:","attributes":{"type":"uses","at":[19,5,19,41]}},{"key":"geid_130_239","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.models.development_planning`/DevelopmentPlanning#","attributes":{"type":"uses","at":[19,49,19,68]}},{"key":"geid_130_240","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.models.development_steps`/__init__:","attributes":{"type":"uses","at":[20,5,20,38]}},{"key":"geid_130_241","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#","attributes":{"type":"uses","at":[20,46,20,62]}},{"key":"geid_130_242","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.models.environment_setup`/__init__:","attributes":{"type":"uses","at":[21,5,21,38]}},{"key":"geid_130_243","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.models.environment_setup`/EnvironmentSetup#","attributes":{"type":"uses","at":[21,46,21,62]}},{"key":"geid_130_244","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.models.development`/__init__:","attributes":{"type":"uses","at":[22,5,22,32]}},{"key":"geid_130_245","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.models.development`/Development#","attributes":{"type":"uses","at":[22,40,22,51]}},{"key":"geid_130_246","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.models.file_snapshot`/__init__:","attributes":{"type":"uses","at":[23,5,23,34]}},{"key":"geid_130_247","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#","attributes":{"type":"uses","at":[23,42,23,54]}},{"key":"geid_130_248","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.models.command_runs`/__init__:","attributes":{"type":"uses","at":[24,5,24,33]}},{"key":"geid_130_249","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.models.command_runs`/CommandRuns#","attributes":{"type":"uses","at":[24,41,24,52]}},{"key":"geid_130_250","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.models.user_apps`/__init__:","attributes":{"type":"uses","at":[25,5,25,30]}},{"key":"geid_130_251","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.models.user_apps`/UserApps#","attributes":{"type":"uses","at":[25,38,25,46]}},{"key":"geid_130_252","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.models.user_inputs`/__init__:","attributes":{"type":"uses","at":[26,5,26,32]}},{"key":"geid_130_253","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.models.user_inputs`/UserInputs#","attributes":{"type":"uses","at":[26,40,26,50]}},{"key":"geid_130_254","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.models.files`/__init__:","attributes":{"type":"uses","at":[27,5,27,26]}},{"key":"geid_130_255","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.models.files`/File#","attributes":{"type":"uses","at":[27,34,27,38]}},{"key":"geid_130_256","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.models.feature`/__init__:","attributes":{"type":"uses","at":[28,5,28,28]}},{"key":"geid_130_257","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.models.feature`/Feature#","attributes":{"type":"uses","at":[28,36,28,43]}},{"key":"geid_130_258","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.models.user`/User#","attributes":{"type":"uses","at":[31,12,31,16]}},{"key":"geid_130_259","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.models.app`/App#","attributes":{"type":"uses","at":[32,12,32,15]}},{"key":"geid_130_260","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.models.project_description`/ProjectDescription#","attributes":{"type":"uses","at":[33,12,33,30]}},{"key":"geid_130_261","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.models.user_stories`/UserStories#","attributes":{"type":"uses","at":[34,12,34,23]}},{"key":"geid_130_262","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.models.user_tasks`/UserTasks#","attributes":{"type":"uses","at":[35,12,35,21]}},{"key":"geid_130_263","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.models.architecture`/Architecture#","attributes":{"type":"uses","at":[36,12,36,24]}},{"key":"geid_130_264","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.models.development_planning`/DevelopmentPlanning#","attributes":{"type":"uses","at":[37,12,37,31]}},{"key":"geid_130_265","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#","attributes":{"type":"uses","at":[38,12,38,28]}},{"key":"geid_130_266","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.models.environment_setup`/EnvironmentSetup#","attributes":{"type":"uses","at":[39,12,39,28]}},{"key":"geid_130_267","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.models.development`/Development#","attributes":{"type":"uses","at":[40,12,40,23]}},{"key":"geid_130_268","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#","attributes":{"type":"uses","at":[41,12,41,24]}},{"key":"geid_130_269","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.models.command_runs`/CommandRuns#","attributes":{"type":"uses","at":[42,12,42,23]}},{"key":"geid_130_270","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.models.user_apps`/UserApps#","attributes":{"type":"uses","at":[43,12,43,20]}},{"key":"geid_130_271","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.models.user_inputs`/UserInputs#","attributes":{"type":"uses","at":[44,12,44,22]}},{"key":"geid_130_272","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.models.files`/File#","attributes":{"type":"uses","at":[45,12,45,16]}},{"key":"geid_130_273","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.models.feature`/Feature#","attributes":{"type":"uses","at":[46,12,46,19]}},{"key":"geid_130_274","source":"scip-python python temp indexer `pilot.database.database`/get_created_apps().","target":"scip-python python temp indexer `pilot.database.models.app`/App#","attributes":{"type":"uses","at":[51,42,51,45]}},{"key":"geid_130_275","source":"scip-python python temp indexer `pilot.database.database`/get_created_apps().","target":"scip-python python temp indexer `pilot.database.models.app`/App#","attributes":{"type":"uses","at":[51,62,51,65]}},{"key":"geid_130_276","source":"scip-python python temp indexer `pilot.database.database`/get_created_apps().","target":"scip-python python temp indexer `pilot.database.models.app`/App#name.","attributes":{"type":"uses","at":[51,66,51,70]}},{"key":"geid_130_277","source":"scip-python python temp indexer `pilot.database.database`/get_created_apps().","target":"scip-python python temp indexer `pilot.database.models.app`/App#","attributes":{"type":"uses","at":[51,90,51,93]}},{"key":"geid_130_278","source":"scip-python python temp indexer `pilot.database.database`/get_created_apps().","target":"scip-python python temp indexer `pilot.database.models.app`/App#status.","attributes":{"type":"uses","at":[51,94,51,100]}},{"key":"geid_130_279","source":"scip-python python temp indexer `pilot.database.database`/get_created_apps_with_steps().","target":"scip-python python temp indexer `pilot.database.database`/get_created_apps().","attributes":{"type":"uses","at":[55,11,55,27]}},{"key":"geid_130_280","source":"scip-python python temp indexer `pilot.database.database`/get_created_apps_with_steps().","target":"scip-python python temp indexer `pilot.const.common`/STEPS.","attributes":{"type":"uses","at":[58,41,58,46]}},{"key":"geid_130_281","source":"scip-python python temp indexer `pilot.database.database`/get_created_apps_with_steps().","target":"scip-python python temp indexer `pilot.const.common`/STEPS.","attributes":{"type":"uses","at":[58,48,58,53]}},{"key":"geid_130_282","source":"scip-python python temp indexer `pilot.database.database`/get_created_apps_with_steps().","target":"scip-python python temp indexer `pilot.database.database`/get_all_app_development_steps().","attributes":{"type":"uses","at":[59,35,59,64]}},{"key":"geid_130_283","source":"scip-python python temp indexer `pilot.database.database`/get_all_app_development_steps().","target":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#","attributes":{"type":"uses","at":[67,52,67,68]}},{"key":"geid_130_284","source":"scip-python python temp indexer `pilot.database.database`/get_all_app_development_steps().","target":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#","attributes":{"type":"uses","at":[67,84,67,100]}},{"key":"geid_130_285","source":"scip-python python temp indexer `pilot.database.database`/get_all_app_development_steps().","target":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#app.","attributes":{"type":"uses","at":[67,101,67,104]}},{"key":"geid_130_286","source":"scip-python python temp indexer `pilot.database.database`/save_user().","target":"scip-python python temp indexer `pilot.database.models.user`/User#","attributes":{"type":"uses","at":[72,15,72,19]}},{"key":"geid_130_287","source":"scip-python python temp indexer `pilot.database.database`/save_user().","target":"scip-python python temp indexer `pilot.database.models.user`/User#","attributes":{"type":"uses","at":[72,24,72,28]}},{"key":"geid_130_288","source":"scip-python python temp indexer `pilot.database.database`/save_user().","target":"scip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#id.","attributes":{"type":"uses","at":[72,29,72,31]}},{"key":"geid_130_289","source":"scip-python python temp indexer `pilot.database.database`/save_user().","target":"scip-python python temp indexer `pilot.database.models.user`/User#","attributes":{"type":"uses","at":[76,28,76,32]}},{"key":"geid_130_290","source":"scip-python python temp indexer `pilot.database.database`/save_user().","target":"scip-python python temp indexer `pilot.database.models.user`/User#","attributes":{"type":"uses","at":[76,37,76,41]}},{"key":"geid_130_291","source":"scip-python python temp indexer `pilot.database.database`/save_user().","target":"scip-python python temp indexer `pilot.database.models.user`/User#email.","attributes":{"type":"uses","at":[76,42,76,47]}},{"key":"geid_130_292","source":"scip-python python temp indexer `pilot.database.database`/save_user().","target":"scip-python python temp indexer `pilot.database.models.user`/User#","attributes":{"type":"uses","at":[79,19,79,23]}},{"key":"geid_130_293","source":"scip-python python temp indexer `pilot.database.database`/update_app_status().","target":"scip-python python temp indexer `pilot.database.models.app`/App#","attributes":{"type":"uses","at":[84,14,84,17]}},{"key":"geid_130_294","source":"scip-python python temp indexer `pilot.database.database`/update_app_status().","target":"scip-python python temp indexer `pilot.database.models.app`/App#","attributes":{"type":"uses","at":[84,22,84,25]}},{"key":"geid_130_295","source":"scip-python python temp indexer `pilot.database.database`/update_app_status().","target":"scip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#id.","attributes":{"type":"uses","at":[84,26,84,28]}},{"key":"geid_130_296","source":"scip-python python temp indexer `pilot.database.database`/get_user().","target":"scip-python python temp indexer `pilot.database.models.user`/User#","attributes":{"type":"uses","at":[98,21,98,25]}},{"key":"geid_130_297","source":"scip-python python temp indexer `pilot.database.database`/get_user().","target":"scip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#id.","attributes":{"type":"uses","at":[98,26,98,28]}},{"key":"geid_130_298","source":"scip-python python temp indexer `pilot.database.database`/get_user().","target":"scip-python python temp indexer `pilot.database.models.user`/User#","attributes":{"type":"uses","at":[100,21,100,25]}},{"key":"geid_130_299","source":"scip-python python temp indexer `pilot.database.database`/get_user().","target":"scip-python python temp indexer `pilot.database.models.user`/User#email.","attributes":{"type":"uses","at":[100,26,100,31]}},{"key":"geid_130_300","source":"scip-python python temp indexer `pilot.database.database`/get_user().","target":"scip-python python temp indexer `pilot.database.models.user`/User#","attributes":{"type":"uses","at":[103,15,103,19]}},{"key":"geid_130_301","source":"scip-python python temp indexer `pilot.database.database`/get_user().","target":"scip-python python python-stdlib 3.11 functools/reduce().","attributes":{"type":"uses","at":[103,24,103,30]}},{"key":"geid_130_302","source":"scip-python python temp indexer `pilot.database.database`/get_user().","target":"scip-python python python-stdlib 3.11 operator/__init__:","attributes":{"type":"uses","at":[103,31,103,39]}},{"key":"geid_130_303","source":"scip-python python temp indexer `pilot.database.database`/get_user().","target":"scip-python python python-stdlib 3.11 _operator/or_().","attributes":{"type":"uses","at":[103,40,103,43]}},{"key":"geid_130_304","source":"scip-python python temp indexer `pilot.database.database`/save_app().","target":"scip-python python temp indexer `pilot.database.models.app`/App#","attributes":{"type":"uses","at":[116,18,116,21]}},{"key":"geid_130_305","source":"scip-python python temp indexer `pilot.database.database`/save_app().","target":"scip-python python temp indexer `pilot.database.models.app`/App#","attributes":{"type":"uses","at":[116,26,116,29]}},{"key":"geid_130_306","source":"scip-python python temp indexer `pilot.database.database`/save_app().","target":"scip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#id.","attributes":{"type":"uses","at":[116,30,116,32]}},{"key":"geid_130_307","source":"scip-python python temp indexer `pilot.database.database`/save_app().","target":"scip-python python temp indexer `pilot.database.database`/get_user().","attributes":{"type":"uses","at":[126,23,126,31]}},{"key":"geid_130_308","source":"scip-python python temp indexer `pilot.database.database`/save_app().","target":"scip-python python temp indexer `pilot.database.database`/save_user().","attributes":{"type":"uses","at":[128,23,128,32]}},{"key":"geid_130_309","source":"scip-python python temp indexer `pilot.database.database`/save_app().","target":"scip-python python temp indexer `pilot.database.models.app`/App#","attributes":{"type":"uses","at":[134,14,134,17]}},{"key":"geid_130_310","source":"scip-python python temp indexer `pilot.database.database`/save_user_app().","target":"scip-python python temp indexer `pilot.database.models.user_apps`/UserApps#","attributes":{"type":"uses","at":[147,19,147,27]}},{"key":"geid_130_311","source":"scip-python python temp indexer `pilot.database.database`/save_user_app().","target":"scip-python python temp indexer `pilot.database.models.user_apps`/UserApps#","attributes":{"type":"uses","at":[147,33,147,41]}},{"key":"geid_130_312","source":"scip-python python temp indexer `pilot.database.database`/save_user_app().","target":"scip-python python temp indexer `pilot.database.models.user_apps`/UserApps#user.","attributes":{"type":"uses","at":[147,42,147,46]}},{"key":"geid_130_313","source":"scip-python python temp indexer `pilot.database.database`/save_user_app().","target":"scip-python python temp indexer `pilot.database.models.user_apps`/UserApps#","attributes":{"type":"uses","at":[147,62,147,70]}},{"key":"geid_130_314","source":"scip-python python temp indexer `pilot.database.database`/save_user_app().","target":"scip-python python temp indexer `pilot.database.models.user_apps`/UserApps#app.","attributes":{"type":"uses","at":[147,71,147,74]}},{"key":"geid_130_315","source":"scip-python python temp indexer `pilot.database.database`/save_user_app().","target":"scip-python python temp indexer `pilot.database.models.user_apps`/UserApps#","attributes":{"type":"uses","at":[151,19,151,27]}},{"key":"geid_130_316","source":"scip-python python temp indexer `pilot.database.database`/save_progress().","target":"scip-python python temp indexer `pilot.database.models.project_description`/ProjectDescription#","attributes":{"type":"uses","at":[158,31,158,49]}},{"key":"geid_130_317","source":"scip-python python temp indexer `pilot.database.database`/save_progress().","target":"scip-python python temp indexer `pilot.database.models.user_stories`/UserStories#","attributes":{"type":"uses","at":[159,24,159,35]}},{"key":"geid_130_318","source":"scip-python python temp indexer `pilot.database.database`/save_progress().","target":"scip-python python temp indexer `pilot.database.models.user_tasks`/UserTasks#","attributes":{"type":"uses","at":[160,22,160,31]}},{"key":"geid_130_319","source":"scip-python python temp indexer `pilot.database.database`/save_progress().","target":"scip-python python temp indexer `pilot.database.models.architecture`/Architecture#","attributes":{"type":"uses","at":[161,24,161,36]}},{"key":"geid_130_320","source":"scip-python python temp indexer `pilot.database.database`/save_progress().","target":"scip-python python temp indexer `pilot.database.models.development_planning`/DevelopmentPlanning#","attributes":{"type":"uses","at":[162,32,162,51]}},{"key":"geid_130_321","source":"scip-python python temp indexer `pilot.database.database`/save_progress().","target":"scip-python python temp indexer `pilot.database.models.environment_setup`/EnvironmentSetup#","attributes":{"type":"uses","at":[163,29,163,45]}},{"key":"geid_130_322","source":"scip-python python temp indexer `pilot.database.database`/save_progress().","target":"scip-python python temp indexer `pilot.database.models.development`/Development#","attributes":{"type":"uses","at":[164,23,164,34]}},{"key":"geid_130_323","source":"scip-python python temp indexer `pilot.database.database`/save_progress().","target":"scip-python python temp indexer `pilot.database.database`/get_app().","attributes":{"type":"uses","at":[173,10,173,17]}},{"key":"geid_130_324","source":"scip-python python temp indexer `pilot.database.database`/save_progress().","target":"scip-python python temp indexer `pilot.database.database`/update_app_status().","attributes":{"type":"uses","at":[185,4,185,21]}},{"key":"geid_130_325","source":"scip-python python temp indexer `pilot.database.database`/get_app().","target":"scip-python python temp indexer `pilot.database.models.app`/App#","attributes":{"type":"uses","at":[191,14,191,17]}},{"key":"geid_130_326","source":"scip-python python temp indexer `pilot.database.database`/get_app().","target":"scip-python python temp indexer `pilot.database.models.app`/App#","attributes":{"type":"uses","at":[191,22,191,25]}},{"key":"geid_130_327","source":"scip-python python temp indexer `pilot.database.database`/get_app().","target":"scip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#id.","attributes":{"type":"uses","at":[191,26,191,28]}},{"key":"geid_130_328","source":"scip-python python temp indexer `pilot.database.database`/get_app_by_user_workspace().","target":"scip-python python temp indexer `pilot.database.models.user_apps`/UserApps#","attributes":{"type":"uses","at":[201,19,201,27]}},{"key":"geid_130_329","source":"scip-python python temp indexer `pilot.database.database`/get_app_by_user_workspace().","target":"scip-python python temp indexer `pilot.database.models.user_apps`/UserApps#","attributes":{"type":"uses","at":[201,33,201,41]}},{"key":"geid_130_330","source":"scip-python python temp indexer `pilot.database.database`/get_app_by_user_workspace().","target":"scip-python python temp indexer `pilot.database.models.user_apps`/UserApps#user.","attributes":{"type":"uses","at":[201,42,201,46]}},{"key":"geid_130_331","source":"scip-python python temp indexer `pilot.database.database`/get_app_by_user_workspace().","target":"scip-python python temp indexer `pilot.database.models.user_apps`/UserApps#","attributes":{"type":"uses","at":[201,62,201,70]}},{"key":"geid_130_332","source":"scip-python python temp indexer `pilot.database.database`/get_app_by_user_workspace().","target":"scip-python python temp indexer `pilot.database.models.user_apps`/UserApps#workspace.","attributes":{"type":"uses","at":[201,71,201,80]}},{"key":"geid_130_333","source":"scip-python python temp indexer `pilot.database.database`/get_progress_steps().","target":"scip-python python temp indexer `pilot.database.models.project_description`/ProjectDescription#","attributes":{"type":"uses","at":[209,31,209,49]}},{"key":"geid_130_334","source":"scip-python python temp indexer `pilot.database.database`/get_progress_steps().","target":"scip-python python temp indexer `pilot.database.models.user_stories`/UserStories#","attributes":{"type":"uses","at":[210,24,210,35]}},{"key":"geid_130_335","source":"scip-python python temp indexer `pilot.database.database`/get_progress_steps().","target":"scip-python python temp indexer `pilot.database.models.user_tasks`/UserTasks#","attributes":{"type":"uses","at":[211,22,211,31]}},{"key":"geid_130_336","source":"scip-python python temp indexer `pilot.database.database`/get_progress_steps().","target":"scip-python python temp indexer `pilot.database.models.architecture`/Architecture#","attributes":{"type":"uses","at":[212,24,212,36]}},{"key":"geid_130_337","source":"scip-python python temp indexer `pilot.database.database`/get_progress_steps().","target":"scip-python python temp indexer `pilot.database.models.development_planning`/DevelopmentPlanning#","attributes":{"type":"uses","at":[213,32,213,51]}},{"key":"geid_130_338","source":"scip-python python temp indexer `pilot.database.database`/get_progress_steps().","target":"scip-python python temp indexer `pilot.database.models.environment_setup`/EnvironmentSetup#","attributes":{"type":"uses","at":[214,29,214,45]}},{"key":"geid_130_339","source":"scip-python python temp indexer `pilot.database.database`/get_progress_steps().","target":"scip-python python temp indexer `pilot.database.models.development`/Development#","attributes":{"type":"uses","at":[215,23,215,34]}},{"key":"geid_130_340","source":"scip-python python temp indexer `pilot.database.database`/hash_and_save_step().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[266,8,266,14]}},{"key":"geid_130_341","source":"scip-python python temp indexer `pilot.database.database`/hash_and_save_step().","target":"scip-python python python-stdlib 3.11 logging/Logger#debug().","attributes":{"type":"uses","at":[266,15,266,20]}},{"key":"geid_130_342","source":"scip-python python temp indexer `pilot.database.database`/hash_and_save_step().","target":"scip-python python temp indexer `pilot.utils.style`/color_yellow.","attributes":{"type":"uses","at":[266,21,266,33]}},{"key":"geid_130_343","source":"scip-python python temp indexer `pilot.database.database`/hash_and_save_step().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[268,8,268,14]}},{"key":"geid_130_344","source":"scip-python python temp indexer `pilot.database.database`/hash_and_save_step().","target":"scip-python python python-stdlib 3.11 logging/Logger#warn().","attributes":{"type":"uses","at":[268,15,268,19]}},{"key":"geid_130_345","source":"scip-python python temp indexer `pilot.database.database`/save_development_step().","target":"scip-python python temp indexer `pilot.const.common`/PROMPT_DATA_TO_IGNORE.","attributes":{"type":"uses","at":[279,64,279,85]}},{"key":"geid_130_346","source":"scip-python python temp indexer `pilot.database.database`/save_development_step().","target":"scip-python python temp indexer `pilot.database.database`/hash_and_save_step().","attributes":{"type":"uses","at":[290,23,290,41]}},{"key":"geid_130_347","source":"scip-python python temp indexer `pilot.database.database`/save_development_step().","target":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#","attributes":{"type":"uses","at":[290,42,290,58]}},{"key":"geid_130_348","source":"scip-python python temp indexer `pilot.database.database`/get_saved_development_step().","target":"scip-python python temp indexer `pilot.database.database`/get_db_model_from_hash_id().","attributes":{"type":"uses","at":[300,23,300,48]}},{"key":"geid_130_349","source":"scip-python python temp indexer `pilot.database.database`/get_saved_development_step().","target":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#","attributes":{"type":"uses","at":[300,49,300,65]}},{"key":"geid_130_350","source":"scip-python python temp indexer `pilot.database.database`/save_command_run().","target":"scip-python python temp indexer `pilot.database.database`/hash_and_save_step().","attributes":{"type":"uses","at":[322,18,322,36]}},{"key":"geid_130_351","source":"scip-python python temp indexer `pilot.database.database`/save_command_run().","target":"scip-python python temp indexer `pilot.database.models.command_runs`/CommandRuns#","attributes":{"type":"uses","at":[322,37,322,48]}},{"key":"geid_130_352","source":"scip-python python temp indexer `pilot.database.database`/get_saved_command_run().","target":"scip-python python temp indexer `pilot.database.database`/get_db_model_from_hash_id().","attributes":{"type":"uses","at":[332,18,332,43]}},{"key":"geid_130_353","source":"scip-python python temp indexer `pilot.database.database`/get_saved_command_run().","target":"scip-python python temp indexer `pilot.database.models.command_runs`/CommandRuns#","attributes":{"type":"uses","at":[332,44,332,55]}},{"key":"geid_130_354","source":"scip-python python temp indexer `pilot.database.database`/save_user_input().","target":"scip-python python temp indexer `pilot.database.database`/hash_and_save_step().","attributes":{"type":"uses","at":[351,17,351,35]}},{"key":"geid_130_355","source":"scip-python python temp indexer `pilot.database.database`/save_user_input().","target":"scip-python python temp indexer `pilot.database.models.user_inputs`/UserInputs#","attributes":{"type":"uses","at":[351,36,351,46]}},{"key":"geid_130_356","source":"scip-python python temp indexer `pilot.database.database`/get_saved_user_input().","target":"scip-python python temp indexer `pilot.database.database`/get_db_model_from_hash_id().","attributes":{"type":"uses","at":[361,17,361,42]}},{"key":"geid_130_357","source":"scip-python python temp indexer `pilot.database.database`/get_saved_user_input().","target":"scip-python python temp indexer `pilot.database.models.user_inputs`/UserInputs#","attributes":{"type":"uses","at":[361,43,361,53]}},{"key":"geid_130_358","source":"scip-python python temp indexer `pilot.database.database`/delete_all_subsequent_steps().","target":"scip-python python temp indexer `pilot.database.database`/get_app().","attributes":{"type":"uses","at":[367,10,367,17]}},{"key":"geid_130_359","source":"scip-python python temp indexer `pilot.database.database`/delete_all_subsequent_steps().","target":"scip-python python temp indexer `pilot.database.database`/delete_subsequent_steps().","attributes":{"type":"uses","at":[368,4,368,27]}},{"key":"geid_130_360","source":"scip-python python temp indexer `pilot.database.database`/delete_all_subsequent_steps().","target":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#","attributes":{"type":"uses","at":[368,28,368,44]}},{"key":"geid_130_361","source":"scip-python python temp indexer `pilot.database.database`/delete_all_subsequent_steps().","target":"scip-python python temp indexer `pilot.database.database`/delete_subsequent_steps().","attributes":{"type":"uses","at":[369,4,369,27]}},{"key":"geid_130_362","source":"scip-python python temp indexer `pilot.database.database`/delete_all_subsequent_steps().","target":"scip-python python temp indexer `pilot.database.models.command_runs`/CommandRuns#","attributes":{"type":"uses","at":[369,28,369,39]}},{"key":"geid_130_363","source":"scip-python python temp indexer `pilot.database.database`/delete_all_subsequent_steps().","target":"scip-python python temp indexer `pilot.database.database`/delete_subsequent_steps().","attributes":{"type":"uses","at":[370,4,370,27]}},{"key":"geid_130_364","source":"scip-python python temp indexer `pilot.database.database`/delete_all_subsequent_steps().","target":"scip-python python temp indexer `pilot.database.models.user_inputs`/UserInputs#","attributes":{"type":"uses","at":[370,28,370,38]}},{"key":"geid_130_365","source":"scip-python python temp indexer `pilot.database.database`/delete_subsequent_steps().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[374,4,374,10]}},{"key":"geid_130_366","source":"scip-python python temp indexer `pilot.database.database`/delete_subsequent_steps().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[374,11,374,15]}},{"key":"geid_130_367","source":"scip-python python temp indexer `pilot.database.database`/delete_subsequent_steps().","target":"scip-python python temp indexer `pilot.utils.style`/color_red.","attributes":{"type":"uses","at":[374,16,374,25]}},{"key":"geid_130_368","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/delete_subsequent_steps().","attributes":{"type":"uses","at":[379,12,379,35]}},{"key":"geid_130_369","source":"scip-python python temp indexer `pilot.database.database`/delete_subsequent_steps().","target":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#","attributes":{"type":"uses","at":[381,24,381,40]}},{"key":"geid_130_370","source":"scip-python python temp indexer `pilot.database.database`/delete_subsequent_steps().","target":"scip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#","attributes":{"type":"uses","at":[382,16,382,28]}},{"key":"geid_130_371","source":"scip-python python temp indexer `pilot.database.database`/delete_subsequent_steps().","target":"scip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#","attributes":{"type":"uses","at":[382,44,382,56]}},{"key":"geid_130_372","source":"scip-python python temp indexer `pilot.database.database`/delete_subsequent_steps().","target":"scip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#development_step.","attributes":{"type":"uses","at":[382,57,382,73]}},{"key":"geid_130_373","source":"scip-python python temp indexer `pilot.database.database`/delete_subsequent_steps().","target":"scip-python python temp indexer `pilot.database.models.feature`/Feature#","attributes":{"type":"uses","at":[383,16,383,23]}},{"key":"geid_130_374","source":"scip-python python temp indexer `pilot.database.database`/delete_subsequent_steps().","target":"scip-python python temp indexer `pilot.database.models.feature`/Feature#","attributes":{"type":"uses","at":[383,39,383,46]}},{"key":"geid_130_375","source":"scip-python python temp indexer `pilot.database.database`/delete_subsequent_steps().","target":"scip-python python temp indexer `pilot.database.models.feature`/Feature#previous_step.","attributes":{"type":"uses","at":[383,47,383,60]}},{"key":"geid_130_376","source":"scip-python python temp indexer `pilot.database.database`/delete_all_app_development_data().","target":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#","attributes":{"type":"uses","at":[397,14,397,30]}},{"key":"geid_130_377","source":"scip-python python temp indexer `pilot.database.database`/delete_all_app_development_data().","target":"scip-python python temp indexer `pilot.database.models.command_runs`/CommandRuns#","attributes":{"type":"uses","at":[397,32,397,43]}},{"key":"geid_130_378","source":"scip-python python temp indexer `pilot.database.database`/delete_all_app_development_data().","target":"scip-python python temp indexer `pilot.database.models.user_inputs`/UserInputs#","attributes":{"type":"uses","at":[397,45,397,55]}},{"key":"geid_130_379","source":"scip-python python temp indexer `pilot.database.database`/delete_all_app_development_data().","target":"scip-python python temp indexer `pilot.database.models.user_apps`/UserApps#","attributes":{"type":"uses","at":[397,57,397,65]}},{"key":"geid_130_380","source":"scip-python python temp indexer `pilot.database.database`/delete_all_app_development_data().","target":"scip-python python temp indexer `pilot.database.models.files`/File#","attributes":{"type":"uses","at":[397,67,397,71]}},{"key":"geid_130_381","source":"scip-python python temp indexer `pilot.database.database`/delete_all_app_development_data().","target":"scip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#","attributes":{"type":"uses","at":[397,73,397,85]}},{"key":"geid_130_382","source":"scip-python python temp indexer `pilot.database.database`/delete_unconnected_steps_from().","target":"scip-python python temp indexer `pilot.database.database`/get_all_connected_steps().","attributes":{"type":"uses","at":[405,22,405,45]}},{"key":"geid_130_383","source":"scip-python python temp indexer `pilot.database.database`/delete_unconnected_steps_from().","target":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#","attributes":{"type":"uses","at":[408,24,408,40]}},{"key":"geid_130_384","source":"scip-python python temp indexer `pilot.database.database`/delete_unconnected_steps_from().","target":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#","attributes":{"type":"uses","at":[409,9,409,25]}},{"key":"geid_130_385","source":"scip-python python temp indexer `pilot.database.database`/delete_unconnected_steps_from().","target":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#app.","attributes":{"type":"uses","at":[409,26,409,29]}},{"key":"geid_130_386","source":"scip-python python temp indexer `pilot.database.database`/delete_unconnected_steps_from().","target":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#","attributes":{"type":"uses","at":[410,9,410,25]}},{"key":"geid_130_387","source":"scip-python python temp indexer `pilot.database.database`/delete_unconnected_steps_from().","target":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#id.","attributes":{"type":"uses","at":[410,26,410,28]}},{"key":"geid_130_388","source":"scip-python python temp indexer `pilot.database.database`/delete_unconnected_steps_from().","target":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#","attributes":{"type":"uses","at":[411,15,411,31]}},{"key":"geid_130_389","source":"scip-python python temp indexer `pilot.database.database`/delete_unconnected_steps_from().","target":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#id.","attributes":{"type":"uses","at":[411,32,411,34]}},{"key":"geid_130_390","source":"scip-python python temp indexer `pilot.database.database`/delete_unconnected_steps_from().","target":"scip-python python temp indexer `pilot.utils.style`/color_red.","attributes":{"type":"uses","at":[414,14,414,23]}},{"key":"geid_130_391","source":"scip-python python temp indexer `pilot.database.database`/save_file_description().","target":"scip-python python temp indexer `pilot.database.models.files`/File#","attributes":{"type":"uses","at":[419,5,419,9]}},{"key":"geid_130_392","source":"scip-python python temp indexer `pilot.database.database`/save_file_description().","target":"scip-python python temp indexer `pilot.database.models.files`/File#","attributes":{"type":"uses","at":[421,25,421,29]}},{"key":"geid_130_393","source":"scip-python python temp indexer `pilot.database.database`/save_file_description().","target":"scip-python python temp indexer `pilot.database.models.files`/File#app.","attributes":{"type":"uses","at":[421,30,421,33]}},{"key":"geid_130_394","source":"scip-python python temp indexer `pilot.database.database`/save_file_description().","target":"scip-python python temp indexer `pilot.database.models.files`/File#","attributes":{"type":"uses","at":[421,35,421,39]}},{"key":"geid_130_395","source":"scip-python python temp indexer `pilot.database.database`/save_file_description().","target":"scip-python python temp indexer `pilot.database.models.files`/File#name.","attributes":{"type":"uses","at":[421,40,421,44]}},{"key":"geid_130_396","source":"scip-python python temp indexer `pilot.database.database`/save_file_description().","target":"scip-python python temp indexer `pilot.database.models.files`/File#","attributes":{"type":"uses","at":[421,46,421,50]}},{"key":"geid_130_397","source":"scip-python python temp indexer `pilot.database.database`/save_file_description().","target":"scip-python python temp indexer `pilot.database.models.files`/File#path.","attributes":{"type":"uses","at":[421,51,421,55]}},{"key":"geid_130_398","source":"scip-python python temp indexer `pilot.database.database`/save_feature().","target":"scip-python python temp indexer `pilot.database.database`/get_app().","attributes":{"type":"uses","at":[429,14,429,21]}},{"key":"geid_130_399","source":"scip-python python temp indexer `pilot.database.database`/save_feature().","target":"scip-python python temp indexer `pilot.database.models.feature`/Feature#","attributes":{"type":"uses","at":[430,18,430,25]}},{"key":"geid_130_400","source":"scip-python python temp indexer `pilot.database.database`/get_features_by_app_id().","target":"scip-python python temp indexer `pilot.database.database`/get_app().","attributes":{"type":"uses","at":[438,14,438,21]}},{"key":"geid_130_401","source":"scip-python python temp indexer `pilot.database.database`/get_features_by_app_id().","target":"scip-python python temp indexer `pilot.database.models.feature`/Feature#","attributes":{"type":"uses","at":[439,19,439,26]}},{"key":"geid_130_402","source":"scip-python python temp indexer `pilot.database.database`/get_features_by_app_id().","target":"scip-python python temp indexer `pilot.database.models.feature`/Feature#","attributes":{"type":"uses","at":[439,42,439,49]}},{"key":"geid_130_403","source":"scip-python python temp indexer `pilot.database.database`/get_features_by_app_id().","target":"scip-python python temp indexer `pilot.database.models.feature`/Feature#app.","attributes":{"type":"uses","at":[439,50,439,53]}},{"key":"geid_130_404","source":"scip-python python temp indexer `pilot.database.database`/get_features_by_app_id().","target":"scip-python python temp indexer `pilot.database.models.feature`/Feature#","attributes":{"type":"uses","at":[439,71,439,78]}},{"key":"geid_130_405","source":"scip-python python temp indexer `pilot.database.database`/get_features_by_app_id().","target":"scip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#created_at.","attributes":{"type":"uses","at":[439,79,439,89]}},{"key":"geid_130_406","source":"scip-python python temp indexer `pilot.database.database`/create_tables().","target":"scip-python python temp indexer `pilot.database.models.components.base_models`/database.","attributes":{"type":"uses","at":[449,9,449,17]}},{"key":"geid_130_407","source":"scip-python python temp indexer `pilot.database.database`/create_tables().","target":"scip-python python temp indexer `pilot.database.models.components.base_models`/database.","attributes":{"type":"uses","at":[450,8,450,16]}},{"key":"geid_130_408","source":"scip-python python temp indexer `pilot.database.database`/create_tables().","target":"scip-python python temp indexer `pilot.database.database`/TABLES.","attributes":{"type":"uses","at":[450,31,450,37]}},{"key":"geid_130_409","source":"scip-python python temp indexer `pilot.database.database`/drop_tables().","target":"scip-python python temp indexer `pilot.database.models.components.base_models`/database.","attributes":{"type":"uses","at":[454,9,454,17]}},{"key":"geid_130_410","source":"scip-python python temp indexer `pilot.database.database`/drop_tables().","target":"scip-python python temp indexer `pilot.database.database`/TABLES.","attributes":{"type":"uses","at":[455,21,455,27]}},{"key":"geid_130_411","source":"scip-python python temp indexer `pilot.database.database`/drop_tables().","target":"scip-python python temp indexer `pilot.database.config`/DATABASE_TYPE.","attributes":{"type":"uses","at":[456,15,456,28]}},{"key":"geid_130_412","source":"scip-python python temp indexer `pilot.database.database`/drop_tables().","target":"scip-python python temp indexer `pilot.database.config`/DATABASE_TYPE.","attributes":{"type":"uses","at":[458,17,458,30]}},{"key":"geid_130_413","source":"scip-python python temp indexer `pilot.database.database`/drop_tables().","target":"scip-python python temp indexer `pilot.database.config`/DATABASE_TYPE.","attributes":{"type":"uses","at":[461,63,461,76]}},{"key":"geid_130_414","source":"scip-python python temp indexer `pilot.database.database`/drop_tables().","target":"scip-python python temp indexer `pilot.database.models.components.base_models`/database.","attributes":{"type":"uses","at":[463,12,463,20]}},{"key":"geid_130_415","source":"scip-python python temp indexer `pilot.database.database`/database_exists().","target":"scip-python python temp indexer `pilot.database.models.components.base_models`/database.","attributes":{"type":"uses","at":[468,8,468,16]}},{"key":"geid_130_416","source":"scip-python python temp indexer `pilot.database.database`/database_exists().","target":"scip-python python temp indexer `pilot.database.models.components.base_models`/database.","attributes":{"type":"uses","at":[469,8,469,16]}},{"key":"geid_130_417","source":"scip-python python temp indexer `pilot.database.database`/create_database().","target":"scip-python python temp indexer `pilot.database.config`/DATABASE_TYPE.","attributes":{"type":"uses","at":[476,7,476,20]}},{"key":"geid_130_418","source":"scip-python python temp indexer `pilot.database.database`/create_database().","target":"scip-python python temp indexer `pilot.database.config`/DB_USER.","attributes":{"type":"uses","at":[480,17,480,24]}},{"key":"geid_130_419","source":"scip-python python temp indexer `pilot.database.database`/create_database().","target":"scip-python python temp indexer `pilot.database.config`/DB_PASSWORD.","attributes":{"type":"uses","at":[481,21,481,32]}},{"key":"geid_130_420","source":"scip-python python temp indexer `pilot.database.database`/create_database().","target":"scip-python python temp indexer `pilot.database.config`/DB_HOST.","attributes":{"type":"uses","at":[482,17,482,24]}},{"key":"geid_130_421","source":"scip-python python temp indexer `pilot.database.database`/create_database().","target":"scip-python python temp indexer `pilot.database.config`/DB_PORT.","attributes":{"type":"uses","at":[483,17,483,24]}},{"key":"geid_130_422","source":"scip-python python temp indexer `pilot.database.database`/create_database().","target":"scip-python python temp indexer `pilot.database.config`/DB_NAME.","attributes":{"type":"uses","at":[489,35,489,42]}},{"key":"geid_130_423","source":"scip-python python temp indexer `pilot.database.database`/tables_exist().","target":"scip-python python temp indexer `pilot.database.config`/DATABASE_TYPE.","attributes":{"type":"uses","at":[501,7,501,20]}},{"key":"geid_130_424","source":"scip-python python temp indexer `pilot.database.database`/tables_exist().","target":"scip-python python temp indexer `pilot.database.database`/TABLES.","attributes":{"type":"uses","at":[502,21,502,27]}},{"key":"geid_130_425","source":"scip-python python temp indexer `pilot.database.database`/tables_exist().","target":"scip-python python temp indexer `pilot.database.models.components.base_models`/database.","attributes":{"type":"uses","at":[504,16,504,24]}},{"key":"geid_130_426","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/","attributes":{"type":"uses","at":[512,3,512,11]}},{"key":"geid_130_427","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/drop_tables().","attributes":{"type":"uses","at":[513,4,513,15]}},{"key":"geid_130_428","source":"scip-python python temp indexer `pilot.database.database`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/create_tables().","attributes":{"type":"uses","at":[514,4,514,17]}},{"key":"geid_130_429","source":"scip-python python temp indexer `pilot.database.connection.postgres`/__init__:","target":"scip-python python temp indexer `pilot.database.connection.postgres`/create_postgres_database().","attributes":{"type":"defines","at":[8,0,21,16]}},{"key":"geid_130_430","source":"scip-python python temp indexer `pilot.database.connection.postgres`/__init__:","target":"scip-python python temp indexer `pilot.database.connection.postgres`/get_postgres_database().","attributes":{"type":"defines","at":[5,0,6,102]}},{"key":"geid_130_431","source":"scip-python python temp indexer `pilot.database.connection.postgres`/__init__:","target":"scip-python python temp indexer peewee/__init__:","attributes":{"type":"uses","at":[1,5,1,11]}},{"key":"geid_130_432","source":"scip-python python temp indexer `pilot.database.connection.postgres`/__init__:","target":"scip-python python temp indexer `psycopg2.extensions`/__init__:","attributes":{"type":"uses","at":[2,5,2,24]}},{"key":"geid_130_433","source":"scip-python python temp indexer `pilot.database.connection.postgres`/__init__:","target":"scip-python python temp indexer `pilot.database.config`/__init__:","attributes":{"type":"uses","at":[3,5,3,20]}},{"key":"geid_130_434","source":"scip-python python temp indexer `pilot.database.connection.postgres`/__init__:","target":"scip-python python temp indexer `pilot.database.config`/DB_NAME.","attributes":{"type":"uses","at":[3,28,3,35]}},{"key":"geid_130_435","source":"scip-python python temp indexer `pilot.database.connection.postgres`/__init__:","target":"scip-python python temp indexer `pilot.database.config`/DB_HOST.","attributes":{"type":"uses","at":[3,37,3,44]}},{"key":"geid_130_436","source":"scip-python python temp indexer `pilot.database.connection.postgres`/__init__:","target":"scip-python python temp indexer `pilot.database.config`/DB_PORT.","attributes":{"type":"uses","at":[3,46,3,53]}},{"key":"geid_130_437","source":"scip-python python temp indexer `pilot.database.connection.postgres`/__init__:","target":"scip-python python temp indexer `pilot.database.config`/DB_USER.","attributes":{"type":"uses","at":[3,55,3,62]}},{"key":"geid_130_438","source":"scip-python python temp indexer `pilot.database.connection.postgres`/__init__:","target":"scip-python python temp indexer `pilot.database.config`/DB_PASSWORD.","attributes":{"type":"uses","at":[3,64,3,75]}},{"key":"geid_130_439","source":"scip-python python temp indexer `pilot.database.connection.postgres`/get_postgres_database().","target":"scip-python python temp indexer `pilot.database.config`/DB_NAME.","attributes":{"type":"uses","at":[6,30,6,37]}},{"key":"geid_130_440","source":"scip-python python temp indexer `pilot.database.connection.postgres`/get_postgres_database().","target":"scip-python python temp indexer `pilot.database.config`/DB_USER.","attributes":{"type":"uses","at":[6,44,6,51]}},{"key":"geid_130_441","source":"scip-python python temp indexer `pilot.database.connection.postgres`/get_postgres_database().","target":"scip-python python temp indexer `pilot.database.config`/DB_PASSWORD.","attributes":{"type":"uses","at":[6,62,6,73]}},{"key":"geid_130_442","source":"scip-python python temp indexer `pilot.database.connection.postgres`/get_postgres_database().","target":"scip-python python temp indexer `pilot.database.config`/DB_HOST.","attributes":{"type":"uses","at":[6,80,6,87]}},{"key":"geid_130_443","source":"scip-python python temp indexer `pilot.database.connection.postgres`/get_postgres_database().","target":"scip-python python temp indexer `pilot.database.config`/DB_PORT.","attributes":{"type":"uses","at":[6,94,6,101]}},{"key":"geid_130_444","source":"scip-python python temp indexer `pilot.database.connection.postgres`/create_postgres_database().","target":"scip-python python temp indexer `pilot.database.config`/DB_USER.","attributes":{"type":"uses","at":[11,13,11,20]}},{"key":"geid_130_445","source":"scip-python python temp indexer `pilot.database.connection.postgres`/create_postgres_database().","target":"scip-python python temp indexer `pilot.database.config`/DB_PASSWORD.","attributes":{"type":"uses","at":[12,17,12,28]}},{"key":"geid_130_446","source":"scip-python python temp indexer `pilot.database.connection.postgres`/create_postgres_database().","target":"scip-python python temp indexer `pilot.database.config`/DB_HOST.","attributes":{"type":"uses","at":[13,13,13,20]}},{"key":"geid_130_447","source":"scip-python python temp indexer `pilot.database.connection.postgres`/create_postgres_database().","target":"scip-python python temp indexer `pilot.database.config`/DB_PORT.","attributes":{"type":"uses","at":[14,13,14,20]}},{"key":"geid_130_448","source":"scip-python python temp indexer `pilot.database.connection.postgres`/create_postgres_database().","target":"scip-python python temp indexer `pilot.database.config`/DB_NAME.","attributes":{"type":"uses","at":[18,31,18,38]}},{"key":"geid_130_449","source":"scip-python python temp indexer `pilot.database.connection.sqlite`/__init__:","target":"scip-python python temp indexer `pilot.database.connection.sqlite`/get_sqlite_database().","attributes":{"type":"defines","at":[3,0,4,34]}},{"key":"geid_130_450","source":"scip-python python temp indexer `pilot.database.connection.sqlite`/__init__:","target":"scip-python python temp indexer peewee/__init__:","attributes":{"type":"uses","at":[0,5,0,11]}},{"key":"geid_130_451","source":"scip-python python temp indexer `pilot.database.connection.sqlite`/__init__:","target":"scip-python python temp indexer `pilot.database.config`/__init__:","attributes":{"type":"uses","at":[1,5,1,20]}},{"key":"geid_130_452","source":"scip-python python temp indexer `pilot.database.connection.sqlite`/__init__:","target":"scip-python python temp indexer `pilot.database.config`/DB_NAME.","attributes":{"type":"uses","at":[1,28,1,35]}},{"key":"geid_130_453","source":"scip-python python temp indexer `pilot.database.connection.sqlite`/get_sqlite_database().","target":"scip-python python temp indexer `pilot.database.config`/DB_NAME.","attributes":{"type":"uses","at":[4,26,4,33]}},{"key":"geid_130_454","source":"scip-python python temp indexer `pilot.database.models.app`/__init__:","target":"scip-python python temp indexer `pilot.database.models.app`/App#","attributes":{"type":"defines","at":[6,0,10,33]}},{"key":"geid_130_455","source":"scip-python python temp indexer `pilot.database.models.app`/__init__:","target":"scip-python python temp indexer peewee/__init__:","attributes":{"type":"uses","at":[0,5,0,11]}},{"key":"geid_130_456","source":"scip-python python temp indexer `pilot.database.models.app`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.base_models`/__init__:","attributes":{"type":"uses","at":[2,5,2,43]}},{"key":"geid_130_457","source":"scip-python python temp indexer `pilot.database.models.app`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#","attributes":{"type":"uses","at":[2,51,2,60]}},{"key":"geid_130_458","source":"scip-python python temp indexer `pilot.database.models.app`/__init__:","target":"scip-python python temp indexer `pilot.database.models.user`/__init__:","attributes":{"type":"uses","at":[3,5,3,25]}},{"key":"geid_130_459","source":"scip-python python temp indexer `pilot.database.models.app`/__init__:","target":"scip-python python temp indexer `pilot.database.models.user`/User#","attributes":{"type":"uses","at":[3,33,3,37]}},{"key":"geid_130_460","source":"scip-python python temp indexer `pilot.database.models.app`/App#","target":"scip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#","attributes":{"type":"uses","at":[6,10,6,19]}},{"key":"geid_130_461","source":"scip-python python temp indexer `pilot.database.models.app`/App#","target":"scip-python python temp indexer `pilot.database.models.user`/User#","attributes":{"type":"uses","at":[7,27,7,31]}},{"key":"geid_130_462","source":"scip-python python temp indexer `pilot.database.models.architecture`/Architecture#","target":"scip-python python temp indexer `pilot.database.models.architecture`/Architecture#Meta#","attributes":{"type":"defines","at":[13,4,14,35]}},{"key":"geid_130_463","source":"scip-python python temp indexer `pilot.database.models.architecture`/__init__:","target":"scip-python python temp indexer `pilot.database.models.architecture`/Architecture#","attributes":{"type":"defines","at":[7,0,14,35]}},{"key":"geid_130_464","source":"scip-python python temp indexer `pilot.database.models.architecture`/__init__:","target":"scip-python python temp indexer `pilot.database.config`/__init__:","attributes":{"type":"uses","at":[1,5,1,20]}},{"key":"geid_130_465","source":"scip-python python temp indexer `pilot.database.models.architecture`/__init__:","target":"scip-python python temp indexer `pilot.database.config`/DATABASE_TYPE.","attributes":{"type":"uses","at":[1,28,1,41]}},{"key":"geid_130_466","source":"scip-python python temp indexer `pilot.database.models.architecture`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.progress_step`/__init__:","attributes":{"type":"uses","at":[2,5,2,45]}},{"key":"geid_130_467","source":"scip-python python temp indexer `pilot.database.models.architecture`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.progress_step`/ProgressStep#","attributes":{"type":"uses","at":[2,53,2,65]}},{"key":"geid_130_468","source":"scip-python python temp indexer `pilot.database.models.architecture`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/__init__:","attributes":{"type":"uses","at":[3,5,3,50]}},{"key":"geid_130_469","source":"scip-python python temp indexer `pilot.database.models.architecture`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#","attributes":{"type":"uses","at":[3,58,3,67]}},{"key":"geid_130_470","source":"scip-python python temp indexer `pilot.database.models.architecture`/__init__:","target":"scip-python python temp indexer `playhouse.postgres_ext`/__init__:","attributes":{"type":"uses","at":[4,5,4,27]}},{"key":"geid_130_471","source":"scip-python python temp indexer `pilot.database.models.architecture`/Architecture#","target":"scip-python python temp indexer `pilot.database.models.components.progress_step`/ProgressStep#","attributes":{"type":"uses","at":[7,19,7,31]}},{"key":"geid_130_472","source":"scip-python python temp indexer `pilot.database.models.architecture`/Architecture#","target":"scip-python python temp indexer `pilot.database.config`/DATABASE_TYPE.","attributes":{"type":"uses","at":[8,7,8,20]}},{"key":"geid_130_473","source":"scip-python python temp indexer `pilot.database.models.architecture`/Architecture#","target":"scip-python python temp indexer `pilot.database.models.architecture`/Architecture#architecture.","attributes":{"type":"uses","at":[11,8,11,20]}},{"key":"geid_130_474","source":"scip-python python temp indexer `pilot.database.models.architecture`/Architecture#","target":"scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#","attributes":{"type":"uses","at":[11,23,11,32]}},{"key":"geid_130_475","source":"scip-python python temp indexer `pilot.database.models.command_runs`/CommandRuns#","target":"scip-python python temp indexer `pilot.database.models.command_runs`/CommandRuns#Meta#","attributes":{"type":"defines","at":[16,4,20,9]}},{"key":"geid_130_476","source":"scip-python python temp indexer `pilot.database.models.command_runs`/__init__:","target":"scip-python python temp indexer `pilot.database.models.command_runs`/CommandRuns#","attributes":{"type":"defines","at":[6,0,20,9]}},{"key":"geid_130_477","source":"scip-python python temp indexer `pilot.database.models.command_runs`/__init__:","target":"scip-python python temp indexer peewee/__init__:","attributes":{"type":"uses","at":[0,5,0,11]}},{"key":"geid_130_478","source":"scip-python python temp indexer `pilot.database.models.command_runs`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.base_models`/__init__:","attributes":{"type":"uses","at":[2,5,2,43]}},{"key":"geid_130_479","source":"scip-python python temp indexer `pilot.database.models.command_runs`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#","attributes":{"type":"uses","at":[2,51,2,60]}},{"key":"geid_130_480","source":"scip-python python temp indexer `pilot.database.models.command_runs`/__init__:","target":"scip-python python temp indexer `pilot.database.models.app`/__init__:","attributes":{"type":"uses","at":[3,5,3,24]}},{"key":"geid_130_481","source":"scip-python python temp indexer `pilot.database.models.command_runs`/__init__:","target":"scip-python python temp indexer `pilot.database.models.app`/App#","attributes":{"type":"uses","at":[3,32,3,35]}},{"key":"geid_130_482","source":"scip-python python temp indexer `pilot.database.models.command_runs`/CommandRuns#","target":"scip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#","attributes":{"type":"uses","at":[6,18,6,27]}},{"key":"geid_130_483","source":"scip-python python temp indexer `pilot.database.models.command_runs`/CommandRuns#","target":"scip-python python temp indexer `pilot.database.models.app`/App#","attributes":{"type":"uses","at":[8,26,8,29]}},{"key":"geid_130_484","source":"scip-python python temp indexer `pilot.database.models.development`/Development#","target":"scip-python python temp indexer `pilot.database.models.development`/Development#Meta#","attributes":{"type":"defines","at":[4,4,5,34]}},{"key":"geid_130_485","source":"scip-python python temp indexer `pilot.database.models.development`/__init__:","target":"scip-python python temp indexer `pilot.database.models.development`/Development#","attributes":{"type":"defines","at":[3,0,5,34]}},{"key":"geid_130_486","source":"scip-python python temp indexer `pilot.database.models.development`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.progress_step`/__init__:","attributes":{"type":"uses","at":[0,5,0,45]}},{"key":"geid_130_487","source":"scip-python python temp indexer `pilot.database.models.development`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.progress_step`/ProgressStep#","attributes":{"type":"uses","at":[0,53,0,65]}},{"key":"geid_130_488","source":"scip-python python temp indexer `pilot.database.models.development`/Development#","target":"scip-python python temp indexer `pilot.database.models.components.progress_step`/ProgressStep#","attributes":{"type":"uses","at":[3,18,3,30]}},{"key":"geid_130_489","source":"scip-python python temp indexer `pilot.database.models.development_planning`/DevelopmentPlanning#","target":"scip-python python temp indexer `pilot.database.models.development_planning`/DevelopmentPlanning#Meta#","attributes":{"type":"defines","at":[12,4,13,43]}},{"key":"geid_130_490","source":"scip-python python temp indexer `pilot.database.models.development_planning`/__init__:","target":"scip-python python temp indexer `pilot.database.models.development_planning`/DevelopmentPlanning#","attributes":{"type":"defines","at":[6,0,13,43]}},{"key":"geid_130_491","source":"scip-python python temp indexer `pilot.database.models.development_planning`/__init__:","target":"scip-python python temp indexer `pilot.database.config`/__init__:","attributes":{"type":"uses","at":[0,5,0,20]}},{"key":"geid_130_492","source":"scip-python python temp indexer `pilot.database.models.development_planning`/__init__:","target":"scip-python python temp indexer `pilot.database.config`/DATABASE_TYPE.","attributes":{"type":"uses","at":[0,28,0,41]}},{"key":"geid_130_493","source":"scip-python python temp indexer `pilot.database.models.development_planning`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.progress_step`/__init__:","attributes":{"type":"uses","at":[1,5,1,45]}},{"key":"geid_130_494","source":"scip-python python temp indexer `pilot.database.models.development_planning`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.progress_step`/ProgressStep#","attributes":{"type":"uses","at":[1,53,1,65]}},{"key":"geid_130_495","source":"scip-python python temp indexer `pilot.database.models.development_planning`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/__init__:","attributes":{"type":"uses","at":[2,5,2,50]}},{"key":"geid_130_496","source":"scip-python python temp indexer `pilot.database.models.development_planning`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#","attributes":{"type":"uses","at":[2,58,2,67]}},{"key":"geid_130_497","source":"scip-python python temp indexer `pilot.database.models.development_planning`/__init__:","target":"scip-python python temp indexer `playhouse.postgres_ext`/__init__:","attributes":{"type":"uses","at":[3,5,3,27]}},{"key":"geid_130_498","source":"scip-python python temp indexer `pilot.database.models.development_planning`/DevelopmentPlanning#","target":"scip-python python temp indexer `pilot.database.models.components.progress_step`/ProgressStep#","attributes":{"type":"uses","at":[6,26,6,38]}},{"key":"geid_130_499","source":"scip-python python temp indexer `pilot.database.models.development_planning`/DevelopmentPlanning#","target":"scip-python python temp indexer `pilot.database.config`/DATABASE_TYPE.","attributes":{"type":"uses","at":[7,7,7,20]}},{"key":"geid_130_500","source":"scip-python python temp indexer `pilot.database.models.development_planning`/DevelopmentPlanning#","target":"scip-python python temp indexer `pilot.database.models.development_planning`/DevelopmentPlanning#development_plan.","attributes":{"type":"uses","at":[10,8,10,24]}},{"key":"geid_130_501","source":"scip-python python temp indexer `pilot.database.models.development_planning`/DevelopmentPlanning#","target":"scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#","attributes":{"type":"uses","at":[10,27,10,36]}},{"key":"geid_130_502","source":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#","target":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#Meta#","attributes":{"type":"defines","at":[27,4,31,9]}},{"key":"geid_130_503","source":"scip-python python temp indexer `pilot.database.models.development_steps`/__init__:","target":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#","attributes":{"type":"defines","at":[8,0,31,9]}},{"key":"geid_130_504","source":"scip-python python temp indexer `pilot.database.models.development_steps`/__init__:","target":"scip-python python temp indexer peewee/__init__:","attributes":{"type":"uses","at":[0,5,0,11]}},{"key":"geid_130_505","source":"scip-python python temp indexer `pilot.database.models.development_steps`/__init__:","target":"scip-python python temp indexer `pilot.database.config`/__init__:","attributes":{"type":"uses","at":[1,5,1,20]}},{"key":"geid_130_506","source":"scip-python python temp indexer `pilot.database.models.development_steps`/__init__:","target":"scip-python python temp indexer `pilot.database.config`/DATABASE_TYPE.","attributes":{"type":"uses","at":[1,28,1,41]}},{"key":"geid_130_507","source":"scip-python python temp indexer `pilot.database.models.development_steps`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.base_models`/__init__:","attributes":{"type":"uses","at":[2,5,2,43]}},{"key":"geid_130_508","source":"scip-python python temp indexer `pilot.database.models.development_steps`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#","attributes":{"type":"uses","at":[2,51,2,60]}},{"key":"geid_130_509","source":"scip-python python temp indexer `pilot.database.models.development_steps`/__init__:","target":"scip-python python temp indexer `pilot.database.models.app`/__init__:","attributes":{"type":"uses","at":[3,5,3,24]}},{"key":"geid_130_510","source":"scip-python python temp indexer `pilot.database.models.development_steps`/__init__:","target":"scip-python python temp indexer `pilot.database.models.app`/App#","attributes":{"type":"uses","at":[3,32,3,35]}},{"key":"geid_130_511","source":"scip-python python temp indexer `pilot.database.models.development_steps`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/__init__:","attributes":{"type":"uses","at":[4,5,4,50]}},{"key":"geid_130_512","source":"scip-python python temp indexer `pilot.database.models.development_steps`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#","attributes":{"type":"uses","at":[4,58,4,67]}},{"key":"geid_130_513","source":"scip-python python temp indexer `pilot.database.models.development_steps`/__init__:","target":"scip-python python temp indexer `playhouse.postgres_ext`/__init__:","attributes":{"type":"uses","at":[5,5,5,27]}},{"key":"geid_130_514","source":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#","target":"scip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#","attributes":{"type":"uses","at":[8,23,8,32]}},{"key":"geid_130_515","source":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#","target":"scip-python python temp indexer `pilot.database.models.app`/App#","attributes":{"type":"uses","at":[10,26,10,29]}},{"key":"geid_130_516","source":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#","target":"scip-python python temp indexer `pilot.database.config`/DATABASE_TYPE.","attributes":{"type":"uses","at":[15,7,15,20]}},{"key":"geid_130_517","source":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#","target":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#messages.","attributes":{"type":"uses","at":[20,8,20,16]}},{"key":"geid_130_518","source":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#","target":"scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#","attributes":{"type":"uses","at":[20,19,20,28]}},{"key":"geid_130_519","source":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#","target":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#llm_response.","attributes":{"type":"uses","at":[21,8,21,20]}},{"key":"geid_130_520","source":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#","target":"scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#","attributes":{"type":"uses","at":[21,23,21,32]}},{"key":"geid_130_521","source":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#","target":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#prompt_data.","attributes":{"type":"uses","at":[22,8,22,19]}},{"key":"geid_130_522","source":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#","target":"scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#","attributes":{"type":"uses","at":[22,22,22,31]}},{"key":"geid_130_523","source":"scip-python python temp indexer `pilot.database.models.environment_setup`/EnvironmentSetup#","target":"scip-python python temp indexer `pilot.database.models.environment_setup`/EnvironmentSetup#Meta#","attributes":{"type":"defines","at":[4,4,5,40]}},{"key":"geid_130_524","source":"scip-python python temp indexer `pilot.database.models.environment_setup`/__init__:","target":"scip-python python temp indexer `pilot.database.models.environment_setup`/EnvironmentSetup#","attributes":{"type":"defines","at":[3,0,5,40]}},{"key":"geid_130_525","source":"scip-python python temp indexer `pilot.database.models.environment_setup`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.progress_step`/__init__:","attributes":{"type":"uses","at":[0,5,0,45]}},{"key":"geid_130_526","source":"scip-python python temp indexer `pilot.database.models.environment_setup`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.progress_step`/ProgressStep#","attributes":{"type":"uses","at":[0,53,0,65]}},{"key":"geid_130_527","source":"scip-python python temp indexer `pilot.database.models.environment_setup`/EnvironmentSetup#","target":"scip-python python temp indexer `pilot.database.models.components.progress_step`/ProgressStep#","attributes":{"type":"uses","at":[3,23,3,35]}},{"key":"geid_130_528","source":"scip-python python temp indexer `pilot.database.models.feature`/__init__:","target":"scip-python python temp indexer `pilot.database.models.feature`/Feature#","attributes":{"type":"defines","at":[9,0,20,43]}},{"key":"geid_130_529","source":"scip-python python temp indexer `pilot.database.models.feature`/__init__:","target":"scip-python python temp indexer peewee/__init__:","attributes":{"type":"uses","at":[0,5,0,11]}},{"key":"geid_130_530","source":"scip-python python temp indexer `pilot.database.models.feature`/__init__:","target":"scip-python python temp indexer `pilot.database.config`/__init__:","attributes":{"type":"uses","at":[1,5,1,20]}},{"key":"geid_130_531","source":"scip-python python temp indexer `pilot.database.models.feature`/__init__:","target":"scip-python python temp indexer `pilot.database.config`/DATABASE_TYPE.","attributes":{"type":"uses","at":[1,28,1,41]}},{"key":"geid_130_532","source":"scip-python python temp indexer `pilot.database.models.feature`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.base_models`/__init__:","attributes":{"type":"uses","at":[2,5,2,43]}},{"key":"geid_130_533","source":"scip-python python temp indexer `pilot.database.models.feature`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#","attributes":{"type":"uses","at":[2,51,2,60]}},{"key":"geid_130_534","source":"scip-python python temp indexer `pilot.database.models.feature`/__init__:","target":"scip-python python temp indexer `pilot.database.models.app`/__init__:","attributes":{"type":"uses","at":[3,5,3,24]}},{"key":"geid_130_535","source":"scip-python python temp indexer `pilot.database.models.feature`/__init__:","target":"scip-python python temp indexer `pilot.database.models.app`/App#","attributes":{"type":"uses","at":[3,32,3,35]}},{"key":"geid_130_536","source":"scip-python python temp indexer `pilot.database.models.feature`/__init__:","target":"scip-python python temp indexer `pilot.database.models.development_steps`/__init__:","attributes":{"type":"uses","at":[4,5,4,38]}},{"key":"geid_130_537","source":"scip-python python temp indexer `pilot.database.models.feature`/__init__:","target":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#","attributes":{"type":"uses","at":[4,46,4,62]}},{"key":"geid_130_538","source":"scip-python python temp indexer `pilot.database.models.feature`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/__init__:","attributes":{"type":"uses","at":[5,5,5,50]}},{"key":"geid_130_539","source":"scip-python python temp indexer `pilot.database.models.feature`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#","attributes":{"type":"uses","at":[5,58,5,67]}},{"key":"geid_130_540","source":"scip-python python temp indexer `pilot.database.models.feature`/__init__:","target":"scip-python python temp indexer `playhouse.postgres_ext`/__init__:","attributes":{"type":"uses","at":[6,5,6,27]}},{"key":"geid_130_541","source":"scip-python python temp indexer `pilot.database.models.feature`/Feature#","target":"scip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#","attributes":{"type":"uses","at":[9,14,9,23]}},{"key":"geid_130_542","source":"scip-python python temp indexer `pilot.database.models.feature`/Feature#","target":"scip-python python temp indexer `pilot.database.models.app`/App#","attributes":{"type":"uses","at":[10,26,10,29]}},{"key":"geid_130_543","source":"scip-python python temp indexer `pilot.database.models.feature`/Feature#","target":"scip-python python temp indexer `pilot.database.config`/DATABASE_TYPE.","attributes":{"type":"uses","at":[13,7,13,20]}},{"key":"geid_130_544","source":"scip-python python temp indexer `pilot.database.models.feature`/Feature#","target":"scip-python python temp indexer `pilot.database.models.feature`/Feature#messages.","attributes":{"type":"uses","at":[16,8,16,16]}},{"key":"geid_130_545","source":"scip-python python temp indexer `pilot.database.models.feature`/Feature#","target":"scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#","attributes":{"type":"uses","at":[16,19,16,28]}},{"key":"geid_130_546","source":"scip-python python temp indexer `pilot.database.models.feature`/Feature#","target":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#","attributes":{"type":"uses","at":[18,36,18,52]}},{"key":"geid_130_547","source":"scip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#","target":"scip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#Meta#","attributes":{"type":"defines","at":[41,4,45,9]}},{"key":"geid_130_548","source":"scip-python python temp indexer `pilot.database.models.file_snapshot`/__init__:","target":"scip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#","attributes":{"type":"defines","at":[35,0,45,9]}},{"key":"geid_130_549","source":"scip-python python temp indexer `pilot.database.models.file_snapshot`/SmartBlobField#","target":"scip-python python temp indexer `pilot.database.models.file_snapshot`/SmartBlobField#python_value().","attributes":{"type":"defines","at":[27,4,32,22]}},{"key":"geid_130_550","source":"scip-python python temp indexer `pilot.database.models.file_snapshot`/SmartBlobField#","target":"scip-python python temp indexer `pilot.database.models.file_snapshot`/SmartBlobField#db_value().","attributes":{"type":"defines","at":[21,4,25,38]}},{"key":"geid_130_551","source":"scip-python python temp indexer `pilot.database.models.file_snapshot`/__init__:","target":"scip-python python temp indexer `pilot.database.models.file_snapshot`/SmartBlobField#","attributes":{"type":"defines","at":[12,0,32,22]}},{"key":"geid_130_552","source":"scip-python python temp indexer `pilot.database.models.file_snapshot`/__init__:","target":"scip-python python python-stdlib 3.11 logging/__init__:","attributes":{"type":"uses","at":[0,7,0,14]}},{"key":"geid_130_553","source":"scip-python python temp indexer `pilot.database.models.file_snapshot`/__init__:","target":"scip-python python temp indexer peewee/__init__:","attributes":{"type":"uses","at":[2,5,2,11]}},{"key":"geid_130_554","source":"scip-python python temp indexer `pilot.database.models.file_snapshot`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.base_models`/__init__:","attributes":{"type":"uses","at":[4,5,4,43]}},{"key":"geid_130_555","source":"scip-python python temp indexer `pilot.database.models.file_snapshot`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#","attributes":{"type":"uses","at":[4,51,4,60]}},{"key":"geid_130_556","source":"scip-python python temp indexer `pilot.database.models.file_snapshot`/__init__:","target":"scip-python python temp indexer `pilot.database.models.development_steps`/__init__:","attributes":{"type":"uses","at":[5,5,5,38]}},{"key":"geid_130_557","source":"scip-python python temp indexer `pilot.database.models.file_snapshot`/__init__:","target":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#","attributes":{"type":"uses","at":[5,46,5,62]}},{"key":"geid_130_558","source":"scip-python python temp indexer `pilot.database.models.file_snapshot`/__init__:","target":"scip-python python temp indexer `pilot.database.models.app`/__init__:","attributes":{"type":"uses","at":[6,5,6,24]}},{"key":"geid_130_559","source":"scip-python python temp indexer `pilot.database.models.file_snapshot`/__init__:","target":"scip-python python temp indexer `pilot.database.models.app`/App#","attributes":{"type":"uses","at":[6,32,6,35]}},{"key":"geid_130_560","source":"scip-python python temp indexer `pilot.database.models.file_snapshot`/__init__:","target":"scip-python python temp indexer `pilot.database.models.files`/__init__:","attributes":{"type":"uses","at":[7,5,7,26]}},{"key":"geid_130_561","source":"scip-python python temp indexer `pilot.database.models.file_snapshot`/__init__:","target":"scip-python python temp indexer `pilot.database.models.files`/File#","attributes":{"type":"uses","at":[7,34,7,38]}},{"key":"geid_130_562","source":"scip-python python temp indexer `pilot.database.models.file_snapshot`/__init__:","target":"scip-python python python-stdlib 3.11 logging/__init__:","attributes":{"type":"uses","at":[9,6,9,13]}},{"key":"geid_130_563","source":"scip-python python temp indexer `pilot.database.models.file_snapshot`/__init__:","target":"scip-python python python-stdlib 3.11 logging/getLogger().","attributes":{"type":"uses","at":[9,14,9,23]}},{"key":"geid_130_564","source":"scip-python python temp indexer `pilot.database.models.file_snapshot`/__init__:","target":"scip-python python temp indexer `pilot.database.models.file_snapshot`/","attributes":{"type":"uses","at":[9,24,9,32]}},{"key":"geid_130_565","source":"scip-python python temp indexer `pilot.database.models.file_snapshot`/SmartBlobField#db_value().","target":"scip-python python temp indexer `pilot.database.models.file_snapshot`/log.","attributes":{"type":"uses","at":[23,12,23,15]}},{"key":"geid_130_566","source":"scip-python python temp indexer `pilot.database.models.file_snapshot`/SmartBlobField#db_value().","target":"scip-python python python-stdlib 3.11 logging/Logger#warning().","attributes":{"type":"uses","at":[23,16,23,23]}},{"key":"geid_130_567","source":"scip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#","target":"scip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#","attributes":{"type":"uses","at":[35,19,35,28]}},{"key":"geid_130_568","source":"scip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#","target":"scip-python python temp indexer `pilot.database.models.app`/App#","attributes":{"type":"uses","at":[36,26,36,29]}},{"key":"geid_130_569","source":"scip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#","target":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#","attributes":{"type":"uses","at":[37,39,37,55]}},{"key":"geid_130_570","source":"scip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#","target":"scip-python python temp indexer `pilot.database.models.files`/File#","attributes":{"type":"uses","at":[38,27,38,31]}},{"key":"geid_130_571","source":"scip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#","target":"scip-python python temp indexer `pilot.database.models.file_snapshot`/SmartBlobField#","attributes":{"type":"uses","at":[39,14,39,28]}},{"key":"geid_130_572","source":"scip-python python temp indexer `pilot.database.models.files`/File#","target":"scip-python python temp indexer `pilot.database.models.files`/File#Meta#","attributes":{"type":"defines","at":[14,4,17,9]}},{"key":"geid_130_573","source":"scip-python python temp indexer `pilot.database.models.files`/__init__:","target":"scip-python python temp indexer `pilot.database.models.files`/File#","attributes":{"type":"defines","at":[6,0,17,9]}},{"key":"geid_130_574","source":"scip-python python temp indexer `pilot.database.models.files`/__init__:","target":"scip-python python temp indexer peewee/__init__:","attributes":{"type":"uses","at":[0,5,0,11]}},{"key":"geid_130_575","source":"scip-python python temp indexer `pilot.database.models.files`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.base_models`/__init__:","attributes":{"type":"uses","at":[2,5,2,43]}},{"key":"geid_130_576","source":"scip-python python temp indexer `pilot.database.models.files`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#","attributes":{"type":"uses","at":[2,51,2,60]}},{"key":"geid_130_577","source":"scip-python python temp indexer `pilot.database.models.files`/__init__:","target":"scip-python python temp indexer `pilot.database.models.app`/__init__:","attributes":{"type":"uses","at":[3,5,3,24]}},{"key":"geid_130_578","source":"scip-python python temp indexer `pilot.database.models.files`/__init__:","target":"scip-python python temp indexer `pilot.database.models.app`/App#","attributes":{"type":"uses","at":[3,32,3,35]}},{"key":"geid_130_579","source":"scip-python python temp indexer `pilot.database.models.files`/File#","target":"scip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#","attributes":{"type":"uses","at":[6,11,6,20]}},{"key":"geid_130_580","source":"scip-python python temp indexer `pilot.database.models.files`/File#","target":"scip-python python temp indexer `pilot.database.models.app`/App#","attributes":{"type":"uses","at":[8,26,8,29]}},{"key":"geid_130_581","source":"scip-python python temp indexer `pilot.database.models.project_description`/ProjectDescription#","target":"scip-python python temp indexer `pilot.database.models.project_description`/ProjectDescription#Meta#","attributes":{"type":"defines","at":[8,4,9,42]}},{"key":"geid_130_582","source":"scip-python python temp indexer `pilot.database.models.project_description`/__init__:","target":"scip-python python temp indexer `pilot.database.models.project_description`/ProjectDescription#","attributes":{"type":"defines","at":[4,0,9,42]}},{"key":"geid_130_583","source":"scip-python python temp indexer `pilot.database.models.project_description`/__init__:","target":"scip-python python temp indexer peewee/__init__:","attributes":{"type":"uses","at":[0,5,0,11]}},{"key":"geid_130_584","source":"scip-python python temp indexer `pilot.database.models.project_description`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.progress_step`/__init__:","attributes":{"type":"uses","at":[1,5,1,45]}},{"key":"geid_130_585","source":"scip-python python temp indexer `pilot.database.models.project_description`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.progress_step`/ProgressStep#","attributes":{"type":"uses","at":[1,53,1,65]}},{"key":"geid_130_586","source":"scip-python python temp indexer `pilot.database.models.project_description`/ProjectDescription#","target":"scip-python python temp indexer `pilot.database.models.components.progress_step`/ProgressStep#","attributes":{"type":"uses","at":[4,25,4,37]}},{"key":"geid_130_587","source":"scip-python python temp indexer `pilot.database.models.user`/__init__:","target":"scip-python python temp indexer `pilot.database.models.user`/User#","attributes":{"type":"defines","at":[5,0,7,26]}},{"key":"geid_130_588","source":"scip-python python temp indexer `pilot.database.models.user`/__init__:","target":"scip-python python temp indexer peewee/__init__:","attributes":{"type":"uses","at":[0,5,0,11]}},{"key":"geid_130_589","source":"scip-python python temp indexer `pilot.database.models.user`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.base_models`/__init__:","attributes":{"type":"uses","at":[2,5,2,43]}},{"key":"geid_130_590","source":"scip-python python temp indexer `pilot.database.models.user`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#","attributes":{"type":"uses","at":[2,51,2,60]}},{"key":"geid_130_591","source":"scip-python python temp indexer `pilot.database.models.user`/User#","target":"scip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#","attributes":{"type":"uses","at":[5,11,5,20]}},{"key":"geid_130_592","source":"scip-python python temp indexer `pilot.database.models.user_apps`/UserApps#","target":"scip-python python temp indexer `pilot.database.models.user_apps`/UserApps#Meta#","attributes":{"type":"defines","at":[13,4,17,9]}},{"key":"geid_130_593","source":"scip-python python temp indexer `pilot.database.models.user_apps`/__init__:","target":"scip-python python temp indexer `pilot.database.models.user_apps`/UserApps#","attributes":{"type":"defines","at":[7,0,17,9]}},{"key":"geid_130_594","source":"scip-python python temp indexer `pilot.database.models.user_apps`/__init__:","target":"scip-python python temp indexer peewee/__init__:","attributes":{"type":"uses","at":[0,5,0,11]}},{"key":"geid_130_595","source":"scip-python python temp indexer `pilot.database.models.user_apps`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.base_models`/__init__:","attributes":{"type":"uses","at":[2,5,2,43]}},{"key":"geid_130_596","source":"scip-python python temp indexer `pilot.database.models.user_apps`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#","attributes":{"type":"uses","at":[2,51,2,60]}},{"key":"geid_130_597","source":"scip-python python temp indexer `pilot.database.models.user_apps`/__init__:","target":"scip-python python temp indexer `pilot.database.models.app`/__init__:","attributes":{"type":"uses","at":[3,5,3,24]}},{"key":"geid_130_598","source":"scip-python python temp indexer `pilot.database.models.user_apps`/__init__:","target":"scip-python python temp indexer `pilot.database.models.app`/App#","attributes":{"type":"uses","at":[3,32,3,35]}},{"key":"geid_130_599","source":"scip-python python temp indexer `pilot.database.models.user_apps`/__init__:","target":"scip-python python temp indexer `pilot.database.models.user`/__init__:","attributes":{"type":"uses","at":[4,5,4,25]}},{"key":"geid_130_600","source":"scip-python python temp indexer `pilot.database.models.user_apps`/__init__:","target":"scip-python python temp indexer `pilot.database.models.user`/User#","attributes":{"type":"uses","at":[4,33,4,37]}},{"key":"geid_130_601","source":"scip-python python temp indexer `pilot.database.models.user_apps`/UserApps#","target":"scip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#","attributes":{"type":"uses","at":[7,15,7,24]}},{"key":"geid_130_602","source":"scip-python python temp indexer `pilot.database.models.user_apps`/UserApps#","target":"scip-python python temp indexer `pilot.database.models.app`/App#","attributes":{"type":"uses","at":[9,26,9,29]}},{"key":"geid_130_603","source":"scip-python python temp indexer `pilot.database.models.user_apps`/UserApps#","target":"scip-python python temp indexer `pilot.database.models.user`/User#","attributes":{"type":"uses","at":[10,27,10,31]}},{"key":"geid_130_604","source":"scip-python python temp indexer `pilot.database.models.user_inputs`/UserInputs#","target":"scip-python python temp indexer `pilot.database.models.user_inputs`/UserInputs#Meta#","attributes":{"type":"defines","at":[15,4,19,9]}},{"key":"geid_130_605","source":"scip-python python temp indexer `pilot.database.models.user_inputs`/__init__:","target":"scip-python python temp indexer `pilot.database.models.user_inputs`/UserInputs#","attributes":{"type":"defines","at":[6,0,19,9]}},{"key":"geid_130_606","source":"scip-python python temp indexer `pilot.database.models.user_inputs`/__init__:","target":"scip-python python temp indexer peewee/__init__:","attributes":{"type":"uses","at":[0,5,0,11]}},{"key":"geid_130_607","source":"scip-python python temp indexer `pilot.database.models.user_inputs`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.base_models`/__init__:","attributes":{"type":"uses","at":[2,5,2,43]}},{"key":"geid_130_608","source":"scip-python python temp indexer `pilot.database.models.user_inputs`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#","attributes":{"type":"uses","at":[2,51,2,60]}},{"key":"geid_130_609","source":"scip-python python temp indexer `pilot.database.models.user_inputs`/__init__:","target":"scip-python python temp indexer `pilot.database.models.app`/__init__:","attributes":{"type":"uses","at":[3,5,3,24]}},{"key":"geid_130_610","source":"scip-python python temp indexer `pilot.database.models.user_inputs`/__init__:","target":"scip-python python temp indexer `pilot.database.models.app`/App#","attributes":{"type":"uses","at":[3,32,3,35]}},{"key":"geid_130_611","source":"scip-python python temp indexer `pilot.database.models.user_inputs`/UserInputs#","target":"scip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#","attributes":{"type":"uses","at":[6,17,6,26]}},{"key":"geid_130_612","source":"scip-python python temp indexer `pilot.database.models.user_inputs`/UserInputs#","target":"scip-python python temp indexer `pilot.database.models.app`/App#","attributes":{"type":"uses","at":[8,26,8,29]}},{"key":"geid_130_613","source":"scip-python python temp indexer `pilot.database.models.user_stories`/UserStories#","target":"scip-python python temp indexer `pilot.database.models.user_stories`/UserStories#Meta#","attributes":{"type":"defines","at":[11,4,12,35]}},{"key":"geid_130_614","source":"scip-python python temp indexer `pilot.database.models.user_stories`/__init__:","target":"scip-python python temp indexer `pilot.database.models.user_stories`/UserStories#","attributes":{"type":"defines","at":[6,0,12,35]}},{"key":"geid_130_615","source":"scip-python python temp indexer `pilot.database.models.user_stories`/__init__:","target":"scip-python python temp indexer `pilot.database.config`/__init__:","attributes":{"type":"uses","at":[0,5,0,20]}},{"key":"geid_130_616","source":"scip-python python temp indexer `pilot.database.models.user_stories`/__init__:","target":"scip-python python temp indexer `pilot.database.config`/DATABASE_TYPE.","attributes":{"type":"uses","at":[0,28,0,41]}},{"key":"geid_130_617","source":"scip-python python temp indexer `pilot.database.models.user_stories`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.progress_step`/__init__:","attributes":{"type":"uses","at":[1,5,1,45]}},{"key":"geid_130_618","source":"scip-python python temp indexer `pilot.database.models.user_stories`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.progress_step`/ProgressStep#","attributes":{"type":"uses","at":[1,53,1,65]}},{"key":"geid_130_619","source":"scip-python python temp indexer `pilot.database.models.user_stories`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/__init__:","attributes":{"type":"uses","at":[2,5,2,50]}},{"key":"geid_130_620","source":"scip-python python temp indexer `pilot.database.models.user_stories`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#","attributes":{"type":"uses","at":[2,58,2,67]}},{"key":"geid_130_621","source":"scip-python python temp indexer `pilot.database.models.user_stories`/__init__:","target":"scip-python python temp indexer `playhouse.postgres_ext`/__init__:","attributes":{"type":"uses","at":[3,5,3,27]}},{"key":"geid_130_622","source":"scip-python python temp indexer `pilot.database.models.user_stories`/UserStories#","target":"scip-python python temp indexer `pilot.database.models.components.progress_step`/ProgressStep#","attributes":{"type":"uses","at":[6,18,6,30]}},{"key":"geid_130_623","source":"scip-python python temp indexer `pilot.database.models.user_stories`/UserStories#","target":"scip-python python temp indexer `pilot.database.config`/DATABASE_TYPE.","attributes":{"type":"uses","at":[7,7,7,20]}},{"key":"geid_130_624","source":"scip-python python temp indexer `pilot.database.models.user_stories`/UserStories#","target":"scip-python python temp indexer `pilot.database.models.user_stories`/UserStories#user_stories.","attributes":{"type":"uses","at":[10,8,10,20]}},{"key":"geid_130_625","source":"scip-python python temp indexer `pilot.database.models.user_stories`/UserStories#","target":"scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#","attributes":{"type":"uses","at":[10,23,10,32]}},{"key":"geid_130_626","source":"scip-python python temp indexer `pilot.database.models.user_tasks`/UserTasks#","target":"scip-python python temp indexer `pilot.database.models.user_tasks`/UserTasks#Meta#","attributes":{"type":"defines","at":[12,4,13,33]}},{"key":"geid_130_627","source":"scip-python python temp indexer `pilot.database.models.user_tasks`/__init__:","target":"scip-python python temp indexer `pilot.database.models.user_tasks`/UserTasks#","attributes":{"type":"defines","at":[6,0,13,33]}},{"key":"geid_130_628","source":"scip-python python temp indexer `pilot.database.models.user_tasks`/__init__:","target":"scip-python python temp indexer `pilot.database.config`/__init__:","attributes":{"type":"uses","at":[0,5,0,20]}},{"key":"geid_130_629","source":"scip-python python temp indexer `pilot.database.models.user_tasks`/__init__:","target":"scip-python python temp indexer `pilot.database.config`/DATABASE_TYPE.","attributes":{"type":"uses","at":[0,28,0,41]}},{"key":"geid_130_630","source":"scip-python python temp indexer `pilot.database.models.user_tasks`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.progress_step`/__init__:","attributes":{"type":"uses","at":[1,5,1,45]}},{"key":"geid_130_631","source":"scip-python python temp indexer `pilot.database.models.user_tasks`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.progress_step`/ProgressStep#","attributes":{"type":"uses","at":[1,53,1,65]}},{"key":"geid_130_632","source":"scip-python python temp indexer `pilot.database.models.user_tasks`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/__init__:","attributes":{"type":"uses","at":[2,5,2,50]}},{"key":"geid_130_633","source":"scip-python python temp indexer `pilot.database.models.user_tasks`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#","attributes":{"type":"uses","at":[2,58,2,67]}},{"key":"geid_130_634","source":"scip-python python temp indexer `pilot.database.models.user_tasks`/__init__:","target":"scip-python python temp indexer `playhouse.postgres_ext`/__init__:","attributes":{"type":"uses","at":[3,5,3,27]}},{"key":"geid_130_635","source":"scip-python python temp indexer `pilot.database.models.user_tasks`/UserTasks#","target":"scip-python python temp indexer `pilot.database.models.components.progress_step`/ProgressStep#","attributes":{"type":"uses","at":[6,16,6,28]}},{"key":"geid_130_636","source":"scip-python python temp indexer `pilot.database.models.user_tasks`/UserTasks#","target":"scip-python python temp indexer `pilot.database.config`/DATABASE_TYPE.","attributes":{"type":"uses","at":[7,7,7,20]}},{"key":"geid_130_637","source":"scip-python python temp indexer `pilot.database.models.user_tasks`/UserTasks#","target":"scip-python python temp indexer `pilot.database.models.user_tasks`/UserTasks#user_tasks.","attributes":{"type":"uses","at":[10,8,10,18]}},{"key":"geid_130_638","source":"scip-python python temp indexer `pilot.database.models.user_tasks`/UserTasks#","target":"scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#","attributes":{"type":"uses","at":[10,21,10,30]}},{"key":"geid_130_639","source":"scip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#","target":"scip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#Meta#","attributes":{"type":"defines","at":[21,4,22,27]}},{"key":"geid_130_640","source":"scip-python python temp indexer `pilot.database.models.components.base_models`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#","attributes":{"type":"defines","at":[16,0,22,27]}},{"key":"geid_130_641","source":"scip-python python temp indexer `pilot.database.models.components.base_models`/__init__:","target":"scip-python python temp indexer peewee/__init__:","attributes":{"type":"uses","at":[0,5,0,11]}},{"key":"geid_130_642","source":"scip-python python temp indexer `pilot.database.models.components.base_models`/__init__:","target":"scip-python python python-stdlib 3.11 datetime/__init__:","attributes":{"type":"uses","at":[1,5,1,13]}},{"key":"geid_130_643","source":"scip-python python temp indexer `pilot.database.models.components.base_models`/__init__:","target":"scip-python python python-stdlib 3.11 datetime/datetime#","attributes":{"type":"uses","at":[1,21,1,29]}},{"key":"geid_130_644","source":"scip-python python temp indexer `pilot.database.models.components.base_models`/__init__:","target":"scip-python python python-stdlib 3.11 uuid/__init__:","attributes":{"type":"uses","at":[2,5,2,9]}},{"key":"geid_130_645","source":"scip-python python temp indexer `pilot.database.models.components.base_models`/__init__:","target":"scip-python python python-stdlib 3.11 uuid/uuid4().","attributes":{"type":"uses","at":[2,17,2,22]}},{"key":"geid_130_646","source":"scip-python python temp indexer `pilot.database.models.components.base_models`/__init__:","target":"scip-python python temp indexer `pilot.database.config`/__init__:","attributes":{"type":"uses","at":[4,5,4,20]}},{"key":"geid_130_647","source":"scip-python python temp indexer `pilot.database.models.components.base_models`/__init__:","target":"scip-python python temp indexer `pilot.database.config`/DATABASE_TYPE.","attributes":{"type":"uses","at":[4,28,4,41]}},{"key":"geid_130_648","source":"scip-python python temp indexer `pilot.database.models.components.base_models`/__init__:","target":"scip-python python temp indexer `pilot.database.connection.postgres`/__init__:","attributes":{"type":"uses","at":[5,5,5,33]}},{"key":"geid_130_649","source":"scip-python python temp indexer `pilot.database.models.components.base_models`/__init__:","target":"scip-python python temp indexer `pilot.database.connection.postgres`/get_postgres_database().","attributes":{"type":"uses","at":[5,41,5,62]}},{"key":"geid_130_650","source":"scip-python python temp indexer `pilot.database.models.components.base_models`/__init__:","target":"scip-python python temp indexer `pilot.database.connection.sqlite`/__init__:","attributes":{"type":"uses","at":[6,5,6,31]}},{"key":"geid_130_651","source":"scip-python python temp indexer `pilot.database.models.components.base_models`/__init__:","target":"scip-python python temp indexer `pilot.database.connection.sqlite`/get_sqlite_database().","attributes":{"type":"uses","at":[6,39,6,58]}},{"key":"geid_130_652","source":"scip-python python temp indexer `pilot.database.models.components.base_models`/__init__:","target":"scip-python python temp indexer `pilot.database.config`/DATABASE_TYPE.","attributes":{"type":"uses","at":[10,3,10,16]}},{"key":"geid_130_653","source":"scip-python python temp indexer `pilot.database.models.components.base_models`/__init__:","target":"scip-python python temp indexer `pilot.database.connection.postgres`/get_postgres_database().","attributes":{"type":"uses","at":[11,15,11,36]}},{"key":"geid_130_654","source":"scip-python python temp indexer `pilot.database.models.components.base_models`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.base_models`/database.","attributes":{"type":"uses","at":[13,4,13,12]}},{"key":"geid_130_655","source":"scip-python python temp indexer `pilot.database.models.components.base_models`/__init__:","target":"scip-python python temp indexer `pilot.database.connection.sqlite`/get_sqlite_database().","attributes":{"type":"uses","at":[13,15,13,34]}},{"key":"geid_130_656","source":"scip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#","target":"scip-python python python-stdlib 3.11 uuid/uuid4().","attributes":{"type":"uses","at":[17,45,17,50]}},{"key":"geid_130_657","source":"scip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#","target":"scip-python python python-stdlib 3.11 datetime/datetime#","attributes":{"type":"uses","at":[18,39,18,47]}},{"key":"geid_130_658","source":"scip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#","target":"scip-python python python-stdlib 3.11 datetime/datetime#now().","attributes":{"type":"uses","at":[18,48,18,51]}},{"key":"geid_130_659","source":"scip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#","target":"scip-python python python-stdlib 3.11 datetime/datetime#","attributes":{"type":"uses","at":[19,39,19,47]}},{"key":"geid_130_660","source":"scip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#","target":"scip-python python python-stdlib 3.11 datetime/datetime#now().","attributes":{"type":"uses","at":[19,48,19,51]}},{"key":"geid_130_661","source":"scip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#Meta#","target":"scip-python python temp indexer `pilot.database.models.components.base_models`/database.","attributes":{"type":"uses","at":[22,19,22,27]}},{"key":"geid_130_662","source":"scip-python python temp indexer `pilot.database.models.components.progress_step`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.progress_step`/ProgressStep#","attributes":{"type":"defines","at":[8,0,22,43]}},{"key":"geid_130_663","source":"scip-python python temp indexer `pilot.database.models.components.progress_step`/__init__:","target":"scip-python python temp indexer peewee/__init__:","attributes":{"type":"uses","at":[0,5,0,11]}},{"key":"geid_130_664","source":"scip-python python temp indexer `pilot.database.models.components.progress_step`/__init__:","target":"scip-python python temp indexer `pilot.database.config`/__init__:","attributes":{"type":"uses","at":[1,5,1,20]}},{"key":"geid_130_665","source":"scip-python python temp indexer `pilot.database.models.components.progress_step`/__init__:","target":"scip-python python temp indexer `pilot.database.config`/DATABASE_TYPE.","attributes":{"type":"uses","at":[1,28,1,41]}},{"key":"geid_130_666","source":"scip-python python temp indexer `pilot.database.models.components.progress_step`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.base_models`/__init__:","attributes":{"type":"uses","at":[2,5,2,43]}},{"key":"geid_130_667","source":"scip-python python temp indexer `pilot.database.models.components.progress_step`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#","attributes":{"type":"uses","at":[2,51,2,60]}},{"key":"geid_130_668","source":"scip-python python temp indexer `pilot.database.models.components.progress_step`/__init__:","target":"scip-python python temp indexer `pilot.database.models.app`/__init__:","attributes":{"type":"uses","at":[3,5,3,24]}},{"key":"geid_130_669","source":"scip-python python temp indexer `pilot.database.models.components.progress_step`/__init__:","target":"scip-python python temp indexer `pilot.database.models.app`/App#","attributes":{"type":"uses","at":[3,32,3,35]}},{"key":"geid_130_670","source":"scip-python python temp indexer `pilot.database.models.components.progress_step`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/__init__:","attributes":{"type":"uses","at":[4,5,4,50]}},{"key":"geid_130_671","source":"scip-python python temp indexer `pilot.database.models.components.progress_step`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#","attributes":{"type":"uses","at":[4,58,4,67]}},{"key":"geid_130_672","source":"scip-python python temp indexer `pilot.database.models.components.progress_step`/__init__:","target":"scip-python python temp indexer `playhouse.postgres_ext`/__init__:","attributes":{"type":"uses","at":[5,5,5,27]}},{"key":"geid_130_673","source":"scip-python python temp indexer `pilot.database.models.components.progress_step`/ProgressStep#","target":"scip-python python temp indexer `pilot.database.models.components.base_models`/BaseModel#","attributes":{"type":"uses","at":[8,19,8,28]}},{"key":"geid_130_674","source":"scip-python python temp indexer `pilot.database.models.components.progress_step`/ProgressStep#","target":"scip-python python temp indexer `pilot.database.models.app`/App#","attributes":{"type":"uses","at":[9,26,9,29]}},{"key":"geid_130_675","source":"scip-python python temp indexer `pilot.database.models.components.progress_step`/ProgressStep#","target":"scip-python python temp indexer `pilot.database.config`/DATABASE_TYPE.","attributes":{"type":"uses","at":[12,7,12,20]}},{"key":"geid_130_676","source":"scip-python python temp indexer `pilot.database.models.components.progress_step`/ProgressStep#","target":"scip-python python temp indexer `pilot.database.models.components.progress_step`/ProgressStep#app_data.","attributes":{"type":"uses","at":[17,8,17,16]}},{"key":"geid_130_677","source":"scip-python python temp indexer `pilot.database.models.components.progress_step`/ProgressStep#","target":"scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#","attributes":{"type":"uses","at":[17,19,17,28]}},{"key":"geid_130_678","source":"scip-python python temp indexer `pilot.database.models.components.progress_step`/ProgressStep#","target":"scip-python python temp indexer `pilot.database.models.components.progress_step`/ProgressStep#data.","attributes":{"type":"uses","at":[18,8,18,12]}},{"key":"geid_130_679","source":"scip-python python temp indexer `pilot.database.models.components.progress_step`/ProgressStep#","target":"scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#","attributes":{"type":"uses","at":[18,15,18,24]}},{"key":"geid_130_680","source":"scip-python python temp indexer `pilot.database.models.components.progress_step`/ProgressStep#","target":"scip-python python temp indexer `pilot.database.models.components.progress_step`/ProgressStep#messages.","attributes":{"type":"uses","at":[19,8,19,16]}},{"key":"geid_130_681","source":"scip-python python temp indexer `pilot.database.models.components.progress_step`/ProgressStep#","target":"scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#","attributes":{"type":"uses","at":[19,19,19,28]}},{"key":"geid_130_682","source":"scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#","target":"scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#db_value().","attributes":{"type":"defines","at":[10,4,13,20]}},{"key":"geid_130_683","source":"scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#","target":"scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#python_value().","attributes":{"type":"defines","at":[5,4,8,20]}},{"key":"geid_130_684","source":"scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#","attributes":{"type":"defines","at":[4,0,13,20]}},{"key":"geid_130_685","source":"scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/__init__:","target":"scip-python python python-stdlib 3.11 json/__init__:","attributes":{"type":"uses","at":[0,7,0,11]}},{"key":"geid_130_686","source":"scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/__init__:","target":"scip-python python temp indexer peewee/__init__:","attributes":{"type":"uses","at":[1,5,1,11]}},{"key":"geid_130_687","source":"scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#python_value().","target":"scip-python python python-stdlib 3.11 json/__init__:","attributes":{"type":"uses","at":[7,19,7,23]}},{"key":"geid_130_688","source":"scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#python_value().","target":"scip-python python python-stdlib 3.11 json/loads().","attributes":{"type":"uses","at":[7,24,7,29]}},{"key":"geid_130_689","source":"scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#db_value().","target":"scip-python python python-stdlib 3.11 json/__init__:","attributes":{"type":"uses","at":[12,19,12,23]}},{"key":"geid_130_690","source":"scip-python python temp indexer `pilot.database.models.components.sqlite_middlewares`/JSONField#db_value().","target":"scip-python python python-stdlib 3.11 json/dumps().","attributes":{"type":"uses","at":[12,24,12,29]}},{"key":"geid_130_691","source":"scip-python python temp indexer `pilot.helpers.agent`/Agent#","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#__init__().","attributes":{"type":"defines","at":[1,4,3,30]}},{"key":"geid_130_692","source":"scip-python python temp indexer `pilot.helpers.agent`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#","attributes":{"type":"defines","at":[0,0,3,30]}},{"key":"geid_130_693","source":"scip-python python temp indexer `pilot.helpers.agent`/Agent#","target":"scip-python python temp indexer `pilot.helpers.agent`/__init__:","attributes":{"type":"defines","at":[0,0,3,30]}},{"key":"geid_130_694","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#get_additional_info_from_user().","attributes":{"type":"defines","at":[278,4,301,27]}},{"key":"geid_130_695","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#construct_and_add_message_from_prompt().","attributes":{"type":"defines","at":[272,4,276,69]}},{"key":"geid_130_696","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#remove_last_x_messages().","attributes":{"type":"defines","at":[268,4,270,42]}},{"key":"geid_130_697","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#to_playground().","attributes":{"type":"defines","at":[261,4,266,96]}},{"key":"geid_130_698","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#to_context_prompt().","attributes":{"type":"defines","at":[249,4,259,10]}},{"key":"geid_130_699","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#log_message().","attributes":{"type":"defines","at":[233,4,247,48]}},{"key":"geid_130_700","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#convo_length().","attributes":{"type":"defines","at":[230,4,231,77]}},{"key":"geid_130_701","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#replace_file_content().","attributes":{"type":"defines","at":[214,4,228,30]}},{"key":"geid_130_702","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#escape_specials().","attributes":{"type":"defines","at":[193,4,212,16]}},{"key":"geid_130_703","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#replace_files().","attributes":{"type":"defines","at":[186,4,191,129]}},{"key":"geid_130_704","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#load_branch().","attributes":{"type":"defines","at":[180,4,184,32]}},{"key":"geid_130_705","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#save_branch().","attributes":{"type":"defines","at":[174,4,178,26]}},{"key":"geid_130_706","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#continuous_conversation().","attributes":{"type":"defines","at":[141,4,172,32]}},{"key":"geid_130_707","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#format_message_content().","attributes":{"type":"defines","at":[115,4,138,39]}},{"key":"geid_130_708","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","attributes":{"type":"defines","at":[39,4,113,23]}},{"key":"geid_130_709","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#__init__().","attributes":{"type":"defines","at":[25,4,37,44]}},{"key":"geid_130_710","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","attributes":{"type":"defines","at":[17,0,301,27]}},{"key":"geid_130_711","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/__init__:","target":"scip-python python python-stdlib 3.11 json/__init__:","attributes":{"type":"uses","at":[0,7,0,11]}},{"key":"geid_130_712","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/__init__:","target":"scip-python python python-stdlib 3.11 re/__init__:","attributes":{"type":"uses","at":[1,7,1,9]}},{"key":"geid_130_713","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/__init__:","target":"scip-python python python-stdlib 3.11 subprocess/__init__:","attributes":{"type":"uses","at":[2,7,2,17]}},{"key":"geid_130_714","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/__init__:","target":"scip-python python python-stdlib 3.11 uuid/__init__:","attributes":{"type":"uses","at":[3,7,3,11]}},{"key":"geid_130_715","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/__init__:","attributes":{"type":"uses","at":[4,5,4,16]}},{"key":"geid_130_716","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/color_yellow.","attributes":{"type":"uses","at":[4,24,4,36]}},{"key":"geid_130_717","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/color_yellow_bold.","attributes":{"type":"uses","at":[4,38,4,55]}},{"key":"geid_130_718","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/__init__:","attributes":{"type":"uses","at":[6,5,6,22]}},{"key":"geid_130_719","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/get_saved_development_step().","attributes":{"type":"uses","at":[6,30,6,56]}},{"key":"geid_130_720","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/save_development_step().","attributes":{"type":"uses","at":[6,58,6,79]}},{"key":"geid_130_721","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/delete_all_subsequent_steps().","attributes":{"type":"uses","at":[6,81,6,108]}},{"key":"geid_130_722","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/__init__:","target":"scip-python python temp indexer `pilot.helpers.exceptions.tokenlimiterror`/__init__:","attributes":{"type":"uses","at":[7,5,7,39]}},{"key":"geid_130_723","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/__init__:","target":"scip-python python temp indexer `pilot.helpers.exceptions.tokenlimiterror`/TokenLimitError#","attributes":{"type":"uses","at":[7,47,7,62]}},{"key":"geid_130_724","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/__init__:","target":"scip-python python temp indexer `pilot.utils.function_calling`/__init__:","attributes":{"type":"uses","at":[8,5,8,27]}},{"key":"geid_130_725","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/__init__:","target":"scip-python python temp indexer `pilot.utils.function_calling`/parse_agent_response().","attributes":{"type":"uses","at":[8,35,8,55]}},{"key":"geid_130_726","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/__init__:","target":"scip-python python temp indexer `pilot.utils.function_calling`/FunctionCallSet#","attributes":{"type":"uses","at":[8,57,8,72]}},{"key":"geid_130_727","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/__init__:","target":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","attributes":{"type":"uses","at":[9,5,9,25]}},{"key":"geid_130_728","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/__init__:","target":"scip-python python temp indexer `pilot.utils.llm_connection`/create_gpt_chat_completion().","attributes":{"type":"uses","at":[9,33,9,59]}},{"key":"geid_130_729","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/__init__:","attributes":{"type":"uses","at":[10,5,10,16]}},{"key":"geid_130_730","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/get_prompt().","attributes":{"type":"uses","at":[10,24,10,34]}},{"key":"geid_130_731","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/get_sys_message().","attributes":{"type":"uses","at":[10,36,10,51]}},{"key":"geid_130_732","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/capitalize_first_word_with_underscores().","attributes":{"type":"uses","at":[10,53,10,91]}},{"key":"geid_130_733","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/__init__:","target":"scip-python python temp indexer `pilot.logger.logger`/__init__:","attributes":{"type":"uses","at":[11,5,11,18]}},{"key":"geid_130_734","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/__init__:","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[11,26,11,32]}},{"key":"geid_130_735","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/__init__:","target":"scip-python python temp indexer `pilot.prompts.prompts`/__init__:","attributes":{"type":"uses","at":[12,5,12,20]}},{"key":"geid_130_736","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/__init__:","target":"scip-python python temp indexer `pilot.prompts.prompts`/ask_user().","attributes":{"type":"uses","at":[12,28,12,36]}},{"key":"geid_130_737","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/__init__:","target":"scip-python python temp indexer `pilot.const.llm`/__init__:","attributes":{"type":"uses","at":[13,5,13,14]}},{"key":"geid_130_738","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/__init__:","target":"scip-python python temp indexer `pilot.const.llm`/END_RESPONSE.","attributes":{"type":"uses","at":[13,22,13,34]}},{"key":"geid_130_739","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/__init__:","target":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","attributes":{"type":"uses","at":[14,5,14,16]}},{"key":"geid_130_740","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/__init__:","target":"scip-python python temp indexer `pilot.helpers.cli`/running_processes.running_processes.","attributes":{"type":"uses","at":[14,24,14,41]}},{"key":"geid_130_741","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#__init__().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#agent.","attributes":{"type":"uses","at":[31,36,31,41]}},{"key":"geid_130_742","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#__init__().","target":"scip-python python temp indexer `pilot.utils.utils`/get_sys_message().","attributes":{"type":"uses","at":[34,25,34,40]}},{"key":"geid_130_743","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#__init__().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#agent.","attributes":{"type":"uses","at":[34,46,34,51]}},{"key":"geid_130_744","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#__init__().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#agent.","attributes":{"type":"uses","at":[34,63,34,68]}},{"key":"geid_130_745","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#__init__().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[35,8,35,14]}},{"key":"geid_130_746","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#__init__().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[35,15,35,19]}},{"key":"geid_130_747","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#__init__().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#messages.","attributes":{"type":"uses","at":[37,13,37,21]}},{"key":"geid_130_748","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","target":"scip-python python temp indexer `pilot.utils.function_calling`/FunctionCallSet#","attributes":{"type":"uses","at":[39,79,39,94]}},{"key":"geid_130_749","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#construct_and_add_message_from_prompt().","attributes":{"type":"uses","at":[52,13,52,50]}},{"key":"geid_130_750","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#agent.","attributes":{"type":"uses","at":[56,16,56,21]}},{"key":"geid_130_751","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#agent.","attributes":{"type":"uses","at":[57,17,57,22]}},{"key":"geid_130_752","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","target":"scip-python python temp indexer `pilot.database.database`/get_saved_development_step().","attributes":{"type":"uses","at":[58,27,58,53]}},{"key":"geid_130_753","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#agent.","attributes":{"type":"uses","at":[58,59,58,64]}},{"key":"geid_130_754","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#agent.","attributes":{"type":"uses","at":[59,49,59,54]}},{"key":"geid_130_755","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","target":"scip-python python temp indexer `pilot.utils.style`/color_yellow.","attributes":{"type":"uses","at":[61,18,61,30]}},{"key":"geid_130_756","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#agent.","attributes":{"type":"uses","at":[62,17,62,22]}},{"key":"geid_130_757","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#agent.","attributes":{"type":"uses","at":[63,17,63,22]}},{"key":"geid_130_758","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#messages.","attributes":{"type":"uses","at":[65,17,65,25]}},{"key":"geid_130_759","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#agent.","attributes":{"type":"uses","at":[67,20,67,25]}},{"key":"geid_130_760","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#agent.","attributes":{"type":"uses","at":[68,49,68,54]}},{"key":"geid_130_761","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#agent.","attributes":{"type":"uses","at":[69,21,69,26]}},{"key":"geid_130_762","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","target":"scip-python python temp indexer `pilot.database.database`/delete_all_subsequent_steps().","attributes":{"type":"uses","at":[70,16,70,43]}},{"key":"geid_130_763","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#agent.","attributes":{"type":"uses","at":[70,49,70,54]}},{"key":"geid_130_764","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#agent.","attributes":{"type":"uses","at":[72,52,72,57]}},{"key":"geid_130_765","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#agent.","attributes":{"type":"uses","at":[72,80,72,85]}},{"key":"geid_130_766","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#agent.","attributes":{"type":"uses","at":[74,25,74,30]}},{"key":"geid_130_767","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","target":"scip-python python temp indexer `pilot.helpers.exceptions.tokenlimiterror`/TokenLimitError#","attributes":{"type":"uses","at":[79,22,79,37]}},{"key":"geid_130_768","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#agent.","attributes":{"type":"uses","at":[83,21,83,26]}},{"key":"geid_130_769","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#replace_files().","attributes":{"type":"uses","at":[84,21,84,34]}},{"key":"geid_130_770","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","target":"scip-python python temp indexer `pilot.utils.llm_connection`/create_gpt_chat_completion().","attributes":{"type":"uses","at":[85,27,85,53]}},{"key":"geid_130_771","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#messages.","attributes":{"type":"uses","at":[85,59,85,67]}},{"key":"geid_130_772","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#high_level_step.","attributes":{"type":"uses","at":[85,74,85,89]}},{"key":"geid_130_773","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#agent.","attributes":{"type":"uses","at":[85,96,85,101]}},{"key":"geid_130_774","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","target":"scip-python python temp indexer `pilot.helpers.exceptions.tokenlimiterror`/TokenLimitError#","attributes":{"type":"uses","at":[87,19,87,34]}},{"key":"geid_130_775","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","target":"scip-python python temp indexer `pilot.database.database`/save_development_step().","attributes":{"type":"uses","at":[88,16,88,37]}},{"key":"geid_130_776","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#agent.","attributes":{"type":"uses","at":[88,43,88,48]}},{"key":"geid_130_777","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#messages.","attributes":{"type":"uses","at":[88,89,88,97]}},{"key":"geid_130_778","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#agent.","attributes":{"type":"uses","at":[92,28,92,33]}},{"key":"geid_130_779","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#agent.","attributes":{"type":"uses","at":[92,62,92,67]}},{"key":"geid_130_780","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","target":"scip-python python temp indexer `pilot.database.database`/save_development_step().","attributes":{"type":"uses","at":[93,16,93,37]}},{"key":"geid_130_781","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#agent.","attributes":{"type":"uses","at":[93,43,93,48]}},{"key":"geid_130_782","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#messages.","attributes":{"type":"uses","at":[93,89,93,97]}},{"key":"geid_130_783","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[99,12,99,18]}},{"key":"geid_130_784","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","target":"scip-python python python-stdlib 3.11 logging/Logger#error().","attributes":{"type":"uses","at":[99,19,99,24]}},{"key":"geid_130_785","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","target":"scip-python python temp indexer `pilot.utils.function_calling`/parse_agent_response().","attributes":{"type":"uses","at":[102,19,102,39]}},{"key":"geid_130_786","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#format_message_content().","attributes":{"type":"uses","at":[103,31,103,53]}},{"key":"geid_130_787","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[107,8,107,14]}},{"key":"geid_130_788","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[107,15,107,19]}},{"key":"geid_130_789","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#messages.","attributes":{"type":"uses","at":[109,13,109,21]}},{"key":"geid_130_790","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#log_message().","attributes":{"type":"uses","at":[111,17,111,28]}},{"key":"geid_130_791","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#format_message_content().","target":"scip-python python python-stdlib 3.11 json/__init__:","attributes":{"type":"uses","at":[138,19,138,23]}},{"key":"geid_130_792","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#format_message_content().","target":"scip-python python python-stdlib 3.11 json/dumps().","attributes":{"type":"uses","at":[138,24,138,29]}},{"key":"geid_130_793","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#continuous_conversation().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#log_to_user.","attributes":{"type":"uses","at":[153,13,153,24]}},{"key":"geid_130_794","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#continuous_conversation().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","attributes":{"type":"uses","at":[155,24,155,36]}},{"key":"geid_130_795","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#continuous_conversation().","target":"scip-python python temp indexer `pilot.const.llm`/END_RESPONSE.","attributes":{"type":"uses","at":[158,26,158,38]}},{"key":"geid_130_796","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#continuous_conversation().","target":"scip-python python temp indexer `pilot.prompts.prompts`/ask_user().","attributes":{"type":"uses","at":[159,27,159,35]}},{"key":"geid_130_797","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#continuous_conversation().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#agent.","attributes":{"type":"uses","at":[159,41,159,46]}},{"key":"geid_130_798","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#continuous_conversation().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[167,12,167,18]}},{"key":"geid_130_799","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#continuous_conversation().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[167,19,167,23]}},{"key":"geid_130_800","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#continuous_conversation().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#messages.","attributes":{"type":"uses","at":[168,17,168,25]}},{"key":"geid_130_801","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#continuous_conversation().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","attributes":{"type":"uses","at":[169,28,169,40]}},{"key":"geid_130_802","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#continuous_conversation().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#log_to_user.","attributes":{"type":"uses","at":[171,13,171,24]}},{"key":"geid_130_803","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#save_branch().","target":"scip-python python python-stdlib 3.11 uuid/__init__:","attributes":{"type":"uses","at":[176,30,176,34]}},{"key":"geid_130_804","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#save_branch().","target":"scip-python python python-stdlib 3.11 uuid/uuid4().","attributes":{"type":"uses","at":[176,35,176,40]}},{"key":"geid_130_805","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#save_branch().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#branches.","attributes":{"type":"uses","at":[177,13,177,21]}},{"key":"geid_130_806","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#save_branch().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#messages.","attributes":{"type":"uses","at":[177,42,177,50]}},{"key":"geid_130_807","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#load_branch().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#messages.","attributes":{"type":"uses","at":[181,13,181,21]}},{"key":"geid_130_808","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#load_branch().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#branches.","attributes":{"type":"uses","at":[181,29,181,37]}},{"key":"geid_130_809","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#load_branch().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#replace_files().","attributes":{"type":"uses","at":[184,17,184,30]}},{"key":"geid_130_810","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#replace_files().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#agent.","attributes":{"type":"uses","at":[187,21,187,26]}},{"key":"geid_130_811","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#replace_files().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#messages.","attributes":{"type":"uses","at":[188,24,188,32]}},{"key":"geid_130_812","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#replace_files().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#replace_file_content().","attributes":{"type":"uses","at":[191,42,191,62]}},{"key":"geid_130_813","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#replace_file_content().","target":"scip-python python python-stdlib 3.11 re/__init__:","attributes":{"type":"uses","at":[215,26,215,28]}},{"key":"geid_130_814","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#replace_file_content().","target":"scip-python python python-stdlib 3.11 re/escape().","attributes":{"type":"uses","at":[215,29,215,35]}},{"key":"geid_130_815","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#replace_file_content().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#escape_specials().","attributes":{"type":"uses","at":[218,35,218,50]}},{"key":"geid_130_816","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#replace_file_content().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#escape_specials().","attributes":{"type":"uses","at":[219,33,219,48]}},{"key":"geid_130_817","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#replace_file_content().","target":"scip-python python python-stdlib 3.11 re/__init__:","attributes":{"type":"uses","at":[223,44,223,46]}},{"key":"geid_130_818","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#replace_file_content().","target":"scip-python python python-stdlib 3.11 re/subn().","attributes":{"type":"uses","at":[223,47,223,51]}},{"key":"geid_130_819","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#replace_file_content().","target":"scip-python python python-stdlib 3.11 re/__init__:","attributes":{"type":"uses","at":[223,97,223,99]}},{"key":"geid_130_820","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#replace_file_content().","target":"scip-python python python-stdlib 3.11 re/DOTALL.","attributes":{"type":"uses","at":[223,100,223,106]}},{"key":"geid_130_821","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#convo_length().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#messages.","attributes":{"type":"uses","at":[231,40,231,48]}},{"key":"geid_130_822","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#log_message().","target":"scip-python python temp indexer `pilot.utils.utils`/capitalize_first_word_with_underscores().","attributes":{"type":"uses","at":[240,20,240,58]}},{"key":"geid_130_823","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#log_message().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#high_level_step.","attributes":{"type":"uses","at":[240,64,240,79]}},{"key":"geid_130_824","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#log_message().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#log_to_user.","attributes":{"type":"uses","at":[241,16,241,27]}},{"key":"geid_130_825","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#log_message().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#agent.","attributes":{"type":"uses","at":[242,20,242,25]}},{"key":"geid_130_826","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#log_message().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#agent.","attributes":{"type":"uses","at":[243,54,243,59]}},{"key":"geid_130_827","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#log_message().","target":"scip-python python temp indexer `pilot.utils.style`/color_yellow_bold.","attributes":{"type":"uses","at":[244,22,244,39]}},{"key":"geid_130_828","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#log_message().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[245,16,245,22]}},{"key":"geid_130_829","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#log_message().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[245,23,245,27]}},{"key":"geid_130_830","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#log_message().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[247,8,247,14]}},{"key":"geid_130_831","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#log_message().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[247,15,247,19]}},{"key":"geid_130_832","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#to_context_prompt().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[250,8,250,14]}},{"key":"geid_130_833","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#to_context_prompt().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[250,15,250,19]}},{"key":"geid_130_834","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#to_context_prompt().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#agent.","attributes":{"type":"uses","at":[250,46,250,51]}},{"key":"geid_130_835","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#to_context_prompt().","target":"scip-python python temp indexer `pilot.utils.utils`/get_prompt().","attributes":{"type":"uses","at":[256,15,256,25]}},{"key":"geid_130_836","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#to_context_prompt().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#agent.","attributes":{"type":"uses","at":[257,35,257,40]}},{"key":"geid_130_837","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#to_context_prompt().","target":"scip-python python temp indexer `pilot.helpers.cli`/running_processes.running_processes.","attributes":{"type":"uses","at":[258,33,258,50]}},{"key":"geid_130_838","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#to_playground().","target":"scip-python python python-stdlib 3.11 io/TextIOBase#read().","attributes":{"type":"uses","at":[264,27,264,31]}},{"key":"geid_130_839","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#to_playground().","target":"scip-python python python-stdlib 3.11 subprocess/__init__:","attributes":{"type":"uses","at":[265,18,265,28]}},{"key":"geid_130_840","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#to_playground().","target":"scip-python python python-stdlib 3.11 subprocess/Popen#","attributes":{"type":"uses","at":[265,29,265,34]}},{"key":"geid_130_841","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#to_playground().","target":"scip-python python python-stdlib 3.11 subprocess/__init__:","attributes":{"type":"uses","at":[265,51,265,61]}},{"key":"geid_130_842","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#to_playground().","target":"scip-python python python-stdlib 3.11 subprocess/PIPE.PIPE.","attributes":{"type":"uses","at":[265,62,265,66]}},{"key":"geid_130_843","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#to_playground().","target":"scip-python python python-stdlib 3.11 subprocess/Popen#communicate().","attributes":{"type":"uses","at":[266,16,266,27]}},{"key":"geid_130_844","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#to_playground().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#messages.","attributes":{"type":"uses","at":[266,69,266,77]}},{"key":"geid_130_845","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#remove_last_x_messages().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[269,8,269,14]}},{"key":"geid_130_846","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#remove_last_x_messages().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[269,15,269,19]}},{"key":"geid_130_847","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#remove_last_x_messages().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#messages.","attributes":{"type":"uses","at":[269,61,269,69]}},{"key":"geid_130_848","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#remove_last_x_messages().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#messages.","attributes":{"type":"uses","at":[270,13,270,21]}},{"key":"geid_130_849","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#remove_last_x_messages().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#messages.","attributes":{"type":"uses","at":[270,29,270,37]}},{"key":"geid_130_850","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#construct_and_add_message_from_prompt().","target":"scip-python python temp indexer `pilot.utils.utils`/get_prompt().","attributes":{"type":"uses","at":[274,21,274,31]}},{"key":"geid_130_851","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#construct_and_add_message_from_prompt().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[275,12,275,18]}},{"key":"geid_130_852","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#construct_and_add_message_from_prompt().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[275,19,275,23]}},{"key":"geid_130_853","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#construct_and_add_message_from_prompt().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#messages.","attributes":{"type":"uses","at":[276,17,276,25]}},{"key":"geid_130_854","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#get_additional_info_from_user().","target":"scip-python python temp indexer `pilot.utils.function_calling`/FunctionCallSet#","attributes":{"type":"uses","at":[278,60,278,75]}},{"key":"geid_130_855","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#get_additional_info_from_user().","target":"scip-python python temp indexer `pilot.utils.style`/color_yellow.","attributes":{"type":"uses","at":[290,18,290,30]}},{"key":"geid_130_856","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#get_additional_info_from_user().","target":"scip-python python temp indexer `pilot.prompts.prompts`/ask_user().","attributes":{"type":"uses","at":[292,22,292,30]}},{"key":"geid_130_857","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#get_additional_info_from_user().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#agent.","attributes":{"type":"uses","at":[292,36,292,41]}},{"key":"geid_130_858","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#get_additional_info_from_user().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#messages.","attributes":{"type":"uses","at":[292,56,292,64]}},{"key":"geid_130_859","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#get_additional_info_from_user().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","attributes":{"type":"uses","at":[296,32,296,44]}},{"key":"geid_130_860","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#get_additional_info_from_user().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[300,8,300,14]}},{"key":"geid_130_861","source":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#get_additional_info_from_user().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[300,15,300,19]}},{"key":"geid_130_862","source":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#","target":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#debug().","attributes":{"type":"defines","at":[18,4,135,22]}},{"key":"geid_130_863","source":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#","target":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#__init__().","attributes":{"type":"defines","at":[14,4,16,32]}},{"key":"geid_130_864","source":"scip-python python temp indexer `pilot.helpers.debugger`/__init__:","target":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#","attributes":{"type":"defines","at":[13,0,135,22]}},{"key":"geid_130_865","source":"scip-python python temp indexer `pilot.helpers.debugger`/__init__:","target":"scip-python python python-stdlib 3.11 platform/__init__:","attributes":{"type":"uses","at":[0,7,0,15]}},{"key":"geid_130_866","source":"scip-python python temp indexer `pilot.helpers.debugger`/__init__:","target":"scip-python python python-stdlib 3.11 uuid/__init__:","attributes":{"type":"uses","at":[1,7,1,11]}},{"key":"geid_130_867","source":"scip-python python temp indexer `pilot.helpers.debugger`/__init__:","target":"scip-python python python-stdlib 3.11 re/__init__:","attributes":{"type":"uses","at":[2,7,2,9]}},{"key":"geid_130_868","source":"scip-python python temp indexer `pilot.helpers.debugger`/__init__:","target":"scip-python python temp indexer `pilot.const.code_execution`/__init__:","attributes":{"type":"uses","at":[4,5,4,25]}},{"key":"geid_130_869","source":"scip-python python temp indexer `pilot.helpers.debugger`/__init__:","target":"scip-python python temp indexer `pilot.const.code_execution`/MAX_COMMAND_DEBUG_TRIES.","attributes":{"type":"uses","at":[4,33,4,56]}},{"key":"geid_130_870","source":"scip-python python temp indexer `pilot.helpers.debugger`/__init__:","target":"scip-python python temp indexer `pilot.const.code_execution`/MAX_RECUSION_LAYER.","attributes":{"type":"uses","at":[4,58,4,76]}},{"key":"geid_130_871","source":"scip-python python temp indexer `pilot.helpers.debugger`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/__init__:","attributes":{"type":"uses","at":[5,5,5,25]}},{"key":"geid_130_872","source":"scip-python python temp indexer `pilot.helpers.debugger`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/DEBUG_STEPS_BREAKDOWN.","attributes":{"type":"uses","at":[5,33,5,54]}},{"key":"geid_130_873","source":"scip-python python temp indexer `pilot.helpers.debugger`/__init__:","target":"scip-python python temp indexer `pilot.const.messages`/__init__:","attributes":{"type":"uses","at":[6,5,6,19]}},{"key":"geid_130_874","source":"scip-python python temp indexer `pilot.helpers.debugger`/__init__:","target":"scip-python python temp indexer `pilot.const.messages`/AFFIRMATIVE_ANSWERS.","attributes":{"type":"uses","at":[6,27,6,46]}},{"key":"geid_130_875","source":"scip-python python temp indexer `pilot.helpers.debugger`/__init__:","target":"scip-python python temp indexer `pilot.const.messages`/NEGATIVE_ANSWERS.","attributes":{"type":"uses","at":[6,48,6,64]}},{"key":"geid_130_876","source":"scip-python python temp indexer `pilot.helpers.debugger`/__init__:","target":"scip-python python temp indexer `pilot.helpers.exceptions.tokenlimiterror`/__init__:","attributes":{"type":"uses","at":[7,5,7,39]}},{"key":"geid_130_877","source":"scip-python python temp indexer `pilot.helpers.debugger`/__init__:","target":"scip-python python temp indexer `pilot.helpers.exceptions.tokenlimiterror`/TokenLimitError#","attributes":{"type":"uses","at":[7,47,7,62]}},{"key":"geid_130_878","source":"scip-python python temp indexer `pilot.helpers.debugger`/__init__:","target":"scip-python python temp indexer `pilot.helpers.exceptions.toodeeprecursionerror`/__init__:","attributes":{"type":"uses","at":[8,5,8,45]}},{"key":"geid_130_879","source":"scip-python python temp indexer `pilot.helpers.debugger`/__init__:","target":"scip-python python temp indexer `pilot.helpers.exceptions.toodeeprecursionerror`/TooDeepRecursionError#","attributes":{"type":"uses","at":[8,53,8,74]}},{"key":"geid_130_880","source":"scip-python python temp indexer `pilot.helpers.debugger`/__init__:","target":"scip-python python temp indexer `pilot.logger.logger`/__init__:","attributes":{"type":"uses","at":[9,5,9,18]}},{"key":"geid_130_881","source":"scip-python python temp indexer `pilot.helpers.debugger`/__init__:","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[9,26,9,32]}},{"key":"geid_130_882","source":"scip-python python temp indexer `pilot.helpers.debugger`/__init__:","target":"scip-python python temp indexer `pilot.prompts.prompts`/__init__:","attributes":{"type":"uses","at":[10,5,10,20]}},{"key":"geid_130_883","source":"scip-python python temp indexer `pilot.helpers.debugger`/__init__:","target":"scip-python python temp indexer `pilot.prompts.prompts`/ask_user().","attributes":{"type":"uses","at":[10,28,10,36]}},{"key":"geid_130_884","source":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#debug().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[33,8,33,14]}},{"key":"geid_130_885","source":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#debug().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[33,15,33,19]}},{"key":"geid_130_886","source":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#debug().","target":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#recursion_layer.","attributes":{"type":"uses","at":[34,13,34,28]}},{"key":"geid_130_887","source":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#debug().","target":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#recursion_layer.","attributes":{"type":"uses","at":[35,16,35,31]}},{"key":"geid_130_888","source":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#debug().","target":"scip-python python temp indexer `pilot.const.code_execution`/MAX_RECUSION_LAYER.","attributes":{"type":"uses","at":[35,34,35,52]}},{"key":"geid_130_889","source":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#debug().","target":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#recursion_layer.","attributes":{"type":"uses","at":[36,17,36,32]}},{"key":"geid_130_890","source":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#debug().","target":"scip-python python temp indexer `pilot.helpers.exceptions.toodeeprecursionerror`/TooDeepRecursionError#","attributes":{"type":"uses","at":[37,18,37,39]}},{"key":"geid_130_891","source":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#debug().","target":"scip-python python python-stdlib 3.11 uuid/__init__:","attributes":{"type":"uses","at":[39,28,39,32]}},{"key":"geid_130_892","source":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#debug().","target":"scip-python python python-stdlib 3.11 uuid/uuid4().","attributes":{"type":"uses","at":[39,33,39,38]}},{"key":"geid_130_893","source":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#debug().","target":"scip-python python temp indexer `pilot.const.code_execution`/MAX_COMMAND_DEBUG_TRIES.","attributes":{"type":"uses","at":[43,23,43,46]}},{"key":"geid_130_894","source":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#debug().","target":"scip-python python temp indexer `pilot.prompts.prompts`/ask_user().","attributes":{"type":"uses","at":[49,25,49,33]}},{"key":"geid_130_895","source":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#debug().","target":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#agent.","attributes":{"type":"uses","at":[49,39,49,44]}},{"key":"geid_130_896","source":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#debug().","target":"scip-python python temp indexer `pilot.const.messages`/NEGATIVE_ANSWERS.","attributes":{"type":"uses","at":[50,37,50,53]}},{"key":"geid_130_897","source":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#debug().","target":"scip-python python temp indexer `pilot.const.messages`/AFFIRMATIVE_ANSWERS.","attributes":{"type":"uses","at":[52,52,52,71]}},{"key":"geid_130_898","source":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#debug().","target":"scip-python python python-stdlib 3.11 platform/__init__:","attributes":{"type":"uses","at":[60,26,60,34]}},{"key":"geid_130_899","source":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#debug().","target":"scip-python python python-stdlib 3.11 platform/system().","attributes":{"type":"uses","at":[60,35,60,41]}},{"key":"geid_130_900","source":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#debug().","target":"scip-python python temp indexer `pilot.const.function_calls`/DEBUG_STEPS_BREAKDOWN.","attributes":{"type":"uses","at":[63,16,63,37]}},{"key":"geid_130_901","source":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#debug().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[69,20,69,26]}},{"key":"geid_130_902","source":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#debug().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[69,27,69,31]}},{"key":"geid_130_903","source":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#debug().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[70,20,70,26]}},{"key":"geid_130_904","source":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#debug().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[70,27,70,31]}},{"key":"geid_130_905","source":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#debug().","target":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#agent.","attributes":{"type":"uses","at":[74,34,74,39]}},{"key":"geid_130_906","source":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#debug().","target":"scip-python python python-stdlib 3.11 platform/__init__:","attributes":{"type":"uses","at":[87,39,87,47]}},{"key":"geid_130_907","source":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#debug().","target":"scip-python python python-stdlib 3.11 platform/system().","attributes":{"type":"uses","at":[87,48,87,54]}},{"key":"geid_130_908","source":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#debug().","target":"scip-python python temp indexer `pilot.const.function_calls`/DEBUG_STEPS_BREAKDOWN.","attributes":{"type":"uses","at":[99,28,99,49]}},{"key":"geid_130_909","source":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#debug().","target":"scip-python python python-stdlib 3.11 re/__init__:","attributes":{"type":"uses","at":[106,64,106,66]}},{"key":"geid_130_910","source":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#debug().","target":"scip-python python python-stdlib 3.11 re/sub().","attributes":{"type":"uses","at":[106,67,106,70]}},{"key":"geid_130_911","source":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#debug().","target":"scip-python python python-stdlib 3.11 re/__init__:","attributes":{"type":"uses","at":[110,42,110,44]}},{"key":"geid_130_912","source":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#debug().","target":"scip-python python python-stdlib 3.11 re/DOTALL.","attributes":{"type":"uses","at":[110,45,110,51]}},{"key":"geid_130_913","source":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#debug().","target":"scip-python python temp indexer `pilot.helpers.exceptions.tokenlimiterror`/TokenLimitError#","attributes":{"type":"uses","at":[114,19,114,34]}},{"key":"geid_130_914","source":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#debug().","target":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#recursion_layer.","attributes":{"type":"uses","at":[115,24,115,39]}},{"key":"geid_130_915","source":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#debug().","target":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#recursion_layer.","attributes":{"type":"uses","at":[116,25,116,40]}},{"key":"geid_130_916","source":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#debug().","target":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#recursion_layer.","attributes":{"type":"uses","at":[134,13,134,28]}},{"key":"geid_130_917","source":"scip-python python temp indexer `pilot.helpers.project`/Project#","target":"scip-python python temp indexer `pilot.helpers.project`/Project#log().","attributes":{"type":"defines","at":[448,4,457,56]}},{"key":"geid_130_918","source":"scip-python python temp indexer `pilot.helpers.project`/Project#","target":"scip-python python temp indexer `pilot.helpers.project`/Project#ask_for_human_intervention().","attributes":{"type":"defines","at":[421,4,446,27]}},{"key":"geid_130_919","source":"scip-python python temp indexer `pilot.helpers.project`/Project#","target":"scip-python python temp indexer `pilot.helpers.project`/Project#delete_all_steps_except_current_branch().","attributes":{"type":"defines","at":[416,4,419,91]}},{"key":"geid_130_920","source":"scip-python python temp indexer `pilot.helpers.project`/Project#","target":"scip-python python temp indexer `pilot.helpers.project`/Project#restore_files().","attributes":{"type":"defines","at":[406,4,414,63]}},{"key":"geid_130_921","source":"scip-python python temp indexer `pilot.helpers.project`/Project#","target":"scip-python python temp indexer `pilot.helpers.project`/Project#save_files_snapshot().","attributes":{"type":"defines","at":[383,4,404,32]}},{"key":"geid_130_922","source":"scip-python python temp indexer `pilot.helpers.project`/Project#get_full_file_path().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#normalize_path().","attributes":{"type":"defines","at":[298,8,353,38]}},{"key":"geid_130_923","source":"scip-python python temp indexer `pilot.helpers.project`/Project#","target":"scip-python python temp indexer `pilot.helpers.project`/Project#get_full_file_path().","attributes":{"type":"defines","at":[287,4,380,51]}},{"key":"geid_130_924","source":"scip-python python temp indexer `pilot.helpers.project`/Project#","target":"scip-python python temp indexer `pilot.helpers.project`/Project#save_file().","attributes":{"type":"defines","at":[250,4,285,21]}},{"key":"geid_130_925","source":"scip-python python temp indexer `pilot.helpers.project`/Project#","target":"scip-python python temp indexer `pilot.helpers.project`/Project#find_input_required_lines().","attributes":{"type":"defines","at":[233,4,248,40]}},{"key":"geid_130_926","source":"scip-python python temp indexer `pilot.helpers.project`/Project#","target":"scip-python python temp indexer `pilot.helpers.project`/Project#get_files().","attributes":{"type":"defines","at":[211,4,231,33]}},{"key":"geid_130_927","source":"scip-python python temp indexer `pilot.helpers.project`/Project#","target":"scip-python python temp indexer `pilot.helpers.project`/Project#get_all_coded_files().","attributes":{"type":"defines","at":[185,4,209,20]}},{"key":"geid_130_928","source":"scip-python python temp indexer `pilot.helpers.project`/Project#","target":"scip-python python temp indexer `pilot.helpers.project`/Project#get_test_directory_tree().","attributes":{"type":"defines","at":[175,4,183,85]}},{"key":"geid_130_929","source":"scip-python python temp indexer `pilot.helpers.project`/Project#","target":"scip-python python temp indexer `pilot.helpers.project`/Project#get_directory_tree().","attributes":{"type":"defines","at":[158,4,173,74]}},{"key":"geid_130_930","source":"scip-python python temp indexer `pilot.helpers.project`/Project#","target":"scip-python python temp indexer `pilot.helpers.project`/Project#finish().","attributes":{"type":"defines","at":[142,4,156,70]}},{"key":"geid_130_931","source":"scip-python python temp indexer `pilot.helpers.project`/Project#","target":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","attributes":{"type":"defines","at":[83,4,140,37]}},{"key":"geid_130_932","source":"scip-python python temp indexer `pilot.helpers.project`/Project#","target":"scip-python python temp indexer `pilot.helpers.project`/Project#set_root_path().","attributes":{"type":"defines","at":[79,4,81,52]}},{"key":"geid_130_933","source":"scip-python python temp indexer `pilot.helpers.project`/Project#","target":"scip-python python temp indexer `pilot.helpers.project`/Project#__init__().","attributes":{"type":"defines","at":[31,4,77,83]}},{"key":"geid_130_934","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.helpers.project`/Project#","attributes":{"type":"defines","at":[30,0,457,56]}},{"key":"geid_130_935","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python python-stdlib 3.11 json/__init__:","attributes":{"type":"uses","at":[0,7,0,11]}},{"key":"geid_130_936","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[1,7,1,9]}},{"key":"geid_130_937","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python python-stdlib 3.11 pathlib/__init__:","attributes":{"type":"uses","at":[2,5,2,12]}},{"key":"geid_130_938","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python python-stdlib 3.11 pathlib/Path#","attributes":{"type":"uses","at":[2,20,2,24]}},{"key":"geid_130_939","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python python-stdlib 3.11 re/__init__:","attributes":{"type":"uses","at":[3,7,3,9]}},{"key":"geid_130_940","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python python-stdlib 3.11 typing/__init__:","attributes":{"type":"uses","at":[4,5,4,11]}},{"key":"geid_130_941","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python python-stdlib 3.11 typing/Tuple.","attributes":{"type":"uses","at":[4,19,4,24]}},{"key":"geid_130_942","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.const.messages`/__init__:","attributes":{"type":"uses","at":[6,5,6,19]}},{"key":"geid_130_943","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.const.messages`/CHECK_AND_CONTINUE.","attributes":{"type":"uses","at":[6,27,6,45]}},{"key":"geid_130_944","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.const.messages`/AFFIRMATIVE_ANSWERS.","attributes":{"type":"uses","at":[6,47,6,66]}},{"key":"geid_130_945","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.const.messages`/NEGATIVE_ANSWERS.","attributes":{"type":"uses","at":[6,68,6,84]}},{"key":"geid_130_946","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/__init__:","attributes":{"type":"uses","at":[7,5,7,16]}},{"key":"geid_130_947","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/color_yellow_bold.","attributes":{"type":"uses","at":[7,24,7,41]}},{"key":"geid_130_948","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/color_cyan.","attributes":{"type":"uses","at":[7,43,7,53]}},{"key":"geid_130_949","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/color_white_bold.","attributes":{"type":"uses","at":[7,55,7,71]}},{"key":"geid_130_950","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/color_green.","attributes":{"type":"uses","at":[7,73,7,84]}},{"key":"geid_130_951","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.const.common`/__init__:","attributes":{"type":"uses","at":[8,5,8,17]}},{"key":"geid_130_952","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.const.common`/IGNORE_FOLDERS.","attributes":{"type":"uses","at":[8,25,8,39]}},{"key":"geid_130_953","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.const.common`/STEPS.","attributes":{"type":"uses","at":[8,41,8,46]}},{"key":"geid_130_954","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/__init__:","attributes":{"type":"uses","at":[9,5,9,22]}},{"key":"geid_130_955","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/delete_unconnected_steps_from().","attributes":{"type":"uses","at":[9,30,9,59]}},{"key":"geid_130_956","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/delete_all_app_development_data().","attributes":{"type":"uses","at":[9,61,9,92]}},{"key":"geid_130_957","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/update_app_status().","attributes":{"type":"uses","at":[9,94,9,111]}},{"key":"geid_130_958","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.const.ipc`/__init__:","attributes":{"type":"uses","at":[10,5,10,14]}},{"key":"geid_130_959","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.const.ipc`/MESSAGE_TYPE.","attributes":{"type":"uses","at":[10,22,10,34]}},{"key":"geid_130_960","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.prompts.prompts`/__init__:","attributes":{"type":"uses","at":[11,5,11,20]}},{"key":"geid_130_961","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.prompts.prompts`/ask_user().","attributes":{"type":"uses","at":[11,28,11,36]}},{"key":"geid_130_962","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.helpers.exceptions.tokenlimiterror`/__init__:","attributes":{"type":"uses","at":[12,5,12,39]}},{"key":"geid_130_963","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.helpers.exceptions.tokenlimiterror`/TokenLimitError#","attributes":{"type":"uses","at":[12,47,12,62]}},{"key":"geid_130_964","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.utils.questionary`/__init__:","attributes":{"type":"uses","at":[13,5,13,22]}},{"key":"geid_130_965","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.utils.questionary`/styled_text().","attributes":{"type":"uses","at":[13,30,13,41]}},{"key":"geid_130_966","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.helpers.files`/__init__:","attributes":{"type":"uses","at":[14,5,14,18]}},{"key":"geid_130_967","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.helpers.files`/get_directory_contents().","attributes":{"type":"uses","at":[14,26,14,48]}},{"key":"geid_130_968","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.helpers.files`/get_file_contents().","attributes":{"type":"uses","at":[14,50,14,67]}},{"key":"geid_130_969","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.helpers.files`/clear_directory().","attributes":{"type":"uses","at":[14,69,14,84]}},{"key":"geid_130_970","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.helpers.files`/update_file().","attributes":{"type":"uses","at":[14,86,14,97]}},{"key":"geid_130_971","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","attributes":{"type":"uses","at":[15,5,15,16]}},{"key":"geid_130_972","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.helpers.cli`/build_directory_tree().","attributes":{"type":"uses","at":[15,24,15,44]}},{"key":"geid_130_973","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.techlead`/__init__:","attributes":{"type":"uses","at":[16,5,16,28]}},{"key":"geid_130_974","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#","attributes":{"type":"uses","at":[16,36,16,44]}},{"key":"geid_130_975","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","attributes":{"type":"uses","at":[17,5,17,29]}},{"key":"geid_130_976","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#","attributes":{"type":"uses","at":[17,37,17,46]}},{"key":"geid_130_977","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.architect`/__init__:","attributes":{"type":"uses","at":[18,5,18,29]}},{"key":"geid_130_978","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#","attributes":{"type":"uses","at":[18,37,18,46]}},{"key":"geid_130_979","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.productowner`/__init__:","attributes":{"type":"uses","at":[19,5,19,32]}},{"key":"geid_130_980","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#","attributes":{"type":"uses","at":[19,40,19,52]}},{"key":"geid_130_981","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/__init__:","attributes":{"type":"uses","at":[20,5,20,35]}},{"key":"geid_130_982","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#","attributes":{"type":"uses","at":[20,43,20,58]}},{"key":"geid_130_983","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.database.models.development_steps`/__init__:","attributes":{"type":"uses","at":[22,5,22,38]}},{"key":"geid_130_984","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#","attributes":{"type":"uses","at":[22,46,22,62]}},{"key":"geid_130_985","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.database.models.file_snapshot`/__init__:","attributes":{"type":"uses","at":[23,5,23,34]}},{"key":"geid_130_986","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#","attributes":{"type":"uses","at":[23,42,23,54]}},{"key":"geid_130_987","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.database.models.files`/__init__:","attributes":{"type":"uses","at":[24,5,24,26]}},{"key":"geid_130_988","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.database.models.files`/File#","attributes":{"type":"uses","at":[24,34,24,38]}},{"key":"geid_130_989","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.logger.logger`/__init__:","attributes":{"type":"uses","at":[25,5,25,18]}},{"key":"geid_130_990","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[25,26,25,32]}},{"key":"geid_130_991","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/__init__:","attributes":{"type":"uses","at":[26,5,26,24]}},{"key":"geid_130_992","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#","attributes":{"type":"uses","at":[26,32,26,43]}},{"key":"geid_130_993","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.utils.telemetry`/__init__:","attributes":{"type":"uses","at":[28,5,28,20]}},{"key":"geid_130_994","source":"scip-python python temp indexer `pilot.helpers.project`/__init__:","target":"scip-python python temp indexer `pilot.utils.telemetry`/telemetry.","attributes":{"type":"uses","at":[28,28,28,37]}},{"key":"geid_130_995","source":"scip-python python temp indexer `pilot.helpers.project`/Project#__init__().","target":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#","attributes":{"type":"uses","at":[77,29,77,40]}},{"key":"geid_130_996","source":"scip-python python temp indexer `pilot.helpers.project`/Project#set_root_path().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#root_path.","attributes":{"type":"uses","at":[80,13,80,22]}},{"key":"geid_130_997","source":"scip-python python temp indexer `pilot.helpers.project`/Project#set_root_path().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#dot_pilot_gpt.","attributes":{"type":"uses","at":[81,13,81,26]}},{"key":"geid_130_998","source":"scip-python python temp indexer `pilot.helpers.project`/Project#set_root_path().","target":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#with_root_path().","attributes":{"type":"uses","at":[81,27,81,41]}},{"key":"geid_130_999","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.utils.telemetry`/telemetry.","attributes":{"type":"uses","at":[87,8,87,17]}},{"key":"geid_130_1000","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#start().","attributes":{"type":"uses","at":[87,18,87,23]}},{"key":"geid_130_1001","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#","attributes":{"type":"uses","at":[88,31,88,43]}},{"key":"geid_130_1002","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#project_manager.","attributes":{"type":"uses","at":[89,13,89,28]}},{"key":"geid_130_1003","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","attributes":{"type":"uses","at":[89,29,89,52]}},{"key":"geid_130_1004","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#project_manager.","attributes":{"type":"uses","at":[91,13,91,28]}},{"key":"geid_130_1005","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_stories().","attributes":{"type":"uses","at":[91,29,91,45]}},{"key":"geid_130_1006","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#","attributes":{"type":"uses","at":[94,25,94,34]}},{"key":"geid_130_1007","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#architect.","attributes":{"type":"uses","at":[95,13,95,22]}},{"key":"geid_130_1008","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#get_architecture().","attributes":{"type":"uses","at":[95,23,95,39]}},{"key":"geid_130_1009","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#","attributes":{"type":"uses","at":[97,25,97,34]}},{"key":"geid_130_1010","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#developer.","attributes":{"type":"uses","at":[98,13,98,22]}},{"key":"geid_130_1011","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#set_up_environment().","attributes":{"type":"uses","at":[98,23,98,41]}},{"key":"geid_130_1012","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#","attributes":{"type":"uses","at":[99,32,99,47]}},{"key":"geid_130_1013","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#","attributes":{"type":"uses","at":[101,25,101,33]}},{"key":"geid_130_1014","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#tech_lead.","attributes":{"type":"uses","at":[102,13,102,22]}},{"key":"geid_130_1015","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_development_plan().","attributes":{"type":"uses","at":[102,23,102,46]}},{"key":"geid_130_1016","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#args.","attributes":{"type":"uses","at":[105,16,105,20]}},{"key":"geid_130_1017","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.const.common`/STEPS.","attributes":{"type":"uses","at":[105,45,105,50]}},{"key":"geid_130_1018","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#args.","attributes":{"type":"uses","at":[105,62,105,66]}},{"key":"geid_130_1019","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.const.common`/STEPS.","attributes":{"type":"uses","at":[105,78,105,83]}},{"key":"geid_130_1020","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.helpers.files`/clear_directory().","attributes":{"type":"uses","at":[106,12,106,27]}},{"key":"geid_130_1021","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#root_path.","attributes":{"type":"uses","at":[106,33,106,42]}},{"key":"geid_130_1022","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.database.database`/delete_all_app_development_data().","attributes":{"type":"uses","at":[107,12,107,43]}},{"key":"geid_130_1023","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#args.","attributes":{"type":"uses","at":[107,49,107,53]}},{"key":"geid_130_1024","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#skip_steps.","attributes":{"type":"uses","at":[108,17,108,27]}},{"key":"geid_130_1025","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#args.","attributes":{"type":"uses","at":[110,41,110,45]}},{"key":"geid_130_1026","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#skip_until_dev_step.","attributes":{"type":"uses","at":[111,17,111,36]}},{"key":"geid_130_1027","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#args.","attributes":{"type":"uses","at":[111,44,111,48]}},{"key":"geid_130_1028","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#args.","attributes":{"type":"uses","at":[112,20,112,24]}},{"key":"geid_130_1029","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.helpers.files`/clear_directory().","attributes":{"type":"uses","at":[113,16,113,31]}},{"key":"geid_130_1030","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#root_path.","attributes":{"type":"uses","at":[113,37,113,46]}},{"key":"geid_130_1031","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.database.database`/delete_all_app_development_data().","attributes":{"type":"uses","at":[114,16,114,47]}},{"key":"geid_130_1032","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#args.","attributes":{"type":"uses","at":[114,53,114,57]}},{"key":"geid_130_1033","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#skip_steps.","attributes":{"type":"uses","at":[115,21,115,31]}},{"key":"geid_130_1034","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#skip_until_dev_step.","attributes":{"type":"uses","at":[116,22,116,41]}},{"key":"geid_130_1035","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.const.messages`/AFFIRMATIVE_ANSWERS.","attributes":{"type":"uses","at":[118,94,118,113]}},{"key":"geid_130_1036","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.const.messages`/NEGATIVE_ANSWERS.","attributes":{"type":"uses","at":[118,116,118,132]}},{"key":"geid_130_1037","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.utils.questionary`/styled_text().","attributes":{"type":"uses","at":[120,45,120,56]}},{"key":"geid_130_1038","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[126,20,126,26]}},{"key":"geid_130_1039","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[126,27,126,31]}},{"key":"geid_130_1040","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.const.messages`/NEGATIVE_ANSWERS.","attributes":{"type":"uses","at":[127,49,127,65]}},{"key":"geid_130_1041","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.const.messages`/AFFIRMATIVE_ANSWERS.","attributes":{"type":"uses","at":[129,51,129,70]}},{"key":"geid_130_1042","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#","attributes":{"type":"uses","at":[130,24,130,36]}},{"key":"geid_130_1043","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#","attributes":{"type":"uses","at":[131,28,131,40]}},{"key":"geid_130_1044","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#app.","attributes":{"type":"uses","at":[131,41,131,44]}},{"key":"geid_130_1045","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#","attributes":{"type":"uses","at":[131,61,131,73]}},{"key":"geid_130_1046","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#development_step.","attributes":{"type":"uses","at":[131,74,131,90]}},{"key":"geid_130_1047","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#skip_until_dev_step.","attributes":{"type":"uses","at":[131,99,131,118]}},{"key":"geid_130_1048","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#save_files_snapshot().","attributes":{"type":"uses","at":[132,29,132,48]}},{"key":"geid_130_1049","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#skip_until_dev_step.","attributes":{"type":"uses","at":[132,54,132,73]}},{"key":"geid_130_1050","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#dot_pilot_gpt.","attributes":{"type":"uses","at":[136,13,136,26]}},{"key":"geid_130_1051","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#write_project().","attributes":{"type":"uses","at":[136,27,136,40]}},{"key":"geid_130_1052","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python python-stdlib 3.11 json/__init__:","attributes":{"type":"uses","at":[137,14,137,18]}},{"key":"geid_130_1053","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python python-stdlib 3.11 json/dumps().","attributes":{"type":"uses","at":[137,19,137,24]}},{"key":"geid_130_1054","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#developer.","attributes":{"type":"uses","at":[140,13,140,22]}},{"key":"geid_130_1055","source":"scip-python python temp indexer `pilot.helpers.project`/Project#start().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#start_coding().","attributes":{"type":"uses","at":[140,23,140,35]}},{"key":"geid_130_1056","source":"scip-python python temp indexer `pilot.helpers.project`/Project#finish().","target":"scip-python python temp indexer `pilot.prompts.prompts`/ask_user().","attributes":{"type":"uses","at":[147,34,147,42]}},{"key":"geid_130_1057","source":"scip-python python temp indexer `pilot.helpers.project`/Project#finish().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#tech_lead.","attributes":{"type":"uses","at":[154,17,154,26]}},{"key":"geid_130_1058","source":"scip-python python temp indexer `pilot.helpers.project`/Project#finish().","target":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_feature_plan().","attributes":{"type":"uses","at":[154,27,154,46]}},{"key":"geid_130_1059","source":"scip-python python temp indexer `pilot.helpers.project`/Project#finish().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#developer.","attributes":{"type":"uses","at":[155,17,155,26]}},{"key":"geid_130_1060","source":"scip-python python temp indexer `pilot.helpers.project`/Project#finish().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#start_coding().","attributes":{"type":"uses","at":[155,27,155,39]}},{"key":"geid_130_1061","source":"scip-python python temp indexer `pilot.helpers.project`/Project#finish().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#tech_lead.","attributes":{"type":"uses","at":[156,17,156,26]}},{"key":"geid_130_1062","source":"scip-python python temp indexer `pilot.helpers.project`/Project#finish().","target":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_feature_summary().","attributes":{"type":"uses","at":[156,27,156,49]}},{"key":"geid_130_1063","source":"scip-python python temp indexer `pilot.helpers.project`/Project#get_directory_tree().","target":"scip-python python temp indexer `pilot.helpers.cli`/build_directory_tree().","attributes":{"type":"uses","at":[173,15,173,35]}},{"key":"geid_130_1064","source":"scip-python python temp indexer `pilot.helpers.project`/Project#get_directory_tree().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#root_path.","attributes":{"type":"uses","at":[173,41,173,50]}},{"key":"geid_130_1065","source":"scip-python python temp indexer `pilot.helpers.project`/Project#get_directory_tree().","target":"scip-python python temp indexer `pilot.const.common`/IGNORE_FOLDERS.","attributes":{"type":"uses","at":[173,59,173,73]}},{"key":"geid_130_1066","source":"scip-python python temp indexer `pilot.helpers.project`/Project#get_test_directory_tree().","target":"scip-python python temp indexer `pilot.helpers.cli`/build_directory_tree().","attributes":{"type":"uses","at":[183,15,183,35]}},{"key":"geid_130_1067","source":"scip-python python temp indexer `pilot.helpers.project`/Project#get_test_directory_tree().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#root_path.","attributes":{"type":"uses","at":[183,41,183,50]}},{"key":"geid_130_1068","source":"scip-python python temp indexer `pilot.helpers.project`/Project#get_test_directory_tree().","target":"scip-python python temp indexer `pilot.const.common`/IGNORE_FOLDERS.","attributes":{"type":"uses","at":[183,70,183,84]}},{"key":"geid_130_1069","source":"scip-python python temp indexer `pilot.helpers.project`/Project#get_all_coded_files().","target":"scip-python python temp indexer `pilot.database.models.files`/File#","attributes":{"type":"uses","at":[192,16,192,20]}},{"key":"geid_130_1070","source":"scip-python python temp indexer `pilot.helpers.project`/Project#get_all_coded_files().","target":"scip-python python temp indexer `pilot.database.models.files`/File#","attributes":{"type":"uses","at":[192,36,192,40]}},{"key":"geid_130_1071","source":"scip-python python temp indexer `pilot.helpers.project`/Project#get_all_coded_files().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#args.","attributes":{"type":"uses","at":[192,56,192,60]}},{"key":"geid_130_1072","source":"scip-python python temp indexer `pilot.helpers.project`/Project#get_all_coded_files().","target":"scip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#","attributes":{"type":"uses","at":[195,47,195,59]}},{"key":"geid_130_1073","source":"scip-python python temp indexer `pilot.helpers.project`/Project#get_all_coded_files().","target":"scip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#","attributes":{"type":"uses","at":[195,75,195,87]}},{"key":"geid_130_1074","source":"scip-python python temp indexer `pilot.helpers.project`/Project#get_all_coded_files().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#get_files().","attributes":{"type":"uses","at":[198,21,198,30]}},{"key":"geid_130_1075","source":"scip-python python temp indexer `pilot.helpers.project`/Project#get_files().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#get_full_file_path().","attributes":{"type":"uses","at":[225,36,225,54]}},{"key":"geid_130_1076","source":"scip-python python temp indexer `pilot.helpers.project`/Project#get_files().","target":"scip-python python temp indexer `pilot.helpers.files`/get_file_contents().","attributes":{"type":"uses","at":[226,28,226,45]}},{"key":"geid_130_1077","source":"scip-python python temp indexer `pilot.helpers.project`/Project#get_files().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#root_path.","attributes":{"type":"uses","at":[226,62,226,71]}},{"key":"geid_130_1078","source":"scip-python python temp indexer `pilot.helpers.project`/Project#save_file().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[258,74,258,76]}},{"key":"geid_130_1079","source":"scip-python python temp indexer `pilot.helpers.project`/Project#save_file().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[258,77,258,81]}},{"key":"geid_130_1080","source":"scip-python python temp indexer `pilot.helpers.project`/Project#save_file().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[258,82,258,90]}},{"key":"geid_130_1081","source":"scip-python python temp indexer `pilot.helpers.project`/Project#save_file().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#get_full_file_path().","attributes":{"type":"uses","at":[261,31,261,49]}},{"key":"geid_130_1082","source":"scip-python python temp indexer `pilot.helpers.project`/Project#save_file().","target":"scip-python python temp indexer `pilot.helpers.files`/update_file().","attributes":{"type":"uses","at":[262,8,262,19]}},{"key":"geid_130_1083","source":"scip-python python temp indexer `pilot.helpers.project`/Project#save_file().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#files.","attributes":{"type":"uses","at":[263,33,263,38]}},{"key":"geid_130_1084","source":"scip-python python temp indexer `pilot.helpers.project`/Project#save_file().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#files.","attributes":{"type":"uses","at":[264,17,264,22]}},{"key":"geid_130_1085","source":"scip-python python temp indexer `pilot.helpers.project`/Project#save_file().","target":"scip-python python temp indexer `pilot.database.models.files`/File#","attributes":{"type":"uses","at":[266,9,266,13]}},{"key":"geid_130_1086","source":"scip-python python temp indexer `pilot.helpers.project`/Project#save_file().","target":"scip-python python temp indexer `pilot.database.models.files`/File#","attributes":{"type":"uses","at":[268,29,268,33]}},{"key":"geid_130_1087","source":"scip-python python temp indexer `pilot.helpers.project`/Project#save_file().","target":"scip-python python temp indexer `pilot.database.models.files`/File#app.","attributes":{"type":"uses","at":[268,34,268,37]}},{"key":"geid_130_1088","source":"scip-python python temp indexer `pilot.helpers.project`/Project#save_file().","target":"scip-python python temp indexer `pilot.database.models.files`/File#","attributes":{"type":"uses","at":[268,39,268,43]}},{"key":"geid_130_1089","source":"scip-python python temp indexer `pilot.helpers.project`/Project#save_file().","target":"scip-python python temp indexer `pilot.database.models.files`/File#name.","attributes":{"type":"uses","at":[268,44,268,48]}},{"key":"geid_130_1090","source":"scip-python python temp indexer `pilot.helpers.project`/Project#save_file().","target":"scip-python python temp indexer `pilot.database.models.files`/File#","attributes":{"type":"uses","at":[268,50,268,54]}},{"key":"geid_130_1091","source":"scip-python python temp indexer `pilot.helpers.project`/Project#save_file().","target":"scip-python python temp indexer `pilot.database.models.files`/File#path.","attributes":{"type":"uses","at":[268,55,268,59]}},{"key":"geid_130_1092","source":"scip-python python temp indexer `pilot.helpers.project`/Project#save_file().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#skip_steps.","attributes":{"type":"uses","at":[273,20,273,30]}},{"key":"geid_130_1093","source":"scip-python python temp indexer `pilot.helpers.project`/Project#save_file().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#find_input_required_lines().","attributes":{"type":"uses","at":[274,35,274,60]}},{"key":"geid_130_1094","source":"scip-python python temp indexer `pilot.helpers.project`/Project#save_file().","target":"scip-python python temp indexer `pilot.utils.style`/color_yellow_bold.","attributes":{"type":"uses","at":[277,22,277,39]}},{"key":"geid_130_1095","source":"scip-python python temp indexer `pilot.helpers.project`/Project#save_file().","target":"scip-python python temp indexer `pilot.const.messages`/AFFIRMATIVE_ANSWERS.","attributes":{"type":"uses","at":[278,70,278,89]}},{"key":"geid_130_1096","source":"scip-python python temp indexer `pilot.helpers.project`/Project#save_file().","target":"scip-python python temp indexer `pilot.utils.questionary`/styled_text().","attributes":{"type":"uses","at":[281,33,281,44]}},{"key":"geid_130_1097","source":"scip-python python temp indexer `pilot.helpers.project`/Project#get_full_file_path().","target":"scip-python python python-stdlib 3.11 typing/Tuple.","attributes":{"type":"uses","at":[287,68,287,73]}},{"key":"geid_130_1098","source":"scip-python python temp indexer `pilot.helpers.project`/Project#normalize_path().","target":"scip-python python python-stdlib 3.11 typing/Tuple.","attributes":{"type":"uses","at":[298,41,298,46]}},{"key":"geid_130_1099","source":"scip-python python temp indexer `pilot.helpers.project`/Project#normalize_path().","target":"scip-python python python-stdlib 3.11 pathlib/Path#","attributes":{"type":"uses","at":[312,23,312,27]}},{"key":"geid_130_1100","source":"scip-python python temp indexer `pilot.helpers.project`/Project#normalize_path().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[324,50,324,52]}},{"key":"geid_130_1101","source":"scip-python python temp indexer `pilot.helpers.project`/Project#normalize_path().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[324,53,324,57]}},{"key":"geid_130_1102","source":"scip-python python temp indexer `pilot.helpers.project`/Project#normalize_path().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[324,58,324,61]}},{"key":"geid_130_1103","source":"scip-python python temp indexer `pilot.helpers.project`/Project#normalize_path().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#root_path.","attributes":{"type":"uses","at":[333,37,333,46]}},{"key":"geid_130_1104","source":"scip-python python temp indexer `pilot.helpers.project`/Project#normalize_path().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[342,19,342,21]}},{"key":"geid_130_1105","source":"scip-python python temp indexer `pilot.helpers.project`/Project#normalize_path().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[342,22,342,26]}},{"key":"geid_130_1106","source":"scip-python python temp indexer `pilot.helpers.project`/Project#normalize_path().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[342,27,342,35]}},{"key":"geid_130_1107","source":"scip-python python temp indexer `pilot.helpers.project`/Project#normalize_path().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[344,24,344,26]}},{"key":"geid_130_1108","source":"scip-python python temp indexer `pilot.helpers.project`/Project#normalize_path().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[344,27,344,31]}},{"key":"geid_130_1109","source":"scip-python python temp indexer `pilot.helpers.project`/Project#normalize_path().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[344,32,344,35]}},{"key":"geid_130_1110","source":"scip-python python temp indexer `pilot.helpers.project`/Project#normalize_path().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[347,22,347,24]}},{"key":"geid_130_1111","source":"scip-python python temp indexer `pilot.helpers.project`/Project#normalize_path().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[347,25,347,29]}},{"key":"geid_130_1112","source":"scip-python python temp indexer `pilot.helpers.project`/Project#normalize_path().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[347,30,347,40]}},{"key":"geid_130_1113","source":"scip-python python temp indexer `pilot.helpers.project`/Project#normalize_path().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[350,35,350,37]}},{"key":"geid_130_1114","source":"scip-python python temp indexer `pilot.helpers.project`/Project#normalize_path().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[350,38,350,42]}},{"key":"geid_130_1115","source":"scip-python python temp indexer `pilot.helpers.project`/Project#normalize_path().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[350,43,350,46]}},{"key":"geid_130_1116","source":"scip-python python temp indexer `pilot.helpers.project`/Project#normalize_path().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[351,23,351,25]}},{"key":"geid_130_1117","source":"scip-python python temp indexer `pilot.helpers.project`/Project#normalize_path().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[351,26,351,30]}},{"key":"geid_130_1118","source":"scip-python python temp indexer `pilot.helpers.project`/Project#normalize_path().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[351,31,351,34]}},{"key":"geid_130_1119","source":"scip-python python temp indexer `pilot.helpers.project`/Project#normalize_path().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[353,19,353,21]}},{"key":"geid_130_1120","source":"scip-python python temp indexer `pilot.helpers.project`/Project#normalize_path().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[353,22,353,26]}},{"key":"geid_130_1121","source":"scip-python python temp indexer `pilot.helpers.project`/Project#normalize_path().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[353,27,353,32]}},{"key":"geid_130_1122","source":"scip-python python temp indexer `pilot.helpers.project`/Project#get_full_file_path().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#normalize_path().","attributes":{"type":"uses","at":[355,31,355,45]}},{"key":"geid_130_1123","source":"scip-python python temp indexer `pilot.helpers.project`/Project#get_full_file_path().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#normalize_path().","attributes":{"type":"uses","at":[356,31,356,45]}},{"key":"geid_130_1124","source":"scip-python python temp indexer `pilot.helpers.project`/Project#get_full_file_path().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[377,30,377,32]}},{"key":"geid_130_1125","source":"scip-python python temp indexer `pilot.helpers.project`/Project#get_full_file_path().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[377,33,377,37]}},{"key":"geid_130_1126","source":"scip-python python temp indexer `pilot.helpers.project`/Project#get_full_file_path().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[377,38,377,41]}},{"key":"geid_130_1127","source":"scip-python python temp indexer `pilot.helpers.project`/Project#get_full_file_path().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[379,30,379,32]}},{"key":"geid_130_1128","source":"scip-python python temp indexer `pilot.helpers.project`/Project#get_full_file_path().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[379,33,379,37]}},{"key":"geid_130_1129","source":"scip-python python temp indexer `pilot.helpers.project`/Project#get_full_file_path().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[379,38,379,42]}},{"key":"geid_130_1130","source":"scip-python python temp indexer `pilot.helpers.project`/Project#get_full_file_path().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#root_path.","attributes":{"type":"uses","at":[379,48,379,57]}},{"key":"geid_130_1131","source":"scip-python python temp indexer `pilot.helpers.project`/Project#save_files_snapshot().","target":"scip-python python temp indexer `pilot.helpers.files`/get_directory_contents().","attributes":{"type":"uses","at":[384,16,384,38]}},{"key":"geid_130_1132","source":"scip-python python temp indexer `pilot.helpers.project`/Project#save_files_snapshot().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#root_path.","attributes":{"type":"uses","at":[384,44,384,53]}},{"key":"geid_130_1133","source":"scip-python python temp indexer `pilot.helpers.project`/Project#save_files_snapshot().","target":"scip-python python temp indexer `pilot.const.common`/IGNORE_FOLDERS.","attributes":{"type":"uses","at":[384,62,384,76]}},{"key":"geid_130_1134","source":"scip-python python temp indexer `pilot.helpers.project`/Project#save_files_snapshot().","target":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#","attributes":{"type":"uses","at":[385,36,385,52]}},{"key":"geid_130_1135","source":"scip-python python temp indexer `pilot.helpers.project`/Project#save_files_snapshot().","target":"scip-python python temp indexer `pilot.utils.style`/color_cyan.","attributes":{"type":"uses","at":[388,18,388,28]}},{"key":"geid_130_1136","source":"scip-python python temp indexer `pilot.helpers.project`/Project#save_files_snapshot().","target":"scip-python python temp indexer `pilot.database.models.files`/File#","attributes":{"type":"uses","at":[390,34,390,38]}},{"key":"geid_130_1137","source":"scip-python python temp indexer `pilot.helpers.project`/Project#save_files_snapshot().","target":"scip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#","attributes":{"type":"uses","at":[397,37,397,49]}},{"key":"geid_130_1138","source":"scip-python python temp indexer `pilot.helpers.project`/Project#restore_files().","target":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#","attributes":{"type":"uses","at":[407,27,407,43]}},{"key":"geid_130_1139","source":"scip-python python temp indexer `pilot.helpers.project`/Project#restore_files().","target":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#","attributes":{"type":"uses","at":[407,48,407,64]}},{"key":"geid_130_1140","source":"scip-python python temp indexer `pilot.helpers.project`/Project#restore_files().","target":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#id.","attributes":{"type":"uses","at":[407,65,407,67]}},{"key":"geid_130_1141","source":"scip-python python temp indexer `pilot.helpers.project`/Project#restore_files().","target":"scip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#","attributes":{"type":"uses","at":[408,25,408,37]}},{"key":"geid_130_1142","source":"scip-python python temp indexer `pilot.helpers.project`/Project#restore_files().","target":"scip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#","attributes":{"type":"uses","at":[408,53,408,65]}},{"key":"geid_130_1143","source":"scip-python python temp indexer `pilot.helpers.project`/Project#restore_files().","target":"scip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#development_step.","attributes":{"type":"uses","at":[408,66,408,82]}},{"key":"geid_130_1144","source":"scip-python python temp indexer `pilot.helpers.project`/Project#restore_files().","target":"scip-python python temp indexer `pilot.helpers.files`/clear_directory().","attributes":{"type":"uses","at":[410,8,410,23]}},{"key":"geid_130_1145","source":"scip-python python temp indexer `pilot.helpers.project`/Project#restore_files().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#root_path.","attributes":{"type":"uses","at":[410,29,410,38]}},{"key":"geid_130_1146","source":"scip-python python temp indexer `pilot.helpers.project`/Project#restore_files().","target":"scip-python python temp indexer `pilot.const.common`/IGNORE_FOLDERS.","attributes":{"type":"uses","at":[410,40,410,54]}},{"key":"geid_130_1147","source":"scip-python python temp indexer `pilot.helpers.project`/Project#restore_files().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#files.","attributes":{"type":"uses","at":[410,62,410,67]}},{"key":"geid_130_1148","source":"scip-python python temp indexer `pilot.helpers.project`/Project#restore_files().","target":"scip-python python temp indexer `pilot.helpers.files`/update_file().","attributes":{"type":"uses","at":[412,12,412,23]}},{"key":"geid_130_1149","source":"scip-python python temp indexer `pilot.helpers.project`/Project#restore_files().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#files.","attributes":{"type":"uses","at":[413,56,413,61]}},{"key":"geid_130_1150","source":"scip-python python temp indexer `pilot.helpers.project`/Project#restore_files().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#files.","attributes":{"type":"uses","at":[414,21,414,26]}},{"key":"geid_130_1151","source":"scip-python python temp indexer `pilot.helpers.project`/Project#delete_all_steps_except_current_branch().","target":"scip-python python temp indexer `pilot.database.database`/delete_unconnected_steps_from().","attributes":{"type":"uses","at":[417,8,417,37]}},{"key":"geid_130_1152","source":"scip-python python temp indexer `pilot.helpers.project`/Project#delete_all_steps_except_current_branch().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#checkpoints.","attributes":{"type":"uses","at":[417,43,417,54]}},{"key":"geid_130_1153","source":"scip-python python temp indexer `pilot.helpers.project`/Project#delete_all_steps_except_current_branch().","target":"scip-python python temp indexer `pilot.database.database`/delete_unconnected_steps_from().","attributes":{"type":"uses","at":[418,8,418,37]}},{"key":"geid_130_1154","source":"scip-python python temp indexer `pilot.helpers.project`/Project#delete_all_steps_except_current_branch().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#checkpoints.","attributes":{"type":"uses","at":[418,43,418,54]}},{"key":"geid_130_1155","source":"scip-python python temp indexer `pilot.helpers.project`/Project#delete_all_steps_except_current_branch().","target":"scip-python python temp indexer `pilot.database.database`/delete_unconnected_steps_from().","attributes":{"type":"uses","at":[419,8,419,37]}},{"key":"geid_130_1156","source":"scip-python python temp indexer `pilot.helpers.project`/Project#delete_all_steps_except_current_branch().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#checkpoints.","attributes":{"type":"uses","at":[419,43,419,54]}},{"key":"geid_130_1157","source":"scip-python python temp indexer `pilot.helpers.project`/Project#ask_for_human_intervention().","target":"scip-python python temp indexer `pilot.utils.style`/color_yellow_bold.","attributes":{"type":"uses","at":[423,19,423,36]}},{"key":"geid_130_1158","source":"scip-python python temp indexer `pilot.helpers.project`/Project#ask_for_human_intervention().","target":"scip-python python temp indexer `pilot.utils.style`/color_white_bold.","attributes":{"type":"uses","at":[426,50,426,66]}},{"key":"geid_130_1159","source":"scip-python python temp indexer `pilot.helpers.project`/Project#ask_for_human_intervention().","target":"scip-python python temp indexer `pilot.prompts.prompts`/ask_user().","attributes":{"type":"uses","at":[432,21,432,29]}},{"key":"geid_130_1160","source":"scip-python python temp indexer `pilot.helpers.project`/Project#ask_for_human_intervention().","target":"scip-python python temp indexer `pilot.const.messages`/CHECK_AND_CONTINUE.","attributes":{"type":"uses","at":[432,36,432,54]}},{"key":"geid_130_1161","source":"scip-python python temp indexer `pilot.helpers.project`/Project#ask_for_human_intervention().","target":"scip-python python temp indexer `pilot.helpers.exceptions.tokenlimiterror`/TokenLimitError#","attributes":{"type":"uses","at":[441,19,441,34]}},{"key":"geid_130_1162","source":"scip-python python temp indexer `pilot.helpers.project`/Project#log().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#ipc_client_instance.","attributes":{"type":"uses","at":[449,16,449,35]}},{"key":"geid_130_1163","source":"scip-python python temp indexer `pilot.helpers.project`/Project#log().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#ipc_client_instance.","attributes":{"type":"uses","at":[449,52,449,71]}},{"key":"geid_130_1164","source":"scip-python python temp indexer `pilot.helpers.project`/Project#log().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#ipc_client_instance.","attributes":{"type":"uses","at":[452,17,452,36]}},{"key":"geid_130_1165","source":"scip-python python temp indexer `pilot.helpers.project`/Project#log().","target":"scip-python python temp indexer `pilot.const.ipc`/MESSAGE_TYPE.","attributes":{"type":"uses","at":[453,24,453,36]}},{"key":"geid_130_1166","source":"scip-python python temp indexer `pilot.helpers.project`/Project#log().","target":"scip-python python temp indexer `pilot.const.ipc`/MESSAGE_TYPE.","attributes":{"type":"uses","at":[456,31,456,43]}},{"key":"geid_130_1167","source":"scip-python python temp indexer `pilot.helpers.project`/Project#log().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#ipc_client_instance.","attributes":{"type":"uses","at":[457,28,457,47]}},{"key":"geid_130_1168","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python temp indexer `pilot.helpers.cli`/run_command_until_success().","attributes":{"type":"defines","at":[447,0,524,62]}},{"key":"geid_130_1169","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python temp indexer `pilot.helpers.cli`/execute_command_and_check_cli_response().","attributes":{"type":"defines","at":[419,0,444,33]}},{"key":"geid_130_1170","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python temp indexer `pilot.helpers.cli`/build_directory_tree_with_descriptions().","attributes":{"type":"defines","at":[393,0,416,17]}},{"key":"geid_130_1171","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python temp indexer `pilot.helpers.cli`/res_for_build_directory_tree().","attributes":{"type":"defines","at":[389,0,390,119]}},{"key":"geid_130_1172","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python temp indexer `pilot.helpers.cli`/build_directory_tree().","attributes":{"type":"defines","at":[343,0,386,17]}},{"key":"geid_130_1173","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python temp indexer `pilot.helpers.cli`/check_if_command_successful().","attributes":{"type":"defines","at":[322,0,340,19]}},{"key":"geid_130_1174","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","attributes":{"type":"defines","at":[175,0,319,67]}},{"key":"geid_130_1175","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python temp indexer `pilot.helpers.cli`/read_remaining_queue().","attributes":{"type":"defines","at":[167,0,172,17]}},{"key":"geid_130_1176","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python temp indexer `pilot.helpers.cli`/read_queue_line().","attributes":{"type":"defines","at":[146,0,164,15]}},{"key":"geid_130_1177","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python temp indexer `pilot.helpers.cli`/terminate_process().","attributes":{"type":"defines","at":[111,0,143,45]}},{"key":"geid_130_1178","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python temp indexer `pilot.helpers.cli`/is_process_running().","attributes":{"type":"defines","at":[101,0,108,20]}},{"key":"geid_130_1179","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python temp indexer `pilot.helpers.cli`/term_proc_unix_like().","attributes":{"type":"defines","at":[94,0,98,61]}},{"key":"geid_130_1180","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python temp indexer `pilot.helpers.cli`/term_proc_windows().","attributes":{"type":"defines","at":[87,0,91,61]}},{"key":"geid_130_1181","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python temp indexer `pilot.helpers.cli`/terminate_running_processes().","attributes":{"type":"defines","at":[82,0,84,71]}},{"key":"geid_130_1182","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python temp indexer `pilot.helpers.cli`/terminate_named_process().","attributes":{"type":"defines","at":[77,0,79,71]}},{"key":"geid_130_1183","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python temp indexer `pilot.helpers.cli`/run_command().","attributes":{"type":"defines","at":[34,0,74,18]}},{"key":"geid_130_1184","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python temp indexer `pilot.helpers.cli`/enqueue_output().","attributes":{"type":"defines","at":[26,0,31,15]}},{"key":"geid_130_1185","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python psutil 5.9.5 psutil/__init__:","attributes":{"type":"uses","at":[0,7,0,13]}},{"key":"geid_130_1186","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python python-stdlib 3.11 subprocess/__init__:","attributes":{"type":"uses","at":[1,7,1,17]}},{"key":"geid_130_1187","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[2,7,2,9]}},{"key":"geid_130_1188","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python python-stdlib 3.11 signal/__init__:","attributes":{"type":"uses","at":[3,7,3,13]}},{"key":"geid_130_1189","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python python-stdlib 3.11 threading/__init__:","attributes":{"type":"uses","at":[4,7,4,16]}},{"key":"geid_130_1190","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python python-stdlib 3.11 queue/__init__:","attributes":{"type":"uses","at":[5,7,5,12]}},{"key":"geid_130_1191","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python python-stdlib 3.11 time/__init__:","attributes":{"type":"uses","at":[6,7,6,11]}},{"key":"geid_130_1192","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python python-stdlib 3.11 platform/__init__:","attributes":{"type":"uses","at":[7,7,7,15]}},{"key":"geid_130_1193","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python python-stdlib 3.11 typing/__init__:","attributes":{"type":"uses","at":[8,5,8,11]}},{"key":"geid_130_1194","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python python-stdlib 3.11 typing/Dict.","attributes":{"type":"uses","at":[8,19,8,23]}},{"key":"geid_130_1195","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python python-stdlib 3.11 typing/Union.","attributes":{"type":"uses","at":[8,25,8,30]}},{"key":"geid_130_1196","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python temp indexer `pilot.logger.logger`/__init__:","attributes":{"type":"uses","at":[10,5,10,18]}},{"key":"geid_130_1197","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[10,26,10,32]}},{"key":"geid_130_1198","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/__init__:","attributes":{"type":"uses","at":[11,5,11,16]}},{"key":"geid_130_1199","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/color_yellow.","attributes":{"type":"uses","at":[11,24,11,36]}},{"key":"geid_130_1200","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/color_green.","attributes":{"type":"uses","at":[11,38,11,49]}},{"key":"geid_130_1201","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/color_red.","attributes":{"type":"uses","at":[11,51,11,60]}},{"key":"geid_130_1202","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/color_yellow_bold.","attributes":{"type":"uses","at":[11,62,11,79]}},{"key":"geid_130_1203","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/__init__:","attributes":{"type":"uses","at":[12,5,12,22]}},{"key":"geid_130_1204","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/get_saved_command_run().","attributes":{"type":"uses","at":[12,30,12,51]}},{"key":"geid_130_1205","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/save_command_run().","attributes":{"type":"uses","at":[12,53,12,69]}},{"key":"geid_130_1206","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python temp indexer `pilot.helpers.exceptions.toodeeprecursionerror`/__init__:","attributes":{"type":"uses","at":[13,5,13,45]}},{"key":"geid_130_1207","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python temp indexer `pilot.helpers.exceptions.toodeeprecursionerror`/TooDeepRecursionError#","attributes":{"type":"uses","at":[13,53,13,74]}},{"key":"geid_130_1208","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python temp indexer `pilot.helpers.exceptions.tokenlimiterror`/__init__:","attributes":{"type":"uses","at":[14,5,14,39]}},{"key":"geid_130_1209","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python temp indexer `pilot.helpers.exceptions.tokenlimiterror`/TokenLimitError#","attributes":{"type":"uses","at":[14,47,14,62]}},{"key":"geid_130_1210","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python temp indexer `pilot.helpers.exceptions.commandfinishedearly`/__init__:","attributes":{"type":"uses","at":[15,5,15,44]}},{"key":"geid_130_1211","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python temp indexer `pilot.helpers.exceptions.commandfinishedearly`/CommandFinishedEarly#","attributes":{"type":"uses","at":[15,52,15,72]}},{"key":"geid_130_1212","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python temp indexer `pilot.prompts.prompts`/__init__:","attributes":{"type":"uses","at":[16,5,16,20]}},{"key":"geid_130_1213","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python temp indexer `pilot.prompts.prompts`/ask_user().","attributes":{"type":"uses","at":[16,28,16,36]}},{"key":"geid_130_1214","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python temp indexer `pilot.const.code_execution`/__init__:","attributes":{"type":"uses","at":[17,5,17,25]}},{"key":"geid_130_1215","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python temp indexer `pilot.const.code_execution`/MIN_COMMAND_RUN_TIME.","attributes":{"type":"uses","at":[17,33,17,53]}},{"key":"geid_130_1216","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python temp indexer `pilot.const.code_execution`/MAX_COMMAND_RUN_TIME.","attributes":{"type":"uses","at":[17,55,17,75]}},{"key":"geid_130_1217","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python temp indexer `pilot.const.code_execution`/MAX_COMMAND_OUTPUT_LENGTH.","attributes":{"type":"uses","at":[17,77,17,102]}},{"key":"geid_130_1218","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python temp indexer `pilot.const.messages`/__init__:","attributes":{"type":"uses","at":[18,5,18,19]}},{"key":"geid_130_1219","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python temp indexer `pilot.const.messages`/AFFIRMATIVE_ANSWERS.","attributes":{"type":"uses","at":[18,27,18,46]}},{"key":"geid_130_1220","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python temp indexer `pilot.const.messages`/NEGATIVE_ANSWERS.","attributes":{"type":"uses","at":[18,48,18,64]}},{"key":"geid_130_1221","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python python-stdlib 3.11 typing/Dict.","attributes":{"type":"uses","at":[22,19,22,23]}},{"key":"geid_130_1222","source":"scip-python python temp indexer `pilot.helpers.cli`/enqueue_output().","target":"scip-python python temp indexer `pilot.helpers.cli`/interrupted.","attributes":{"type":"uses","at":[28,11,28,22]}},{"key":"geid_130_1223","source":"scip-python python temp indexer `pilot.helpers.cli`/run_command().","target":"scip-python python python-stdlib 3.11 subprocess/__init__:","attributes":{"type":"uses","at":[34,59,34,69]}},{"key":"geid_130_1224","source":"scip-python python temp indexer `pilot.helpers.cli`/run_command().","target":"scip-python python python-stdlib 3.11 subprocess/Popen#","attributes":{"type":"uses","at":[34,70,34,75]}},{"key":"geid_130_1225","source":"scip-python python temp indexer `pilot.helpers.cli`/run_command().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[47,4,47,10]}},{"key":"geid_130_1226","source":"scip-python python temp indexer `pilot.helpers.cli`/run_command().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[47,11,47,15]}},{"key":"geid_130_1227","source":"scip-python python temp indexer `pilot.helpers.cli`/run_command().","target":"scip-python python python-stdlib 3.11 platform/__init__:","attributes":{"type":"uses","at":[47,42,47,50]}},{"key":"geid_130_1228","source":"scip-python python temp indexer `pilot.helpers.cli`/run_command().","target":"scip-python python python-stdlib 3.11 platform/system().","attributes":{"type":"uses","at":[47,51,47,57]}},{"key":"geid_130_1229","source":"scip-python python temp indexer `pilot.helpers.cli`/run_command().","target":"scip-python python python-stdlib 3.11 platform/__init__:","attributes":{"type":"uses","at":[48,7,48,15]}},{"key":"geid_130_1230","source":"scip-python python temp indexer `pilot.helpers.cli`/run_command().","target":"scip-python python python-stdlib 3.11 platform/system().","attributes":{"type":"uses","at":[48,16,48,22]}},{"key":"geid_130_1231","source":"scip-python python temp indexer `pilot.helpers.cli`/run_command().","target":"scip-python python python-stdlib 3.11 subprocess/__init__:","attributes":{"type":"uses","at":[49,18,49,28]}},{"key":"geid_130_1232","source":"scip-python python temp indexer `pilot.helpers.cli`/run_command().","target":"scip-python python python-stdlib 3.11 subprocess/Popen#","attributes":{"type":"uses","at":[49,29,49,34]}},{"key":"geid_130_1233","source":"scip-python python temp indexer `pilot.helpers.cli`/run_command().","target":"scip-python python python-stdlib 3.11 subprocess/__init__:","attributes":{"type":"uses","at":[52,19,52,29]}},{"key":"geid_130_1234","source":"scip-python python temp indexer `pilot.helpers.cli`/run_command().","target":"scip-python python python-stdlib 3.11 subprocess/PIPE.PIPE.","attributes":{"type":"uses","at":[52,30,52,34]}},{"key":"geid_130_1235","source":"scip-python python temp indexer `pilot.helpers.cli`/run_command().","target":"scip-python python python-stdlib 3.11 subprocess/__init__:","attributes":{"type":"uses","at":[53,19,53,29]}},{"key":"geid_130_1236","source":"scip-python python temp indexer `pilot.helpers.cli`/run_command().","target":"scip-python python python-stdlib 3.11 subprocess/PIPE.PIPE.","attributes":{"type":"uses","at":[53,30,53,34]}},{"key":"geid_130_1237","source":"scip-python python temp indexer `pilot.helpers.cli`/run_command().","target":"scip-python python python-stdlib 3.11 subprocess/__init__:","attributes":{"type":"uses","at":[58,18,58,28]}},{"key":"geid_130_1238","source":"scip-python python temp indexer `pilot.helpers.cli`/run_command().","target":"scip-python python python-stdlib 3.11 subprocess/Popen#","attributes":{"type":"uses","at":[58,29,58,34]}},{"key":"geid_130_1239","source":"scip-python python temp indexer `pilot.helpers.cli`/run_command().","target":"scip-python python python-stdlib 3.11 subprocess/__init__:","attributes":{"type":"uses","at":[61,19,61,29]}},{"key":"geid_130_1240","source":"scip-python python temp indexer `pilot.helpers.cli`/run_command().","target":"scip-python python python-stdlib 3.11 subprocess/PIPE.PIPE.","attributes":{"type":"uses","at":[61,30,61,34]}},{"key":"geid_130_1241","source":"scip-python python temp indexer `pilot.helpers.cli`/run_command().","target":"scip-python python python-stdlib 3.11 subprocess/__init__:","attributes":{"type":"uses","at":[62,19,62,29]}},{"key":"geid_130_1242","source":"scip-python python temp indexer `pilot.helpers.cli`/run_command().","target":"scip-python python python-stdlib 3.11 subprocess/PIPE.PIPE.","attributes":{"type":"uses","at":[62,30,62,34]}},{"key":"geid_130_1243","source":"scip-python python temp indexer `pilot.helpers.cli`/run_command().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[64,23,64,25]}},{"key":"geid_130_1244","source":"scip-python python temp indexer `pilot.helpers.cli`/run_command().","target":"scip-python python python-stdlib 3.11 os/setsid().","attributes":{"type":"uses","at":[64,26,64,32]}},{"key":"geid_130_1245","source":"scip-python python temp indexer `pilot.helpers.cli`/run_command().","target":"scip-python python python-stdlib 3.11 threading/__init__:","attributes":{"type":"uses","at":[68,15,68,24]}},{"key":"geid_130_1246","source":"scip-python python temp indexer `pilot.helpers.cli`/run_command().","target":"scip-python python python-stdlib 3.11 threading/Thread#","attributes":{"type":"uses","at":[68,25,68,31]}},{"key":"geid_130_1247","source":"scip-python python temp indexer `pilot.helpers.cli`/run_command().","target":"scip-python python temp indexer `pilot.helpers.cli`/enqueue_output().","attributes":{"type":"uses","at":[68,39,68,53]}},{"key":"geid_130_1248","source":"scip-python python temp indexer `pilot.helpers.cli`/run_command().","target":"scip-python python python-stdlib 3.11 subprocess/Popen#stdout.","attributes":{"type":"uses","at":[68,69,68,75]}},{"key":"geid_130_1249","source":"scip-python python temp indexer `pilot.helpers.cli`/run_command().","target":"scip-python python python-stdlib 3.11 threading/__init__:","attributes":{"type":"uses","at":[69,15,69,24]}},{"key":"geid_130_1250","source":"scip-python python temp indexer `pilot.helpers.cli`/run_command().","target":"scip-python python python-stdlib 3.11 threading/Thread#","attributes":{"type":"uses","at":[69,25,69,31]}},{"key":"geid_130_1251","source":"scip-python python temp indexer `pilot.helpers.cli`/run_command().","target":"scip-python python temp indexer `pilot.helpers.cli`/enqueue_output().","attributes":{"type":"uses","at":[69,39,69,53]}},{"key":"geid_130_1252","source":"scip-python python temp indexer `pilot.helpers.cli`/run_command().","target":"scip-python python python-stdlib 3.11 subprocess/Popen#stderr.","attributes":{"type":"uses","at":[69,69,69,75]}},{"key":"geid_130_1253","source":"scip-python python temp indexer `pilot.helpers.cli`/run_command().","target":"scip-python python python-stdlib 3.11 threading/Thread#daemon.","attributes":{"type":"uses","at":[70,13,70,19]}},{"key":"geid_130_1254","source":"scip-python python temp indexer `pilot.helpers.cli`/run_command().","target":"scip-python python python-stdlib 3.11 threading/Thread#daemon.","attributes":{"type":"uses","at":[71,13,71,19]}},{"key":"geid_130_1255","source":"scip-python python temp indexer `pilot.helpers.cli`/run_command().","target":"scip-python python python-stdlib 3.11 threading/Thread#start().","attributes":{"type":"uses","at":[72,13,72,18]}},{"key":"geid_130_1256","source":"scip-python python temp indexer `pilot.helpers.cli`/run_command().","target":"scip-python python python-stdlib 3.11 threading/Thread#start().","attributes":{"type":"uses","at":[73,13,73,18]}},{"key":"geid_130_1257","source":"scip-python python temp indexer `pilot.helpers.cli`/terminate_named_process().","target":"scip-python python temp indexer `pilot.helpers.cli`/running_processes.running_processes.","attributes":{"type":"uses","at":[78,21,78,38]}},{"key":"geid_130_1258","source":"scip-python python temp indexer `pilot.helpers.cli`/terminate_named_process().","target":"scip-python python temp indexer `pilot.helpers.cli`/terminate_process().","attributes":{"type":"uses","at":[79,8,79,25]}},{"key":"geid_130_1259","source":"scip-python python temp indexer `pilot.helpers.cli`/terminate_named_process().","target":"scip-python python temp indexer `pilot.helpers.cli`/running_processes.running_processes.","attributes":{"type":"uses","at":[79,26,79,43]}},{"key":"geid_130_1260","source":"scip-python python temp indexer `pilot.helpers.cli`/terminate_running_processes().","target":"scip-python python temp indexer `pilot.helpers.cli`/running_processes.running_processes.","attributes":{"type":"uses","at":[83,27,83,44]}},{"key":"geid_130_1261","source":"scip-python python temp indexer `pilot.helpers.cli`/terminate_running_processes().","target":"scip-python python temp indexer `pilot.helpers.cli`/terminate_process().","attributes":{"type":"uses","at":[84,8,84,25]}},{"key":"geid_130_1262","source":"scip-python python temp indexer `pilot.helpers.cli`/terminate_running_processes().","target":"scip-python python temp indexer `pilot.helpers.cli`/running_processes.running_processes.","attributes":{"type":"uses","at":[84,26,84,43]}},{"key":"geid_130_1263","source":"scip-python python temp indexer `pilot.helpers.cli`/term_proc_windows().","target":"scip-python python python-stdlib 3.11 subprocess/__init__:","attributes":{"type":"uses","at":[89,8,89,18]}},{"key":"geid_130_1264","source":"scip-python python temp indexer `pilot.helpers.cli`/term_proc_windows().","target":"scip-python python python-stdlib 3.11 subprocess/run().","attributes":{"type":"uses","at":[89,19,89,22]}},{"key":"geid_130_1265","source":"scip-python python temp indexer `pilot.helpers.cli`/term_proc_windows().","target":"scip-python python python-stdlib 3.11 subprocess/__init__:","attributes":{"type":"uses","at":[90,11,90,21]}},{"key":"geid_130_1266","source":"scip-python python temp indexer `pilot.helpers.cli`/term_proc_windows().","target":"scip-python python python-stdlib 3.11 subprocess/CalledProcessError#","attributes":{"type":"uses","at":[90,22,90,40]}},{"key":"geid_130_1267","source":"scip-python python temp indexer `pilot.helpers.cli`/term_proc_windows().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[91,8,91,14]}},{"key":"geid_130_1268","source":"scip-python python temp indexer `pilot.helpers.cli`/term_proc_windows().","target":"scip-python python python-stdlib 3.11 logging/Logger#error().","attributes":{"type":"uses","at":[91,15,91,20]}},{"key":"geid_130_1269","source":"scip-python python temp indexer `pilot.helpers.cli`/term_proc_unix_like().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[96,8,96,10]}},{"key":"geid_130_1270","source":"scip-python python temp indexer `pilot.helpers.cli`/term_proc_unix_like().","target":"scip-python python python-stdlib 3.11 os/killpg().","attributes":{"type":"uses","at":[96,11,96,17]}},{"key":"geid_130_1271","source":"scip-python python temp indexer `pilot.helpers.cli`/term_proc_unix_like().","target":"scip-python python python-stdlib 3.11 signal/__init__:","attributes":{"type":"uses","at":[96,23,96,29]}},{"key":"geid_130_1272","source":"scip-python python temp indexer `pilot.helpers.cli`/term_proc_unix_like().","target":"scip-python python python-stdlib 3.11 signal/SIGKILL.","attributes":{"type":"uses","at":[96,30,96,37]}},{"key":"geid_130_1273","source":"scip-python python temp indexer `pilot.helpers.cli`/term_proc_unix_like().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[98,8,98,14]}},{"key":"geid_130_1274","source":"scip-python python temp indexer `pilot.helpers.cli`/term_proc_unix_like().","target":"scip-python python python-stdlib 3.11 logging/Logger#error().","attributes":{"type":"uses","at":[98,15,98,20]}},{"key":"geid_130_1275","source":"scip-python python temp indexer `pilot.helpers.cli`/is_process_running().","target":"scip-python python psutil 5.9.5 psutil/__init__:","attributes":{"type":"uses","at":[105,18,105,24]}},{"key":"geid_130_1276","source":"scip-python python temp indexer `pilot.helpers.cli`/is_process_running().","target":"scip-python python psutil 5.9.5 psutil/Process#","attributes":{"type":"uses","at":[105,25,105,32]}},{"key":"geid_130_1277","source":"scip-python python temp indexer `pilot.helpers.cli`/is_process_running().","target":"scip-python python psutil 5.9.5 psutil/Process#is_running().","attributes":{"type":"uses","at":[106,23,106,33]}},{"key":"geid_130_1278","source":"scip-python python temp indexer `pilot.helpers.cli`/is_process_running().","target":"scip-python python psutil 5.9.5 psutil/__init__:","attributes":{"type":"uses","at":[107,11,107,17]}},{"key":"geid_130_1279","source":"scip-python python temp indexer `pilot.helpers.cli`/is_process_running().","target":"scip-python python temp indexer `psutil._common`/NoSuchProcess#","attributes":{"type":"uses","at":[107,18,107,31]}},{"key":"geid_130_1280","source":"scip-python python temp indexer `pilot.helpers.cli`/terminate_process().","target":"scip-python python temp indexer `pilot.helpers.cli`/is_process_running().","attributes":{"type":"uses","at":[116,11,116,29]}},{"key":"geid_130_1281","source":"scip-python python temp indexer `pilot.helpers.cli`/terminate_process().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[117,8,117,14]}},{"key":"geid_130_1282","source":"scip-python python temp indexer `pilot.helpers.cli`/terminate_process().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[117,15,117,19]}},{"key":"geid_130_1283","source":"scip-python python temp indexer `pilot.helpers.cli`/terminate_process().","target":"scip-python python temp indexer `pilot.helpers.cli`/running_processes.running_processes.","attributes":{"type":"uses","at":[119,45,119,62]}},{"key":"geid_130_1284","source":"scip-python python temp indexer `pilot.helpers.cli`/terminate_process().","target":"scip-python python temp indexer `pilot.helpers.cli`/running_processes.running_processes.","attributes":{"type":"uses","at":[121,20,121,37]}},{"key":"geid_130_1285","source":"scip-python python temp indexer `pilot.helpers.cli`/terminate_process().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[124,4,124,10]}},{"key":"geid_130_1286","source":"scip-python python temp indexer `pilot.helpers.cli`/terminate_process().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[124,11,124,15]}},{"key":"geid_130_1287","source":"scip-python python temp indexer `pilot.helpers.cli`/terminate_process().","target":"scip-python python python-stdlib 3.11 platform/__init__:","attributes":{"type":"uses","at":[125,7,125,15]}},{"key":"geid_130_1288","source":"scip-python python temp indexer `pilot.helpers.cli`/terminate_process().","target":"scip-python python python-stdlib 3.11 platform/system().","attributes":{"type":"uses","at":[125,16,125,22]}},{"key":"geid_130_1289","source":"scip-python python temp indexer `pilot.helpers.cli`/terminate_process().","target":"scip-python python temp indexer `pilot.helpers.cli`/term_proc_windows().","attributes":{"type":"uses","at":[126,8,126,25]}},{"key":"geid_130_1290","source":"scip-python python temp indexer `pilot.helpers.cli`/terminate_process().","target":"scip-python python temp indexer `pilot.helpers.cli`/term_proc_unix_like().","attributes":{"type":"uses","at":[128,8,128,27]}},{"key":"geid_130_1291","source":"scip-python python temp indexer `pilot.helpers.cli`/terminate_process().","target":"scip-python python psutil 5.9.5 psutil/__init__:","attributes":{"type":"uses","at":[132,18,132,24]}},{"key":"geid_130_1292","source":"scip-python python temp indexer `pilot.helpers.cli`/terminate_process().","target":"scip-python python psutil 5.9.5 psutil/Process#","attributes":{"type":"uses","at":[132,25,132,32]}},{"key":"geid_130_1293","source":"scip-python python temp indexer `pilot.helpers.cli`/terminate_process().","target":"scip-python python psutil 5.9.5 psutil/Process#wait().","attributes":{"type":"uses","at":[133,16,133,20]}},{"key":"geid_130_1294","source":"scip-python python temp indexer `pilot.helpers.cli`/terminate_process().","target":"scip-python python psutil 5.9.5 psutil/__init__:","attributes":{"type":"uses","at":[134,11,134,17]}},{"key":"geid_130_1295","source":"scip-python python temp indexer `pilot.helpers.cli`/terminate_process().","target":"scip-python python temp indexer `psutil._common`/NoSuchProcess#","attributes":{"type":"uses","at":[134,18,134,31]}},{"key":"geid_130_1296","source":"scip-python python temp indexer `pilot.helpers.cli`/terminate_process().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[135,8,135,14]}},{"key":"geid_130_1297","source":"scip-python python temp indexer `pilot.helpers.cli`/terminate_process().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[135,15,135,19]}},{"key":"geid_130_1298","source":"scip-python python temp indexer `pilot.helpers.cli`/terminate_process().","target":"scip-python python psutil 5.9.5 psutil/__init__:","attributes":{"type":"uses","at":[136,11,136,17]}},{"key":"geid_130_1299","source":"scip-python python temp indexer `pilot.helpers.cli`/terminate_process().","target":"scip-python python temp indexer `psutil._common`/TimeoutExpired#","attributes":{"type":"uses","at":[136,18,136,32]}},{"key":"geid_130_1300","source":"scip-python python temp indexer `pilot.helpers.cli`/terminate_process().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[137,8,137,14]}},{"key":"geid_130_1301","source":"scip-python python temp indexer `pilot.helpers.cli`/terminate_process().","target":"scip-python python python-stdlib 3.11 logging/Logger#warning().","attributes":{"type":"uses","at":[137,15,137,22]}},{"key":"geid_130_1302","source":"scip-python python temp indexer `pilot.helpers.cli`/terminate_process().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[139,8,139,14]}},{"key":"geid_130_1303","source":"scip-python python temp indexer `pilot.helpers.cli`/terminate_process().","target":"scip-python python python-stdlib 3.11 logging/Logger#error().","attributes":{"type":"uses","at":[139,15,139,20]}},{"key":"geid_130_1304","source":"scip-python python temp indexer `pilot.helpers.cli`/terminate_process().","target":"scip-python python temp indexer `pilot.helpers.cli`/running_processes.running_processes.","attributes":{"type":"uses","at":[141,27,141,44]}},{"key":"geid_130_1305","source":"scip-python python temp indexer `pilot.helpers.cli`/terminate_process().","target":"scip-python python temp indexer `pilot.helpers.cli`/running_processes.running_processes.","attributes":{"type":"uses","at":[142,11,142,28]}},{"key":"geid_130_1306","source":"scip-python python temp indexer `pilot.helpers.cli`/terminate_process().","target":"scip-python python temp indexer `pilot.helpers.cli`/running_processes.running_processes.","attributes":{"type":"uses","at":[143,16,143,33]}},{"key":"geid_130_1307","source":"scip-python python temp indexer `pilot.helpers.cli`/read_queue_line().","target":"scip-python python python-stdlib 3.11 queue/__init__:","attributes":{"type":"uses","at":[149,11,149,16]}},{"key":"geid_130_1308","source":"scip-python python temp indexer `pilot.helpers.cli`/read_queue_line().","target":"scip-python python python-stdlib 3.11 queue/Empty#","attributes":{"type":"uses","at":[149,17,149,22]}},{"key":"geid_130_1309","source":"scip-python python temp indexer `pilot.helpers.cli`/read_queue_line().","target":"scip-python python temp indexer `pilot.utils.style`/color_green.","attributes":{"type":"uses","at":[153,14,153,25]}},{"key":"geid_130_1310","source":"scip-python python temp indexer `pilot.helpers.cli`/read_queue_line().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[154,8,154,14]}},{"key":"geid_130_1311","source":"scip-python python temp indexer `pilot.helpers.cli`/read_queue_line().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[154,15,154,19]}},{"key":"geid_130_1312","source":"scip-python python temp indexer `pilot.helpers.cli`/read_queue_line().","target":"scip-python python temp indexer `pilot.utils.style`/color_red.","attributes":{"type":"uses","at":[161,14,161,23]}},{"key":"geid_130_1313","source":"scip-python python temp indexer `pilot.helpers.cli`/read_queue_line().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[162,8,162,14]}},{"key":"geid_130_1314","source":"scip-python python temp indexer `pilot.helpers.cli`/read_queue_line().","target":"scip-python python python-stdlib 3.11 logging/Logger#error().","attributes":{"type":"uses","at":[162,15,162,20]}},{"key":"geid_130_1315","source":"scip-python python temp indexer `pilot.helpers.cli`/read_remaining_queue().","target":"scip-python python temp indexer `pilot.helpers.cli`/read_queue_line().","attributes":{"type":"uses","at":[170,18,170,33]}},{"key":"geid_130_1316","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python temp indexer `pilot.const.code_execution`/MIN_COMMAND_RUN_TIME.","attributes":{"type":"uses","at":[202,39,202,59]}},{"key":"geid_130_1317","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python temp indexer `pilot.const.code_execution`/MAX_COMMAND_RUN_TIME.","attributes":{"type":"uses","at":[202,62,202,82]}},{"key":"geid_130_1318","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python temp indexer `pilot.utils.style`/color_yellow_bold.","attributes":{"type":"uses","at":[205,14,205,31]}},{"key":"geid_130_1319","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python temp indexer `pilot.utils.style`/color_yellow_bold.","attributes":{"type":"uses","at":[206,50,206,67]}},{"key":"geid_130_1320","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[213,8,213,14]}},{"key":"geid_130_1321","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[213,15,213,19]}},{"key":"geid_130_1322","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python temp indexer `pilot.prompts.prompts`/ask_user().","attributes":{"type":"uses","at":[214,17,214,25]}},{"key":"geid_130_1323","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python temp indexer `pilot.const.messages`/NEGATIVE_ANSWERS.","attributes":{"type":"uses","at":[218,29,218,45]}},{"key":"geid_130_1324","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python temp indexer `pilot.const.messages`/AFFIRMATIVE_ANSWERS.","attributes":{"type":"uses","at":[220,35,220,54]}},{"key":"geid_130_1325","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python python-stdlib 3.11 platform/__init__:","attributes":{"type":"uses","at":[228,7,228,15]}},{"key":"geid_130_1326","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python python-stdlib 3.11 platform/system().","attributes":{"type":"uses","at":[228,16,228,22]}},{"key":"geid_130_1327","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python temp indexer `pilot.database.database`/get_saved_command_run().","attributes":{"type":"uses","at":[232,18,232,39]}},{"key":"geid_130_1328","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python temp indexer `pilot.utils.style`/color_yellow.","attributes":{"type":"uses","at":[235,14,235,26]}},{"key":"geid_130_1329","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python python-stdlib 3.11 queue/__init__:","attributes":{"type":"uses","at":[241,15,241,20]}},{"key":"geid_130_1330","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python python-stdlib 3.11 queue/Queue#","attributes":{"type":"uses","at":[241,21,241,26]}},{"key":"geid_130_1331","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python python-stdlib 3.11 queue/__init__:","attributes":{"type":"uses","at":[242,8,242,13]}},{"key":"geid_130_1332","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python python-stdlib 3.11 queue/Queue#","attributes":{"type":"uses","at":[242,14,242,19]}},{"key":"geid_130_1333","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python temp indexer `pilot.helpers.cli`/run_command().","attributes":{"type":"uses","at":[243,14,243,25]}},{"key":"geid_130_1334","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python temp indexer `pilot.helpers.cli`/terminate_named_process().","attributes":{"type":"uses","at":[246,8,246,31]}},{"key":"geid_130_1335","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python temp indexer `pilot.helpers.cli`/running_processes.running_processes.","attributes":{"type":"uses","at":[248,8,248,25]}},{"key":"geid_130_1336","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python python-stdlib 3.11 subprocess/Popen#pid.","attributes":{"type":"uses","at":[248,58,248,61]}},{"key":"geid_130_1337","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python python-stdlib 3.11 time/__init__:","attributes":{"type":"uses","at":[252,17,252,21]}},{"key":"geid_130_1338","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python python-stdlib 3.11 time/time().","attributes":{"type":"uses","at":[252,22,252,26]}},{"key":"geid_130_1339","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python python-stdlib 3.11 time/__init__:","attributes":{"type":"uses","at":[261,27,261,31]}},{"key":"geid_130_1340","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python python-stdlib 3.11 time/time().","attributes":{"type":"uses","at":[261,32,261,36]}},{"key":"geid_130_1341","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python python-stdlib 3.11 time/__init__:","attributes":{"type":"uses","at":[262,12,262,16]}},{"key":"geid_130_1342","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python python-stdlib 3.11 time/sleep().","attributes":{"type":"uses","at":[262,17,262,22]}},{"key":"geid_130_1343","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[270,20,270,26]}},{"key":"geid_130_1344","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[270,27,270,31]}},{"key":"geid_130_1345","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python python-stdlib 3.11 subprocess/Popen#pid.","attributes":{"type":"uses","at":[270,96,270,99]}},{"key":"geid_130_1346","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python temp indexer `pilot.helpers.cli`/read_queue_line().","attributes":{"type":"uses","at":[275,22,275,37]}},{"key":"geid_130_1347","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python temp indexer `pilot.helpers.cli`/read_queue_line().","attributes":{"type":"uses","at":[276,29,276,44]}},{"key":"geid_130_1348","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python python-stdlib 3.11 subprocess/Popen#poll().","attributes":{"type":"uses","at":[279,23,279,27]}},{"key":"geid_130_1349","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[280,16,280,22]}},{"key":"geid_130_1350","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[280,23,280,27]}},{"key":"geid_130_1351","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python python-stdlib 3.11 subprocess/Popen#returncode.","attributes":{"type":"uses","at":[280,75,280,85]}},{"key":"geid_130_1352","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python temp indexer `pilot.helpers.cli`/running_processes.running_processes.","attributes":{"type":"uses","at":[282,24,282,41]}},{"key":"geid_130_1353","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python temp indexer `pilot.helpers.cli`/read_remaining_queue().","attributes":{"type":"uses","at":[284,26,284,46]}},{"key":"geid_130_1354","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python temp indexer `pilot.helpers.cli`/read_remaining_queue().","attributes":{"type":"uses","at":[285,33,285,53]}},{"key":"geid_130_1355","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python temp indexer `pilot.helpers.exceptions.commandfinishedearly`/CommandFinishedEarly#","attributes":{"type":"uses","at":[288,45,288,65]}},{"key":"geid_130_1356","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[291,12,291,18]}},{"key":"geid_130_1357","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[291,19,291,23]}},{"key":"geid_130_1358","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[295,12,295,18]}},{"key":"geid_130_1359","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python python-stdlib 3.11 logging/Logger#warning().","attributes":{"type":"uses","at":[295,19,295,26]}},{"key":"geid_130_1360","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python temp indexer `pilot.helpers.exceptions.commandfinishedearly`/CommandFinishedEarly#","attributes":{"type":"uses","at":[297,27,297,47]}},{"key":"geid_130_1361","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[299,12,299,18]}},{"key":"geid_130_1362","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[299,19,299,23]}},{"key":"geid_130_1363","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python temp indexer `pilot.helpers.cli`/terminate_process().","attributes":{"type":"uses","at":[304,8,304,25]}},{"key":"geid_130_1364","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python python-stdlib 3.11 subprocess/Popen#pid.","attributes":{"type":"uses","at":[304,34,304,37]}},{"key":"geid_130_1365","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python python-stdlib 3.11 subprocess/Popen#poll().","attributes":{"type":"uses","at":[306,16,306,20]}},{"key":"geid_130_1366","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python python-stdlib 3.11 time/__init__:","attributes":{"type":"uses","at":[308,19,308,23]}},{"key":"geid_130_1367","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python python-stdlib 3.11 time/time().","attributes":{"type":"uses","at":[308,24,308,28]}},{"key":"geid_130_1368","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[309,4,309,10]}},{"key":"geid_130_1369","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[309,11,309,15]}},{"key":"geid_130_1370","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python temp indexer `pilot.const.code_execution`/MAX_COMMAND_OUTPUT_LENGTH.","attributes":{"type":"uses","at":[314,62,314,87]}},{"key":"geid_130_1371","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python temp indexer `pilot.const.code_execution`/MAX_COMMAND_OUTPUT_LENGTH.","attributes":{"type":"uses","at":[315,51,315,76]}},{"key":"geid_130_1372","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python temp indexer `pilot.database.database`/save_command_run().","attributes":{"type":"uses","at":[317,4,317,20]}},{"key":"geid_130_1373","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python python-stdlib 3.11 subprocess/Popen#returncode.","attributes":{"type":"uses","at":[317,85,317,95]}},{"key":"geid_130_1374","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","target":"scip-python python python-stdlib 3.11 subprocess/Popen#returncode.","attributes":{"type":"uses","at":[319,57,319,67]}},{"key":"geid_130_1375","source":"scip-python python temp indexer `pilot.helpers.cli`/check_if_command_successful().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[324,8,324,14]}},{"key":"geid_130_1376","source":"scip-python python temp indexer `pilot.helpers.cli`/check_if_command_successful().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[324,15,324,19]}},{"key":"geid_130_1377","source":"scip-python python temp indexer `pilot.helpers.cli`/check_if_command_successful().","target":"scip-python python temp indexer `pilot.utils.style`/color_red.","attributes":{"type":"uses","at":[327,18,327,27]}},{"key":"geid_130_1378","source":"scip-python python temp indexer `pilot.helpers.cli`/check_if_command_successful().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[338,12,338,18]}},{"key":"geid_130_1379","source":"scip-python python temp indexer `pilot.helpers.cli`/check_if_command_successful().","target":"scip-python python python-stdlib 3.11 logging/Logger#debug().","attributes":{"type":"uses","at":[338,19,338,24]}},{"key":"geid_130_1380","source":"scip-python python temp indexer `pilot.helpers.cli`/build_directory_tree().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[358,7,358,9]}},{"key":"geid_130_1381","source":"scip-python python temp indexer `pilot.helpers.cli`/build_directory_tree().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[358,10,358,14]}},{"key":"geid_130_1382","source":"scip-python python temp indexer `pilot.helpers.cli`/build_directory_tree().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[358,15,358,20]}},{"key":"geid_130_1383","source":"scip-python python temp indexer `pilot.helpers.cli`/build_directory_tree().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[359,19,359,21]}},{"key":"geid_130_1384","source":"scip-python python temp indexer `pilot.helpers.cli`/build_directory_tree().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[359,22,359,26]}},{"key":"geid_130_1385","source":"scip-python python temp indexer `pilot.helpers.cli`/build_directory_tree().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[359,27,359,35]}},{"key":"geid_130_1386","source":"scip-python python temp indexer `pilot.helpers.cli`/build_directory_tree().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[366,16,366,18]}},{"key":"geid_130_1387","source":"scip-python python temp indexer `pilot.helpers.cli`/build_directory_tree().","target":"scip-python python python-stdlib 3.11 os/listdir().","attributes":{"type":"uses","at":[366,19,366,26]}},{"key":"geid_130_1388","source":"scip-python python temp indexer `pilot.helpers.cli`/build_directory_tree().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[367,42,367,44]}},{"key":"geid_130_1389","source":"scip-python python temp indexer `pilot.helpers.cli`/build_directory_tree().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[367,45,367,49]}},{"key":"geid_130_1390","source":"scip-python python temp indexer `pilot.helpers.cli`/build_directory_tree().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[367,50,367,55]}},{"key":"geid_130_1391","source":"scip-python python temp indexer `pilot.helpers.cli`/build_directory_tree().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[367,56,367,58]}},{"key":"geid_130_1392","source":"scip-python python temp indexer `pilot.helpers.cli`/build_directory_tree().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[367,59,367,63]}},{"key":"geid_130_1393","source":"scip-python python temp indexer `pilot.helpers.cli`/build_directory_tree().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[367,64,367,68]}},{"key":"geid_130_1394","source":"scip-python python temp indexer `pilot.helpers.cli`/build_directory_tree().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[368,43,368,45]}},{"key":"geid_130_1395","source":"scip-python python temp indexer `pilot.helpers.cli`/build_directory_tree().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[368,46,368,50]}},{"key":"geid_130_1396","source":"scip-python python temp indexer `pilot.helpers.cli`/build_directory_tree().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[368,51,368,57]}},{"key":"geid_130_1397","source":"scip-python python temp indexer `pilot.helpers.cli`/build_directory_tree().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[368,58,368,60]}},{"key":"geid_130_1398","source":"scip-python python temp indexer `pilot.helpers.cli`/build_directory_tree().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[368,61,368,65]}},{"key":"geid_130_1399","source":"scip-python python temp indexer `pilot.helpers.cli`/build_directory_tree().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[368,66,368,70]}},{"key":"geid_130_1400","source":"scip-python python temp indexer `pilot.helpers.cli`/build_directory_tree().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[375,28,375,30]}},{"key":"geid_130_1401","source":"scip-python python temp indexer `pilot.helpers.cli`/build_directory_tree().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[375,31,375,35]}},{"key":"geid_130_1402","source":"scip-python python temp indexer `pilot.helpers.cli`/build_directory_tree().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[375,36,375,40]}},{"key":"geid_130_1403","source":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","target":"scip-python python temp indexer `pilot.helpers.cli`/build_directory_tree().","attributes":{"type":"uses","at":[376,26,376,46]}},{"key":"geid_130_1404","source":"scip-python python temp indexer `pilot.helpers.cli`/res_for_build_directory_tree().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[390,25,390,27]}},{"key":"geid_130_1405","source":"scip-python python temp indexer `pilot.helpers.cli`/res_for_build_directory_tree().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[390,28,390,32]}},{"key":"geid_130_1406","source":"scip-python python temp indexer `pilot.helpers.cli`/res_for_build_directory_tree().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[390,33,390,41]}},{"key":"geid_130_1407","source":"scip-python python temp indexer `pilot.helpers.cli`/res_for_build_directory_tree().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[390,80,390,82]}},{"key":"geid_130_1408","source":"scip-python python temp indexer `pilot.helpers.cli`/res_for_build_directory_tree().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[390,83,390,87]}},{"key":"geid_130_1409","source":"scip-python python temp indexer `pilot.helpers.cli`/res_for_build_directory_tree().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[390,88,390,96]}},{"key":"geid_130_1410","source":"scip-python python temp indexer `pilot.helpers.cli`/build_directory_tree_with_descriptions().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[404,7,404,9]}},{"key":"geid_130_1411","source":"scip-python python temp indexer `pilot.helpers.cli`/build_directory_tree_with_descriptions().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[404,10,404,14]}},{"key":"geid_130_1412","source":"scip-python python temp indexer `pilot.helpers.cli`/build_directory_tree_with_descriptions().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[404,15,404,23]}},{"key":"geid_130_1413","source":"scip-python python temp indexer `pilot.helpers.cli`/build_directory_tree_with_descriptions().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[409,32,409,34]}},{"key":"geid_130_1414","source":"scip-python python temp indexer `pilot.helpers.cli`/build_directory_tree_with_descriptions().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[409,35,409,39]}},{"key":"geid_130_1415","source":"scip-python python temp indexer `pilot.helpers.cli`/build_directory_tree_with_descriptions().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[409,40,409,48]}},{"key":"geid_130_1416","source":"scip-python python temp indexer `pilot.helpers.cli`/build_directory_tree_with_descriptions().","target":"scip-python python temp indexer `pilot.helpers.cli`/res_for_build_directory_tree().","attributes":{"type":"uses","at":[409,57,409,85]}},{"key":"geid_130_1417","source":"scip-python python temp indexer `pilot.helpers.cli`/build_directory_tree_with_descriptions().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[410,7,410,9]}},{"key":"geid_130_1418","source":"scip-python python temp indexer `pilot.helpers.cli`/build_directory_tree_with_descriptions().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[410,10,410,14]}},{"key":"geid_130_1419","source":"scip-python python temp indexer `pilot.helpers.cli`/build_directory_tree_with_descriptions().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[410,15,410,20]}},{"key":"geid_130_1420","source":"scip-python python temp indexer `pilot.helpers.cli`/build_directory_tree_with_descriptions().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[412,16,412,18]}},{"key":"geid_130_1421","source":"scip-python python temp indexer `pilot.helpers.cli`/build_directory_tree_with_descriptions().","target":"scip-python python python-stdlib 3.11 os/listdir().","attributes":{"type":"uses","at":[412,19,412,26]}},{"key":"geid_130_1422","source":"scip-python python temp indexer `pilot.helpers.cli`/build_directory_tree_with_descriptions().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[414,24,414,26]}},{"key":"geid_130_1423","source":"scip-python python temp indexer `pilot.helpers.cli`/build_directory_tree_with_descriptions().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[414,27,414,31]}},{"key":"geid_130_1424","source":"scip-python python temp indexer `pilot.helpers.cli`/build_directory_tree_with_descriptions().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[414,32,414,36]}},{"key":"geid_130_1425","source":"scip-python python temp indexer `pilot.helpers.cli`/build_directory_tree_with_descriptions().","target":"scip-python python temp indexer `pilot.helpers.cli`/build_directory_tree().","attributes":{"type":"uses","at":[415,22,415,42]}},{"key":"geid_130_1426","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command_and_check_cli_response().","target":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","attributes":{"type":"uses","at":[438,40,438,55]}},{"key":"geid_130_1427","source":"scip-python python temp indexer `pilot.helpers.cli`/execute_command_and_check_cli_response().","target":"scip-python python temp indexer `pilot.helpers.cli`/check_if_command_successful().","attributes":{"type":"uses","at":[443,15,443,42]}},{"key":"geid_130_1428","source":"scip-python python temp indexer `pilot.helpers.cli`/run_command_until_success().","target":"scip-python python python-stdlib 3.11 typing/Union.","attributes":{"type":"uses","at":[448,39,448,44]}},{"key":"geid_130_1429","source":"scip-python python temp indexer `pilot.helpers.cli`/run_command_until_success().","target":"scip-python python python-stdlib 3.11 typing/Union.","attributes":{"type":"uses","at":[449,42,449,47]}},{"key":"geid_130_1430","source":"scip-python python temp indexer `pilot.helpers.cli`/run_command_until_success().","target":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","attributes":{"type":"uses","at":[478,40,478,55]}},{"key":"geid_130_1431","source":"scip-python python temp indexer `pilot.helpers.cli`/run_command_until_success().","target":"scip-python python temp indexer `pilot.helpers.cli`/check_if_command_successful().","attributes":{"type":"uses","at":[494,15,494,42]}},{"key":"geid_130_1432","source":"scip-python python temp indexer `pilot.helpers.cli`/run_command_until_success().","target":"scip-python python temp indexer `pilot.utils.style`/color_red.","attributes":{"type":"uses","at":[498,14,498,23]}},{"key":"geid_130_1433","source":"scip-python python temp indexer `pilot.helpers.cli`/run_command_until_success().","target":"scip-python python temp indexer `pilot.utils.style`/color_red.","attributes":{"type":"uses","at":[500,14,500,23]}},{"key":"geid_130_1434","source":"scip-python python temp indexer `pilot.helpers.cli`/run_command_until_success().","target":"scip-python python temp indexer `pilot.helpers.exceptions.toodeeprecursionerror`/TooDeepRecursionError#","attributes":{"type":"uses","at":[515,19,515,40]}},{"key":"geid_130_1435","source":"scip-python python temp indexer `pilot.helpers.cli`/run_command_until_success().","target":"scip-python python temp indexer `pilot.helpers.exceptions.toodeeprecursionerror`/TooDeepRecursionError#","attributes":{"type":"uses","at":[517,22,517,43]}},{"key":"geid_130_1436","source":"scip-python python temp indexer `pilot.helpers.cli`/run_command_until_success().","target":"scip-python python temp indexer `pilot.helpers.exceptions.tokenlimiterror`/TokenLimitError#","attributes":{"type":"uses","at":[518,19,518,34]}},{"key":"geid_130_1437","source":"scip-python python temp indexer `pilot.helpers.files`/__init__:","target":"scip-python python temp indexer `pilot.helpers.files`/clear_directory().","attributes":{"type":"defines","at":[107,0,133,37]}},{"key":"geid_130_1438","source":"scip-python python temp indexer `pilot.helpers.files`/__init__:","target":"scip-python python temp indexer `pilot.helpers.files`/get_directory_contents().","attributes":{"type":"defines","at":[75,0,104,23]}},{"key":"geid_130_1439","source":"scip-python python temp indexer `pilot.helpers.files`/__init__:","target":"scip-python python temp indexer `pilot.helpers.files`/get_file_contents().","attributes":{"type":"defines","at":[34,0,72,5]}},{"key":"geid_130_1440","source":"scip-python python temp indexer `pilot.helpers.files`/__init__:","target":"scip-python python temp indexer `pilot.helpers.files`/update_file().","attributes":{"type":"defines","at":[7,0,31,50]}},{"key":"geid_130_1441","source":"scip-python python temp indexer `pilot.helpers.files`/__init__:","target":"scip-python python python-stdlib 3.11 pathlib/__init__:","attributes":{"type":"uses","at":[0,5,0,12]}},{"key":"geid_130_1442","source":"scip-python python temp indexer `pilot.helpers.files`/__init__:","target":"scip-python python python-stdlib 3.11 pathlib/Path#","attributes":{"type":"uses","at":[0,20,0,24]}},{"key":"geid_130_1443","source":"scip-python python temp indexer `pilot.helpers.files`/__init__:","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[1,7,1,9]}},{"key":"geid_130_1444","source":"scip-python python temp indexer `pilot.helpers.files`/__init__:","target":"scip-python python python-stdlib 3.11 typing/__init__:","attributes":{"type":"uses","at":[2,5,2,11]}},{"key":"geid_130_1445","source":"scip-python python temp indexer `pilot.helpers.files`/__init__:","target":"scip-python python python-stdlib 3.11 typing/Optional.","attributes":{"type":"uses","at":[2,19,2,27]}},{"key":"geid_130_1446","source":"scip-python python temp indexer `pilot.helpers.files`/__init__:","target":"scip-python python python-stdlib 3.11 typing/Union.","attributes":{"type":"uses","at":[2,29,2,34]}},{"key":"geid_130_1447","source":"scip-python python temp indexer `pilot.helpers.files`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/__init__:","attributes":{"type":"uses","at":[4,5,4,16]}},{"key":"geid_130_1448","source":"scip-python python temp indexer `pilot.helpers.files`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/color_green.","attributes":{"type":"uses","at":[4,24,4,35]}},{"key":"geid_130_1449","source":"scip-python python temp indexer `pilot.helpers.files`/update_file().","target":"scip-python python python-stdlib 3.11 typing/Union.","attributes":{"type":"uses","at":[7,40,7,45]}},{"key":"geid_130_1450","source":"scip-python python temp indexer `pilot.helpers.files`/update_file().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[19,4,19,6]}},{"key":"geid_130_1451","source":"scip-python python temp indexer `pilot.helpers.files`/update_file().","target":"scip-python python python-stdlib 3.11 os/makedirs().","attributes":{"type":"uses","at":[19,7,19,15]}},{"key":"geid_130_1452","source":"scip-python python temp indexer `pilot.helpers.files`/update_file().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[19,16,19,18]}},{"key":"geid_130_1453","source":"scip-python python temp indexer `pilot.helpers.files`/update_file().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[19,19,19,23]}},{"key":"geid_130_1454","source":"scip-python python temp indexer `pilot.helpers.files`/update_file().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[19,24,19,31]}},{"key":"geid_130_1455","source":"scip-python python temp indexer `pilot.helpers.files`/update_file().","target":"scip-python python python-stdlib 3.11 typing/IO#write().","attributes":{"type":"uses","at":[29,13,29,18]}},{"key":"geid_130_1456","source":"scip-python python temp indexer `pilot.helpers.files`/update_file().","target":"scip-python python temp indexer `pilot.utils.style`/color_green.","attributes":{"type":"uses","at":[31,14,31,25]}},{"key":"geid_130_1457","source":"scip-python python temp indexer `pilot.helpers.files`/get_file_contents().","target":"scip-python python python-stdlib 3.11 typing/Union.","attributes":{"type":"uses","at":[36,15,36,20]}},{"key":"geid_130_1458","source":"scip-python python temp indexer `pilot.helpers.files`/get_file_contents().","target":"scip-python python python-stdlib 3.11 io/TextIOBase#read().","attributes":{"type":"uses","at":[54,57,54,61]}},{"key":"geid_130_1459","source":"scip-python python temp indexer `pilot.helpers.files`/get_file_contents().","target":"scip-python python python-stdlib 3.11 io/BufferedIOBase#read().","attributes":{"type":"uses","at":[57,40,57,44]}},{"key":"geid_130_1460","source":"scip-python python temp indexer `pilot.helpers.files`/get_file_contents().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[61,16,61,18]}},{"key":"geid_130_1461","source":"scip-python python temp indexer `pilot.helpers.files`/get_file_contents().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[61,19,61,23]}},{"key":"geid_130_1462","source":"scip-python python temp indexer `pilot.helpers.files`/get_file_contents().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[61,24,61,32]}},{"key":"geid_130_1463","source":"scip-python python temp indexer `pilot.helpers.files`/get_file_contents().","target":"scip-python python python-stdlib 3.11 pathlib/Path#","attributes":{"type":"uses","at":[62,24,62,28]}},{"key":"geid_130_1464","source":"scip-python python temp indexer `pilot.helpers.files`/get_file_contents().","target":"scip-python python python-stdlib 3.11 pathlib/PurePath#parent().","attributes":{"type":"uses","at":[62,35,62,41]}},{"key":"geid_130_1465","source":"scip-python python temp indexer `pilot.helpers.files`/get_file_contents().","target":"scip-python python python-stdlib 3.11 pathlib/PurePath#relative_to().","attributes":{"type":"uses","at":[62,42,62,53]}},{"key":"geid_130_1466","source":"scip-python python temp indexer `pilot.helpers.files`/get_directory_contents().","target":"scip-python python python-stdlib 3.11 typing/Union.","attributes":{"type":"uses","at":[77,20,77,25]}},{"key":"geid_130_1467","source":"scip-python python temp indexer `pilot.helpers.files`/get_directory_contents().","target":"scip-python python python-stdlib 3.11 typing/Optional.","attributes":{"type":"uses","at":[76,28,76,36]}},{"key":"geid_130_1468","source":"scip-python python temp indexer `pilot.helpers.files`/get_directory_contents().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[94,30,94,32]}},{"key":"geid_130_1469","source":"scip-python python temp indexer `pilot.helpers.files`/get_directory_contents().","target":"scip-python python python-stdlib 3.11 os/walk().","attributes":{"type":"uses","at":[94,33,94,37]}},{"key":"geid_130_1470","source":"scip-python python temp indexer `pilot.helpers.files`/get_directory_contents().","target":"scip-python python temp indexer `pilot.helpers.files`/get_file_contents().","attributes":{"type":"uses","at":[102,32,102,49]}},{"key":"geid_130_1471","source":"scip-python python temp indexer `pilot.helpers.files`/get_directory_contents().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[102,50,102,52]}},{"key":"geid_130_1472","source":"scip-python python temp indexer `pilot.helpers.files`/get_directory_contents().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[102,53,102,57]}},{"key":"geid_130_1473","source":"scip-python python temp indexer `pilot.helpers.files`/get_directory_contents().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[102,58,102,62]}},{"key":"geid_130_1474","source":"scip-python python temp indexer `pilot.helpers.files`/clear_directory().","target":"scip-python python python-stdlib 3.11 typing/Optional.","attributes":{"type":"uses","at":[107,44,107,52]}},{"key":"geid_130_1475","source":"scip-python python temp indexer `pilot.helpers.files`/clear_directory().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[118,30,118,32]}},{"key":"geid_130_1476","source":"scip-python python temp indexer `pilot.helpers.files`/clear_directory().","target":"scip-python python python-stdlib 3.11 os/walk().","attributes":{"type":"uses","at":[118,33,118,37]}},{"key":"geid_130_1477","source":"scip-python python temp indexer `pilot.helpers.files`/clear_directory().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[123,33,123,35]}},{"key":"geid_130_1478","source":"scip-python python temp indexer `pilot.helpers.files`/clear_directory().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[123,36,123,40]}},{"key":"geid_130_1479","source":"scip-python python temp indexer `pilot.helpers.files`/clear_directory().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[123,41,123,45]}},{"key":"geid_130_1480","source":"scip-python python temp indexer `pilot.helpers.files`/clear_directory().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[126,19,126,21]}},{"key":"geid_130_1481","source":"scip-python python temp indexer `pilot.helpers.files`/clear_directory().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[126,22,126,26]}},{"key":"geid_130_1482","source":"scip-python python temp indexer `pilot.helpers.files`/clear_directory().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[126,27,126,31]}},{"key":"geid_130_1483","source":"scip-python python temp indexer `pilot.helpers.files`/clear_directory().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[127,12,127,14]}},{"key":"geid_130_1484","source":"scip-python python temp indexer `pilot.helpers.files`/clear_directory().","target":"scip-python python python-stdlib 3.11 os/remove().","attributes":{"type":"uses","at":[127,15,127,21]}},{"key":"geid_130_1485","source":"scip-python python temp indexer `pilot.helpers.files`/clear_directory().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[131,26,131,28]}},{"key":"geid_130_1486","source":"scip-python python temp indexer `pilot.helpers.files`/clear_directory().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[131,29,131,33]}},{"key":"geid_130_1487","source":"scip-python python temp indexer `pilot.helpers.files`/clear_directory().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[131,34,131,38]}},{"key":"geid_130_1488","source":"scip-python python temp indexer `pilot.helpers.files`/clear_directory().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[132,19,132,21]}},{"key":"geid_130_1489","source":"scip-python python temp indexer `pilot.helpers.files`/clear_directory().","target":"scip-python python python-stdlib 3.11 os/listdir().","attributes":{"type":"uses","at":[132,22,132,29]}},{"key":"geid_130_1490","source":"scip-python python temp indexer `pilot.helpers.files`/clear_directory().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[133,16,133,18]}},{"key":"geid_130_1491","source":"scip-python python temp indexer `pilot.helpers.files`/clear_directory().","target":"scip-python python python-stdlib 3.11 os/rmdir().","attributes":{"type":"uses","at":[133,19,133,24]}},{"key":"geid_130_1492","source":"scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#","target":"scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#send().","attributes":{"type":"defines","at":[37,4,41,60]}},{"key":"geid_130_1493","source":"scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#","target":"scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#listen().","attributes":{"type":"defines","at":[24,4,35,41]}},{"key":"geid_130_1494","source":"scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#","target":"scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#handle_request().","attributes":{"type":"defines","at":[20,4,22,30]}},{"key":"geid_130_1495","source":"scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#","target":"scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#__init__().","attributes":{"type":"defines","at":[8,4,18,83]}},{"key":"geid_130_1496","source":"scip-python python temp indexer `pilot.helpers.ipc`/__init__:","target":"scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#","attributes":{"type":"defines","at":[7,0,41,60]}},{"key":"geid_130_1497","source":"scip-python python temp indexer `pilot.helpers.ipc`/__init__:","target":"scip-python python python-stdlib 3.11 socket/__init__:","attributes":{"type":"uses","at":[1,7,1,13]}},{"key":"geid_130_1498","source":"scip-python python temp indexer `pilot.helpers.ipc`/__init__:","target":"scip-python python python-stdlib 3.11 json/__init__:","attributes":{"type":"uses","at":[2,7,2,11]}},{"key":"geid_130_1499","source":"scip-python python temp indexer `pilot.helpers.ipc`/__init__:","target":"scip-python python python-stdlib 3.11 time/__init__:","attributes":{"type":"uses","at":[3,7,3,11]}},{"key":"geid_130_1500","source":"scip-python python temp indexer `pilot.helpers.ipc`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/__init__:","attributes":{"type":"uses","at":[5,5,5,16]}},{"key":"geid_130_1501","source":"scip-python python temp indexer `pilot.helpers.ipc`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/json_serial().","attributes":{"type":"uses","at":[5,24,5,35]}},{"key":"geid_130_1502","source":"scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#__init__().","target":"scip-python python python-stdlib 3.11 socket/__init__:","attributes":{"type":"uses","at":[10,17,10,23]}},{"key":"geid_130_1503","source":"scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#__init__().","target":"scip-python python python-stdlib 3.11 socket/socket#","attributes":{"type":"uses","at":[10,24,10,30]}},{"key":"geid_130_1504","source":"scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#__init__().","target":"scip-python python python-stdlib 3.11 socket/__init__:","attributes":{"type":"uses","at":[10,31,10,37]}},{"key":"geid_130_1505","source":"scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#__init__().","target":"scip-python python python-stdlib 3.11 socket/AF_INET.","attributes":{"type":"uses","at":[10,38,10,45]}},{"key":"geid_130_1506","source":"scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#__init__().","target":"scip-python python python-stdlib 3.11 socket/__init__:","attributes":{"type":"uses","at":[10,47,10,53]}},{"key":"geid_130_1507","source":"scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#__init__().","target":"scip-python python python-stdlib 3.11 socket/SOCK_STREAM.","attributes":{"type":"uses","at":[10,54,10,65]}},{"key":"geid_130_1508","source":"scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#__init__().","target":"scip-python python python-stdlib 3.11 _socket/socket#connect().","attributes":{"type":"uses","at":[13,19,13,26]}},{"key":"geid_130_1509","source":"scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#__init__().","target":"scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#client.","attributes":{"type":"uses","at":[17,17,17,23]}},{"key":"geid_130_1510","source":"scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#listen().","target":"scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#client.","attributes":{"type":"uses","at":[25,16,25,22]}},{"key":"geid_130_1511","source":"scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#listen().","target":"scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#client.","attributes":{"type":"uses","at":[30,24,30,30]}},{"key":"geid_130_1512","source":"scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#listen().","target":"scip-python python python-stdlib 3.11 _socket/socket#recv().","attributes":{"type":"uses","at":[30,31,30,35]}},{"key":"geid_130_1513","source":"scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#listen().","target":"scip-python python python-stdlib 3.11 json/__init__:","attributes":{"type":"uses","at":[31,22,31,26]}},{"key":"geid_130_1514","source":"scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#listen().","target":"scip-python python python-stdlib 3.11 json/loads().","attributes":{"type":"uses","at":[31,27,31,32]}},{"key":"geid_130_1515","source":"scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#send().","target":"scip-python python python-stdlib 3.11 json/__init__:","attributes":{"type":"uses","at":[38,26,38,30]}},{"key":"geid_130_1516","source":"scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#send().","target":"scip-python python python-stdlib 3.11 json/dumps().","attributes":{"type":"uses","at":[38,31,38,36]}},{"key":"geid_130_1517","source":"scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#send().","target":"scip-python python temp indexer `pilot.utils.utils`/json_serial().","attributes":{"type":"uses","at":[38,51,38,62]}},{"key":"geid_130_1518","source":"scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#send().","target":"scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#client.","attributes":{"type":"uses","at":[40,13,40,19]}},{"key":"geid_130_1519","source":"scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#send().","target":"scip-python python python-stdlib 3.11 _socket/socket#sendall().","attributes":{"type":"uses","at":[40,20,40,27]}},{"key":"geid_130_1520","source":"scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#send().","target":"scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#client.","attributes":{"type":"uses","at":[41,13,41,19]}},{"key":"geid_130_1521","source":"scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#send().","target":"scip-python python python-stdlib 3.11 _socket/socket#sendall().","attributes":{"type":"uses","at":[41,20,41,27]}},{"key":"geid_130_1522","source":"scip-python python temp indexer `pilot.helpers.test_agentconvo`/__init__:","target":"scip-python python python-stdlib 3.11 `os.path`/__init__:","attributes":{"type":"uses","at":[1,7,1,14]}},{"key":"geid_130_1523","source":"scip-python python temp indexer `pilot.helpers.test_agentconvo`/__init__:","target":"scip-python python python-dotenv 1.0.0 dotenv/__init__:","attributes":{"type":"uses","at":[2,5,2,11]}},{"key":"geid_130_1524","source":"scip-python python temp indexer `pilot.helpers.test_agentconvo`/__init__:","target":"scip-python python python-dotenv 1.0.0 `dotenv.main`/load_dotenv().","attributes":{"type":"uses","at":[2,19,2,30]}},{"key":"geid_130_1525","source":"scip-python python temp indexer `pilot.helpers.test_agentconvo`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/__init__:","attributes":{"type":"uses","at":[3,5,3,22]}},{"key":"geid_130_1526","source":"scip-python python temp indexer `pilot.helpers.test_agentconvo`/__init__:","target":"scip-python python temp indexer `pilot.database.models.components.base_models`/database.","attributes":{"type":"uses","at":[3,30,3,38]}},{"key":"geid_130_1527","source":"scip-python python temp indexer `pilot.helpers.test_agentconvo`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/__init__:","attributes":{"type":"uses","at":[4,5,4,25]}},{"key":"geid_130_1528","source":"scip-python python temp indexer `pilot.helpers.test_agentconvo`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/IMPLEMENT_TASK.","attributes":{"type":"uses","at":[4,33,4,47]}},{"key":"geid_130_1529","source":"scip-python python temp indexer `pilot.helpers.test_agentconvo`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","attributes":{"type":"uses","at":[5,5,5,29]}},{"key":"geid_130_1530","source":"scip-python python temp indexer `pilot.helpers.test_agentconvo`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#","attributes":{"type":"uses","at":[5,37,5,46]}},{"key":"geid_130_1531","source":"scip-python python temp indexer `pilot.helpers.test_agentconvo`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/__init__:","attributes":{"type":"uses","at":[6,5,6,23]}},{"key":"geid_130_1532","source":"scip-python python temp indexer `pilot.helpers.test_agentconvo`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","attributes":{"type":"uses","at":[6,31,6,41]}},{"key":"geid_130_1533","source":"scip-python python temp indexer `pilot.helpers.test_agentconvo`/__init__:","target":"scip-python python temp indexer `pilot.utils.custom_print`/__init__:","attributes":{"type":"uses","at":[7,5,7,23]}},{"key":"geid_130_1534","source":"scip-python python temp indexer `pilot.helpers.test_agentconvo`/__init__:","target":"scip-python python temp indexer `pilot.utils.custom_print`/get_custom_print().","attributes":{"type":"uses","at":[7,31,7,47]}},{"key":"geid_130_1535","source":"scip-python python temp indexer `pilot.helpers.test_agentconvo`/__init__:","target":"scip-python python temp indexer `pilot.helpers.test_project`/__init__:","attributes":{"type":"uses","at":[8,5,8,18]}},{"key":"geid_130_1536","source":"scip-python python temp indexer `pilot.helpers.test_agentconvo`/__init__:","target":"scip-python python temp indexer `pilot.helpers.test_project`/create_project().","attributes":{"type":"uses","at":[8,26,8,40]}},{"key":"geid_130_1537","source":"scip-python python temp indexer `pilot.helpers.test_agentconvo`/__init__:","target":"scip-python python python-dotenv 1.0.0 `dotenv.main`/load_dotenv().","attributes":{"type":"uses","at":[10,0,10,11]}},{"key":"geid_130_1538","source":"scip-python python temp indexer `pilot.helpers.test_agentconvo`/__init__:","target":"scip-python python temp indexer `pilot.utils.custom_print`/get_custom_print().","attributes":{"type":"uses","at":[12,38,12,54]}},{"key":"geid_130_1539","source":"scip-python python temp indexer `pilot.helpers.test_debugger`/__init__:","target":"scip-python python temp indexer `pilot.helpers.test_debugger`/test_debug_need_to_see_output().","attributes":{"type":"defines","at":[88,0,150,89]}},{"key":"geid_130_1540","source":"scip-python python temp indexer `pilot.helpers.test_debugger`/__init__:","target":"scip-python python temp indexer `pilot.helpers.test_debugger`/test_debug().","attributes":{"type":"defines","at":[18,0,85,42]}},{"key":"geid_130_1541","source":"scip-python python temp indexer `pilot.helpers.test_debugger`/__init__:","target":"scip-python python python-stdlib 3.11 json/__init__:","attributes":{"type":"uses","at":[1,7,1,11]}},{"key":"geid_130_1542","source":"scip-python python temp indexer `pilot.helpers.test_debugger`/__init__:","target":"scip-python python python-stdlib 3.11 `unittest.mock`/__init__:","attributes":{"type":"uses","at":[4,5,4,18]}},{"key":"geid_130_1543","source":"scip-python python temp indexer `pilot.helpers.test_debugger`/__init__:","target":"scip-python python python-dotenv 1.0.0 dotenv/__init__:","attributes":{"type":"uses","at":[5,5,5,11]}},{"key":"geid_130_1544","source":"scip-python python temp indexer `pilot.helpers.test_debugger`/__init__:","target":"scip-python python python-dotenv 1.0.0 `dotenv.main`/load_dotenv().","attributes":{"type":"uses","at":[5,19,5,30]}},{"key":"geid_130_1545","source":"scip-python python temp indexer `pilot.helpers.test_debugger`/__init__:","target":"scip-python python python-dotenv 1.0.0 `dotenv.main`/load_dotenv().","attributes":{"type":"uses","at":[7,0,7,11]}},{"key":"geid_130_1546","source":"scip-python python temp indexer `pilot.helpers.test_debugger`/__init__:","target":"scip-python python temp indexer `pilot.utils.custom_print`/__init__:","attributes":{"type":"uses","at":[8,5,8,23]}},{"key":"geid_130_1547","source":"scip-python python temp indexer `pilot.helpers.test_debugger`/__init__:","target":"scip-python python temp indexer `pilot.utils.custom_print`/get_custom_print().","attributes":{"type":"uses","at":[8,31,8,47]}},{"key":"geid_130_1548","source":"scip-python python temp indexer `pilot.helpers.test_debugger`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","attributes":{"type":"uses","at":[9,5,9,29]}},{"key":"geid_130_1549","source":"scip-python python temp indexer `pilot.helpers.test_debugger`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#","attributes":{"type":"uses","at":[9,37,9,46]}},{"key":"geid_130_1550","source":"scip-python python temp indexer `pilot.helpers.test_debugger`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/__init__:","attributes":{"type":"uses","at":[10,5,10,23]}},{"key":"geid_130_1551","source":"scip-python python temp indexer `pilot.helpers.test_debugger`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","attributes":{"type":"uses","at":[10,31,10,41]}},{"key":"geid_130_1552","source":"scip-python python temp indexer `pilot.helpers.test_debugger`/__init__:","target":"scip-python python temp indexer `pilot.helpers.debugger`/__init__:","attributes":{"type":"uses","at":[11,5,11,21]}},{"key":"geid_130_1553","source":"scip-python python temp indexer `pilot.helpers.test_debugger`/__init__:","target":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#","attributes":{"type":"uses","at":[11,29,11,37]}},{"key":"geid_130_1554","source":"scip-python python temp indexer `pilot.helpers.test_debugger`/__init__:","target":"scip-python python temp indexer `pilot.helpers.test_project`/__init__:","attributes":{"type":"uses","at":[12,5,12,25]}},{"key":"geid_130_1555","source":"scip-python python temp indexer `pilot.helpers.test_debugger`/__init__:","target":"scip-python python temp indexer `pilot.helpers.test_project`/create_project().","attributes":{"type":"uses","at":[12,33,12,47]}},{"key":"geid_130_1556","source":"scip-python python temp indexer `pilot.helpers.test_debugger`/__init__:","target":"scip-python python temp indexer `pilot.test.mock_questionary`/__init__:","attributes":{"type":"uses","at":[13,5,13,26]}},{"key":"geid_130_1557","source":"scip-python python temp indexer `pilot.helpers.test_debugger`/__init__:","target":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#","attributes":{"type":"uses","at":[13,34,13,49]}},{"key":"geid_130_1558","source":"scip-python python temp indexer `pilot.helpers.test_debugger`/test_debug().","target":"scip-python python temp indexer `pilot.utils.custom_print`/get_custom_print().","attributes":{"type":"uses","at":[32,42,32,58]}},{"key":"geid_130_1559","source":"scip-python python temp indexer `pilot.helpers.test_debugger`/test_debug().","target":"scip-python python temp indexer `pilot.helpers.test_project`/create_project().","attributes":{"type":"uses","at":[33,14,33,28]}},{"key":"geid_130_1560","source":"scip-python python temp indexer `pilot.helpers.test_debugger`/test_debug().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#current_step.","attributes":{"type":"uses","at":[34,12,34,24]}},{"key":"geid_130_1561","source":"scip-python python temp indexer `pilot.helpers.test_debugger`/test_debug().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#","attributes":{"type":"uses","at":[35,16,35,25]}},{"key":"geid_130_1562","source":"scip-python python temp indexer `pilot.helpers.test_debugger`/test_debug().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#developer.","attributes":{"type":"uses","at":[36,12,36,21]}},{"key":"geid_130_1563","source":"scip-python python temp indexer `pilot.helpers.test_debugger`/test_debug().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","attributes":{"type":"uses","at":[37,12,37,22]}},{"key":"geid_130_1564","source":"scip-python python temp indexer `pilot.helpers.test_debugger`/test_debug().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#load_branch().","attributes":{"type":"uses","at":[38,10,38,21]}},{"key":"geid_130_1565","source":"scip-python python temp indexer `pilot.helpers.test_debugger`/test_debug().","target":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#","attributes":{"type":"uses","at":[40,15,40,23]}},{"key":"geid_130_1566","source":"scip-python python temp indexer `pilot.helpers.test_debugger`/test_debug().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#construct_and_add_message_from_prompt().","attributes":{"type":"uses","at":[44,10,44,47]}},{"key":"geid_130_1567","source":"scip-python python temp indexer `pilot.helpers.test_debugger`/test_debug().","target":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#","attributes":{"type":"uses","at":[78,23,78,38]}},{"key":"geid_130_1568","source":"scip-python python temp indexer `pilot.helpers.test_debugger`/test_debug().","target":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#debug().","attributes":{"type":"uses","at":[82,26,82,31]}},{"key":"geid_130_1569","source":"scip-python python temp indexer `pilot.helpers.test_debugger`/test_debug_need_to_see_output().","target":"scip-python python temp indexer `pilot.utils.custom_print`/get_custom_print().","attributes":{"type":"uses","at":[93,42,93,58]}},{"key":"geid_130_1570","source":"scip-python python temp indexer `pilot.helpers.test_debugger`/test_debug_need_to_see_output().","target":"scip-python python temp indexer `pilot.helpers.test_project`/create_project().","attributes":{"type":"uses","at":[94,14,94,28]}},{"key":"geid_130_1571","source":"scip-python python temp indexer `pilot.helpers.test_debugger`/test_debug_need_to_see_output().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#current_step.","attributes":{"type":"uses","at":[95,12,95,24]}},{"key":"geid_130_1572","source":"scip-python python temp indexer `pilot.helpers.test_debugger`/test_debug_need_to_see_output().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#","attributes":{"type":"uses","at":[96,16,96,25]}},{"key":"geid_130_1573","source":"scip-python python temp indexer `pilot.helpers.test_debugger`/test_debug_need_to_see_output().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_command_run().","attributes":{"type":"uses","at":[98,14,98,30]}},{"key":"geid_130_1574","source":"scip-python python temp indexer `pilot.helpers.test_debugger`/test_debug_need_to_see_output().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_command_run().","attributes":{"type":"uses","at":[99,14,99,30]}},{"key":"geid_130_1575","source":"scip-python python temp indexer `pilot.helpers.test_debugger`/test_debug_need_to_see_output().","target":"scip-python python python-stdlib 3.11 json/__init__:","attributes":{"type":"uses","at":[101,47,101,51]}},{"key":"geid_130_1576","source":"scip-python python temp indexer `pilot.helpers.test_debugger`/test_debug_need_to_see_output().","target":"scip-python python python-stdlib 3.11 json/dumps().","attributes":{"type":"uses","at":[101,52,101,57]}},{"key":"geid_130_1577","source":"scip-python python temp indexer `pilot.helpers.test_debugger`/test_debug_need_to_see_output().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_test().","attributes":{"type":"uses","at":[108,14,108,23]}},{"key":"geid_130_1578","source":"scip-python python temp indexer `pilot.helpers.test_debugger`/test_debug_need_to_see_output().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_test().","attributes":{"type":"uses","at":[109,14,109,23]}},{"key":"geid_130_1579","source":"scip-python python temp indexer `pilot.helpers.test_debugger`/test_debug_need_to_see_output().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#developer.","attributes":{"type":"uses","at":[110,12,110,21]}},{"key":"geid_130_1580","source":"scip-python python temp indexer `pilot.helpers.test_debugger`/test_debug_need_to_see_output().","target":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#","attributes":{"type":"uses","at":[111,15,111,23]}},{"key":"geid_130_1581","source":"scip-python python temp indexer `pilot.helpers.test_debugger`/test_debug_need_to_see_output().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","attributes":{"type":"uses","at":[112,12,112,22]}},{"key":"geid_130_1582","source":"scip-python python temp indexer `pilot.helpers.test_debugger`/test_debug_need_to_see_output().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#load_branch().","attributes":{"type":"uses","at":[113,10,113,21]}},{"key":"geid_130_1583","source":"scip-python python temp indexer `pilot.helpers.test_debugger`/test_debug_need_to_see_output().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#replace_files().","attributes":{"type":"uses","at":[114,10,114,23]}},{"key":"geid_130_1584","source":"scip-python python temp indexer `pilot.helpers.test_debugger`/test_debug_need_to_see_output().","target":"scip-python python python-stdlib 3.11 json/__init__:","attributes":{"type":"uses","at":[116,48,116,52]}},{"key":"geid_130_1585","source":"scip-python python temp indexer `pilot.helpers.test_debugger`/test_debug_need_to_see_output().","target":"scip-python python python-stdlib 3.11 json/dumps().","attributes":{"type":"uses","at":[116,53,116,58]}},{"key":"geid_130_1586","source":"scip-python python temp indexer `pilot.helpers.test_debugger`/test_debug_need_to_see_output().","target":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#debug().","attributes":{"type":"uses","at":[142,13,142,18]}},{"key":"geid_130_1587","source":"scip-python python temp indexer `pilot.helpers.test_debugger`/test_debug_need_to_see_output().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_command_run().","attributes":{"type":"uses","at":[149,21,149,37]}},{"key":"geid_130_1588","source":"scip-python python temp indexer `pilot.helpers.test_debugger`/test_debug_need_to_see_output().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_command_run().","attributes":{"type":"uses","at":[150,21,150,37]}},{"key":"geid_130_1589","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#","target":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#test_save_files_snapshot().","attributes":{"type":"defines","at":[413,4,426,66]}},{"key":"geid_130_1590","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#","target":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#test_get_directory_tree().","attributes":{"type":"defines","at":[395,4,411,12]}},{"key":"geid_130_1591","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#","target":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","attributes":{"type":"defines","at":[353,4,393,52]}},{"key":"geid_130_1592","source":"scip-python python temp indexer `pilot.helpers.test_project`/__init__:","target":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#","attributes":{"type":"defines","at":[352,0,426,66]}},{"key":"geid_130_1593","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#","target":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_save_file().","attributes":{"type":"defines","at":[315,4,345,83]}},{"key":"geid_130_1594","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#","target":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","attributes":{"type":"defines","at":[45,4,313,76]}},{"key":"geid_130_1595","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#","target":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path().","attributes":{"type":"defines","at":[26,4,43,51]}},{"key":"geid_130_1596","source":"scip-python python temp indexer `pilot.helpers.test_project`/__init__:","target":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#","attributes":{"type":"defines","at":[25,0,345,83]}},{"key":"geid_130_1597","source":"scip-python python temp indexer `pilot.helpers.test_project`/__init__:","target":"scip-python python temp indexer `pilot.helpers.test_project`/create_project().","attributes":{"type":"defines","at":[9,0,22,18]}},{"key":"geid_130_1598","source":"scip-python python temp indexer `pilot.helpers.test_project`/__init__:","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[0,7,0,9]}},{"key":"geid_130_1599","source":"scip-python python temp indexer `pilot.helpers.test_project`/__init__:","target":"scip-python python python-stdlib 3.11 json/__init__:","attributes":{"type":"uses","at":[1,7,1,11]}},{"key":"geid_130_1600","source":"scip-python python temp indexer `pilot.helpers.test_project`/__init__:","target":"scip-python python python-stdlib 3.11 pathlib/__init__:","attributes":{"type":"uses","at":[2,5,2,12]}},{"key":"geid_130_1601","source":"scip-python python temp indexer `pilot.helpers.test_project`/__init__:","target":"scip-python python python-stdlib 3.11 pathlib/Path#","attributes":{"type":"uses","at":[2,20,2,24]}},{"key":"geid_130_1602","source":"scip-python python temp indexer `pilot.helpers.test_project`/__init__:","target":"scip-python python python-stdlib 3.11 `unittest.mock`/__init__:","attributes":{"type":"uses","at":[4,5,4,18]}},{"key":"geid_130_1603","source":"scip-python python temp indexer `pilot.helpers.test_project`/__init__:","target":"scip-python python temp indexer `pilot.helpers.project`/__init__:","attributes":{"type":"uses","at":[5,5,5,20]}},{"key":"geid_130_1604","source":"scip-python python temp indexer `pilot.helpers.test_project`/__init__:","target":"scip-python python temp indexer `pilot.helpers.project`/Project#","attributes":{"type":"uses","at":[5,28,5,35]}},{"key":"geid_130_1605","source":"scip-python python temp indexer `pilot.helpers.test_project`/__init__:","target":"scip-python python python-stdlib 3.11 pathlib/Path#","attributes":{"type":"uses","at":[7,16,7,20]}},{"key":"geid_130_1606","source":"scip-python python temp indexer `pilot.helpers.test_project`/__init__:","target":"scip-python python temp indexer `pilot.helpers.test_project`/","attributes":{"type":"uses","at":[7,21,7,29]}},{"key":"geid_130_1607","source":"scip-python python temp indexer `pilot.helpers.test_project`/__init__:","target":"scip-python python python-stdlib 3.11 pathlib/PurePath#parent().","attributes":{"type":"uses","at":[7,31,7,37]}},{"key":"geid_130_1608","source":"scip-python python temp indexer `pilot.helpers.test_project`/__init__:","target":"scip-python python python-stdlib 3.11 pathlib/PurePath#parent().","attributes":{"type":"uses","at":[7,38,7,44]}},{"key":"geid_130_1609","source":"scip-python python temp indexer `pilot.helpers.test_project`/__init__:","target":"scip-python python python-stdlib 3.11 pathlib/PurePath#parent().","attributes":{"type":"uses","at":[7,45,7,51]}},{"key":"geid_130_1610","source":"scip-python python temp indexer `pilot.helpers.test_project`/__init__:","target":"scip-python python python-stdlib 3.11 pathlib/Path#","attributes":{"type":"uses","at":[7,54,7,58]}},{"key":"geid_130_1611","source":"scip-python python temp indexer `pilot.helpers.test_project`/__init__:","target":"scip-python python python-stdlib 3.11 pathlib/Path#","attributes":{"type":"uses","at":[7,74,7,78]}},{"key":"geid_130_1612","source":"scip-python python temp indexer `pilot.helpers.test_project`/create_project().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#","attributes":{"type":"uses","at":[10,14,10,21]}},{"key":"geid_130_1613","source":"scip-python python temp indexer `pilot.helpers.test_project`/create_project().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#set_root_path().","attributes":{"type":"uses","at":[19,12,19,25]}},{"key":"geid_130_1614","source":"scip-python python temp indexer `pilot.helpers.test_project`/create_project().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[19,26,19,35]}},{"key":"geid_130_1615","source":"scip-python python temp indexer `pilot.helpers.test_project`/create_project().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#current_step.","attributes":{"type":"uses","at":[21,12,21,24]}},{"key":"geid_130_1616","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[27,36,27,45]}},{"key":"geid_130_1617","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[28,28,28,37]}},{"key":"geid_130_1618","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[29,33,29,42]}},{"key":"geid_130_1619","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[30,36,30,45]}},{"key":"geid_130_1620","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[31,44,31,53]}},{"key":"geid_130_1621","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[32,49,32,58]}},{"key":"geid_130_1622","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[33,46,33,55]}},{"key":"geid_130_1623","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path().","target":"scip-python python temp indexer `pilot.helpers.test_project`/create_project().","attributes":{"type":"uses","at":[37,18,37,32]}},{"key":"geid_130_1624","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#get_full_file_path().","attributes":{"type":"uses","at":[40,47,40,65]}},{"key":"geid_130_1625","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path().","target":"scip-python python python-stdlib 3.11 pathlib/Path#","attributes":{"type":"uses","at":[43,36,43,40]}},{"key":"geid_130_1626","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[47,25,47,34]}},{"key":"geid_130_1627","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[48,26,48,35]}},{"key":"geid_130_1628","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[49,29,49,38]}},{"key":"geid_130_1629","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[50,27,50,36]}},{"key":"geid_130_1630","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[51,16,51,25]}},{"key":"geid_130_1631","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[51,38,51,47]}},{"key":"geid_130_1632","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[52,16,52,25]}},{"key":"geid_130_1633","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[52,52,52,61]}},{"key":"geid_130_1634","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[53,16,53,25]}},{"key":"geid_130_1635","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[53,73,53,82]}},{"key":"geid_130_1636","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[54,34,54,43]}},{"key":"geid_130_1637","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[55,39,55,48]}},{"key":"geid_130_1638","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[56,55,56,64]}},{"key":"geid_130_1639","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[57,56,57,65]}},{"key":"geid_130_1640","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[58,65,58,74]}},{"key":"geid_130_1641","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[59,16,59,25]}},{"key":"geid_130_1642","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[59,78,59,87]}},{"key":"geid_130_1643","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[60,16,60,25]}},{"key":"geid_130_1644","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[60,82,60,91]}},{"key":"geid_130_1645","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[61,67,61,76]}},{"key":"geid_130_1646","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[62,51,62,60]}},{"key":"geid_130_1647","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[63,26,63,35]}},{"key":"geid_130_1648","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[64,27,64,36]}},{"key":"geid_130_1649","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[65,30,65,39]}},{"key":"geid_130_1650","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[66,28,66,37]}},{"key":"geid_130_1651","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[67,17,67,26]}},{"key":"geid_130_1652","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[67,39,67,48]}},{"key":"geid_130_1653","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[68,17,68,26]}},{"key":"geid_130_1654","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[68,53,68,62]}},{"key":"geid_130_1655","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[69,17,69,26]}},{"key":"geid_130_1656","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[69,74,69,83]}},{"key":"geid_130_1657","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[70,35,70,44]}},{"key":"geid_130_1658","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[71,40,71,49]}},{"key":"geid_130_1659","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[72,56,72,65]}},{"key":"geid_130_1660","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[73,57,73,66]}},{"key":"geid_130_1661","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[74,66,74,75]}},{"key":"geid_130_1662","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[75,17,75,26]}},{"key":"geid_130_1663","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[75,79,75,88]}},{"key":"geid_130_1664","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[76,17,76,26]}},{"key":"geid_130_1665","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[76,83,76,92]}},{"key":"geid_130_1666","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[77,68,77,77]}},{"key":"geid_130_1667","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[78,52,78,61]}},{"key":"geid_130_1668","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[79,29,79,38]}},{"key":"geid_130_1669","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[80,30,80,39]}},{"key":"geid_130_1670","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[81,33,81,42]}},{"key":"geid_130_1671","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[82,31,82,40]}},{"key":"geid_130_1672","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[83,20,83,29]}},{"key":"geid_130_1673","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[83,42,83,51]}},{"key":"geid_130_1674","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[84,20,84,29]}},{"key":"geid_130_1675","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[84,56,84,65]}},{"key":"geid_130_1676","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[85,20,85,29]}},{"key":"geid_130_1677","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[85,77,85,86]}},{"key":"geid_130_1678","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[86,38,86,47]}},{"key":"geid_130_1679","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[87,43,87,52]}},{"key":"geid_130_1680","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[88,59,88,68]}},{"key":"geid_130_1681","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[89,60,89,69]}},{"key":"geid_130_1682","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[90,69,90,78]}},{"key":"geid_130_1683","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[91,20,91,29]}},{"key":"geid_130_1684","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[91,82,91,91]}},{"key":"geid_130_1685","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[92,20,92,29]}},{"key":"geid_130_1686","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[92,86,92,95]}},{"key":"geid_130_1687","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[93,71,93,80]}},{"key":"geid_130_1688","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[94,55,94,64]}},{"key":"geid_130_1689","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[95,27,95,36]}},{"key":"geid_130_1690","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[96,28,96,37]}},{"key":"geid_130_1691","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[97,31,97,40]}},{"key":"geid_130_1692","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[98,29,98,38]}},{"key":"geid_130_1693","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[99,18,99,27]}},{"key":"geid_130_1694","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[99,40,99,49]}},{"key":"geid_130_1695","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[100,18,100,27]}},{"key":"geid_130_1696","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[100,54,100,63]}},{"key":"geid_130_1697","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[101,18,101,27]}},{"key":"geid_130_1698","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[101,75,101,84]}},{"key":"geid_130_1699","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[102,36,102,45]}},{"key":"geid_130_1700","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[103,41,103,50]}},{"key":"geid_130_1701","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[104,57,104,66]}},{"key":"geid_130_1702","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[105,58,105,67]}},{"key":"geid_130_1703","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[106,67,106,76]}},{"key":"geid_130_1704","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[107,18,107,27]}},{"key":"geid_130_1705","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[107,80,107,89]}},{"key":"geid_130_1706","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[108,18,108,27]}},{"key":"geid_130_1707","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[108,84,108,93]}},{"key":"geid_130_1708","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[109,69,109,78]}},{"key":"geid_130_1709","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[110,53,110,62]}},{"key":"geid_130_1710","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[111,12,111,21]}},{"key":"geid_130_1711","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[111,38,111,47]}},{"key":"geid_130_1712","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[112,12,112,21]}},{"key":"geid_130_1713","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[112,39,112,48]}},{"key":"geid_130_1714","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[113,12,113,21]}},{"key":"geid_130_1715","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[113,42,113,51]}},{"key":"geid_130_1716","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[114,12,114,21]}},{"key":"geid_130_1717","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[114,40,114,49]}},{"key":"geid_130_1718","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[115,12,115,21]}},{"key":"geid_130_1719","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[115,29,115,38]}},{"key":"geid_130_1720","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[115,51,115,60]}},{"key":"geid_130_1721","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[116,12,116,21]}},{"key":"geid_130_1722","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[116,29,116,38]}},{"key":"geid_130_1723","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[116,65,116,74]}},{"key":"geid_130_1724","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[117,12,117,21]}},{"key":"geid_130_1725","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[117,29,117,38]}},{"key":"geid_130_1726","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[117,86,117,95]}},{"key":"geid_130_1727","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[118,12,118,21]}},{"key":"geid_130_1728","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[118,47,118,56]}},{"key":"geid_130_1729","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[119,12,119,21]}},{"key":"geid_130_1730","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[119,52,119,61]}},{"key":"geid_130_1731","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[120,12,120,21]}},{"key":"geid_130_1732","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[120,68,120,77]}},{"key":"geid_130_1733","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[121,12,121,21]}},{"key":"geid_130_1734","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[121,69,121,78]}},{"key":"geid_130_1735","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[122,12,122,21]}},{"key":"geid_130_1736","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[122,78,122,87]}},{"key":"geid_130_1737","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[123,12,123,21]}},{"key":"geid_130_1738","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[123,29,123,38]}},{"key":"geid_130_1739","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[123,91,123,100]}},{"key":"geid_130_1740","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[124,12,124,21]}},{"key":"geid_130_1741","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[124,29,124,38]}},{"key":"geid_130_1742","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[124,95,124,104]}},{"key":"geid_130_1743","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[125,12,125,21]}},{"key":"geid_130_1744","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[125,80,125,89]}},{"key":"geid_130_1745","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[126,12,126,21]}},{"key":"geid_130_1746","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[126,64,126,73]}},{"key":"geid_130_1747","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[127,12,127,21]}},{"key":"geid_130_1748","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[127,52,127,61]}},{"key":"geid_130_1749","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[128,12,128,21]}},{"key":"geid_130_1750","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[128,53,128,62]}},{"key":"geid_130_1751","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[129,12,129,21]}},{"key":"geid_130_1752","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[129,56,129,65]}},{"key":"geid_130_1753","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[130,12,130,21]}},{"key":"geid_130_1754","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[130,54,130,63]}},{"key":"geid_130_1755","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[131,12,131,21]}},{"key":"geid_130_1756","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[131,36,131,45]}},{"key":"geid_130_1757","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[131,65,131,74]}},{"key":"geid_130_1758","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[132,12,132,21]}},{"key":"geid_130_1759","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[132,36,132,45]}},{"key":"geid_130_1760","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[132,72,132,81]}},{"key":"geid_130_1761","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[133,12,133,21]}},{"key":"geid_130_1762","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[133,36,133,45]}},{"key":"geid_130_1763","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[133,101,133,110]}},{"key":"geid_130_1764","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[134,12,134,21]}},{"key":"geid_130_1765","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[134,61,134,70]}},{"key":"geid_130_1766","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[135,12,135,21]}},{"key":"geid_130_1767","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[135,59,135,68]}},{"key":"geid_130_1768","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[136,12,136,21]}},{"key":"geid_130_1769","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[136,75,136,84]}},{"key":"geid_130_1770","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[137,12,137,21]}},{"key":"geid_130_1771","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[137,76,137,85]}},{"key":"geid_130_1772","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[138,12,138,21]}},{"key":"geid_130_1773","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[138,85,138,94]}},{"key":"geid_130_1774","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[139,12,139,21]}},{"key":"geid_130_1775","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[139,36,139,45]}},{"key":"geid_130_1776","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[139,98,139,107]}},{"key":"geid_130_1777","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[140,12,140,21]}},{"key":"geid_130_1778","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[140,36,140,45]}},{"key":"geid_130_1779","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[140,110,140,119]}},{"key":"geid_130_1780","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[141,12,141,21]}},{"key":"geid_130_1781","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[141,87,141,96]}},{"key":"geid_130_1782","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[142,12,142,21]}},{"key":"geid_130_1783","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[142,71,142,80]}},{"key":"geid_130_1784","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[143,12,143,21]}},{"key":"geid_130_1785","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[143,73,143,82]}},{"key":"geid_130_1786","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[144,12,144,21]}},{"key":"geid_130_1787","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[144,74,144,83]}},{"key":"geid_130_1788","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[145,12,145,21]}},{"key":"geid_130_1789","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[145,77,145,86]}},{"key":"geid_130_1790","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[146,12,146,21]}},{"key":"geid_130_1791","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[146,75,146,84]}},{"key":"geid_130_1792","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[147,12,147,21]}},{"key":"geid_130_1793","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[147,47,147,56]}},{"key":"geid_130_1794","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[147,86,147,95]}},{"key":"geid_130_1795","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[148,12,148,21]}},{"key":"geid_130_1796","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[148,47,148,56]}},{"key":"geid_130_1797","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[148,101,148,110]}},{"key":"geid_130_1798","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[149,12,149,21]}},{"key":"geid_130_1799","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[149,47,149,56]}},{"key":"geid_130_1800","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[149,104,149,113]}},{"key":"geid_130_1801","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[150,12,150,21]}},{"key":"geid_130_1802","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[150,82,150,91]}},{"key":"geid_130_1803","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[151,12,151,21]}},{"key":"geid_130_1804","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[151,88,151,97]}},{"key":"geid_130_1805","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[152,12,152,21]}},{"key":"geid_130_1806","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[152,104,152,113]}},{"key":"geid_130_1807","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[153,12,153,21]}},{"key":"geid_130_1808","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[153,105,153,114]}},{"key":"geid_130_1809","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[154,12,154,21]}},{"key":"geid_130_1810","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[154,114,154,123]}},{"key":"geid_130_1811","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[155,12,155,21]}},{"key":"geid_130_1812","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[155,47,155,56]}},{"key":"geid_130_1813","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[155,127,155,136]}},{"key":"geid_130_1814","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[156,12,156,21]}},{"key":"geid_130_1815","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[156,47,156,56]}},{"key":"geid_130_1816","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[156,113,156,122]}},{"key":"geid_130_1817","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[157,12,157,21]}},{"key":"geid_130_1818","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[157,116,157,125]}},{"key":"geid_130_1819","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[158,12,158,21]}},{"key":"geid_130_1820","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[158,100,158,109]}},{"key":"geid_130_1821","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[159,34,159,43]}},{"key":"geid_130_1822","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[160,35,160,44]}},{"key":"geid_130_1823","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[161,38,161,47]}},{"key":"geid_130_1824","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[162,36,162,45]}},{"key":"geid_130_1825","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[163,25,163,34]}},{"key":"geid_130_1826","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[163,47,163,56]}},{"key":"geid_130_1827","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[164,25,164,34]}},{"key":"geid_130_1828","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[164,61,164,70]}},{"key":"geid_130_1829","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[165,25,165,34]}},{"key":"geid_130_1830","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[165,82,165,91]}},{"key":"geid_130_1831","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[166,43,166,52]}},{"key":"geid_130_1832","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[167,48,167,57]}},{"key":"geid_130_1833","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[168,64,168,73]}},{"key":"geid_130_1834","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[169,65,169,74]}},{"key":"geid_130_1835","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[170,74,170,83]}},{"key":"geid_130_1836","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[171,25,171,34]}},{"key":"geid_130_1837","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[171,87,171,96]}},{"key":"geid_130_1838","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[172,25,172,34]}},{"key":"geid_130_1839","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[172,91,172,100]}},{"key":"geid_130_1840","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[173,76,173,85]}},{"key":"geid_130_1841","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[174,60,174,69]}},{"key":"geid_130_1842","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[175,39,175,48]}},{"key":"geid_130_1843","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[176,40,176,49]}},{"key":"geid_130_1844","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[177,43,177,52]}},{"key":"geid_130_1845","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[178,41,178,50]}},{"key":"geid_130_1846","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[179,23,179,32]}},{"key":"geid_130_1847","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[179,52,179,61]}},{"key":"geid_130_1848","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[180,23,180,32]}},{"key":"geid_130_1849","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[180,59,180,68]}},{"key":"geid_130_1850","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[181,23,181,32]}},{"key":"geid_130_1851","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[181,88,181,97]}},{"key":"geid_130_1852","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[182,48,182,57]}},{"key":"geid_130_1853","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[183,46,183,55]}},{"key":"geid_130_1854","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[184,62,184,71]}},{"key":"geid_130_1855","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[185,63,185,72]}},{"key":"geid_130_1856","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[186,72,186,81]}},{"key":"geid_130_1857","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[187,23,187,32]}},{"key":"geid_130_1858","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[187,85,187,94]}},{"key":"geid_130_1859","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[188,23,188,32]}},{"key":"geid_130_1860","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[188,97,188,106]}},{"key":"geid_130_1861","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[189,74,189,83]}},{"key":"geid_130_1862","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[190,58,190,67]}},{"key":"geid_130_1863","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[191,55,191,64]}},{"key":"geid_130_1864","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[192,56,192,65]}},{"key":"geid_130_1865","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[193,59,193,68]}},{"key":"geid_130_1866","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[194,57,194,66]}},{"key":"geid_130_1867","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[195,31,195,40]}},{"key":"geid_130_1868","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[195,68,195,77]}},{"key":"geid_130_1869","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[196,31,196,40]}},{"key":"geid_130_1870","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[196,75,196,84]}},{"key":"geid_130_1871","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[197,31,197,40]}},{"key":"geid_130_1872","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[197,104,197,113]}},{"key":"geid_130_1873","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[198,64,198,73]}},{"key":"geid_130_1874","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[199,62,199,71]}},{"key":"geid_130_1875","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[200,70,200,79]}},{"key":"geid_130_1876","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[201,71,201,80]}},{"key":"geid_130_1877","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[202,80,202,89]}},{"key":"geid_130_1878","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[203,31,203,40]}},{"key":"geid_130_1879","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[203,93,203,102]}},{"key":"geid_130_1880","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[204,31,204,40]}},{"key":"geid_130_1881","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[204,113,204,122]}},{"key":"geid_130_1882","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[205,82,205,91]}},{"key":"geid_130_1883","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[206,74,206,83]}},{"key":"geid_130_1884","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[207,56,207,65]}},{"key":"geid_130_1885","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[208,57,208,66]}},{"key":"geid_130_1886","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[209,60,209,69]}},{"key":"geid_130_1887","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[210,58,210,67]}},{"key":"geid_130_1888","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[211,32,211,41]}},{"key":"geid_130_1889","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[211,69,211,78]}},{"key":"geid_130_1890","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[212,32,212,41]}},{"key":"geid_130_1891","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[212,76,212,85]}},{"key":"geid_130_1892","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[213,32,213,41]}},{"key":"geid_130_1893","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[213,105,213,114]}},{"key":"geid_130_1894","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[214,65,214,74]}},{"key":"geid_130_1895","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[215,63,215,72]}},{"key":"geid_130_1896","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[216,71,216,80]}},{"key":"geid_130_1897","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[217,72,217,81]}},{"key":"geid_130_1898","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[218,81,218,90]}},{"key":"geid_130_1899","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[219,32,219,41]}},{"key":"geid_130_1900","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[219,94,219,103]}},{"key":"geid_130_1901","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[220,32,220,41]}},{"key":"geid_130_1902","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[220,114,220,123]}},{"key":"geid_130_1903","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[221,83,221,92]}},{"key":"geid_130_1904","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[222,75,222,84]}},{"key":"geid_130_1905","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[223,65,223,74]}},{"key":"geid_130_1906","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[224,66,224,75]}},{"key":"geid_130_1907","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[225,69,225,78]}},{"key":"geid_130_1908","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[226,67,226,76]}},{"key":"geid_130_1909","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[227,41,227,50]}},{"key":"geid_130_1910","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[227,78,227,87]}},{"key":"geid_130_1911","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[228,41,228,50]}},{"key":"geid_130_1912","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[228,85,228,94]}},{"key":"geid_130_1913","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[229,41,229,50]}},{"key":"geid_130_1914","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[229,114,229,123]}},{"key":"geid_130_1915","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[230,74,230,83]}},{"key":"geid_130_1916","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[231,72,231,81]}},{"key":"geid_130_1917","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[232,80,232,89]}},{"key":"geid_130_1918","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[233,81,233,90]}},{"key":"geid_130_1919","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[234,90,234,99]}},{"key":"geid_130_1920","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[235,41,235,50]}},{"key":"geid_130_1921","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[235,103,235,112]}},{"key":"geid_130_1922","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[236,41,236,50]}},{"key":"geid_130_1923","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[236,123,236,132]}},{"key":"geid_130_1924","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[237,92,237,101]}},{"key":"geid_130_1925","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[238,84,238,93]}},{"key":"geid_130_1926","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[239,12,239,21]}},{"key":"geid_130_1927","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[239,78,239,87]}},{"key":"geid_130_1928","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[240,12,240,21]}},{"key":"geid_130_1929","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[240,79,240,88]}},{"key":"geid_130_1930","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[241,12,241,21]}},{"key":"geid_130_1931","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[241,82,241,91]}},{"key":"geid_130_1932","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[242,12,242,21]}},{"key":"geid_130_1933","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[242,80,242,89]}},{"key":"geid_130_1934","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[243,12,243,21]}},{"key":"geid_130_1935","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[243,54,243,63]}},{"key":"geid_130_1936","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[243,91,243,100]}},{"key":"geid_130_1937","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[244,12,244,21]}},{"key":"geid_130_1938","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[244,54,244,63]}},{"key":"geid_130_1939","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[244,98,244,107]}},{"key":"geid_130_1940","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[245,12,245,21]}},{"key":"geid_130_1941","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[245,54,245,63]}},{"key":"geid_130_1942","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[245,127,245,136]}},{"key":"geid_130_1943","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[246,12,246,21]}},{"key":"geid_130_1944","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[246,87,246,96]}},{"key":"geid_130_1945","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[247,12,247,21]}},{"key":"geid_130_1946","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[247,85,247,94]}},{"key":"geid_130_1947","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[248,12,248,21]}},{"key":"geid_130_1948","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[248,93,248,102]}},{"key":"geid_130_1949","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[249,12,249,21]}},{"key":"geid_130_1950","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[249,94,249,103]}},{"key":"geid_130_1951","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[250,12,250,21]}},{"key":"geid_130_1952","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[250,103,250,112]}},{"key":"geid_130_1953","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[251,12,251,21]}},{"key":"geid_130_1954","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[251,54,251,63]}},{"key":"geid_130_1955","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[251,116,251,125]}},{"key":"geid_130_1956","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[252,12,252,21]}},{"key":"geid_130_1957","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[252,54,252,63]}},{"key":"geid_130_1958","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[252,136,252,145]}},{"key":"geid_130_1959","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[253,12,253,21]}},{"key":"geid_130_1960","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[253,105,253,114]}},{"key":"geid_130_1961","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[254,12,254,21]}},{"key":"geid_130_1962","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[254,97,254,106]}},{"key":"geid_130_1963","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[255,12,255,21]}},{"key":"geid_130_1964","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[255,82,255,91]}},{"key":"geid_130_1965","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[256,12,256,21]}},{"key":"geid_130_1966","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[256,83,256,92]}},{"key":"geid_130_1967","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[257,12,257,21]}},{"key":"geid_130_1968","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[257,86,257,95]}},{"key":"geid_130_1969","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[258,12,258,21]}},{"key":"geid_130_1970","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[258,84,258,93]}},{"key":"geid_130_1971","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[259,12,259,21]}},{"key":"geid_130_1972","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[259,56,259,65]}},{"key":"geid_130_1973","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[259,95,259,104]}},{"key":"geid_130_1974","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[260,12,260,21]}},{"key":"geid_130_1975","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[260,56,260,65]}},{"key":"geid_130_1976","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[260,110,260,119]}},{"key":"geid_130_1977","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[261,12,261,21]}},{"key":"geid_130_1978","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[261,56,261,65]}},{"key":"geid_130_1979","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[261,113,261,122]}},{"key":"geid_130_1980","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[262,12,262,21]}},{"key":"geid_130_1981","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[262,91,262,100]}},{"key":"geid_130_1982","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[263,12,263,21]}},{"key":"geid_130_1983","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[263,97,263,106]}},{"key":"geid_130_1984","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[264,12,264,21]}},{"key":"geid_130_1985","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[264,113,264,122]}},{"key":"geid_130_1986","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[265,12,265,21]}},{"key":"geid_130_1987","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[265,114,265,123]}},{"key":"geid_130_1988","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[266,12,266,21]}},{"key":"geid_130_1989","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[266,123,266,132]}},{"key":"geid_130_1990","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[267,12,267,21]}},{"key":"geid_130_1991","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[267,56,267,65]}},{"key":"geid_130_1992","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[267,136,267,145]}},{"key":"geid_130_1993","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[268,12,268,21]}},{"key":"geid_130_1994","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[268,56,268,65]}},{"key":"geid_130_1995","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[268,122,268,131]}},{"key":"geid_130_1996","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[269,12,269,21]}},{"key":"geid_130_1997","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[269,125,269,134]}},{"key":"geid_130_1998","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[270,12,270,21]}},{"key":"geid_130_1999","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[270,109,270,118]}},{"key":"geid_130_2000","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[271,67,271,76]}},{"key":"geid_130_2001","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[272,68,272,77]}},{"key":"geid_130_2002","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[273,71,273,80]}},{"key":"geid_130_2003","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[274,69,274,78]}},{"key":"geid_130_2004","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[275,43,275,52]}},{"key":"geid_130_2005","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[275,80,275,89]}},{"key":"geid_130_2006","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[276,43,276,52]}},{"key":"geid_130_2007","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[276,87,276,96]}},{"key":"geid_130_2008","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[277,43,277,52]}},{"key":"geid_130_2009","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[277,116,277,125]}},{"key":"geid_130_2010","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[278,76,278,85]}},{"key":"geid_130_2011","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[279,74,279,83]}},{"key":"geid_130_2012","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[280,82,280,91]}},{"key":"geid_130_2013","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[281,83,281,92]}},{"key":"geid_130_2014","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[282,92,282,101]}},{"key":"geid_130_2015","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[283,43,283,52]}},{"key":"geid_130_2016","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[283,105,283,114]}},{"key":"geid_130_2017","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[284,43,284,52]}},{"key":"geid_130_2018","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[284,125,284,134]}},{"key":"geid_130_2019","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[285,94,285,103]}},{"key":"geid_130_2020","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[286,86,286,95]}},{"key":"geid_130_2021","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[287,51,287,60]}},{"key":"geid_130_2022","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[288,52,288,61]}},{"key":"geid_130_2023","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[289,55,289,64]}},{"key":"geid_130_2024","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[290,53,290,62]}},{"key":"geid_130_2025","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[291,35,291,44]}},{"key":"geid_130_2026","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[291,64,291,73]}},{"key":"geid_130_2027","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[292,35,292,44]}},{"key":"geid_130_2028","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[292,71,292,80]}},{"key":"geid_130_2029","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[293,35,293,44]}},{"key":"geid_130_2030","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[293,100,293,109]}},{"key":"geid_130_2031","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[294,60,294,69]}},{"key":"geid_130_2032","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[295,58,295,67]}},{"key":"geid_130_2033","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[296,74,296,83]}},{"key":"geid_130_2034","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[297,75,297,84]}},{"key":"geid_130_2035","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[298,84,298,93]}},{"key":"geid_130_2036","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[299,35,299,44]}},{"key":"geid_130_2037","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[299,97,299,106]}},{"key":"geid_130_2038","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[300,35,300,44]}},{"key":"geid_130_2039","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[300,109,300,118]}},{"key":"geid_130_2040","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[301,86,301,95]}},{"key":"geid_130_2041","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[302,70,302,79]}},{"key":"geid_130_2042","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.test_project`/create_project().","attributes":{"type":"uses","at":[309,18,309,32]}},{"key":"geid_130_2043","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#get_full_file_path().","attributes":{"type":"uses","at":[310,47,310,65]}},{"key":"geid_130_2044","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python python-stdlib 3.11 pathlib/Path#","attributes":{"type":"uses","at":[312,19,312,23]}},{"key":"geid_130_2045","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python python-stdlib 3.11 pathlib/Path#","attributes":{"type":"uses","at":[312,47,312,51]}},{"key":"geid_130_2046","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python python-stdlib 3.11 pathlib/Path#","attributes":{"type":"uses","at":[313,19,313,23]}},{"key":"geid_130_2047","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_get_full_path_permutations().","target":"scip-python python python-stdlib 3.11 pathlib/Path#","attributes":{"type":"uses","at":[313,47,313,51]}},{"key":"geid_130_2048","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_save_file().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[316,72,316,81]}},{"key":"geid_130_2049","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_save_file().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[317,60,317,69]}},{"key":"geid_130_2050","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_save_file().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[318,61,318,70]}},{"key":"geid_130_2051","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_save_file().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[319,62,319,71]}},{"key":"geid_130_2052","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_save_file().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[320,67,320,76]}},{"key":"geid_130_2053","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_save_file().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[321,65,321,74]}},{"key":"geid_130_2054","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_save_file().","target":"scip-python python temp indexer `pilot.helpers.test_project`/test_root.","attributes":{"type":"uses","at":[323,64,323,73]}},{"key":"geid_130_2055","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_save_file().","target":"scip-python python python-stdlib 3.11 pathlib/Path#","attributes":{"type":"uses","at":[334,31,334,35]}},{"key":"geid_130_2056","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_save_file().","target":"scip-python python python-stdlib 3.11 pathlib/Path#","attributes":{"type":"uses","at":[336,31,336,35]}},{"key":"geid_130_2057","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_save_file().","target":"scip-python python temp indexer `pilot.helpers.test_project`/create_project().","attributes":{"type":"uses","at":[338,18,338,32]}},{"key":"geid_130_2058","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_save_file().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#save_file().","attributes":{"type":"uses","at":[341,16,341,25]}},{"key":"geid_130_2059","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProject#test_save_file().","target":"scip-python python python-stdlib 3.11 pathlib/Path#","attributes":{"type":"uses","at":[344,32,344,36]}},{"key":"geid_130_2060","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python temp indexer `pilot.helpers.test_project`/create_project().","attributes":{"type":"uses","at":[355,18,355,32]}},{"key":"geid_130_2061","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#set_root_path().","attributes":{"type":"uses","at":[357,16,357,29]}},{"key":"geid_130_2062","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[357,30,357,32]}},{"key":"geid_130_2063","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[357,33,357,37]}},{"key":"geid_130_2064","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[357,38,357,42]}},{"key":"geid_130_2065","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[357,43,357,45]}},{"key":"geid_130_2066","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[357,46,357,50]}},{"key":"geid_130_2067","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[357,51,357,58]}},{"key":"geid_130_2068","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python temp indexer `pilot.helpers.test_project`/","attributes":{"type":"uses","at":[357,59,357,67]}},{"key":"geid_130_2069","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#project_description.","attributes":{"type":"uses","at":[358,16,358,35]}},{"key":"geid_130_2070","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#development_plan.","attributes":{"type":"uses","at":[359,16,359,32]}},{"key":"geid_130_2071","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[366,14,366,16]}},{"key":"geid_130_2072","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[366,17,366,21]}},{"key":"geid_130_2073","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[366,22,366,26]}},{"key":"geid_130_2074","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#root_path.","attributes":{"type":"uses","at":[366,35,366,44]}},{"key":"geid_130_2075","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[367,14,367,16]}},{"key":"geid_130_2076","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[367,17,367,21]}},{"key":"geid_130_2077","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[367,22,367,26]}},{"key":"geid_130_2078","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#root_path.","attributes":{"type":"uses","at":[367,35,367,44]}},{"key":"geid_130_2079","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[368,27,368,29]}},{"key":"geid_130_2080","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[368,30,368,34]}},{"key":"geid_130_2081","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[368,35,368,39]}},{"key":"geid_130_2082","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[369,8,369,10]}},{"key":"geid_130_2083","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 os/makedirs().","attributes":{"type":"uses","at":[369,11,369,19]}},{"key":"geid_130_2084","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[370,8,370,10]}},{"key":"geid_130_2085","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 os/makedirs().","attributes":{"type":"uses","at":[370,11,370,19]}},{"key":"geid_130_2086","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[371,8,371,10]}},{"key":"geid_130_2087","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 os/makedirs().","attributes":{"type":"uses","at":[371,11,371,19]}},{"key":"geid_130_2088","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[372,8,372,10]}},{"key":"geid_130_2089","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 os/makedirs().","attributes":{"type":"uses","at":[372,11,372,19]}},{"key":"geid_130_2090","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[373,8,373,10]}},{"key":"geid_130_2091","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 os/makedirs().","attributes":{"type":"uses","at":[373,11,373,19]}},{"key":"geid_130_2092","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[375,12,375,14]}},{"key":"geid_130_2093","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 os/makedirs().","attributes":{"type":"uses","at":[375,15,375,23]}},{"key":"geid_130_2094","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[375,24,375,26]}},{"key":"geid_130_2095","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[375,27,375,31]}},{"key":"geid_130_2096","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[375,32,375,36]}},{"key":"geid_130_2097","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#root_path.","attributes":{"type":"uses","at":[375,45,375,54]}},{"key":"geid_130_2098","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[379,18,379,20]}},{"key":"geid_130_2099","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[379,21,379,25]}},{"key":"geid_130_2100","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[379,26,379,30]}},{"key":"geid_130_2101","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#root_path.","attributes":{"type":"uses","at":[379,39,379,48]}},{"key":"geid_130_2102","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 json/__init__:","attributes":{"type":"uses","at":[380,12,380,16]}},{"key":"geid_130_2103","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 json/dump().","attributes":{"type":"uses","at":[380,17,380,21]}},{"key":"geid_130_2104","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[382,12,382,14]}},{"key":"geid_130_2105","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[382,15,382,19]}},{"key":"geid_130_2106","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[382,20,382,24]}},{"key":"geid_130_2107","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[383,12,383,14]}},{"key":"geid_130_2108","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[383,15,383,19]}},{"key":"geid_130_2109","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[383,20,383,24]}},{"key":"geid_130_2110","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[384,12,384,14]}},{"key":"geid_130_2111","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[384,15,384,19]}},{"key":"geid_130_2112","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[384,20,384,24]}},{"key":"geid_130_2113","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[385,12,385,14]}},{"key":"geid_130_2114","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[385,15,385,19]}},{"key":"geid_130_2115","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[385,20,385,24]}},{"key":"geid_130_2116","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[386,12,386,14]}},{"key":"geid_130_2117","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[386,15,386,19]}},{"key":"geid_130_2118","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[386,20,386,24]}},{"key":"geid_130_2119","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[387,12,387,14]}},{"key":"geid_130_2120","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[387,15,387,19]}},{"key":"geid_130_2121","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[387,20,387,24]}},{"key":"geid_130_2122","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python python-stdlib 3.11 io/TextIOBase#write().","attributes":{"type":"uses","at":[390,21,390,26]}},{"key":"geid_130_2123","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#dot_pilot_gpt.","attributes":{"type":"uses","at":[393,16,393,29]}},{"key":"geid_130_2124","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#setup_method().","target":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#write_project().","attributes":{"type":"uses","at":[393,30,393,43]}},{"key":"geid_130_2125","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#test_get_directory_tree().","target":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#project.","attributes":{"type":"uses","at":[397,20,397,27]}},{"key":"geid_130_2126","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#test_get_directory_tree().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#get_directory_tree().","attributes":{"type":"uses","at":[397,28,397,46]}},{"key":"geid_130_2127","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#test_save_files_snapshot().","target":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#project.","attributes":{"type":"uses","at":[420,13,420,20]}},{"key":"geid_130_2128","source":"scip-python python temp indexer `pilot.helpers.test_project`/TestProjectFileLists#test_save_files_snapshot().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#save_files_snapshot().","attributes":{"type":"uses","at":[420,21,420,40]}},{"key":"geid_130_2129","source":"scip-python python temp indexer `pilot.helpers.test_cli`/__init__:","target":"scip-python python temp indexer `pilot.helpers.test_cli`/test_run_command_until_success_rejected().","attributes":{"type":"defines","at":[211,0,225,45]}},{"key":"geid_130_2130","source":"scip-python python temp indexer `pilot.helpers.test_cli`/__init__:","target":"scip-python python temp indexer `pilot.helpers.test_cli`/test_run_command_until_success_no().","attributes":{"type":"defines","at":[194,0,208,45]}},{"key":"geid_130_2131","source":"scip-python python temp indexer `pilot.helpers.test_cli`/__init__:","target":"scip-python python temp indexer `pilot.helpers.test_cli`/test_run_command_until_success_timed_out().","attributes":{"type":"defines","at":[176,0,191,43]}},{"key":"geid_130_2132","source":"scip-python python temp indexer `pilot.helpers.test_cli`/__init__:","target":"scip-python python temp indexer `pilot.helpers.test_cli`/test_run_command_until_success_error().","attributes":{"type":"defines","at":[158,0,173,44]}},{"key":"geid_130_2133","source":"scip-python python temp indexer `pilot.helpers.test_cli`/__init__:","target":"scip-python python temp indexer `pilot.helpers.test_cli`/test_run_command_until_success_app().","attributes":{"type":"defines","at":[141,0,155,45]}},{"key":"geid_130_2134","source":"scip-python python temp indexer `pilot.helpers.test_cli`/__init__:","target":"scip-python python temp indexer `pilot.helpers.test_cli`/test_run_command_until_success().","attributes":{"type":"defines","at":[125,0,138,45]}},{"key":"geid_130_2135","source":"scip-python python temp indexer `pilot.helpers.test_cli`/__init__:","target":"scip-python python temp indexer `pilot.helpers.test_cli`/test_execute_command_rejected_with_message().","attributes":{"type":"defines","at":[108,0,122,28]}},{"key":"geid_130_2136","source":"scip-python python temp indexer `pilot.helpers.test_cli`/__init__:","target":"scip-python python temp indexer `pilot.helpers.test_cli`/test_execute_command_rejected_with_no().","attributes":{"type":"defines","at":[91,0,105,28]}},{"key":"geid_130_2137","source":"scip-python python temp indexer `pilot.helpers.test_cli`/__init__:","target":"scip-python python temp indexer `pilot.helpers.test_cli`/test_execute_command_yes().","attributes":{"type":"defines","at":[70,0,88,56]}},{"key":"geid_130_2138","source":"scip-python python temp indexer `pilot.helpers.test_cli`/__init__:","target":"scip-python python temp indexer `pilot.helpers.test_cli`/test_execute_command_enter().","attributes":{"type":"defines","at":[49,0,67,56]}},{"key":"geid_130_2139","source":"scip-python python temp indexer `pilot.helpers.test_cli`/__init__:","target":"scip-python python temp indexer `pilot.helpers.test_cli`/mock_run_command().","attributes":{"type":"defines","at":[41,0,46,23]}},{"key":"geid_130_2140","source":"scip-python python temp indexer `pilot.helpers.test_cli`/__init__:","target":"scip-python python temp indexer `pilot.helpers.test_cli`/test_execute_command_timeout_exit_code().","attributes":{"type":"defines","at":[17,0,38,56]}},{"key":"geid_130_2141","source":"scip-python python temp indexer `pilot.helpers.test_cli`/__init__:","target":"scip-python python temp indexer `pilot.helpers.test_cli`/test_terminate_process_not_running().","attributes":{"type":"defines","at":[8,0,15,38]}},{"key":"geid_130_2142","source":"scip-python python temp indexer `pilot.helpers.test_cli`/__init__:","target":"scip-python python python-stdlib 3.11 platform/__init__:","attributes":{"type":"uses","at":[0,7,0,15]}},{"key":"geid_130_2143","source":"scip-python python temp indexer `pilot.helpers.test_cli`/__init__:","target":"scip-python python python-stdlib 3.11 `unittest.mock`/__init__:","attributes":{"type":"uses","at":[1,5,1,18]}},{"key":"geid_130_2144","source":"scip-python python temp indexer `pilot.helpers.test_cli`/__init__:","target":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","attributes":{"type":"uses","at":[5,5,5,16]}},{"key":"geid_130_2145","source":"scip-python python temp indexer `pilot.helpers.test_cli`/__init__:","target":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","attributes":{"type":"uses","at":[5,24,5,39]}},{"key":"geid_130_2146","source":"scip-python python temp indexer `pilot.helpers.test_cli`/__init__:","target":"scip-python python temp indexer `pilot.helpers.cli`/terminate_process().","attributes":{"type":"uses","at":[5,41,5,58]}},{"key":"geid_130_2147","source":"scip-python python temp indexer `pilot.helpers.test_cli`/__init__:","target":"scip-python python temp indexer `pilot.helpers.cli`/run_command_until_success().","attributes":{"type":"uses","at":[5,60,5,85]}},{"key":"geid_130_2148","source":"scip-python python temp indexer `pilot.helpers.test_cli`/__init__:","target":"scip-python python temp indexer `pilot.helpers.test_project`/__init__:","attributes":{"type":"uses","at":[6,5,6,25]}},{"key":"geid_130_2149","source":"scip-python python temp indexer `pilot.helpers.test_cli`/__init__:","target":"scip-python python temp indexer `pilot.helpers.test_project`/create_project().","attributes":{"type":"uses","at":[6,33,6,47]}},{"key":"geid_130_2150","source":"scip-python python temp indexer `pilot.helpers.test_cli`/test_terminate_process_not_running().","target":"scip-python python temp indexer `pilot.helpers.cli`/terminate_process().","attributes":{"type":"uses","at":[12,4,12,21]}},{"key":"geid_130_2151","source":"scip-python python temp indexer `pilot.helpers.test_cli`/test_execute_command_timeout_exit_code().","target":"scip-python python temp indexer `pilot.helpers.test_project`/create_project().","attributes":{"type":"uses","at":[23,14,23,28]}},{"key":"geid_130_2152","source":"scip-python python temp indexer `pilot.helpers.test_cli`/test_execute_command_timeout_exit_code().","target":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","attributes":{"type":"uses","at":[32,44,32,59]}},{"key":"geid_130_2153","source":"scip-python python temp indexer `pilot.helpers.test_cli`/test_execute_command_enter().","target":"scip-python python temp indexer `pilot.helpers.test_project`/create_project().","attributes":{"type":"uses","at":[55,14,55,28]}},{"key":"geid_130_2154","source":"scip-python python temp indexer `pilot.helpers.test_cli`/test_execute_command_enter().","target":"scip-python python temp indexer `pilot.helpers.test_cli`/mock_run_command().","attributes":{"type":"uses","at":[58,27,58,43]}},{"key":"geid_130_2155","source":"scip-python python temp indexer `pilot.helpers.test_cli`/test_execute_command_enter().","target":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","attributes":{"type":"uses","at":[61,44,61,59]}},{"key":"geid_130_2156","source":"scip-python python temp indexer `pilot.helpers.test_cli`/test_execute_command_yes().","target":"scip-python python temp indexer `pilot.helpers.test_project`/create_project().","attributes":{"type":"uses","at":[76,14,76,28]}},{"key":"geid_130_2157","source":"scip-python python temp indexer `pilot.helpers.test_cli`/test_execute_command_yes().","target":"scip-python python temp indexer `pilot.helpers.test_cli`/mock_run_command().","attributes":{"type":"uses","at":[79,27,79,43]}},{"key":"geid_130_2158","source":"scip-python python temp indexer `pilot.helpers.test_cli`/test_execute_command_yes().","target":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","attributes":{"type":"uses","at":[82,44,82,59]}},{"key":"geid_130_2159","source":"scip-python python temp indexer `pilot.helpers.test_cli`/test_execute_command_rejected_with_no().","target":"scip-python python temp indexer `pilot.helpers.test_project`/create_project().","attributes":{"type":"uses","at":[95,14,95,28]}},{"key":"geid_130_2160","source":"scip-python python temp indexer `pilot.helpers.test_cli`/test_execute_command_rejected_with_no().","target":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","attributes":{"type":"uses","at":[100,44,100,59]}},{"key":"geid_130_2161","source":"scip-python python temp indexer `pilot.helpers.test_cli`/test_execute_command_rejected_with_message().","target":"scip-python python temp indexer `pilot.helpers.test_project`/create_project().","attributes":{"type":"uses","at":[112,14,112,28]}},{"key":"geid_130_2162","source":"scip-python python temp indexer `pilot.helpers.test_cli`/test_execute_command_rejected_with_message().","target":"scip-python python temp indexer `pilot.helpers.cli`/execute_command().","attributes":{"type":"uses","at":[117,44,117,59]}},{"key":"geid_130_2163","source":"scip-python python temp indexer `pilot.helpers.test_cli`/test_run_command_until_success().","target":"scip-python python temp indexer `pilot.helpers.cli`/run_command_until_success().","attributes":{"type":"uses","at":[133,13,133,38]}},{"key":"geid_130_2164","source":"scip-python python temp indexer `pilot.helpers.test_cli`/test_run_command_until_success_app().","target":"scip-python python temp indexer `pilot.helpers.cli`/run_command_until_success().","attributes":{"type":"uses","at":[150,13,150,38]}},{"key":"geid_130_2165","source":"scip-python python temp indexer `pilot.helpers.test_cli`/test_run_command_until_success_error().","target":"scip-python python temp indexer `pilot.helpers.cli`/run_command_until_success().","attributes":{"type":"uses","at":[168,13,168,38]}},{"key":"geid_130_2166","source":"scip-python python temp indexer `pilot.helpers.test_cli`/test_run_command_until_success_timed_out().","target":"scip-python python temp indexer `pilot.helpers.cli`/run_command_until_success().","attributes":{"type":"uses","at":[186,13,186,38]}},{"key":"geid_130_2167","source":"scip-python python temp indexer `pilot.helpers.test_cli`/test_run_command_until_success_no().","target":"scip-python python temp indexer `pilot.helpers.cli`/run_command_until_success().","attributes":{"type":"uses","at":[202,13,202,38]}},{"key":"geid_130_2168","source":"scip-python python temp indexer `pilot.helpers.test_cli`/test_run_command_until_success_rejected().","target":"scip-python python temp indexer `pilot.helpers.cli`/run_command_until_success().","attributes":{"type":"uses","at":[219,13,219,38]}},{"key":"geid_130_2169","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#","target":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#get_architecture().","attributes":{"type":"defines","at":[19,4,61,14]}},{"key":"geid_130_2170","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#","target":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#__init__().","attributes":{"type":"defines","at":[15,4,17,38]}},{"key":"geid_130_2171","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#","attributes":{"type":"defines","at":[14,0,61,14]}},{"key":"geid_130_2172","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/__init__:","attributes":{"type":"uses","at":[0,5,0,16]}},{"key":"geid_130_2173","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/step_already_finished().","attributes":{"type":"uses","at":[0,24,0,45]}},{"key":"geid_130_2174","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agent`/__init__:","attributes":{"type":"uses","at":[1,5,1,18]}},{"key":"geid_130_2175","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#","attributes":{"type":"uses","at":[1,26,1,31]}},{"key":"geid_130_2176","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/__init__:","target":"scip-python python python-stdlib 3.11 json/__init__:","attributes":{"type":"uses","at":[2,7,2,11]}},{"key":"geid_130_2177","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/__init__:","attributes":{"type":"uses","at":[3,5,3,16]}},{"key":"geid_130_2178","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/color_green_bold.","attributes":{"type":"uses","at":[3,24,3,40]}},{"key":"geid_130_2179","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/__init__:","attributes":{"type":"uses","at":[4,5,4,25]}},{"key":"geid_130_2180","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/ARCHITECTURE.","attributes":{"type":"uses","at":[4,33,4,45]}},{"key":"geid_130_2181","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/__init__:","attributes":{"type":"uses","at":[6,5,6,16]}},{"key":"geid_130_2182","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/should_execute_step().","attributes":{"type":"uses","at":[6,24,6,43]}},{"key":"geid_130_2183","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/generate_app_data().","attributes":{"type":"uses","at":[6,45,6,62]}},{"key":"geid_130_2184","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/__init__:","attributes":{"type":"uses","at":[7,5,7,22]}},{"key":"geid_130_2185","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/save_progress().","attributes":{"type":"uses","at":[7,30,7,43]}},{"key":"geid_130_2186","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/get_progress_steps().","attributes":{"type":"uses","at":[7,45,7,63]}},{"key":"geid_130_2187","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/__init__:","target":"scip-python python temp indexer `pilot.logger.logger`/__init__:","attributes":{"type":"uses","at":[8,5,8,18]}},{"key":"geid_130_2188","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/__init__:","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[8,26,8,32]}},{"key":"geid_130_2189","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/__init__:","attributes":{"type":"uses","at":[9,5,9,23]}},{"key":"geid_130_2190","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","attributes":{"type":"uses","at":[9,31,9,41]}},{"key":"geid_130_2191","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#","attributes":{"type":"uses","at":[14,16,14,21]}},{"key":"geid_130_2192","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#__init__().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#__init__().","attributes":{"type":"uses","at":[16,16,16,24]}},{"key":"geid_130_2193","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#get_architecture().","target":"scip-python python python-stdlib 3.11 json/__init__:","attributes":{"type":"uses","at":[20,14,20,18]}},{"key":"geid_130_2194","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#get_architecture().","target":"scip-python python python-stdlib 3.11 json/dumps().","attributes":{"type":"uses","at":[20,19,20,24]}},{"key":"geid_130_2195","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#get_architecture().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[24,13,24,20]}},{"key":"geid_130_2196","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#get_architecture().","target":"scip-python python temp indexer `pilot.helpers.agents.architect`/ARCHITECTURE_STEP.","attributes":{"type":"uses","at":[24,36,24,53]}},{"key":"geid_130_2197","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#get_architecture().","target":"scip-python python temp indexer `pilot.database.database`/get_progress_steps().","attributes":{"type":"uses","at":[27,15,27,33]}},{"key":"geid_130_2198","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#get_architecture().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[27,39,27,46]}},{"key":"geid_130_2199","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#get_architecture().","target":"scip-python python temp indexer `pilot.helpers.agents.architect`/ARCHITECTURE_STEP.","attributes":{"type":"uses","at":[27,63,27,80]}},{"key":"geid_130_2200","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#get_architecture().","target":"scip-python python temp indexer `pilot.utils.utils`/should_execute_step().","attributes":{"type":"uses","at":[28,24,28,43]}},{"key":"geid_130_2201","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#get_architecture().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[28,49,28,56]}},{"key":"geid_130_2202","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#get_architecture().","target":"scip-python python temp indexer `pilot.helpers.agents.architect`/ARCHITECTURE_STEP.","attributes":{"type":"uses","at":[28,71,28,88]}},{"key":"geid_130_2203","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#get_architecture().","target":"scip-python python temp indexer `pilot.utils.utils`/step_already_finished().","attributes":{"type":"uses","at":[29,12,29,33]}},{"key":"geid_130_2204","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#get_architecture().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[29,39,29,46]}},{"key":"geid_130_2205","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#get_architecture().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[30,17,30,24]}},{"key":"geid_130_2206","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#get_architecture().","target":"scip-python python temp indexer `pilot.utils.style`/color_green_bold.","attributes":{"type":"uses","at":[34,14,34,30]}},{"key":"geid_130_2207","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#get_architecture().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[35,8,35,14]}},{"key":"geid_130_2208","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#get_architecture().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[35,15,35,19]}},{"key":"geid_130_2209","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#get_architecture().","target":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#convo_architecture.","attributes":{"type":"uses","at":[37,13,37,31]}},{"key":"geid_130_2210","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#get_architecture().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","attributes":{"type":"uses","at":[37,34,37,44]}},{"key":"geid_130_2211","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#get_architecture().","target":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#convo_architecture.","attributes":{"type":"uses","at":[38,28,38,46]}},{"key":"geid_130_2212","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#get_architecture().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","attributes":{"type":"uses","at":[38,47,38,59]}},{"key":"geid_130_2213","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#get_architecture().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[39,26,39,33]}},{"key":"geid_130_2214","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#get_architecture().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[40,33,40,40]}},{"key":"geid_130_2215","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#get_architecture().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[41,36,41,43]}},{"key":"geid_130_2216","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#get_architecture().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[42,34,42,41]}},{"key":"geid_130_2217","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#get_architecture().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[43,32,43,39]}},{"key":"geid_130_2218","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#get_architecture().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[44,30,44,37]}},{"key":"geid_130_2219","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#get_architecture().","target":"scip-python python temp indexer `pilot.const.function_calls`/ARCHITECTURE.","attributes":{"type":"uses","at":[44,57,44,69]}},{"key":"geid_130_2220","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#get_architecture().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[45,13,45,20]}},{"key":"geid_130_2221","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#get_architecture().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[48,16,48,23]}},{"key":"geid_130_2222","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#get_architecture().","target":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#convo_architecture.","attributes":{"type":"uses","at":[49,32,49,50]}},{"key":"geid_130_2223","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#get_architecture().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#get_additional_info_from_user().","attributes":{"type":"uses","at":[49,51,49,80]}},{"key":"geid_130_2224","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#get_architecture().","target":"scip-python python temp indexer `pilot.const.function_calls`/ARCHITECTURE.","attributes":{"type":"uses","at":[49,81,49,93]}},{"key":"geid_130_2225","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#get_architecture().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[51,21,51,28]}},{"key":"geid_130_2226","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#get_architecture().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[53,8,53,14]}},{"key":"geid_130_2227","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#get_architecture().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[53,15,53,19]}},{"key":"geid_130_2228","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#get_architecture().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[53,48,53,55]}},{"key":"geid_130_2229","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#get_architecture().","target":"scip-python python temp indexer `pilot.database.database`/save_progress().","attributes":{"type":"uses","at":[55,8,55,21]}},{"key":"geid_130_2230","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#get_architecture().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[55,27,55,34]}},{"key":"geid_130_2231","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#get_architecture().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[55,56,55,63]}},{"key":"geid_130_2232","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#get_architecture().","target":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#convo_architecture.","attributes":{"type":"uses","at":[56,29,56,47]}},{"key":"geid_130_2233","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#get_architecture().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#messages.","attributes":{"type":"uses","at":[56,48,56,56]}},{"key":"geid_130_2234","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#get_architecture().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[57,33,57,40]}},{"key":"geid_130_2235","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#get_architecture().","target":"scip-python python temp indexer `pilot.utils.utils`/generate_app_data().","attributes":{"type":"uses","at":[58,24,58,41]}},{"key":"geid_130_2236","source":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#get_architecture().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[58,47,58,54]}},{"key":"geid_130_2237","source":"scip-python python temp indexer `pilot.helpers.agents.codemonkey`/CodeMonkey#","target":"scip-python python temp indexer `pilot.helpers.agents.codemonkey`/CodeMonkey#implement_code_changes().","attributes":{"type":"defines","at":[10,4,37,20]}},{"key":"geid_130_2238","source":"scip-python python temp indexer `pilot.helpers.agents.codemonkey`/CodeMonkey#","target":"scip-python python temp indexer `pilot.helpers.agents.codemonkey`/CodeMonkey#__init__().","attributes":{"type":"defines","at":[6,4,8,34]}},{"key":"geid_130_2239","source":"scip-python python temp indexer `pilot.helpers.agents.codemonkey`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.codemonkey`/CodeMonkey#","attributes":{"type":"defines","at":[5,0,37,20]}},{"key":"geid_130_2240","source":"scip-python python temp indexer `pilot.helpers.agents.codemonkey`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/__init__:","attributes":{"type":"uses","at":[0,5,0,25]}},{"key":"geid_130_2241","source":"scip-python python temp indexer `pilot.helpers.agents.codemonkey`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/GET_FILES.","attributes":{"type":"uses","at":[0,33,0,42]}},{"key":"geid_130_2242","source":"scip-python python temp indexer `pilot.helpers.agents.codemonkey`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/IMPLEMENT_CHANGES.","attributes":{"type":"uses","at":[0,44,0,61]}},{"key":"geid_130_2243","source":"scip-python python temp indexer `pilot.helpers.agents.codemonkey`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/__init__:","attributes":{"type":"uses","at":[1,5,1,23]}},{"key":"geid_130_2244","source":"scip-python python temp indexer `pilot.helpers.agents.codemonkey`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","attributes":{"type":"uses","at":[1,31,1,41]}},{"key":"geid_130_2245","source":"scip-python python temp indexer `pilot.helpers.agents.codemonkey`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agent`/__init__:","attributes":{"type":"uses","at":[2,5,2,18]}},{"key":"geid_130_2246","source":"scip-python python temp indexer `pilot.helpers.agents.codemonkey`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#","attributes":{"type":"uses","at":[2,26,2,31]}},{"key":"geid_130_2247","source":"scip-python python temp indexer `pilot.helpers.agents.codemonkey`/CodeMonkey#","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#","attributes":{"type":"uses","at":[5,17,5,22]}},{"key":"geid_130_2248","source":"scip-python python temp indexer `pilot.helpers.agents.codemonkey`/CodeMonkey#__init__().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#__init__().","attributes":{"type":"uses","at":[7,16,7,24]}},{"key":"geid_130_2249","source":"scip-python python temp indexer `pilot.helpers.agents.codemonkey`/CodeMonkey#implement_code_changes().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","attributes":{"type":"uses","at":[12,20,12,30]}},{"key":"geid_130_2250","source":"scip-python python temp indexer `pilot.helpers.agents.codemonkey`/CodeMonkey#implement_code_changes().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","attributes":{"type":"uses","at":[21,29,21,41]}},{"key":"geid_130_2251","source":"scip-python python temp indexer `pilot.helpers.agents.codemonkey`/CodeMonkey#implement_code_changes().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[26,35,26,42]}},{"key":"geid_130_2252","source":"scip-python python temp indexer `pilot.helpers.agents.codemonkey`/CodeMonkey#implement_code_changes().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[27,26,27,33]}},{"key":"geid_130_2253","source":"scip-python python temp indexer `pilot.helpers.agents.codemonkey`/CodeMonkey#implement_code_changes().","target":"scip-python python temp indexer `pilot.const.function_calls`/IMPLEMENT_CHANGES.","attributes":{"type":"uses","at":[28,11,28,28]}},{"key":"geid_130_2254","source":"scip-python python temp indexer `pilot.helpers.agents.codemonkey`/CodeMonkey#implement_code_changes().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#remove_last_x_messages().","attributes":{"type":"uses","at":[29,14,29,36]}},{"key":"geid_130_2255","source":"scip-python python temp indexer `pilot.helpers.agents.codemonkey`/CodeMonkey#implement_code_changes().","target":"scip-python python temp indexer `pilot.helpers.agents.codemonkey`/CodeMonkey#developer.","attributes":{"type":"uses","at":[31,23,31,32]}},{"key":"geid_130_2256","source":"scip-python python temp indexer `pilot.helpers.agents.codemonkey`/CodeMonkey#implement_code_changes().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[33,16,33,23]}},{"key":"geid_130_2257","source":"scip-python python temp indexer `pilot.helpers.agents.codemonkey`/CodeMonkey#implement_code_changes().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[33,56,33,63]}},{"key":"geid_130_2258","source":"scip-python python temp indexer `pilot.helpers.agents.codemonkey`/CodeMonkey#implement_code_changes().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[35,21,35,28]}},{"key":"geid_130_2259","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#implement_step().","attributes":{"type":"defines","at":[640,4,660,12]}},{"key":"geid_130_2260","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#test_code_changes().","attributes":{"type":"defines","at":[610,4,638,31]}},{"key":"geid_130_2261","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#install_technology().","attributes":{"type":"defines","at":[578,4,608,27]}},{"key":"geid_130_2262","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#set_up_environment().","attributes":{"type":"defines","at":[517,4,573,10]}},{"key":"geid_130_2263","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#continue_development().","attributes":{"type":"defines","at":[452,4,515,104]}},{"key":"geid_130_2264","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#execute_task().","attributes":{"type":"defines","at":[377,4,450,109]}},{"key":"geid_130_2265","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#dev_help_needed().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#extract_substring().","attributes":{"type":"defines","at":[352,8,359,24]}},{"key":"geid_130_2266","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#dev_help_needed().","attributes":{"type":"defines","at":[339,4,375,54]}},{"key":"geid_130_2267","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#should_retry_step_implementation().","attributes":{"type":"defines","at":[319,4,337,48]}},{"key":"geid_130_2268","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#task_postprocessing().","attributes":{"type":"defines","at":[296,4,317,26]}},{"key":"geid_130_2269","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#get_run_command().","attributes":{"type":"defines","at":[280,4,294,60]}},{"key":"geid_130_2270","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_test().","attributes":{"type":"defines","at":[256,4,278,25]}},{"key":"geid_130_2271","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_human_intervention().","attributes":{"type":"defines","at":[201,4,254,27]}},{"key":"geid_130_2272","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_command_run().","attributes":{"type":"defines","at":[181,4,199,93]}},{"key":"geid_130_2273","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_code_change().","attributes":{"type":"defines","at":[157,4,179,32]}},{"key":"geid_130_2274","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#replace_old_code_comments().","attributes":{"type":"defines","at":[141,4,155,34]}},{"key":"geid_130_2275","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#implement_task().","attributes":{"type":"defines","at":[81,4,139,21]}},{"key":"geid_130_2276","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#start_coding().","attributes":{"type":"defines","at":[41,4,79,44]}},{"key":"geid_130_2277","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#__init__().","attributes":{"type":"defines","at":[35,4,39,38]}},{"key":"geid_130_2278","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#","attributes":{"type":"defines","at":[34,0,660,12]}},{"key":"geid_130_2279","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python python-stdlib 3.11 platform/__init__:","attributes":{"type":"uses","at":[0,7,0,15]}},{"key":"geid_130_2280","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python python-stdlib 3.11 uuid/__init__:","attributes":{"type":"uses","at":[1,7,1,11]}},{"key":"geid_130_2281","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python python-stdlib 3.11 re/__init__:","attributes":{"type":"uses","at":[2,7,2,9]}},{"key":"geid_130_2282","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.const.messages`/__init__:","attributes":{"type":"uses","at":[4,5,4,19]}},{"key":"geid_130_2283","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.const.messages`/WHEN_USER_DONE.","attributes":{"type":"uses","at":[4,27,4,41]}},{"key":"geid_130_2284","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/__init__:","attributes":{"type":"uses","at":[5,5,5,16]}},{"key":"geid_130_2285","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/color_green.","attributes":{"type":"uses","at":[6,4,6,15]}},{"key":"geid_130_2286","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/color_green_bold.","attributes":{"type":"uses","at":[7,4,7,20]}},{"key":"geid_130_2287","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/color_red.","attributes":{"type":"uses","at":[8,4,8,13]}},{"key":"geid_130_2288","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/color_red_bold.","attributes":{"type":"uses","at":[9,4,9,18]}},{"key":"geid_130_2289","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/color_yellow_bold.","attributes":{"type":"uses","at":[10,4,10,21]}},{"key":"geid_130_2290","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/color_cyan_bold.","attributes":{"type":"uses","at":[11,4,11,19]}},{"key":"geid_130_2291","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/color_white_bold.","attributes":{"type":"uses","at":[12,4,12,20]}},{"key":"geid_130_2292","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.helpers.exceptions.tokenlimiterror`/__init__:","attributes":{"type":"uses","at":[14,5,14,39]}},{"key":"geid_130_2293","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.helpers.exceptions.tokenlimiterror`/TokenLimitError#","attributes":{"type":"uses","at":[14,47,14,62]}},{"key":"geid_130_2294","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.const.code_execution`/__init__:","attributes":{"type":"uses","at":[15,5,15,25]}},{"key":"geid_130_2295","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.const.code_execution`/MAX_COMMAND_DEBUG_TRIES.","attributes":{"type":"uses","at":[15,33,15,56]}},{"key":"geid_130_2296","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.helpers.exceptions.toodeeprecursionerror`/__init__:","attributes":{"type":"uses","at":[16,5,16,45]}},{"key":"geid_130_2297","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.helpers.exceptions.toodeeprecursionerror`/TooDeepRecursionError#","attributes":{"type":"uses","at":[16,53,16,74]}},{"key":"geid_130_2298","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.helpers.debugger`/__init__:","attributes":{"type":"uses","at":[17,5,17,21]}},{"key":"geid_130_2299","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#","attributes":{"type":"uses","at":[17,29,17,37]}},{"key":"geid_130_2300","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.utils.questionary`/__init__:","attributes":{"type":"uses","at":[18,5,18,22]}},{"key":"geid_130_2301","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.utils.questionary`/styled_text().","attributes":{"type":"uses","at":[18,30,18,41]}},{"key":"geid_130_2302","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/__init__:","attributes":{"type":"uses","at":[19,5,19,16]}},{"key":"geid_130_2303","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/step_already_finished().","attributes":{"type":"uses","at":[19,24,19,45]}},{"key":"geid_130_2304","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.codemonkey`/__init__:","attributes":{"type":"uses","at":[20,5,20,30]}},{"key":"geid_130_2305","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.codemonkey`/CodeMonkey#","attributes":{"type":"uses","at":[20,38,20,48]}},{"key":"geid_130_2306","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.logger.logger`/__init__:","attributes":{"type":"uses","at":[21,5,21,18]}},{"key":"geid_130_2307","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[21,26,21,32]}},{"key":"geid_130_2308","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agent`/__init__:","attributes":{"type":"uses","at":[22,5,22,18]}},{"key":"geid_130_2309","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#","attributes":{"type":"uses","at":[22,26,22,31]}},{"key":"geid_130_2310","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/__init__:","attributes":{"type":"uses","at":[23,5,23,23]}},{"key":"geid_130_2311","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","attributes":{"type":"uses","at":[23,31,23,41]}},{"key":"geid_130_2312","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/__init__:","attributes":{"type":"uses","at":[24,5,24,16]}},{"key":"geid_130_2313","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/should_execute_step().","attributes":{"type":"uses","at":[24,24,24,43]}},{"key":"geid_130_2314","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/array_of_objects_to_string().","attributes":{"type":"uses","at":[24,45,24,71]}},{"key":"geid_130_2315","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/generate_app_data().","attributes":{"type":"uses","at":[24,73,24,90]}},{"key":"geid_130_2316","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","attributes":{"type":"uses","at":[25,5,25,16]}},{"key":"geid_130_2317","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.helpers.cli`/run_command_until_success().","attributes":{"type":"uses","at":[25,24,25,49]}},{"key":"geid_130_2318","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.helpers.cli`/execute_command_and_check_cli_response().","attributes":{"type":"uses","at":[25,51,25,89]}},{"key":"geid_130_2319","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.helpers.cli`/running_processes.running_processes.","attributes":{"type":"uses","at":[25,91,25,108]}},{"key":"geid_130_2320","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/__init__:","attributes":{"type":"uses","at":[26,5,26,25]}},{"key":"geid_130_2321","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/FILTER_OS_TECHNOLOGIES.","attributes":{"type":"uses","at":[26,33,26,55]}},{"key":"geid_130_2322","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/EXECUTE_COMMANDS.","attributes":{"type":"uses","at":[26,57,26,73]}},{"key":"geid_130_2323","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/GET_TEST_TYPE.","attributes":{"type":"uses","at":[26,75,26,88]}},{"key":"geid_130_2324","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/IMPLEMENT_TASK.","attributes":{"type":"uses","at":[26,90,26,104]}},{"key":"geid_130_2325","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/COMMAND_TO_RUN.","attributes":{"type":"uses","at":[27,4,27,18]}},{"key":"geid_130_2326","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/GET_FULLY_CODED_FILE.","attributes":{"type":"uses","at":[27,20,27,40]}},{"key":"geid_130_2327","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/__init__:","attributes":{"type":"uses","at":[28,5,28,22]}},{"key":"geid_130_2328","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/save_progress().","attributes":{"type":"uses","at":[28,30,28,43]}},{"key":"geid_130_2329","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/get_progress_steps().","attributes":{"type":"uses","at":[28,45,28,63]}},{"key":"geid_130_2330","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/update_app_status().","attributes":{"type":"uses","at":[28,65,28,82]}},{"key":"geid_130_2331","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/__init__:","attributes":{"type":"uses","at":[29,5,29,16]}},{"key":"geid_130_2332","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/get_os_info().","attributes":{"type":"uses","at":[29,24,29,35]}},{"key":"geid_130_2333","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#","attributes":{"type":"uses","at":[34,16,34,21]}},{"key":"geid_130_2334","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#__init__().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#__init__().","attributes":{"type":"uses","at":[36,16,36,24]}},{"key":"geid_130_2335","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#__init__().","target":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#","attributes":{"type":"uses","at":[39,24,39,32]}},{"key":"geid_130_2336","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#start_coding().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[42,20,42,27]}},{"key":"geid_130_2337","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#start_coding().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[43,17,43,24]}},{"key":"geid_130_2338","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#start_coding().","target":"scip-python python temp indexer `pilot.database.database`/update_app_status().","attributes":{"type":"uses","at":[44,12,44,29]}},{"key":"geid_130_2339","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#start_coding().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[44,35,44,42]}},{"key":"geid_130_2340","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#start_coding().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[44,64,44,71]}},{"key":"geid_130_2341","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#start_coding().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[46,20,46,27]}},{"key":"geid_130_2342","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#start_coding().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[47,21,47,28]}},{"key":"geid_130_2343","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#start_coding().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[47,61,47,68]}},{"key":"geid_130_2344","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#start_coding().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[47,122,47,129]}},{"key":"geid_130_2345","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#start_coding().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[47,144,47,151]}},{"key":"geid_130_2346","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#start_coding().","target":"scip-python python temp indexer `pilot.utils.style`/color_green_bold.","attributes":{"type":"uses","at":[50,14,50,30]}},{"key":"geid_130_2347","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#start_coding().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[51,8,51,14]}},{"key":"geid_130_2348","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#start_coding().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[51,15,51,19]}},{"key":"geid_130_2349","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#start_coding().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[53,31,53,38]}},{"key":"geid_130_2350","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#start_coding().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[57,42,57,49]}},{"key":"geid_130_2351","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#start_coding().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[62,25,62,32]}},{"key":"geid_130_2352","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#start_coding().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#implement_task().","attributes":{"type":"uses","at":[65,17,65,31]}},{"key":"geid_130_2353","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#start_coding().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[68,13,68,20]}},{"key":"geid_130_2354","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#start_coding().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[69,13,69,20]}},{"key":"geid_130_2355","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#start_coding().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[70,20,70,27]}},{"key":"geid_130_2356","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#start_coding().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[71,17,71,24]}},{"key":"geid_130_2357","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#start_coding().","target":"scip-python python temp indexer `pilot.database.database`/update_app_status().","attributes":{"type":"uses","at":[72,12,72,29]}},{"key":"geid_130_2358","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#start_coding().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[72,35,72,42]}},{"key":"geid_130_2359","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#start_coding().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[72,64,72,71]}},{"key":"geid_130_2360","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#start_coding().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[74,12,74,18]}},{"key":"geid_130_2361","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#start_coding().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[74,19,74,23]}},{"key":"geid_130_2362","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#start_coding().","target":"scip-python python temp indexer `pilot.utils.style`/color_green_bold.","attributes":{"type":"uses","at":[75,18,75,34]}},{"key":"geid_130_2363","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#start_coding().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[78,12,78,18]}},{"key":"geid_130_2364","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#start_coding().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[78,19,78,23]}},{"key":"geid_130_2365","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#start_coding().","target":"scip-python python temp indexer `pilot.utils.style`/color_green_bold.","attributes":{"type":"uses","at":[79,18,79,34]}},{"key":"geid_130_2366","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#implement_task().","target":"scip-python python temp indexer `pilot.utils.style`/color_green_bold.","attributes":{"type":"uses","at":[82,14,82,30]}},{"key":"geid_130_2367","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#implement_task().","target":"scip-python python temp indexer `pilot.utils.style`/color_green.","attributes":{"type":"uses","at":[82,66,82,77]}},{"key":"geid_130_2368","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#implement_task().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[83,13,83,20]}},{"key":"geid_130_2369","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#implement_task().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","attributes":{"type":"uses","at":[85,25,85,35]}},{"key":"geid_130_2370","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#implement_task().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","attributes":{"type":"uses","at":[86,23,86,35]}},{"key":"geid_130_2371","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#implement_task().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[87,25,87,32]}},{"key":"geid_130_2372","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#implement_task().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[88,29,88,36]}},{"key":"geid_130_2373","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#implement_task().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[89,32,89,39]}},{"key":"geid_130_2374","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#implement_task().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[90,35,90,42]}},{"key":"geid_130_2375","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#implement_task().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[91,33,91,40]}},{"key":"geid_130_2376","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#implement_task().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[92,31,92,38]}},{"key":"geid_130_2377","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#implement_task().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[93,33,93,40]}},{"key":"geid_130_2378","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#implement_task().","target":"scip-python python temp indexer `pilot.utils.utils`/array_of_objects_to_string().","attributes":{"type":"uses","at":[94,42,94,68]}},{"key":"geid_130_2379","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#implement_task().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[95,35,95,42]}},{"key":"geid_130_2380","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#implement_task().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[97,38,97,45]}},{"key":"geid_130_2381","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#implement_task().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[98,26,98,33]}},{"key":"geid_130_2382","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#implement_task().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[99,43,99,50]}},{"key":"geid_130_2383","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#implement_task().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","attributes":{"type":"uses","at":[102,34,102,46]}},{"key":"geid_130_2384","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#implement_task().","target":"scip-python python temp indexer `pilot.helpers.cli`/running_processes.running_processes.","attributes":{"type":"uses","at":[103,33,103,50]}},{"key":"geid_130_2385","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#implement_task().","target":"scip-python python python-stdlib 3.11 platform/__init__:","attributes":{"type":"uses","at":[104,18,104,26]}},{"key":"geid_130_2386","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#implement_task().","target":"scip-python python python-stdlib 3.11 platform/system().","attributes":{"type":"uses","at":[104,27,104,33]}},{"key":"geid_130_2387","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#implement_task().","target":"scip-python python temp indexer `pilot.const.function_calls`/IMPLEMENT_TASK.","attributes":{"type":"uses","at":[105,11,105,25]}},{"key":"geid_130_2388","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#implement_task().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#remove_last_x_messages().","attributes":{"type":"uses","at":[107,23,107,45]}},{"key":"geid_130_2389","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#implement_task().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#execute_task().","attributes":{"type":"uses","at":[112,26,112,38]}},{"key":"geid_130_2390","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#implement_task().","target":"scip-python python python-stdlib 3.11 platform/__init__:","attributes":{"type":"uses","at":[124,31,124,39]}},{"key":"geid_130_2391","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#implement_task().","target":"scip-python python python-stdlib 3.11 platform/system().","attributes":{"type":"uses","at":[124,40,124,46]}},{"key":"geid_130_2392","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#implement_task().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#remove_last_x_messages().","attributes":{"type":"uses","at":[132,31,132,53]}},{"key":"geid_130_2393","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#implement_task().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","attributes":{"type":"uses","at":[134,42,134,54]}},{"key":"geid_130_2394","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#implement_task().","target":"scip-python python temp indexer `pilot.const.function_calls`/IMPLEMENT_TASK.","attributes":{"type":"uses","at":[134,102,134,116]}},{"key":"geid_130_2395","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#implement_task().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[138,16,138,22]}},{"key":"geid_130_2396","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#implement_task().","target":"scip-python python python-stdlib 3.11 logging/Logger#warning().","attributes":{"type":"uses","at":[138,23,138,30]}},{"key":"geid_130_2397","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#replace_old_code_comments().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","attributes":{"type":"uses","at":[146,41,146,51]}},{"key":"geid_130_2398","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#replace_old_code_comments().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","attributes":{"type":"uses","at":[147,67,147,79]}},{"key":"geid_130_2399","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#replace_old_code_comments().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[149,37,149,44]}},{"key":"geid_130_2400","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#replace_old_code_comments().","target":"scip-python python temp indexer `pilot.const.function_calls`/GET_FULLY_CODED_FILE.","attributes":{"type":"uses","at":[151,23,151,43]}},{"key":"geid_130_2401","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_code_change().","target":"scip-python python temp indexer `pilot.helpers.agents.codemonkey`/CodeMonkey#","attributes":{"type":"uses","at":[161,26,161,36]}},{"key":"geid_130_2402","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_code_change().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[161,42,161,49]}},{"key":"geid_130_2403","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_code_change().","target":"scip-python python temp indexer `pilot.helpers.agents.codemonkey`/CodeMonkey#implement_code_changes().","attributes":{"type":"uses","at":[162,40,162,62]}},{"key":"geid_130_2404","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_code_change().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#test_code_changes().","attributes":{"type":"uses","at":[165,28,165,45]}},{"key":"geid_130_2405","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_code_change().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#replace_old_code_comments().","attributes":{"type":"uses","at":[175,20,175,45]}},{"key":"geid_130_2406","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_code_change().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[177,13,177,20]}},{"key":"geid_130_2407","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_command_run().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[182,8,182,14]}},{"key":"geid_130_2408","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_command_run().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[182,15,182,19]}},{"key":"geid_130_2409","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_command_run().","target":"scip-python python temp indexer `pilot.helpers.cli`/run_command_until_success().","attributes":{"type":"uses","at":[194,15,194,40]}},{"key":"geid_130_2410","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_human_intervention().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[210,8,210,14]}},{"key":"geid_130_2411","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_human_intervention().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[210,15,210,19]}},{"key":"geid_130_2412","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_human_intervention().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#run_command.","attributes":{"type":"uses","at":[211,31,211,42]}},{"key":"geid_130_2413","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_human_intervention().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#run_command.","attributes":{"type":"uses","at":[211,78,211,89]}},{"key":"geid_130_2414","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_human_intervention().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#run_command.","attributes":{"type":"uses","at":[217,24,217,35]}},{"key":"geid_130_2415","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_human_intervention().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#get_run_command().","attributes":{"type":"uses","at":[218,21,218,36]}},{"key":"geid_130_2416","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_human_intervention().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#run_command.","attributes":{"type":"uses","at":[220,20,220,31]}},{"key":"geid_130_2417","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_human_intervention().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[221,25,221,32]}},{"key":"geid_130_2418","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_human_intervention().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[221,69,221,76]}},{"key":"geid_130_2419","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_human_intervention().","target":"scip-python python temp indexer `pilot.utils.style`/color_yellow_bold.","attributes":{"type":"uses","at":[222,54,222,71]}},{"key":"geid_130_2420","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_human_intervention().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#run_command.","attributes":{"type":"uses","at":[222,163,222,174]}},{"key":"geid_130_2421","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_human_intervention().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#run_command.","attributes":{"type":"uses","at":[224,31,224,42]}},{"key":"geid_130_2422","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_human_intervention().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[226,28,226,35]}},{"key":"geid_130_2423","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_human_intervention().","target":"scip-python python temp indexer `pilot.helpers.cli`/run_command_until_success().","attributes":{"type":"uses","at":[229,38,229,63]}},{"key":"geid_130_2424","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_human_intervention().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#run_command.","attributes":{"type":"uses","at":[230,69,230,80]}},{"key":"geid_130_2425","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_human_intervention().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[242,12,242,18]}},{"key":"geid_130_2426","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_human_intervention().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[242,19,242,23]}},{"key":"geid_130_2427","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_human_intervention().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#debugger.","attributes":{"type":"uses","at":[249,43,249,51]}},{"key":"geid_130_2428","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_human_intervention().","target":"scip-python python temp indexer `pilot.helpers.debugger`/Debugger#debug().","attributes":{"type":"uses","at":[249,52,249,57]}},{"key":"geid_130_2429","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_test().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[262,12,262,18]}},{"key":"geid_130_2430","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_test().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[262,19,262,23]}},{"key":"geid_130_2431","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_test().","target":"scip-python python temp indexer `pilot.helpers.cli`/execute_command_and_check_cli_response().","attributes":{"type":"uses","at":[263,41,263,79]}},{"key":"geid_130_2432","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_test().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[264,12,264,18]}},{"key":"geid_130_2433","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_test().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[264,19,264,23]}},{"key":"geid_130_2434","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_test().","target":"scip-python python temp indexer `pilot.utils.style`/color_red.","attributes":{"type":"uses","at":[266,22,266,31]}},{"key":"geid_130_2435","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_test().","target":"scip-python python temp indexer `pilot.utils.style`/color_red.","attributes":{"type":"uses","at":[268,22,268,31]}},{"key":"geid_130_2436","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#get_run_command().","target":"scip-python python temp indexer `pilot.const.function_calls`/COMMAND_TO_RUN.","attributes":{"type":"uses","at":[281,84,281,98]}},{"key":"geid_130_2437","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#get_run_command().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#run_command.","attributes":{"type":"uses","at":[282,13,282,24]}},{"key":"geid_130_2438","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#get_run_command().","target":"scip-python python python-stdlib 3.11 re/__init__:","attributes":{"type":"uses","at":[286,23,286,25]}},{"key":"geid_130_2439","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#get_run_command().","target":"scip-python python python-stdlib 3.11 re/search().","attributes":{"type":"uses","at":[286,26,286,32]}},{"key":"geid_130_2440","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#get_run_command().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#run_command.","attributes":{"type":"uses","at":[286,63,286,74]}},{"key":"geid_130_2441","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#get_run_command().","target":"scip-python python python-stdlib 3.11 re/__init__:","attributes":{"type":"uses","at":[286,76,286,78]}},{"key":"geid_130_2442","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#get_run_command().","target":"scip-python python python-stdlib 3.11 re/DOTALL.","attributes":{"type":"uses","at":[286,79,286,85]}},{"key":"geid_130_2443","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#get_run_command().","target":"scip-python python python-stdlib 3.11 re/__init__:","attributes":{"type":"uses","at":[289,23,289,25]}},{"key":"geid_130_2444","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#get_run_command().","target":"scip-python python python-stdlib 3.11 re/search().","attributes":{"type":"uses","at":[289,26,289,32]}},{"key":"geid_130_2445","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#get_run_command().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#run_command.","attributes":{"type":"uses","at":[289,63,289,74]}},{"key":"geid_130_2446","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#get_run_command().","target":"scip-python python python-stdlib 3.11 re/__init__:","attributes":{"type":"uses","at":[289,76,289,78]}},{"key":"geid_130_2447","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#get_run_command().","target":"scip-python python python-stdlib 3.11 re/DOTALL.","attributes":{"type":"uses","at":[289,79,289,85]}},{"key":"geid_130_2448","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#get_run_command().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#run_command.","attributes":{"type":"uses","at":[292,17,292,28]}},{"key":"geid_130_2449","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#get_run_command().","target":"scip-python python python-stdlib 3.11 re/Match#group().","attributes":{"type":"uses","at":[292,44,292,49]}},{"key":"geid_130_2450","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#get_run_command().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#run_command.","attributes":{"type":"uses","at":[294,17,294,28]}},{"key":"geid_130_2451","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#get_run_command().","target":"scip-python python python-stdlib 3.11 re/Match#group().","attributes":{"type":"uses","at":[294,44,294,49]}},{"key":"geid_130_2452","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#task_postprocessing().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#get_run_command().","attributes":{"type":"uses","at":[300,13,300,28]}},{"key":"geid_130_2453","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#task_postprocessing().","target":"scip-python python python-stdlib 3.11 platform/__init__:","attributes":{"type":"uses","at":[305,22,305,30]}},{"key":"geid_130_2454","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#task_postprocessing().","target":"scip-python python python-stdlib 3.11 platform/system().","attributes":{"type":"uses","at":[305,31,305,37]}},{"key":"geid_130_2455","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#task_postprocessing().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#continue_development().","attributes":{"type":"uses","at":[312,28,312,48]}},{"key":"geid_130_2456","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#task_postprocessing().","target":"scip-python python temp indexer `pilot.helpers.exceptions.toodeeprecursionerror`/TooDeepRecursionError#","attributes":{"type":"uses","at":[313,15,313,36]}},{"key":"geid_130_2457","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#task_postprocessing().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[314,12,314,18]}},{"key":"geid_130_2458","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#task_postprocessing().","target":"scip-python python python-stdlib 3.11 logging/Logger#warning().","attributes":{"type":"uses","at":[314,19,314,26]}},{"key":"geid_130_2459","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#task_postprocessing().","target":"scip-python python temp indexer `pilot.helpers.exceptions.toodeeprecursionerror`/TooDeepRecursionError#message.","attributes":{"type":"uses","at":[314,108,314,115]}},{"key":"geid_130_2460","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#task_postprocessing().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#dev_help_needed().","attributes":{"type":"uses","at":[315,24,315,39]}},{"key":"geid_130_2461","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#task_postprocessing().","target":"scip-python python temp indexer `pilot.helpers.exceptions.toodeeprecursionerror`/TooDeepRecursionError#message.","attributes":{"type":"uses","at":[315,107,315,114]}},{"key":"geid_130_2462","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#should_retry_step_implementation().","target":"scip-python python temp indexer `pilot.const.code_execution`/MAX_COMMAND_DEBUG_TRIES.","attributes":{"type":"uses","at":[320,38,320,61]}},{"key":"geid_130_2463","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#should_retry_step_implementation().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#dev_help_needed().","attributes":{"type":"uses","at":[321,17,321,32]}},{"key":"geid_130_2464","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#should_retry_step_implementation().","target":"scip-python python temp indexer `pilot.utils.style`/color_red_bold.","attributes":{"type":"uses","at":[323,14,323,28]}},{"key":"geid_130_2465","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#should_retry_step_implementation().","target":"scip-python python temp indexer `pilot.utils.style`/color_red_bold.","attributes":{"type":"uses","at":[324,14,324,28]}},{"key":"geid_130_2466","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#should_retry_step_implementation().","target":"scip-python python temp indexer `pilot.utils.questionary`/styled_text().","attributes":{"type":"uses","at":[328,21,328,32]}},{"key":"geid_130_2467","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#should_retry_step_implementation().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[329,21,329,28]}},{"key":"geid_130_2468","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#should_retry_step_implementation().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[333,12,333,18]}},{"key":"geid_130_2469","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#should_retry_step_implementation().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[333,19,333,23]}},{"key":"geid_130_2470","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#should_retry_step_implementation().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#dev_help_needed().","attributes":{"type":"uses","at":[335,28,335,43]}},{"key":"geid_130_2471","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#dev_help_needed().","target":"scip-python python temp indexer `pilot.utils.style`/color_red_bold.","attributes":{"type":"uses","at":[343,24,343,38]}},{"key":"geid_130_2472","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#dev_help_needed().","target":"scip-python python temp indexer `pilot.utils.style`/color_white_bold.","attributes":{"type":"uses","at":[344,24,344,40]}},{"key":"geid_130_2473","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#dev_help_needed().","target":"scip-python python temp indexer `pilot.utils.style`/color_red_bold.","attributes":{"type":"uses","at":[345,24,345,38]}},{"key":"geid_130_2474","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#dev_help_needed().","target":"scip-python python temp indexer `pilot.utils.style`/color_red_bold.","attributes":{"type":"uses","at":[365,18,365,32]}},{"key":"geid_130_2475","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#dev_help_needed().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#extract_substring().","attributes":{"type":"uses","at":[366,18,366,35]}},{"key":"geid_130_2476","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#dev_help_needed().","target":"scip-python python temp indexer `pilot.utils.style`/color_red_bold.","attributes":{"type":"uses","at":[367,18,367,32]}},{"key":"geid_130_2477","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#dev_help_needed().","target":"scip-python python temp indexer `pilot.utils.questionary`/styled_text().","attributes":{"type":"uses","at":[369,21,369,32]}},{"key":"geid_130_2478","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#dev_help_needed().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[370,21,370,28]}},{"key":"geid_130_2479","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#dev_help_needed().","target":"scip-python python temp indexer `pilot.const.messages`/WHEN_USER_DONE.","attributes":{"type":"uses","at":[371,16,371,30]}},{"key":"geid_130_2480","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#dev_help_needed().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[373,12,373,18]}},{"key":"geid_130_2481","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#dev_help_needed().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[373,19,373,23]}},{"key":"geid_130_2482","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#execute_task().","target":"scip-python python python-stdlib 3.11 uuid/__init__:","attributes":{"type":"uses","at":[380,28,380,32]}},{"key":"geid_130_2483","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#execute_task().","target":"scip-python python python-stdlib 3.11 uuid/uuid4().","attributes":{"type":"uses","at":[380,33,380,38]}},{"key":"geid_130_2484","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#execute_task().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[387,12,387,18]}},{"key":"geid_130_2485","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#execute_task().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[387,19,387,23]}},{"key":"geid_130_2486","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#execute_task().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_command_run().","attributes":{"type":"uses","at":[399,38,399,54]}},{"key":"geid_130_2487","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#execute_task().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_code_change().","attributes":{"type":"uses","at":[404,38,404,54]}},{"key":"geid_130_2488","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#execute_task().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_human_intervention().","attributes":{"type":"uses","at":[407,38,407,61]}},{"key":"geid_130_2489","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#execute_task().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[415,20,415,26]}},{"key":"geid_130_2490","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#execute_task().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[415,27,415,31]}},{"key":"geid_130_2491","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#execute_task().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[423,24,423,30]}},{"key":"geid_130_2492","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#execute_task().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[423,31,423,35]}},{"key":"geid_130_2493","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#execute_task().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_test().","attributes":{"type":"uses","at":[424,38,424,47]}},{"key":"geid_130_2494","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#execute_task().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[425,24,425,30]}},{"key":"geid_130_2495","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#execute_task().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[425,31,425,35]}},{"key":"geid_130_2496","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#execute_task().","target":"scip-python python temp indexer `pilot.helpers.exceptions.tokenlimiterror`/TokenLimitError#","attributes":{"type":"uses","at":[429,23,429,38]}},{"key":"geid_130_2497","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#execute_task().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#should_retry_step_implementation().","attributes":{"type":"uses","at":[431,40,431,72]}},{"key":"geid_130_2498","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#execute_task().","target":"scip-python python temp indexer `pilot.helpers.exceptions.toodeeprecursionerror`/TooDeepRecursionError#","attributes":{"type":"uses","at":[441,23,441,44]}},{"key":"geid_130_2499","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#execute_task().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#dev_help_needed().","attributes":{"type":"uses","at":[443,38,443,53]}},{"key":"geid_130_2500","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#execute_task().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#task_postprocessing().","attributes":{"type":"uses","at":[450,20,450,39]}},{"key":"geid_130_2501","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#continue_development().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[454,12,454,18]}},{"key":"geid_130_2502","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#continue_development().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[454,19,454,23]}},{"key":"geid_130_2503","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#continue_development().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#branches.","attributes":{"type":"uses","at":[455,51,455,59]}},{"key":"geid_130_2504","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#continue_development().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#load_branch().","attributes":{"type":"uses","at":[456,32,456,43]}},{"key":"geid_130_2505","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#continue_development().","target":"scip-python python temp indexer `pilot.utils.style`/color_cyan_bold.","attributes":{"type":"uses","at":[457,90,457,105]}},{"key":"geid_130_2506","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#continue_development().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#run_command.","attributes":{"type":"uses","at":[462,20,462,31]}},{"key":"geid_130_2507","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#continue_development().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[463,24,463,31]}},{"key":"geid_130_2508","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#continue_development().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[463,68,463,75]}},{"key":"geid_130_2509","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#continue_development().","target":"scip-python python temp indexer `pilot.utils.style`/color_yellow_bold.","attributes":{"type":"uses","at":[464,40,464,57]}},{"key":"geid_130_2510","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#continue_development().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#run_command.","attributes":{"type":"uses","at":[465,115,465,126]}},{"key":"geid_130_2511","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#continue_development().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#run_command.","attributes":{"type":"uses","at":[467,31,467,42]}},{"key":"geid_130_2512","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#continue_development().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[471,28,471,35]}},{"key":"geid_130_2513","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#continue_development().","target":"scip-python python temp indexer `pilot.helpers.cli`/run_command_until_success().","attributes":{"type":"uses","at":[473,40,473,65]}},{"key":"geid_130_2514","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#continue_development().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#run_command.","attributes":{"type":"uses","at":[473,78,473,89]}},{"key":"geid_130_2515","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#continue_development().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[485,12,485,18]}},{"key":"geid_130_2516","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#continue_development().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[485,19,485,23]}},{"key":"geid_130_2517","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#continue_development().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","attributes":{"type":"uses","at":[491,34,491,44]}},{"key":"geid_130_2518","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#continue_development().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","attributes":{"type":"uses","at":[492,56,492,68]}},{"key":"geid_130_2519","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#continue_development().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[493,33,493,40]}},{"key":"geid_130_2520","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#continue_development().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[494,37,494,44]}},{"key":"geid_130_2521","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#continue_development().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[495,40,495,47]}},{"key":"geid_130_2522","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#continue_development().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[496,43,496,50]}},{"key":"geid_130_2523","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#continue_development().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[497,41,497,48]}},{"key":"geid_130_2524","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#continue_development().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[498,39,498,46]}},{"key":"geid_130_2525","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#continue_development().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[499,41,499,48]}},{"key":"geid_130_2526","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#continue_development().","target":"scip-python python temp indexer `pilot.utils.utils`/array_of_objects_to_string().","attributes":{"type":"uses","at":[500,50,500,76]}},{"key":"geid_130_2527","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#continue_development().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[501,43,501,50]}},{"key":"geid_130_2528","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#continue_development().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[503,46,503,53]}},{"key":"geid_130_2529","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#continue_development().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[504,34,504,41]}},{"key":"geid_130_2530","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#continue_development().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","attributes":{"type":"uses","at":[508,47,508,59]}},{"key":"geid_130_2531","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#continue_development().","target":"scip-python python temp indexer `pilot.helpers.cli`/running_processes.running_processes.","attributes":{"type":"uses","at":[509,41,509,58]}},{"key":"geid_130_2532","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#continue_development().","target":"scip-python python python-stdlib 3.11 platform/__init__:","attributes":{"type":"uses","at":[510,26,510,34]}},{"key":"geid_130_2533","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#continue_development().","target":"scip-python python python-stdlib 3.11 platform/system().","attributes":{"type":"uses","at":[510,35,510,41]}},{"key":"geid_130_2534","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#continue_development().","target":"scip-python python temp indexer `pilot.const.function_calls`/IMPLEMENT_TASK.","attributes":{"type":"uses","at":[511,19,511,33]}},{"key":"geid_130_2535","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#continue_development().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#remove_last_x_messages().","attributes":{"type":"uses","at":[512,32,512,54]}},{"key":"geid_130_2536","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#continue_development().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#execute_task().","attributes":{"type":"uses","at":[515,21,515,33]}},{"key":"geid_130_2537","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#set_up_environment().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[518,13,518,20]}},{"key":"geid_130_2538","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#set_up_environment().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/ENVIRONMENT_SETUP_STEP.","attributes":{"type":"uses","at":[518,36,518,58]}},{"key":"geid_130_2539","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#set_up_environment().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","attributes":{"type":"uses","at":[519,38,519,48]}},{"key":"geid_130_2540","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#set_up_environment().","target":"scip-python python temp indexer `pilot.database.database`/get_progress_steps().","attributes":{"type":"uses","at":[522,15,522,33]}},{"key":"geid_130_2541","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#set_up_environment().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[522,39,522,46]}},{"key":"geid_130_2542","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#set_up_environment().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/ENVIRONMENT_SETUP_STEP.","attributes":{"type":"uses","at":[522,63,522,85]}},{"key":"geid_130_2543","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#set_up_environment().","target":"scip-python python temp indexer `pilot.utils.utils`/should_execute_step().","attributes":{"type":"uses","at":[523,24,523,43]}},{"key":"geid_130_2544","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#set_up_environment().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[523,49,523,56]}},{"key":"geid_130_2545","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#set_up_environment().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/ENVIRONMENT_SETUP_STEP.","attributes":{"type":"uses","at":[523,71,523,93]}},{"key":"geid_130_2546","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#set_up_environment().","target":"scip-python python temp indexer `pilot.utils.utils`/step_already_finished().","attributes":{"type":"uses","at":[524,12,524,33]}},{"key":"geid_130_2547","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#set_up_environment().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[524,39,524,46]}},{"key":"geid_130_2548","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#set_up_environment().","target":"scip-python python temp indexer `pilot.utils.questionary`/styled_text().","attributes":{"type":"uses","at":[530,25,530,36]}},{"key":"geid_130_2549","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#set_up_environment().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[530,42,530,49]}},{"key":"geid_130_2550","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#set_up_environment().","target":"scip-python python temp indexer `pilot.database.database`/save_progress().","attributes":{"type":"uses","at":[531,8,531,21]}},{"key":"geid_130_2551","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#set_up_environment().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[531,27,531,34]}},{"key":"geid_130_2552","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#set_up_environment().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[531,56,531,63]}},{"key":"geid_130_2553","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#set_up_environment().","target":"scip-python python temp indexer `pilot.utils.utils`/generate_app_data().","attributes":{"type":"uses","at":[534,24,534,41]}},{"key":"geid_130_2554","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#set_up_environment().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[534,47,534,54]}},{"key":"geid_130_2555","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#install_technology().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#convo_os_specific_tech.","attributes":{"type":"uses","at":[580,28,580,50]}},{"key":"geid_130_2556","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#install_technology().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","attributes":{"type":"uses","at":[580,51,580,63]}},{"key":"geid_130_2557","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#install_technology().","target":"scip-python python temp indexer `pilot.helpers.cli`/execute_command_and_check_cli_response().","attributes":{"type":"uses","at":[606,37,606,75]}},{"key":"geid_130_2558","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#install_technology().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#convo_os_specific_tech.","attributes":{"type":"uses","at":[606,81,606,103]}},{"key":"geid_130_2559","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#implement_step().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[641,8,641,14]}},{"key":"geid_130_2560","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#implement_step().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[641,15,641,19]}},{"key":"geid_130_2561","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#implement_step().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[643,30,643,37]}},{"key":"geid_130_2562","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#implement_step().","target":"scip-python python temp indexer `pilot.const.function_calls`/EXECUTE_COMMANDS.","attributes":{"type":"uses","at":[650,11,650,27]}},{"key":"geid_130_2563","source":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#implement_step().","target":"scip-python python temp indexer `pilot.helpers.cli`/run_command_until_success().","attributes":{"type":"uses","at":[656,16,656,41]}},{"key":"geid_130_2564","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#","target":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_tasks().","attributes":{"type":"defines","at":[136,4,162,38]}},{"key":"geid_130_2565","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#","target":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_stories().","attributes":{"type":"defines","at":[93,4,133,14]}},{"key":"geid_130_2566","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#","target":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#generate_project_summary().","attributes":{"type":"defines","at":[82,4,91,108]}},{"key":"geid_130_2567","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#","target":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#ask_clarifying_questions().","attributes":{"type":"defines","at":[76,4,80,74]}},{"key":"geid_130_2568","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#","target":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","attributes":{"type":"defines","at":[21,4,73,14]}},{"key":"geid_130_2569","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#","target":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#__init__().","attributes":{"type":"defines","at":[18,4,19,50]}},{"key":"geid_130_2570","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#","attributes":{"type":"defines","at":[17,0,162,38]}},{"key":"geid_130_2571","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/__init__:","target":"scip-python python python-stdlib 3.11 json/__init__:","attributes":{"type":"uses","at":[0,7,0,11]}},{"key":"geid_130_2572","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/__init__:","attributes":{"type":"uses","at":[1,5,1,16]}},{"key":"geid_130_2573","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/color_green_bold.","attributes":{"type":"uses","at":[1,24,1,40]}},{"key":"geid_130_2574","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/__init__:","attributes":{"type":"uses","at":[2,5,2,23]}},{"key":"geid_130_2575","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","attributes":{"type":"uses","at":[2,31,2,41]}},{"key":"geid_130_2576","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agent`/__init__:","attributes":{"type":"uses","at":[3,5,3,18]}},{"key":"geid_130_2577","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#","attributes":{"type":"uses","at":[3,26,3,31]}},{"key":"geid_130_2578","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/__init__:","target":"scip-python python temp indexer `pilot.logger.logger`/__init__:","attributes":{"type":"uses","at":[4,5,4,18]}},{"key":"geid_130_2579","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/__init__:","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[4,26,4,32]}},{"key":"geid_130_2580","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/__init__:","attributes":{"type":"uses","at":[5,5,5,22]}},{"key":"geid_130_2581","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/get_app().","attributes":{"type":"uses","at":[5,30,5,37]}},{"key":"geid_130_2582","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/save_progress().","attributes":{"type":"uses","at":[5,39,5,52]}},{"key":"geid_130_2583","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/save_app().","attributes":{"type":"uses","at":[5,54,5,62]}},{"key":"geid_130_2584","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/get_progress_steps().","attributes":{"type":"uses","at":[5,64,5,82]}},{"key":"geid_130_2585","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/__init__:","attributes":{"type":"uses","at":[6,5,6,16]}},{"key":"geid_130_2586","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/should_execute_step().","attributes":{"type":"uses","at":[6,24,6,43]}},{"key":"geid_130_2587","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/generate_app_data().","attributes":{"type":"uses","at":[6,45,6,62]}},{"key":"geid_130_2588","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/step_already_finished().","attributes":{"type":"uses","at":[6,64,6,85]}},{"key":"geid_130_2589","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/clean_filename().","attributes":{"type":"uses","at":[6,87,6,101]}},{"key":"geid_130_2590","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/__init__:","target":"scip-python python temp indexer `pilot.utils.files`/__init__:","attributes":{"type":"uses","at":[7,5,7,16]}},{"key":"geid_130_2591","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/__init__:","target":"scip-python python temp indexer `pilot.utils.files`/setup_workspace().","attributes":{"type":"uses","at":[7,24,7,39]}},{"key":"geid_130_2592","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/__init__:","target":"scip-python python temp indexer `pilot.prompts.prompts`/__init__:","attributes":{"type":"uses","at":[8,5,8,20]}},{"key":"geid_130_2593","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/__init__:","target":"scip-python python temp indexer `pilot.prompts.prompts`/ask_for_app_type().","attributes":{"type":"uses","at":[8,28,8,44]}},{"key":"geid_130_2594","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/__init__:","target":"scip-python python temp indexer `pilot.prompts.prompts`/ask_for_main_app_definition().","attributes":{"type":"uses","at":[8,46,8,73]}},{"key":"geid_130_2595","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/__init__:","target":"scip-python python temp indexer `pilot.prompts.prompts`/get_additional_info_from_openai().","attributes":{"type":"uses","at":[8,75,8,106]}},{"key":"geid_130_2596","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/__init__:","target":"scip-python python temp indexer `pilot.prompts.prompts`/generate_messages_from_description().","attributes":{"type":"uses","at":[9,4,9,38]}},{"key":"geid_130_2597","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/__init__:","target":"scip-python python temp indexer `pilot.prompts.prompts`/ask_user().","attributes":{"type":"uses","at":[9,40,9,48]}},{"key":"geid_130_2598","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/get_prompt().","attributes":{"type":"uses","at":[9,50,9,60]}},{"key":"geid_130_2599","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/__init__:","target":"scip-python python temp indexer `pilot.const.llm`/__init__:","attributes":{"type":"uses","at":[10,5,10,14]}},{"key":"geid_130_2600","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/__init__:","target":"scip-python python temp indexer `pilot.const.llm`/END_RESPONSE.","attributes":{"type":"uses","at":[10,22,10,34]}},{"key":"geid_130_2601","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#","attributes":{"type":"uses","at":[17,19,17,24]}},{"key":"geid_130_2602","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#__init__().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#__init__().","attributes":{"type":"uses","at":[19,16,19,24]}},{"key":"geid_130_2603","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python python-stdlib 3.11 json/__init__:","attributes":{"type":"uses","at":[22,14,22,18]}},{"key":"geid_130_2604","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python python-stdlib 3.11 json/dumps().","attributes":{"type":"uses","at":[22,19,22,24]}},{"key":"geid_130_2605","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[26,13,26,20]}},{"key":"geid_130_2606","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python temp indexer `pilot.database.database`/get_app().","attributes":{"type":"uses","at":[26,27,26,34]}},{"key":"geid_130_2607","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[26,40,26,47]}},{"key":"geid_130_2608","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[29,16,29,23]}},{"key":"geid_130_2609","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python temp indexer `pilot.database.database`/get_progress_steps().","attributes":{"type":"uses","at":[30,19,30,37]}},{"key":"geid_130_2610","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[30,43,30,50]}},{"key":"geid_130_2611","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python temp indexer `pilot.helpers.agents.productowner`/PROJECT_DESCRIPTION_STEP.","attributes":{"type":"uses","at":[30,67,30,91]}},{"key":"geid_130_2612","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python temp indexer `pilot.utils.utils`/should_execute_step().","attributes":{"type":"uses","at":[31,28,31,47]}},{"key":"geid_130_2613","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[31,53,31,60]}},{"key":"geid_130_2614","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python temp indexer `pilot.helpers.agents.productowner`/PROJECT_DESCRIPTION_STEP.","attributes":{"type":"uses","at":[31,75,31,99]}},{"key":"geid_130_2615","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python temp indexer `pilot.utils.utils`/step_already_finished().","attributes":{"type":"uses","at":[32,16,32,37]}},{"key":"geid_130_2616","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[32,43,32,50]}},{"key":"geid_130_2617","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[33,21,33,28]}},{"key":"geid_130_2618","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python temp indexer `pilot.utils.files`/setup_workspace().","attributes":{"type":"uses","at":[33,43,33,58]}},{"key":"geid_130_2619","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[33,64,33,71]}},{"key":"geid_130_2620","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[34,21,34,28]}},{"key":"geid_130_2621","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[35,21,35,28]}},{"key":"geid_130_2622","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[36,21,36,28]}},{"key":"geid_130_2623","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[40,13,40,20]}},{"key":"geid_130_2624","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python temp indexer `pilot.helpers.agents.productowner`/PROJECT_DESCRIPTION_STEP.","attributes":{"type":"uses","at":[40,36,40,60]}},{"key":"geid_130_2625","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[41,34,41,41]}},{"key":"geid_130_2626","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[42,17,42,24]}},{"key":"geid_130_2627","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python temp indexer `pilot.prompts.prompts`/ask_for_app_type().","attributes":{"type":"uses","at":[42,44,42,60]}},{"key":"geid_130_2628","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[43,30,43,37]}},{"key":"geid_130_2629","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[46,17,46,24]}},{"key":"geid_130_2630","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python temp indexer `pilot.utils.utils`/clean_filename().","attributes":{"type":"uses","at":[46,40,46,54]}},{"key":"geid_130_2631","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python temp indexer `pilot.prompts.prompts`/ask_user().","attributes":{"type":"uses","at":[46,55,46,63]}},{"key":"geid_130_2632","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[46,69,46,76]}},{"key":"geid_130_2633","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[48,13,48,20]}},{"key":"geid_130_2634","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python temp indexer `pilot.database.database`/save_app().","attributes":{"type":"uses","at":[48,27,48,35]}},{"key":"geid_130_2635","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[48,41,48,48]}},{"key":"geid_130_2636","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[50,13,50,20]}},{"key":"geid_130_2637","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python temp indexer `pilot.utils.files`/setup_workspace().","attributes":{"type":"uses","at":[50,35,50,50]}},{"key":"geid_130_2638","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[50,56,50,63]}},{"key":"geid_130_2639","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[52,13,52,20]}},{"key":"geid_130_2640","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python temp indexer `pilot.prompts.prompts`/ask_for_main_app_definition().","attributes":{"type":"uses","at":[52,35,52,62]}},{"key":"geid_130_2641","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[52,68,52,75]}},{"key":"geid_130_2642","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python python-stdlib 3.11 json/__init__:","attributes":{"type":"uses","at":[54,14,54,18]}},{"key":"geid_130_2643","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python python-stdlib 3.11 json/dumps().","attributes":{"type":"uses","at":[54,19,54,24]}},{"key":"geid_130_2644","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[56,25,56,32]}},{"key":"geid_130_2645","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[57,25,57,32]}},{"key":"geid_130_2646","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#ask_clarifying_questions().","attributes":{"type":"uses","at":[60,35,60,59]}},{"key":"geid_130_2647","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[60,65,60,72]}},{"key":"geid_130_2648","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#generate_project_summary().","attributes":{"type":"uses","at":[62,34,62,58]}},{"key":"geid_130_2649","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python temp indexer `pilot.database.database`/save_progress().","attributes":{"type":"uses","at":[64,8,64,21]}},{"key":"geid_130_2650","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[64,27,64,34]}},{"key":"geid_130_2651","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[64,56,64,63]}},{"key":"geid_130_2652","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[65,27,65,34]}},{"key":"geid_130_2653","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python temp indexer `pilot.utils.utils`/generate_app_data().","attributes":{"type":"uses","at":[68,24,68,41]}},{"key":"geid_130_2654","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[68,47,68,54]}},{"key":"geid_130_2655","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[71,13,71,20]}},{"key":"geid_130_2656","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_project_description().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[72,13,72,20]}},{"key":"geid_130_2657","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#ask_clarifying_questions().","target":"scip-python python temp indexer `pilot.prompts.prompts`/generate_messages_from_description().","attributes":{"type":"uses","at":[77,23,77,57]}},{"key":"geid_130_2658","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#ask_clarifying_questions().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[78,63,78,70]}},{"key":"geid_130_2659","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#ask_clarifying_questions().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[79,63,79,70]}},{"key":"geid_130_2660","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#ask_clarifying_questions().","target":"scip-python python temp indexer `pilot.prompts.prompts`/get_additional_info_from_openai().","attributes":{"type":"uses","at":[80,15,80,46]}},{"key":"geid_130_2661","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#ask_clarifying_questions().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[80,52,80,59]}},{"key":"geid_130_2662","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#generate_project_summary().","target":"scip-python python temp indexer `pilot.utils.style`/color_green_bold.","attributes":{"type":"uses","at":[83,14,83,30]}},{"key":"geid_130_2663","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#generate_project_summary().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","attributes":{"type":"uses","at":[84,36,84,46]}},{"key":"geid_130_2664","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#generate_project_summary().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#messages.","attributes":{"type":"uses","at":[86,34,86,42]}},{"key":"geid_130_2665","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#generate_project_summary().","target":"scip-python python temp indexer `pilot.utils.utils`/get_prompt().","attributes":{"type":"uses","at":[87,62,87,72]}},{"key":"geid_130_2666","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#generate_project_summary().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","attributes":{"type":"uses","at":[88,41,88,53]}},{"key":"geid_130_2667","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_stories().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[94,20,94,27]}},{"key":"geid_130_2668","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_stories().","target":"scip-python python python-stdlib 3.11 json/__init__:","attributes":{"type":"uses","at":[97,14,97,18]}},{"key":"geid_130_2669","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_stories().","target":"scip-python python python-stdlib 3.11 json/dumps().","attributes":{"type":"uses","at":[97,19,97,24]}},{"key":"geid_130_2670","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_stories().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[101,13,101,20]}},{"key":"geid_130_2671","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_stories().","target":"scip-python python temp indexer `pilot.helpers.agents.productowner`/USER_STORIES_STEP.","attributes":{"type":"uses","at":[101,36,101,53]}},{"key":"geid_130_2672","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_stories().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","attributes":{"type":"uses","at":[102,34,102,44]}},{"key":"geid_130_2673","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_stories().","target":"scip-python python temp indexer `pilot.database.database`/get_progress_steps().","attributes":{"type":"uses","at":[105,15,105,33]}},{"key":"geid_130_2674","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_stories().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[105,39,105,46]}},{"key":"geid_130_2675","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_stories().","target":"scip-python python temp indexer `pilot.helpers.agents.productowner`/USER_STORIES_STEP.","attributes":{"type":"uses","at":[105,63,105,80]}},{"key":"geid_130_2676","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_stories().","target":"scip-python python temp indexer `pilot.utils.utils`/should_execute_step().","attributes":{"type":"uses","at":[106,24,106,43]}},{"key":"geid_130_2677","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_stories().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[106,49,106,56]}},{"key":"geid_130_2678","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_stories().","target":"scip-python python temp indexer `pilot.helpers.agents.productowner`/USER_STORIES_STEP.","attributes":{"type":"uses","at":[106,71,106,88]}},{"key":"geid_130_2679","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_stories().","target":"scip-python python temp indexer `pilot.utils.utils`/step_already_finished().","attributes":{"type":"uses","at":[107,12,107,33]}},{"key":"geid_130_2680","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_stories().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[107,39,107,46]}},{"key":"geid_130_2681","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_stories().","target":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#convo_user_stories.","attributes":{"type":"uses","at":[108,17,108,35]}},{"key":"geid_130_2682","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_stories().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#messages.","attributes":{"type":"uses","at":[108,36,108,44]}},{"key":"geid_130_2683","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_stories().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[109,17,109,24]}},{"key":"geid_130_2684","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_stories().","target":"scip-python python temp indexer `pilot.utils.style`/color_green_bold.","attributes":{"type":"uses","at":[114,14,114,30]}},{"key":"geid_130_2685","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_stories().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[115,8,115,14]}},{"key":"geid_130_2686","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_stories().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[115,15,115,19]}},{"key":"geid_130_2687","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_stories().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[117,13,117,20]}},{"key":"geid_130_2688","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_stories().","target":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#convo_user_stories.","attributes":{"type":"uses","at":[117,41,117,59]}},{"key":"geid_130_2689","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_stories().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#continuous_conversation().","attributes":{"type":"uses","at":[117,60,117,83]}},{"key":"geid_130_2690","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_stories().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[118,25,118,32]}},{"key":"geid_130_2691","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_stories().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[119,27,119,34]}},{"key":"geid_130_2692","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_stories().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[120,35,120,42]}},{"key":"geid_130_2693","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_stories().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[121,29,121,36]}},{"key":"geid_130_2694","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_stories().","target":"scip-python python temp indexer `pilot.const.llm`/END_RESPONSE.","attributes":{"type":"uses","at":[122,28,122,40]}},{"key":"geid_130_2695","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_stories().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[125,8,125,14]}},{"key":"geid_130_2696","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_stories().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[125,15,125,19]}},{"key":"geid_130_2697","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_stories().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[125,48,125,55]}},{"key":"geid_130_2698","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_stories().","target":"scip-python python temp indexer `pilot.database.database`/save_progress().","attributes":{"type":"uses","at":[127,8,127,21]}},{"key":"geid_130_2699","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_stories().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[127,27,127,34]}},{"key":"geid_130_2700","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_stories().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[127,56,127,63]}},{"key":"geid_130_2701","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_stories().","target":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#convo_user_stories.","attributes":{"type":"uses","at":[128,29,128,47]}},{"key":"geid_130_2702","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_stories().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#messages.","attributes":{"type":"uses","at":[128,48,128,56]}},{"key":"geid_130_2703","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_stories().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[129,33,129,40]}},{"key":"geid_130_2704","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_stories().","target":"scip-python python temp indexer `pilot.utils.utils`/generate_app_data().","attributes":{"type":"uses","at":[130,24,130,41]}},{"key":"geid_130_2705","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_stories().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[130,47,130,54]}},{"key":"geid_130_2706","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_tasks().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[137,13,137,20]}},{"key":"geid_130_2707","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_tasks().","target":"scip-python python temp indexer `pilot.helpers.agents.productowner`/USER_TASKS_STEP.","attributes":{"type":"uses","at":[137,36,137,51]}},{"key":"geid_130_2708","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_tasks().","target":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#convo_user_stories.","attributes":{"type":"uses","at":[138,13,138,31]}},{"key":"geid_130_2709","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_tasks().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#high_level_step.","attributes":{"type":"uses","at":[138,32,138,47]}},{"key":"geid_130_2710","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_tasks().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[138,55,138,62]}},{"key":"geid_130_2711","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_tasks().","target":"scip-python python temp indexer `pilot.database.database`/get_progress_steps().","attributes":{"type":"uses","at":[141,15,141,33]}},{"key":"geid_130_2712","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_tasks().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[141,39,141,46]}},{"key":"geid_130_2713","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_tasks().","target":"scip-python python temp indexer `pilot.helpers.agents.productowner`/USER_TASKS_STEP.","attributes":{"type":"uses","at":[141,63,141,78]}},{"key":"geid_130_2714","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_tasks().","target":"scip-python python temp indexer `pilot.utils.utils`/should_execute_step().","attributes":{"type":"uses","at":[142,24,142,43]}},{"key":"geid_130_2715","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_tasks().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[142,49,142,56]}},{"key":"geid_130_2716","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_tasks().","target":"scip-python python temp indexer `pilot.helpers.agents.productowner`/USER_TASKS_STEP.","attributes":{"type":"uses","at":[142,71,142,86]}},{"key":"geid_130_2717","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_tasks().","target":"scip-python python temp indexer `pilot.utils.utils`/step_already_finished().","attributes":{"type":"uses","at":[143,12,143,33]}},{"key":"geid_130_2718","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_tasks().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[143,39,143,46]}},{"key":"geid_130_2719","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_tasks().","target":"scip-python python temp indexer `pilot.utils.style`/color_green_bold.","attributes":{"type":"uses","at":[148,14,148,30]}},{"key":"geid_130_2720","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_tasks().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[149,8,149,14]}},{"key":"geid_130_2721","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_tasks().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[149,15,149,19]}},{"key":"geid_130_2722","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_tasks().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[151,13,151,20]}},{"key":"geid_130_2723","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_tasks().","target":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#convo_user_stories.","attributes":{"type":"uses","at":[151,39,151,57]}},{"key":"geid_130_2724","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_tasks().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#continuous_conversation().","attributes":{"type":"uses","at":[151,58,151,81]}},{"key":"geid_130_2725","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_tasks().","target":"scip-python python temp indexer `pilot.const.llm`/END_RESPONSE.","attributes":{"type":"uses","at":[152,99,152,111]}},{"key":"geid_130_2726","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_tasks().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[154,8,154,14]}},{"key":"geid_130_2727","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_tasks().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[154,15,154,19]}},{"key":"geid_130_2728","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_tasks().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[154,46,154,53]}},{"key":"geid_130_2729","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_tasks().","target":"scip-python python temp indexer `pilot.database.database`/save_progress().","attributes":{"type":"uses","at":[156,8,156,21]}},{"key":"geid_130_2730","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_tasks().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[156,27,156,34]}},{"key":"geid_130_2731","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_tasks().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[156,56,156,63]}},{"key":"geid_130_2732","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_tasks().","target":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#convo_user_stories.","attributes":{"type":"uses","at":[157,29,157,47]}},{"key":"geid_130_2733","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_tasks().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#messages.","attributes":{"type":"uses","at":[157,48,157,56]}},{"key":"geid_130_2734","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_tasks().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[158,31,158,38]}},{"key":"geid_130_2735","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_tasks().","target":"scip-python python temp indexer `pilot.utils.utils`/generate_app_data().","attributes":{"type":"uses","at":[159,24,159,41]}},{"key":"geid_130_2736","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_tasks().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[159,47,159,54]}},{"key":"geid_130_2737","source":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#get_user_tasks().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[162,20,162,27]}},{"key":"geid_130_2738","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#","target":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_feature_summary().","attributes":{"type":"defines","at":[82,4,103,14]}},{"key":"geid_130_2739","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#","target":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_feature_plan().","attributes":{"type":"defines","at":[55,4,80,14]}},{"key":"geid_130_2740","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#","target":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_development_plan().","attributes":{"type":"defines","at":[18,4,53,14]}},{"key":"geid_130_2741","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#","target":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#__init__().","attributes":{"type":"defines","at":[14,4,16,35]}},{"key":"geid_130_2742","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#","attributes":{"type":"defines","at":[13,0,103,14]}},{"key":"geid_130_2743","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/__init__:","attributes":{"type":"uses","at":[0,5,0,16]}},{"key":"geid_130_2744","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/step_already_finished().","attributes":{"type":"uses","at":[0,24,0,45]}},{"key":"geid_130_2745","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agent`/__init__:","attributes":{"type":"uses","at":[1,5,1,18]}},{"key":"geid_130_2746","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#","attributes":{"type":"uses","at":[1,26,1,31]}},{"key":"geid_130_2747","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/__init__:","attributes":{"type":"uses","at":[2,5,2,16]}},{"key":"geid_130_2748","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/color_green_bold.","attributes":{"type":"uses","at":[2,24,2,40]}},{"key":"geid_130_2749","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/__init__:","attributes":{"type":"uses","at":[3,5,3,23]}},{"key":"geid_130_2750","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","attributes":{"type":"uses","at":[3,31,3,41]}},{"key":"geid_130_2751","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/__init__:","attributes":{"type":"uses","at":[5,5,5,16]}},{"key":"geid_130_2752","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/should_execute_step().","attributes":{"type":"uses","at":[5,24,5,43]}},{"key":"geid_130_2753","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/generate_app_data().","attributes":{"type":"uses","at":[5,45,5,62]}},{"key":"geid_130_2754","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/__init__:","attributes":{"type":"uses","at":[6,5,6,22]}},{"key":"geid_130_2755","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/save_progress().","attributes":{"type":"uses","at":[6,30,6,43]}},{"key":"geid_130_2756","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/get_progress_steps().","attributes":{"type":"uses","at":[6,45,6,63]}},{"key":"geid_130_2757","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/save_feature().","attributes":{"type":"uses","at":[6,65,6,77]}},{"key":"geid_130_2758","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/get_features_by_app_id().","attributes":{"type":"uses","at":[6,79,6,101]}},{"key":"geid_130_2759","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/__init__:","target":"scip-python python temp indexer `pilot.logger.logger`/__init__:","attributes":{"type":"uses","at":[7,5,7,18]}},{"key":"geid_130_2760","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/__init__:","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[7,26,7,32]}},{"key":"geid_130_2761","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/__init__:","attributes":{"type":"uses","at":[8,5,8,25]}},{"key":"geid_130_2762","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/DEVELOPMENT_PLAN.","attributes":{"type":"uses","at":[8,33,8,49]}},{"key":"geid_130_2763","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#","attributes":{"type":"uses","at":[13,15,13,20]}},{"key":"geid_130_2764","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#__init__().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#__init__().","attributes":{"type":"uses","at":[15,16,15,24]}},{"key":"geid_130_2765","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_development_plan().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[19,13,19,20]}},{"key":"geid_130_2766","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_development_plan().","target":"scip-python python temp indexer `pilot.helpers.agents.techlead`/DEVELOPMENT_PLANNING_STEP.","attributes":{"type":"uses","at":[19,36,19,61]}},{"key":"geid_130_2767","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_development_plan().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","attributes":{"type":"uses","at":[20,38,20,48]}},{"key":"geid_130_2768","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_development_plan().","target":"scip-python python temp indexer `pilot.database.database`/get_progress_steps().","attributes":{"type":"uses","at":[23,15,23,33]}},{"key":"geid_130_2769","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_development_plan().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[23,39,23,46]}},{"key":"geid_130_2770","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_development_plan().","target":"scip-python python temp indexer `pilot.helpers.agents.techlead`/DEVELOPMENT_PLANNING_STEP.","attributes":{"type":"uses","at":[23,63,23,88]}},{"key":"geid_130_2771","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_development_plan().","target":"scip-python python temp indexer `pilot.utils.utils`/should_execute_step().","attributes":{"type":"uses","at":[24,24,24,43]}},{"key":"geid_130_2772","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_development_plan().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[24,49,24,56]}},{"key":"geid_130_2773","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_development_plan().","target":"scip-python python temp indexer `pilot.helpers.agents.techlead`/DEVELOPMENT_PLANNING_STEP.","attributes":{"type":"uses","at":[24,71,24,96]}},{"key":"geid_130_2774","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_development_plan().","target":"scip-python python temp indexer `pilot.utils.utils`/step_already_finished().","attributes":{"type":"uses","at":[25,12,25,33]}},{"key":"geid_130_2775","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_development_plan().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[25,39,25,46]}},{"key":"geid_130_2776","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_development_plan().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[26,17,26,24]}},{"key":"geid_130_2777","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_development_plan().","target":"scip-python python temp indexer `pilot.utils.style`/color_green_bold.","attributes":{"type":"uses","at":[30,14,30,30]}},{"key":"geid_130_2778","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_development_plan().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[31,8,31,14]}},{"key":"geid_130_2779","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_development_plan().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[31,15,31,19]}},{"key":"geid_130_2780","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_development_plan().","target":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#convo_development_plan.","attributes":{"type":"uses","at":[34,28,34,50]}},{"key":"geid_130_2781","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_development_plan().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","attributes":{"type":"uses","at":[34,51,34,63]}},{"key":"geid_130_2782","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_development_plan().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[36,29,36,36]}},{"key":"geid_130_2783","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_development_plan().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[37,33,37,40]}},{"key":"geid_130_2784","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_development_plan().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[38,36,38,43]}},{"key":"geid_130_2785","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_development_plan().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[39,39,39,46]}},{"key":"geid_130_2786","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_development_plan().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[40,37,40,44]}},{"key":"geid_130_2787","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_development_plan().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[41,35,41,42]}},{"key":"geid_130_2788","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_development_plan().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[42,37,42,44]}},{"key":"geid_130_2789","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_development_plan().","target":"scip-python python temp indexer `pilot.const.function_calls`/DEVELOPMENT_PLAN.","attributes":{"type":"uses","at":[44,15,44,31]}},{"key":"geid_130_2790","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_development_plan().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[45,13,45,20]}},{"key":"geid_130_2791","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_development_plan().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[47,8,47,14]}},{"key":"geid_130_2792","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_development_plan().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[47,15,47,19]}},{"key":"geid_130_2793","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_development_plan().","target":"scip-python python temp indexer `pilot.database.database`/save_progress().","attributes":{"type":"uses","at":[49,8,49,21]}},{"key":"geid_130_2794","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_development_plan().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[49,27,49,34]}},{"key":"geid_130_2795","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_development_plan().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[49,56,49,63]}},{"key":"geid_130_2796","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_development_plan().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[50,37,50,44]}},{"key":"geid_130_2797","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_development_plan().","target":"scip-python python temp indexer `pilot.utils.utils`/generate_app_data().","attributes":{"type":"uses","at":[50,75,50,92]}},{"key":"geid_130_2798","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_development_plan().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[50,98,50,105]}},{"key":"geid_130_2799","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_feature_plan().","target":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#save_dev_steps.","attributes":{"type":"uses","at":[56,13,56,27]}},{"key":"geid_130_2800","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_feature_plan().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","attributes":{"type":"uses","at":[57,34,57,44]}},{"key":"geid_130_2801","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_feature_plan().","target":"scip-python python temp indexer `pilot.database.database`/get_features_by_app_id().","attributes":{"type":"uses","at":[58,28,58,50]}},{"key":"geid_130_2802","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_feature_plan().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[58,56,58,63]}},{"key":"geid_130_2803","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_feature_plan().","target":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#convo_feature_plan.","attributes":{"type":"uses","at":[60,28,60,46]}},{"key":"geid_130_2804","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_feature_plan().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","attributes":{"type":"uses","at":[60,47,60,59]}},{"key":"geid_130_2805","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_feature_plan().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[62,29,62,36]}},{"key":"geid_130_2806","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_feature_plan().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[63,33,63,40]}},{"key":"geid_130_2807","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_feature_plan().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[64,36,64,43]}},{"key":"geid_130_2808","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_feature_plan().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[65,39,65,46]}},{"key":"geid_130_2809","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_feature_plan().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[66,37,66,44]}},{"key":"geid_130_2810","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_feature_plan().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[67,35,67,42]}},{"key":"geid_130_2811","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_feature_plan().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[68,37,68,44]}},{"key":"geid_130_2812","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_feature_plan().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[69,39,69,46]}},{"key":"geid_130_2813","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_feature_plan().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[70,42,70,49]}},{"key":"geid_130_2814","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_feature_plan().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[71,30,71,37]}},{"key":"geid_130_2815","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_feature_plan().","target":"scip-python python temp indexer `pilot.const.function_calls`/DEVELOPMENT_PLAN.","attributes":{"type":"uses","at":[75,15,75,31]}},{"key":"geid_130_2816","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_feature_plan().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[77,13,77,20]}},{"key":"geid_130_2817","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_feature_plan().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[79,8,79,14]}},{"key":"geid_130_2818","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_feature_plan().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[79,15,79,19]}},{"key":"geid_130_2819","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_feature_summary().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","attributes":{"type":"uses","at":[83,37,83,47]}},{"key":"geid_130_2820","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_feature_summary().","target":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#convo_feature_summary.","attributes":{"type":"uses","at":[85,28,85,49]}},{"key":"geid_130_2821","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_feature_summary().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","attributes":{"type":"uses","at":[85,50,85,62]}},{"key":"geid_130_2822","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_feature_summary().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[87,29,87,36]}},{"key":"geid_130_2823","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_feature_summary().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[88,33,88,40]}},{"key":"geid_130_2824","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_feature_summary().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[89,36,89,43]}},{"key":"geid_130_2825","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_feature_summary().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[91,42,91,49]}},{"key":"geid_130_2826","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_feature_summary().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[94,13,94,20]}},{"key":"geid_130_2827","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_feature_summary().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[96,20,96,27]}},{"key":"geid_130_2828","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_feature_summary().","target":"scip-python python temp indexer `pilot.database.database`/save_feature().","attributes":{"type":"uses","at":[97,12,97,24]}},{"key":"geid_130_2829","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_feature_summary().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[97,30,97,37]}},{"key":"geid_130_2830","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_feature_summary().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[98,30,98,37]}},{"key":"geid_130_2831","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_feature_summary().","target":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#convo_feature_plan.","attributes":{"type":"uses","at":[99,30,99,48]}},{"key":"geid_130_2832","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_feature_summary().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#messages.","attributes":{"type":"uses","at":[99,49,99,57]}},{"key":"geid_130_2833","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_feature_summary().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[100,30,100,37]}},{"key":"geid_130_2834","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_feature_summary().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[102,8,102,14]}},{"key":"geid_130_2835","source":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_feature_summary().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[102,15,102,19]}},{"key":"geid_130_2836","source":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#","target":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#create_api_documentation().","attributes":{"type":"defines","at":[51,4,53,14]}},{"key":"geid_130_2837","source":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#","target":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#create_readme().","attributes":{"type":"defines","at":[28,4,49,20]}},{"key":"geid_130_2838","source":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#","target":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#create_license().","attributes":{"type":"defines","at":[24,4,26,14]}},{"key":"geid_130_2839","source":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#","target":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#document_project().","attributes":{"type":"defines","at":[12,4,22,39]}},{"key":"geid_130_2840","source":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#","target":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#__init__().","attributes":{"type":"defines","at":[8,4,10,34]}},{"key":"geid_130_2841","source":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#","attributes":{"type":"defines","at":[7,0,53,14]}},{"key":"geid_130_2842","source":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/__init__:","attributes":{"type":"uses","at":[0,5,0,25]}},{"key":"geid_130_2843","source":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/GET_DOCUMENTATION_FILE.","attributes":{"type":"uses","at":[0,33,0,55]}},{"key":"geid_130_2844","source":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/__init__:","attributes":{"type":"uses","at":[1,5,1,23]}},{"key":"geid_130_2845","source":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","attributes":{"type":"uses","at":[1,31,1,41]}},{"key":"geid_130_2846","source":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agent`/__init__:","attributes":{"type":"uses","at":[2,5,2,18]}},{"key":"geid_130_2847","source":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#","attributes":{"type":"uses","at":[2,26,2,31]}},{"key":"geid_130_2848","source":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/__init__:","target":"scip-python python temp indexer `pilot.utils.files`/__init__:","attributes":{"type":"uses","at":[3,5,3,16]}},{"key":"geid_130_2849","source":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/__init__:","target":"scip-python python temp indexer `pilot.utils.files`/count_lines_of_code().","attributes":{"type":"uses","at":[3,24,3,43]}},{"key":"geid_130_2850","source":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/__init__:","attributes":{"type":"uses","at":[4,5,4,16]}},{"key":"geid_130_2851","source":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/color_green_bold.","attributes":{"type":"uses","at":[4,24,4,40]}},{"key":"geid_130_2852","source":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/color_green.","attributes":{"type":"uses","at":[4,42,4,53]}},{"key":"geid_130_2853","source":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#","attributes":{"type":"uses","at":[7,22,7,27]}},{"key":"geid_130_2854","source":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#__init__().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#__init__().","attributes":{"type":"uses","at":[9,16,9,24]}},{"key":"geid_130_2855","source":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#document_project().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[13,21,13,28]}},{"key":"geid_130_2856","source":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#document_project().","target":"scip-python python temp indexer `pilot.utils.style`/color_green_bold.","attributes":{"type":"uses","at":[14,17,14,33]}},{"key":"geid_130_2857","source":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#document_project().","target":"scip-python python temp indexer `pilot.utils.style`/color_green.","attributes":{"type":"uses","at":[15,29,15,40]}},{"key":"geid_130_2858","source":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#document_project().","target":"scip-python python temp indexer `pilot.utils.style`/color_green.","attributes":{"type":"uses","at":[17,17,17,28]}},{"key":"geid_130_2859","source":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#document_project().","target":"scip-python python temp indexer `pilot.utils.style`/color_green.","attributes":{"type":"uses","at":[18,17,18,28]}},{"key":"geid_130_2860","source":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#document_project().","target":"scip-python python temp indexer `pilot.utils.files`/count_lines_of_code().","attributes":{"type":"uses","at":[18,29,18,48]}},{"key":"geid_130_2861","source":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#document_project().","target":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#create_license().","attributes":{"type":"uses","at":[20,13,20,27]}},{"key":"geid_130_2862","source":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#document_project().","target":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#create_readme().","attributes":{"type":"uses","at":[21,13,21,26]}},{"key":"geid_130_2863","source":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#document_project().","target":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#create_api_documentation().","attributes":{"type":"uses","at":[22,13,22,37]}},{"key":"geid_130_2864","source":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#create_readme().","target":"scip-python python temp indexer `pilot.utils.style`/color_green.","attributes":{"type":"uses","at":[29,14,29,25]}},{"key":"geid_130_2865","source":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#create_readme().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","attributes":{"type":"uses","at":[30,16,30,26]}},{"key":"geid_130_2866","source":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#create_readme().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#send_message().","attributes":{"type":"uses","at":[32,29,32,41]}},{"key":"geid_130_2867","source":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#create_readme().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[33,25,33,32]}},{"key":"geid_130_2868","source":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#create_readme().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[34,29,34,36]}},{"key":"geid_130_2869","source":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#create_readme().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[35,32,35,39]}},{"key":"geid_130_2870","source":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#create_readme().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[36,35,36,42]}},{"key":"geid_130_2871","source":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#create_readme().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[37,33,37,40]}},{"key":"geid_130_2872","source":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#create_readme().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[38,31,38,38]}},{"key":"geid_130_2873","source":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#create_readme().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[39,33,39,40]}},{"key":"geid_130_2874","source":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#create_readme().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[40,35,40,42]}},{"key":"geid_130_2875","source":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#create_readme().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[41,26,41,33]}},{"key":"geid_130_2876","source":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#create_readme().","target":"scip-python python temp indexer `pilot.const.function_calls`/GET_DOCUMENTATION_FILE.","attributes":{"type":"uses","at":[42,11,42,33]}},{"key":"geid_130_2877","source":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#create_readme().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[44,23,44,30]}},{"key":"geid_130_2878","source":"scip-python python temp indexer `pilot.helpers.agents.technicalwriter`/TechnicalWriter#create_readme().","target":"scip-python python temp indexer `pilot.helpers.agent`/Agent#project.","attributes":{"type":"uses","at":[47,17,47,24]}},{"key":"geid_130_2879","source":"scip-python python temp indexer `pilot.helpers.agents`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.architect`/__init__:","attributes":{"type":"uses","at":[0,5,0,15]}},{"key":"geid_130_2880","source":"scip-python python temp indexer `pilot.helpers.agents`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.architect`/__init__:","attributes":{"type":"uses","at":[0,23,0,32]}},{"key":"geid_130_2881","source":"scip-python python temp indexer `pilot.helpers.agents`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.architect`/ARCHITECTURE_STEP.","attributes":{"type":"uses","at":[0,34,0,51]}},{"key":"geid_130_2882","source":"scip-python python temp indexer `pilot.helpers.agents`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.codemonkey`/__init__:","attributes":{"type":"uses","at":[1,5,1,16]}},{"key":"geid_130_2883","source":"scip-python python temp indexer `pilot.helpers.agents`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.codemonkey`/__init__:","attributes":{"type":"uses","at":[1,24,1,34]}},{"key":"geid_130_2884","source":"scip-python python temp indexer `pilot.helpers.agents`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/IMPLEMENT_CHANGES.","attributes":{"type":"uses","at":[1,36,1,53]}},{"key":"geid_130_2885","source":"scip-python python temp indexer `pilot.helpers.agents`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/GET_FILES.","attributes":{"type":"uses","at":[1,55,1,64]}},{"key":"geid_130_2886","source":"scip-python python temp indexer `pilot.helpers.agents`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","attributes":{"type":"uses","at":[2,5,2,15]}},{"key":"geid_130_2887","source":"scip-python python temp indexer `pilot.helpers.agents`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","attributes":{"type":"uses","at":[2,23,2,32]}},{"key":"geid_130_2888","source":"scip-python python temp indexer `pilot.helpers.agents`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/ENVIRONMENT_SETUP_STEP.","attributes":{"type":"uses","at":[2,34,2,56]}},{"key":"geid_130_2889","source":"scip-python python temp indexer `pilot.helpers.agents`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.techlead`/__init__:","attributes":{"type":"uses","at":[3,5,3,14]}},{"key":"geid_130_2890","source":"scip-python python temp indexer `pilot.helpers.agents`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.techlead`/__init__:","attributes":{"type":"uses","at":[3,22,3,30]}},{"key":"geid_130_2891","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#","target":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#test_implement_code_changes_with_read().","attributes":{"type":"defines","at":[82,4,122,65]}},{"key":"geid_130_2892","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#","target":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#test_implement_code_changes().","attributes":{"type":"defines","at":[42,4,80,61]}},{"key":"geid_130_2893","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#","target":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#setup_method().","attributes":{"type":"defines","at":[19,4,40,76]}},{"key":"geid_130_2894","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#","attributes":{"type":"defines","at":[18,0,122,65]}},{"key":"geid_130_2895","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/__init__:","target":"scip-python python python-stdlib 3.11 re/__init__:","attributes":{"type":"uses","at":[0,7,0,9]}},{"key":"geid_130_2896","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/__init__:","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[1,7,1,9]}},{"key":"geid_130_2897","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/__init__:","target":"scip-python python python-stdlib 3.11 `unittest.mock`/__init__:","attributes":{"type":"uses","at":[2,5,2,18]}},{"key":"geid_130_2898","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/__init__:","target":"scip-python python python-dotenv 1.0.0 dotenv/__init__:","attributes":{"type":"uses","at":[3,5,3,11]}},{"key":"geid_130_2899","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/__init__:","target":"scip-python python python-dotenv 1.0.0 `dotenv.main`/load_dotenv().","attributes":{"type":"uses","at":[3,19,3,30]}},{"key":"geid_130_2900","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/__init__:","target":"scip-python python python-dotenv 1.0.0 `dotenv.main`/load_dotenv().","attributes":{"type":"uses","at":[4,0,4,11]}},{"key":"geid_130_2901","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.codemonkey`/__init__:","attributes":{"type":"uses","at":[6,5,6,16]}},{"key":"geid_130_2902","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.codemonkey`/CodeMonkey#","attributes":{"type":"uses","at":[6,24,6,34]}},{"key":"geid_130_2903","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","attributes":{"type":"uses","at":[7,5,7,15]}},{"key":"geid_130_2904","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#","attributes":{"type":"uses","at":[7,23,7,32]}},{"key":"geid_130_2905","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/__init__:","target":"scip-python python temp indexer `pilot.database.models.files`/__init__:","attributes":{"type":"uses","at":[8,5,8,26]}},{"key":"geid_130_2906","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/__init__:","target":"scip-python python temp indexer `pilot.database.models.files`/File#","attributes":{"type":"uses","at":[8,34,8,38]}},{"key":"geid_130_2907","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/__init__:","target":"scip-python python temp indexer `pilot.database.models.development_steps`/__init__:","attributes":{"type":"uses","at":[9,5,9,38]}},{"key":"geid_130_2908","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/__init__:","target":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#","attributes":{"type":"uses","at":[9,46,9,62]}},{"key":"geid_130_2909","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/__init__:","target":"scip-python python temp indexer `pilot.helpers.project`/__init__:","attributes":{"type":"uses","at":[10,5,10,20]}},{"key":"geid_130_2910","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/__init__:","target":"scip-python python temp indexer `pilot.helpers.project`/Project#","attributes":{"type":"uses","at":[10,28,10,35]}},{"key":"geid_130_2911","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/__init__:","target":"scip-python python temp indexer `pilot.helpers.files`/update_file().","attributes":{"type":"uses","at":[10,37,10,48]}},{"key":"geid_130_2912","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/__init__:","target":"scip-python python temp indexer `pilot.helpers.files`/clear_directory().","attributes":{"type":"uses","at":[10,50,10,65]}},{"key":"geid_130_2913","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/__init__:","attributes":{"type":"uses","at":[11,5,11,23]}},{"key":"geid_130_2914","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","attributes":{"type":"uses","at":[11,31,11,41]}},{"key":"geid_130_2915","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/__init__:","target":"scip-python python temp indexer `pilot.test.test_utils`/__init__:","attributes":{"type":"uses","at":[12,5,12,20]}},{"key":"geid_130_2916","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/__init__:","target":"scip-python python temp indexer `pilot.test.test_utils`/mock_terminal_size().","attributes":{"type":"uses","at":[12,28,12,46]}},{"key":"geid_130_2917","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#setup_method().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#","attributes":{"type":"uses","at":[21,23,21,30]}},{"key":"geid_130_2918","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#setup_method().","target":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#project.","attributes":{"type":"uses","at":[32,13,32,20]}},{"key":"geid_130_2919","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#setup_method().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#set_root_path().","attributes":{"type":"uses","at":[32,21,32,34]}},{"key":"geid_130_2920","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#setup_method().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[32,35,32,37]}},{"key":"geid_130_2921","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#setup_method().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[32,38,32,42]}},{"key":"geid_130_2922","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#setup_method().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[32,43,32,50]}},{"key":"geid_130_2923","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#setup_method().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[32,51,32,53]}},{"key":"geid_130_2924","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#setup_method().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[32,54,32,58]}},{"key":"geid_130_2925","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#setup_method().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[32,59,32,63]}},{"key":"geid_130_2926","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#setup_method().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[32,64,32,66]}},{"key":"geid_130_2927","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#setup_method().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[32,67,32,71]}},{"key":"geid_130_2928","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#setup_method().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[32,72,32,79]}},{"key":"geid_130_2929","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#setup_method().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[32,80,32,82]}},{"key":"geid_130_2930","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#setup_method().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[32,83,32,87]}},{"key":"geid_130_2931","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#setup_method().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[32,88,32,95]}},{"key":"geid_130_2932","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#setup_method().","target":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/","attributes":{"type":"uses","at":[32,96,32,104]}},{"key":"geid_130_2933","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#setup_method().","target":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#project.","attributes":{"type":"uses","at":[34,13,34,20]}},{"key":"geid_130_2934","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#setup_method().","target":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#","attributes":{"type":"uses","at":[35,20,35,36]}},{"key":"geid_130_2935","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#setup_method().","target":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#id.","attributes":{"type":"uses","at":[36,18,36,20]}},{"key":"geid_130_2936","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#setup_method().","target":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#project.","attributes":{"type":"uses","at":[37,13,37,20]}},{"key":"geid_130_2937","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#setup_method().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#checkpoints.","attributes":{"type":"uses","at":[37,21,37,32]}},{"key":"geid_130_2938","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#setup_method().","target":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#project.","attributes":{"type":"uses","at":[38,13,38,20]}},{"key":"geid_130_2939","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#setup_method().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#","attributes":{"type":"uses","at":[39,25,39,34]}},{"key":"geid_130_2940","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#setup_method().","target":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#project.","attributes":{"type":"uses","at":[39,40,39,47]}},{"key":"geid_130_2941","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#setup_method().","target":"scip-python python temp indexer `pilot.helpers.agents.codemonkey`/CodeMonkey#","attributes":{"type":"uses","at":[40,26,40,36]}},{"key":"geid_130_2942","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#setup_method().","target":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#project.","attributes":{"type":"uses","at":[40,42,40,49]}},{"key":"geid_130_2943","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#setup_method().","target":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#developer.","attributes":{"type":"uses","at":[40,66,40,75]}},{"key":"geid_130_2944","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#test_implement_code_changes().","target":"scip-python python temp indexer `pilot.test.test_utils`/mock_terminal_size().","attributes":{"type":"uses","at":[44,35,44,53]}},{"key":"geid_130_2945","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#test_implement_code_changes().","target":"scip-python python temp indexer `pilot.database.models.files`/File#","attributes":{"type":"uses","at":[45,18,45,22]}},{"key":"geid_130_2946","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#test_implement_code_changes().","target":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#project.","attributes":{"type":"uses","at":[50,13,50,20]}},{"key":"geid_130_2947","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#test_implement_code_changes().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#get_all_coded_files().","attributes":{"type":"uses","at":[50,21,50,40]}},{"key":"geid_130_2948","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#test_implement_code_changes().","target":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/SEND_TO_LLM.","attributes":{"type":"uses","at":[52,11,52,22]}},{"key":"geid_130_2949","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#test_implement_code_changes().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","attributes":{"type":"uses","at":[53,20,53,30]}},{"key":"geid_130_2950","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#test_implement_code_changes().","target":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#codeMonkey.","attributes":{"type":"uses","at":[53,36,53,46]}},{"key":"geid_130_2951","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#test_implement_code_changes().","target":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/WRITE_TO_FILE.","attributes":{"type":"uses","at":[67,11,67,24]}},{"key":"geid_130_2952","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#test_implement_code_changes().","target":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#codeMonkey.","attributes":{"type":"uses","at":[68,17,68,27]}},{"key":"geid_130_2953","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#test_implement_code_changes().","target":"scip-python python temp indexer `pilot.helpers.agents.codemonkey`/CodeMonkey#implement_code_changes().","attributes":{"type":"uses","at":[68,28,68,50]}},{"key":"geid_130_2954","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#test_implement_code_changes().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#","attributes":{"type":"uses","at":[71,30,71,37]}},{"key":"geid_130_2955","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#test_implement_code_changes().","target":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#codeMonkey.","attributes":{"type":"uses","at":[73,21,73,31]}},{"key":"geid_130_2956","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#test_implement_code_changes().","target":"scip-python python temp indexer `pilot.helpers.agents.codemonkey`/CodeMonkey#implement_code_changes().","attributes":{"type":"uses","at":[73,32,73,54]}},{"key":"geid_130_2957","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#test_implement_code_changes().","target":"scip-python python python-stdlib 3.11 re/__init__:","attributes":{"type":"uses","at":[78,23,78,25]}},{"key":"geid_130_2958","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#test_implement_code_changes().","target":"scip-python python python-stdlib 3.11 re/match().","attributes":{"type":"uses","at":[78,26,78,31]}},{"key":"geid_130_2959","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#test_implement_code_changes_with_read().","target":"scip-python python temp indexer `pilot.test.test_utils`/mock_terminal_size().","attributes":{"type":"uses","at":[84,35,84,53]}},{"key":"geid_130_2960","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#test_implement_code_changes_with_read().","target":"scip-python python temp indexer `pilot.database.models.files`/File#","attributes":{"type":"uses","at":[85,18,85,22]}},{"key":"geid_130_2961","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#test_implement_code_changes_with_read().","target":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#project.","attributes":{"type":"uses","at":[90,25,90,32]}},{"key":"geid_130_2962","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#test_implement_code_changes_with_read().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#root_path.","attributes":{"type":"uses","at":[90,33,90,42]}},{"key":"geid_130_2963","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#test_implement_code_changes_with_read().","target":"scip-python python temp indexer `pilot.helpers.files`/update_file().","attributes":{"type":"uses","at":[91,8,91,19]}},{"key":"geid_130_2964","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#test_implement_code_changes_with_read().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[91,20,91,22]}},{"key":"geid_130_2965","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#test_implement_code_changes_with_read().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[91,23,91,27]}},{"key":"geid_130_2966","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#test_implement_code_changes_with_read().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[91,28,91,32]}},{"key":"geid_130_2967","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#test_implement_code_changes_with_read().","target":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#project.","attributes":{"type":"uses","at":[92,13,92,20]}},{"key":"geid_130_2968","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#test_implement_code_changes_with_read().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#get_all_coded_files().","attributes":{"type":"uses","at":[92,21,92,40]}},{"key":"geid_130_2969","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#test_implement_code_changes_with_read().","target":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/SEND_TO_LLM.","attributes":{"type":"uses","at":[94,11,94,22]}},{"key":"geid_130_2970","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#test_implement_code_changes_with_read().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","attributes":{"type":"uses","at":[95,20,95,30]}},{"key":"geid_130_2971","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#test_implement_code_changes_with_read().","target":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#codeMonkey.","attributes":{"type":"uses","at":[95,36,95,46]}},{"key":"geid_130_2972","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#test_implement_code_changes_with_read().","target":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/WRITE_TO_FILE.","attributes":{"type":"uses","at":[109,11,109,24]}},{"key":"geid_130_2973","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#test_implement_code_changes_with_read().","target":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#codeMonkey.","attributes":{"type":"uses","at":[110,17,110,27]}},{"key":"geid_130_2974","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#test_implement_code_changes_with_read().","target":"scip-python python temp indexer `pilot.helpers.agents.codemonkey`/CodeMonkey#implement_code_changes().","attributes":{"type":"uses","at":[110,28,110,50]}},{"key":"geid_130_2975","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#test_implement_code_changes_with_read().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#","attributes":{"type":"uses","at":[112,30,112,37]}},{"key":"geid_130_2976","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#test_implement_code_changes_with_read().","target":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#codeMonkey.","attributes":{"type":"uses","at":[114,21,114,31]}},{"key":"geid_130_2977","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#test_implement_code_changes_with_read().","target":"scip-python python temp indexer `pilot.helpers.agents.codemonkey`/CodeMonkey#implement_code_changes().","attributes":{"type":"uses","at":[114,32,114,54]}},{"key":"geid_130_2978","source":"scip-python python temp indexer `pilot.helpers.agents.test_codemonkey`/TestCodeMonkey#test_implement_code_changes_with_read().","target":"scip-python python temp indexer `pilot.helpers.files`/clear_directory().","attributes":{"type":"uses","at":[117,16,117,31]}},{"key":"geid_130_2979","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_test_code_changes_invalid_json().","target":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#generate_response().","attributes":{"type":"defines","at":[205,8,224,27]}},{"key":"geid_130_2980","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#","target":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_test_code_changes_invalid_json().","attributes":{"type":"defines","at":[183,4,237,49]}},{"key":"geid_130_2981","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#","target":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_code_changes_manual_test_no().","attributes":{"type":"defines","at":[154,4,181,66]}},{"key":"geid_130_2982","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#","target":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_code_changes_manual_test_continue().","attributes":{"type":"defines","at":[136,4,152,42]}},{"key":"geid_130_2983","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#","target":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_code_changes_command_test().","attributes":{"type":"defines","at":[111,4,134,42]}},{"key":"geid_130_2984","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#","target":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_implement_task_reject_with_user_input().","attributes":{"type":"defines","at":[78,4,109,53]}},{"key":"geid_130_2985","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#","target":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_implement_task().","attributes":{"type":"defines","at":[51,4,76,80]}},{"key":"geid_130_2986","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#","target":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_install_technology().","attributes":{"type":"defines","at":[33,4,49,115]}},{"key":"geid_130_2987","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#","target":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#setup_method().","attributes":{"type":"defines","at":[19,4,31,48]}},{"key":"geid_130_2988","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#","attributes":{"type":"defines","at":[18,0,237,49]}},{"key":"geid_130_2989","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/__init__:","target":"scip-python python python-stdlib 3.11 json/__init__:","attributes":{"type":"uses","at":[1,7,1,11]}},{"key":"geid_130_2990","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/__init__:","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[2,7,2,9]}},{"key":"geid_130_2991","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/__init__:","target":"scip-python python python-stdlib 3.11 `unittest.mock`/__init__:","attributes":{"type":"uses","at":[4,5,4,18]}},{"key":"geid_130_2992","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/__init__:","target":"scip-python python requests 2.31.0 requests/__init__:","attributes":{"type":"uses","at":[6,7,6,15]}},{"key":"geid_130_2993","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/__init__:","attributes":{"type":"uses","at":[8,5,8,23]}},{"key":"geid_130_2994","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","attributes":{"type":"uses","at":[8,31,8,41]}},{"key":"geid_130_2995","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/__init__:","target":"scip-python python python-dotenv 1.0.0 dotenv/__init__:","attributes":{"type":"uses","at":[9,5,9,11]}},{"key":"geid_130_2996","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/__init__:","target":"scip-python python python-dotenv 1.0.0 `dotenv.main`/load_dotenv().","attributes":{"type":"uses","at":[9,19,9,30]}},{"key":"geid_130_2997","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/__init__:","target":"scip-python python python-dotenv 1.0.0 `dotenv.main`/load_dotenv().","attributes":{"type":"uses","at":[10,0,10,11]}},{"key":"geid_130_2998","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/__init__:","target":"scip-python python temp indexer `pilot.main`/__init__:","attributes":{"type":"uses","at":[12,5,12,9]}},{"key":"geid_130_2999","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/__init__:","target":"scip-python python temp indexer `pilot.utils.custom_print`/get_custom_print().","attributes":{"type":"uses","at":[12,17,12,33]}},{"key":"geid_130_3000","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/__init__:","attributes":{"type":"uses","at":[13,5,13,15]}},{"key":"geid_130_3001","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#","attributes":{"type":"uses","at":[13,23,13,32]}},{"key":"geid_130_3002","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/ENVIRONMENT_SETUP_STEP.","attributes":{"type":"uses","at":[13,34,13,56]}},{"key":"geid_130_3003","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/__init__:","target":"scip-python python temp indexer `pilot.test.mock_questionary`/__init__:","attributes":{"type":"uses","at":[14,5,14,26]}},{"key":"geid_130_3004","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/__init__:","target":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#","attributes":{"type":"uses","at":[14,34,14,49]}},{"key":"geid_130_3005","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/__init__:","target":"scip-python python temp indexer `pilot.helpers.test_project`/__init__:","attributes":{"type":"uses","at":[15,5,15,25]}},{"key":"geid_130_3006","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/__init__:","target":"scip-python python temp indexer `pilot.helpers.test_project`/create_project().","attributes":{"type":"uses","at":[15,33,15,47]}},{"key":"geid_130_3007","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#setup_method().","target":"scip-python python temp indexer `pilot.utils.custom_print`/get_custom_print().","attributes":{"type":"uses","at":[20,46,20,62]}},{"key":"geid_130_3008","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#setup_method().","target":"scip-python python temp indexer `pilot.helpers.test_project`/create_project().","attributes":{"type":"uses","at":[23,23,23,37]}},{"key":"geid_130_3009","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#setup_method().","target":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#project.","attributes":{"type":"uses","at":[24,13,24,20]}},{"key":"geid_130_3010","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#setup_method().","target":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#project.","attributes":{"type":"uses","at":[25,13,25,20]}},{"key":"geid_130_3011","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#setup_method().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#name.","attributes":{"type":"uses","at":[25,21,25,25]}},{"key":"geid_130_3012","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#setup_method().","target":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#project.","attributes":{"type":"uses","at":[26,13,26,20]}},{"key":"geid_130_3013","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#setup_method().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#set_root_path().","attributes":{"type":"uses","at":[26,21,26,34]}},{"key":"geid_130_3014","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#setup_method().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[26,35,26,37]}},{"key":"geid_130_3015","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#setup_method().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[26,38,26,42]}},{"key":"geid_130_3016","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#setup_method().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[26,43,26,50]}},{"key":"geid_130_3017","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#setup_method().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[26,51,26,53]}},{"key":"geid_130_3018","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#setup_method().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[26,54,26,58]}},{"key":"geid_130_3019","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#setup_method().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[26,59,26,63]}},{"key":"geid_130_3020","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#setup_method().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[26,64,26,66]}},{"key":"geid_130_3021","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#setup_method().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[26,67,26,71]}},{"key":"geid_130_3022","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#setup_method().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[26,72,26,79]}},{"key":"geid_130_3023","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#setup_method().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[26,80,26,82]}},{"key":"geid_130_3024","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#setup_method().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[26,83,26,87]}},{"key":"geid_130_3025","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#setup_method().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[26,88,26,95]}},{"key":"geid_130_3026","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#setup_method().","target":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/","attributes":{"type":"uses","at":[26,96,26,104]}},{"key":"geid_130_3027","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#setup_method().","target":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#project.","attributes":{"type":"uses","at":[29,13,29,20]}},{"key":"geid_130_3028","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#setup_method().","target":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#project.","attributes":{"type":"uses","at":[30,13,30,20]}},{"key":"geid_130_3029","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#setup_method().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#current_step.","attributes":{"type":"uses","at":[30,21,30,33]}},{"key":"geid_130_3030","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#setup_method().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/ENVIRONMENT_SETUP_STEP.","attributes":{"type":"uses","at":[30,36,30,58]}},{"key":"geid_130_3031","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#setup_method().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#","attributes":{"type":"uses","at":[31,25,31,34]}},{"key":"geid_130_3032","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#setup_method().","target":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#project.","attributes":{"type":"uses","at":[31,40,31,47]}},{"key":"geid_130_3033","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_install_technology().","target":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#developer.","attributes":{"type":"uses","at":[42,13,42,22]}},{"key":"geid_130_3034","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_install_technology().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#convo_os_specific_tech.","attributes":{"type":"uses","at":[42,23,42,45]}},{"key":"geid_130_3035","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_install_technology().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","attributes":{"type":"uses","at":[42,48,42,58]}},{"key":"geid_130_3036","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_install_technology().","target":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#developer.","attributes":{"type":"uses","at":[42,64,42,73]}},{"key":"geid_130_3037","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_install_technology().","target":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#developer.","attributes":{"type":"uses","at":[45,28,45,37]}},{"key":"geid_130_3038","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_install_technology().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#install_technology().","attributes":{"type":"uses","at":[45,38,45,56]}},{"key":"geid_130_3039","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_install_technology().","target":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#project.","attributes":{"type":"uses","at":[49,58,49,65]}},{"key":"geid_130_3040","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_implement_task().","target":"scip-python python temp indexer `pilot.helpers.test_project`/create_project().","attributes":{"type":"uses","at":[57,18,57,32]}},{"key":"geid_130_3041","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_implement_task().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#project_description.","attributes":{"type":"uses","at":[58,16,58,35]}},{"key":"geid_130_3042","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_implement_task().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#development_plan.","attributes":{"type":"uses","at":[59,16,59,32]}},{"key":"geid_130_3043","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_implement_task().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#get_all_coded_files().","attributes":{"type":"uses","at":[63,16,63,35]}},{"key":"geid_130_3044","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_implement_task().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#current_step.","attributes":{"type":"uses","at":[64,16,64,28]}},{"key":"geid_130_3045","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_implement_task().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#","attributes":{"type":"uses","at":[67,20,67,29]}},{"key":"geid_130_3046","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_implement_task().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#execute_task().","attributes":{"type":"uses","at":[68,18,68,30]}},{"key":"geid_130_3047","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_implement_task().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#execute_task().","attributes":{"type":"uses","at":[69,18,69,30]}},{"key":"geid_130_3048","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_implement_task().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#implement_task().","attributes":{"type":"uses","at":[72,18,72,32]}},{"key":"geid_130_3049","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_implement_task().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#execute_task().","attributes":{"type":"uses","at":[75,25,75,37]}},{"key":"geid_130_3050","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_implement_task().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#execute_task().","attributes":{"type":"uses","at":[76,25,76,37]}},{"key":"geid_130_3051","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_implement_task_reject_with_user_input().","target":"scip-python python temp indexer `pilot.helpers.test_project`/create_project().","attributes":{"type":"uses","at":[84,18,84,32]}},{"key":"geid_130_3052","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_implement_task_reject_with_user_input().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#project_description.","attributes":{"type":"uses","at":[85,16,85,35]}},{"key":"geid_130_3053","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_implement_task_reject_with_user_input().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#development_plan.","attributes":{"type":"uses","at":[86,16,86,32]}},{"key":"geid_130_3054","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_implement_task_reject_with_user_input().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#get_all_coded_files().","attributes":{"type":"uses","at":[90,16,90,35]}},{"key":"geid_130_3055","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_implement_task_reject_with_user_input().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#current_step.","attributes":{"type":"uses","at":[91,16,91,28]}},{"key":"geid_130_3056","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_implement_task_reject_with_user_input().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#","attributes":{"type":"uses","at":[94,20,94,29]}},{"key":"geid_130_3057","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_implement_task_reject_with_user_input().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#execute_task().","attributes":{"type":"uses","at":[95,18,95,30]}},{"key":"geid_130_3058","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_implement_task_reject_with_user_input().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#execute_task().","attributes":{"type":"uses","at":[96,18,96,30]}},{"key":"geid_130_3059","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_implement_task_reject_with_user_input().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#implement_task().","attributes":{"type":"uses","at":[102,18,102,32]}},{"key":"geid_130_3060","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_implement_task_reject_with_user_input().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#execute_task().","attributes":{"type":"uses","at":[109,25,109,37]}},{"key":"geid_130_3061","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_code_changes_command_test().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","attributes":{"type":"uses","at":[126,16,126,26]}},{"key":"geid_130_3062","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_code_changes_command_test().","target":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#developer.","attributes":{"type":"uses","at":[126,32,126,41]}},{"key":"geid_130_3063","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_code_changes_command_test().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#save_branch().","attributes":{"type":"uses","at":[127,14,127,25]}},{"key":"geid_130_3064","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_code_changes_command_test().","target":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#developer.","attributes":{"type":"uses","at":[131,22,131,31]}},{"key":"geid_130_3065","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_code_changes_command_test().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#test_code_changes().","attributes":{"type":"uses","at":[131,32,131,49]}},{"key":"geid_130_3066","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_code_changes_manual_test_continue().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","attributes":{"type":"uses","at":[145,16,145,26]}},{"key":"geid_130_3067","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_code_changes_manual_test_continue().","target":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#developer.","attributes":{"type":"uses","at":[145,32,145,41]}},{"key":"geid_130_3068","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_code_changes_manual_test_continue().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#save_branch().","attributes":{"type":"uses","at":[146,14,146,25]}},{"key":"geid_130_3069","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_code_changes_manual_test_continue().","target":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#developer.","attributes":{"type":"uses","at":[149,22,149,31]}},{"key":"geid_130_3070","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_code_changes_manual_test_continue().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#test_code_changes().","attributes":{"type":"uses","at":[149,32,149,49]}},{"key":"geid_130_3071","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_code_changes_manual_test_no().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","attributes":{"type":"uses","at":[163,16,163,26]}},{"key":"geid_130_3072","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_code_changes_manual_test_no().","target":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#developer.","attributes":{"type":"uses","at":[163,32,163,41]}},{"key":"geid_130_3073","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_code_changes_manual_test_no().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#save_branch().","attributes":{"type":"uses","at":[164,14,164,25]}},{"key":"geid_130_3074","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_code_changes_manual_test_no().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#load_branch().","attributes":{"type":"uses","at":[165,14,165,25]}},{"key":"geid_130_3075","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_code_changes_manual_test_no().","target":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#project.","attributes":{"type":"uses","at":[166,13,166,20]}},{"key":"geid_130_3076","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_code_changes_manual_test_no().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#developer.","attributes":{"type":"uses","at":[166,21,166,30]}},{"key":"geid_130_3077","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_code_changes_manual_test_no().","target":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#developer.","attributes":{"type":"uses","at":[166,38,166,47]}},{"key":"geid_130_3078","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_code_changes_manual_test_no().","target":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#","attributes":{"type":"uses","at":[174,27,174,42]}},{"key":"geid_130_3079","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_code_changes_manual_test_no().","target":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#developer.","attributes":{"type":"uses","at":[178,26,178,35]}},{"key":"geid_130_3080","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_code_changes_manual_test_no().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#test_code_changes().","attributes":{"type":"uses","at":[178,36,178,53]}},{"key":"geid_130_3081","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_test_code_changes_invalid_json().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","attributes":{"type":"uses","at":[196,16,196,26]}},{"key":"geid_130_3082","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_test_code_changes_invalid_json().","target":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#developer.","attributes":{"type":"uses","at":[196,32,196,41]}},{"key":"geid_130_3083","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_test_code_changes_invalid_json().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#save_branch().","attributes":{"type":"uses","at":[197,14,197,25]}},{"key":"geid_130_3084","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_test_code_changes_invalid_json().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#load_branch().","attributes":{"type":"uses","at":[198,14,198,25]}},{"key":"geid_130_3085","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_test_code_changes_invalid_json().","target":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#project.","attributes":{"type":"uses","at":[199,13,199,20]}},{"key":"geid_130_3086","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_test_code_changes_invalid_json().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#developer.","attributes":{"type":"uses","at":[199,21,199,30]}},{"key":"geid_130_3087","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_test_code_changes_invalid_json().","target":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#developer.","attributes":{"type":"uses","at":[199,38,199,47]}},{"key":"geid_130_3088","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#generate_response().","target":"scip-python python python-stdlib 3.11 json/__init__:","attributes":{"type":"uses","at":[210,27,210,31]}},{"key":"geid_130_3089","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#generate_response().","target":"scip-python python python-stdlib 3.11 json/dumps().","attributes":{"type":"uses","at":[210,32,210,37]}},{"key":"geid_130_3090","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#generate_response().","target":"scip-python python python-stdlib 3.11 json/__init__:","attributes":{"type":"uses","at":[217,21,217,25]}},{"key":"geid_130_3091","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#generate_response().","target":"scip-python python python-stdlib 3.11 json/dumps().","attributes":{"type":"uses","at":[217,26,217,31]}},{"key":"geid_130_3092","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#generate_response().","target":"scip-python python python-stdlib 3.11 json/__init__:","attributes":{"type":"uses","at":[218,19,218,23]}},{"key":"geid_130_3093","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#generate_response().","target":"scip-python python python-stdlib 3.11 json/dumps().","attributes":{"type":"uses","at":[218,24,218,29]}},{"key":"geid_130_3094","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#generate_response().","target":"scip-python python python-stdlib 3.11 json/__init__:","attributes":{"type":"uses","at":[218,43,218,47]}},{"key":"geid_130_3095","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#generate_response().","target":"scip-python python python-stdlib 3.11 json/loads().","attributes":{"type":"uses","at":[218,48,218,53]}},{"key":"geid_130_3096","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#generate_response().","target":"scip-python python requests 2.31.0 requests/__init__:","attributes":{"type":"uses","at":[220,23,220,31]}},{"key":"geid_130_3097","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#generate_response().","target":"scip-python python temp indexer `requests.models`/Response#","attributes":{"type":"uses","at":[220,32,220,40]}},{"key":"geid_130_3098","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#generate_response().","target":"scip-python python temp indexer `requests.models`/Response#status_code.","attributes":{"type":"uses","at":[221,21,221,32]}},{"key":"geid_130_3099","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#generate_response().","target":"scip-python python temp indexer `requests.models`/Response#iter_lines().","attributes":{"type":"uses","at":[222,21,222,31]}},{"key":"geid_130_3100","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_test_code_changes_invalid_json().","target":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#generate_response().","attributes":{"type":"uses","at":[226,41,226,58]}},{"key":"geid_130_3101","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_test_code_changes_invalid_json().","target":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#developer.","attributes":{"type":"uses","at":[233,22,233,31]}},{"key":"geid_130_3102","source":"scip-python python temp indexer `pilot.helpers.agents.test_developer`/TestDeveloper#test_test_code_changes_invalid_json().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#test_code_changes().","attributes":{"type":"uses","at":[233,32,233,49]}},{"key":"geid_130_3103","source":"scip-python python temp indexer `pilot.helpers.agents.test_productowner`/TestProductOwner#","target":"scip-python python temp indexer `pilot.helpers.agents.test_productowner`/TestProductOwner#test_generate_project_summary().","attributes":{"type":"defines","at":[38,4,66,45]}},{"key":"geid_130_3104","source":"scip-python python temp indexer `pilot.helpers.agents.test_productowner`/TestProductOwner#","target":"scip-python python temp indexer `pilot.helpers.agents.test_productowner`/TestProductOwner#test_ask_clarifying_questions().","attributes":{"type":"defines","at":[16,4,36,69]}},{"key":"geid_130_3105","source":"scip-python python temp indexer `pilot.helpers.agents.test_productowner`/TestProductOwner#","target":"scip-python python temp indexer `pilot.helpers.agents.test_productowner`/TestProductOwner#setup_method().","attributes":{"type":"defines","at":[13,4,14,66]}},{"key":"geid_130_3106","source":"scip-python python temp indexer `pilot.helpers.agents.test_productowner`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.test_productowner`/TestProductOwner#","attributes":{"type":"defines","at":[12,0,66,45]}},{"key":"geid_130_3107","source":"scip-python python temp indexer `pilot.helpers.agents.test_productowner`/__init__:","target":"scip-python python python-dotenv 1.0.0 dotenv/__init__:","attributes":{"type":"uses","at":[3,5,3,11]}},{"key":"geid_130_3108","source":"scip-python python temp indexer `pilot.helpers.agents.test_productowner`/__init__:","target":"scip-python python python-dotenv 1.0.0 `dotenv.main`/load_dotenv().","attributes":{"type":"uses","at":[3,19,3,30]}},{"key":"geid_130_3109","source":"scip-python python temp indexer `pilot.helpers.agents.test_productowner`/__init__:","target":"scip-python python python-stdlib 3.11 `unittest.mock`/__init__:","attributes":{"type":"uses","at":[4,5,4,18]}},{"key":"geid_130_3110","source":"scip-python python temp indexer `pilot.helpers.agents.test_productowner`/__init__:","target":"scip-python python temp indexer `pilot.main`/__init__:","attributes":{"type":"uses","at":[5,5,5,9]}},{"key":"geid_130_3111","source":"scip-python python temp indexer `pilot.helpers.agents.test_productowner`/__init__:","target":"scip-python python temp indexer `pilot.utils.custom_print`/get_custom_print().","attributes":{"type":"uses","at":[5,17,5,33]}},{"key":"geid_130_3112","source":"scip-python python temp indexer `pilot.helpers.agents.test_productowner`/__init__:","target":"scip-python python temp indexer `pilot.helpers.test_project`/__init__:","attributes":{"type":"uses","at":[6,5,6,25]}},{"key":"geid_130_3113","source":"scip-python python temp indexer `pilot.helpers.agents.test_productowner`/__init__:","target":"scip-python python temp indexer `pilot.helpers.test_project`/create_project().","attributes":{"type":"uses","at":[6,33,6,47]}},{"key":"geid_130_3114","source":"scip-python python temp indexer `pilot.helpers.agents.test_productowner`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.productowner`/__init__:","attributes":{"type":"uses","at":[7,5,7,18]}},{"key":"geid_130_3115","source":"scip-python python temp indexer `pilot.helpers.agents.test_productowner`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#","attributes":{"type":"uses","at":[7,26,7,38]}},{"key":"geid_130_3116","source":"scip-python python temp indexer `pilot.helpers.agents.test_productowner`/__init__:","target":"scip-python python python-dotenv 1.0.0 `dotenv.main`/load_dotenv().","attributes":{"type":"uses","at":[9,0,9,11]}},{"key":"geid_130_3117","source":"scip-python python temp indexer `pilot.helpers.agents.test_productowner`/TestProductOwner#setup_method().","target":"scip-python python temp indexer `pilot.utils.custom_print`/get_custom_print().","attributes":{"type":"uses","at":[14,46,14,62]}},{"key":"geid_130_3118","source":"scip-python python temp indexer `pilot.helpers.agents.test_productowner`/TestProductOwner#test_ask_clarifying_questions().","target":"scip-python python temp indexer `pilot.helpers.test_project`/create_project().","attributes":{"type":"uses","at":[20,18,20,32]}},{"key":"geid_130_3119","source":"scip-python python temp indexer `pilot.helpers.agents.test_productowner`/TestProductOwner#test_ask_clarifying_questions().","target":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#","attributes":{"type":"uses","at":[21,24,21,36]}},{"key":"geid_130_3120","source":"scip-python python temp indexer `pilot.helpers.agents.test_productowner`/TestProductOwner#test_ask_clarifying_questions().","target":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#ask_clarifying_questions().","attributes":{"type":"uses","at":[29,44,29,68]}},{"key":"geid_130_3121","source":"scip-python python temp indexer `pilot.helpers.agents.test_productowner`/TestProductOwner#test_generate_project_summary().","target":"scip-python python temp indexer `pilot.helpers.test_project`/create_project().","attributes":{"type":"uses","at":[45,18,45,32]}},{"key":"geid_130_3122","source":"scip-python python temp indexer `pilot.helpers.agents.test_productowner`/TestProductOwner#test_generate_project_summary().","target":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#","attributes":{"type":"uses","at":[46,24,46,36]}},{"key":"geid_130_3123","source":"scip-python python temp indexer `pilot.helpers.agents.test_productowner`/TestProductOwner#test_generate_project_summary().","target":"scip-python python temp indexer `pilot.helpers.agents.productowner`/ProductOwner#generate_project_summary().","attributes":{"type":"uses","at":[49,32,49,56]}},{"key":"geid_130_3124","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#","target":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#test_create_development_plan().","attributes":{"type":"defines","at":[51,4,68,76]}},{"key":"geid_130_3125","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#","target":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#setup_method().","attributes":{"type":"defines","at":[15,4,49,61]}},{"key":"geid_130_3126","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#","attributes":{"type":"defines","at":[14,0,68,76]}},{"key":"geid_130_3127","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/__init__:","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[1,7,1,9]}},{"key":"geid_130_3128","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/__init__:","target":"scip-python python python-stdlib 3.11 `unittest.mock`/__init__:","attributes":{"type":"uses","at":[3,5,3,18]}},{"key":"geid_130_3129","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/__init__:","target":"scip-python python python-dotenv 1.0.0 dotenv/__init__:","attributes":{"type":"uses","at":[4,5,4,11]}},{"key":"geid_130_3130","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/__init__:","target":"scip-python python python-dotenv 1.0.0 `dotenv.main`/load_dotenv().","attributes":{"type":"uses","at":[4,19,4,30]}},{"key":"geid_130_3131","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/__init__:","target":"scip-python python python-dotenv 1.0.0 `dotenv.main`/load_dotenv().","attributes":{"type":"uses","at":[5,0,5,11]}},{"key":"geid_130_3132","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/__init__:","target":"scip-python python temp indexer `pilot.main`/__init__:","attributes":{"type":"uses","at":[7,5,7,9]}},{"key":"geid_130_3133","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/__init__:","target":"scip-python python temp indexer `pilot.utils.custom_print`/get_custom_print().","attributes":{"type":"uses","at":[7,17,7,33]}},{"key":"geid_130_3134","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.techlead`/__init__:","attributes":{"type":"uses","at":[8,5,8,28]}},{"key":"geid_130_3135","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#","attributes":{"type":"uses","at":[8,36,8,44]}},{"key":"geid_130_3136","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.techlead`/DEVELOPMENT_PLANNING_STEP.","attributes":{"type":"uses","at":[8,46,8,71]}},{"key":"geid_130_3137","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/__init__:","target":"scip-python python temp indexer `pilot.helpers.project`/__init__:","attributes":{"type":"uses","at":[9,5,9,20]}},{"key":"geid_130_3138","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/__init__:","target":"scip-python python temp indexer `pilot.helpers.project`/Project#","attributes":{"type":"uses","at":[9,28,9,35]}},{"key":"geid_130_3139","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/__init__:","target":"scip-python python temp indexer `pilot.test.test_utils`/__init__:","attributes":{"type":"uses","at":[10,5,10,20]}},{"key":"geid_130_3140","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/__init__:","target":"scip-python python temp indexer `pilot.test.test_utils`/assert_non_empty_string().","attributes":{"type":"uses","at":[10,28,10,51]}},{"key":"geid_130_3141","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/__init__:","target":"scip-python python temp indexer `pilot.test.mock_questionary`/__init__:","attributes":{"type":"uses","at":[11,5,11,26]}},{"key":"geid_130_3142","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/__init__:","target":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#","attributes":{"type":"uses","at":[11,34,11,49]}},{"key":"geid_130_3143","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#setup_method().","target":"scip-python python temp indexer `pilot.utils.custom_print`/get_custom_print().","attributes":{"type":"uses","at":[16,46,16,62]}},{"key":"geid_130_3144","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#setup_method().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#","attributes":{"type":"uses","at":[19,23,19,30]}},{"key":"geid_130_3145","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#setup_method().","target":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#project.","attributes":{"type":"uses","at":[29,13,29,20]}},{"key":"geid_130_3146","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#setup_method().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#set_root_path().","attributes":{"type":"uses","at":[29,21,29,34]}},{"key":"geid_130_3147","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#setup_method().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[29,35,29,37]}},{"key":"geid_130_3148","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#setup_method().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[29,38,29,42]}},{"key":"geid_130_3149","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#setup_method().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[29,43,29,50]}},{"key":"geid_130_3150","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#setup_method().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[29,51,29,53]}},{"key":"geid_130_3151","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#setup_method().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[29,54,29,58]}},{"key":"geid_130_3152","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#setup_method().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[29,59,29,63]}},{"key":"geid_130_3153","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#setup_method().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[29,64,29,66]}},{"key":"geid_130_3154","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#setup_method().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[29,67,29,71]}},{"key":"geid_130_3155","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#setup_method().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[29,72,29,79]}},{"key":"geid_130_3156","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#setup_method().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[29,80,29,82]}},{"key":"geid_130_3157","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#setup_method().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[29,83,29,87]}},{"key":"geid_130_3158","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#setup_method().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[29,88,29,95]}},{"key":"geid_130_3159","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#setup_method().","target":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/","attributes":{"type":"uses","at":[29,96,29,104]}},{"key":"geid_130_3160","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#setup_method().","target":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#project.","attributes":{"type":"uses","at":[31,13,31,20]}},{"key":"geid_130_3161","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#setup_method().","target":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#project.","attributes":{"type":"uses","at":[32,13,32,20]}},{"key":"geid_130_3162","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#setup_method().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#project_description.","attributes":{"type":"uses","at":[32,21,32,40]}},{"key":"geid_130_3163","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#setup_method().","target":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#project.","attributes":{"type":"uses","at":[40,13,40,20]}},{"key":"geid_130_3164","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#setup_method().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#user_stories.","attributes":{"type":"uses","at":[40,21,40,33]}},{"key":"geid_130_3165","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#setup_method().","target":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#project.","attributes":{"type":"uses","at":[48,13,48,20]}},{"key":"geid_130_3166","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#setup_method().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#architecture.","attributes":{"type":"uses","at":[48,21,48,33]}},{"key":"geid_130_3167","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#setup_method().","target":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#project.","attributes":{"type":"uses","at":[49,13,49,20]}},{"key":"geid_130_3168","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#setup_method().","target":"scip-python python temp indexer `pilot.helpers.project`/Project#current_step.","attributes":{"type":"uses","at":[49,21,49,33]}},{"key":"geid_130_3169","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#setup_method().","target":"scip-python python temp indexer `pilot.helpers.agents.techlead`/DEVELOPMENT_PLANNING_STEP.","attributes":{"type":"uses","at":[49,36,49,61]}},{"key":"geid_130_3170","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#test_create_development_plan().","target":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#","attributes":{"type":"uses","at":[56,24,56,32]}},{"key":"geid_130_3171","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#test_create_development_plan().","target":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#project.","attributes":{"type":"uses","at":[56,38,56,45]}},{"key":"geid_130_3172","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#test_create_development_plan().","target":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#","attributes":{"type":"uses","at":[58,27,58,42]}},{"key":"geid_130_3173","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#test_create_development_plan().","target":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#techLead.","attributes":{"type":"uses","at":[62,36,62,44]}},{"key":"geid_130_3174","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#test_create_development_plan().","target":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#create_development_plan().","attributes":{"type":"uses","at":[62,45,62,68]}},{"key":"geid_130_3175","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#test_create_development_plan().","target":"scip-python python temp indexer `pilot.test.test_utils`/assert_non_empty_string().","attributes":{"type":"uses","at":[66,12,66,35]}},{"key":"geid_130_3176","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#test_create_development_plan().","target":"scip-python python temp indexer `pilot.test.test_utils`/assert_non_empty_string().","attributes":{"type":"uses","at":[67,12,67,35]}},{"key":"geid_130_3177","source":"scip-python python temp indexer `pilot.helpers.agents.test_techlead`/TestTechLead#test_create_development_plan().","target":"scip-python python temp indexer `pilot.test.test_utils`/assert_non_empty_string().","attributes":{"type":"uses","at":[68,12,68,35]}},{"key":"geid_130_3178","source":"scip-python python temp indexer `pilot.helpers.exceptions.apikeynotdefinederror`/ApiKeyNotDefinedError#","target":"scip-python python temp indexer `pilot.helpers.exceptions.apikeynotdefinederror`/ApiKeyNotDefinedError#__init__().","attributes":{"type":"defines","at":[1,4,3,71]}},{"key":"geid_130_3179","source":"scip-python python temp indexer `pilot.helpers.exceptions.apikeynotdefinederror`/__init__:","target":"scip-python python temp indexer `pilot.helpers.exceptions.apikeynotdefinederror`/ApiKeyNotDefinedError#","attributes":{"type":"defines","at":[0,0,3,71]}},{"key":"geid_130_3180","source":"scip-python python temp indexer `pilot.helpers.exceptions.commandfinishedearly`/CommandFinishedEarly#","target":"scip-python python temp indexer `pilot.helpers.exceptions.commandfinishedearly`/CommandFinishedEarly#__init__().","attributes":{"type":"defines","at":[1,4,3,33]}},{"key":"geid_130_3181","source":"scip-python python temp indexer `pilot.helpers.exceptions.commandfinishedearly`/__init__:","target":"scip-python python temp indexer `pilot.helpers.exceptions.commandfinishedearly`/CommandFinishedEarly#","attributes":{"type":"defines","at":[0,0,3,33]}},{"key":"geid_130_3182","source":"scip-python python temp indexer `pilot.helpers.exceptions.commandfinishedearly`/CommandFinishedEarly#","target":"scip-python python temp indexer `pilot.helpers.exceptions.commandfinishedearly`/__init__:","attributes":{"type":"defines","at":[0,0,3,33]}},{"key":"geid_130_3183","source":"scip-python python temp indexer `pilot.helpers.exceptions.tokenlimiterror`/TokenLimitError#","target":"scip-python python temp indexer `pilot.helpers.exceptions.tokenlimiterror`/TokenLimitError#__init__().","attributes":{"type":"defines","at":[4,4,7,114]}},{"key":"geid_130_3184","source":"scip-python python temp indexer `pilot.helpers.exceptions.tokenlimiterror`/__init__:","target":"scip-python python temp indexer `pilot.helpers.exceptions.tokenlimiterror`/TokenLimitError#","attributes":{"type":"defines","at":[3,0,7,114]}},{"key":"geid_130_3185","source":"scip-python python temp indexer `pilot.helpers.exceptions.tokenlimiterror`/__init__:","target":"scip-python python temp indexer `pilot.const.llm`/__init__:","attributes":{"type":"uses","at":[0,5,0,14]}},{"key":"geid_130_3186","source":"scip-python python temp indexer `pilot.helpers.exceptions.tokenlimiterror`/__init__:","target":"scip-python python temp indexer `pilot.const.llm`/MAX_GPT_MODEL_TOKENS.","attributes":{"type":"uses","at":[0,22,0,42]}},{"key":"geid_130_3187","source":"scip-python python temp indexer `pilot.helpers.exceptions.tokenlimiterror`/TokenLimitError#__init__().","target":"scip-python python temp indexer `pilot.const.llm`/MAX_GPT_MODEL_TOKENS.","attributes":{"type":"uses","at":[4,54,4,74]}},{"key":"geid_130_3188","source":"scip-python python temp indexer `pilot.helpers.exceptions.toodeeprecursionerror`/TooDeepRecursionError#","target":"scip-python python temp indexer `pilot.helpers.exceptions.toodeeprecursionerror`/TooDeepRecursionError#__init__().","attributes":{"type":"defines","at":[1,4,3,33]}},{"key":"geid_130_3189","source":"scip-python python temp indexer `pilot.helpers.exceptions.toodeeprecursionerror`/__init__:","target":"scip-python python temp indexer `pilot.helpers.exceptions.toodeeprecursionerror`/TooDeepRecursionError#","attributes":{"type":"defines","at":[0,0,3,33]}},{"key":"geid_130_3190","source":"scip-python python temp indexer `pilot.helpers.exceptions`/__init__:","target":"scip-python python temp indexer `pilot.helpers.exceptions.apikeynotdefinederror`/__init__:","attributes":{"type":"uses","at":[0,5,0,27]}},{"key":"geid_130_3191","source":"scip-python python temp indexer `pilot.helpers.exceptions`/__init__:","target":"scip-python python temp indexer `pilot.helpers.exceptions.apikeynotdefinederror`/__init__:","attributes":{"type":"uses","at":[0,35,0,56]}},{"key":"geid_130_3192","source":"scip-python python temp indexer `pilot.helpers.exceptions`/__init__:","target":"scip-python python temp indexer `pilot.helpers.exceptions.tokenlimiterror`/__init__:","attributes":{"type":"uses","at":[1,5,1,21]}},{"key":"geid_130_3193","source":"scip-python python temp indexer `pilot.helpers.exceptions`/__init__:","target":"scip-python python temp indexer `pilot.helpers.exceptions.tokenlimiterror`/__init__:","attributes":{"type":"uses","at":[1,29,1,44]}},{"key":"geid_130_3194","source":"scip-python python temp indexer `pilot.helpers.exceptions`/__init__:","target":"scip-python python temp indexer `pilot.helpers.exceptions.toodeeprecursionerror`/__init__:","attributes":{"type":"uses","at":[2,5,2,27]}},{"key":"geid_130_3195","source":"scip-python python temp indexer `pilot.helpers.exceptions`/__init__:","target":"scip-python python temp indexer `pilot.helpers.exceptions.toodeeprecursionerror`/__init__:","attributes":{"type":"uses","at":[2,35,2,56]}},{"key":"geid_130_3196","source":"scip-python python temp indexer `pilot.logger.logger`/__init__:","target":"scip-python python temp indexer `pilot.logger.logger`/filter_sensitive_fields().","attributes":{"type":"defines","at":[37,0,57,15]}},{"key":"geid_130_3197","source":"scip-python python temp indexer `pilot.logger.logger`/__init__:","target":"scip-python python temp indexer `pilot.logger.logger`/setup_logger().","attributes":{"type":"defines","at":[5,0,31,17]}},{"key":"geid_130_3198","source":"scip-python python temp indexer `pilot.logger.logger`/__init__:","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[0,7,0,9]}},{"key":"geid_130_3199","source":"scip-python python temp indexer `pilot.logger.logger`/__init__:","target":"scip-python python python-stdlib 3.11 re/__init__:","attributes":{"type":"uses","at":[1,7,1,9]}},{"key":"geid_130_3200","source":"scip-python python temp indexer `pilot.logger.logger`/__init__:","target":"scip-python python python-stdlib 3.11 logging/__init__:","attributes":{"type":"uses","at":[2,7,2,14]}},{"key":"geid_130_3201","source":"scip-python python temp indexer `pilot.logger.logger`/setup_logger().","target":"scip-python python python-stdlib 3.11 logging/__init__:","attributes":{"type":"uses","at":[10,19,10,26]}},{"key":"geid_130_3202","source":"scip-python python temp indexer `pilot.logger.logger`/setup_logger().","target":"scip-python python python-stdlib 3.11 logging/FileHandler#","attributes":{"type":"uses","at":[10,27,10,38]}},{"key":"geid_130_3203","source":"scip-python python temp indexer `pilot.logger.logger`/setup_logger().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[11,17,11,19]}},{"key":"geid_130_3204","source":"scip-python python temp indexer `pilot.logger.logger`/setup_logger().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[11,20,11,24]}},{"key":"geid_130_3205","source":"scip-python python temp indexer `pilot.logger.logger`/setup_logger().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[11,25,11,29]}},{"key":"geid_130_3206","source":"scip-python python temp indexer `pilot.logger.logger`/setup_logger().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[11,30,11,32]}},{"key":"geid_130_3207","source":"scip-python python temp indexer `pilot.logger.logger`/setup_logger().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[11,33,11,37]}},{"key":"geid_130_3208","source":"scip-python python temp indexer `pilot.logger.logger`/setup_logger().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[11,38,11,45]}},{"key":"geid_130_3209","source":"scip-python python temp indexer `pilot.logger.logger`/setup_logger().","target":"scip-python python temp indexer `pilot.logger.logger`/","attributes":{"type":"uses","at":[11,46,11,54]}},{"key":"geid_130_3210","source":"scip-python python temp indexer `pilot.logger.logger`/setup_logger().","target":"scip-python python python-stdlib 3.11 logging/__init__:","attributes":{"type":"uses","at":[17,16,17,23]}},{"key":"geid_130_3211","source":"scip-python python temp indexer `pilot.logger.logger`/setup_logger().","target":"scip-python python python-stdlib 3.11 logging/Formatter#","attributes":{"type":"uses","at":[17,24,17,33]}},{"key":"geid_130_3212","source":"scip-python python temp indexer `pilot.logger.logger`/setup_logger().","target":"scip-python python python-stdlib 3.11 logging/Handler#setFormatter().","attributes":{"type":"uses","at":[18,17,18,29]}},{"key":"geid_130_3213","source":"scip-python python temp indexer `pilot.logger.logger`/setup_logger().","target":"scip-python python python-stdlib 3.11 logging/Filterer#addFilter().","attributes":{"type":"uses","at":[20,17,20,26]}},{"key":"geid_130_3214","source":"scip-python python temp indexer `pilot.logger.logger`/setup_logger().","target":"scip-python python temp indexer `pilot.logger.logger`/filter_sensitive_fields().","attributes":{"type":"uses","at":[20,27,20,50]}},{"key":"geid_130_3215","source":"scip-python python temp indexer `pilot.logger.logger`/setup_logger().","target":"scip-python python python-stdlib 3.11 logging/__init__:","attributes":{"type":"uses","at":[23,13,23,20]}},{"key":"geid_130_3216","source":"scip-python python temp indexer `pilot.logger.logger`/setup_logger().","target":"scip-python python python-stdlib 3.11 logging/getLogger().","attributes":{"type":"uses","at":[23,21,23,30]}},{"key":"geid_130_3217","source":"scip-python python temp indexer `pilot.logger.logger`/setup_logger().","target":"scip-python python python-stdlib 3.11 logging/Logger#addHandler().","attributes":{"type":"uses","at":[24,11,24,21]}},{"key":"geid_130_3218","source":"scip-python python temp indexer `pilot.logger.logger`/setup_logger().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[26,7,26,9]}},{"key":"geid_130_3219","source":"scip-python python temp indexer `pilot.logger.logger`/setup_logger().","target":"scip-python python python-stdlib 3.11 os/getenv().","attributes":{"type":"uses","at":[26,10,26,16]}},{"key":"geid_130_3220","source":"scip-python python temp indexer `pilot.logger.logger`/setup_logger().","target":"scip-python python python-stdlib 3.11 logging/Logger#setLevel().","attributes":{"type":"uses","at":[27,15,27,23]}},{"key":"geid_130_3221","source":"scip-python python temp indexer `pilot.logger.logger`/setup_logger().","target":"scip-python python python-stdlib 3.11 logging/__init__:","attributes":{"type":"uses","at":[27,24,27,31]}},{"key":"geid_130_3222","source":"scip-python python temp indexer `pilot.logger.logger`/setup_logger().","target":"scip-python python python-stdlib 3.11 logging/DEBUG.DEBUG.","attributes":{"type":"uses","at":[27,32,27,37]}},{"key":"geid_130_3223","source":"scip-python python temp indexer `pilot.logger.logger`/setup_logger().","target":"scip-python python python-stdlib 3.11 logging/Logger#setLevel().","attributes":{"type":"uses","at":[29,15,29,23]}},{"key":"geid_130_3224","source":"scip-python python temp indexer `pilot.logger.logger`/setup_logger().","target":"scip-python python python-stdlib 3.11 logging/__init__:","attributes":{"type":"uses","at":[29,24,29,31]}},{"key":"geid_130_3225","source":"scip-python python temp indexer `pilot.logger.logger`/setup_logger().","target":"scip-python python python-stdlib 3.11 logging/INFO.INFO.","attributes":{"type":"uses","at":[29,32,29,36]}},{"key":"geid_130_3226","source":"scip-python python temp indexer `pilot.logger.logger`/filter_sensitive_fields().","target":"scip-python python temp indexer `pilot.logger.logger`/sensitive_fields.","attributes":{"type":"uses","at":[41,21,41,37]}},{"key":"geid_130_3227","source":"scip-python python temp indexer `pilot.logger.logger`/filter_sensitive_fields().","target":"scip-python python temp indexer `pilot.logger.logger`/sensitive_fields.","attributes":{"type":"uses","at":[49,39,49,55]}},{"key":"geid_130_3228","source":"scip-python python temp indexer `pilot.logger.logger`/filter_sensitive_fields().","target":"scip-python python python-stdlib 3.11 re/__init__:","attributes":{"type":"uses","at":[55,21,55,23]}},{"key":"geid_130_3229","source":"scip-python python temp indexer `pilot.logger.logger`/filter_sensitive_fields().","target":"scip-python python python-stdlib 3.11 re/sub().","attributes":{"type":"uses","at":[55,24,55,27]}},{"key":"geid_130_3230","source":"scip-python python temp indexer `pilot.logger.logger`/__init__:","target":"scip-python python temp indexer `pilot.logger.logger`/setup_logger().","attributes":{"type":"uses","at":[60,9,60,21]}},{"key":"geid_130_3231","source":"scip-python python temp indexer `pilot.prompts.prompts`/__init__:","target":"scip-python python temp indexer `pilot.prompts.prompts`/generate_messages_from_custom_conversation().","attributes":{"type":"defines","at":[150,0,178,17]}},{"key":"geid_130_3232","source":"scip-python python temp indexer `pilot.prompts.prompts`/__init__:","target":"scip-python python temp indexer `pilot.prompts.prompts`/generate_messages_from_description().","attributes":{"type":"defines","at":[112,0,147,5]}},{"key":"geid_130_3233","source":"scip-python python temp indexer `pilot.prompts.prompts`/__init__:","target":"scip-python python temp indexer `pilot.prompts.prompts`/get_additional_info_from_openai().","attributes":{"type":"defines","at":[73,0,108,63]}},{"key":"geid_130_3234","source":"scip-python python temp indexer `pilot.prompts.prompts`/__init__:","target":"scip-python python temp indexer `pilot.prompts.prompts`/ask_user().","attributes":{"type":"defines","at":[53,0,70,25]}},{"key":"geid_130_3235","source":"scip-python python temp indexer `pilot.prompts.prompts`/__init__:","target":"scip-python python temp indexer `pilot.prompts.prompts`/ask_for_main_app_definition().","attributes":{"type":"defines","at":[36,0,50,22]}},{"key":"geid_130_3236","source":"scip-python python temp indexer `pilot.prompts.prompts`/__init__:","target":"scip-python python temp indexer `pilot.prompts.prompts`/ask_for_app_type().","attributes":{"type":"defines","at":[10,0,33,17]}},{"key":"geid_130_3237","source":"scip-python python temp indexer `pilot.prompts.prompts`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/__init__:","attributes":{"type":"uses","at":[1,5,1,16]}},{"key":"geid_130_3238","source":"scip-python python temp indexer `pilot.prompts.prompts`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/color_white_bold.","attributes":{"type":"uses","at":[1,24,1,40]}},{"key":"geid_130_3239","source":"scip-python python temp indexer `pilot.prompts.prompts`/__init__:","target":"scip-python python temp indexer const/__init__:","attributes":{"type":"uses","at":[2,5,2,10]}},{"key":"geid_130_3240","source":"scip-python python temp indexer `pilot.prompts.prompts`/__init__:","target":"scip-python python temp indexer `const.common`/__init__:","attributes":{"type":"uses","at":[2,18,2,24]}},{"key":"geid_130_3241","source":"scip-python python temp indexer `pilot.prompts.prompts`/__init__:","target":"scip-python python temp indexer `pilot.const.llm`/__init__:","attributes":{"type":"uses","at":[3,5,3,14]}},{"key":"geid_130_3242","source":"scip-python python temp indexer `pilot.prompts.prompts`/__init__:","target":"scip-python python temp indexer `pilot.const.llm`/MAX_QUESTIONS.","attributes":{"type":"uses","at":[3,22,3,35]}},{"key":"geid_130_3243","source":"scip-python python temp indexer `pilot.prompts.prompts`/__init__:","target":"scip-python python temp indexer `pilot.const.llm`/END_RESPONSE.","attributes":{"type":"uses","at":[3,37,3,49]}},{"key":"geid_130_3244","source":"scip-python python temp indexer `pilot.prompts.prompts`/__init__:","target":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","attributes":{"type":"uses","at":[4,5,4,25]}},{"key":"geid_130_3245","source":"scip-python python temp indexer `pilot.prompts.prompts`/__init__:","target":"scip-python python temp indexer `pilot.utils.llm_connection`/create_gpt_chat_completion().","attributes":{"type":"uses","at":[4,33,4,59]}},{"key":"geid_130_3246","source":"scip-python python temp indexer `pilot.prompts.prompts`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/__init__:","attributes":{"type":"uses","at":[5,5,5,16]}},{"key":"geid_130_3247","source":"scip-python python temp indexer `pilot.prompts.prompts`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/get_sys_message().","attributes":{"type":"uses","at":[5,24,5,39]}},{"key":"geid_130_3248","source":"scip-python python temp indexer `pilot.prompts.prompts`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/get_prompt().","attributes":{"type":"uses","at":[5,41,5,51]}},{"key":"geid_130_3249","source":"scip-python python temp indexer `pilot.prompts.prompts`/__init__:","target":"scip-python python temp indexer `pilot.utils.questionary`/__init__:","attributes":{"type":"uses","at":[6,5,6,22]}},{"key":"geid_130_3250","source":"scip-python python temp indexer `pilot.prompts.prompts`/__init__:","target":"scip-python python temp indexer `pilot.utils.questionary`/styled_select().","attributes":{"type":"uses","at":[6,30,6,43]}},{"key":"geid_130_3251","source":"scip-python python temp indexer `pilot.prompts.prompts`/__init__:","target":"scip-python python temp indexer `pilot.utils.questionary`/styled_text().","attributes":{"type":"uses","at":[6,45,6,56]}},{"key":"geid_130_3252","source":"scip-python python temp indexer `pilot.prompts.prompts`/__init__:","target":"scip-python python temp indexer `pilot.logger.logger`/__init__:","attributes":{"type":"uses","at":[7,5,7,18]}},{"key":"geid_130_3253","source":"scip-python python temp indexer `pilot.prompts.prompts`/__init__:","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[7,26,7,32]}},{"key":"geid_130_3254","source":"scip-python python temp indexer `pilot.prompts.prompts`/ask_for_main_app_definition().","target":"scip-python python temp indexer `pilot.utils.questionary`/styled_text().","attributes":{"type":"uses","at":[39,18,39,29]}},{"key":"geid_130_3255","source":"scip-python python temp indexer `pilot.prompts.prompts`/ask_for_main_app_definition().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[48,4,48,10]}},{"key":"geid_130_3256","source":"scip-python python temp indexer `pilot.prompts.prompts`/ask_for_main_app_definition().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[48,11,48,15]}},{"key":"geid_130_3257","source":"scip-python python temp indexer `pilot.prompts.prompts`/ask_user().","target":"scip-python python temp indexer `pilot.utils.style`/color_white_bold.","attributes":{"type":"uses","at":[56,18,56,34]}},{"key":"geid_130_3258","source":"scip-python python temp indexer `pilot.prompts.prompts`/ask_user().","target":"scip-python python temp indexer `pilot.utils.questionary`/styled_text().","attributes":{"type":"uses","at":[57,17,57,28]}},{"key":"geid_130_3259","source":"scip-python python temp indexer `pilot.prompts.prompts`/ask_user().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[59,8,59,14]}},{"key":"geid_130_3260","source":"scip-python python temp indexer `pilot.prompts.prompts`/ask_user().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[59,15,59,19]}},{"key":"geid_130_3261","source":"scip-python python temp indexer `pilot.prompts.prompts`/ask_user().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[60,8,60,14]}},{"key":"geid_130_3262","source":"scip-python python temp indexer `pilot.prompts.prompts`/ask_user().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[60,15,60,19]}},{"key":"geid_130_3263","source":"scip-python python temp indexer `pilot.prompts.prompts`/get_additional_info_from_openai().","target":"scip-python python temp indexer `pilot.utils.llm_connection`/create_gpt_chat_completion().","attributes":{"type":"uses","at":[90,19,90,45]}},{"key":"geid_130_3264","source":"scip-python python temp indexer `pilot.prompts.prompts`/get_additional_info_from_openai().","target":"scip-python python temp indexer `pilot.const.llm`/END_RESPONSE.","attributes":{"type":"uses","at":[93,64,93,76]}},{"key":"geid_130_3265","source":"scip-python python temp indexer `pilot.prompts.prompts`/get_additional_info_from_openai().","target":"scip-python python temp indexer `pilot.prompts.prompts`/ask_user().","attributes":{"type":"uses","at":[98,21,98,29]}},{"key":"geid_130_3266","source":"scip-python python temp indexer `pilot.prompts.prompts`/get_additional_info_from_openai().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[106,4,106,10]}},{"key":"geid_130_3267","source":"scip-python python temp indexer `pilot.prompts.prompts`/get_additional_info_from_openai().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[106,11,106,15]}},{"key":"geid_130_3268","source":"scip-python python temp indexer `pilot.prompts.prompts`/generate_messages_from_description().","target":"scip-python python temp indexer `pilot.utils.utils`/get_prompt().","attributes":{"type":"uses","at":[124,13,124,23]}},{"key":"geid_130_3269","source":"scip-python python temp indexer `pilot.prompts.prompts`/generate_messages_from_description().","target":"scip-python python temp indexer `pilot.utils.utils`/get_prompt().","attributes":{"type":"uses","at":[136,25,136,35]}},{"key":"geid_130_3270","source":"scip-python python temp indexer `pilot.prompts.prompts`/generate_messages_from_description().","target":"scip-python python temp indexer `pilot.const.llm`/MAX_QUESTIONS.","attributes":{"type":"uses","at":[140,29,140,42]}},{"key":"geid_130_3271","source":"scip-python python temp indexer `pilot.prompts.prompts`/generate_messages_from_description().","target":"scip-python python temp indexer `pilot.utils.utils`/get_sys_message().","attributes":{"type":"uses","at":[144,8,144,23]}},{"key":"geid_130_3272","source":"scip-python python temp indexer `pilot.prompts.prompts`/generate_messages_from_custom_conversation().","target":"scip-python python temp indexer `pilot.utils.utils`/get_sys_message().","attributes":{"type":"uses","at":[166,21,166,36]}},{"key":"geid_130_3273","source":"scip-python python temp indexer `pilot.prompts.prompts`/generate_messages_from_custom_conversation().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[168,4,168,10]}},{"key":"geid_130_3274","source":"scip-python python temp indexer `pilot.prompts.prompts`/generate_messages_from_custom_conversation().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[168,11,168,15]}},{"key":"geid_130_3275","source":"scip-python python temp indexer `pilot.prompts.prompts`/generate_messages_from_custom_conversation().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[173,12,173,18]}},{"key":"geid_130_3276","source":"scip-python python temp indexer `pilot.prompts.prompts`/generate_messages_from_custom_conversation().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[173,19,173,23]}},{"key":"geid_130_3277","source":"scip-python python temp indexer `pilot.prompts.prompts`/generate_messages_from_custom_conversation().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[176,12,176,18]}},{"key":"geid_130_3278","source":"scip-python python temp indexer `pilot.prompts.prompts`/generate_messages_from_custom_conversation().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[176,19,176,23]}},{"key":"geid_130_3279","source":"scip-python python temp indexer `pilot.prompts.test_prompts`/__init__:","target":"scip-python python temp indexer `pilot.prompts.test_prompts`/test_parse_task_no_processes().","attributes":{"type":"defines","at":[55,0,62,50]}},{"key":"geid_130_3280","source":"scip-python python temp indexer `pilot.prompts.test_prompts`/__init__:","target":"scip-python python temp indexer `pilot.prompts.test_prompts`/test_prompt_ran_command_0_exit().","attributes":{"type":"defines","at":[29,0,52,11]}},{"key":"geid_130_3281","source":"scip-python python temp indexer `pilot.prompts.test_prompts`/__init__:","target":"scip-python python temp indexer `pilot.prompts.test_prompts`/test_prompt_ran_command_None_exit().","attributes":{"type":"defines","at":[3,0,26,11]}},{"key":"geid_130_3282","source":"scip-python python temp indexer `pilot.prompts.test_prompts`/__init__:","target":"scip-python python temp indexer `pilot.prompts.prompts`/__init__:","attributes":{"type":"uses","at":[0,5,0,13]}},{"key":"geid_130_3283","source":"scip-python python temp indexer `pilot.prompts.test_prompts`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/get_prompt().","attributes":{"type":"uses","at":[0,21,0,31]}},{"key":"geid_130_3284","source":"scip-python python temp indexer `pilot.prompts.test_prompts`/test_prompt_ran_command_None_exit().","target":"scip-python python temp indexer `pilot.utils.utils`/get_prompt().","attributes":{"type":"uses","at":[5,13,5,23]}},{"key":"geid_130_3285","source":"scip-python python temp indexer `pilot.prompts.test_prompts`/test_prompt_ran_command_0_exit().","target":"scip-python python temp indexer `pilot.utils.utils`/get_prompt().","attributes":{"type":"uses","at":[31,13,31,23]}},{"key":"geid_130_3286","source":"scip-python python temp indexer `pilot.prompts.test_prompts`/test_parse_task_no_processes().","target":"scip-python python temp indexer `pilot.utils.utils`/get_prompt().","attributes":{"type":"uses","at":[57,13,57,23]}},{"key":"geid_130_3287","source":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#","target":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#unsafe_ask().","attributes":{"type":"defines","at":[22,4,31,21]}},{"key":"geid_130_3288","source":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#","target":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#ask().","attributes":{"type":"defines","at":[19,4,20,32]}},{"key":"geid_130_3289","source":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#","target":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#text().","attributes":{"type":"defines","at":[11,4,17,19]}},{"key":"geid_130_3290","source":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#Style#","target":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#Style#__init__().","attributes":{"type":"defines","at":[8,8,9,16]}},{"key":"geid_130_3291","source":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#","target":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#Style#","attributes":{"type":"defines","at":[7,4,9,16]}},{"key":"geid_130_3292","source":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#","target":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#__init__().","attributes":{"type":"defines","at":[1,4,5,34]}},{"key":"geid_130_3293","source":"scip-python python temp indexer `pilot.test.mock_questionary`/__init__:","target":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#","attributes":{"type":"defines","at":[0,0,31,21]}},{"key":"geid_130_3294","source":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#text().","target":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#state.","attributes":{"type":"uses","at":[14,17,14,22]}},{"key":"geid_130_3295","source":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#text().","target":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#state.","attributes":{"type":"uses","at":[16,17,16,22]}},{"key":"geid_130_3296","source":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#ask().","target":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#unsafe_ask().","attributes":{"type":"uses","at":[20,20,20,30]}},{"key":"geid_130_3297","source":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#unsafe_ask().","target":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#state.","attributes":{"type":"uses","at":[23,16,23,21]}},{"key":"geid_130_3298","source":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#unsafe_ask().","target":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#state.","attributes":{"type":"uses","at":[25,18,25,23]}},{"key":"geid_130_3299","source":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#unsafe_ask().","target":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#answers.","attributes":{"type":"uses","at":[28,31,28,38]}},{"key":"geid_130_3300","source":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#","target":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#test_color_function().","attributes":{"type":"defines","at":[15,4,54,81]}},{"key":"geid_130_3301","source":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#","target":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#test_initialization().","attributes":{"type":"defines","at":[5,4,13,57]}},{"key":"geid_130_3302","source":"scip-python python temp indexer `pilot.test.test_colors`/__init__:","target":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#","attributes":{"type":"defines","at":[4,0,54,81]}},{"key":"geid_130_3303","source":"scip-python python temp indexer `pilot.test.test_colors`/__init__:","target":"scip-python python python-stdlib 3.11 unittest/__init__:","attributes":{"type":"uses","at":[0,7,0,15]}},{"key":"geid_130_3304","source":"scip-python python temp indexer `pilot.test.test_colors`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/__init__:","attributes":{"type":"uses","at":[1,5,1,22]}},{"key":"geid_130_3305","source":"scip-python python temp indexer `pilot.test.test_colors`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/style_config.","attributes":{"type":"uses","at":[1,30,1,42]}},{"key":"geid_130_3306","source":"scip-python python temp indexer `pilot.test.test_colors`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/Theme#","attributes":{"type":"uses","at":[1,44,1,49]}},{"key":"geid_130_3307","source":"scip-python python temp indexer `pilot.test.test_colors`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/ColorName#","attributes":{"type":"uses","at":[1,51,1,60]}},{"key":"geid_130_3308","source":"scip-python python temp indexer `pilot.test.test_colors`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/get_color_function().","attributes":{"type":"uses","at":[1,62,1,80]}},{"key":"geid_130_3309","source":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#","target":"scip-python python python-stdlib 3.11 unittest/__init__:","attributes":{"type":"uses","at":[4,21,4,29]}},{"key":"geid_130_3310","source":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#","target":"scip-python python temp indexer `unittest.case`/TestCase#","attributes":{"type":"uses","at":[4,30,4,38]}},{"key":"geid_130_3311","source":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#test_initialization().","target":"scip-python python temp indexer `pilot.utils.style`/style_config.","attributes":{"type":"uses","at":[7,8,7,20]}},{"key":"geid_130_3312","source":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#test_initialization().","target":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#set_theme().","attributes":{"type":"uses","at":[7,21,7,30]}},{"key":"geid_130_3313","source":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#test_initialization().","target":"scip-python python temp indexer `pilot.utils.style`/Theme#","attributes":{"type":"uses","at":[7,31,7,36]}},{"key":"geid_130_3314","source":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#test_initialization().","target":"scip-python python temp indexer `pilot.utils.style`/Theme#DARK.","attributes":{"type":"uses","at":[7,37,7,41]}},{"key":"geid_130_3315","source":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#test_initialization().","target":"scip-python python temp indexer `pilot.utils.style`/Theme#","attributes":{"type":"uses","at":[8,38,8,43]}},{"key":"geid_130_3316","source":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#test_initialization().","target":"scip-python python temp indexer `pilot.utils.style`/Theme#DARK.","attributes":{"type":"uses","at":[8,44,8,48]}},{"key":"geid_130_3317","source":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#test_initialization().","target":"scip-python python temp indexer `pilot.utils.style`/style_config.","attributes":{"type":"uses","at":[8,67,8,79]}},{"key":"geid_130_3318","source":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#test_initialization().","target":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#theme.","attributes":{"type":"uses","at":[8,80,8,85]}},{"key":"geid_130_3319","source":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#test_initialization().","target":"scip-python python temp indexer `pilot.utils.style`/style_config.","attributes":{"type":"uses","at":[9,25,9,37]}},{"key":"geid_130_3320","source":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#test_initialization().","target":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#theme.","attributes":{"type":"uses","at":[9,38,9,43]}},{"key":"geid_130_3321","source":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#test_initialization().","target":"scip-python python temp indexer `pilot.utils.style`/Theme#","attributes":{"type":"uses","at":[9,45,9,50]}},{"key":"geid_130_3322","source":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#test_initialization().","target":"scip-python python temp indexer `pilot.utils.style`/Theme#DARK.","attributes":{"type":"uses","at":[9,51,9,55]}},{"key":"geid_130_3323","source":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#test_initialization().","target":"scip-python python temp indexer `pilot.utils.style`/style_config.","attributes":{"type":"uses","at":[11,8,11,20]}},{"key":"geid_130_3324","source":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#test_initialization().","target":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#set_theme().","attributes":{"type":"uses","at":[11,21,11,30]}},{"key":"geid_130_3325","source":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#test_initialization().","target":"scip-python python temp indexer `pilot.utils.style`/Theme#","attributes":{"type":"uses","at":[11,31,11,36]}},{"key":"geid_130_3326","source":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#test_initialization().","target":"scip-python python temp indexer `pilot.utils.style`/Theme#LIGHT.","attributes":{"type":"uses","at":[11,37,11,42]}},{"key":"geid_130_3327","source":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#test_initialization().","target":"scip-python python temp indexer `pilot.utils.style`/Theme#","attributes":{"type":"uses","at":[12,38,12,43]}},{"key":"geid_130_3328","source":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#test_initialization().","target":"scip-python python temp indexer `pilot.utils.style`/Theme#LIGHT.","attributes":{"type":"uses","at":[12,44,12,49]}},{"key":"geid_130_3329","source":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#test_initialization().","target":"scip-python python temp indexer `pilot.utils.style`/style_config.","attributes":{"type":"uses","at":[12,68,12,80]}},{"key":"geid_130_3330","source":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#test_initialization().","target":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#theme.","attributes":{"type":"uses","at":[12,81,12,86]}},{"key":"geid_130_3331","source":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#test_initialization().","target":"scip-python python temp indexer `pilot.utils.style`/style_config.","attributes":{"type":"uses","at":[13,25,13,37]}},{"key":"geid_130_3332","source":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#test_initialization().","target":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#theme.","attributes":{"type":"uses","at":[13,38,13,43]}},{"key":"geid_130_3333","source":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#test_initialization().","target":"scip-python python temp indexer `pilot.utils.style`/Theme#","attributes":{"type":"uses","at":[13,45,13,50]}},{"key":"geid_130_3334","source":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#test_initialization().","target":"scip-python python temp indexer `pilot.utils.style`/Theme#LIGHT.","attributes":{"type":"uses","at":[13,51,13,56]}},{"key":"geid_130_3335","source":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#test_color_function().","target":"scip-python python temp indexer `pilot.utils.style`/ColorName#","attributes":{"type":"uses","at":[17,12,17,21]}},{"key":"geid_130_3336","source":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#test_color_function().","target":"scip-python python temp indexer `pilot.utils.style`/ColorName#RED.","attributes":{"type":"uses","at":[17,22,17,25]}},{"key":"geid_130_3337","source":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#test_color_function().","target":"scip-python python temp indexer `pilot.utils.style`/ColorName#","attributes":{"type":"uses","at":[18,12,18,21]}},{"key":"geid_130_3338","source":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#test_color_function().","target":"scip-python python temp indexer `pilot.utils.style`/ColorName#GREEN.","attributes":{"type":"uses","at":[18,22,18,27]}},{"key":"geid_130_3339","source":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#test_color_function().","target":"scip-python python temp indexer `pilot.utils.style`/ColorName#","attributes":{"type":"uses","at":[22,12,22,21]}},{"key":"geid_130_3340","source":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#test_color_function().","target":"scip-python python temp indexer `pilot.utils.style`/ColorName#RED.","attributes":{"type":"uses","at":[22,22,22,25]}},{"key":"geid_130_3341","source":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#test_color_function().","target":"scip-python python temp indexer `pilot.utils.style`/ColorName#","attributes":{"type":"uses","at":[23,12,23,21]}},{"key":"geid_130_3342","source":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#test_color_function().","target":"scip-python python temp indexer `pilot.utils.style`/ColorName#GREEN.","attributes":{"type":"uses","at":[23,22,23,27]}},{"key":"geid_130_3343","source":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#test_color_function().","target":"scip-python python temp indexer `pilot.utils.style`/style_config.","attributes":{"type":"uses","at":[30,8,30,20]}},{"key":"geid_130_3344","source":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#test_color_function().","target":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#set_theme().","attributes":{"type":"uses","at":[30,21,30,30]}},{"key":"geid_130_3345","source":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#test_color_function().","target":"scip-python python temp indexer `pilot.utils.style`/Theme#","attributes":{"type":"uses","at":[30,31,30,36]}},{"key":"geid_130_3346","source":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#test_color_function().","target":"scip-python python temp indexer `pilot.utils.style`/Theme#DARK.","attributes":{"type":"uses","at":[30,37,30,41]}},{"key":"geid_130_3347","source":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#test_color_function().","target":"scip-python python temp indexer `pilot.utils.style`/get_color_function().","attributes":{"type":"uses","at":[33,29,33,47]}},{"key":"geid_130_3348","source":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#test_color_function().","target":"scip-python python temp indexer `pilot.utils.style`/get_color_function().","attributes":{"type":"uses","at":[37,29,37,47]}},{"key":"geid_130_3349","source":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#test_color_function().","target":"scip-python python temp indexer `pilot.utils.style`/style_config.","attributes":{"type":"uses","at":[44,8,44,20]}},{"key":"geid_130_3350","source":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#test_color_function().","target":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#set_theme().","attributes":{"type":"uses","at":[44,21,44,30]}},{"key":"geid_130_3351","source":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#test_color_function().","target":"scip-python python temp indexer `pilot.utils.style`/Theme#","attributes":{"type":"uses","at":[44,31,44,36]}},{"key":"geid_130_3352","source":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#test_color_function().","target":"scip-python python temp indexer `pilot.utils.style`/Theme#LIGHT.","attributes":{"type":"uses","at":[44,37,44,42]}},{"key":"geid_130_3353","source":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#test_color_function().","target":"scip-python python temp indexer `pilot.utils.style`/get_color_function().","attributes":{"type":"uses","at":[47,29,47,47]}},{"key":"geid_130_3354","source":"scip-python python temp indexer `pilot.test.test_colors`/TestColorStyle#test_color_function().","target":"scip-python python temp indexer `pilot.utils.style`/get_color_function().","attributes":{"type":"uses","at":[51,29,51,47]}},{"key":"geid_130_3355","source":"scip-python python temp indexer `pilot.test.test_utils`/__init__:","target":"scip-python python temp indexer `pilot.test.test_utils`/assert_non_empty_string().","attributes":{"type":"defines","at":[8,0,10,25]}},{"key":"geid_130_3356","source":"scip-python python temp indexer `pilot.test.test_utils`/__init__:","target":"scip-python python temp indexer `pilot.test.test_utils`/mock_terminal_size().","attributes":{"type":"defines","at":[3,0,6,20]}},{"key":"geid_130_3357","source":"scip-python python temp indexer `pilot.test.test_utils`/__init__:","target":"scip-python python python-stdlib 3.11 `unittest.mock`/__init__:","attributes":{"type":"uses","at":[0,5,0,18]}},{"key":"geid_130_3358","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/__init__:","target":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/test_file_snapshot().","attributes":{"type":"defines","at":[93,0,115,46]}},{"key":"geid_130_3359","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/__init__:","target":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/test_create_tables().","attributes":{"type":"defines","at":[81,0,90,50]}},{"key":"geid_130_3360","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/database().","target":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/database().PostgresRollback#","attributes":{"type":"defines","at":[56,4,67,12]}},{"key":"geid_130_3361","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/__init__:","target":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/database().","attributes":{"type":"defines","at":[25,0,78,34]}},{"key":"geid_130_3362","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/__init__:","target":"scip-python python python-stdlib 3.11 base64/__init__:","attributes":{"type":"uses","at":[0,5,0,11]}},{"key":"geid_130_3363","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/__init__:","target":"scip-python python python-stdlib 3.11 base64/b64decode().","attributes":{"type":"uses","at":[0,19,0,28]}},{"key":"geid_130_3364","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/__init__:","target":"scip-python python temp indexer peewee/__init__:","attributes":{"type":"uses","at":[2,5,2,11]}},{"key":"geid_130_3365","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/__init__:","target":"scip-python python temp indexer `pilot.database.config`/__init__:","attributes":{"type":"uses","at":[5,5,5,20]}},{"key":"geid_130_3366","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/__init__:","target":"scip-python python temp indexer `pilot.database.config`/DATABASE_TYPE.","attributes":{"type":"uses","at":[6,4,6,17]}},{"key":"geid_130_3367","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/__init__:","target":"scip-python python temp indexer `pilot.database.config`/DB_NAME.","attributes":{"type":"uses","at":[7,4,7,11]}},{"key":"geid_130_3368","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/__init__:","target":"scip-python python temp indexer `pilot.database.config`/DB_HOST.","attributes":{"type":"uses","at":[8,4,8,11]}},{"key":"geid_130_3369","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/__init__:","target":"scip-python python temp indexer `pilot.database.config`/DB_PORT.","attributes":{"type":"uses","at":[9,4,9,11]}},{"key":"geid_130_3370","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/__init__:","target":"scip-python python temp indexer `pilot.database.config`/DB_USER.","attributes":{"type":"uses","at":[10,4,10,11]}},{"key":"geid_130_3371","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/__init__:","target":"scip-python python temp indexer `pilot.database.config`/DB_PASSWORD.","attributes":{"type":"uses","at":[11,4,11,15]}},{"key":"geid_130_3372","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/__init__:","attributes":{"type":"uses","at":[13,5,13,22]}},{"key":"geid_130_3373","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/TABLES.","attributes":{"type":"uses","at":[13,30,13,36]}},{"key":"geid_130_3374","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/__init__:","target":"scip-python python temp indexer `pilot.database.models.user`/__init__:","attributes":{"type":"uses","at":[14,5,14,25]}},{"key":"geid_130_3375","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/__init__:","target":"scip-python python temp indexer `pilot.database.models.user`/User#","attributes":{"type":"uses","at":[14,33,14,37]}},{"key":"geid_130_3376","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/__init__:","target":"scip-python python temp indexer `pilot.database.models.app`/__init__:","attributes":{"type":"uses","at":[15,5,15,24]}},{"key":"geid_130_3377","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/__init__:","target":"scip-python python temp indexer `pilot.database.models.app`/App#","attributes":{"type":"uses","at":[15,32,15,35]}},{"key":"geid_130_3378","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/__init__:","target":"scip-python python temp indexer `pilot.database.models.file_snapshot`/__init__:","attributes":{"type":"uses","at":[16,5,16,34]}},{"key":"geid_130_3379","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/__init__:","target":"scip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#","attributes":{"type":"uses","at":[16,42,16,54]}},{"key":"geid_130_3380","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/__init__:","target":"scip-python python temp indexer `pilot.database.models.files`/__init__:","attributes":{"type":"uses","at":[17,5,17,26]}},{"key":"geid_130_3381","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/__init__:","target":"scip-python python temp indexer `pilot.database.models.files`/File#","attributes":{"type":"uses","at":[17,34,17,38]}},{"key":"geid_130_3382","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/__init__:","target":"scip-python python temp indexer `pilot.database.models.development_steps`/__init__:","attributes":{"type":"uses","at":[18,5,18,38]}},{"key":"geid_130_3383","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/__init__:","target":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#","attributes":{"type":"uses","at":[18,46,18,62]}},{"key":"geid_130_3384","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/__init__:","target":"scip-python python python-stdlib 3.11 base64/b64decode().","attributes":{"type":"uses","at":[20,12,20,21]}},{"key":"geid_130_3385","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/database().","target":"scip-python python temp indexer `pilot.database.config`/DATABASE_TYPE.","attributes":{"type":"uses","at":[37,7,37,20]}},{"key":"geid_130_3386","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/database().","target":"scip-python python temp indexer `pilot.database.config`/DB_NAME.","attributes":{"type":"uses","at":[38,15,38,22]}},{"key":"geid_130_3387","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/database().","target":"scip-python python temp indexer `pilot.database.config`/DB_NAME.","attributes":{"type":"uses","at":[43,12,43,19]}},{"key":"geid_130_3388","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/database().","target":"scip-python python temp indexer `pilot.database.config`/DB_HOST.","attributes":{"type":"uses","at":[44,17,44,24]}},{"key":"geid_130_3389","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/database().","target":"scip-python python temp indexer `pilot.database.config`/DB_PORT.","attributes":{"type":"uses","at":[45,17,45,24]}},{"key":"geid_130_3390","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/database().","target":"scip-python python temp indexer `pilot.database.config`/DB_USER.","attributes":{"type":"uses","at":[46,17,46,24]}},{"key":"geid_130_3391","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/database().","target":"scip-python python temp indexer `pilot.database.config`/DB_PASSWORD.","attributes":{"type":"uses","at":[47,21,47,32]}},{"key":"geid_130_3392","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/database().","target":"scip-python python temp indexer `pilot.database.config`/DATABASE_TYPE.","attributes":{"type":"uses","at":[49,9,49,22]}},{"key":"geid_130_3393","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/database().","target":"scip-python python temp indexer `pilot.database.config`/DATABASE_TYPE.","attributes":{"type":"uses","at":[52,54,52,67]}},{"key":"geid_130_3394","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/database().","target":"scip-python python temp indexer `pilot.database.database`/TABLES.","attributes":{"type":"uses","at":[54,12,54,18]}},{"key":"geid_130_3395","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/database().","target":"scip-python python temp indexer `pilot.database.database`/TABLES.","attributes":{"type":"uses","at":[71,29,71,35]}},{"key":"geid_130_3396","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/database().","target":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/database().PostgresRollback#","attributes":{"type":"uses","at":[74,22,74,38]}},{"key":"geid_130_3397","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/database().","target":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/database().PostgresRollback#","attributes":{"type":"uses","at":[75,15,75,31]}},{"key":"geid_130_3398","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/database().","target":"scip-python python temp indexer `pilot.database.database`/TABLES.","attributes":{"type":"uses","at":[78,27,78,33]}},{"key":"geid_130_3399","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/test_create_tables().","target":"scip-python python temp indexer `pilot.database.database`/__init__:","attributes":{"type":"uses","at":[85,9,85,26]}},{"key":"geid_130_3400","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/test_create_tables().","target":"scip-python python temp indexer `pilot.database.database`/TABLES.","attributes":{"type":"uses","at":[85,34,85,40]}},{"key":"geid_130_3401","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/test_create_tables().","target":"scip-python python temp indexer `pilot.database.database`/TABLES.","attributes":{"type":"uses","at":[89,63,89,69]}},{"key":"geid_130_3402","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/test_file_snapshot().","target":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/EMPTY_PNG.","attributes":{"type":"uses","at":[99,9,99,18]}},{"key":"geid_130_3403","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/test_file_snapshot().","target":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/EMPTY_PNG.","attributes":{"type":"uses","at":[99,20,99,29]}},{"key":"geid_130_3404","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/test_file_snapshot().","target":"scip-python python temp indexer `pilot.database.models.user`/User#","attributes":{"type":"uses","at":[103,11,103,15]}},{"key":"geid_130_3405","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/test_file_snapshot().","target":"scip-python python temp indexer `pilot.database.models.app`/App#","attributes":{"type":"uses","at":[104,10,104,13]}},{"key":"geid_130_3406","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/test_file_snapshot().","target":"scip-python python temp indexer `pilot.database.models.development_steps`/DevelopmentSteps#","attributes":{"type":"uses","at":[105,11,105,27]}},{"key":"geid_130_3407","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/test_file_snapshot().","target":"scip-python python temp indexer `pilot.database.models.files`/File#","attributes":{"type":"uses","at":[106,11,106,15]}},{"key":"geid_130_3408","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/test_file_snapshot().","target":"scip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#","attributes":{"type":"uses","at":[108,9,108,21]}},{"key":"geid_130_3409","source":"scip-python python temp indexer `pilot.test.database.test_file_snapshot`/test_file_snapshot().","target":"scip-python python temp indexer `pilot.database.models.file_snapshot`/FileSnapshot#","attributes":{"type":"uses","at":[114,14,114,26]}},{"key":"geid_130_3410","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/__init__:","target":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_get_directory_contents_live().","attributes":{"type":"defines","at":[148,0,171,60]}},{"key":"geid_130_3411","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_get_directory_contents_mocked().","target":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_get_directory_contents_mocked().np().","attributes":{"type":"defines","at":[93,4,94,30]}},{"key":"geid_130_3412","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/__init__:","target":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_get_directory_contents_mocked().","attributes":{"type":"defines","at":[83,0,145,5]}},{"key":"geid_130_3413","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/__init__:","target":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_get_file_contents().","attributes":{"type":"defines","at":[59,0,81,24]}},{"key":"geid_130_3414","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/__init__:","target":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_update_file_with_encoded_content().","attributes":{"type":"defines","at":[40,0,57,24]}},{"key":"geid_130_3415","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/__init__:","target":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_update_file_creates_binary_file().","attributes":{"type":"defines","at":[30,0,37,96]}},{"key":"geid_130_3416","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/__init__:","target":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_update_file_creates_text_file().","attributes":{"type":"defines","at":[20,0,27,85]}},{"key":"geid_130_3417","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/__init__:","target":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_update_file_creates_directories().","attributes":{"type":"defines","at":[10,0,17,71]}},{"key":"geid_130_3418","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/__init__:","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[0,7,0,9]}},{"key":"geid_130_3419","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/__init__:","target":"scip-python python python-stdlib 3.11 pathlib/__init__:","attributes":{"type":"uses","at":[1,5,1,12]}},{"key":"geid_130_3420","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/__init__:","target":"scip-python python python-stdlib 3.11 pathlib/Path#","attributes":{"type":"uses","at":[1,20,1,24]}},{"key":"geid_130_3421","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/__init__:","target":"scip-python python python-stdlib 3.11 tempfile/__init__:","attributes":{"type":"uses","at":[2,5,2,13]}},{"key":"geid_130_3422","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/__init__:","target":"scip-python python python-stdlib 3.11 tempfile/NamedTemporaryFile().","attributes":{"type":"uses","at":[2,21,2,39]}},{"key":"geid_130_3423","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/__init__:","target":"scip-python python python-stdlib 3.11 `unittest.mock`/__init__:","attributes":{"type":"uses","at":[3,5,3,18]}},{"key":"geid_130_3424","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/__init__:","target":"scip-python python temp indexer `pilot.helpers.files`/__init__:","attributes":{"type":"uses","at":[7,5,7,24]}},{"key":"geid_130_3425","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/__init__:","target":"scip-python python temp indexer `pilot.helpers.files`/get_file_contents().","attributes":{"type":"uses","at":[7,32,7,49]}},{"key":"geid_130_3426","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/__init__:","target":"scip-python python temp indexer `pilot.helpers.files`/get_directory_contents().","attributes":{"type":"uses","at":[7,51,7,73]}},{"key":"geid_130_3427","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/__init__:","target":"scip-python python temp indexer `pilot.helpers.files`/update_file().","attributes":{"type":"uses","at":[7,75,7,86]}},{"key":"geid_130_3428","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_update_file_creates_directories().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[15,27,15,29]}},{"key":"geid_130_3429","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_update_file_creates_directories().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[15,30,15,34]}},{"key":"geid_130_3430","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_update_file_creates_directories().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[15,35,15,42]}},{"key":"geid_130_3431","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_update_file_creates_directories().","target":"scip-python python temp indexer `pilot.helpers.files`/update_file().","attributes":{"type":"uses","at":[16,4,16,15]}},{"key":"geid_130_3432","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_update_file_creates_text_file().","target":"scip-python python temp indexer `pilot.helpers.files`/update_file().","attributes":{"type":"uses","at":[25,4,25,15]}},{"key":"geid_130_3433","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_update_file_creates_binary_file().","target":"scip-python python temp indexer `pilot.helpers.files`/update_file().","attributes":{"type":"uses","at":[35,4,35,15]}},{"key":"geid_130_3434","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_update_file_with_encoded_content().","target":"scip-python python python-stdlib 3.11 tempfile/NamedTemporaryFile().","attributes":{"type":"uses","at":[52,11,52,29]}},{"key":"geid_130_3435","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_update_file_with_encoded_content().","target":"scip-python python temp indexer `pilot.helpers.files`/update_file().","attributes":{"type":"uses","at":[53,4,53,15]}},{"key":"geid_130_3436","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_update_file_with_encoded_content().","target":"scip-python python python-stdlib 3.11 tempfile/_TemporaryFileWrapper#name.","attributes":{"type":"uses","at":[53,21,53,25]}},{"key":"geid_130_3437","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_update_file_with_encoded_content().","target":"scip-python python python-stdlib 3.11 tempfile/_TemporaryFileWrapper#read().","attributes":{"type":"uses","at":[54,16,54,20]}},{"key":"geid_130_3438","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_update_file_with_encoded_content().","target":"scip-python python python-stdlib 3.11 tempfile/_TemporaryFileWrapper#close().","attributes":{"type":"uses","at":[56,9,56,14]}},{"key":"geid_130_3439","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_update_file_with_encoded_content().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[57,4,57,6]}},{"key":"geid_130_3440","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_update_file_with_encoded_content().","target":"scip-python python python-stdlib 3.11 os/remove().","attributes":{"type":"uses","at":[57,7,57,13]}},{"key":"geid_130_3441","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_update_file_with_encoded_content().","target":"scip-python python python-stdlib 3.11 tempfile/_TemporaryFileWrapper#name.","attributes":{"type":"uses","at":[57,19,57,23]}},{"key":"geid_130_3442","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_get_file_contents().","target":"scip-python python python-stdlib 3.11 tempfile/NamedTemporaryFile().","attributes":{"type":"uses","at":[68,11,68,29]}},{"key":"geid_130_3443","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_get_file_contents().","target":"scip-python python python-stdlib 3.11 tempfile/_TemporaryFileWrapper#write().","attributes":{"type":"uses","at":[69,9,69,14]}},{"key":"geid_130_3444","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_get_file_contents().","target":"scip-python python python-stdlib 3.11 tempfile/_TemporaryFileWrapper#flush().","attributes":{"type":"uses","at":[70,9,70,14]}},{"key":"geid_130_3445","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_get_file_contents().","target":"scip-python python python-stdlib 3.11 pathlib/Path#","attributes":{"type":"uses","at":[72,16,72,20]}},{"key":"geid_130_3446","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_get_file_contents().","target":"scip-python python python-stdlib 3.11 tempfile/_TemporaryFileWrapper#name.","attributes":{"type":"uses","at":[72,26,72,30]}},{"key":"geid_130_3447","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_get_file_contents().","target":"scip-python python temp indexer `pilot.helpers.files`/get_file_contents().","attributes":{"type":"uses","at":[73,11,73,28]}},{"key":"geid_130_3448","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_get_file_contents().","target":"scip-python python python-stdlib 3.11 tempfile/_TemporaryFileWrapper#name.","attributes":{"type":"uses","at":[73,34,73,38]}},{"key":"geid_130_3449","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_get_file_contents().","target":"scip-python python python-stdlib 3.11 pathlib/PurePath#anchor().","attributes":{"type":"uses","at":[73,50,73,56]}},{"key":"geid_130_3450","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_get_file_contents().","target":"scip-python python python-stdlib 3.11 pathlib/PurePath#name().","attributes":{"type":"uses","at":[76,26,76,30]}},{"key":"geid_130_3451","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_get_file_contents().","target":"scip-python python python-stdlib 3.11 pathlib/PurePath#parent().","attributes":{"type":"uses","at":[77,30,77,36]}},{"key":"geid_130_3452","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_get_file_contents().","target":"scip-python python python-stdlib 3.11 pathlib/PurePath#relative_to().","attributes":{"type":"uses","at":[77,37,77,48]}},{"key":"geid_130_3453","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_get_file_contents().","target":"scip-python python python-stdlib 3.11 pathlib/PurePath#anchor().","attributes":{"type":"uses","at":[77,59,77,65]}},{"key":"geid_130_3454","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_get_file_contents().","target":"scip-python python python-stdlib 3.11 tempfile/_TemporaryFileWrapper#name.","attributes":{"type":"uses","at":[78,26,78,30]}},{"key":"geid_130_3455","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_get_file_contents().","target":"scip-python python python-stdlib 3.11 tempfile/_TemporaryFileWrapper#close().","attributes":{"type":"uses","at":[80,9,80,14]}},{"key":"geid_130_3456","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_get_file_contents().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[81,4,81,6]}},{"key":"geid_130_3457","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_get_file_contents().","target":"scip-python python python-stdlib 3.11 os/remove().","attributes":{"type":"uses","at":[81,7,81,13]}},{"key":"geid_130_3458","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_get_file_contents().","target":"scip-python python python-stdlib 3.11 tempfile/_TemporaryFileWrapper#name.","attributes":{"type":"uses","at":[81,19,81,23]}},{"key":"geid_130_3459","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_get_directory_contents_mocked().np().","target":"scip-python python python-stdlib 3.11 pathlib/Path#","attributes":{"type":"uses","at":[94,19,94,23]}},{"key":"geid_130_3460","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_get_directory_contents_mocked().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[96,24,96,26]}},{"key":"geid_130_3461","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_get_directory_contents_mocked().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[96,27,96,31]}},{"key":"geid_130_3462","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_get_directory_contents_mocked().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[96,32,96,36]}},{"key":"geid_130_3463","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_get_directory_contents_mocked().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[97,28,97,30]}},{"key":"geid_130_3464","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_get_directory_contents_mocked().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[97,31,97,35]}},{"key":"geid_130_3465","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_get_directory_contents_mocked().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[97,36,97,44]}},{"key":"geid_130_3466","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_get_directory_contents_mocked().","target":"scip-python python temp indexer `pilot.helpers.files`/get_directory_contents().","attributes":{"type":"uses","at":[112,11,112,33]}},{"key":"geid_130_3467","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_get_directory_contents_live().","target":"scip-python python temp indexer `pilot.helpers.files`/get_directory_contents().","attributes":{"type":"uses","at":[149,12,149,34]}},{"key":"geid_130_3468","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_get_directory_contents_live().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[150,8,150,10]}},{"key":"geid_130_3469","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_get_directory_contents_live().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[150,11,150,15]}},{"key":"geid_130_3470","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_get_directory_contents_live().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[150,16,150,23]}},{"key":"geid_130_3471","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_get_directory_contents_live().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[150,24,150,26]}},{"key":"geid_130_3472","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_get_directory_contents_live().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[150,27,150,31]}},{"key":"geid_130_3473","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_get_directory_contents_live().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[150,32,150,39]}},{"key":"geid_130_3474","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_get_directory_contents_live().","target":"scip-python python temp indexer `pilot.test.helpers.test_files`/","attributes":{"type":"uses","at":[150,40,150,48]}},{"key":"geid_130_3475","source":"scip-python python temp indexer `pilot.test.helpers.test_files`/test_get_directory_contents_live().","target":"scip-python python temp indexer `pilot.test.helpers.test_files`/","attributes":{"type":"uses","at":[156,37,156,45]}},{"key":"geid_130_3476","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/__init__:","target":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_get_version().","attributes":{"type":"defines","at":[148,0,157,51]}},{"key":"geid_130_3477","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/__init__:","target":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_get_package_version().","attributes":{"type":"defines","at":[144,0,145,43]}},{"key":"geid_130_3478","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/__init__:","target":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_get_git_commit().","attributes":{"type":"defines","at":[133,0,141,51]}},{"key":"geid_130_3479","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/__init__:","target":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_loader_load_from_env().","attributes":{"type":"defines","at":[118,0,130,66]}},{"key":"geid_130_3480","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/__init__:","target":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_loader_load_no_config_file().","attributes":{"type":"defines","at":[100,0,115,37]}},{"key":"geid_130_3481","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/__init__:","target":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_loader_load_config_file().","attributes":{"type":"defines","at":[71,0,97,66]}},{"key":"geid_130_3482","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/__init__:","target":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_loader_config_file_location().","attributes":{"type":"defines","at":[66,0,68,60]}},{"key":"geid_130_3483","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/__init__:","target":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_settings_to_dict().","attributes":{"type":"defines","at":[57,0,63,5]}},{"key":"geid_130_3484","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/__init__:","target":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_settings_update().","attributes":{"type":"defines","at":[51,0,54,48]}},{"key":"geid_130_3485","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/__init__:","target":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_settings_forbids_saving_unknown_variables().","attributes":{"type":"defines","at":[44,0,48,34]}},{"key":"geid_130_3486","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/__init__:","target":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_settings_init_ignores_unknown_variables().","attributes":{"type":"defines","at":[39,0,41,43]}},{"key":"geid_130_3487","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/__init__:","target":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_settings_initializes_known_variables().","attributes":{"type":"defines","at":[33,0,36,37]}},{"key":"geid_130_3488","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/__init__:","target":"scip-python python temp indexer `pilot.test.utils.test_settings`/expected_config_location().","attributes":{"type":"defines","at":[20,0,30,63]}},{"key":"geid_130_3489","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/__init__:","target":"scip-python python python-stdlib 3.11 io/__init__:","attributes":{"type":"uses","at":[0,5,0,7]}},{"key":"geid_130_3490","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/__init__:","target":"scip-python python python-stdlib 3.11 io/StringIO#","attributes":{"type":"uses","at":[0,15,0,23]}},{"key":"geid_130_3491","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/__init__:","target":"scip-python python python-stdlib 3.11 json/__init__:","attributes":{"type":"uses","at":[1,7,1,11]}},{"key":"geid_130_3492","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/__init__:","target":"scip-python python python-stdlib 3.11 `os.path`/__init__:","attributes":{"type":"uses","at":[2,5,2,12]}},{"key":"geid_130_3493","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/__init__:","target":"scip-python python python-stdlib 3.11 posixpath/expanduser().","attributes":{"type":"uses","at":[2,20,2,30]}},{"key":"geid_130_3494","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/__init__:","target":"scip-python python python-stdlib 3.11 posixpath/expandvars().","attributes":{"type":"uses","at":[2,32,2,42]}},{"key":"geid_130_3495","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/__init__:","target":"scip-python python python-stdlib 3.11 posixpath/join().","attributes":{"type":"uses","at":[2,44,2,48]}},{"key":"geid_130_3496","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/__init__:","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[3,5,3,7]}},{"key":"geid_130_3497","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/__init__:","target":"scip-python python python-stdlib 3.11 os/getenv().","attributes":{"type":"uses","at":[3,15,3,21]}},{"key":"geid_130_3498","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/__init__:","target":"scip-python python python-stdlib 3.11 pathlib/__init__:","attributes":{"type":"uses","at":[4,5,4,12]}},{"key":"geid_130_3499","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/__init__:","target":"scip-python python python-stdlib 3.11 pathlib/Path#","attributes":{"type":"uses","at":[4,20,4,24]}},{"key":"geid_130_3500","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/__init__:","target":"scip-python python python-stdlib 3.11 subprocess/__init__:","attributes":{"type":"uses","at":[5,5,5,15]}},{"key":"geid_130_3501","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/__init__:","target":"scip-python python python-stdlib 3.11 subprocess/check_output().","attributes":{"type":"uses","at":[5,23,5,35]}},{"key":"geid_130_3502","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/__init__:","target":"scip-python python python-stdlib 3.11 sys/__init__:","attributes":{"type":"uses","at":[6,7,6,10]}},{"key":"geid_130_3503","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/__init__:","target":"scip-python python python-stdlib 3.11 `unittest.mock`/__init__:","attributes":{"type":"uses","at":[7,5,7,18]}},{"key":"geid_130_3504","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/__init__:","target":"scip-python python temp indexer `pilot.utils.settings`/__init__:","attributes":{"type":"uses","at":[11,5,11,19]}},{"key":"geid_130_3505","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/__init__:","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#","attributes":{"type":"uses","at":[12,4,12,10]}},{"key":"geid_130_3506","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/__init__:","target":"scip-python python temp indexer `pilot.utils.settings`/Settings#","attributes":{"type":"uses","at":[13,4,13,12]}},{"key":"geid_130_3507","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/__init__:","target":"scip-python python temp indexer `pilot.utils.settings`/get_git_commit().","attributes":{"type":"uses","at":[14,4,14,18]}},{"key":"geid_130_3508","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/__init__:","target":"scip-python python temp indexer `pilot.utils.settings`/get_package_version().","attributes":{"type":"uses","at":[15,4,15,23]}},{"key":"geid_130_3509","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/__init__:","target":"scip-python python temp indexer `pilot.utils.settings`/get_version().","attributes":{"type":"uses","at":[16,4,16,15]}},{"key":"geid_130_3510","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/expected_config_location().","target":"scip-python python python-stdlib 3.11 os/getenv().","attributes":{"type":"uses","at":[22,22,22,28]}},{"key":"geid_130_3511","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/expected_config_location().","target":"scip-python python python-stdlib 3.11 posixpath/join().","attributes":{"type":"uses","at":[24,15,24,19]}},{"key":"geid_130_3512","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/expected_config_location().","target":"scip-python python python-stdlib 3.11 sys/__init__:","attributes":{"type":"uses","at":[25,9,25,12]}},{"key":"geid_130_3513","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/expected_config_location().","target":"scip-python python python-stdlib 3.11 sys/platform.platform.","attributes":{"type":"uses","at":[25,13,25,21]}},{"key":"geid_130_3514","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/expected_config_location().","target":"scip-python python python-stdlib 3.11 posixpath/expanduser().","attributes":{"type":"uses","at":[26,15,26,25]}},{"key":"geid_130_3515","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/expected_config_location().","target":"scip-python python python-stdlib 3.11 sys/__init__:","attributes":{"type":"uses","at":[27,9,27,12]}},{"key":"geid_130_3516","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/expected_config_location().","target":"scip-python python python-stdlib 3.11 sys/platform.platform.","attributes":{"type":"uses","at":[27,13,27,21]}},{"key":"geid_130_3517","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/expected_config_location().","target":"scip-python python python-stdlib 3.11 posixpath/expandvars().","attributes":{"type":"uses","at":[28,15,28,25]}},{"key":"geid_130_3518","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/expected_config_location().","target":"scip-python python python-stdlib 3.11 sys/__init__:","attributes":{"type":"uses","at":[30,48,30,51]}},{"key":"geid_130_3519","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/expected_config_location().","target":"scip-python python python-stdlib 3.11 sys/platform.platform.","attributes":{"type":"uses","at":[30,52,30,60]}},{"key":"geid_130_3520","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_settings_initializes_known_variables().","target":"scip-python python temp indexer `pilot.utils.settings`/Settings#","attributes":{"type":"uses","at":[34,15,34,23]}},{"key":"geid_130_3521","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_settings_init_ignores_unknown_variables().","target":"scip-python python temp indexer `pilot.utils.settings`/Settings#","attributes":{"type":"uses","at":[40,15,40,23]}},{"key":"geid_130_3522","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_settings_forbids_saving_unknown_variables().","target":"scip-python python temp indexer `pilot.utils.settings`/Settings#","attributes":{"type":"uses","at":[45,15,45,23]}},{"key":"geid_130_3523","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_settings_update().","target":"scip-python python temp indexer `pilot.utils.settings`/Settings#","attributes":{"type":"uses","at":[52,15,52,23]}},{"key":"geid_130_3524","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_settings_update().","target":"scip-python python temp indexer `pilot.utils.settings`/Settings#update().","attributes":{"type":"uses","at":[53,13,53,19]}},{"key":"geid_130_3525","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_settings_to_dict().","target":"scip-python python temp indexer `pilot.utils.settings`/Settings#","attributes":{"type":"uses","at":[58,15,58,23]}},{"key":"geid_130_3526","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_settings_to_dict().","target":"scip-python python temp indexer `pilot.utils.settings`/Settings#update().","attributes":{"type":"uses","at":[59,13,59,19]}},{"key":"geid_130_3527","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_loader_config_file_location().","target":"scip-python python temp indexer `pilot.utils.settings`/Settings#","attributes":{"type":"uses","at":[67,15,67,23]}},{"key":"geid_130_3528","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_loader_config_file_location().","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#","attributes":{"type":"uses","at":[68,4,68,10]}},{"key":"geid_130_3529","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_loader_config_file_location().","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#config_path.","attributes":{"type":"uses","at":[68,21,68,32]}},{"key":"geid_130_3530","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_loader_load_config_file().","target":"scip-python python temp indexer `pilot.utils.settings`/Settings#","attributes":{"type":"uses","at":[74,15,74,23]}},{"key":"geid_130_3531","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_loader_load_config_file().","target":"scip-python python python-stdlib 3.11 json/__init__:","attributes":{"type":"uses","at":[75,18,75,22]}},{"key":"geid_130_3532","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_loader_load_config_file().","target":"scip-python python python-stdlib 3.11 json/dumps().","attributes":{"type":"uses","at":[75,23,75,28]}},{"key":"geid_130_3533","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_loader_load_config_file().","target":"scip-python python python-stdlib 3.11 io/StringIO#","attributes":{"type":"uses","at":[84,52,84,60]}},{"key":"geid_130_3534","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_loader_load_config_file().","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#","attributes":{"type":"uses","at":[86,13,86,19]}},{"key":"geid_130_3535","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_loader_load_config_file().","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#config_path.","attributes":{"type":"uses","at":[87,18,87,29]}},{"key":"geid_130_3536","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_loader_load_config_file().","target":"scip-python python python-stdlib 3.11 pathlib/Path#","attributes":{"type":"uses","at":[87,33,87,37]}},{"key":"geid_130_3537","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_loader_load_config_file().","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#config_path.","attributes":{"type":"uses","at":[89,11,89,22]}},{"key":"geid_130_3538","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_loader_load_config_file().","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#load().","attributes":{"type":"uses","at":[90,11,90,15]}},{"key":"geid_130_3539","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_loader_load_config_file().","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#config_path.","attributes":{"type":"uses","at":[92,11,92,22]}},{"key":"geid_130_3540","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_loader_load_config_file().","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#config_path.","attributes":{"type":"uses","at":[93,45,93,56]}},{"key":"geid_130_3541","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_loader_load_no_config_file().","target":"scip-python python temp indexer `pilot.utils.settings`/Settings#","attributes":{"type":"uses","at":[103,15,103,23]}},{"key":"geid_130_3542","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_loader_load_no_config_file().","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#","attributes":{"type":"uses","at":[104,13,104,19]}},{"key":"geid_130_3543","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_loader_load_no_config_file().","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#config_path.","attributes":{"type":"uses","at":[105,18,105,29]}},{"key":"geid_130_3544","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_loader_load_no_config_file().","target":"scip-python python python-stdlib 3.11 pathlib/Path#","attributes":{"type":"uses","at":[105,33,105,37]}},{"key":"geid_130_3545","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_loader_load_no_config_file().","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#config_path.","attributes":{"type":"uses","at":[107,11,107,22]}},{"key":"geid_130_3546","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_loader_load_no_config_file().","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#config_path.","attributes":{"type":"uses","at":[108,11,108,22]}},{"key":"geid_130_3547","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_loader_load_no_config_file().","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#load().","attributes":{"type":"uses","at":[109,11,109,15]}},{"key":"geid_130_3548","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_loader_load_no_config_file().","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#config_path.","attributes":{"type":"uses","at":[111,11,111,22]}},{"key":"geid_130_3549","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_loader_load_from_env().","target":"scip-python python temp indexer `pilot.utils.settings`/Settings#","attributes":{"type":"uses","at":[120,15,120,23]}},{"key":"geid_130_3550","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_loader_load_from_env().","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#","attributes":{"type":"uses","at":[127,4,127,10]}},{"key":"geid_130_3551","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_loader_load_from_env().","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#update_settings_from_env().","attributes":{"type":"uses","at":[127,21,127,45]}},{"key":"geid_130_3552","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_get_git_commit().","target":"scip-python python python-stdlib 3.11 subprocess/check_output().","attributes":{"type":"uses","at":[135,31,135,43]}},{"key":"geid_130_3553","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_get_git_commit().","target":"scip-python python temp indexer `pilot.utils.settings`/get_git_commit().","attributes":{"type":"uses","at":[141,11,141,25]}},{"key":"geid_130_3554","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_get_package_version().","target":"scip-python python temp indexer `pilot.utils.settings`/get_package_version().","attributes":{"type":"uses","at":[145,11,145,30]}},{"key":"geid_130_3555","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_get_version().","target":"scip-python python python-stdlib 3.11 subprocess/check_output().","attributes":{"type":"uses","at":[152,14,152,26]}},{"key":"geid_130_3556","source":"scip-python python temp indexer `pilot.test.utils.test_settings`/test_get_version().","target":"scip-python python temp indexer `pilot.utils.settings`/get_version().","attributes":{"type":"uses","at":[157,11,157,22]}},{"key":"geid_130_3557","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/__init__:","target":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_send_clears_data_after_sending().","attributes":{"type":"defines","at":[308,0,321,42]}},{"key":"geid_130_3558","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/__init__:","target":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_send_no_endpoint_configured().","attributes":{"type":"defines","at":[296,0,305,73]}},{"key":"geid_130_3559","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/__init__:","target":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_send_not_enabled().","attributes":{"type":"defines","at":[281,0,293,33]}},{"key":"geid_130_3560","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/__init__:","target":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_send_enabled_but_post_fails().","attributes":{"type":"defines","at":[260,0,278,72]}},{"key":"geid_130_3561","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/__init__:","target":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_send_enabled_and_successful().","attributes":{"type":"defines","at":[238,0,257,77]}},{"key":"geid_130_3562","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/__init__:","target":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_stop_calculates_elapsed_time().","attributes":{"type":"defines","at":[221,0,235,46]}},{"key":"geid_130_3563","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/__init__:","target":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_stop_without_start_logs_error().","attributes":{"type":"defines","at":[209,0,218,48]}},{"key":"geid_130_3564","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/__init__:","target":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_stop_when_not_enabled_does_nothing().","attributes":{"type":"defines","at":[199,0,206,37]}},{"key":"geid_130_3565","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/__init__:","target":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_start_with_telemetry_enabled().","attributes":{"type":"defines","at":[183,0,196,41]}},{"key":"geid_130_3566","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/__init__:","target":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_start_with_telemetry_disabled().","attributes":{"type":"defines","at":[175,0,180,39]}},{"key":"geid_130_3567","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/__init__:","target":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_inc_ignores_unknown_data_field().","attributes":{"type":"defines","at":[163,0,172,48]}},{"key":"geid_130_3568","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/__init__:","target":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_inc_does_not_increment_when_disabled().","attributes":{"type":"defines","at":[155,0,160,50]}},{"key":"geid_130_3569","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/__init__:","target":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_inc_increments_known_data_field().","attributes":{"type":"defines","at":[143,0,152,51]}},{"key":"geid_130_3570","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/__init__:","target":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_set_ignores_unknown_field().","attributes":{"type":"defines","at":[131,0,140,52]}},{"key":"geid_130_3571","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/__init__:","target":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_set_updates_data_if_enabled().","attributes":{"type":"defines","at":[119,0,128,50]}},{"key":"geid_130_3572","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/__init__:","target":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_set_ignores_data_if_disabled().","attributes":{"type":"defines","at":[111,0,116,54]}},{"key":"geid_130_3573","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/__init__:","target":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_telemetry_setup_enable().","attributes":{"type":"defines","at":[93,0,108,5]}},{"key":"geid_130_3574","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/__init__:","target":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_telemetry_setup_already_enabled().","attributes":{"type":"defines","at":[84,0,90,34]}},{"key":"geid_130_3575","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/__init__:","target":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_clear_data_resets_times().","attributes":{"type":"defines","at":[73,0,81,37]}},{"key":"geid_130_3576","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/__init__:","target":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_clear_data_resets_data().","attributes":{"type":"defines","at":[49,0,70,39]}},{"key":"geid_130_3577","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/__init__:","target":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_telemetry_constructor_logging_enabled().","attributes":{"type":"defines","at":[33,0,46,5]}},{"key":"geid_130_3578","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/__init__:","target":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_telemetry_constructor_with_telemetry_not_configured().","attributes":{"type":"defines","at":[26,0,30,32]}},{"key":"geid_130_3579","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/__init__:","target":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_telemetry_constructor_with_telemetry_disabled().","attributes":{"type":"defines","at":[19,0,23,32]}},{"key":"geid_130_3580","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/__init__:","target":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_telemetry_constructor_with_telemetry_enabled().","attributes":{"type":"defines","at":[6,0,16,48]}},{"key":"geid_130_3581","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/__init__:","target":"scip-python python python-stdlib 3.11 `unittest.mock`/__init__:","attributes":{"type":"uses","at":[0,5,0,18]}},{"key":"geid_130_3582","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/__init__:","target":"scip-python python temp indexer `pilot.utils.telemetry`/__init__:","attributes":{"type":"uses","at":[3,5,3,20]}},{"key":"geid_130_3583","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/__init__:","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#","attributes":{"type":"uses","at":[3,28,3,37]}},{"key":"geid_130_3584","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_telemetry_constructor_with_telemetry_enabled().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#","attributes":{"type":"uses","at":[13,16,13,25]}},{"key":"geid_130_3585","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_telemetry_constructor_with_telemetry_enabled().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#enabled.","attributes":{"type":"uses","at":[14,21,14,28]}},{"key":"geid_130_3586","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_telemetry_constructor_with_telemetry_enabled().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#telemetry_id.","attributes":{"type":"uses","at":[15,21,15,33]}},{"key":"geid_130_3587","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_telemetry_constructor_with_telemetry_enabled().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#endpoint.","attributes":{"type":"uses","at":[16,21,16,29]}},{"key":"geid_130_3588","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_telemetry_constructor_with_telemetry_disabled().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#","attributes":{"type":"uses","at":[22,16,22,25]}},{"key":"geid_130_3589","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_telemetry_constructor_with_telemetry_disabled().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#enabled.","attributes":{"type":"uses","at":[23,25,23,32]}},{"key":"geid_130_3590","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_telemetry_constructor_with_telemetry_not_configured().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#","attributes":{"type":"uses","at":[29,16,29,25]}},{"key":"geid_130_3591","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_telemetry_constructor_with_telemetry_not_configured().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#enabled.","attributes":{"type":"uses","at":[30,25,30,32]}},{"key":"geid_130_3592","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_telemetry_constructor_logging_enabled().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#","attributes":{"type":"uses","at":[42,4,42,13]}},{"key":"geid_130_3593","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_clear_data_resets_data().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#","attributes":{"type":"uses","at":[53,16,53,25]}},{"key":"geid_130_3594","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_clear_data_resets_data().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#","attributes":{"type":"uses","at":[54,12,54,21]}},{"key":"geid_130_3595","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_clear_data_resets_data().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#data.","attributes":{"type":"uses","at":[56,14,56,18]}},{"key":"geid_130_3596","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_clear_data_resets_data().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#data.","attributes":{"type":"uses","at":[66,21,66,25]}},{"key":"geid_130_3597","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_clear_data_resets_data().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#data.","attributes":{"type":"uses","at":[66,35,66,39]}},{"key":"geid_130_3598","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_clear_data_resets_data().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#clear_data().","attributes":{"type":"uses","at":[68,14,68,24]}},{"key":"geid_130_3599","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_clear_data_resets_data().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#data.","attributes":{"type":"uses","at":[70,21,70,25]}},{"key":"geid_130_3600","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_clear_data_resets_data().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#data.","attributes":{"type":"uses","at":[70,35,70,39]}},{"key":"geid_130_3601","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_clear_data_resets_times().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#","attributes":{"type":"uses","at":[74,16,74,25]}},{"key":"geid_130_3602","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_clear_data_resets_times().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#start_time.","attributes":{"type":"uses","at":[75,14,75,24]}},{"key":"geid_130_3603","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_clear_data_resets_times().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#end_time.","attributes":{"type":"uses","at":[76,14,76,22]}},{"key":"geid_130_3604","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_clear_data_resets_times().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#clear_data().","attributes":{"type":"uses","at":[78,14,78,24]}},{"key":"geid_130_3605","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_clear_data_resets_times().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#start_time.","attributes":{"type":"uses","at":[80,21,80,31]}},{"key":"geid_130_3606","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_clear_data_resets_times().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#end_time.","attributes":{"type":"uses","at":[81,21,81,29]}},{"key":"geid_130_3607","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_telemetry_setup_already_enabled().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#","attributes":{"type":"uses","at":[88,16,88,25]}},{"key":"geid_130_3608","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_telemetry_setup_already_enabled().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#setup().","attributes":{"type":"uses","at":[89,14,89,19]}},{"key":"geid_130_3609","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_telemetry_setup_enable().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#","attributes":{"type":"uses","at":[98,16,98,25]}},{"key":"geid_130_3610","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_telemetry_setup_enable().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#setup().","attributes":{"type":"uses","at":[99,14,99,19]}},{"key":"geid_130_3611","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_telemetry_setup_enable().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#telemetry_id.","attributes":{"type":"uses","at":[102,21,102,33]}},{"key":"geid_130_3612","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_telemetry_setup_enable().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#","attributes":{"type":"uses","at":[106,20,106,29]}},{"key":"geid_130_3613","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_telemetry_setup_enable().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#DEFAULT_ENDPOINT.","attributes":{"type":"uses","at":[106,30,106,46]}},{"key":"geid_130_3614","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_set_ignores_data_if_disabled().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#","attributes":{"type":"uses","at":[114,16,114,25]}},{"key":"geid_130_3615","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_set_ignores_data_if_disabled().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#data.","attributes":{"type":"uses","at":[116,21,116,25]}},{"key":"geid_130_3616","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_set_updates_data_if_enabled().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#","attributes":{"type":"uses","at":[126,16,126,25]}},{"key":"geid_130_3617","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_set_updates_data_if_enabled().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#data.","attributes":{"type":"uses","at":[128,21,128,25]}},{"key":"geid_130_3618","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_set_ignores_unknown_field().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#","attributes":{"type":"uses","at":[138,16,138,25]}},{"key":"geid_130_3619","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_set_ignores_unknown_field().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#data.","attributes":{"type":"uses","at":[140,48,140,52]}},{"key":"geid_130_3620","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_inc_increments_known_data_field().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#","attributes":{"type":"uses","at":[150,16,150,25]}},{"key":"geid_130_3621","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_inc_increments_known_data_field().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#inc().","attributes":{"type":"uses","at":[151,14,151,17]}},{"key":"geid_130_3622","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_inc_increments_known_data_field().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#data.","attributes":{"type":"uses","at":[152,21,152,25]}},{"key":"geid_130_3623","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_inc_does_not_increment_when_disabled().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#","attributes":{"type":"uses","at":[158,16,158,25]}},{"key":"geid_130_3624","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_inc_does_not_increment_when_disabled().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#inc().","attributes":{"type":"uses","at":[159,14,159,17]}},{"key":"geid_130_3625","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_inc_does_not_increment_when_disabled().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#data.","attributes":{"type":"uses","at":[160,21,160,25]}},{"key":"geid_130_3626","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_inc_ignores_unknown_data_field().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#","attributes":{"type":"uses","at":[170,16,170,25]}},{"key":"geid_130_3627","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_inc_ignores_unknown_data_field().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#inc().","attributes":{"type":"uses","at":[171,14,171,17]}},{"key":"geid_130_3628","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_inc_ignores_unknown_data_field().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#data.","attributes":{"type":"uses","at":[172,44,172,48]}},{"key":"geid_130_3629","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_start_with_telemetry_disabled().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#","attributes":{"type":"uses","at":[178,16,178,25]}},{"key":"geid_130_3630","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_start_with_telemetry_disabled().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#start().","attributes":{"type":"uses","at":[179,14,179,19]}},{"key":"geid_130_3631","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_start_with_telemetry_disabled().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#start_time.","attributes":{"type":"uses","at":[180,21,180,31]}},{"key":"geid_130_3632","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_start_with_telemetry_enabled().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#","attributes":{"type":"uses","at":[193,16,193,25]}},{"key":"geid_130_3633","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_start_with_telemetry_enabled().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#start().","attributes":{"type":"uses","at":[195,14,195,19]}},{"key":"geid_130_3634","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_start_with_telemetry_enabled().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#start_time.","attributes":{"type":"uses","at":[196,21,196,31]}},{"key":"geid_130_3635","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_stop_when_not_enabled_does_nothing().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#","attributes":{"type":"uses","at":[203,16,203,25]}},{"key":"geid_130_3636","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_stop_when_not_enabled_does_nothing().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#stop().","attributes":{"type":"uses","at":[204,14,204,18]}},{"key":"geid_130_3637","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_stop_when_not_enabled_does_nothing().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#end_time.","attributes":{"type":"uses","at":[206,21,206,29]}},{"key":"geid_130_3638","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_stop_without_start_logs_error().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#","attributes":{"type":"uses","at":[216,16,216,25]}},{"key":"geid_130_3639","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_stop_without_start_logs_error().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#stop().","attributes":{"type":"uses","at":[217,14,217,18]}},{"key":"geid_130_3640","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_stop_calculates_elapsed_time().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#","attributes":{"type":"uses","at":[230,16,230,25]}},{"key":"geid_130_3641","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_stop_calculates_elapsed_time().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#start().","attributes":{"type":"uses","at":[232,14,232,19]}},{"key":"geid_130_3642","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_stop_calculates_elapsed_time().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#stop().","attributes":{"type":"uses","at":[233,14,233,18]}},{"key":"geid_130_3643","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_stop_calculates_elapsed_time().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#data.","attributes":{"type":"uses","at":[235,21,235,25]}},{"key":"geid_130_3644","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_send_enabled_and_successful().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#","attributes":{"type":"uses","at":[248,16,248,25]}},{"key":"geid_130_3645","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_send_enabled_and_successful().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#send().","attributes":{"type":"uses","at":[249,14,249,18]}},{"key":"geid_130_3646","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_send_enabled_and_successful().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#data.","attributes":{"type":"uses","at":[254,26,254,30]}},{"key":"geid_130_3647","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_send_enabled_but_post_fails().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#","attributes":{"type":"uses","at":[270,16,270,25]}},{"key":"geid_130_3648","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_send_enabled_but_post_fails().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#send().","attributes":{"type":"uses","at":[271,14,271,18]}},{"key":"geid_130_3649","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_send_enabled_but_post_fails().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#data.","attributes":{"type":"uses","at":[276,26,276,30]}},{"key":"geid_130_3650","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_send_enabled_but_post_fails().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#endpoint.","attributes":{"type":"uses","at":[278,48,278,56]}},{"key":"geid_130_3651","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_send_not_enabled().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#","attributes":{"type":"uses","at":[290,16,290,25]}},{"key":"geid_130_3652","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_send_not_enabled().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#send().","attributes":{"type":"uses","at":[291,14,291,18]}},{"key":"geid_130_3653","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_send_no_endpoint_configured().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#","attributes":{"type":"uses","at":[301,16,301,25]}},{"key":"geid_130_3654","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_send_no_endpoint_configured().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#send().","attributes":{"type":"uses","at":[302,14,302,18]}},{"key":"geid_130_3655","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_send_clears_data_after_sending().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#","attributes":{"type":"uses","at":[317,16,317,25]}},{"key":"geid_130_3656","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_send_clears_data_after_sending().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#data.","attributes":{"type":"uses","at":[318,14,318,18]}},{"key":"geid_130_3657","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_send_clears_data_after_sending().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#send().","attributes":{"type":"uses","at":[319,14,319,18]}},{"key":"geid_130_3658","source":"scip-python python temp indexer `pilot.test.utils.test_telemetry`/test_send_clears_data_after_sending().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#data.","attributes":{"type":"uses","at":[321,21,321,25]}},{"key":"geid_130_3659","source":"scip-python python temp indexer `pilot.test.ux_tests.dev_continue_development`/__init__:","target":"scip-python python temp indexer `pilot.test.ux_tests.dev_continue_development`/test_continue_development().","attributes":{"type":"defines","at":[10,0,35,33]}},{"key":"geid_130_3660","source":"scip-python python temp indexer `pilot.test.ux_tests.dev_continue_development`/__init__:","target":"scip-python python python-stdlib 3.11 `unittest.mock`/__init__:","attributes":{"type":"uses","at":[1,5,1,18]}},{"key":"geid_130_3661","source":"scip-python python temp indexer `pilot.test.ux_tests.dev_continue_development`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/__init__:","attributes":{"type":"uses","at":[3,5,3,23]}},{"key":"geid_130_3662","source":"scip-python python temp indexer `pilot.test.ux_tests.dev_continue_development`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","attributes":{"type":"uses","at":[3,31,3,41]}},{"key":"geid_130_3663","source":"scip-python python temp indexer `pilot.test.ux_tests.dev_continue_development`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents`/__init__:","attributes":{"type":"uses","at":[4,5,4,19]}},{"key":"geid_130_3664","source":"scip-python python temp indexer `pilot.test.ux_tests.dev_continue_development`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#","attributes":{"type":"uses","at":[4,27,4,36]}},{"key":"geid_130_3665","source":"scip-python python temp indexer `pilot.test.ux_tests.dev_continue_development`/__init__:","target":"scip-python python temp indexer utils/__init__:","attributes":{"type":"uses","at":[5,5,5,11]}},{"key":"geid_130_3666","source":"scip-python python temp indexer `pilot.test.ux_tests.dev_continue_development`/__init__:","target":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","attributes":{"type":"uses","at":[6,5,6,16]}},{"key":"geid_130_3667","source":"scip-python python temp indexer `pilot.test.ux_tests.dev_continue_development`/__init__:","target":"scip-python python temp indexer `pilot.helpers.cli`/terminate_running_processes().","attributes":{"type":"uses","at":[6,24,6,51]}},{"key":"geid_130_3668","source":"scip-python python temp indexer `pilot.test.ux_tests.dev_continue_development`/__init__:","target":"scip-python python temp indexer `pilot.test.mock_questionary`/__init__:","attributes":{"type":"uses","at":[7,5,7,26]}},{"key":"geid_130_3669","source":"scip-python python temp indexer `pilot.test.ux_tests.dev_continue_development`/__init__:","target":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#","attributes":{"type":"uses","at":[7,34,7,49]}},{"key":"geid_130_3670","source":"scip-python python temp indexer `pilot.test.ux_tests.dev_continue_development`/test_continue_development().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#","attributes":{"type":"uses","at":[20,16,20,25]}},{"key":"geid_130_3671","source":"scip-python python temp indexer `pilot.test.ux_tests.dev_continue_development`/test_continue_development().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","attributes":{"type":"uses","at":[22,12,22,22]}},{"key":"geid_130_3672","source":"scip-python python temp indexer `pilot.test.ux_tests.dev_continue_development`/test_continue_development().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#load_branch().","attributes":{"type":"uses","at":[23,10,23,21]}},{"key":"geid_130_3673","source":"scip-python python temp indexer `pilot.test.ux_tests.dev_continue_development`/test_continue_development().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#run_command.","attributes":{"type":"uses","at":[24,14,24,25]}},{"key":"geid_130_3674","source":"scip-python python temp indexer `pilot.test.ux_tests.dev_continue_development`/test_continue_development().","target":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#","attributes":{"type":"uses","at":[27,23,27,38]}},{"key":"geid_130_3675","source":"scip-python python temp indexer `pilot.test.ux_tests.dev_continue_development`/test_continue_development().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#continue_development().","attributes":{"type":"uses","at":[32,18,32,38]}},{"key":"geid_130_3676","source":"scip-python python temp indexer `pilot.test.ux_tests.dev_continue_development`/test_continue_development().","target":"scip-python python temp indexer `pilot.helpers.cli`/terminate_running_processes().","attributes":{"type":"uses","at":[35,4,35,31]}},{"key":"geid_130_3677","source":"scip-python python temp indexer `pilot.test.ux_tests`/__init__:","target":"scip-python python temp indexer `pilot.test.ux_tests`/run_test().","attributes":{"type":"defines","at":[6,0,19,45]}},{"key":"geid_130_3678","source":"scip-python python temp indexer `pilot.test.ux_tests`/__init__:","target":"scip-python python temp indexer cli_execute_command/__init__:","attributes":{"type":"uses","at":[1,5,1,25]}},{"key":"geid_130_3679","source":"scip-python python temp indexer `pilot.test.ux_tests`/__init__:","target":"scip-python python temp indexer cli_execute_command/__init__:","attributes":{"type":"uses","at":[1,33,1,52]}},{"key":"geid_130_3680","source":"scip-python python temp indexer `pilot.test.ux_tests`/__init__:","target":"scip-python python temp indexer `pilot.test.ux_tests.dev_continue_development`/__init__:","attributes":{"type":"uses","at":[2,5,2,30]}},{"key":"geid_130_3681","source":"scip-python python temp indexer `pilot.test.ux_tests`/__init__:","target":"scip-python python temp indexer `pilot.test.ux_tests.dev_continue_development`/test_continue_development().","attributes":{"type":"uses","at":[2,38,2,63]}},{"key":"geid_130_3682","source":"scip-python python temp indexer `pilot.test.ux_tests`/__init__:","target":"scip-python python temp indexer utils/__init__:","attributes":{"type":"uses","at":[3,5,3,11]}},{"key":"geid_130_3683","source":"scip-python python temp indexer `pilot.test.ux_tests`/run_test().","target":"scip-python python temp indexer cli_execute_command/__init__:","attributes":{"type":"uses","at":[11,31,11,50]}},{"key":"geid_130_3684","source":"scip-python python temp indexer `pilot.test.ux_tests`/run_test().","target":"scip-python python temp indexer `pilot.test.ux_tests.dev_continue_development`/test_continue_development().","attributes":{"type":"uses","at":[12,32,12,57]}},{"key":"geid_130_3685","source":"scip-python python temp indexer `pilot.test.ux_tests.run_command_until_success`/__init__:","target":"scip-python python temp indexer `pilot.test.ux_tests.run_command_until_success`/run_command_until_success().","attributes":{"type":"defines","at":[7,0,40,50]}},{"key":"geid_130_3686","source":"scip-python python temp indexer `pilot.test.ux_tests.run_command_until_success`/__init__:","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[0,7,0,9]}},{"key":"geid_130_3687","source":"scip-python python temp indexer `pilot.test.ux_tests.run_command_until_success`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents`/__init__:","attributes":{"type":"uses","at":[1,5,1,19]}},{"key":"geid_130_3688","source":"scip-python python temp indexer `pilot.test.ux_tests.run_command_until_success`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#","attributes":{"type":"uses","at":[1,27,1,36]}},{"key":"geid_130_3689","source":"scip-python python temp indexer `pilot.test.ux_tests.run_command_until_success`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/ENVIRONMENT_SETUP_STEP.","attributes":{"type":"uses","at":[1,38,1,60]}},{"key":"geid_130_3690","source":"scip-python python temp indexer `pilot.test.ux_tests.run_command_until_success`/__init__:","target":"scip-python python temp indexer `pilot.test.helpers`/__init__:","attributes":{"type":"uses","at":[2,5,2,12]}},{"key":"geid_130_3691","source":"scip-python python temp indexer `pilot.test.ux_tests.run_command_until_success`/__init__:","target":"scip-python python temp indexer `pilot.helpers.files`/__init__:","attributes":{"type":"uses","at":[3,5,3,18]}},{"key":"geid_130_3692","source":"scip-python python temp indexer `pilot.test.ux_tests.run_command_until_success`/__init__:","target":"scip-python python temp indexer `pilot.helpers.files`/update_file().","attributes":{"type":"uses","at":[3,26,3,37]}},{"key":"geid_130_3693","source":"scip-python python temp indexer `pilot.test.ux_tests.run_command_until_success`/__init__:","target":"scip-python python temp indexer database/__init__:","attributes":{"type":"uses","at":[4,5,4,13]}},{"key":"geid_130_3694","source":"scip-python python temp indexer `pilot.test.ux_tests.run_command_until_success`/run_command_until_success().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[22,26,22,28]}},{"key":"geid_130_3695","source":"scip-python python temp indexer `pilot.test.ux_tests.run_command_until_success`/run_command_until_success().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[22,29,22,33]}},{"key":"geid_130_3696","source":"scip-python python temp indexer `pilot.test.ux_tests.run_command_until_success`/run_command_until_success().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[22,34,22,41]}},{"key":"geid_130_3697","source":"scip-python python temp indexer `pilot.test.ux_tests.run_command_until_success`/run_command_until_success().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[22,42,22,44]}},{"key":"geid_130_3698","source":"scip-python python temp indexer `pilot.test.ux_tests.run_command_until_success`/run_command_until_success().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[22,45,22,49]}},{"key":"geid_130_3699","source":"scip-python python temp indexer `pilot.test.ux_tests.run_command_until_success`/run_command_until_success().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[22,50,22,54]}},{"key":"geid_130_3700","source":"scip-python python temp indexer `pilot.test.ux_tests.run_command_until_success`/run_command_until_success().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[22,55,22,57]}},{"key":"geid_130_3701","source":"scip-python python temp indexer `pilot.test.ux_tests.run_command_until_success`/run_command_until_success().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[22,58,22,62]}},{"key":"geid_130_3702","source":"scip-python python temp indexer `pilot.test.ux_tests.run_command_until_success`/run_command_until_success().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[22,63,22,70]}},{"key":"geid_130_3703","source":"scip-python python temp indexer `pilot.test.ux_tests.run_command_until_success`/run_command_until_success().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[22,71,22,73]}},{"key":"geid_130_3704","source":"scip-python python temp indexer `pilot.test.ux_tests.run_command_until_success`/run_command_until_success().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[22,74,22,78]}},{"key":"geid_130_3705","source":"scip-python python temp indexer `pilot.test.ux_tests.run_command_until_success`/run_command_until_success().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[22,79,22,86]}},{"key":"geid_130_3706","source":"scip-python python temp indexer `pilot.test.ux_tests.run_command_until_success`/run_command_until_success().","target":"scip-python python temp indexer `pilot.test.ux_tests.run_command_until_success`/","attributes":{"type":"uses","at":[22,87,22,95]}},{"key":"geid_130_3707","source":"scip-python python temp indexer `pilot.test.ux_tests.run_command_until_success`/run_command_until_success().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/ENVIRONMENT_SETUP_STEP.","attributes":{"type":"uses","at":[25,27,25,49]}},{"key":"geid_130_3708","source":"scip-python python temp indexer `pilot.test.ux_tests.run_command_until_success`/run_command_until_success().","target":"scip-python python temp indexer `pilot.helpers.files`/update_file().","attributes":{"type":"uses","at":[28,4,28,15]}},{"key":"geid_130_3709","source":"scip-python python temp indexer `pilot.test.ux_tests.run_command_until_success`/run_command_until_success().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#","attributes":{"type":"uses","at":[31,16,31,25]}},{"key":"geid_130_3710","source":"scip-python python temp indexer `pilot.test.ux_tests.run_command_until_success`/run_command_until_success().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#run_command.","attributes":{"type":"uses","at":[32,14,32,25]}},{"key":"geid_130_3711","source":"scip-python python temp indexer `pilot.test.ux_tests.run_command_until_success`/run_command_until_success().","target":"scip-python python temp indexer `pilot.helpers.agents.developer`/Developer#step_human_intervention().","attributes":{"type":"uses","at":[40,14,40,37]}},{"key":"geid_130_3712","source":"scip-python python temp indexer `pilot.utils.arguments`/__init__:","target":"scip-python python temp indexer `pilot.utils.arguments`/username_to_uuid().","attributes":{"type":"defines","at":[102,0,110,35]}},{"key":"geid_130_3713","source":"scip-python python temp indexer `pilot.utils.arguments`/__init__:","target":"scip-python python temp indexer `pilot.utils.arguments`/get_email().","attributes":{"type":"defines","at":[81,0,98,28]}},{"key":"geid_130_3714","source":"scip-python python temp indexer `pilot.utils.arguments`/__init__:","target":"scip-python python temp indexer `pilot.utils.arguments`/get_arguments().","attributes":{"type":"defines","at":[12,0,78,20]}},{"key":"geid_130_3715","source":"scip-python python temp indexer `pilot.utils.arguments`/__init__:","target":"scip-python python python-stdlib 3.11 hashlib/__init__:","attributes":{"type":"uses","at":[0,7,0,14]}},{"key":"geid_130_3716","source":"scip-python python temp indexer `pilot.utils.arguments`/__init__:","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[1,7,1,9]}},{"key":"geid_130_3717","source":"scip-python python temp indexer `pilot.utils.arguments`/__init__:","target":"scip-python python python-stdlib 3.11 re/__init__:","attributes":{"type":"uses","at":[2,7,2,9]}},{"key":"geid_130_3718","source":"scip-python python temp indexer `pilot.utils.arguments`/__init__:","target":"scip-python python python-stdlib 3.11 sys/__init__:","attributes":{"type":"uses","at":[3,7,3,10]}},{"key":"geid_130_3719","source":"scip-python python temp indexer `pilot.utils.arguments`/__init__:","target":"scip-python python python-stdlib 3.11 uuid/__init__:","attributes":{"type":"uses","at":[4,7,4,11]}},{"key":"geid_130_3720","source":"scip-python python temp indexer `pilot.utils.arguments`/__init__:","target":"scip-python python python-stdlib 3.11 getpass/__init__:","attributes":{"type":"uses","at":[5,5,5,12]}},{"key":"geid_130_3721","source":"scip-python python temp indexer `pilot.utils.arguments`/__init__:","target":"scip-python python python-stdlib 3.11 getpass/getuser().","attributes":{"type":"uses","at":[5,20,5,27]}},{"key":"geid_130_3722","source":"scip-python python temp indexer `pilot.utils.arguments`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/__init__:","attributes":{"type":"uses","at":[6,5,6,22]}},{"key":"geid_130_3723","source":"scip-python python temp indexer `pilot.utils.arguments`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/get_app().","attributes":{"type":"uses","at":[6,30,6,37]}},{"key":"geid_130_3724","source":"scip-python python temp indexer `pilot.utils.arguments`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/get_app_by_user_workspace().","attributes":{"type":"uses","at":[6,39,6,64]}},{"key":"geid_130_3725","source":"scip-python python temp indexer `pilot.utils.arguments`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/__init__:","attributes":{"type":"uses","at":[7,5,7,16]}},{"key":"geid_130_3726","source":"scip-python python temp indexer `pilot.utils.arguments`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/color_green_bold.","attributes":{"type":"uses","at":[7,24,7,40]}},{"key":"geid_130_3727","source":"scip-python python temp indexer `pilot.utils.arguments`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/style_config.","attributes":{"type":"uses","at":[7,42,7,54]}},{"key":"geid_130_3728","source":"scip-python python temp indexer `pilot.utils.arguments`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/__init__:","attributes":{"type":"uses","at":[8,5,8,16]}},{"key":"geid_130_3729","source":"scip-python python temp indexer `pilot.utils.arguments`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/should_execute_step().","attributes":{"type":"uses","at":[8,24,8,43]}},{"key":"geid_130_3730","source":"scip-python python temp indexer `pilot.utils.arguments`/__init__:","target":"scip-python python temp indexer `pilot.const.common`/__init__:","attributes":{"type":"uses","at":[9,5,9,17]}},{"key":"geid_130_3731","source":"scip-python python temp indexer `pilot.utils.arguments`/__init__:","target":"scip-python python temp indexer `pilot.const.common`/STEPS.","attributes":{"type":"uses","at":[9,25,9,30]}},{"key":"geid_130_3732","source":"scip-python python temp indexer `pilot.utils.arguments`/get_arguments().","target":"scip-python python python-stdlib 3.11 sys/__init__:","attributes":{"type":"uses","at":[15,11,15,14]}},{"key":"geid_130_3733","source":"scip-python python temp indexer `pilot.utils.arguments`/get_arguments().","target":"scip-python python python-stdlib 3.11 sys/argv.argv.","attributes":{"type":"uses","at":[15,15,15,19]}},{"key":"geid_130_3734","source":"scip-python python temp indexer `pilot.utils.arguments`/get_arguments().","target":"scip-python python temp indexer `pilot.utils.style`/style_config.","attributes":{"type":"uses","at":[30,30,30,42]}},{"key":"geid_130_3735","source":"scip-python python temp indexer `pilot.utils.arguments`/get_arguments().","target":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#theme.","attributes":{"type":"uses","at":[30,43,30,48]}},{"key":"geid_130_3736","source":"scip-python python temp indexer `pilot.utils.arguments`/get_arguments().","target":"scip-python python temp indexer `pilot.utils.style`/Theme#LIGHT.","attributes":{"type":"uses","at":[30,49,30,54]}},{"key":"geid_130_3737","source":"scip-python python temp indexer `pilot.utils.arguments`/get_arguments().","target":"scip-python python temp indexer `pilot.utils.style`/style_config.","attributes":{"type":"uses","at":[30,64,30,76]}},{"key":"geid_130_3738","source":"scip-python python temp indexer `pilot.utils.arguments`/get_arguments().","target":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#theme.","attributes":{"type":"uses","at":[30,77,30,82]}},{"key":"geid_130_3739","source":"scip-python python temp indexer `pilot.utils.arguments`/get_arguments().","target":"scip-python python temp indexer `pilot.utils.style`/Theme#DARK.","attributes":{"type":"uses","at":[30,83,30,87]}},{"key":"geid_130_3740","source":"scip-python python temp indexer `pilot.utils.arguments`/get_arguments().","target":"scip-python python temp indexer `pilot.utils.style`/style_config.","attributes":{"type":"uses","at":[32,4,32,16]}},{"key":"geid_130_3741","source":"scip-python python temp indexer `pilot.utils.arguments`/get_arguments().","target":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#set_theme().","attributes":{"type":"uses","at":[32,17,32,26]}},{"key":"geid_130_3742","source":"scip-python python temp indexer `pilot.utils.arguments`/get_arguments().","target":"scip-python python temp indexer `pilot.utils.style`/style_config.","attributes":{"type":"uses","at":[32,64,32,76]}},{"key":"geid_130_3743","source":"scip-python python temp indexer `pilot.utils.arguments`/get_arguments().","target":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#theme.","attributes":{"type":"uses","at":[32,77,32,82]}},{"key":"geid_130_3744","source":"scip-python python temp indexer `pilot.utils.arguments`/get_arguments().","target":"scip-python python temp indexer `pilot.utils.style`/Theme#DARK.","attributes":{"type":"uses","at":[32,83,32,87]}},{"key":"geid_130_3745","source":"scip-python python temp indexer `pilot.utils.arguments`/get_arguments().","target":"scip-python python temp indexer `pilot.utils.arguments`/username_to_uuid().","attributes":{"type":"uses","at":[35,31,35,47]}},{"key":"geid_130_3746","source":"scip-python python temp indexer `pilot.utils.arguments`/get_arguments().","target":"scip-python python python-stdlib 3.11 getpass/getuser().","attributes":{"type":"uses","at":[35,48,35,55]}},{"key":"geid_130_3747","source":"scip-python python temp indexer `pilot.utils.arguments`/get_arguments().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[39,33,39,35]}},{"key":"geid_130_3748","source":"scip-python python temp indexer `pilot.utils.arguments`/get_arguments().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[39,36,39,40]}},{"key":"geid_130_3749","source":"scip-python python temp indexer `pilot.utils.arguments`/get_arguments().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[39,41,39,48]}},{"key":"geid_130_3750","source":"scip-python python temp indexer `pilot.utils.arguments`/get_arguments().","target":"scip-python python temp indexer `pilot.database.database`/get_app_by_user_workspace().","attributes":{"type":"uses","at":[40,14,40,39]}},{"key":"geid_130_3751","source":"scip-python python temp indexer `pilot.utils.arguments`/get_arguments().","target":"scip-python python temp indexer `pilot.database.database`/get_app().","attributes":{"type":"uses","at":[49,18,49,25]}},{"key":"geid_130_3752","source":"scip-python python temp indexer `pilot.utils.arguments`/get_arguments().","target":"scip-python python temp indexer `pilot.utils.utils`/should_execute_step().","attributes":{"type":"uses","at":[55,67,55,86]}},{"key":"geid_130_3753","source":"scip-python python temp indexer `pilot.utils.arguments`/get_arguments().","target":"scip-python python temp indexer `pilot.const.common`/STEPS.","attributes":{"type":"uses","at":[56,76,56,81]}},{"key":"geid_130_3754","source":"scip-python python temp indexer `pilot.utils.arguments`/get_arguments().","target":"scip-python python temp indexer `pilot.const.common`/STEPS.","attributes":{"type":"uses","at":[56,82,56,87]}},{"key":"geid_130_3755","source":"scip-python python temp indexer `pilot.utils.arguments`/get_arguments().","target":"scip-python python temp indexer `pilot.utils.style`/color_green_bold.","attributes":{"type":"uses","at":[58,14,58,30]}},{"key":"geid_130_3756","source":"scip-python python temp indexer `pilot.utils.arguments`/get_arguments().","target":"scip-python python temp indexer `pilot.utils.style`/color_green_bold.","attributes":{"type":"uses","at":[59,14,59,30]}},{"key":"geid_130_3757","source":"scip-python python temp indexer `pilot.utils.arguments`/get_arguments().","target":"scip-python python temp indexer `pilot.utils.style`/color_green_bold.","attributes":{"type":"uses","at":[60,14,60,30]}},{"key":"geid_130_3758","source":"scip-python python temp indexer `pilot.utils.arguments`/get_arguments().","target":"scip-python python python-stdlib 3.11 uuid/__init__:","attributes":{"type":"uses","at":[63,34,63,38]}},{"key":"geid_130_3759","source":"scip-python python temp indexer `pilot.utils.arguments`/get_arguments().","target":"scip-python python python-stdlib 3.11 uuid/uuid4().","attributes":{"type":"uses","at":[63,39,63,44]}},{"key":"geid_130_3760","source":"scip-python python temp indexer `pilot.utils.arguments`/get_arguments().","target":"scip-python python temp indexer `pilot.utils.style`/color_green_bold.","attributes":{"type":"uses","at":[64,14,64,30]}},{"key":"geid_130_3761","source":"scip-python python temp indexer `pilot.utils.arguments`/get_arguments().","target":"scip-python python temp indexer `pilot.utils.style`/color_green_bold.","attributes":{"type":"uses","at":[66,14,66,30]}},{"key":"geid_130_3762","source":"scip-python python temp indexer `pilot.utils.arguments`/get_arguments().","target":"scip-python python python-stdlib 3.11 sys/__init__:","attributes":{"type":"uses","at":[66,41,66,44]}},{"key":"geid_130_3763","source":"scip-python python temp indexer `pilot.utils.arguments`/get_arguments().","target":"scip-python python python-stdlib 3.11 sys/argv.argv.","attributes":{"type":"uses","at":[66,45,66,49]}},{"key":"geid_130_3764","source":"scip-python python temp indexer `pilot.utils.arguments`/get_arguments().","target":"scip-python python temp indexer `pilot.utils.style`/color_green_bold.","attributes":{"type":"uses","at":[67,14,67,30]}},{"key":"geid_130_3765","source":"scip-python python temp indexer `pilot.utils.arguments`/get_arguments().","target":"scip-python python temp indexer `pilot.utils.arguments`/get_email().","attributes":{"type":"uses","at":[70,29,70,38]}},{"key":"geid_130_3766","source":"scip-python python temp indexer `pilot.utils.arguments`/get_email().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[83,21,83,23]}},{"key":"geid_130_3767","source":"scip-python python temp indexer `pilot.utils.arguments`/get_email().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[83,24,83,28]}},{"key":"geid_130_3768","source":"scip-python python temp indexer `pilot.utils.arguments`/get_email().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[83,29,83,39]}},{"key":"geid_130_3769","source":"scip-python python temp indexer `pilot.utils.arguments`/get_email().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[85,7,85,9]}},{"key":"geid_130_3770","source":"scip-python python temp indexer `pilot.utils.arguments`/get_email().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[85,10,85,14]}},{"key":"geid_130_3771","source":"scip-python python temp indexer `pilot.utils.arguments`/get_email().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[85,15,85,21]}},{"key":"geid_130_3772","source":"scip-python python temp indexer `pilot.utils.arguments`/get_email().","target":"scip-python python python-stdlib 3.11 io/TextIOBase#read().","attributes":{"type":"uses","at":[87,27,87,31]}},{"key":"geid_130_3773","source":"scip-python python temp indexer `pilot.utils.arguments`/get_email().","target":"scip-python python python-stdlib 3.11 re/__init__:","attributes":{"type":"uses","at":[90,26,90,28]}},{"key":"geid_130_3774","source":"scip-python python temp indexer `pilot.utils.arguments`/get_email().","target":"scip-python python python-stdlib 3.11 re/search().","attributes":{"type":"uses","at":[90,29,90,35]}},{"key":"geid_130_3775","source":"scip-python python temp indexer `pilot.utils.arguments`/get_email().","target":"scip-python python python-stdlib 3.11 re/Match#group().","attributes":{"type":"uses","at":[93,35,93,40]}},{"key":"geid_130_3776","source":"scip-python python temp indexer `pilot.utils.arguments`/get_email().","target":"scip-python python python-stdlib 3.11 uuid/__init__:","attributes":{"type":"uses","at":[98,15,98,19]}},{"key":"geid_130_3777","source":"scip-python python temp indexer `pilot.utils.arguments`/get_email().","target":"scip-python python python-stdlib 3.11 uuid/uuid4().","attributes":{"type":"uses","at":[98,20,98,25]}},{"key":"geid_130_3778","source":"scip-python python temp indexer `pilot.utils.arguments`/username_to_uuid().","target":"scip-python python python-stdlib 3.11 hashlib/__init__:","attributes":{"type":"uses","at":[108,11,108,18]}},{"key":"geid_130_3779","source":"scip-python python temp indexer `pilot.utils.arguments`/username_to_uuid().","target":"scip-python python python-stdlib 3.11 hashlib/sha1().","attributes":{"type":"uses","at":[108,19,108,23]}},{"key":"geid_130_3780","source":"scip-python python temp indexer `pilot.utils.arguments`/username_to_uuid().","target":"scip-python python python-stdlib 3.11 hashlib/_Hash#hexdigest().","attributes":{"type":"uses","at":[108,43,108,52]}},{"key":"geid_130_3781","source":"scip-python python temp indexer `pilot.utils.arguments`/username_to_uuid().","target":"scip-python python python-stdlib 3.11 uuid/__init__:","attributes":{"type":"uses","at":[110,15,110,19]}},{"key":"geid_130_3782","source":"scip-python python temp indexer `pilot.utils.arguments`/username_to_uuid().","target":"scip-python python python-stdlib 3.11 uuid/UUID#","attributes":{"type":"uses","at":[110,20,110,24]}},{"key":"geid_130_3783","source":"scip-python python temp indexer `pilot.utils.custom_print`/get_custom_print().","target":"scip-python python temp indexer `pilot.utils.custom_print`/get_custom_print().local_print().","attributes":{"type":"defines","at":[25,4,32,41]}},{"key":"geid_130_3784","source":"scip-python python temp indexer `pilot.utils.custom_print`/get_custom_print().","target":"scip-python python temp indexer `pilot.utils.custom_print`/get_custom_print().print_to_external_process().","attributes":{"type":"defines","at":[8,4,23,47]}},{"key":"geid_130_3785","source":"scip-python python temp indexer `pilot.utils.custom_print`/__init__:","target":"scip-python python temp indexer `pilot.utils.custom_print`/get_custom_print().","attributes":{"type":"defines","at":[5,0,39,47]}},{"key":"geid_130_3786","source":"scip-python python temp indexer `pilot.utils.custom_print`/__init__:","target":"scip-python python temp indexer `pilot.helpers.ipc`/__init__:","attributes":{"type":"uses","at":[1,5,1,16]}},{"key":"geid_130_3787","source":"scip-python python temp indexer `pilot.utils.custom_print`/__init__:","target":"scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#","attributes":{"type":"uses","at":[1,24,1,33]}},{"key":"geid_130_3788","source":"scip-python python temp indexer `pilot.utils.custom_print`/__init__:","target":"scip-python python temp indexer `pilot.const.ipc`/__init__:","attributes":{"type":"uses","at":[2,5,2,14]}},{"key":"geid_130_3789","source":"scip-python python temp indexer `pilot.utils.custom_print`/__init__:","target":"scip-python python temp indexer `pilot.const.ipc`/MESSAGE_TYPE.","attributes":{"type":"uses","at":[2,22,2,34]}},{"key":"geid_130_3790","source":"scip-python python temp indexer `pilot.utils.custom_print`/__init__:","target":"scip-python python temp indexer `pilot.const.ipc`/LOCAL_IGNORE_MESSAGE_TYPES.","attributes":{"type":"uses","at":[2,36,2,62]}},{"key":"geid_130_3791","source":"scip-python python temp indexer `pilot.utils.custom_print`/get_custom_print().print_to_external_process().","target":"scip-python python temp indexer `pilot.const.ipc`/MESSAGE_TYPE.","attributes":{"type":"uses","at":[14,31,14,43]}},{"key":"geid_130_3792","source":"scip-python python temp indexer `pilot.utils.custom_print`/get_custom_print().print_to_external_process().","target":"scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#send().","attributes":{"type":"uses","at":[18,28,18,32]}},{"key":"geid_130_3793","source":"scip-python python temp indexer `pilot.utils.custom_print`/get_custom_print().print_to_external_process().","target":"scip-python python temp indexer `pilot.const.ipc`/MESSAGE_TYPE.","attributes":{"type":"uses","at":[19,20,19,32]}},{"key":"geid_130_3794","source":"scip-python python temp indexer `pilot.utils.custom_print`/get_custom_print().print_to_external_process().","target":"scip-python python temp indexer `pilot.const.ipc`/MESSAGE_TYPE.","attributes":{"type":"uses","at":[22,29,22,41]}},{"key":"geid_130_3795","source":"scip-python python temp indexer `pilot.utils.custom_print`/get_custom_print().print_to_external_process().","target":"scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#listen().","attributes":{"type":"uses","at":[23,39,23,45]}},{"key":"geid_130_3796","source":"scip-python python temp indexer `pilot.utils.custom_print`/get_custom_print().local_print().","target":"scip-python python temp indexer `pilot.const.ipc`/LOCAL_IGNORE_MESSAGE_TYPES.","attributes":{"type":"uses","at":[28,33,28,59]}},{"key":"geid_130_3797","source":"scip-python python temp indexer `pilot.utils.custom_print`/get_custom_print().","target":"scip-python python temp indexer `pilot.helpers.ipc`/IPCClient#","attributes":{"type":"uses","at":[36,30,36,39]}},{"key":"geid_130_3798","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#","target":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#write_project().","attributes":{"type":"defines","at":[78,4,90,102]}},{"key":"geid_130_3799","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#","target":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#log_chat_completion_json().","attributes":{"type":"defines","at":[62,4,76,47]}},{"key":"geid_130_3800","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#","target":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#log_chat_completion().","attributes":{"type":"defines","at":[47,4,60,106]}},{"key":"geid_130_3801","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#","target":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#chat_log_folder().","attributes":{"type":"defines","at":[36,4,45,28]}},{"key":"geid_130_3802","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#","target":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#with_root_path().","attributes":{"type":"defines","at":[24,4,34,33]}},{"key":"geid_130_3803","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#","target":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#__init__().","attributes":{"type":"defines","at":[17,4,22,55]}},{"key":"geid_130_3804","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/__init__:","target":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#","attributes":{"type":"defines","at":[13,0,90,102]}},{"key":"geid_130_3805","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/__init__:","target":"scip-python python python-stdlib 3.11 json/__init__:","attributes":{"type":"uses","at":[0,7,0,11]}},{"key":"geid_130_3806","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/__init__:","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[1,7,1,9]}},{"key":"geid_130_3807","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/__init__:","target":"scip-python python python-stdlib 3.11 datetime/__init__:","attributes":{"type":"uses","at":[3,5,3,13]}},{"key":"geid_130_3808","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/__init__:","target":"scip-python python python-stdlib 3.11 datetime/datetime#","attributes":{"type":"uses","at":[3,21,3,29]}},{"key":"geid_130_3809","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/__init__:","target":"scip-python python python-dotenv 1.0.0 dotenv/__init__:","attributes":{"type":"uses","at":[4,5,4,11]}},{"key":"geid_130_3810","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/__init__:","target":"scip-python python python-dotenv 1.0.0 `dotenv.main`/load_dotenv().","attributes":{"type":"uses","at":[4,19,4,30]}},{"key":"geid_130_3811","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/__init__:","target":"scip-python python python-dotenv 1.0.0 `dotenv.main`/load_dotenv().","attributes":{"type":"uses","at":[6,0,6,11]}},{"key":"geid_130_3812","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/__init__:","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[8,22,8,24]}},{"key":"geid_130_3813","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/__init__:","target":"scip-python python python-stdlib 3.11 os/getenv().","attributes":{"type":"uses","at":[8,25,8,31]}},{"key":"geid_130_3814","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#__init__().","target":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/USE_GPTPILOT_FOLDER.","attributes":{"type":"uses","at":[18,15,18,34]}},{"key":"geid_130_3815","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#__init__().","target":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#with_root_path().","attributes":{"type":"uses","at":[21,39,21,53]}},{"key":"geid_130_3816","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#__init__().","target":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#chat_log_folder().","attributes":{"type":"uses","at":[22,34,22,49]}},{"key":"geid_130_3817","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#with_root_path().","target":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/USE_GPTPILOT_FOLDER.","attributes":{"type":"uses","at":[25,15,25,34]}},{"key":"geid_130_3818","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#with_root_path().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[27,29,27,31]}},{"key":"geid_130_3819","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#with_root_path().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[27,32,27,36]}},{"key":"geid_130_3820","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#with_root_path().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[27,37,27,47]}},{"key":"geid_130_3821","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#with_root_path().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[27,48,27,50]}},{"key":"geid_130_3822","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#with_root_path().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[27,51,27,55]}},{"key":"geid_130_3823","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#with_root_path().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[27,56,27,60]}},{"key":"geid_130_3824","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#with_root_path().","target":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#dot_gpt_pilot_path.","attributes":{"type":"uses","at":[28,13,28,31]}},{"key":"geid_130_3825","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#with_root_path().","target":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#log_chat_completions.","attributes":{"type":"uses","at":[31,27,31,47]}},{"key":"geid_130_3826","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#with_root_path().","target":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#chat_log_folder().","attributes":{"type":"uses","at":[32,17,32,32]}},{"key":"geid_130_3827","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#chat_log_folder().","target":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/USE_GPTPILOT_FOLDER.","attributes":{"type":"uses","at":[37,15,37,34]}},{"key":"geid_130_3828","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#chat_log_folder().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[39,24,39,26]}},{"key":"geid_130_3829","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#chat_log_folder().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[39,27,39,31]}},{"key":"geid_130_3830","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#chat_log_folder().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[39,32,39,36]}},{"key":"geid_130_3831","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#chat_log_folder().","target":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#dot_gpt_pilot_path.","attributes":{"type":"uses","at":[39,42,39,60]}},{"key":"geid_130_3832","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#chat_log_folder().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[41,28,41,30]}},{"key":"geid_130_3833","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#chat_log_folder().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[41,31,41,35]}},{"key":"geid_130_3834","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#chat_log_folder().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[41,36,41,40]}},{"key":"geid_130_3835","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#chat_log_folder().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[43,8,43,10]}},{"key":"geid_130_3836","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#chat_log_folder().","target":"scip-python python python-stdlib 3.11 os/makedirs().","attributes":{"type":"uses","at":[43,11,43,19]}},{"key":"geid_130_3837","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#chat_log_folder().","target":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#chat_log_path.","attributes":{"type":"uses","at":[44,13,44,26]}},{"key":"geid_130_3838","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#log_chat_completion().","target":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/USE_GPTPILOT_FOLDER.","attributes":{"type":"uses","at":[48,15,48,34]}},{"key":"geid_130_3839","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#log_chat_completion().","target":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#log_chat_completions.","attributes":{"type":"uses","at":[50,16,50,36]}},{"key":"geid_130_3840","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#log_chat_completion().","target":"scip-python python python-stdlib 3.11 datetime/datetime#","attributes":{"type":"uses","at":[51,19,51,27]}},{"key":"geid_130_3841","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#log_chat_completion().","target":"scip-python python python-stdlib 3.11 datetime/datetime#now().","attributes":{"type":"uses","at":[51,28,51,31]}},{"key":"geid_130_3842","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#log_chat_completion().","target":"scip-python python python-stdlib 3.11 datetime/date#strftime().","attributes":{"type":"uses","at":[51,34,51,42]}},{"key":"geid_130_3843","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#log_chat_completion().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[52,22,52,24]}},{"key":"geid_130_3844","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#log_chat_completion().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[52,25,52,29]}},{"key":"geid_130_3845","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#log_chat_completion().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[52,30,52,34]}},{"key":"geid_130_3846","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#log_chat_completion().","target":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#chat_log_path.","attributes":{"type":"uses","at":[52,40,52,53]}},{"key":"geid_130_3847","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#log_chat_completion_json().","target":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/USE_GPTPILOT_FOLDER.","attributes":{"type":"uses","at":[63,15,63,34]}},{"key":"geid_130_3848","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#log_chat_completion_json().","target":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#log_chat_completions.","attributes":{"type":"uses","at":[65,16,65,36]}},{"key":"geid_130_3849","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#log_chat_completion_json().","target":"scip-python python python-stdlib 3.11 datetime/datetime#","attributes":{"type":"uses","at":[66,19,66,27]}},{"key":"geid_130_3850","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#log_chat_completion_json().","target":"scip-python python python-stdlib 3.11 datetime/datetime#now().","attributes":{"type":"uses","at":[66,28,66,31]}},{"key":"geid_130_3851","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#log_chat_completion_json().","target":"scip-python python python-stdlib 3.11 datetime/date#strftime().","attributes":{"type":"uses","at":[66,34,66,42]}},{"key":"geid_130_3852","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#log_chat_completion_json().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[68,22,68,24]}},{"key":"geid_130_3853","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#log_chat_completion_json().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[68,25,68,29]}},{"key":"geid_130_3854","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#log_chat_completion_json().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[68,30,68,34]}},{"key":"geid_130_3855","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#log_chat_completion_json().","target":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#chat_log_path.","attributes":{"type":"uses","at":[68,40,68,53]}},{"key":"geid_130_3856","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#log_chat_completion_json().","target":"scip-python python python-stdlib 3.11 json/__init__:","attributes":{"type":"uses","at":[73,32,73,36]}},{"key":"geid_130_3857","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#log_chat_completion_json().","target":"scip-python python python-stdlib 3.11 json/loads().","attributes":{"type":"uses","at":[73,37,73,42]}},{"key":"geid_130_3858","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#log_chat_completion_json().","target":"scip-python python python-stdlib 3.11 json/__init__:","attributes":{"type":"uses","at":[76,16,76,20]}},{"key":"geid_130_3859","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#log_chat_completion_json().","target":"scip-python python python-stdlib 3.11 json/dump().","attributes":{"type":"uses","at":[76,21,76,25]}},{"key":"geid_130_3860","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#write_project().","target":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/USE_GPTPILOT_FOLDER.","attributes":{"type":"uses","at":[79,15,79,34]}},{"key":"geid_130_3861","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#write_project().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[89,18,89,20]}},{"key":"geid_130_3862","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#write_project().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[89,21,89,25]}},{"key":"geid_130_3863","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#write_project().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[89,26,89,30]}},{"key":"geid_130_3864","source":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#write_project().","target":"scip-python python temp indexer `pilot.utils.dot_gpt_pilot`/DotGptPilot#dot_gpt_pilot_path.","attributes":{"type":"uses","at":[89,36,89,54]}},{"key":"geid_130_3865","source":"scip-python python temp indexer `pilot.utils.exit`/__init__:","target":"scip-python python temp indexer `pilot.utils.exit`/exit_gpt_pilot().","attributes":{"type":"defines","at":[95,0,114,30]}},{"key":"geid_130_3866","source":"scip-python python temp indexer `pilot.utils.exit`/__init__:","target":"scip-python python temp indexer `pilot.utils.exit`/ask_user_email().","attributes":{"type":"defines","at":[81,0,93,16]}},{"key":"geid_130_3867","source":"scip-python python temp indexer `pilot.utils.exit`/__init__:","target":"scip-python python temp indexer `pilot.utils.exit`/ask_user_feedback().","attributes":{"type":"defines","at":[71,0,78,40]}},{"key":"geid_130_3868","source":"scip-python python temp indexer `pilot.utils.exit`/__init__:","target":"scip-python python temp indexer `pilot.utils.exit`/ask_to_store_prompt().","attributes":{"type":"defines","at":[47,0,68,47]}},{"key":"geid_130_3869","source":"scip-python python temp indexer `pilot.utils.exit`/__init__:","target":"scip-python python temp indexer `pilot.utils.exit`/get_path_id().","attributes":{"type":"defines","at":[41,0,44,70]}},{"key":"geid_130_3870","source":"scip-python python temp indexer `pilot.utils.exit`/__init__:","target":"scip-python python temp indexer `pilot.utils.exit`/send_feedback().","attributes":{"type":"defines","at":[25,0,38,53]}},{"key":"geid_130_3871","source":"scip-python python temp indexer `pilot.utils.exit`/__init__:","target":"scip-python python temp indexer `pilot.utils.exit`/send_telemetry().","attributes":{"type":"defines","at":[10,0,22,54]}},{"key":"geid_130_3872","source":"scip-python python temp indexer `pilot.utils.exit`/__init__:","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[1,7,1,9]}},{"key":"geid_130_3873","source":"scip-python python temp indexer `pilot.utils.exit`/__init__:","target":"scip-python python python-stdlib 3.11 hashlib/__init__:","attributes":{"type":"uses","at":[2,7,2,14]}},{"key":"geid_130_3874","source":"scip-python python temp indexer `pilot.utils.exit`/__init__:","target":"scip-python python requests 2.31.0 requests/__init__:","attributes":{"type":"uses","at":[3,7,3,15]}},{"key":"geid_130_3875","source":"scip-python python temp indexer `pilot.utils.exit`/__init__:","target":"scip-python python temp indexer `pilot.helpers.cli`/__init__:","attributes":{"type":"uses","at":[5,5,5,16]}},{"key":"geid_130_3876","source":"scip-python python temp indexer `pilot.utils.exit`/__init__:","target":"scip-python python temp indexer `pilot.helpers.cli`/terminate_running_processes().","attributes":{"type":"uses","at":[5,24,5,51]}},{"key":"geid_130_3877","source":"scip-python python temp indexer `pilot.utils.exit`/__init__:","target":"scip-python python temp indexer `pilot.utils.questionary`/__init__:","attributes":{"type":"uses","at":[6,5,6,22]}},{"key":"geid_130_3878","source":"scip-python python temp indexer `pilot.utils.exit`/__init__:","target":"scip-python python temp indexer `pilot.utils.questionary`/styled_text().","attributes":{"type":"uses","at":[6,30,6,41]}},{"key":"geid_130_3879","source":"scip-python python temp indexer `pilot.utils.exit`/__init__:","target":"scip-python python temp indexer `pilot.utils.telemetry`/__init__:","attributes":{"type":"uses","at":[8,5,8,20]}},{"key":"geid_130_3880","source":"scip-python python temp indexer `pilot.utils.exit`/__init__:","target":"scip-python python temp indexer `pilot.utils.telemetry`/telemetry.","attributes":{"type":"uses","at":[8,28,8,37]}},{"key":"geid_130_3881","source":"scip-python python temp indexer `pilot.utils.exit`/send_telemetry().","target":"scip-python python requests 2.31.0 requests/__init__:","attributes":{"type":"uses","at":[19,19,19,27]}},{"key":"geid_130_3882","source":"scip-python python temp indexer `pilot.utils.exit`/send_telemetry().","target":"scip-python python requests 2.31.0 `requests.api`/post().","attributes":{"type":"uses","at":[19,28,19,32]}},{"key":"geid_130_3883","source":"scip-python python temp indexer `pilot.utils.exit`/send_telemetry().","target":"scip-python python temp indexer `requests.models`/Response#raise_for_status().","attributes":{"type":"uses","at":[20,17,20,33]}},{"key":"geid_130_3884","source":"scip-python python temp indexer `pilot.utils.exit`/send_telemetry().","target":"scip-python python requests 2.31.0 requests/__init__:","attributes":{"type":"uses","at":[21,11,21,19]}},{"key":"geid_130_3885","source":"scip-python python temp indexer `pilot.utils.exit`/send_telemetry().","target":"scip-python python temp indexer `requests.exceptions`/RequestException#","attributes":{"type":"uses","at":[21,20,21,36]}},{"key":"geid_130_3886","source":"scip-python python temp indexer `pilot.utils.exit`/send_feedback().","target":"scip-python python requests 2.31.0 requests/__init__:","attributes":{"type":"uses","at":[35,19,35,27]}},{"key":"geid_130_3887","source":"scip-python python temp indexer `pilot.utils.exit`/send_feedback().","target":"scip-python python requests 2.31.0 `requests.api`/post().","attributes":{"type":"uses","at":[35,28,35,32]}},{"key":"geid_130_3888","source":"scip-python python temp indexer `pilot.utils.exit`/send_feedback().","target":"scip-python python temp indexer `requests.models`/Response#raise_for_status().","attributes":{"type":"uses","at":[36,17,36,33]}},{"key":"geid_130_3889","source":"scip-python python temp indexer `pilot.utils.exit`/send_feedback().","target":"scip-python python requests 2.31.0 requests/__init__:","attributes":{"type":"uses","at":[37,11,37,19]}},{"key":"geid_130_3890","source":"scip-python python temp indexer `pilot.utils.exit`/send_feedback().","target":"scip-python python temp indexer `requests.exceptions`/RequestException#","attributes":{"type":"uses","at":[37,20,37,36]}},{"key":"geid_130_3891","source":"scip-python python temp indexer `pilot.utils.exit`/get_path_id().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[43,29,43,31]}},{"key":"geid_130_3892","source":"scip-python python temp indexer `pilot.utils.exit`/get_path_id().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[43,32,43,36]}},{"key":"geid_130_3893","source":"scip-python python temp indexer `pilot.utils.exit`/get_path_id().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[43,37,43,44]}},{"key":"geid_130_3894","source":"scip-python python temp indexer `pilot.utils.exit`/get_path_id().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[43,45,43,47]}},{"key":"geid_130_3895","source":"scip-python python temp indexer `pilot.utils.exit`/get_path_id().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[43,48,43,52]}},{"key":"geid_130_3896","source":"scip-python python temp indexer `pilot.utils.exit`/get_path_id().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[43,53,43,57]}},{"key":"geid_130_3897","source":"scip-python python temp indexer `pilot.utils.exit`/get_path_id().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[43,58,43,60]}},{"key":"geid_130_3898","source":"scip-python python temp indexer `pilot.utils.exit`/get_path_id().","target":"scip-python python python-stdlib 3.11 os/getcwd().","attributes":{"type":"uses","at":[43,61,43,67]}},{"key":"geid_130_3899","source":"scip-python python temp indexer `pilot.utils.exit`/get_path_id().","target":"scip-python python python-stdlib 3.11 hashlib/__init__:","attributes":{"type":"uses","at":[44,11,44,18]}},{"key":"geid_130_3900","source":"scip-python python temp indexer `pilot.utils.exit`/get_path_id().","target":"scip-python python python-stdlib 3.11 hashlib/sha256().","attributes":{"type":"uses","at":[44,19,44,25]}},{"key":"geid_130_3901","source":"scip-python python temp indexer `pilot.utils.exit`/get_path_id().","target":"scip-python python python-stdlib 3.11 hashlib/_Hash#hexdigest().","attributes":{"type":"uses","at":[44,59,44,68]}},{"key":"geid_130_3902","source":"scip-python python temp indexer `pilot.utils.exit`/ask_to_store_prompt().","target":"scip-python python temp indexer `pilot.utils.questionary`/styled_text().","attributes":{"type":"uses","at":[62,17,62,28]}},{"key":"geid_130_3903","source":"scip-python python temp indexer `pilot.utils.exit`/ask_to_store_prompt().","target":"scip-python python temp indexer `pilot.utils.telemetry`/telemetry.","attributes":{"type":"uses","at":[64,12,64,21]}},{"key":"geid_130_3904","source":"scip-python python temp indexer `pilot.utils.exit`/ask_to_store_prompt().","target":"scip-python python requests 2.31.0 requests/__init__:","attributes":{"type":"uses","at":[65,23,65,31]}},{"key":"geid_130_3905","source":"scip-python python temp indexer `pilot.utils.exit`/ask_to_store_prompt().","target":"scip-python python requests 2.31.0 `requests.api`/post().","attributes":{"type":"uses","at":[65,32,65,36]}},{"key":"geid_130_3906","source":"scip-python python temp indexer `pilot.utils.exit`/ask_to_store_prompt().","target":"scip-python python temp indexer `requests.models`/Response#raise_for_status().","attributes":{"type":"uses","at":[66,21,66,37]}},{"key":"geid_130_3907","source":"scip-python python temp indexer `pilot.utils.exit`/ask_to_store_prompt().","target":"scip-python python requests 2.31.0 requests/__init__:","attributes":{"type":"uses","at":[67,11,67,19]}},{"key":"geid_130_3908","source":"scip-python python temp indexer `pilot.utils.exit`/ask_to_store_prompt().","target":"scip-python python temp indexer `requests.exceptions`/RequestException#","attributes":{"type":"uses","at":[67,20,67,36]}},{"key":"geid_130_3909","source":"scip-python python temp indexer `pilot.utils.exit`/ask_user_feedback().","target":"scip-python python temp indexer `pilot.utils.questionary`/styled_text().","attributes":{"type":"uses","at":[75,19,75,30]}},{"key":"geid_130_3910","source":"scip-python python temp indexer `pilot.utils.exit`/ask_user_feedback().","target":"scip-python python temp indexer `pilot.utils.telemetry`/telemetry.","attributes":{"type":"uses","at":[77,8,77,17]}},{"key":"geid_130_3911","source":"scip-python python temp indexer `pilot.utils.exit`/ask_user_feedback().","target":"scip-python python temp indexer `pilot.utils.exit`/send_feedback().","attributes":{"type":"uses","at":[78,8,78,21]}},{"key":"geid_130_3912","source":"scip-python python temp indexer `pilot.utils.exit`/ask_user_email().","target":"scip-python python temp indexer `pilot.utils.questionary`/styled_text().","attributes":{"type":"uses","at":[89,15,89,26]}},{"key":"geid_130_3913","source":"scip-python python temp indexer `pilot.utils.exit`/ask_user_email().","target":"scip-python python temp indexer `pilot.utils.telemetry`/telemetry.","attributes":{"type":"uses","at":[91,8,91,17]}},{"key":"geid_130_3914","source":"scip-python python temp indexer `pilot.utils.exit`/exit_gpt_pilot().","target":"scip-python python temp indexer `pilot.helpers.cli`/terminate_running_processes().","attributes":{"type":"uses","at":[96,4,96,31]}},{"key":"geid_130_3915","source":"scip-python python temp indexer `pilot.utils.exit`/exit_gpt_pilot().","target":"scip-python python temp indexer `pilot.utils.exit`/get_path_id().","attributes":{"type":"uses","at":[97,14,97,25]}},{"key":"geid_130_3916","source":"scip-python python temp indexer `pilot.utils.exit`/exit_gpt_pilot().","target":"scip-python python temp indexer `pilot.utils.exit`/send_telemetry().","attributes":{"type":"uses","at":[99,4,99,18]}},{"key":"geid_130_3917","source":"scip-python python temp indexer `pilot.utils.exit`/exit_gpt_pilot().","target":"scip-python python temp indexer `pilot.utils.exit`/ask_to_store_prompt().","attributes":{"type":"uses","at":[101,4,101,23]}},{"key":"geid_130_3918","source":"scip-python python temp indexer `pilot.utils.exit`/exit_gpt_pilot().","target":"scip-python python temp indexer `pilot.utils.exit`/ask_user_email().","attributes":{"type":"uses","at":[103,4,103,18]}},{"key":"geid_130_3919","source":"scip-python python temp indexer `pilot.utils.exit`/exit_gpt_pilot().","target":"scip-python python temp indexer `pilot.utils.telemetry`/telemetry.","attributes":{"type":"uses","at":[109,4,109,13]}},{"key":"geid_130_3920","source":"scip-python python temp indexer `pilot.utils.exit`/exit_gpt_pilot().","target":"scip-python python temp indexer `pilot.utils.telemetry`/telemetry.","attributes":{"type":"uses","at":[110,4,110,13]}},{"key":"geid_130_3921","source":"scip-python python temp indexer `pilot.utils.exit`/exit_gpt_pilot().","target":"scip-python python temp indexer `pilot.utils.telemetry`/telemetry.","attributes":{"type":"uses","at":[112,4,112,13]}},{"key":"geid_130_3922","source":"scip-python python temp indexer `pilot.utils.exit`/exit_gpt_pilot().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#send().","attributes":{"type":"uses","at":[112,14,112,18]}},{"key":"geid_130_3923","source":"scip-python python temp indexer `pilot.utils.files`/__init__:","target":"scip-python python temp indexer `pilot.utils.files`/count_lines_of_code().","attributes":{"type":"defines","at":[45,0,46,67]}},{"key":"geid_130_3924","source":"scip-python python temp indexer `pilot.utils.files`/__init__:","target":"scip-python python temp indexer `pilot.utils.files`/create_directory().","attributes":{"type":"defines","at":[38,0,42,29]}},{"key":"geid_130_3925","source":"scip-python python temp indexer `pilot.utils.files`/__init__:","target":"scip-python python temp indexer `pilot.utils.files`/setup_workspace().","attributes":{"type":"defines","at":[14,0,35,23]}},{"key":"geid_130_3926","source":"scip-python python temp indexer `pilot.utils.files`/__init__:","target":"scip-python python temp indexer `pilot.utils.files`/get_parent_folder().","attributes":{"type":"defines","at":[5,0,11,30]}},{"key":"geid_130_3927","source":"scip-python python temp indexer `pilot.utils.files`/__init__:","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[0,7,0,9]}},{"key":"geid_130_3928","source":"scip-python python temp indexer `pilot.utils.files`/__init__:","target":"scip-python python python-stdlib 3.11 pathlib/__init__:","attributes":{"type":"uses","at":[1,5,1,12]}},{"key":"geid_130_3929","source":"scip-python python temp indexer `pilot.utils.files`/__init__:","target":"scip-python python python-stdlib 3.11 pathlib/Path#","attributes":{"type":"uses","at":[1,20,1,24]}},{"key":"geid_130_3930","source":"scip-python python temp indexer `pilot.utils.files`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/__init__:","attributes":{"type":"uses","at":[2,5,2,22]}},{"key":"geid_130_3931","source":"scip-python python temp indexer `pilot.utils.files`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/save_user_app().","attributes":{"type":"uses","at":[2,30,2,43]}},{"key":"geid_130_3932","source":"scip-python python temp indexer `pilot.utils.files`/get_parent_folder().","target":"scip-python python python-stdlib 3.11 pathlib/Path#","attributes":{"type":"uses","at":[6,19,6,23]}},{"key":"geid_130_3933","source":"scip-python python temp indexer `pilot.utils.files`/get_parent_folder().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[6,24,6,26]}},{"key":"geid_130_3934","source":"scip-python python temp indexer `pilot.utils.files`/get_parent_folder().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[6,27,6,31]}},{"key":"geid_130_3935","source":"scip-python python temp indexer `pilot.utils.files`/get_parent_folder().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[6,32,6,39]}},{"key":"geid_130_3936","source":"scip-python python temp indexer `pilot.utils.files`/get_parent_folder().","target":"scip-python python temp indexer `pilot.utils.files`/","attributes":{"type":"uses","at":[6,40,6,48]}},{"key":"geid_130_3937","source":"scip-python python temp indexer `pilot.utils.files`/get_parent_folder().","target":"scip-python python python-stdlib 3.11 pathlib/PurePath#name().","attributes":{"type":"uses","at":[8,23,8,27]}},{"key":"geid_130_3938","source":"scip-python python temp indexer `pilot.utils.files`/get_parent_folder().","target":"scip-python python python-stdlib 3.11 pathlib/PurePath#parent().","attributes":{"type":"uses","at":[9,36,9,42]}},{"key":"geid_130_3939","source":"scip-python python temp indexer `pilot.utils.files`/get_parent_folder().","target":"scip-python python python-stdlib 3.11 pathlib/PurePath#parent().","attributes":{"type":"uses","at":[11,24,11,30]}},{"key":"geid_130_3940","source":"scip-python python temp indexer `pilot.utils.files`/setup_workspace().","target":"scip-python python temp indexer `pilot.utils.files`/get_parent_folder().","attributes":{"type":"uses","at":[24,35,24,52]}},{"key":"geid_130_3941","source":"scip-python python temp indexer `pilot.utils.files`/setup_workspace().","target":"scip-python python temp indexer `pilot.utils.files`/create_directory().","attributes":{"type":"uses","at":[26,23,26,39]}},{"key":"geid_130_3942","source":"scip-python python temp indexer `pilot.utils.files`/setup_workspace().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[26,40,26,42]}},{"key":"geid_130_3943","source":"scip-python python temp indexer `pilot.utils.files`/setup_workspace().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[26,43,26,47]}},{"key":"geid_130_3944","source":"scip-python python temp indexer `pilot.utils.files`/setup_workspace().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[26,48,26,52]}},{"key":"geid_130_3945","source":"scip-python python temp indexer `pilot.utils.files`/setup_workspace().","target":"scip-python python temp indexer `pilot.utils.files`/create_directory().","attributes":{"type":"uses","at":[28,4,28,20]}},{"key":"geid_130_3946","source":"scip-python python temp indexer `pilot.utils.files`/setup_workspace().","target":"scip-python python temp indexer `pilot.database.database`/save_user_app().","attributes":{"type":"uses","at":[30,8,30,21]}},{"key":"geid_130_3947","source":"scip-python python temp indexer `pilot.utils.files`/setup_workspace().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[34,10,34,12]}},{"key":"geid_130_3948","source":"scip-python python temp indexer `pilot.utils.files`/setup_workspace().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[34,13,34,17]}},{"key":"geid_130_3949","source":"scip-python python temp indexer `pilot.utils.files`/setup_workspace().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[34,18,34,26]}},{"key":"geid_130_3950","source":"scip-python python temp indexer `pilot.utils.files`/create_directory().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[39,25,39,27]}},{"key":"geid_130_3951","source":"scip-python python temp indexer `pilot.utils.files`/create_directory().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[39,28,39,32]}},{"key":"geid_130_3952","source":"scip-python python temp indexer `pilot.utils.files`/create_directory().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[39,33,39,37]}},{"key":"geid_130_3953","source":"scip-python python temp indexer `pilot.utils.files`/create_directory().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[40,4,40,6]}},{"key":"geid_130_3954","source":"scip-python python temp indexer `pilot.utils.files`/create_directory().","target":"scip-python python python-stdlib 3.11 os/makedirs().","attributes":{"type":"uses","at":[40,7,40,15]}},{"key":"geid_130_3955","source":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#","target":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#prompt().","attributes":{"type":"defines","at":[166,4,199,52]}},{"key":"geid_130_3956","source":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#","target":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#functions_summary().","attributes":{"type":"defines","at":[153,4,164,9]}},{"key":"geid_130_3957","source":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#","target":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#function_summary().","attributes":{"type":"defines","at":[140,4,151,9]}},{"key":"geid_130_3958","source":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#","target":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#function_data().","attributes":{"type":"defines","at":[119,4,138,9]}},{"key":"geid_130_3959","source":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#","target":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#function_parameters().","attributes":{"type":"defines","at":[101,4,117,9]}},{"key":"geid_130_3960","source":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#","target":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#function_descriptions().","attributes":{"type":"defines","at":[82,4,99,9]}},{"key":"geid_130_3961","source":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#","target":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#__init__().","attributes":{"type":"defines","at":[79,4,80,38]}},{"key":"geid_130_3962","source":"scip-python python temp indexer `pilot.utils.function_calling`/__init__:","target":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#","attributes":{"type":"defines","at":[75,0,199,52]}},{"key":"geid_130_3963","source":"scip-python python temp indexer `pilot.utils.function_calling`/__init__:","target":"scip-python python temp indexer `pilot.utils.function_calling`/parse_agent_response().","attributes":{"type":"defines","at":[58,0,72,27]}},{"key":"geid_130_3964","source":"scip-python python temp indexer `pilot.utils.function_calling`/__init__:","target":"scip-python python temp indexer `pilot.utils.function_calling`/add_function_calls_to_request().","attributes":{"type":"defines","at":[36,0,55,6]}},{"key":"geid_130_3965","source":"scip-python python temp indexer `pilot.utils.function_calling`/__init__:","target":"scip-python python temp indexer `pilot.utils.function_calling`/FunctionCallSet#","attributes":{"type":"defines","at":[31,0,33,34]}},{"key":"geid_130_3966","source":"scip-python python temp indexer `pilot.utils.function_calling`/__init__:","target":"scip-python python temp indexer `pilot.utils.function_calling`/FunctionCall#","attributes":{"type":"defines","at":[24,0,28,19]}},{"key":"geid_130_3967","source":"scip-python python temp indexer `pilot.utils.function_calling`/__init__:","target":"scip-python python temp indexer `pilot.utils.function_calling`/FunctionType#","attributes":{"type":"defines","at":[16,0,21,34]}},{"key":"geid_130_3968","source":"scip-python python temp indexer `pilot.utils.function_calling`/__init__:","target":"scip-python python temp indexer `pilot.utils.function_calling`/FunctionParameters#","attributes":{"type":"defines","at":[8,0,13,33]}},{"key":"geid_130_3969","source":"scip-python python temp indexer `pilot.utils.function_calling`/__init__:","target":"scip-python python python-stdlib 3.11 json/__init__:","attributes":{"type":"uses","at":[0,7,0,11]}},{"key":"geid_130_3970","source":"scip-python python temp indexer `pilot.utils.function_calling`/__init__:","target":"scip-python python python-stdlib 3.11 re/__init__:","attributes":{"type":"uses","at":[1,7,1,9]}},{"key":"geid_130_3971","source":"scip-python python temp indexer `pilot.utils.function_calling`/__init__:","target":"scip-python python python-stdlib 3.11 typing/__init__:","attributes":{"type":"uses","at":[2,5,2,11]}},{"key":"geid_130_3972","source":"scip-python python temp indexer `pilot.utils.function_calling`/__init__:","target":"scip-python python python-stdlib 3.11 typing/Union.","attributes":{"type":"uses","at":[2,19,2,24]}},{"key":"geid_130_3973","source":"scip-python python temp indexer `pilot.utils.function_calling`/__init__:","target":"scip-python python python-stdlib 3.11 typing/TypeVar#","attributes":{"type":"uses","at":[2,26,2,33]}},{"key":"geid_130_3974","source":"scip-python python temp indexer `pilot.utils.function_calling`/__init__:","target":"scip-python python python-stdlib 3.11 typing/List.","attributes":{"type":"uses","at":[2,35,2,39]}},{"key":"geid_130_3975","source":"scip-python python temp indexer `pilot.utils.function_calling`/__init__:","target":"scip-python python python-stdlib 3.11 typing/Dict.","attributes":{"type":"uses","at":[2,41,2,45]}},{"key":"geid_130_3976","source":"scip-python python temp indexer `pilot.utils.function_calling`/__init__:","target":"scip-python python python-stdlib 3.11 typing/Literal.","attributes":{"type":"uses","at":[2,47,2,54]}},{"key":"geid_130_3977","source":"scip-python python temp indexer `pilot.utils.function_calling`/__init__:","target":"scip-python python python-stdlib 3.11 typing/Optional.","attributes":{"type":"uses","at":[2,56,2,64]}},{"key":"geid_130_3978","source":"scip-python python temp indexer `pilot.utils.function_calling`/__init__:","target":"scip-python python python-stdlib 3.11 typing/TypedDict.","attributes":{"type":"uses","at":[2,66,2,75]}},{"key":"geid_130_3979","source":"scip-python python temp indexer `pilot.utils.function_calling`/__init__:","target":"scip-python python python-stdlib 3.11 typing/Callable.","attributes":{"type":"uses","at":[2,77,2,85]}},{"key":"geid_130_3980","source":"scip-python python temp indexer `pilot.utils.function_calling`/__init__:","target":"scip-python python python-stdlib 3.11 typing/Union.","attributes":{"type":"uses","at":[4,15,4,20]}},{"key":"geid_130_3981","source":"scip-python python temp indexer `pilot.utils.function_calling`/__init__:","target":"scip-python python python-stdlib 3.11 typing/List.","attributes":{"type":"uses","at":[4,50,4,54]}},{"key":"geid_130_3982","source":"scip-python python temp indexer `pilot.utils.function_calling`/__init__:","target":"scip-python python python-stdlib 3.11 typing/Dict.","attributes":{"type":"uses","at":[4,68,4,72]}},{"key":"geid_130_3983","source":"scip-python python temp indexer `pilot.utils.function_calling`/__init__:","target":"scip-python python python-stdlib 3.11 typing/TypeVar#","attributes":{"type":"uses","at":[5,11,5,18]}},{"key":"geid_130_3984","source":"scip-python python temp indexer `pilot.utils.function_calling`/__init__:","target":"scip-python python temp indexer `pilot.utils.function_calling`/JsonTypeBase.","attributes":{"type":"uses","at":[5,37,5,49]}},{"key":"geid_130_3985","source":"scip-python python temp indexer `pilot.utils.function_calling`/FunctionParameters#","target":"scip-python python python-stdlib 3.11 typing/TypedDict.","attributes":{"type":"uses","at":[8,25,8,34]}},{"key":"geid_130_3986","source":"scip-python python temp indexer `pilot.utils.function_calling`/FunctionParameters#","target":"scip-python python python-stdlib 3.11 typing/Literal.","attributes":{"type":"uses","at":[11,10,11,17]}},{"key":"geid_130_3987","source":"scip-python python temp indexer `pilot.utils.function_calling`/FunctionParameters#","target":"scip-python python temp indexer `pilot.utils.function_calling`/JsonType.","attributes":{"type":"uses","at":[12,26,12,34]}},{"key":"geid_130_3988","source":"scip-python python temp indexer `pilot.utils.function_calling`/FunctionParameters#","target":"scip-python python python-stdlib 3.11 typing/Optional.","attributes":{"type":"uses","at":[13,14,13,22]}},{"key":"geid_130_3989","source":"scip-python python temp indexer `pilot.utils.function_calling`/FunctionType#","target":"scip-python python python-stdlib 3.11 typing/TypedDict.","attributes":{"type":"uses","at":[16,19,16,28]}},{"key":"geid_130_3990","source":"scip-python python temp indexer `pilot.utils.function_calling`/FunctionType#","target":"scip-python python python-stdlib 3.11 typing/Optional.","attributes":{"type":"uses","at":[20,17,20,25]}},{"key":"geid_130_3991","source":"scip-python python temp indexer `pilot.utils.function_calling`/FunctionType#","target":"scip-python python temp indexer `pilot.utils.function_calling`/FunctionParameters#","attributes":{"type":"uses","at":[21,16,21,34]}},{"key":"geid_130_3992","source":"scip-python python temp indexer `pilot.utils.function_calling`/FunctionCall#","target":"scip-python python python-stdlib 3.11 typing/TypedDict.","attributes":{"type":"uses","at":[24,19,24,28]}},{"key":"geid_130_3993","source":"scip-python python temp indexer `pilot.utils.function_calling`/FunctionCallSet#","target":"scip-python python python-stdlib 3.11 typing/TypedDict.","attributes":{"type":"uses","at":[31,22,31,31]}},{"key":"geid_130_3994","source":"scip-python python temp indexer `pilot.utils.function_calling`/FunctionCallSet#","target":"scip-python python temp indexer `pilot.utils.function_calling`/FunctionType#","attributes":{"type":"uses","at":[32,22,32,34]}},{"key":"geid_130_3995","source":"scip-python python temp indexer `pilot.utils.function_calling`/FunctionCallSet#","target":"scip-python python python-stdlib 3.11 typing/Callable.","attributes":{"type":"uses","at":[33,25,33,33]}},{"key":"geid_130_3996","source":"scip-python python temp indexer `pilot.utils.function_calling`/add_function_calls_to_request().","target":"scip-python python python-stdlib 3.11 typing/Union.","attributes":{"type":"uses","at":[36,60,36,65]}},{"key":"geid_130_3997","source":"scip-python python temp indexer `pilot.utils.function_calling`/add_function_calls_to_request().","target":"scip-python python temp indexer `pilot.utils.function_calling`/FunctionCallSet#","attributes":{"type":"uses","at":[36,66,36,81]}},{"key":"geid_130_3998","source":"scip-python python temp indexer `pilot.utils.function_calling`/add_function_calls_to_request().","target":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#","attributes":{"type":"uses","at":[45,15,45,27]}},{"key":"geid_130_3999","source":"scip-python python temp indexer `pilot.utils.function_calling`/add_function_calls_to_request().","target":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#prompt().","attributes":{"type":"uses","at":[54,28,54,34]}},{"key":"geid_130_4000","source":"scip-python python temp indexer `pilot.utils.function_calling`/parse_agent_response().","target":"scip-python python python-stdlib 3.11 typing/Union.","attributes":{"type":"uses","at":[58,51,58,56]}},{"key":"geid_130_4001","source":"scip-python python temp indexer `pilot.utils.function_calling`/parse_agent_response().","target":"scip-python python temp indexer `pilot.utils.function_calling`/FunctionCallSet#","attributes":{"type":"uses","at":[58,57,58,72]}},{"key":"geid_130_4002","source":"scip-python python temp indexer `pilot.utils.function_calling`/parse_agent_response().","target":"scip-python python python-stdlib 3.11 json/__init__:","attributes":{"type":"uses","at":[70,15,70,19]}},{"key":"geid_130_4003","source":"scip-python python temp indexer `pilot.utils.function_calling`/parse_agent_response().","target":"scip-python python python-stdlib 3.11 json/loads().","attributes":{"type":"uses","at":[70,20,70,25]}},{"key":"geid_130_4004","source":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#function_descriptions().","target":"scip-python python temp indexer `pilot.utils.function_calling`/FunctionType#","attributes":{"type":"uses","at":[83,30,83,42]}},{"key":"geid_130_4005","source":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#function_parameters().","target":"scip-python python temp indexer `pilot.utils.function_calling`/FunctionType#","attributes":{"type":"uses","at":[102,30,102,42]}},{"key":"geid_130_4006","source":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#function_parameters().","target":"scip-python python python-stdlib 3.11 json/__init__:","attributes":{"type":"uses","at":[114,12,114,16]}},{"key":"geid_130_4007","source":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#function_parameters().","target":"scip-python python python-stdlib 3.11 json/dumps().","attributes":{"type":"uses","at":[114,17,114,22]}},{"key":"geid_130_4008","source":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#function_data().","target":"scip-python python temp indexer `pilot.utils.function_calling`/FunctionType#","attributes":{"type":"uses","at":[120,30,120,42]}},{"key":"geid_130_4009","source":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#function_data().","target":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#function_parameters().","attributes":{"type":"uses","at":[135,21,135,40]}},{"key":"geid_130_4010","source":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#function_summary().","target":"scip-python python temp indexer `pilot.utils.function_calling`/FunctionType#","attributes":{"type":"uses","at":[140,41,140,53]}},{"key":"geid_130_4011","source":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#functions_summary().","target":"scip-python python temp indexer `pilot.utils.function_calling`/FunctionType#","attributes":{"type":"uses","at":[153,48,153,60]}},{"key":"geid_130_4012","source":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#functions_summary().","target":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#function_summary().","attributes":{"type":"uses","at":[163,17,163,33]}},{"key":"geid_130_4013","source":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#prompt().","target":"scip-python python temp indexer `pilot.utils.function_calling`/FunctionType#","attributes":{"type":"uses","at":[169,24,169,36]}},{"key":"geid_130_4014","source":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#prompt().","target":"scip-python python python-stdlib 3.11 typing/Union.","attributes":{"type":"uses","at":[170,26,170,31]}},{"key":"geid_130_4015","source":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#prompt().","target":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#function_data().","attributes":{"type":"uses","at":[191,17,191,30]}},{"key":"geid_130_4016","source":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#prompt().","target":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#functions_summary().","attributes":{"type":"uses","at":[193,22,193,39]}},{"key":"geid_130_4017","source":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#prompt().","target":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#is_instruct.","attributes":{"type":"uses","at":[196,16,196,27]}},{"key":"geid_130_4018","source":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.utils.llm_connection`/load_data_to_json().","attributes":{"type":"defines","at":[472,0,473,39]}},{"key":"geid_130_4019","source":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.utils.llm_connection`/postprocessing().","attributes":{"type":"defines","at":[468,0,469,23]}},{"key":"geid_130_4020","source":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.utils.llm_connection`/assert_json_schema().","attributes":{"type":"defines","at":[460,0,465,19]}},{"key":"geid_130_4021","source":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.utils.llm_connection`/clean_json_response().","attributes":{"type":"defines","at":[453,0,457,33]}},{"key":"geid_130_4022","source":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.utils.llm_connection`/assert_json_response().","attributes":{"type":"defines","at":[443,0,450,20]}},{"key":"geid_130_4023","source":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.utils.llm_connection`/get_api_key_or_throw().","attributes":{"type":"defines","at":[436,0,440,18]}},{"key":"geid_130_4024","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().return_result().","attributes":{"type":"defines","at":[292,4,298,26]}},{"key":"geid_130_4025","source":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","attributes":{"type":"defines","at":[257,0,433,59]}},{"key":"geid_130_4026","source":"scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().","target":"scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().wrapper().","attributes":{"type":"defines","at":[165,4,252,29]}},{"key":"geid_130_4027","source":"scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().","target":"scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().set_function_error().","attributes":{"type":"defines","at":[158,4,163,42]}},{"key":"geid_130_4028","source":"scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().","target":"scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().update_error_count().","attributes":{"type":"defines","at":[153,4,156,35]}},{"key":"geid_130_4029","source":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().","attributes":{"type":"defines","at":[152,0,254,18]}},{"key":"geid_130_4030","source":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.utils.llm_connection`/get_tokens_in_messages_from_openai_error().","attributes":{"type":"defines","at":[133,0,149,19]}},{"key":"geid_130_4031","source":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.utils.llm_connection`/count_lines_based_on_width().","attributes":{"type":"defines","at":[128,0,130,25]}},{"key":"geid_130_4032","source":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.utils.llm_connection`/delete_last_n_lines().","attributes":{"type":"defines","at":[120,0,125,34]}},{"key":"geid_130_4033","source":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.utils.llm_connection`/create_gpt_chat_completion().","attributes":{"type":"defines","at":[63,0,117,17]}},{"key":"geid_130_4034","source":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.utils.llm_connection`/num_tokens_from_functions().","attributes":{"type":"defines","at":[28,0,60,21]}},{"key":"geid_130_4035","source":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.utils.llm_connection`/get_tokens_in_messages().","attributes":{"type":"defines","at":[22,0,25,60]}},{"key":"geid_130_4036","source":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","target":"scip-python python python-stdlib 3.11 re/__init__:","attributes":{"type":"uses","at":[0,7,0,9]}},{"key":"geid_130_4037","source":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","target":"scip-python python requests 2.31.0 requests/__init__:","attributes":{"type":"uses","at":[1,7,1,15]}},{"key":"geid_130_4038","source":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[2,7,2,9]}},{"key":"geid_130_4039","source":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","target":"scip-python python python-stdlib 3.11 sys/__init__:","attributes":{"type":"uses","at":[3,7,3,10]}},{"key":"geid_130_4040","source":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","target":"scip-python python python-stdlib 3.11 time/__init__:","attributes":{"type":"uses","at":[4,7,4,11]}},{"key":"geid_130_4041","source":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","target":"scip-python python python-stdlib 3.11 json/__init__:","attributes":{"type":"uses","at":[5,7,5,11]}},{"key":"geid_130_4042","source":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","target":"scip-python python prompt-toolkit 3.0.39 `prompt_toolkit.styles`/__init__:","attributes":{"type":"uses","at":[7,5,7,26]}},{"key":"geid_130_4043","source":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","target":"scip-python python prompt-toolkit 3.0.39 `prompt_toolkit.styles.style`/Style#","attributes":{"type":"uses","at":[7,34,7,39]}},{"key":"geid_130_4044","source":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","target":"scip-python python temp indexer jsonschema/__init__:","attributes":{"type":"uses","at":[9,5,9,15]}},{"key":"geid_130_4045","source":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/__init__:","attributes":{"type":"uses","at":[10,5,10,16]}},{"key":"geid_130_4046","source":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/color_red.","attributes":{"type":"uses","at":[10,24,10,33]}},{"key":"geid_130_4047","source":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","target":"scip-python python python-stdlib 3.11 typing/__init__:","attributes":{"type":"uses","at":[11,5,11,11]}},{"key":"geid_130_4048","source":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","target":"scip-python python python-stdlib 3.11 typing/List.","attributes":{"type":"uses","at":[11,19,11,23]}},{"key":"geid_130_4049","source":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.const.llm`/__init__:","attributes":{"type":"uses","at":[12,5,12,14]}},{"key":"geid_130_4050","source":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.const.llm`/MAX_GPT_MODEL_TOKENS.","attributes":{"type":"uses","at":[12,22,12,42]}},{"key":"geid_130_4051","source":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.const.messages`/__init__:","attributes":{"type":"uses","at":[13,5,13,19]}},{"key":"geid_130_4052","source":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.const.messages`/AFFIRMATIVE_ANSWERS.","attributes":{"type":"uses","at":[13,27,13,46]}},{"key":"geid_130_4053","source":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.logger.logger`/__init__:","attributes":{"type":"uses","at":[14,5,14,18]}},{"key":"geid_130_4054","source":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[14,26,14,32]}},{"key":"geid_130_4055","source":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","target":"scip-python python python-stdlib 3.11 logging/__init__:","attributes":{"type":"uses","at":[14,34,14,41]}},{"key":"geid_130_4056","source":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.helpers.exceptions`/__init__:","attributes":{"type":"uses","at":[15,5,15,23]}},{"key":"geid_130_4057","source":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.helpers.exceptions.tokenlimiterror`/TokenLimitError#","attributes":{"type":"uses","at":[15,31,15,46]}},{"key":"geid_130_4058","source":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.helpers.exceptions.apikeynotdefinederror`/ApiKeyNotDefinedError#","attributes":{"type":"uses","at":[15,48,15,69]}},{"key":"geid_130_4059","source":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/__init__:","attributes":{"type":"uses","at":[16,5,16,16]}},{"key":"geid_130_4060","source":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/fix_json().","attributes":{"type":"uses","at":[16,24,16,32]}},{"key":"geid_130_4061","source":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/get_prompt().","attributes":{"type":"uses","at":[16,34,16,44]}},{"key":"geid_130_4062","source":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.utils.function_calling`/__init__:","attributes":{"type":"uses","at":[17,5,17,27]}},{"key":"geid_130_4063","source":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.utils.function_calling`/add_function_calls_to_request().","attributes":{"type":"uses","at":[17,35,17,64]}},{"key":"geid_130_4064","source":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.utils.function_calling`/FunctionCallSet#","attributes":{"type":"uses","at":[17,66,17,81]}},{"key":"geid_130_4065","source":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.utils.function_calling`/FunctionType#","attributes":{"type":"uses","at":[17,83,17,95]}},{"key":"geid_130_4066","source":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.utils.questionary`/__init__:","attributes":{"type":"uses","at":[18,5,18,22]}},{"key":"geid_130_4067","source":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.utils.questionary`/styled_text().","attributes":{"type":"uses","at":[18,30,18,41]}},{"key":"geid_130_4068","source":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.utils.telemetry`/__init__:","attributes":{"type":"uses","at":[20,5,20,15]}},{"key":"geid_130_4069","source":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.utils.telemetry`/telemetry.","attributes":{"type":"uses","at":[20,23,20,32]}},{"key":"geid_130_4070","source":"scip-python python temp indexer `pilot.utils.llm_connection`/get_tokens_in_messages().","target":"scip-python python python-stdlib 3.11 typing/List.","attributes":{"type":"uses","at":[22,37,22,41]}},{"key":"geid_130_4071","source":"scip-python python temp indexer `pilot.utils.llm_connection`/create_gpt_chat_completion().","target":"scip-python python python-stdlib 3.11 typing/List.","attributes":{"type":"uses","at":[63,41,63,45]}},{"key":"geid_130_4072","source":"scip-python python temp indexer `pilot.utils.llm_connection`/create_gpt_chat_completion().","target":"scip-python python temp indexer `pilot.utils.function_calling`/FunctionCallSet#","attributes":{"type":"uses","at":[64,47,64,62]}},{"key":"geid_130_4073","source":"scip-python python temp indexer `pilot.utils.llm_connection`/create_gpt_chat_completion().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[83,17,83,19]}},{"key":"geid_130_4074","source":"scip-python python temp indexer `pilot.utils.llm_connection`/create_gpt_chat_completion().","target":"scip-python python python-stdlib 3.11 os/getenv().","attributes":{"type":"uses","at":[83,20,83,26]}},{"key":"geid_130_4075","source":"scip-python python temp indexer `pilot.utils.llm_connection`/create_gpt_chat_completion().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[94,7,94,9]}},{"key":"geid_130_4076","source":"scip-python python temp indexer `pilot.utils.llm_connection`/create_gpt_chat_completion().","target":"scip-python python python-stdlib 3.11 os/getenv().","attributes":{"type":"uses","at":[94,10,94,16]}},{"key":"geid_130_4077","source":"scip-python python temp indexer `pilot.utils.llm_connection`/create_gpt_chat_completion().","target":"scip-python python temp indexer `pilot.utils.function_calling`/add_function_calls_to_request().","attributes":{"type":"uses","at":[102,4,102,33]}},{"key":"geid_130_4078","source":"scip-python python temp indexer `pilot.utils.llm_connection`/create_gpt_chat_completion().","target":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","attributes":{"type":"uses","at":[105,19,105,40]}},{"key":"geid_130_4079","source":"scip-python python temp indexer `pilot.utils.llm_connection`/create_gpt_chat_completion().","target":"scip-python python temp indexer `pilot.helpers.exceptions.tokenlimiterror`/TokenLimitError#","attributes":{"type":"uses","at":[111,11,111,26]}},{"key":"geid_130_4080","source":"scip-python python temp indexer `pilot.utils.llm_connection`/create_gpt_chat_completion().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[114,8,114,14]}},{"key":"geid_130_4081","source":"scip-python python temp indexer `pilot.utils.llm_connection`/create_gpt_chat_completion().","target":"scip-python python python-stdlib 3.11 logging/Logger#error().","attributes":{"type":"uses","at":[114,15,114,20]}},{"key":"geid_130_4082","source":"scip-python python temp indexer `pilot.utils.llm_connection`/create_gpt_chat_completion().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[114,39,114,41]}},{"key":"geid_130_4083","source":"scip-python python temp indexer `pilot.utils.llm_connection`/create_gpt_chat_completion().","target":"scip-python python python-stdlib 3.11 os/getenv().","attributes":{"type":"uses","at":[114,42,114,48]}},{"key":"geid_130_4084","source":"scip-python python temp indexer `pilot.utils.llm_connection`/create_gpt_chat_completion().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[115,32,115,34]}},{"key":"geid_130_4085","source":"scip-python python temp indexer `pilot.utils.llm_connection`/create_gpt_chat_completion().","target":"scip-python python python-stdlib 3.11 os/getenv().","attributes":{"type":"uses","at":[115,35,115,41]}},{"key":"geid_130_4086","source":"scip-python python temp indexer `pilot.utils.llm_connection`/delete_last_n_lines().","target":"scip-python python python-stdlib 3.11 sys/__init__:","attributes":{"type":"uses","at":[123,8,123,11]}},{"key":"geid_130_4087","source":"scip-python python temp indexer `pilot.utils.llm_connection`/delete_last_n_lines().","target":"scip-python python python-stdlib 3.11 sys/stdout.stdout.","attributes":{"type":"uses","at":[123,12,123,18]}},{"key":"geid_130_4088","source":"scip-python python temp indexer `pilot.utils.llm_connection`/delete_last_n_lines().","target":"scip-python python python-stdlib 3.11 typing/IO#write().","attributes":{"type":"uses","at":[123,19,123,24]}},{"key":"geid_130_4089","source":"scip-python python temp indexer `pilot.utils.llm_connection`/delete_last_n_lines().","target":"scip-python python python-stdlib 3.11 sys/__init__:","attributes":{"type":"uses","at":[125,8,125,11]}},{"key":"geid_130_4090","source":"scip-python python temp indexer `pilot.utils.llm_connection`/delete_last_n_lines().","target":"scip-python python python-stdlib 3.11 sys/stdout.stdout.","attributes":{"type":"uses","at":[125,12,125,18]}},{"key":"geid_130_4091","source":"scip-python python temp indexer `pilot.utils.llm_connection`/delete_last_n_lines().","target":"scip-python python python-stdlib 3.11 typing/IO#write().","attributes":{"type":"uses","at":[125,19,125,24]}},{"key":"geid_130_4092","source":"scip-python python temp indexer `pilot.utils.llm_connection`/get_tokens_in_messages_from_openai_error().","target":"scip-python python python-stdlib 3.11 re/__init__:","attributes":{"type":"uses","at":[144,12,144,14]}},{"key":"geid_130_4093","source":"scip-python python temp indexer `pilot.utils.llm_connection`/get_tokens_in_messages_from_openai_error().","target":"scip-python python python-stdlib 3.11 re/search().","attributes":{"type":"uses","at":[144,15,144,21]}},{"key":"geid_130_4094","source":"scip-python python temp indexer `pilot.utils.llm_connection`/get_tokens_in_messages_from_openai_error().","target":"scip-python python python-stdlib 3.11 re/Match#group().","attributes":{"type":"uses","at":[147,25,147,30]}},{"key":"geid_130_4095","source":"scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().set_function_error().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[159,8,159,14]}},{"key":"geid_130_4096","source":"scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().set_function_error().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[159,15,159,19]}},{"key":"geid_130_4097","source":"scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().wrapper().","target":"scip-python python python-stdlib 3.11 json/__init__:","attributes":{"type":"uses","at":[176,33,176,37]}},{"key":"geid_130_4098","source":"scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().wrapper().","target":"scip-python python temp indexer `json.decoder`/JSONDecodeError#","attributes":{"type":"uses","at":[176,38,176,53]}},{"key":"geid_130_4099","source":"scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().wrapper().","target":"scip-python python python-stdlib 3.11 re/__init__:","attributes":{"type":"uses","at":[186,38,186,40]}},{"key":"geid_130_4100","source":"scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().wrapper().","target":"scip-python python python-stdlib 3.11 re/split().","attributes":{"type":"uses","at":[186,41,186,46]}},{"key":"geid_130_4101","source":"scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().wrapper().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[190,28,190,34]}},{"key":"geid_130_4102","source":"scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().wrapper().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[190,35,190,39]}},{"key":"geid_130_4103","source":"scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().wrapper().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[200,20,200,26]}},{"key":"geid_130_4104","source":"scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().wrapper().","target":"scip-python python python-stdlib 3.11 logging/Logger#warning().","attributes":{"type":"uses","at":[200,27,200,34]}},{"key":"geid_130_4105","source":"scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().wrapper().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[201,20,201,26]}},{"key":"geid_130_4106","source":"scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().wrapper().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[201,27,201,31]}},{"key":"geid_130_4107","source":"scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().wrapper().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[207,20,207,26]}},{"key":"geid_130_4108","source":"scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().wrapper().","target":"scip-python python python-stdlib 3.11 logging/Logger#warning().","attributes":{"type":"uses","at":[207,27,207,34]}},{"key":"geid_130_4109","source":"scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().wrapper().","target":"scip-python python temp indexer `pilot.helpers.exceptions.tokenlimiterror`/TokenLimitError#","attributes":{"type":"uses","at":[218,26,218,41]}},{"key":"geid_130_4110","source":"scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().wrapper().","target":"scip-python python temp indexer `pilot.utils.llm_connection`/get_tokens_in_messages_from_openai_error().","attributes":{"type":"uses","at":[218,42,218,82]}},{"key":"geid_130_4111","source":"scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().wrapper().","target":"scip-python python temp indexer `pilot.const.llm`/MAX_GPT_MODEL_TOKENS.","attributes":{"type":"uses","at":[218,93,218,113]}},{"key":"geid_130_4112","source":"scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().wrapper().","target":"scip-python python python-stdlib 3.11 re/__init__:","attributes":{"type":"uses","at":[221,28,221,30]}},{"key":"geid_130_4113","source":"scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().wrapper().","target":"scip-python python python-stdlib 3.11 re/search().","attributes":{"type":"uses","at":[221,31,221,37]}},{"key":"geid_130_4114","source":"scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().wrapper().","target":"scip-python python python-stdlib 3.11 re/Match#group().","attributes":{"type":"uses","at":[225,57,225,62]}},{"key":"geid_130_4115","source":"scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().wrapper().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[229,24,229,30]}},{"key":"geid_130_4116","source":"scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().wrapper().","target":"scip-python python python-stdlib 3.11 logging/Logger#debug().","attributes":{"type":"uses","at":[229,31,229,36]}},{"key":"geid_130_4117","source":"scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().wrapper().","target":"scip-python python python-stdlib 3.11 time/__init__:","attributes":{"type":"uses","at":[230,24,230,28]}},{"key":"geid_130_4118","source":"scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().wrapper().","target":"scip-python python python-stdlib 3.11 time/sleep().","attributes":{"type":"uses","at":[230,29,230,34]}},{"key":"geid_130_4119","source":"scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().wrapper().","target":"scip-python python temp indexer `pilot.utils.style`/color_red.","attributes":{"type":"uses","at":[233,22,233,31]}},{"key":"geid_130_4120","source":"scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().wrapper().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[236,16,236,22]}},{"key":"geid_130_4121","source":"scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().wrapper().","target":"scip-python python python-stdlib 3.11 logging/Logger#error().","attributes":{"type":"uses","at":[236,23,236,28]}},{"key":"geid_130_4122","source":"scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().wrapper().","target":"scip-python python temp indexer `pilot.utils.questionary`/styled_text().","attributes":{"type":"uses","at":[240,31,240,42]}},{"key":"geid_130_4123","source":"scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().wrapper().","target":"scip-python python prompt-toolkit 3.0.39 `prompt_toolkit.styles.style`/Style#","attributes":{"type":"uses","at":[243,26,243,31]}},{"key":"geid_130_4124","source":"scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().wrapper().","target":"scip-python python prompt-toolkit 3.0.39 `prompt_toolkit.styles.style`/Style#from_dict().","attributes":{"type":"uses","at":[243,32,243,41]}},{"key":"geid_130_4125","source":"scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().wrapper().","target":"scip-python python temp indexer `pilot.const.messages`/AFFIRMATIVE_ANSWERS.","attributes":{"type":"uses","at":[251,47,251,66]}},{"key":"geid_130_4126","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().","attributes":{"type":"uses","at":[257,1,257,19]}},{"key":"geid_130_4127","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[268,25,268,27]}},{"key":"geid_130_4128","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python python-stdlib 3.11 os/get_terminal_size().","attributes":{"type":"uses","at":[268,28,268,45]}},{"key":"geid_130_4129","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python python-stdlib 3.11 os/terminal_size#columns().","attributes":{"type":"uses","at":[268,48,268,55]}},{"key":"geid_130_4130","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python temp indexer `pilot.utils.utils`/get_prompt().","attributes":{"type":"uses","at":[280,30,280,40]}},{"key":"geid_130_4131","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python temp indexer `pilot.utils.utils`/get_prompt().","attributes":{"type":"uses","at":[285,27,285,37]}},{"key":"geid_130_4132","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().return_result().","target":"scip-python python temp indexer `pilot.utils.llm_connection`/count_lines_based_on_width().","attributes":{"type":"uses","at":[294,29,294,55]}},{"key":"geid_130_4133","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().return_result().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[295,8,295,14]}},{"key":"geid_130_4134","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().return_result().","target":"scip-python python python-stdlib 3.11 logging/Logger#debug().","attributes":{"type":"uses","at":[295,15,295,20]}},{"key":"geid_130_4135","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[304,12,304,14]}},{"key":"geid_130_4136","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python python-stdlib 3.11 os/getenv().","attributes":{"type":"uses","at":[304,15,304,21]}},{"key":"geid_130_4137","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[305,15,305,17]}},{"key":"geid_130_4138","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python python-stdlib 3.11 os/getenv().","attributes":{"type":"uses","at":[305,18,305,24]}},{"key":"geid_130_4139","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python temp indexer `pilot.utils.telemetry`/telemetry.","attributes":{"type":"uses","at":[308,4,308,13]}},{"key":"geid_130_4140","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python temp indexer `pilot.utils.telemetry`/telemetry.","attributes":{"type":"uses","at":[309,4,309,13]}},{"key":"geid_130_4141","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#inc().","attributes":{"type":"uses","at":[309,14,309,17]}},{"key":"geid_130_4142","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[311,4,311,10]}},{"key":"geid_130_4143","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[311,11,311,15]}},{"key":"geid_130_4144","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[312,7,312,13]}},{"key":"geid_130_4145","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python python-stdlib 3.11 logging/Logger#isEnabledFor().","attributes":{"type":"uses","at":[312,14,312,26]}},{"key":"geid_130_4146","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python python-stdlib 3.11 logging/__init__:","attributes":{"type":"uses","at":[312,27,312,34]}},{"key":"geid_130_4147","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python python-stdlib 3.11 logging/DEBUG.DEBUG.","attributes":{"type":"uses","at":[312,35,312,40]}},{"key":"geid_130_4148","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[313,8,313,14]}},{"key":"geid_130_4149","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python python-stdlib 3.11 logging/Logger#debug().","attributes":{"type":"uses","at":[313,15,313,20]}},{"key":"geid_130_4150","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[317,23,317,25]}},{"key":"geid_130_4151","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python python-stdlib 3.11 os/getenv().","attributes":{"type":"uses","at":[317,26,317,32]}},{"key":"geid_130_4152","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python temp indexer `pilot.utils.llm_connection`/get_api_key_or_throw().","attributes":{"type":"uses","at":[320,23,320,43]}},{"key":"geid_130_4153","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[324,23,324,25]}},{"key":"geid_130_4154","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python python-stdlib 3.11 os/getenv().","attributes":{"type":"uses","at":[324,26,324,32]}},{"key":"geid_130_4155","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python temp indexer `pilot.utils.llm_connection`/get_api_key_or_throw().","attributes":{"type":"uses","at":[327,41,327,61]}},{"key":"geid_130_4156","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python temp indexer `pilot.const.llm`/MAX_GPT_MODEL_TOKENS.","attributes":{"type":"uses","at":[331,29,331,49]}},{"key":"geid_130_4157","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[335,23,335,25]}},{"key":"geid_130_4158","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python python-stdlib 3.11 os/getenv().","attributes":{"type":"uses","at":[335,26,335,32]}},{"key":"geid_130_4159","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python temp indexer `pilot.utils.llm_connection`/get_api_key_or_throw().","attributes":{"type":"uses","at":[338,41,338,61]}},{"key":"geid_130_4160","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python requests 2.31.0 requests/__init__:","attributes":{"type":"uses","at":[342,15,342,23]}},{"key":"geid_130_4161","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python requests 2.31.0 `requests.api`/post().","attributes":{"type":"uses","at":[342,24,342,28]}},{"key":"geid_130_4162","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python temp indexer `requests.models`/Response#status_code.","attributes":{"type":"uses","at":[349,16,349,27]}},{"key":"geid_130_4163","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python temp indexer `requests.models`/Response#text().","attributes":{"type":"uses","at":[350,104,350,108]}},{"key":"geid_130_4164","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[351,8,351,14]}},{"key":"geid_130_4165","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[351,15,351,19]}},{"key":"geid_130_4166","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python temp indexer `requests.models`/Response#status_code.","attributes":{"type":"uses","at":[351,61,351,72]}},{"key":"geid_130_4167","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python temp indexer `requests.models`/Response#text().","attributes":{"type":"uses","at":[351,86,351,90]}},{"key":"geid_130_4168","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python temp indexer `requests.models`/Response#status_code.","attributes":{"type":"uses","at":[352,68,352,79]}},{"key":"geid_130_4169","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python temp indexer `requests.models`/Response#text().","attributes":{"type":"uses","at":[352,107,352,111]}},{"key":"geid_130_4170","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python temp indexer `requests.models`/Response#iter_lines().","attributes":{"type":"uses","at":[356,25,356,35]}},{"key":"geid_130_4171","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python python-stdlib 3.11 json/__init__:","attributes":{"type":"uses","at":[369,28,369,32]}},{"key":"geid_130_4172","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python python-stdlib 3.11 json/loads().","attributes":{"type":"uses","at":[369,33,369,38]}},{"key":"geid_130_4173","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[375,20,375,26]}},{"key":"geid_130_4174","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python python-stdlib 3.11 logging/Logger#error().","attributes":{"type":"uses","at":[375,27,375,32]}},{"key":"geid_130_4175","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python python-stdlib 3.11 json/__init__:","attributes":{"type":"uses","at":[386,19,386,23]}},{"key":"geid_130_4176","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python temp indexer `json.decoder`/JSONDecodeError#","attributes":{"type":"uses","at":[386,24,386,39]}},{"key":"geid_130_4177","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[387,16,387,22]}},{"key":"geid_130_4178","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python python-stdlib 3.11 logging/Logger#error().","attributes":{"type":"uses","at":[387,23,387,28]}},{"key":"geid_130_4179","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python temp indexer `pilot.utils.llm_connection`/assert_json_response().","attributes":{"type":"uses","at":[408,44,408,64]}},{"key":"geid_130_4180","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python temp indexer `pilot.utils.llm_connection`/count_lines_based_on_width().","attributes":{"type":"uses","at":[411,41,411,67]}},{"key":"geid_130_4181","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[423,4,423,10]}},{"key":"geid_130_4182","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[423,11,423,15]}},{"key":"geid_130_4183","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python temp indexer `pilot.utils.llm_connection`/clean_json_response().","attributes":{"type":"uses","at":[427,23,427,42]}},{"key":"geid_130_4184","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python temp indexer `pilot.utils.llm_connection`/assert_json_schema().","attributes":{"type":"uses","at":[428,8,428,26]}},{"key":"geid_130_4185","source":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","target":"scip-python python temp indexer `pilot.utils.llm_connection`/postprocessing().","attributes":{"type":"uses","at":[432,15,432,29]}},{"key":"geid_130_4186","source":"scip-python python temp indexer `pilot.utils.llm_connection`/get_api_key_or_throw().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[437,14,437,16]}},{"key":"geid_130_4187","source":"scip-python python temp indexer `pilot.utils.llm_connection`/get_api_key_or_throw().","target":"scip-python python python-stdlib 3.11 os/getenv().","attributes":{"type":"uses","at":[437,17,437,23]}},{"key":"geid_130_4188","source":"scip-python python temp indexer `pilot.utils.llm_connection`/get_api_key_or_throw().","target":"scip-python python temp indexer `pilot.helpers.exceptions.apikeynotdefinederror`/ApiKeyNotDefinedError#","attributes":{"type":"uses","at":[439,14,439,35]}},{"key":"geid_130_4189","source":"scip-python python temp indexer `pilot.utils.llm_connection`/assert_json_response().","target":"scip-python python python-stdlib 3.11 re/__init__:","attributes":{"type":"uses","at":[444,7,444,9]}},{"key":"geid_130_4190","source":"scip-python python temp indexer `pilot.utils.llm_connection`/assert_json_response().","target":"scip-python python python-stdlib 3.11 re/match().","attributes":{"type":"uses","at":[444,10,444,15]}},{"key":"geid_130_4191","source":"scip-python python temp indexer `pilot.utils.llm_connection`/assert_json_response().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[447,8,447,14]}},{"key":"geid_130_4192","source":"scip-python python temp indexer `pilot.utils.llm_connection`/assert_json_response().","target":"scip-python python python-stdlib 3.11 logging/Logger#error().","attributes":{"type":"uses","at":[447,15,447,20]}},{"key":"geid_130_4193","source":"scip-python python temp indexer `pilot.utils.llm_connection`/clean_json_response().","target":"scip-python python python-stdlib 3.11 re/__init__:","attributes":{"type":"uses","at":[454,15,454,17]}},{"key":"geid_130_4194","source":"scip-python python temp indexer `pilot.utils.llm_connection`/clean_json_response().","target":"scip-python python python-stdlib 3.11 re/sub().","attributes":{"type":"uses","at":[454,18,454,21]}},{"key":"geid_130_4195","source":"scip-python python temp indexer `pilot.utils.llm_connection`/clean_json_response().","target":"scip-python python python-stdlib 3.11 re/__init__:","attributes":{"type":"uses","at":[454,60,454,62]}},{"key":"geid_130_4196","source":"scip-python python temp indexer `pilot.utils.llm_connection`/clean_json_response().","target":"scip-python python python-stdlib 3.11 re/DOTALL.","attributes":{"type":"uses","at":[454,63,454,69]}},{"key":"geid_130_4197","source":"scip-python python temp indexer `pilot.utils.llm_connection`/clean_json_response().","target":"scip-python python python-stdlib 3.11 re/__init__:","attributes":{"type":"uses","at":[455,15,455,17]}},{"key":"geid_130_4198","source":"scip-python python temp indexer `pilot.utils.llm_connection`/clean_json_response().","target":"scip-python python python-stdlib 3.11 re/sub().","attributes":{"type":"uses","at":[455,18,455,21]}},{"key":"geid_130_4199","source":"scip-python python temp indexer `pilot.utils.llm_connection`/clean_json_response().","target":"scip-python python python-stdlib 3.11 re/__init__:","attributes":{"type":"uses","at":[455,67,455,69]}},{"key":"geid_130_4200","source":"scip-python python temp indexer `pilot.utils.llm_connection`/clean_json_response().","target":"scip-python python python-stdlib 3.11 re/MULTILINE.","attributes":{"type":"uses","at":[455,70,455,79]}},{"key":"geid_130_4201","source":"scip-python python temp indexer `pilot.utils.llm_connection`/clean_json_response().","target":"scip-python python python-stdlib 3.11 re/__init__:","attributes":{"type":"uses","at":[456,15,456,17]}},{"key":"geid_130_4202","source":"scip-python python temp indexer `pilot.utils.llm_connection`/clean_json_response().","target":"scip-python python python-stdlib 3.11 re/sub().","attributes":{"type":"uses","at":[456,18,456,21]}},{"key":"geid_130_4203","source":"scip-python python temp indexer `pilot.utils.llm_connection`/clean_json_response().","target":"scip-python python python-stdlib 3.11 re/__init__:","attributes":{"type":"uses","at":[456,69,456,71]}},{"key":"geid_130_4204","source":"scip-python python temp indexer `pilot.utils.llm_connection`/clean_json_response().","target":"scip-python python python-stdlib 3.11 re/MULTILINE.","attributes":{"type":"uses","at":[456,72,456,81]}},{"key":"geid_130_4205","source":"scip-python python temp indexer `pilot.utils.llm_connection`/assert_json_schema().","target":"scip-python python temp indexer `pilot.utils.function_calling`/FunctionType#","attributes":{"type":"uses","at":[460,54,460,66]}},{"key":"geid_130_4206","source":"scip-python python temp indexer `pilot.utils.llm_connection`/assert_json_schema().","target":"scip-python python python-stdlib 3.11 json/__init__:","attributes":{"type":"uses","at":[463,17,463,21]}},{"key":"geid_130_4207","source":"scip-python python temp indexer `pilot.utils.llm_connection`/assert_json_schema().","target":"scip-python python python-stdlib 3.11 json/loads().","attributes":{"type":"uses","at":[463,22,463,27]}},{"key":"geid_130_4208","source":"scip-python python temp indexer `pilot.utils.llm_connection`/load_data_to_json().","target":"scip-python python python-stdlib 3.11 json/__init__:","attributes":{"type":"uses","at":[473,11,473,15]}},{"key":"geid_130_4209","source":"scip-python python temp indexer `pilot.utils.llm_connection`/load_data_to_json().","target":"scip-python python python-stdlib 3.11 json/loads().","attributes":{"type":"uses","at":[473,16,473,21]}},{"key":"geid_130_4210","source":"scip-python python temp indexer `pilot.utils.llm_connection`/load_data_to_json().","target":"scip-python python temp indexer `pilot.utils.utils`/fix_json().","attributes":{"type":"uses","at":[473,22,473,30]}},{"key":"geid_130_4211","source":"scip-python python temp indexer `pilot.utils.questionary`/__init__:","target":"scip-python python temp indexer `pilot.utils.questionary`/flush_input().","attributes":{"type":"defines","at":[58,0,69,12]}},{"key":"geid_130_4212","source":"scip-python python temp indexer `pilot.utils.questionary`/__init__:","target":"scip-python python temp indexer `pilot.utils.questionary`/ask_user_to_store_init_prompt().","attributes":{"type":"defines","at":[52,0,55,72]}},{"key":"geid_130_4213","source":"scip-python python temp indexer `pilot.utils.questionary`/__init__:","target":"scip-python python temp indexer `pilot.utils.questionary`/get_user_feedback().","attributes":{"type":"defines","at":[46,0,49,72]}},{"key":"geid_130_4214","source":"scip-python python temp indexer `pilot.utils.questionary`/__init__:","target":"scip-python python temp indexer `pilot.utils.questionary`/styled_text().","attributes":{"type":"defines","at":[19,0,43,19]}},{"key":"geid_130_4215","source":"scip-python python temp indexer `pilot.utils.questionary`/__init__:","target":"scip-python python temp indexer `pilot.utils.questionary`/styled_select().","attributes":{"type":"defines","at":[13,0,16,59]}},{"key":"geid_130_4216","source":"scip-python python temp indexer `pilot.utils.questionary`/__init__:","target":"scip-python python temp indexer `pilot.utils.questionary`/remove_ansi_codes().","attributes":{"type":"defines","at":[8,0,10,33]}},{"key":"geid_130_4217","source":"scip-python python temp indexer `pilot.utils.questionary`/__init__:","target":"scip-python python python-stdlib 3.11 platform/__init__:","attributes":{"type":"uses","at":[0,7,0,15]}},{"key":"geid_130_4218","source":"scip-python python temp indexer `pilot.utils.questionary`/__init__:","target":"scip-python python temp indexer `pilot.utils.questionary`/__init__:","attributes":{"type":"uses","at":[1,7,1,18]}},{"key":"geid_130_4219","source":"scip-python python temp indexer `pilot.utils.questionary`/__init__:","target":"scip-python python python-stdlib 3.11 re/__init__:","attributes":{"type":"uses","at":[2,7,2,9]}},{"key":"geid_130_4220","source":"scip-python python temp indexer `pilot.utils.questionary`/__init__:","target":"scip-python python python-stdlib 3.11 sys/__init__:","attributes":{"type":"uses","at":[3,7,3,10]}},{"key":"geid_130_4221","source":"scip-python python temp indexer `pilot.utils.questionary`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/__init__:","attributes":{"type":"uses","at":[4,5,4,22]}},{"key":"geid_130_4222","source":"scip-python python temp indexer `pilot.utils.questionary`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/save_user_input().","attributes":{"type":"uses","at":[4,30,4,45]}},{"key":"geid_130_4223","source":"scip-python python temp indexer `pilot.utils.questionary`/__init__:","target":"scip-python python temp indexer `pilot.database.database`/get_saved_user_input().","attributes":{"type":"uses","at":[4,47,4,67]}},{"key":"geid_130_4224","source":"scip-python python temp indexer `pilot.utils.questionary`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/__init__:","attributes":{"type":"uses","at":[5,5,5,16]}},{"key":"geid_130_4225","source":"scip-python python temp indexer `pilot.utils.questionary`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/color_yellow_bold.","attributes":{"type":"uses","at":[5,24,5,41]}},{"key":"geid_130_4226","source":"scip-python python temp indexer `pilot.utils.questionary`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/style_config.","attributes":{"type":"uses","at":[5,43,5,55]}},{"key":"geid_130_4227","source":"scip-python python temp indexer `pilot.utils.questionary`/remove_ansi_codes().","target":"scip-python python python-stdlib 3.11 re/__init__:","attributes":{"type":"uses","at":[9,18,9,20]}},{"key":"geid_130_4228","source":"scip-python python temp indexer `pilot.utils.questionary`/remove_ansi_codes().","target":"scip-python python python-stdlib 3.11 re/compile().","attributes":{"type":"uses","at":[9,21,9,28]}},{"key":"geid_130_4229","source":"scip-python python temp indexer `pilot.utils.questionary`/remove_ansi_codes().","target":"scip-python python python-stdlib 3.11 re/Pattern#sub().","attributes":{"type":"uses","at":[10,23,10,26]}},{"key":"geid_130_4230","source":"scip-python python temp indexer `pilot.utils.questionary`/styled_select().","target":"scip-python python temp indexer `pilot.utils.style`/style_config.","attributes":{"type":"uses","at":[14,22,14,34]}},{"key":"geid_130_4231","source":"scip-python python temp indexer `pilot.utils.questionary`/styled_select().","target":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#get_style().","attributes":{"type":"uses","at":[14,35,14,44]}},{"key":"geid_130_4232","source":"scip-python python temp indexer `pilot.utils.questionary`/styled_select().","target":"scip-python python temp indexer questionary/__init__:","attributes":{"type":"uses","at":[16,11,16,29]}},{"key":"geid_130_4233","source":"scip-python python temp indexer `pilot.utils.questionary`/styled_text().","target":"scip-python python temp indexer `pilot.database.database`/get_saved_user_input().","attributes":{"type":"uses","at":[22,21,22,41]}},{"key":"geid_130_4234","source":"scip-python python temp indexer `pilot.utils.questionary`/styled_text().","target":"scip-python python temp indexer `pilot.utils.style`/color_yellow_bold.","attributes":{"type":"uses","at":[26,18,26,35]}},{"key":"geid_130_4235","source":"scip-python python temp indexer `pilot.utils.questionary`/styled_text().","target":"scip-python python temp indexer `pilot.utils.style`/color_yellow_bold.","attributes":{"type":"uses","at":[27,18,27,35]}},{"key":"geid_130_4236","source":"scip-python python temp indexer `pilot.utils.questionary`/styled_text().","target":"scip-python python temp indexer `pilot.utils.style`/style_config.","attributes":{"type":"uses","at":[31,53,31,65]}},{"key":"geid_130_4237","source":"scip-python python temp indexer `pilot.utils.questionary`/styled_text().","target":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#get_style().","attributes":{"type":"uses","at":[31,66,31,75]}},{"key":"geid_130_4238","source":"scip-python python temp indexer `pilot.utils.questionary`/styled_text().","target":"scip-python python temp indexer `pilot.utils.questionary`/remove_ansi_codes().","attributes":{"type":"uses","at":[32,19,32,36]}},{"key":"geid_130_4239","source":"scip-python python temp indexer `pilot.utils.questionary`/styled_text().","target":"scip-python python temp indexer `pilot.utils.questionary`/flush_input().","attributes":{"type":"uses","at":[33,8,33,19]}},{"key":"geid_130_4240","source":"scip-python python temp indexer `pilot.utils.questionary`/styled_text().","target":"scip-python python temp indexer questionary/__init__:","attributes":{"type":"uses","at":[34,19,34,30]}},{"key":"geid_130_4241","source":"scip-python python temp indexer `pilot.utils.questionary`/styled_text().","target":"scip-python python temp indexer `pilot.database.database`/save_user_input().","attributes":{"type":"uses","at":[40,8,40,23]}},{"key":"geid_130_4242","source":"scip-python python temp indexer `pilot.utils.questionary`/get_user_feedback().","target":"scip-python python temp indexer questionary/__init__:","attributes":{"type":"uses","at":[47,11,47,22]}},{"key":"geid_130_4243","source":"scip-python python temp indexer `pilot.utils.questionary`/get_user_feedback().","target":"scip-python python temp indexer `pilot.utils.style`/style_config.","attributes":{"type":"uses","at":[49,34,49,46]}},{"key":"geid_130_4244","source":"scip-python python temp indexer `pilot.utils.questionary`/get_user_feedback().","target":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#get_style().","attributes":{"type":"uses","at":[49,47,49,56]}},{"key":"geid_130_4245","source":"scip-python python temp indexer `pilot.utils.questionary`/ask_user_to_store_init_prompt().","target":"scip-python python temp indexer questionary/__init__:","attributes":{"type":"uses","at":[53,11,53,22]}},{"key":"geid_130_4246","source":"scip-python python temp indexer `pilot.utils.questionary`/ask_user_to_store_init_prompt().","target":"scip-python python temp indexer `pilot.utils.style`/style_config.","attributes":{"type":"uses","at":[55,34,55,46]}},{"key":"geid_130_4247","source":"scip-python python temp indexer `pilot.utils.questionary`/ask_user_to_store_init_prompt().","target":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#get_style().","attributes":{"type":"uses","at":[55,47,55,56]}},{"key":"geid_130_4248","source":"scip-python python temp indexer `pilot.utils.questionary`/flush_input().","target":"scip-python python python-stdlib 3.11 platform/__init__:","attributes":{"type":"uses","at":[61,11,61,19]}},{"key":"geid_130_4249","source":"scip-python python temp indexer `pilot.utils.questionary`/flush_input().","target":"scip-python python python-stdlib 3.11 platform/system().","attributes":{"type":"uses","at":[61,20,61,26]}},{"key":"geid_130_4250","source":"scip-python python temp indexer `pilot.utils.questionary`/flush_input().","target":"scip-python python python-stdlib 3.11 msvcrt/__init__:","attributes":{"type":"uses","at":[62,19,62,25]}},{"key":"geid_130_4251","source":"scip-python python temp indexer `pilot.utils.questionary`/flush_input().","target":"scip-python python python-stdlib 3.11 msvcrt/__init__:","attributes":{"type":"uses","at":[63,18,63,24]}},{"key":"geid_130_4252","source":"scip-python python temp indexer `pilot.utils.questionary`/flush_input().","target":"scip-python python python-stdlib 3.11 msvcrt/kbhit().","attributes":{"type":"uses","at":[63,25,63,30]}},{"key":"geid_130_4253","source":"scip-python python temp indexer `pilot.utils.questionary`/flush_input().","target":"scip-python python python-stdlib 3.11 msvcrt/__init__:","attributes":{"type":"uses","at":[64,16,64,22]}},{"key":"geid_130_4254","source":"scip-python python temp indexer `pilot.utils.questionary`/flush_input().","target":"scip-python python python-stdlib 3.11 msvcrt/getch().","attributes":{"type":"uses","at":[64,23,64,28]}},{"key":"geid_130_4255","source":"scip-python python temp indexer `pilot.utils.questionary`/flush_input().","target":"scip-python python python-stdlib 3.11 termios/__init__:","attributes":{"type":"uses","at":[66,19,66,26]}},{"key":"geid_130_4256","source":"scip-python python temp indexer `pilot.utils.questionary`/flush_input().","target":"scip-python python python-stdlib 3.11 termios/__init__:","attributes":{"type":"uses","at":[67,12,67,19]}},{"key":"geid_130_4257","source":"scip-python python temp indexer `pilot.utils.questionary`/flush_input().","target":"scip-python python python-stdlib 3.11 termios/tcflush().","attributes":{"type":"uses","at":[67,20,67,27]}},{"key":"geid_130_4258","source":"scip-python python temp indexer `pilot.utils.questionary`/flush_input().","target":"scip-python python python-stdlib 3.11 sys/__init__:","attributes":{"type":"uses","at":[67,28,67,31]}},{"key":"geid_130_4259","source":"scip-python python temp indexer `pilot.utils.questionary`/flush_input().","target":"scip-python python python-stdlib 3.11 sys/stdin.stdin.","attributes":{"type":"uses","at":[67,32,67,37]}},{"key":"geid_130_4260","source":"scip-python python temp indexer `pilot.utils.questionary`/flush_input().","target":"scip-python python python-stdlib 3.11 termios/__init__:","attributes":{"type":"uses","at":[67,39,67,46]}},{"key":"geid_130_4261","source":"scip-python python temp indexer `pilot.utils.questionary`/flush_input().","target":"scip-python python python-stdlib 3.11 termios/TCIOFLUSH.","attributes":{"type":"uses","at":[67,47,67,56]}},{"key":"geid_130_4262","source":"scip-python python temp indexer `pilot.utils.settings`/__init__:","target":"scip-python python temp indexer `pilot.utils.settings`/get_version().","attributes":{"type":"defines","at":[302,0,319,18]}},{"key":"geid_130_4263","source":"scip-python python temp indexer `pilot.utils.settings`/__init__:","target":"scip-python python temp indexer `pilot.utils.settings`/get_package_version().","attributes":{"type":"defines","at":[291,0,299,18]}},{"key":"geid_130_4264","source":"scip-python python temp indexer `pilot.utils.settings`/__init__:","target":"scip-python python temp indexer `pilot.utils.settings`/get_git_commit().","attributes":{"type":"defines","at":[267,0,288,22]}},{"key":"geid_130_4265","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#update_settings_from_args().","attributes":{"type":"defines","at":[255,4,264,12]}},{"key":"geid_130_4266","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#update_settings_from_env().","attributes":{"type":"defines","at":[230,4,253,48]}},{"key":"geid_130_4267","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#save().","attributes":{"type":"defines","at":[202,4,228,47]}},{"key":"geid_130_4268","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#_save_config().","attributes":{"type":"defines","at":[183,4,200,59]}},{"key":"geid_130_4269","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#_load_config().","attributes":{"type":"defines","at":[157,4,181,21]}},{"key":"geid_130_4270","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#resolve_config_dir().","attributes":{"type":"defines","at":[136,4,155,66]}},{"key":"geid_130_4271","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#load().","attributes":{"type":"defines","at":[127,4,134,53]}},{"key":"geid_130_4272","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#__init__().","attributes":{"type":"defines","at":[122,4,125,32]}},{"key":"geid_130_4273","source":"scip-python python temp indexer `pilot.utils.settings`/__init__:","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#","attributes":{"type":"defines","at":[88,0,264,12]}},{"key":"geid_130_4274","source":"scip-python python temp indexer `pilot.utils.settings`/Settings#","target":"scip-python python temp indexer `pilot.utils.settings`/Settings#update().","attributes":{"type":"defines","at":[75,4,85,63]}},{"key":"geid_130_4275","source":"scip-python python temp indexer `pilot.utils.settings`/Settings#","target":"scip-python python temp indexer `pilot.utils.settings`/Settings#__iter__().","attributes":{"type":"defines","at":[71,4,73,41]}},{"key":"geid_130_4276","source":"scip-python python temp indexer `pilot.utils.settings`/Settings#","target":"scip-python python temp indexer `pilot.utils.settings`/Settings#__init__().","attributes":{"type":"defines","at":[65,4,69,29]}},{"key":"geid_130_4277","source":"scip-python python temp indexer `pilot.utils.settings`/__init__:","target":"scip-python python temp indexer `pilot.utils.settings`/Settings#","attributes":{"type":"defines","at":[19,0,85,63]}},{"key":"geid_130_4278","source":"scip-python python temp indexer `pilot.utils.settings`/__init__:","target":"scip-python python python-stdlib 3.11 json/__init__:","attributes":{"type":"uses","at":[0,7,0,11]}},{"key":"geid_130_4279","source":"scip-python python temp indexer `pilot.utils.settings`/__init__:","target":"scip-python python python-stdlib 3.11 logging/__init__:","attributes":{"type":"uses","at":[1,5,1,12]}},{"key":"geid_130_4280","source":"scip-python python temp indexer `pilot.utils.settings`/__init__:","target":"scip-python python python-stdlib 3.11 logging/getLogger().","attributes":{"type":"uses","at":[1,20,1,29]}},{"key":"geid_130_4281","source":"scip-python python temp indexer `pilot.utils.settings`/__init__:","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[2,5,2,7]}},{"key":"geid_130_4282","source":"scip-python python temp indexer `pilot.utils.settings`/__init__:","target":"scip-python python python-stdlib 3.11 os/getenv().","attributes":{"type":"uses","at":[2,15,2,21]}},{"key":"geid_130_4283","source":"scip-python python temp indexer `pilot.utils.settings`/__init__:","target":"scip-python python python-stdlib 3.11 os/makedirs().","attributes":{"type":"uses","at":[2,23,2,31]}},{"key":"geid_130_4284","source":"scip-python python temp indexer `pilot.utils.settings`/__init__:","target":"scip-python python python-stdlib 3.11 pathlib/__init__:","attributes":{"type":"uses","at":[3,5,3,12]}},{"key":"geid_130_4285","source":"scip-python python temp indexer `pilot.utils.settings`/__init__:","target":"scip-python python python-stdlib 3.11 pathlib/Path#","attributes":{"type":"uses","at":[3,20,3,24]}},{"key":"geid_130_4286","source":"scip-python python temp indexer `pilot.utils.settings`/__init__:","target":"scip-python python python-stdlib 3.11 sys/__init__:","attributes":{"type":"uses","at":[4,7,4,10]}},{"key":"geid_130_4287","source":"scip-python python temp indexer `pilot.utils.settings`/__init__:","target":"scip-python python python-stdlib 3.11 typing/__init__:","attributes":{"type":"uses","at":[5,5,5,11]}},{"key":"geid_130_4288","source":"scip-python python temp indexer `pilot.utils.settings`/__init__:","target":"scip-python python python-stdlib 3.11 typing/Any.","attributes":{"type":"uses","at":[5,19,5,22]}},{"key":"geid_130_4289","source":"scip-python python temp indexer `pilot.utils.settings`/__init__:","target":"scip-python python python-stdlib 3.11 typing/Optional.","attributes":{"type":"uses","at":[5,24,5,32]}},{"key":"geid_130_4290","source":"scip-python python temp indexer `pilot.utils.settings`/__init__:","target":"scip-python python python-dotenv 1.0.0 dotenv/__init__:","attributes":{"type":"uses","at":[7,5,7,11]}},{"key":"geid_130_4291","source":"scip-python python temp indexer `pilot.utils.settings`/__init__:","target":"scip-python python python-dotenv 1.0.0 `dotenv.main`/load_dotenv().","attributes":{"type":"uses","at":[7,19,7,30]}},{"key":"geid_130_4292","source":"scip-python python temp indexer `pilot.utils.settings`/__init__:","target":"scip-python python python-dotenv 1.0.0 `dotenv.main`/load_dotenv().","attributes":{"type":"uses","at":[9,0,9,11]}},{"key":"geid_130_4293","source":"scip-python python temp indexer `pilot.utils.settings`/__init__:","target":"scip-python python python-stdlib 3.11 logging/getLogger().","attributes":{"type":"uses","at":[11,6,11,15]}},{"key":"geid_130_4294","source":"scip-python python temp indexer `pilot.utils.settings`/__init__:","target":"scip-python python temp indexer `pilot.utils.settings`/","attributes":{"type":"uses","at":[11,16,11,24]}},{"key":"geid_130_4295","source":"scip-python python temp indexer `pilot.utils.settings`/Settings#","target":"scip-python python temp indexer `pilot.utils.settings`/AVAILABLE_SETTINGS.","attributes":{"type":"uses","at":[63,16,63,34]}},{"key":"geid_130_4296","source":"scip-python python temp indexer `pilot.utils.settings`/Settings#__init__().","target":"scip-python python temp indexer `pilot.utils.settings`/Settings#__slots__.","attributes":{"type":"uses","at":[66,24,66,33]}},{"key":"geid_130_4297","source":"scip-python python temp indexer `pilot.utils.settings`/Settings#__init__().","target":"scip-python python temp indexer `pilot.utils.settings`/Settings#update().","attributes":{"type":"uses","at":[69,13,69,19]}},{"key":"geid_130_4298","source":"scip-python python temp indexer `pilot.utils.settings`/Settings#__iter__().","target":"scip-python python temp indexer `pilot.utils.settings`/Settings#__slots__.","attributes":{"type":"uses","at":[72,24,72,33]}},{"key":"geid_130_4299","source":"scip-python python temp indexer `pilot.utils.settings`/Settings#update().","target":"scip-python python temp indexer `pilot.utils.settings`/log.","attributes":{"type":"uses","at":[85,16,85,19]}},{"key":"geid_130_4300","source":"scip-python python temp indexer `pilot.utils.settings`/Settings#update().","target":"scip-python python python-stdlib 3.11 logging/Logger#warning().","attributes":{"type":"uses","at":[85,20,85,27]}},{"key":"geid_130_4301","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#__init__().","target":"scip-python python temp indexer `pilot.utils.settings`/Settings#","attributes":{"type":"uses","at":[122,33,122,41]}},{"key":"geid_130_4302","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#__init__().","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#resolve_config_dir().","attributes":{"type":"uses","at":[123,31,123,49]}},{"key":"geid_130_4303","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#__init__().","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#config_dir.","attributes":{"type":"uses","at":[124,32,124,42]}},{"key":"geid_130_4304","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#load().","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#settings.","attributes":{"type":"uses","at":[132,13,132,21]}},{"key":"geid_130_4305","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#load().","target":"scip-python python temp indexer `pilot.utils.settings`/Settings#update().","attributes":{"type":"uses","at":[132,22,132,28]}},{"key":"geid_130_4306","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#load().","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#_load_config().","attributes":{"type":"uses","at":[132,36,132,48]}},{"key":"geid_130_4307","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#load().","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#update_settings_from_env().","attributes":{"type":"uses","at":[133,13,133,37]}},{"key":"geid_130_4308","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#load().","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#settings.","attributes":{"type":"uses","at":[133,43,133,51]}},{"key":"geid_130_4309","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#load().","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#update_settings_from_args().","attributes":{"type":"uses","at":[134,13,134,38]}},{"key":"geid_130_4310","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#load().","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#settings.","attributes":{"type":"uses","at":[134,44,134,52]}},{"key":"geid_130_4311","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#resolve_config_dir().","target":"scip-python python python-stdlib 3.11 pathlib/Path#","attributes":{"type":"uses","at":[137,35,137,39]}},{"key":"geid_130_4312","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#resolve_config_dir().","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#APP_NAME.","attributes":{"type":"uses","at":[146,29,146,37]}},{"key":"geid_130_4313","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#resolve_config_dir().","target":"scip-python python python-stdlib 3.11 os/getenv().","attributes":{"type":"uses","at":[148,26,148,32]}},{"key":"geid_130_4314","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#resolve_config_dir().","target":"scip-python python python-stdlib 3.11 pathlib/Path#","attributes":{"type":"uses","at":[150,19,150,23]}},{"key":"geid_130_4315","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#resolve_config_dir().","target":"scip-python python python-stdlib 3.11 pathlib/Path#","attributes":{"type":"uses","at":[150,43,150,47]}},{"key":"geid_130_4316","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#resolve_config_dir().","target":"scip-python python python-stdlib 3.11 sys/__init__:","attributes":{"type":"uses","at":[152,11,152,14]}},{"key":"geid_130_4317","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#resolve_config_dir().","target":"scip-python python python-stdlib 3.11 sys/platform.platform.","attributes":{"type":"uses","at":[152,15,152,23]}},{"key":"geid_130_4318","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#resolve_config_dir().","target":"scip-python python python-stdlib 3.11 os/getenv().","attributes":{"type":"uses","at":[152,39,152,45]}},{"key":"geid_130_4319","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#resolve_config_dir().","target":"scip-python python python-stdlib 3.11 pathlib/Path#","attributes":{"type":"uses","at":[153,19,153,23]}},{"key":"geid_130_4320","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#resolve_config_dir().","target":"scip-python python python-stdlib 3.11 os/getenv().","attributes":{"type":"uses","at":[153,24,153,30]}},{"key":"geid_130_4321","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#resolve_config_dir().","target":"scip-python python python-stdlib 3.11 pathlib/Path#","attributes":{"type":"uses","at":[153,45,153,49]}},{"key":"geid_130_4322","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#resolve_config_dir().","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#APP_NAME.","attributes":{"type":"uses","at":[153,54,153,62]}},{"key":"geid_130_4323","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#resolve_config_dir().","target":"scip-python python python-stdlib 3.11 pathlib/Path#","attributes":{"type":"uses","at":[155,15,155,19]}},{"key":"geid_130_4324","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#resolve_config_dir().","target":"scip-python python python-stdlib 3.11 pathlib/Path#expanduser().","attributes":{"type":"uses","at":[155,25,155,35]}},{"key":"geid_130_4325","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#resolve_config_dir().","target":"scip-python python python-stdlib 3.11 pathlib/Path#","attributes":{"type":"uses","at":[155,40,155,44]}},{"key":"geid_130_4326","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#_load_config().","target":"scip-python python python-stdlib 3.11 typing/Any.","attributes":{"type":"uses","at":[157,40,157,43]}},{"key":"geid_130_4327","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#_load_config().","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#config_path.","attributes":{"type":"uses","at":[169,20,169,31]}},{"key":"geid_130_4328","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#_load_config().","target":"scip-python python python-stdlib 3.11 pathlib/Path#exists().","attributes":{"type":"uses","at":[169,32,169,38]}},{"key":"geid_130_4329","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#_load_config().","target":"scip-python python temp indexer `pilot.utils.settings`/log.","attributes":{"type":"uses","at":[170,12,170,15]}},{"key":"geid_130_4330","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#_load_config().","target":"scip-python python python-stdlib 3.11 logging/Logger#debug().","attributes":{"type":"uses","at":[170,16,170,21]}},{"key":"geid_130_4331","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#_load_config().","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#config_path.","attributes":{"type":"uses","at":[170,53,170,64]}},{"key":"geid_130_4332","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#_load_config().","target":"scip-python python temp indexer `pilot.utils.settings`/log.","attributes":{"type":"uses","at":[173,8,173,11]}},{"key":"geid_130_4333","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#_load_config().","target":"scip-python python python-stdlib 3.11 logging/Logger#debug().","attributes":{"type":"uses","at":[173,12,173,17]}},{"key":"geid_130_4334","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#_load_config().","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#config_path.","attributes":{"type":"uses","at":[173,61,173,72]}},{"key":"geid_130_4335","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#_load_config().","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#config_path.","attributes":{"type":"uses","at":[175,27,175,38]}},{"key":"geid_130_4336","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#_load_config().","target":"scip-python python python-stdlib 3.11 json/__init__:","attributes":{"type":"uses","at":[176,23,176,27]}},{"key":"geid_130_4337","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#_load_config().","target":"scip-python python python-stdlib 3.11 json/load().","attributes":{"type":"uses","at":[176,28,176,32]}},{"key":"geid_130_4338","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#_load_config().","target":"scip-python python temp indexer `pilot.utils.settings`/log.","attributes":{"type":"uses","at":[178,12,178,15]}},{"key":"geid_130_4339","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#_load_config().","target":"scip-python python python-stdlib 3.11 logging/Logger#error().","attributes":{"type":"uses","at":[178,16,178,21]}},{"key":"geid_130_4340","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#_load_config().","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#config_path.","attributes":{"type":"uses","at":[179,50,179,61]}},{"key":"geid_130_4341","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#_save_config().","target":"scip-python python python-stdlib 3.11 typing/Any.","attributes":{"type":"uses","at":[183,45,183,48]}},{"key":"geid_130_4342","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#_save_config().","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#config_dir.","attributes":{"type":"uses","at":[194,20,194,30]}},{"key":"geid_130_4343","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#_save_config().","target":"scip-python python python-stdlib 3.11 pathlib/Path#exists().","attributes":{"type":"uses","at":[194,31,194,37]}},{"key":"geid_130_4344","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#_save_config().","target":"scip-python python temp indexer `pilot.utils.settings`/log.","attributes":{"type":"uses","at":[195,12,195,15]}},{"key":"geid_130_4345","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#_save_config().","target":"scip-python python python-stdlib 3.11 logging/Logger#debug().","attributes":{"type":"uses","at":[195,16,195,21]}},{"key":"geid_130_4346","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#_save_config().","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#config_dir.","attributes":{"type":"uses","at":[195,57,195,67]}},{"key":"geid_130_4347","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#_save_config().","target":"scip-python python python-stdlib 3.11 os/makedirs().","attributes":{"type":"uses","at":[196,12,196,20]}},{"key":"geid_130_4348","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#_save_config().","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#config_dir.","attributes":{"type":"uses","at":[196,26,196,36]}},{"key":"geid_130_4349","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#_save_config().","target":"scip-python python temp indexer `pilot.utils.settings`/log.","attributes":{"type":"uses","at":[198,8,198,11]}},{"key":"geid_130_4350","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#_save_config().","target":"scip-python python python-stdlib 3.11 logging/Logger#debug().","attributes":{"type":"uses","at":[198,12,198,17]}},{"key":"geid_130_4351","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#_save_config().","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#config_path.","attributes":{"type":"uses","at":[198,58,198,69]}},{"key":"geid_130_4352","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#_save_config().","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#config_path.","attributes":{"type":"uses","at":[199,23,199,34]}},{"key":"geid_130_4353","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#_save_config().","target":"scip-python python python-stdlib 3.11 json/__init__:","attributes":{"type":"uses","at":[200,12,200,16]}},{"key":"geid_130_4354","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#_save_config().","target":"scip-python python python-stdlib 3.11 json/dump().","attributes":{"type":"uses","at":[200,17,200,21]}},{"key":"geid_130_4355","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#save().","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#_load_config().","attributes":{"type":"uses","at":[220,36,220,48]}},{"key":"geid_130_4356","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#save().","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#settings.","attributes":{"type":"uses","at":[223,37,223,45]}},{"key":"geid_130_4357","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#save().","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#_save_config().","attributes":{"type":"uses","at":[228,13,228,25]}},{"key":"geid_130_4358","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#update_settings_from_env().","target":"scip-python python temp indexer `pilot.utils.settings`/Settings#","attributes":{"type":"uses","at":[230,49,230,57]}},{"key":"geid_130_4359","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#update_settings_from_env().","target":"scip-python python python-stdlib 3.11 os/getenv().","attributes":{"type":"uses","at":[240,23,240,29]}},{"key":"geid_130_4360","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#update_settings_from_env().","target":"scip-python python python-stdlib 3.11 os/getenv().","attributes":{"type":"uses","at":[241,29,241,35]}},{"key":"geid_130_4361","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#update_settings_from_env().","target":"scip-python python python-stdlib 3.11 os/getenv().","attributes":{"type":"uses","at":[252,25,252,31]}},{"key":"geid_130_4362","source":"scip-python python temp indexer `pilot.utils.settings`/Loader#update_settings_from_args().","target":"scip-python python temp indexer `pilot.utils.settings`/Settings#","attributes":{"type":"uses","at":[255,51,255,59]}},{"key":"geid_130_4363","source":"scip-python python temp indexer `pilot.utils.settings`/get_git_commit().","target":"scip-python python python-stdlib 3.11 typing/Optional.","attributes":{"type":"uses","at":[267,24,267,32]}},{"key":"geid_130_4364","source":"scip-python python temp indexer `pilot.utils.settings`/get_git_commit().","target":"scip-python python python-stdlib 3.11 pathlib/Path#","attributes":{"type":"uses","at":[273,14,273,18]}},{"key":"geid_130_4365","source":"scip-python python temp indexer `pilot.utils.settings`/get_git_commit().","target":"scip-python python temp indexer `pilot.utils.settings`/","attributes":{"type":"uses","at":[273,19,273,27]}},{"key":"geid_130_4366","source":"scip-python python temp indexer `pilot.utils.settings`/get_git_commit().","target":"scip-python python python-stdlib 3.11 pathlib/PurePath#parent().","attributes":{"type":"uses","at":[273,29,273,35]}},{"key":"geid_130_4367","source":"scip-python python temp indexer `pilot.utils.settings`/get_git_commit().","target":"scip-python python python-stdlib 3.11 pathlib/PurePath#parent().","attributes":{"type":"uses","at":[273,36,273,42]}},{"key":"geid_130_4368","source":"scip-python python temp indexer `pilot.utils.settings`/get_git_commit().","target":"scip-python python python-stdlib 3.11 pathlib/PurePath#parent().","attributes":{"type":"uses","at":[273,43,273,49]}},{"key":"geid_130_4369","source":"scip-python python temp indexer `pilot.utils.settings`/get_git_commit().","target":"scip-python python python-stdlib 3.11 pathlib/Path#is_dir().","attributes":{"type":"uses","at":[274,19,274,25]}},{"key":"geid_130_4370","source":"scip-python python temp indexer `pilot.utils.settings`/get_git_commit().","target":"scip-python python python-stdlib 3.11 pathlib/Path#is_file().","attributes":{"type":"uses","at":[278,20,278,27]}},{"key":"geid_130_4371","source":"scip-python python temp indexer `pilot.utils.settings`/get_git_commit().","target":"scip-python python python-stdlib 3.11 io/TextIOBase#read().","attributes":{"type":"uses","at":[282,17,282,21]}},{"key":"geid_130_4372","source":"scip-python python temp indexer `pilot.utils.settings`/get_git_commit().","target":"scip-python python python-stdlib 3.11 io/TextIOBase#read().","attributes":{"type":"uses","at":[286,26,286,30]}},{"key":"geid_130_4373","source":"scip-python python temp indexer `pilot.utils.settings`/get_version().","target":"scip-python python temp indexer `pilot.utils.settings`/get_package_version().","attributes":{"type":"uses","at":[314,14,314,33]}},{"key":"geid_130_4374","source":"scip-python python temp indexer `pilot.utils.settings`/get_version().","target":"scip-python python temp indexer `pilot.utils.settings`/get_git_commit().","attributes":{"type":"uses","at":[315,13,315,27]}},{"key":"geid_130_4375","source":"scip-python python temp indexer `pilot.utils.settings`/__init__:","target":"scip-python python temp indexer `pilot.utils.settings`/get_version().","attributes":{"type":"uses","at":[322,10,322,21]}},{"key":"geid_130_4376","source":"scip-python python temp indexer `pilot.utils.settings`/__init__:","target":"scip-python python temp indexer `pilot.utils.settings`/Settings#","attributes":{"type":"uses","at":[323,11,323,19]}},{"key":"geid_130_4377","source":"scip-python python temp indexer `pilot.utils.settings`/__init__:","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#","attributes":{"type":"uses","at":[324,9,324,15]}},{"key":"geid_130_4378","source":"scip-python python temp indexer `pilot.utils.settings`/__init__:","target":"scip-python python temp indexer `pilot.utils.settings`/settings.","attributes":{"type":"uses","at":[324,16,324,24]}},{"key":"geid_130_4379","source":"scip-python python temp indexer `pilot.utils.settings`/__init__:","target":"scip-python python temp indexer `pilot.utils.settings`/loader.","attributes":{"type":"uses","at":[325,0,325,6]}},{"key":"geid_130_4380","source":"scip-python python temp indexer `pilot.utils.settings`/__init__:","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#load().","attributes":{"type":"uses","at":[325,7,325,11]}},{"key":"geid_130_4381","source":"scip-python python temp indexer `pilot.utils.settings`/__init__:","target":"scip-python python temp indexer `pilot.utils.settings`/loader.","attributes":{"type":"uses","at":[326,14,326,20]}},{"key":"geid_130_4382","source":"scip-python python temp indexer `pilot.utils.settings`/__init__:","target":"scip-python python temp indexer `pilot.utils.settings`/Loader#config_path.","attributes":{"type":"uses","at":[326,21,326,32]}},{"key":"geid_130_4383","source":"scip-python python temp indexer `pilot.utils.spinner`/__init__:","target":"scip-python python temp indexer `pilot.utils.spinner`/spinner_stop().","attributes":{"type":"defines","at":[10,0,12,22]}},{"key":"geid_130_4384","source":"scip-python python temp indexer `pilot.utils.spinner`/__init__:","target":"scip-python python temp indexer `pilot.utils.spinner`/spinner_start().","attributes":{"type":"defines","at":[4,0,7,18]}},{"key":"geid_130_4385","source":"scip-python python temp indexer `pilot.utils.spinner`/__init__:","target":"scip-python python temp indexer yaspin/__init__:","attributes":{"type":"uses","at":[0,5,0,11]}},{"key":"geid_130_4386","source":"scip-python python temp indexer `pilot.utils.spinner`/__init__:","target":"scip-python python temp indexer `yaspin.spinners`/__init__:","attributes":{"type":"uses","at":[1,5,1,20]}},{"key":"geid_130_4387","source":"scip-python python temp indexer `pilot.utils.style`/get_color_function().","target":"scip-python python temp indexer `pilot.utils.style`/get_color_function().color_func().","attributes":{"type":"defines","at":[139,4,152,45]}},{"key":"geid_130_4388","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/get_color_function().","attributes":{"type":"defines","at":[127,0,154,21]}},{"key":"geid_130_4389","source":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#","target":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#set_theme().","attributes":{"type":"defines","at":[116,4,124,38]}},{"key":"geid_130_4390","source":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#","target":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#get_color().","attributes":{"type":"defines","at":[104,4,114,58]}},{"key":"geid_130_4391","source":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#","target":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#get_style().","attributes":{"type":"defines","at":[95,4,102,43]}},{"key":"geid_130_4392","source":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#","target":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#__init__().","attributes":{"type":"defines","at":[85,4,93,26]}},{"key":"geid_130_4393","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#","attributes":{"type":"defines","at":[80,0,124,38]}},{"key":"geid_130_4394","source":"scip-python python temp indexer `pilot.utils.style`/ThemeStyle#","target":"scip-python python temp indexer `pilot.utils.style`/ThemeStyle#get_style().","attributes":{"type":"defines","at":[70,4,77,39]}},{"key":"geid_130_4395","source":"scip-python python temp indexer `pilot.utils.style`/ThemeStyle#","target":"scip-python python temp indexer `pilot.utils.style`/ThemeStyle#__init__().","attributes":{"type":"defines","at":[61,4,68,26]}},{"key":"geid_130_4396","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/ThemeStyle#","attributes":{"type":"defines","at":[56,0,77,39]}},{"key":"geid_130_4397","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/ColorName#","attributes":{"type":"defines","at":[17,0,27,44]}},{"key":"geid_130_4398","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/Theme#","attributes":{"type":"defines","at":[8,0,14,21]}},{"key":"geid_130_4399","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python colorama 0.4.6 colorama/__init__:","attributes":{"type":"uses","at":[0,5,0,13]}},{"key":"geid_130_4400","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python colorama 0.4.6 `colorama.ansi`/Fore.Fore.","attributes":{"type":"uses","at":[0,21,0,25]}},{"key":"geid_130_4401","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python colorama 0.4.6 `colorama.ansi`/Style.Style.","attributes":{"type":"uses","at":[0,27,0,49]}},{"key":"geid_130_4402","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python colorama 0.4.6 `colorama.initialise`/init().","attributes":{"type":"uses","at":[0,51,0,55]}},{"key":"geid_130_4403","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python python-stdlib 3.11 enum/__init__:","attributes":{"type":"uses","at":[1,5,1,9]}},{"key":"geid_130_4404","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python python-stdlib 3.11 enum/Enum#","attributes":{"type":"uses","at":[1,17,1,21]}},{"key":"geid_130_4405","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python temp indexer `pilot.utils.questionary`/__init__:","attributes":{"type":"uses","at":[2,5,2,16]}},{"key":"geid_130_4406","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python colorama 0.4.6 `colorama.initialise`/init().","attributes":{"type":"uses","at":[5,0,5,4]}},{"key":"geid_130_4407","source":"scip-python python temp indexer `pilot.utils.style`/Theme#","target":"scip-python python python-stdlib 3.11 enum/Enum#","attributes":{"type":"uses","at":[8,12,8,16]}},{"key":"geid_130_4408","source":"scip-python python temp indexer `pilot.utils.style`/ColorName#","target":"scip-python python python-stdlib 3.11 enum/Enum#","attributes":{"type":"uses","at":[17,16,17,20]}},{"key":"geid_130_4409","source":"scip-python python temp indexer `pilot.utils.style`/ColorName#","target":"scip-python python colorama 0.4.6 `colorama.ansi`/Fore.Fore.","attributes":{"type":"uses","at":[22,11,22,15]}},{"key":"geid_130_4410","source":"scip-python python temp indexer `pilot.utils.style`/ColorName#","target":"scip-python python colorama 0.4.6 `colorama.ansi`/AnsiFore#RED.","attributes":{"type":"uses","at":[22,16,22,19]}},{"key":"geid_130_4411","source":"scip-python python temp indexer `pilot.utils.style`/ColorName#","target":"scip-python python colorama 0.4.6 `colorama.ansi`/Fore.Fore.","attributes":{"type":"uses","at":[22,21,22,25]}},{"key":"geid_130_4412","source":"scip-python python temp indexer `pilot.utils.style`/ColorName#","target":"scip-python python colorama 0.4.6 `colorama.ansi`/AnsiFore#LIGHTRED_EX.","attributes":{"type":"uses","at":[22,26,22,37]}},{"key":"geid_130_4413","source":"scip-python python temp indexer `pilot.utils.style`/ColorName#","target":"scip-python python colorama 0.4.6 `colorama.ansi`/Fore.Fore.","attributes":{"type":"uses","at":[23,13,23,17]}},{"key":"geid_130_4414","source":"scip-python python temp indexer `pilot.utils.style`/ColorName#","target":"scip-python python colorama 0.4.6 `colorama.ansi`/AnsiFore#GREEN.","attributes":{"type":"uses","at":[23,18,23,23]}},{"key":"geid_130_4415","source":"scip-python python temp indexer `pilot.utils.style`/ColorName#","target":"scip-python python colorama 0.4.6 `colorama.ansi`/Fore.Fore.","attributes":{"type":"uses","at":[23,25,23,29]}},{"key":"geid_130_4416","source":"scip-python python temp indexer `pilot.utils.style`/ColorName#","target":"scip-python python colorama 0.4.6 `colorama.ansi`/AnsiFore#LIGHTGREEN_EX.","attributes":{"type":"uses","at":[23,30,23,43]}},{"key":"geid_130_4417","source":"scip-python python temp indexer `pilot.utils.style`/ColorName#","target":"scip-python python colorama 0.4.6 `colorama.ansi`/Fore.Fore.","attributes":{"type":"uses","at":[24,14,24,18]}},{"key":"geid_130_4418","source":"scip-python python temp indexer `pilot.utils.style`/ColorName#","target":"scip-python python colorama 0.4.6 `colorama.ansi`/AnsiFore#YELLOW.","attributes":{"type":"uses","at":[24,19,24,25]}},{"key":"geid_130_4419","source":"scip-python python temp indexer `pilot.utils.style`/ColorName#","target":"scip-python python colorama 0.4.6 `colorama.ansi`/Fore.Fore.","attributes":{"type":"uses","at":[24,27,24,31]}},{"key":"geid_130_4420","source":"scip-python python temp indexer `pilot.utils.style`/ColorName#","target":"scip-python python colorama 0.4.6 `colorama.ansi`/AnsiFore#LIGHTYELLOW_EX.","attributes":{"type":"uses","at":[24,32,24,46]}},{"key":"geid_130_4421","source":"scip-python python temp indexer `pilot.utils.style`/ColorName#","target":"scip-python python colorama 0.4.6 `colorama.ansi`/Fore.Fore.","attributes":{"type":"uses","at":[25,12,25,16]}},{"key":"geid_130_4422","source":"scip-python python temp indexer `pilot.utils.style`/ColorName#","target":"scip-python python colorama 0.4.6 `colorama.ansi`/AnsiFore#BLUE.","attributes":{"type":"uses","at":[25,17,25,21]}},{"key":"geid_130_4423","source":"scip-python python temp indexer `pilot.utils.style`/ColorName#","target":"scip-python python colorama 0.4.6 `colorama.ansi`/Fore.Fore.","attributes":{"type":"uses","at":[25,23,25,27]}},{"key":"geid_130_4424","source":"scip-python python temp indexer `pilot.utils.style`/ColorName#","target":"scip-python python colorama 0.4.6 `colorama.ansi`/AnsiFore#LIGHTBLUE_EX.","attributes":{"type":"uses","at":[25,28,25,40]}},{"key":"geid_130_4425","source":"scip-python python temp indexer `pilot.utils.style`/ColorName#","target":"scip-python python colorama 0.4.6 `colorama.ansi`/Fore.Fore.","attributes":{"type":"uses","at":[26,12,26,16]}},{"key":"geid_130_4426","source":"scip-python python temp indexer `pilot.utils.style`/ColorName#","target":"scip-python python colorama 0.4.6 `colorama.ansi`/AnsiFore#CYAN.","attributes":{"type":"uses","at":[26,17,26,21]}},{"key":"geid_130_4427","source":"scip-python python temp indexer `pilot.utils.style`/ColorName#","target":"scip-python python colorama 0.4.6 `colorama.ansi`/Fore.Fore.","attributes":{"type":"uses","at":[26,23,26,27]}},{"key":"geid_130_4428","source":"scip-python python temp indexer `pilot.utils.style`/ColorName#","target":"scip-python python colorama 0.4.6 `colorama.ansi`/AnsiFore#LIGHTCYAN_EX.","attributes":{"type":"uses","at":[26,28,26,40]}},{"key":"geid_130_4429","source":"scip-python python temp indexer `pilot.utils.style`/ColorName#","target":"scip-python python colorama 0.4.6 `colorama.ansi`/Fore.Fore.","attributes":{"type":"uses","at":[27,13,27,17]}},{"key":"geid_130_4430","source":"scip-python python temp indexer `pilot.utils.style`/ColorName#","target":"scip-python python colorama 0.4.6 `colorama.ansi`/AnsiFore#WHITE.","attributes":{"type":"uses","at":[27,18,27,23]}},{"key":"geid_130_4431","source":"scip-python python temp indexer `pilot.utils.style`/ColorName#","target":"scip-python python colorama 0.4.6 `colorama.ansi`/Fore.Fore.","attributes":{"type":"uses","at":[27,25,27,29]}},{"key":"geid_130_4432","source":"scip-python python temp indexer `pilot.utils.style`/ColorName#","target":"scip-python python colorama 0.4.6 `colorama.ansi`/AnsiFore#LIGHTWHITE_EX.","attributes":{"type":"uses","at":[27,30,27,43]}},{"key":"geid_130_4433","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/Theme#","attributes":{"type":"uses","at":[32,4,32,9]}},{"key":"geid_130_4434","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/Theme#DARK.","attributes":{"type":"uses","at":[32,10,32,14]}},{"key":"geid_130_4435","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/Theme#","attributes":{"type":"uses","at":[40,4,40,9]}},{"key":"geid_130_4436","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/Theme#LIGHT.","attributes":{"type":"uses","at":[40,10,40,15]}},{"key":"geid_130_4437","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/Theme#","attributes":{"type":"uses","at":[48,4,48,9]}},{"key":"geid_130_4438","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/Theme#YELLOW.","attributes":{"type":"uses","at":[48,10,48,16]}},{"key":"geid_130_4439","source":"scip-python python temp indexer `pilot.utils.style`/ThemeStyle#get_style().","target":"scip-python python temp indexer `pilot.utils.style`/THEME_STYLES.","attributes":{"type":"uses","at":[77,15,77,27]}},{"key":"geid_130_4440","source":"scip-python python temp indexer `pilot.utils.style`/ThemeStyle#get_style().","target":"scip-python python temp indexer `pilot.utils.style`/ThemeStyle#theme.","attributes":{"type":"uses","at":[77,33,77,38]}},{"key":"geid_130_4441","source":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#__init__().","target":"scip-python python temp indexer `pilot.utils.style`/Theme#","attributes":{"type":"uses","at":[85,30,85,35]}},{"key":"geid_130_4442","source":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#__init__().","target":"scip-python python temp indexer `pilot.utils.style`/Theme#","attributes":{"type":"uses","at":[85,38,85,43]}},{"key":"geid_130_4443","source":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#__init__().","target":"scip-python python temp indexer `pilot.utils.style`/Theme#DARK.","attributes":{"type":"uses","at":[85,44,85,48]}},{"key":"geid_130_4444","source":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#__init__().","target":"scip-python python temp indexer `pilot.utils.style`/ThemeStyle#","attributes":{"type":"uses","at":[92,27,92,37]}},{"key":"geid_130_4445","source":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#get_style().","target":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#theme_style.","attributes":{"type":"uses","at":[102,20,102,31]}},{"key":"geid_130_4446","source":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#get_style().","target":"scip-python python temp indexer `pilot.utils.style`/ThemeStyle#get_style().","attributes":{"type":"uses","at":[102,32,102,41]}},{"key":"geid_130_4447","source":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#get_color().","target":"scip-python python temp indexer `pilot.utils.style`/ColorName#","attributes":{"type":"uses","at":[104,36,104,45]}},{"key":"geid_130_4448","source":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#get_color().","target":"scip-python python python-stdlib 3.11 enum/Enum#value().","attributes":{"type":"uses","at":[114,26,114,31]}},{"key":"geid_130_4449","source":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#get_color().","target":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#theme.","attributes":{"type":"uses","at":[114,37,114,42]}},{"key":"geid_130_4450","source":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#get_color().","target":"scip-python python temp indexer `pilot.utils.style`/Theme#","attributes":{"type":"uses","at":[114,46,114,51]}},{"key":"geid_130_4451","source":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#get_color().","target":"scip-python python temp indexer `pilot.utils.style`/Theme#LIGHT.","attributes":{"type":"uses","at":[114,52,114,57]}},{"key":"geid_130_4452","source":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#set_theme().","target":"scip-python python temp indexer `pilot.utils.style`/Theme#","attributes":{"type":"uses","at":[116,31,116,36]}},{"key":"geid_130_4453","source":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#set_theme().","target":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#theme.","attributes":{"type":"uses","at":[123,13,123,18]}},{"key":"geid_130_4454","source":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#set_theme().","target":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#theme_style.","attributes":{"type":"uses","at":[124,13,124,24]}},{"key":"geid_130_4455","source":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#set_theme().","target":"scip-python python temp indexer `pilot.utils.style`/ThemeStyle#theme.","attributes":{"type":"uses","at":[124,25,124,30]}},{"key":"geid_130_4456","source":"scip-python python temp indexer `pilot.utils.style`/get_color_function().","target":"scip-python python temp indexer `pilot.utils.style`/ColorName#","attributes":{"type":"uses","at":[127,35,127,44]}},{"key":"geid_130_4457","source":"scip-python python temp indexer `pilot.utils.style`/get_color_function().color_func().","target":"scip-python python temp indexer `pilot.utils.style`/style_config.","attributes":{"type":"uses","at":[149,16,149,28]}},{"key":"geid_130_4458","source":"scip-python python temp indexer `pilot.utils.style`/get_color_function().color_func().","target":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#get_color().","attributes":{"type":"uses","at":[149,29,149,38]}},{"key":"geid_130_4459","source":"scip-python python temp indexer `pilot.utils.style`/get_color_function().color_func().","target":"scip-python python colorama 0.4.6 `colorama.ansi`/Style.Style.","attributes":{"type":"uses","at":[150,16,150,29]}},{"key":"geid_130_4460","source":"scip-python python temp indexer `pilot.utils.style`/get_color_function().color_func().","target":"scip-python python colorama 0.4.6 `colorama.ansi`/AnsiStyle#BRIGHT.","attributes":{"type":"uses","at":[150,30,150,36]}},{"key":"geid_130_4461","source":"scip-python python temp indexer `pilot.utils.style`/get_color_function().color_func().","target":"scip-python python colorama 0.4.6 `colorama.ansi`/Style.Style.","attributes":{"type":"uses","at":[151,16,151,29]}},{"key":"geid_130_4462","source":"scip-python python temp indexer `pilot.utils.style`/get_color_function().color_func().","target":"scip-python python colorama 0.4.6 `colorama.ansi`/AnsiStyle#RESET_ALL.","attributes":{"type":"uses","at":[151,30,151,39]}},{"key":"geid_130_4463","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/StyleConfig#","attributes":{"type":"uses","at":[157,15,157,26]}},{"key":"geid_130_4464","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/get_color_function().","attributes":{"type":"uses","at":[160,12,160,30]}},{"key":"geid_130_4465","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/ColorName#","attributes":{"type":"uses","at":[160,31,160,40]}},{"key":"geid_130_4466","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/ColorName#RED.","attributes":{"type":"uses","at":[160,41,160,44]}},{"key":"geid_130_4467","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/get_color_function().","attributes":{"type":"uses","at":[161,17,161,35]}},{"key":"geid_130_4468","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/ColorName#","attributes":{"type":"uses","at":[161,36,161,45]}},{"key":"geid_130_4469","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/ColorName#RED.","attributes":{"type":"uses","at":[161,46,161,49]}},{"key":"geid_130_4470","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/get_color_function().","attributes":{"type":"uses","at":[162,14,162,32]}},{"key":"geid_130_4471","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/ColorName#","attributes":{"type":"uses","at":[162,33,162,42]}},{"key":"geid_130_4472","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/ColorName#GREEN.","attributes":{"type":"uses","at":[162,43,162,48]}},{"key":"geid_130_4473","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/get_color_function().","attributes":{"type":"uses","at":[163,19,163,37]}},{"key":"geid_130_4474","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/ColorName#","attributes":{"type":"uses","at":[163,38,163,47]}},{"key":"geid_130_4475","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/ColorName#GREEN.","attributes":{"type":"uses","at":[163,48,163,53]}},{"key":"geid_130_4476","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/get_color_function().","attributes":{"type":"uses","at":[164,15,164,33]}},{"key":"geid_130_4477","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/ColorName#","attributes":{"type":"uses","at":[164,34,164,43]}},{"key":"geid_130_4478","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/ColorName#YELLOW.","attributes":{"type":"uses","at":[164,44,164,50]}},{"key":"geid_130_4479","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/get_color_function().","attributes":{"type":"uses","at":[165,20,165,38]}},{"key":"geid_130_4480","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/ColorName#","attributes":{"type":"uses","at":[165,39,165,48]}},{"key":"geid_130_4481","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/ColorName#YELLOW.","attributes":{"type":"uses","at":[165,49,165,55]}},{"key":"geid_130_4482","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/get_color_function().","attributes":{"type":"uses","at":[166,13,166,31]}},{"key":"geid_130_4483","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/ColorName#","attributes":{"type":"uses","at":[166,32,166,41]}},{"key":"geid_130_4484","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/ColorName#BLUE.","attributes":{"type":"uses","at":[166,42,166,46]}},{"key":"geid_130_4485","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/get_color_function().","attributes":{"type":"uses","at":[167,18,167,36]}},{"key":"geid_130_4486","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/ColorName#","attributes":{"type":"uses","at":[167,37,167,46]}},{"key":"geid_130_4487","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/ColorName#BLUE.","attributes":{"type":"uses","at":[167,47,167,51]}},{"key":"geid_130_4488","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/get_color_function().","attributes":{"type":"uses","at":[168,13,168,31]}},{"key":"geid_130_4489","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/ColorName#","attributes":{"type":"uses","at":[168,32,168,41]}},{"key":"geid_130_4490","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/ColorName#CYAN.","attributes":{"type":"uses","at":[168,42,168,46]}},{"key":"geid_130_4491","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/get_color_function().","attributes":{"type":"uses","at":[169,18,169,36]}},{"key":"geid_130_4492","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/ColorName#","attributes":{"type":"uses","at":[169,37,169,46]}},{"key":"geid_130_4493","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/ColorName#CYAN.","attributes":{"type":"uses","at":[169,47,169,51]}},{"key":"geid_130_4494","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/get_color_function().","attributes":{"type":"uses","at":[170,14,170,32]}},{"key":"geid_130_4495","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/ColorName#","attributes":{"type":"uses","at":[170,33,170,42]}},{"key":"geid_130_4496","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/ColorName#WHITE.","attributes":{"type":"uses","at":[170,43,170,48]}},{"key":"geid_130_4497","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/get_color_function().","attributes":{"type":"uses","at":[171,19,171,37]}},{"key":"geid_130_4498","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/ColorName#","attributes":{"type":"uses","at":[171,38,171,47]}},{"key":"geid_130_4499","source":"scip-python python temp indexer `pilot.utils.style`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/ColorName#WHITE.","attributes":{"type":"uses","at":[171,48,171,53]}},{"key":"geid_130_4500","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#send().","attributes":{"type":"defines","at":[198,4,230,29]}},{"key":"geid_130_4501","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#stop().","attributes":{"type":"defines","at":[184,4,196,67]}},{"key":"geid_130_4502","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#start().","attributes":{"type":"defines","at":[174,4,182,28]}},{"key":"geid_130_4503","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#inc().","attributes":{"type":"defines","at":[154,4,172,32]}},{"key":"geid_130_4504","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#set().","attributes":{"type":"defines","at":[134,4,152,31]}},{"key":"geid_130_4505","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#setup().","attributes":{"type":"defines","at":[111,4,132,9]}},{"key":"geid_130_4506","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#clear_data().","attributes":{"type":"defines","at":[65,4,109,28]}},{"key":"geid_130_4507","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#__init__().","attributes":{"type":"defines","at":[48,4,63,13]}},{"key":"geid_130_4508","source":"scip-python python temp indexer `pilot.utils.telemetry`/__init__:","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#","attributes":{"type":"defines","at":[13,0,230,29]}},{"key":"geid_130_4509","source":"scip-python python temp indexer `pilot.utils.telemetry`/__init__:","target":"scip-python python python-stdlib 3.11 logging/__init__:","attributes":{"type":"uses","at":[0,5,0,12]}},{"key":"geid_130_4510","source":"scip-python python temp indexer `pilot.utils.telemetry`/__init__:","target":"scip-python python python-stdlib 3.11 logging/getLogger().","attributes":{"type":"uses","at":[0,20,0,29]}},{"key":"geid_130_4511","source":"scip-python python temp indexer `pilot.utils.telemetry`/__init__:","target":"scip-python python python-stdlib 3.11 sys/__init__:","attributes":{"type":"uses","at":[1,7,1,10]}},{"key":"geid_130_4512","source":"scip-python python temp indexer `pilot.utils.telemetry`/__init__:","target":"scip-python python python-stdlib 3.11 time/__init__:","attributes":{"type":"uses","at":[2,7,2,11]}},{"key":"geid_130_4513","source":"scip-python python temp indexer `pilot.utils.telemetry`/__init__:","target":"scip-python python python-stdlib 3.11 typing/__init__:","attributes":{"type":"uses","at":[3,5,3,11]}},{"key":"geid_130_4514","source":"scip-python python temp indexer `pilot.utils.telemetry`/__init__:","target":"scip-python python python-stdlib 3.11 typing/Any.","attributes":{"type":"uses","at":[3,19,3,22]}},{"key":"geid_130_4515","source":"scip-python python temp indexer `pilot.utils.telemetry`/__init__:","target":"scip-python python python-stdlib 3.11 uuid/__init__:","attributes":{"type":"uses","at":[4,5,4,9]}},{"key":"geid_130_4516","source":"scip-python python temp indexer `pilot.utils.telemetry`/__init__:","target":"scip-python python python-stdlib 3.11 uuid/uuid4().","attributes":{"type":"uses","at":[4,17,4,22]}},{"key":"geid_130_4517","source":"scip-python python temp indexer `pilot.utils.telemetry`/__init__:","target":"scip-python python requests 2.31.0 requests/__init__:","attributes":{"type":"uses","at":[6,7,6,15]}},{"key":"geid_130_4518","source":"scip-python python temp indexer `pilot.utils.telemetry`/__init__:","target":"scip-python python temp indexer `pilot.utils.settings`/__init__:","attributes":{"type":"uses","at":[8,5,8,14]}},{"key":"geid_130_4519","source":"scip-python python temp indexer `pilot.utils.telemetry`/__init__:","target":"scip-python python temp indexer `pilot.utils.settings`/settings.","attributes":{"type":"uses","at":[8,22,8,30]}},{"key":"geid_130_4520","source":"scip-python python temp indexer `pilot.utils.telemetry`/__init__:","target":"scip-python python temp indexer `pilot.utils.settings`/version.","attributes":{"type":"uses","at":[8,32,8,39]}},{"key":"geid_130_4521","source":"scip-python python temp indexer `pilot.utils.telemetry`/__init__:","target":"scip-python python temp indexer `pilot.utils.settings`/config_path.","attributes":{"type":"uses","at":[8,41,8,52]}},{"key":"geid_130_4522","source":"scip-python python temp indexer `pilot.utils.telemetry`/__init__:","target":"scip-python python python-stdlib 3.11 logging/getLogger().","attributes":{"type":"uses","at":[10,6,10,15]}},{"key":"geid_130_4523","source":"scip-python python temp indexer `pilot.utils.telemetry`/__init__:","target":"scip-python python temp indexer `pilot.utils.telemetry`/","attributes":{"type":"uses","at":[10,16,10,24]}},{"key":"geid_130_4524","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#__init__().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#clear_data().","attributes":{"type":"uses","at":[52,13,52,23]}},{"key":"geid_130_4525","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#__init__().","target":"scip-python python temp indexer `pilot.utils.settings`/settings.","attributes":{"type":"uses","at":[54,11,54,19]}},{"key":"geid_130_4526","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#__init__().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#enabled.","attributes":{"type":"uses","at":[55,17,55,24]}},{"key":"geid_130_4527","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#__init__().","target":"scip-python python temp indexer `pilot.utils.settings`/settings.","attributes":{"type":"uses","at":[55,27,55,35]}},{"key":"geid_130_4528","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#__init__().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#telemetry_id.","attributes":{"type":"uses","at":[56,17,56,29]}},{"key":"geid_130_4529","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#__init__().","target":"scip-python python temp indexer `pilot.utils.settings`/settings.","attributes":{"type":"uses","at":[56,32,56,40]}},{"key":"geid_130_4530","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#__init__().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#endpoint.","attributes":{"type":"uses","at":[57,17,57,25]}},{"key":"geid_130_4531","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#__init__().","target":"scip-python python temp indexer `pilot.utils.settings`/settings.","attributes":{"type":"uses","at":[57,28,57,36]}},{"key":"geid_130_4532","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#__init__().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#enabled.","attributes":{"type":"uses","at":[59,16,59,23]}},{"key":"geid_130_4533","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#__init__().","target":"scip-python python temp indexer `pilot.utils.telemetry`/log.","attributes":{"type":"uses","at":[60,12,60,15]}},{"key":"geid_130_4534","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#__init__().","target":"scip-python python python-stdlib 3.11 logging/Logger#debug().","attributes":{"type":"uses","at":[60,16,60,21]}},{"key":"geid_130_4535","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#__init__().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#telemetry_id.","attributes":{"type":"uses","at":[61,56,61,68]}},{"key":"geid_130_4536","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#__init__().","target":"scip-python python temp indexer `pilot.utils.settings`/config_path.","attributes":{"type":"uses","at":[62,46,62,57]}},{"key":"geid_130_4537","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#clear_data().","target":"scip-python python python-stdlib 3.11 sys/__init__:","attributes":{"type":"uses","at":[71,24,71,27]}},{"key":"geid_130_4538","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#clear_data().","target":"scip-python python python-stdlib 3.11 sys/platform.platform.","attributes":{"type":"uses","at":[71,28,71,36]}},{"key":"geid_130_4539","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#clear_data().","target":"scip-python python python-stdlib 3.11 sys/__init__:","attributes":{"type":"uses","at":[73,30,73,33]}},{"key":"geid_130_4540","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#clear_data().","target":"scip-python python python-stdlib 3.11 sys/version.version.","attributes":{"type":"uses","at":[73,34,73,41]}},{"key":"geid_130_4541","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#clear_data().","target":"scip-python python temp indexer `pilot.utils.settings`/version.","attributes":{"type":"uses","at":[75,29,75,36]}},{"key":"geid_130_4542","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#clear_data().","target":"scip-python python python-stdlib 3.11 sys/__init__:","attributes":{"type":"uses","at":[101,11,101,14]}},{"key":"geid_130_4543","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#clear_data().","target":"scip-python python python-stdlib 3.11 sys/platform.platform.","attributes":{"type":"uses","at":[101,15,101,23]}},{"key":"geid_130_4544","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#clear_data().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#data.","attributes":{"type":"uses","at":[104,21,104,25]}},{"key":"geid_130_4545","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#clear_data().","target":"scip-python python temp indexer `pilot.utils.telemetry`/log.","attributes":{"type":"uses","at":[106,16,106,19]}},{"key":"geid_130_4546","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#clear_data().","target":"scip-python python python-stdlib 3.11 logging/Logger#debug().","attributes":{"type":"uses","at":[106,20,106,25]}},{"key":"geid_130_4547","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#setup().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#enabled.","attributes":{"type":"uses","at":[117,16,117,23]}},{"key":"geid_130_4548","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#setup().","target":"scip-python python temp indexer `pilot.utils.telemetry`/log.","attributes":{"type":"uses","at":[118,12,118,15]}},{"key":"geid_130_4549","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#setup().","target":"scip-python python python-stdlib 3.11 logging/Logger#debug().","attributes":{"type":"uses","at":[118,16,118,21]}},{"key":"geid_130_4550","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#setup().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#telemetry_id.","attributes":{"type":"uses","at":[121,13,121,25]}},{"key":"geid_130_4551","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#setup().","target":"scip-python python python-stdlib 3.11 uuid/uuid4().","attributes":{"type":"uses","at":[121,41,121,46]}},{"key":"geid_130_4552","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#setup().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#endpoint.","attributes":{"type":"uses","at":[122,13,122,21]}},{"key":"geid_130_4553","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#setup().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#DEFAULT_ENDPOINT.","attributes":{"type":"uses","at":[122,29,122,45]}},{"key":"geid_130_4554","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#setup().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#enabled.","attributes":{"type":"uses","at":[123,13,123,20]}},{"key":"geid_130_4555","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#setup().","target":"scip-python python temp indexer `pilot.utils.telemetry`/log.","attributes":{"type":"uses","at":[124,8,124,11]}},{"key":"geid_130_4556","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#setup().","target":"scip-python python python-stdlib 3.11 logging/Logger#debug().","attributes":{"type":"uses","at":[124,12,124,17]}},{"key":"geid_130_4557","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#setup().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#telemetry_id.","attributes":{"type":"uses","at":[125,74,125,86]}},{"key":"geid_130_4558","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#setup().","target":"scip-python python temp indexer `pilot.utils.settings`/settings.","attributes":{"type":"uses","at":[128,8,128,16]}},{"key":"geid_130_4559","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#setup().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#telemetry_id.","attributes":{"type":"uses","at":[129,23,129,35]}},{"key":"geid_130_4560","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#setup().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#endpoint.","attributes":{"type":"uses","at":[130,29,130,37]}},{"key":"geid_130_4561","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#setup().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#enabled.","attributes":{"type":"uses","at":[131,28,131,35]}},{"key":"geid_130_4562","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#set().","target":"scip-python python python-stdlib 3.11 typing/Any.","attributes":{"type":"uses","at":[134,36,134,39]}},{"key":"geid_130_4563","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#set().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#enabled.","attributes":{"type":"uses","at":[143,20,143,27]}},{"key":"geid_130_4564","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#set().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#data.","attributes":{"type":"uses","at":[146,28,146,32]}},{"key":"geid_130_4565","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#set().","target":"scip-python python temp indexer `pilot.utils.telemetry`/log.","attributes":{"type":"uses","at":[147,12,147,15]}},{"key":"geid_130_4566","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#set().","target":"scip-python python python-stdlib 3.11 logging/Logger#error().","attributes":{"type":"uses","at":[147,16,147,21]}},{"key":"geid_130_4567","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#set().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#data.","attributes":{"type":"uses","at":[152,13,152,17]}},{"key":"geid_130_4568","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#inc().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#enabled.","attributes":{"type":"uses","at":[163,20,163,27]}},{"key":"geid_130_4569","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#inc().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#data.","attributes":{"type":"uses","at":[166,28,166,32]}},{"key":"geid_130_4570","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#inc().","target":"scip-python python temp indexer `pilot.utils.telemetry`/log.","attributes":{"type":"uses","at":[167,12,167,15]}},{"key":"geid_130_4571","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#inc().","target":"scip-python python python-stdlib 3.11 logging/Logger#error().","attributes":{"type":"uses","at":[167,16,167,21]}},{"key":"geid_130_4572","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#inc().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#data.","attributes":{"type":"uses","at":[172,13,172,17]}},{"key":"geid_130_4573","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#start().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#enabled.","attributes":{"type":"uses","at":[178,20,178,27]}},{"key":"geid_130_4574","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#start().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#start_time.","attributes":{"type":"uses","at":[181,13,181,23]}},{"key":"geid_130_4575","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#start().","target":"scip-python python python-stdlib 3.11 time/__init__:","attributes":{"type":"uses","at":[181,26,181,30]}},{"key":"geid_130_4576","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#start().","target":"scip-python python python-stdlib 3.11 time/time().","attributes":{"type":"uses","at":[181,31,181,35]}},{"key":"geid_130_4577","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#start().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#end_time.","attributes":{"type":"uses","at":[182,13,182,21]}},{"key":"geid_130_4578","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#stop().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#enabled.","attributes":{"type":"uses","at":[188,20,188,27]}},{"key":"geid_130_4579","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#stop().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#start_time.","attributes":{"type":"uses","at":[191,16,191,26]}},{"key":"geid_130_4580","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#stop().","target":"scip-python python temp indexer `pilot.utils.telemetry`/log.","attributes":{"type":"uses","at":[192,12,192,15]}},{"key":"geid_130_4581","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#stop().","target":"scip-python python python-stdlib 3.11 logging/Logger#error().","attributes":{"type":"uses","at":[192,16,192,21]}},{"key":"geid_130_4582","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#stop().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#end_time.","attributes":{"type":"uses","at":[195,13,195,21]}},{"key":"geid_130_4583","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#stop().","target":"scip-python python python-stdlib 3.11 time/__init__:","attributes":{"type":"uses","at":[195,24,195,28]}},{"key":"geid_130_4584","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#stop().","target":"scip-python python python-stdlib 3.11 time/time().","attributes":{"type":"uses","at":[195,29,195,33]}},{"key":"geid_130_4585","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#stop().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#data.","attributes":{"type":"uses","at":[196,13,196,17]}},{"key":"geid_130_4586","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#stop().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#end_time.","attributes":{"type":"uses","at":[196,41,196,49]}},{"key":"geid_130_4587","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#stop().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#start_time.","attributes":{"type":"uses","at":[196,57,196,67]}},{"key":"geid_130_4588","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#send().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#enabled.","attributes":{"type":"uses","at":[204,20,204,27]}},{"key":"geid_130_4589","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#send().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#endpoint.","attributes":{"type":"uses","at":[207,16,207,24]}},{"key":"geid_130_4590","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#send().","target":"scip-python python temp indexer `pilot.utils.telemetry`/log.","attributes":{"type":"uses","at":[208,12,208,15]}},{"key":"geid_130_4591","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#send().","target":"scip-python python python-stdlib 3.11 logging/Logger#error().","attributes":{"type":"uses","at":[208,16,208,21]}},{"key":"geid_130_4592","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#send().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#start_time.","attributes":{"type":"uses","at":[211,16,211,26]}},{"key":"geid_130_4593","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#send().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#end_time.","attributes":{"type":"uses","at":[211,48,211,56]}},{"key":"geid_130_4594","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#send().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#stop().","attributes":{"type":"uses","at":[212,17,212,21]}},{"key":"geid_130_4595","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#send().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#telemetry_id.","attributes":{"type":"uses","at":[215,27,215,39]}},{"key":"geid_130_4596","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#send().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#data.","attributes":{"type":"uses","at":[217,25,217,29]}},{"key":"geid_130_4597","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#send().","target":"scip-python python temp indexer `pilot.utils.telemetry`/log.","attributes":{"type":"uses","at":[220,8,220,11]}},{"key":"geid_130_4598","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#send().","target":"scip-python python python-stdlib 3.11 logging/Logger#debug().","attributes":{"type":"uses","at":[220,12,220,17]}},{"key":"geid_130_4599","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#send().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#endpoint.","attributes":{"type":"uses","at":[221,74,221,82]}},{"key":"geid_130_4600","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#send().","target":"scip-python python requests 2.31.0 requests/__init__:","attributes":{"type":"uses","at":[224,12,224,20]}},{"key":"geid_130_4601","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#send().","target":"scip-python python requests 2.31.0 `requests.api`/post().","attributes":{"type":"uses","at":[224,21,224,25]}},{"key":"geid_130_4602","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#send().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#endpoint.","attributes":{"type":"uses","at":[224,31,224,39]}},{"key":"geid_130_4603","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#send().","target":"scip-python python temp indexer `pilot.utils.telemetry`/log.","attributes":{"type":"uses","at":[226,12,226,15]}},{"key":"geid_130_4604","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#send().","target":"scip-python python python-stdlib 3.11 logging/Logger#error().","attributes":{"type":"uses","at":[226,16,226,21]}},{"key":"geid_130_4605","source":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#send().","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#clear_data().","attributes":{"type":"uses","at":[230,17,230,27]}},{"key":"geid_130_4606","source":"scip-python python temp indexer `pilot.utils.telemetry`/__init__:","target":"scip-python python temp indexer `pilot.utils.telemetry`/Telemetry#","attributes":{"type":"uses","at":[233,12,233,21]}},{"key":"geid_130_4607","source":"scip-python python temp indexer `pilot.utils.test_arguments`/__init__:","target":"scip-python python temp indexer `pilot.utils.test_arguments`/test_username_to_uuid().","attributes":{"type":"defines","at":[38,0,39,82]}},{"key":"geid_130_4608","source":"scip-python python temp indexer `pilot.utils.test_arguments`/__init__:","target":"scip-python python temp indexer `pilot.utils.test_arguments`/test_gitconfig_not_present().","attributes":{"type":"defines","at":[30,0,35,43]}},{"key":"geid_130_4609","source":"scip-python python temp indexer `pilot.utils.test_arguments`/__init__:","target":"scip-python python temp indexer `pilot.utils.test_arguments`/test_email_not_found_in_gitconfig().","attributes":{"type":"defines","at":[17,0,27,47]}},{"key":"geid_130_4610","source":"scip-python python temp indexer `pilot.utils.test_arguments`/__init__:","target":"scip-python python temp indexer `pilot.utils.test_arguments`/test_email_found_in_gitconfig().","attributes":{"type":"defines","at":[6,0,14,52]}},{"key":"geid_130_4611","source":"scip-python python temp indexer `pilot.utils.test_arguments`/__init__:","target":"scip-python python python-stdlib 3.11 `unittest.mock`/__init__:","attributes":{"type":"uses","at":[1,5,1,18]}},{"key":"geid_130_4612","source":"scip-python python temp indexer `pilot.utils.test_arguments`/__init__:","target":"scip-python python python-stdlib 3.11 uuid/__init__:","attributes":{"type":"uses","at":[2,7,2,11]}},{"key":"geid_130_4613","source":"scip-python python temp indexer `pilot.utils.test_arguments`/__init__:","target":"scip-python python temp indexer `pilot.utils.arguments`/__init__:","attributes":{"type":"uses","at":[3,5,3,15]}},{"key":"geid_130_4614","source":"scip-python python temp indexer `pilot.utils.test_arguments`/__init__:","target":"scip-python python temp indexer `pilot.utils.arguments`/get_email().","attributes":{"type":"uses","at":[3,23,3,32]}},{"key":"geid_130_4615","source":"scip-python python temp indexer `pilot.utils.test_arguments`/__init__:","target":"scip-python python temp indexer `pilot.utils.arguments`/username_to_uuid().","attributes":{"type":"uses","at":[3,34,3,50]}},{"key":"geid_130_4616","source":"scip-python python temp indexer `pilot.utils.test_arguments`/test_email_found_in_gitconfig().","target":"scip-python python temp indexer `pilot.utils.arguments`/get_email().","attributes":{"type":"uses","at":[14,19,14,28]}},{"key":"geid_130_4617","source":"scip-python python temp indexer `pilot.utils.test_arguments`/test_email_not_found_in_gitconfig().","target":"scip-python python python-stdlib 3.11 uuid/__init__:","attributes":{"type":"uses","at":[26,30,26,34]}},{"key":"geid_130_4618","source":"scip-python python temp indexer `pilot.utils.test_arguments`/test_email_not_found_in_gitconfig().","target":"scip-python python temp indexer `pilot.utils.arguments`/get_email().","attributes":{"type":"uses","at":[27,23,27,32]}},{"key":"geid_130_4619","source":"scip-python python temp indexer `pilot.utils.test_arguments`/test_gitconfig_not_present().","target":"scip-python python python-stdlib 3.11 uuid/__init__:","attributes":{"type":"uses","at":[34,26,34,30]}},{"key":"geid_130_4620","source":"scip-python python temp indexer `pilot.utils.test_arguments`/test_gitconfig_not_present().","target":"scip-python python temp indexer `pilot.utils.arguments`/get_email().","attributes":{"type":"uses","at":[35,19,35,28]}},{"key":"geid_130_4621","source":"scip-python python temp indexer `pilot.utils.test_arguments`/test_username_to_uuid().","target":"scip-python python temp indexer `pilot.utils.arguments`/username_to_uuid().","attributes":{"type":"uses","at":[39,11,39,27]}},{"key":"geid_130_4622","source":"scip-python python temp indexer `pilot.utils.test_files`/__init__:","target":"scip-python python temp indexer `pilot.utils.test_files`/test_setup_workspace_without_existing_workspace().","attributes":{"type":"defines","at":[30,0,36,75]}},{"key":"geid_130_4623","source":"scip-python python temp indexer `pilot.utils.test_files`/__init__:","target":"scip-python python temp indexer `pilot.utils.test_files`/test_setup_workspace_with_root_arg().","attributes":{"type":"defines","at":[20,0,27,73]}},{"key":"geid_130_4624","source":"scip-python python temp indexer `pilot.utils.test_files`/__init__:","target":"scip-python python temp indexer `pilot.utils.test_files`/test_setup_workspace_with_existing_workspace().","attributes":{"type":"defines","at":[13,0,17,38]}},{"key":"geid_130_4625","source":"scip-python python temp indexer `pilot.utils.test_files`/__init__:","target":"scip-python python temp indexer `pilot.utils.test_files`/mocked_abspath().","attributes":{"type":"defines","at":[9,0,10,37]}},{"key":"geid_130_4626","source":"scip-python python temp indexer `pilot.utils.test_files`/__init__:","target":"scip-python python temp indexer `pilot.utils.test_files`/mocked_create_directory().","attributes":{"type":"defines","at":[5,0,6,10]}},{"key":"geid_130_4627","source":"scip-python python temp indexer `pilot.utils.test_files`/__init__:","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[0,7,0,9]}},{"key":"geid_130_4628","source":"scip-python python temp indexer `pilot.utils.test_files`/__init__:","target":"scip-python python python-stdlib 3.11 `unittest.mock`/__init__:","attributes":{"type":"uses","at":[1,5,1,18]}},{"key":"geid_130_4629","source":"scip-python python temp indexer `pilot.utils.test_files`/__init__:","target":"scip-python python temp indexer `pilot.utils.files`/__init__:","attributes":{"type":"uses","at":[2,5,2,16]}},{"key":"geid_130_4630","source":"scip-python python temp indexer `pilot.utils.test_files`/__init__:","target":"scip-python python temp indexer `pilot.utils.files`/setup_workspace().","attributes":{"type":"uses","at":[2,24,2,39]}},{"key":"geid_130_4631","source":"scip-python python temp indexer `pilot.utils.test_files`/test_setup_workspace_with_existing_workspace().","target":"scip-python python temp indexer `pilot.utils.test_files`/mocked_create_directory().","attributes":{"type":"uses","at":[13,46,13,69]}},{"key":"geid_130_4632","source":"scip-python python temp indexer `pilot.utils.test_files`/test_setup_workspace_with_existing_workspace().","target":"scip-python python temp indexer `pilot.utils.files`/setup_workspace().","attributes":{"type":"uses","at":[16,13,16,28]}},{"key":"geid_130_4633","source":"scip-python python temp indexer `pilot.utils.test_files`/test_setup_workspace_with_root_arg().","target":"scip-python python temp indexer `pilot.utils.test_files`/mocked_abspath().","attributes":{"type":"uses","at":[23,43,23,57]}},{"key":"geid_130_4634","source":"scip-python python temp indexer `pilot.utils.test_files`/test_setup_workspace_with_root_arg().","target":"scip-python python temp indexer `pilot.utils.test_files`/mocked_create_directory().","attributes":{"type":"uses","at":[24,39,24,62]}},{"key":"geid_130_4635","source":"scip-python python temp indexer `pilot.utils.test_files`/test_setup_workspace_with_root_arg().","target":"scip-python python temp indexer `pilot.utils.files`/setup_workspace().","attributes":{"type":"uses","at":[26,13,26,28]}},{"key":"geid_130_4636","source":"scip-python python temp indexer `pilot.utils.test_files`/test_setup_workspace_without_existing_workspace().","target":"scip-python python temp indexer `pilot.utils.test_files`/mocked_create_directory().","attributes":{"type":"uses","at":[31,46,31,69]}},{"key":"geid_130_4637","source":"scip-python python temp indexer `pilot.utils.test_files`/test_setup_workspace_without_existing_workspace().","target":"scip-python python temp indexer `pilot.utils.files`/setup_workspace().","attributes":{"type":"uses","at":[35,13,35,28]}},{"key":"geid_130_4638","source":"scip-python python temp indexer `pilot.utils.test_function_calling`/__init__:","target":"scip-python python temp indexer `pilot.utils.test_function_calling`/test_llama_json_prompter_named().","attributes":{"type":"defines","at":[128,0,155,38]}},{"key":"geid_130_4639","source":"scip-python python temp indexer `pilot.utils.test_function_calling`/__init__:","target":"scip-python python temp indexer `pilot.utils.test_function_calling`/test_json_prompter_named().","attributes":{"type":"defines","at":[100,0,125,30]}},{"key":"geid_130_4640","source":"scip-python python temp indexer `pilot.utils.test_function_calling`/__init__:","target":"scip-python python temp indexer `pilot.utils.test_function_calling`/test_llama_json_prompter().","attributes":{"type":"defines","at":[81,0,97,38]}},{"key":"geid_130_4641","source":"scip-python python temp indexer `pilot.utils.test_function_calling`/__init__:","target":"scip-python python temp indexer `pilot.utils.test_function_calling`/test_json_prompter().","attributes":{"type":"defines","at":[64,0,78,30]}},{"key":"geid_130_4642","source":"scip-python python temp indexer `pilot.utils.test_function_calling`/TestFunctionCalling#","target":"scip-python python temp indexer `pilot.utils.test_function_calling`/TestFunctionCalling#test_parse_agent_response_multiple_args().","attributes":{"type":"defines","at":[51,4,61,41]}},{"key":"geid_130_4643","source":"scip-python python temp indexer `pilot.utils.test_function_calling`/TestFunctionCalling#","target":"scip-python python temp indexer `pilot.utils.test_function_calling`/TestFunctionCalling#test_parse_agent_response_markdown().","attributes":{"type":"defines","at":[39,4,49,55]}},{"key":"geid_130_4644","source":"scip-python python temp indexer `pilot.utils.test_function_calling`/TestFunctionCalling#","target":"scip-python python temp indexer `pilot.utils.test_function_calling`/TestFunctionCalling#test_parse_agent_response_json_markdown().","attributes":{"type":"defines","at":[27,4,37,55]}},{"key":"geid_130_4645","source":"scip-python python temp indexer `pilot.utils.test_function_calling`/TestFunctionCalling#","target":"scip-python python temp indexer `pilot.utils.test_function_calling`/TestFunctionCalling#test_parse_agent_response_json().","attributes":{"type":"defines","at":[16,4,25,55]}},{"key":"geid_130_4646","source":"scip-python python temp indexer `pilot.utils.test_function_calling`/TestFunctionCalling#","target":"scip-python python temp indexer `pilot.utils.test_function_calling`/TestFunctionCalling#test_parse_agent_response_text().","attributes":{"type":"defines","at":[6,4,14,41]}},{"key":"geid_130_4647","source":"scip-python python temp indexer `pilot.utils.test_function_calling`/__init__:","target":"scip-python python temp indexer `pilot.utils.test_function_calling`/TestFunctionCalling#","attributes":{"type":"defines","at":[5,0,61,41]}},{"key":"geid_130_4648","source":"scip-python python temp indexer `pilot.utils.test_function_calling`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/__init__:","attributes":{"type":"uses","at":[0,5,0,25]}},{"key":"geid_130_4649","source":"scip-python python temp indexer `pilot.utils.test_function_calling`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/ARCHITECTURE.","attributes":{"type":"uses","at":[0,33,0,45]}},{"key":"geid_130_4650","source":"scip-python python temp indexer `pilot.utils.test_function_calling`/__init__:","target":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","attributes":{"type":"uses","at":[1,5,1,25]}},{"key":"geid_130_4651","source":"scip-python python temp indexer `pilot.utils.test_function_calling`/__init__:","target":"scip-python python temp indexer `pilot.utils.llm_connection`/clean_json_response().","attributes":{"type":"uses","at":[1,33,1,52]}},{"key":"geid_130_4652","source":"scip-python python temp indexer `pilot.utils.test_function_calling`/__init__:","target":"scip-python python temp indexer `pilot.utils.function_calling`/__init__:","attributes":{"type":"uses","at":[2,5,2,22]}},{"key":"geid_130_4653","source":"scip-python python temp indexer `pilot.utils.test_function_calling`/__init__:","target":"scip-python python temp indexer `pilot.utils.function_calling`/parse_agent_response().","attributes":{"type":"uses","at":[2,30,2,50]}},{"key":"geid_130_4654","source":"scip-python python temp indexer `pilot.utils.test_function_calling`/__init__:","target":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#","attributes":{"type":"uses","at":[2,52,2,64]}},{"key":"geid_130_4655","source":"scip-python python temp indexer `pilot.utils.test_function_calling`/TestFunctionCalling#test_parse_agent_response_text().","target":"scip-python python temp indexer `pilot.utils.function_calling`/parse_agent_response().","attributes":{"type":"uses","at":[11,19,11,39]}},{"key":"geid_130_4656","source":"scip-python python temp indexer `pilot.utils.test_function_calling`/TestFunctionCalling#test_parse_agent_response_json().","target":"scip-python python temp indexer `pilot.utils.function_calling`/parse_agent_response().","attributes":{"type":"uses","at":[22,19,22,39]}},{"key":"geid_130_4657","source":"scip-python python temp indexer `pilot.utils.test_function_calling`/TestFunctionCalling#test_parse_agent_response_json_markdown().","target":"scip-python python temp indexer `pilot.utils.llm_connection`/clean_json_response().","attributes":{"type":"uses","at":[33,27,33,46]}},{"key":"geid_130_4658","source":"scip-python python temp indexer `pilot.utils.test_function_calling`/TestFunctionCalling#test_parse_agent_response_json_markdown().","target":"scip-python python temp indexer `pilot.utils.function_calling`/parse_agent_response().","attributes":{"type":"uses","at":[34,19,34,39]}},{"key":"geid_130_4659","source":"scip-python python temp indexer `pilot.utils.test_function_calling`/TestFunctionCalling#test_parse_agent_response_markdown().","target":"scip-python python temp indexer `pilot.utils.llm_connection`/clean_json_response().","attributes":{"type":"uses","at":[45,27,45,46]}},{"key":"geid_130_4660","source":"scip-python python temp indexer `pilot.utils.test_function_calling`/TestFunctionCalling#test_parse_agent_response_markdown().","target":"scip-python python temp indexer `pilot.utils.function_calling`/parse_agent_response().","attributes":{"type":"uses","at":[46,19,46,39]}},{"key":"geid_130_4661","source":"scip-python python temp indexer `pilot.utils.test_function_calling`/TestFunctionCalling#test_parse_agent_response_multiple_args().","target":"scip-python python temp indexer `pilot.utils.function_calling`/parse_agent_response().","attributes":{"type":"uses","at":[57,19,57,39]}},{"key":"geid_130_4662","source":"scip-python python temp indexer `pilot.utils.test_function_calling`/test_json_prompter().","target":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#","attributes":{"type":"uses","at":[66,15,66,27]}},{"key":"geid_130_4663","source":"scip-python python temp indexer `pilot.utils.test_function_calling`/test_json_prompter().","target":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#prompt().","attributes":{"type":"uses","at":[69,22,69,28]}},{"key":"geid_130_4664","source":"scip-python python temp indexer `pilot.utils.test_function_calling`/test_json_prompter().","target":"scip-python python temp indexer `pilot.const.function_calls`/ARCHITECTURE.","attributes":{"type":"uses","at":[69,60,69,72]}},{"key":"geid_130_4665","source":"scip-python python temp indexer `pilot.utils.test_function_calling`/test_llama_json_prompter().","target":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#","attributes":{"type":"uses","at":[83,15,83,27]}},{"key":"geid_130_4666","source":"scip-python python temp indexer `pilot.utils.test_function_calling`/test_llama_json_prompter().","target":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#prompt().","attributes":{"type":"uses","at":[86,22,86,28]}},{"key":"geid_130_4667","source":"scip-python python temp indexer `pilot.utils.test_function_calling`/test_llama_json_prompter().","target":"scip-python python temp indexer `pilot.const.function_calls`/ARCHITECTURE.","attributes":{"type":"uses","at":[86,60,86,72]}},{"key":"geid_130_4668","source":"scip-python python temp indexer `pilot.utils.test_function_calling`/test_json_prompter_named().","target":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#","attributes":{"type":"uses","at":[102,15,102,27]}},{"key":"geid_130_4669","source":"scip-python python temp indexer `pilot.utils.test_function_calling`/test_json_prompter_named().","target":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#prompt().","attributes":{"type":"uses","at":[105,22,105,28]}},{"key":"geid_130_4670","source":"scip-python python temp indexer `pilot.utils.test_function_calling`/test_json_prompter_named().","target":"scip-python python temp indexer `pilot.const.function_calls`/ARCHITECTURE.","attributes":{"type":"uses","at":[105,60,105,72]}},{"key":"geid_130_4671","source":"scip-python python temp indexer `pilot.utils.test_function_calling`/test_llama_json_prompter_named().","target":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#","attributes":{"type":"uses","at":[130,15,130,27]}},{"key":"geid_130_4672","source":"scip-python python temp indexer `pilot.utils.test_function_calling`/test_llama_json_prompter_named().","target":"scip-python python temp indexer `pilot.utils.function_calling`/JsonPrompter#prompt().","attributes":{"type":"uses","at":[133,22,133,28]}},{"key":"geid_130_4673","source":"scip-python python temp indexer `pilot.utils.test_function_calling`/test_llama_json_prompter_named().","target":"scip-python python temp indexer `pilot.const.function_calls`/ARCHITECTURE.","attributes":{"type":"uses","at":[133,60,133,72]}},{"key":"geid_130_4674","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#","target":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#test_chat_completion_TechLead().","attributes":{"type":"defines","at":[497,4,552,72]}},{"key":"geid_130_4675","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#","target":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#test_chat_completion_Architect().","attributes":{"type":"defines","at":[442,4,495,52]}},{"key":"geid_130_4676","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#","target":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#test_stream_gpt_completion().","attributes":{"type":"defines","at":[410,4,439,103]}},{"key":"geid_130_4677","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#","target":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#test_rate_limit_error().","attributes":{"type":"defines","at":[366,4,407,70]}},{"key":"geid_130_4678","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#","target":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#setup_method().","attributes":{"type":"defines","at":[363,4,364,66]}},{"key":"geid_130_4679","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#","attributes":{"type":"defines","at":[362,0,552,72]}},{"key":"geid_130_4680","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestSchemaValidation#","target":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestSchemaValidation#test_DEVELOPMENT_PLAN().","attributes":{"type":"defines","at":[333,4,359,46]}},{"key":"geid_130_4681","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestSchemaValidation#","target":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestSchemaValidation#test_assert_json_schema_required().","attributes":{"type":"defines","at":[324,4,331,65]}},{"key":"geid_130_4682","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestSchemaValidation#","target":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestSchemaValidation#test_assert_json_schema_invalid().","attributes":{"type":"defines","at":[318,4,322,61]}},{"key":"geid_130_4683","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestSchemaValidation#","target":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestSchemaValidation#test_assert_json_schema_incomplete().","attributes":{"type":"defines","at":[312,4,316,61]}},{"key":"geid_130_4684","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestSchemaValidation#","target":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestSchemaValidation#test_assert_json_schema().","attributes":{"type":"defines","at":[307,4,310,69]}},{"key":"geid_130_4685","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestSchemaValidation#","target":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestSchemaValidation#test_assert_json_response().","attributes":{"type":"defines","at":[299,4,305,54]}},{"key":"geid_130_4686","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestSchemaValidation#","target":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestSchemaValidation#setup_method().","attributes":{"type":"defines","at":[288,4,297,9]}},{"key":"geid_130_4687","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestSchemaValidation#","attributes":{"type":"defines","at":[287,0,359,46]}},{"key":"geid_130_4688","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#","target":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#test_extra_data().","attributes":{"type":"defines","at":[268,4,284,47]}},{"key":"geid_130_4689","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#","target":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#test_invalid_boolean_max_retries().","attributes":{"type":"defines","at":[251,4,266,47]}},{"key":"geid_130_4690","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#","target":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#test_incomplete_then_invalid_by_schema().","attributes":{"type":"defines","at":[229,4,249,47]}},{"key":"geid_130_4691","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#","target":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#test_incomplete_json_array().","attributes":{"type":"defines","at":[213,4,227,47]}},{"key":"geid_130_4692","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#","target":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#test_incomplete_json_item().","attributes":{"type":"defines","at":[195,4,211,47]}},{"key":"geid_130_4693","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#","target":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#test_invalid_escape().","attributes":{"type":"defines","at":[175,4,193,47]}},{"key":"geid_130_4694","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#","target":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#test_invalid_boolean().","attributes":{"type":"defines","at":[155,4,173,47]}},{"key":"geid_130_4695","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#","target":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#test_incomplete_value_missing().","attributes":{"type":"defines","at":[138,4,153,47]}},{"key":"geid_130_4696","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#","target":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#test_incomplete_key().","attributes":{"type":"defines","at":[121,4,136,47]}},{"key":"geid_130_4697","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#","target":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#test_incomplete_value_string().","attributes":{"type":"defines","at":[107,4,119,47]}},{"key":"geid_130_4698","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#_create_wrapped_function().","target":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#retryable_assert_json_schema().","attributes":{"type":"defines","at":[98,8,103,30]}},{"key":"geid_130_4699","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#","target":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#_create_wrapped_function().","attributes":{"type":"defines","at":[95,4,105,69]}},{"key":"geid_130_4700","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#","target":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#setup_method().","attributes":{"type":"defines","at":[80,4,93,9]}},{"key":"geid_130_4701","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#","attributes":{"type":"defines","at":[78,0,284,47]}},{"key":"geid_130_4702","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.utils.test_llm_connection`/test_clean_json_response_boolean_in_python().","attributes":{"type":"defines","at":[59,0,75,88]}},{"key":"geid_130_4703","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.utils.test_llm_connection`/test_clean_json_response_True_False().","attributes":{"type":"defines","at":[24,0,56,46]}},{"key":"geid_130_4704","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/__init__:","target":"scip-python python python-stdlib 3.11 json/__init__:","attributes":{"type":"uses","at":[1,5,1,9]}},{"key":"geid_130_4705","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/__init__:","target":"scip-python python temp indexer `json.decoder`/JSONDecodeError#","attributes":{"type":"uses","at":[1,17,1,32]}},{"key":"geid_130_4706","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/__init__:","target":"scip-python python python-stdlib 3.11 `unittest.mock`/__init__:","attributes":{"type":"uses","at":[4,5,4,18]}},{"key":"geid_130_4707","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/__init__:","target":"scip-python python python-dotenv 1.0.0 dotenv/__init__:","attributes":{"type":"uses","at":[5,5,5,11]}},{"key":"geid_130_4708","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/__init__:","target":"scip-python python python-dotenv 1.0.0 `dotenv.main`/load_dotenv().","attributes":{"type":"uses","at":[5,19,5,30]}},{"key":"geid_130_4709","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/__init__:","target":"scip-python python temp indexer jsonschema/__init__:","attributes":{"type":"uses","at":[6,5,6,15]}},{"key":"geid_130_4710","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/__init__:","attributes":{"type":"uses","at":[7,5,7,25]}},{"key":"geid_130_4711","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/ARCHITECTURE.","attributes":{"type":"uses","at":[7,33,7,45]}},{"key":"geid_130_4712","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.const.function_calls`/DEVELOPMENT_PLAN.","attributes":{"type":"uses","at":[7,47,7,63]}},{"key":"geid_130_4713","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/__init__:","attributes":{"type":"uses","at":[8,5,8,23]}},{"key":"geid_130_4714","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","attributes":{"type":"uses","at":[8,31,8,41]}},{"key":"geid_130_4715","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.helpers.project`/__init__:","attributes":{"type":"uses","at":[9,5,9,20]}},{"key":"geid_130_4716","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.helpers.project`/Project#","attributes":{"type":"uses","at":[9,28,9,35]}},{"key":"geid_130_4717","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.architect`/__init__:","attributes":{"type":"uses","at":[10,5,10,29]}},{"key":"geid_130_4718","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#","attributes":{"type":"uses","at":[10,37,10,46]}},{"key":"geid_130_4719","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.techlead`/__init__:","attributes":{"type":"uses","at":[11,5,11,28]}},{"key":"geid_130_4720","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#","attributes":{"type":"uses","at":[11,36,11,44]}},{"key":"geid_130_4721","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.utils.function_calling`/__init__:","attributes":{"type":"uses","at":[12,5,12,27]}},{"key":"geid_130_4722","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.utils.function_calling`/parse_agent_response().","attributes":{"type":"uses","at":[12,35,12,55]}},{"key":"geid_130_4723","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.utils.function_calling`/FunctionType#","attributes":{"type":"uses","at":[12,57,12,69]}},{"key":"geid_130_4724","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.test.test_utils`/__init__:","attributes":{"type":"uses","at":[13,5,13,20]}},{"key":"geid_130_4725","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.test.test_utils`/assert_non_empty_string().","attributes":{"type":"uses","at":[13,28,13,51]}},{"key":"geid_130_4726","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.test.mock_questionary`/__init__:","attributes":{"type":"uses","at":[14,5,14,26]}},{"key":"geid_130_4727","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.test.mock_questionary`/MockQuestionary#","attributes":{"type":"uses","at":[14,34,14,49]}},{"key":"geid_130_4728","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.utils.llm_connection`/__init__:","attributes":{"type":"uses","at":[15,5,15,25]}},{"key":"geid_130_4729","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.utils.llm_connection`/create_gpt_chat_completion().","attributes":{"type":"uses","at":[15,33,15,59]}},{"key":"geid_130_4730","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","attributes":{"type":"uses","at":[15,61,15,82]}},{"key":"geid_130_4731","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.utils.llm_connection`/assert_json_response().","attributes":{"type":"uses","at":[16,4,16,24]}},{"key":"geid_130_4732","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.utils.llm_connection`/assert_json_schema().","attributes":{"type":"uses","at":[16,26,16,44]}},{"key":"geid_130_4733","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.utils.llm_connection`/clean_json_response().","attributes":{"type":"uses","at":[16,46,16,65]}},{"key":"geid_130_4734","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().","attributes":{"type":"uses","at":[16,67,16,85]}},{"key":"geid_130_4735","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.main`/__init__:","attributes":{"type":"uses","at":[17,5,17,9]}},{"key":"geid_130_4736","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.utils.custom_print`/get_custom_print().","attributes":{"type":"uses","at":[17,17,17,33]}},{"key":"geid_130_4737","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/__init__:","target":"scip-python python python-dotenv 1.0.0 `dotenv.main`/load_dotenv().","attributes":{"type":"uses","at":[19,0,19,11]}},{"key":"geid_130_4738","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/__init__:","target":"scip-python python temp indexer `pilot.helpers.project`/Project#","attributes":{"type":"uses","at":[21,10,21,17]}},{"key":"geid_130_4739","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/test_clean_json_response_True_False().","target":"scip-python python temp indexer `pilot.utils.llm_connection`/clean_json_response().","attributes":{"type":"uses","at":[47,15,47,34]}},{"key":"geid_130_4740","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/test_clean_json_response_boolean_in_python().","target":"scip-python python temp indexer `pilot.utils.llm_connection`/clean_json_response().","attributes":{"type":"uses","at":[72,15,72,34]}},{"key":"geid_130_4741","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#setup_method().","target":"scip-python python temp indexer `pilot.utils.function_calling`/FunctionType#","attributes":{"type":"uses","at":[81,23,81,35]}},{"key":"geid_130_4742","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#_create_wrapped_function().","target":"scip-python python temp indexer `pilot.utils.test_llm_connection`/project.","attributes":{"type":"uses","at":[96,27,96,34]}},{"key":"geid_130_4743","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#retryable_assert_json_schema().","target":"scip-python python temp indexer `pilot.utils.llm_connection`/assert_json_schema().","attributes":{"type":"uses","at":[102,12,102,30]}},{"key":"geid_130_4744","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#_create_wrapped_function().","target":"scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().","attributes":{"type":"uses","at":[105,15,105,33]}},{"key":"geid_130_4745","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#_create_wrapped_function().","target":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#retryable_assert_json_schema().","attributes":{"type":"uses","at":[105,34,105,62]}},{"key":"geid_130_4746","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#test_incomplete_value_string().","target":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#_create_wrapped_function().","attributes":{"type":"uses","at":[109,29,109,53]}},{"key":"geid_130_4747","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#test_incomplete_key().","target":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#_create_wrapped_function().","attributes":{"type":"uses","at":[123,29,123,53]}},{"key":"geid_130_4748","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#test_incomplete_value_missing().","target":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#_create_wrapped_function().","attributes":{"type":"uses","at":[140,29,140,53]}},{"key":"geid_130_4749","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#test_invalid_boolean().","target":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#_create_wrapped_function().","attributes":{"type":"uses","at":[157,29,157,53]}},{"key":"geid_130_4750","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#test_invalid_escape().","target":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#_create_wrapped_function().","attributes":{"type":"uses","at":[177,29,177,53]}},{"key":"geid_130_4751","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#test_incomplete_json_item().","target":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#_create_wrapped_function().","attributes":{"type":"uses","at":[197,29,197,53]}},{"key":"geid_130_4752","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#test_incomplete_json_array().","target":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#_create_wrapped_function().","attributes":{"type":"uses","at":[215,29,215,53]}},{"key":"geid_130_4753","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#test_incomplete_then_invalid_by_schema().","target":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#_create_wrapped_function().","attributes":{"type":"uses","at":[231,29,231,53]}},{"key":"geid_130_4754","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#test_invalid_boolean_max_retries().","target":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#_create_wrapped_function().","attributes":{"type":"uses","at":[253,29,253,53]}},{"key":"geid_130_4755","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#test_extra_data().","target":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestRetryOnException#_create_wrapped_function().","attributes":{"type":"uses","at":[270,29,270,53]}},{"key":"geid_130_4756","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestSchemaValidation#setup_method().","target":"scip-python python temp indexer `pilot.utils.function_calling`/FunctionType#","attributes":{"type":"uses","at":[289,23,289,35]}},{"key":"geid_130_4757","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestSchemaValidation#test_assert_json_response().","target":"scip-python python temp indexer `pilot.utils.llm_connection`/assert_json_response().","attributes":{"type":"uses","at":[300,15,300,35]}},{"key":"geid_130_4758","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestSchemaValidation#test_assert_json_response().","target":"scip-python python temp indexer `pilot.utils.llm_connection`/assert_json_response().","attributes":{"type":"uses","at":[301,15,301,35]}},{"key":"geid_130_4759","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestSchemaValidation#test_assert_json_response().","target":"scip-python python temp indexer `pilot.utils.llm_connection`/assert_json_response().","attributes":{"type":"uses","at":[302,15,302,35]}},{"key":"geid_130_4760","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestSchemaValidation#test_assert_json_response().","target":"scip-python python temp indexer `pilot.utils.llm_connection`/assert_json_response().","attributes":{"type":"uses","at":[303,15,303,35]}},{"key":"geid_130_4761","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestSchemaValidation#test_assert_json_response().","target":"scip-python python temp indexer `pilot.utils.llm_connection`/assert_json_response().","attributes":{"type":"uses","at":[305,19,305,39]}},{"key":"geid_130_4762","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestSchemaValidation#test_assert_json_schema().","target":"scip-python python temp indexer `pilot.utils.llm_connection`/assert_json_schema().","attributes":{"type":"uses","at":[310,15,310,33]}},{"key":"geid_130_4763","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestSchemaValidation#test_assert_json_schema_incomplete().","target":"scip-python python temp indexer `json.decoder`/JSONDecodeError#","attributes":{"type":"uses","at":[315,27,315,42]}},{"key":"geid_130_4764","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestSchemaValidation#test_assert_json_schema_incomplete().","target":"scip-python python temp indexer `pilot.utils.llm_connection`/assert_json_schema().","attributes":{"type":"uses","at":[316,12,316,30]}},{"key":"geid_130_4765","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestSchemaValidation#test_assert_json_schema_invalid().","target":"scip-python python temp indexer `pilot.utils.llm_connection`/assert_json_schema().","attributes":{"type":"uses","at":[322,12,322,30]}},{"key":"geid_130_4766","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestSchemaValidation#test_assert_json_schema_required().","target":"scip-python python temp indexer `pilot.utils.llm_connection`/assert_json_schema().","attributes":{"type":"uses","at":[331,12,331,30]}},{"key":"geid_130_4767","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestSchemaValidation#test_DEVELOPMENT_PLAN().","target":"scip-python python temp indexer `pilot.utils.llm_connection`/assert_json_schema().","attributes":{"type":"uses","at":[334,15,334,33]}},{"key":"geid_130_4768","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestSchemaValidation#test_DEVELOPMENT_PLAN().","target":"scip-python python temp indexer `pilot.const.function_calls`/DEVELOPMENT_PLAN.","attributes":{"type":"uses","at":[359,13,359,29]}},{"key":"geid_130_4769","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#setup_method().","target":"scip-python python temp indexer `pilot.utils.custom_print`/get_custom_print().","attributes":{"type":"uses","at":[364,46,364,62]}},{"key":"geid_130_4770","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#test_rate_limit_error().","target":"scip-python python temp indexer `pilot.utils.llm_connection`/retry_on_exception().","attributes":{"type":"uses","at":[393,18,393,36]}},{"key":"geid_130_4771","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#test_rate_limit_error().","target":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","attributes":{"type":"uses","at":[393,37,393,58]}},{"key":"geid_130_4772","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#test_rate_limit_error().","target":"scip-python python temp indexer `pilot.utils.test_llm_connection`/project.","attributes":{"type":"uses","at":[400,41,400,48]}},{"key":"geid_130_4773","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#test_stream_gpt_completion().","target":"scip-python python temp indexer `pilot.utils.llm_connection`/stream_gpt_completion().","attributes":{"type":"uses","at":[433,23,433,44]}},{"key":"geid_130_4774","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#test_stream_gpt_completion().","target":"scip-python python temp indexer `pilot.utils.test_llm_connection`/project.","attributes":{"type":"uses","at":[436,19,436,26]}},{"key":"geid_130_4775","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#test_chat_completion_Architect().","target":"scip-python python temp indexer `pilot.helpers.agents.architect`/Architect#","attributes":{"type":"uses","at":[456,16,456,25]}},{"key":"geid_130_4776","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#test_chat_completion_Architect().","target":"scip-python python temp indexer `pilot.utils.test_llm_connection`/project.","attributes":{"type":"uses","at":[456,26,456,33]}},{"key":"geid_130_4777","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#test_chat_completion_Architect().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","attributes":{"type":"uses","at":[457,16,457,26]}},{"key":"geid_130_4778","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#test_chat_completion_Architect().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#construct_and_add_message_from_prompt().","attributes":{"type":"uses","at":[458,14,458,51]}},{"key":"geid_130_4779","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#test_chat_completion_Architect().","target":"scip-python python temp indexer `pilot.const.function_calls`/ARCHITECTURE.","attributes":{"type":"uses","at":[484,25,484,37]}},{"key":"geid_130_4780","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#test_chat_completion_Architect().","target":"scip-python python temp indexer `pilot.utils.llm_connection`/create_gpt_chat_completion().","attributes":{"type":"uses","at":[487,19,487,45]}},{"key":"geid_130_4781","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#test_chat_completion_Architect().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#messages.","attributes":{"type":"uses","at":[487,52,487,60]}},{"key":"geid_130_4782","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#test_chat_completion_Architect().","target":"scip-python python temp indexer `pilot.utils.test_llm_connection`/project.","attributes":{"type":"uses","at":[487,66,487,73]}},{"key":"geid_130_4783","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#test_chat_completion_Architect().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#messages.","attributes":{"type":"uses","at":[490,21,490,29]}},{"key":"geid_130_4784","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#test_chat_completion_Architect().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#messages.","attributes":{"type":"uses","at":[491,21,491,29]}},{"key":"geid_130_4785","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#test_chat_completion_Architect().","target":"scip-python python temp indexer `pilot.utils.function_calling`/parse_agent_response().","attributes":{"type":"uses","at":[494,19,494,39]}},{"key":"geid_130_4786","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#test_chat_completion_TechLead().","target":"scip-python python temp indexer `pilot.helpers.agents.techlead`/TechLead#","attributes":{"type":"uses","at":[513,16,513,24]}},{"key":"geid_130_4787","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#test_chat_completion_TechLead().","target":"scip-python python temp indexer `pilot.utils.test_llm_connection`/project.","attributes":{"type":"uses","at":[513,25,513,32]}},{"key":"geid_130_4788","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#test_chat_completion_TechLead().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#","attributes":{"type":"uses","at":[514,16,514,26]}},{"key":"geid_130_4789","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#test_chat_completion_TechLead().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#construct_and_add_message_from_prompt().","attributes":{"type":"uses","at":[515,14,515,51]}},{"key":"geid_130_4790","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#test_chat_completion_TechLead().","target":"scip-python python temp indexer `pilot.const.function_calls`/DEVELOPMENT_PLAN.","attributes":{"type":"uses","at":[535,25,535,41]}},{"key":"geid_130_4791","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#test_chat_completion_TechLead().","target":"scip-python python temp indexer `pilot.utils.llm_connection`/create_gpt_chat_completion().","attributes":{"type":"uses","at":[542,19,542,45]}},{"key":"geid_130_4792","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#test_chat_completion_TechLead().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#messages.","attributes":{"type":"uses","at":[542,52,542,60]}},{"key":"geid_130_4793","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#test_chat_completion_TechLead().","target":"scip-python python temp indexer `pilot.utils.test_llm_connection`/project.","attributes":{"type":"uses","at":[542,66,542,73]}},{"key":"geid_130_4794","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#test_chat_completion_TechLead().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#messages.","attributes":{"type":"uses","at":[545,21,545,29]}},{"key":"geid_130_4795","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#test_chat_completion_TechLead().","target":"scip-python python temp indexer `pilot.helpers.agentconvo`/AgentConvo#messages.","attributes":{"type":"uses","at":[546,21,546,29]}},{"key":"geid_130_4796","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#test_chat_completion_TechLead().","target":"scip-python python temp indexer `pilot.utils.function_calling`/parse_agent_response().","attributes":{"type":"uses","at":[549,19,549,39]}},{"key":"geid_130_4797","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#test_chat_completion_TechLead().","target":"scip-python python temp indexer `pilot.test.test_utils`/assert_non_empty_string().","attributes":{"type":"uses","at":[550,8,550,31]}},{"key":"geid_130_4798","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#test_chat_completion_TechLead().","target":"scip-python python temp indexer `pilot.test.test_utils`/assert_non_empty_string().","attributes":{"type":"uses","at":[551,8,551,31]}},{"key":"geid_130_4799","source":"scip-python python temp indexer `pilot.utils.test_llm_connection`/TestLlmConnection#test_chat_completion_TechLead().","target":"scip-python python temp indexer `pilot.test.test_utils`/assert_non_empty_string().","attributes":{"type":"uses","at":[552,8,552,31]}},{"key":"geid_130_4800","source":"scip-python python temp indexer `pilot.utils.test_utils`/TestShouldExecuteStep#","target":"scip-python python temp indexer `pilot.utils.test_utils`/TestShouldExecuteStep#test_unknown_step().","attributes":{"type":"defines","at":[14,4,18,55]}},{"key":"geid_130_4801","source":"scip-python python temp indexer `pilot.utils.test_utils`/TestShouldExecuteStep#","target":"scip-python python temp indexer `pilot.utils.test_utils`/TestShouldExecuteStep#test_skip_step().","attributes":{"type":"defines","at":[9,4,12,68]}},{"key":"geid_130_4802","source":"scip-python python temp indexer `pilot.utils.test_utils`/TestShouldExecuteStep#","target":"scip-python python temp indexer `pilot.utils.test_utils`/TestShouldExecuteStep#test_no_step_arg().","attributes":{"type":"defines","at":[4,4,7,58]}},{"key":"geid_130_4803","source":"scip-python python temp indexer `pilot.utils.test_utils`/__init__:","target":"scip-python python temp indexer `pilot.utils.test_utils`/TestShouldExecuteStep#","attributes":{"type":"defines","at":[3,0,18,55]}},{"key":"geid_130_4804","source":"scip-python python temp indexer `pilot.utils.test_utils`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/__init__:","attributes":{"type":"uses","at":[0,5,0,11]}},{"key":"geid_130_4805","source":"scip-python python temp indexer `pilot.utils.test_utils`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/should_execute_step().","attributes":{"type":"uses","at":[0,19,0,38]}},{"key":"geid_130_4806","source":"scip-python python temp indexer `pilot.utils.test_utils`/TestShouldExecuteStep#test_no_step_arg().","target":"scip-python python temp indexer `pilot.utils.utils`/should_execute_step().","attributes":{"type":"uses","at":[5,15,5,34]}},{"key":"geid_130_4807","source":"scip-python python temp indexer `pilot.utils.test_utils`/TestShouldExecuteStep#test_no_step_arg().","target":"scip-python python temp indexer `pilot.utils.utils`/should_execute_step().","attributes":{"type":"uses","at":[6,15,6,34]}},{"key":"geid_130_4808","source":"scip-python python temp indexer `pilot.utils.test_utils`/TestShouldExecuteStep#test_no_step_arg().","target":"scip-python python temp indexer `pilot.utils.utils`/should_execute_step().","attributes":{"type":"uses","at":[7,15,7,34]}},{"key":"geid_130_4809","source":"scip-python python temp indexer `pilot.utils.test_utils`/TestShouldExecuteStep#test_skip_step().","target":"scip-python python temp indexer `pilot.utils.utils`/should_execute_step().","attributes":{"type":"uses","at":[10,15,10,34]}},{"key":"geid_130_4810","source":"scip-python python temp indexer `pilot.utils.test_utils`/TestShouldExecuteStep#test_skip_step().","target":"scip-python python temp indexer `pilot.utils.utils`/should_execute_step().","attributes":{"type":"uses","at":[11,15,11,34]}},{"key":"geid_130_4811","source":"scip-python python temp indexer `pilot.utils.test_utils`/TestShouldExecuteStep#test_skip_step().","target":"scip-python python temp indexer `pilot.utils.utils`/should_execute_step().","attributes":{"type":"uses","at":[12,15,12,34]}},{"key":"geid_130_4812","source":"scip-python python temp indexer `pilot.utils.test_utils`/TestShouldExecuteStep#test_unknown_step().","target":"scip-python python temp indexer `pilot.utils.utils`/should_execute_step().","attributes":{"type":"uses","at":[15,15,15,34]}},{"key":"geid_130_4813","source":"scip-python python temp indexer `pilot.utils.test_utils`/TestShouldExecuteStep#test_unknown_step().","target":"scip-python python temp indexer `pilot.utils.utils`/should_execute_step().","attributes":{"type":"uses","at":[16,15,16,34]}},{"key":"geid_130_4814","source":"scip-python python temp indexer `pilot.utils.test_utils`/TestShouldExecuteStep#test_unknown_step().","target":"scip-python python temp indexer `pilot.utils.utils`/should_execute_step().","attributes":{"type":"uses","at":[17,15,17,34]}},{"key":"geid_130_4815","source":"scip-python python temp indexer `pilot.utils.test_utils`/TestShouldExecuteStep#test_unknown_step().","target":"scip-python python temp indexer `pilot.utils.utils`/should_execute_step().","attributes":{"type":"uses","at":[18,15,18,34]}},{"key":"geid_130_4816","source":"scip-python python temp indexer `pilot.utils.utils`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/json_serial().","attributes":{"type":"defines","at":[197,0,204,23]}},{"key":"geid_130_4817","source":"scip-python python temp indexer `pilot.utils.utils`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/clean_filename().","attributes":{"type":"defines","at":[188,0,195,27]}},{"key":"geid_130_4818","source":"scip-python python temp indexer `pilot.utils.utils`/fix_json_newlines().","target":"scip-python python temp indexer `pilot.utils.utils`/fix_json_newlines().replace_newlines().","attributes":{"type":"defines","at":[182,4,183,50]}},{"key":"geid_130_4819","source":"scip-python python temp indexer `pilot.utils.utils`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/fix_json_newlines().","attributes":{"type":"defines","at":[179,0,185,47]}},{"key":"geid_130_4820","source":"scip-python python temp indexer `pilot.utils.utils`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/fix_json().","attributes":{"type":"defines","at":[172,0,176,31]}},{"key":"geid_130_4821","source":"scip-python python temp indexer `pilot.utils.utils`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/replace_functions().","attributes":{"type":"defines","at":[161,0,169,18]}},{"key":"geid_130_4822","source":"scip-python python temp indexer `pilot.utils.utils`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/hash_data().","attributes":{"type":"defines","at":[156,0,158,54]}},{"key":"geid_130_4823","source":"scip-python python temp indexer `pilot.utils.utils`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/array_of_objects_to_string().","attributes":{"type":"defines","at":[152,0,153,73]}},{"key":"geid_130_4824","source":"scip-python python temp indexer `pilot.utils.utils`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/generate_app_data().","attributes":{"type":"defines","at":[148,0,149,67]}},{"key":"geid_130_4825","source":"scip-python python temp indexer `pilot.utils.utils`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/step_already_finished().","attributes":{"type":"defines","at":[140,0,145,24]}},{"key":"geid_130_4826","source":"scip-python python temp indexer `pilot.utils.utils`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/should_execute_step().","attributes":{"type":"defines","at":[128,0,137,113]}},{"key":"geid_130_4827","source":"scip-python python temp indexer `pilot.utils.utils`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/get_os_info().","attributes":{"type":"defines","at":[107,0,125,46]}},{"key":"geid_130_4828","source":"scip-python python temp indexer `pilot.utils.utils`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/find_role_from_step().","attributes":{"type":"defines","at":[99,0,104,26]}},{"key":"geid_130_4829","source":"scip-python python temp indexer `pilot.utils.utils`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/get_sys_message().","attributes":{"type":"defines","at":[86,0,96,5]}},{"key":"geid_130_4830","source":"scip-python python temp indexer `pilot.utils.utils`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/get_prompt_components().","attributes":{"type":"defines","at":[52,0,83,42]}},{"key":"geid_130_4831","source":"scip-python python temp indexer `pilot.utils.utils`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/get_prompt().","attributes":{"type":"defines","at":[35,0,49,17]}},{"key":"geid_130_4832","source":"scip-python python temp indexer `pilot.utils.utils`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/capitalize_first_word_with_underscores().","attributes":{"type":"defines","at":[22,0,32,29]}},{"key":"geid_130_4833","source":"scip-python python temp indexer `pilot.utils.utils`/__init__:","target":"scip-python python python-stdlib 3.11 datetime/__init__:","attributes":{"type":"uses","at":[2,7,2,15]}},{"key":"geid_130_4834","source":"scip-python python temp indexer `pilot.utils.utils`/__init__:","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[3,7,3,9]}},{"key":"geid_130_4835","source":"scip-python python temp indexer `pilot.utils.utils`/__init__:","target":"scip-python python python-stdlib 3.11 platform/__init__:","attributes":{"type":"uses","at":[4,7,4,15]}},{"key":"geid_130_4836","source":"scip-python python temp indexer `pilot.utils.utils`/__init__:","target":"scip-python python python-stdlib 3.11 uuid/__init__:","attributes":{"type":"uses","at":[5,7,5,11]}},{"key":"geid_130_4837","source":"scip-python python temp indexer `pilot.utils.utils`/__init__:","target":"scip-python python python-stdlib 3.11 json/__init__:","attributes":{"type":"uses","at":[7,7,7,11]}},{"key":"geid_130_4838","source":"scip-python python temp indexer `pilot.utils.utils`/__init__:","target":"scip-python python python-stdlib 3.11 hashlib/__init__:","attributes":{"type":"uses","at":[8,7,8,14]}},{"key":"geid_130_4839","source":"scip-python python temp indexer `pilot.utils.utils`/__init__:","target":"scip-python python python-stdlib 3.11 re/__init__:","attributes":{"type":"uses","at":[9,7,9,9]}},{"key":"geid_130_4840","source":"scip-python python temp indexer `pilot.utils.utils`/__init__:","target":"scip-python python temp indexer jinja2/__init__:","attributes":{"type":"uses","at":[10,5,10,11]}},{"key":"geid_130_4841","source":"scip-python python temp indexer `pilot.utils.utils`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/__init__:","attributes":{"type":"uses","at":[11,5,11,11]}},{"key":"geid_130_4842","source":"scip-python python temp indexer `pilot.utils.utils`/__init__:","target":"scip-python python temp indexer `pilot.utils.style`/color_green.","attributes":{"type":"uses","at":[11,19,11,30]}},{"key":"geid_130_4843","source":"scip-python python temp indexer `pilot.utils.utils`/__init__:","target":"scip-python python temp indexer `pilot.const.llm`/__init__:","attributes":{"type":"uses","at":[13,5,13,14]}},{"key":"geid_130_4844","source":"scip-python python temp indexer `pilot.utils.utils`/__init__:","target":"scip-python python temp indexer `pilot.const.llm`/MAX_QUESTIONS.","attributes":{"type":"uses","at":[13,22,13,35]}},{"key":"geid_130_4845","source":"scip-python python temp indexer `pilot.utils.utils`/__init__:","target":"scip-python python temp indexer `pilot.const.llm`/END_RESPONSE.","attributes":{"type":"uses","at":[13,37,13,49]}},{"key":"geid_130_4846","source":"scip-python python temp indexer `pilot.utils.utils`/__init__:","target":"scip-python python temp indexer `pilot.const.common`/__init__:","attributes":{"type":"uses","at":[14,5,14,17]}},{"key":"geid_130_4847","source":"scip-python python temp indexer `pilot.utils.utils`/__init__:","target":"scip-python python temp indexer `pilot.const.common`/ROLES.","attributes":{"type":"uses","at":[14,25,14,30]}},{"key":"geid_130_4848","source":"scip-python python temp indexer `pilot.utils.utils`/__init__:","target":"scip-python python temp indexer `pilot.const.common`/STEPS.","attributes":{"type":"uses","at":[14,32,14,37]}},{"key":"geid_130_4849","source":"scip-python python temp indexer `pilot.utils.utils`/__init__:","target":"scip-python python temp indexer `pilot.logger.logger`/__init__:","attributes":{"type":"uses","at":[15,5,15,18]}},{"key":"geid_130_4850","source":"scip-python python temp indexer `pilot.utils.utils`/__init__:","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[15,26,15,32]}},{"key":"geid_130_4851","source":"scip-python python temp indexer `pilot.utils.utils`/__init__:","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[17,15,17,17]}},{"key":"geid_130_4852","source":"scip-python python temp indexer `pilot.utils.utils`/__init__:","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[17,18,17,22]}},{"key":"geid_130_4853","source":"scip-python python temp indexer `pilot.utils.utils`/__init__:","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[17,23,17,27]}},{"key":"geid_130_4854","source":"scip-python python temp indexer `pilot.utils.utils`/__init__:","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[17,28,17,30]}},{"key":"geid_130_4855","source":"scip-python python temp indexer `pilot.utils.utils`/__init__:","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[17,31,17,35]}},{"key":"geid_130_4856","source":"scip-python python temp indexer `pilot.utils.utils`/__init__:","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[17,36,17,43]}},{"key":"geid_130_4857","source":"scip-python python temp indexer `pilot.utils.utils`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/","attributes":{"type":"uses","at":[17,44,17,52]}},{"key":"geid_130_4858","source":"scip-python python temp indexer `pilot.utils.utils`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/prompts_path.","attributes":{"type":"uses","at":[18,31,18,43]}},{"key":"geid_130_4859","source":"scip-python python temp indexer `pilot.utils.utils`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/file_loader.","attributes":{"type":"uses","at":[19,25,19,36]}},{"key":"geid_130_4860","source":"scip-python python temp indexer `pilot.utils.utils`/get_prompt().","target":"scip-python python temp indexer `pilot.utils.utils`/get_prompt_components().","attributes":{"type":"uses","at":[39,4,39,25]}},{"key":"geid_130_4861","source":"scip-python python temp indexer `pilot.utils.utils`/get_prompt().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[41,4,41,10]}},{"key":"geid_130_4862","source":"scip-python python temp indexer `pilot.utils.utils`/get_prompt().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[41,11,41,15]}},{"key":"geid_130_4863","source":"scip-python python temp indexer `pilot.utils.utils`/get_prompt().","target":"scip-python python temp indexer `pilot.utils.utils`/env.","attributes":{"type":"uses","at":[44,15,44,18]}},{"key":"geid_130_4864","source":"scip-python python temp indexer `pilot.utils.utils`/get_prompt_components().","target":"scip-python python temp indexer `pilot.const.llm`/MAX_QUESTIONS.","attributes":{"type":"uses","at":[58,25,58,38]}},{"key":"geid_130_4865","source":"scip-python python temp indexer `pilot.utils.utils`/get_prompt_components().","target":"scip-python python temp indexer `pilot.const.llm`/END_RESPONSE.","attributes":{"type":"uses","at":[59,24,59,36]}},{"key":"geid_130_4866","source":"scip-python python temp indexer `pilot.utils.utils`/get_prompt_components().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[63,19,63,21]}},{"key":"geid_130_4867","source":"scip-python python temp indexer `pilot.utils.utils`/get_prompt_components().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[63,22,63,26]}},{"key":"geid_130_4868","source":"scip-python python temp indexer `pilot.utils.utils`/get_prompt_components().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[63,27,63,31]}},{"key":"geid_130_4869","source":"scip-python python temp indexer `pilot.utils.utils`/get_prompt_components().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[63,32,63,34]}},{"key":"geid_130_4870","source":"scip-python python temp indexer `pilot.utils.utils`/get_prompt_components().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[63,35,63,39]}},{"key":"geid_130_4871","source":"scip-python python temp indexer `pilot.utils.utils`/get_prompt_components().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[63,40,63,47]}},{"key":"geid_130_4872","source":"scip-python python temp indexer `pilot.utils.utils`/get_prompt_components().","target":"scip-python python temp indexer `pilot.utils.utils`/","attributes":{"type":"uses","at":[63,48,63,56]}},{"key":"geid_130_4873","source":"scip-python python temp indexer `pilot.utils.utils`/get_prompt_components().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[75,19,75,21]}},{"key":"geid_130_4874","source":"scip-python python temp indexer `pilot.utils.utils`/get_prompt_components().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[75,22,75,26]}},{"key":"geid_130_4875","source":"scip-python python temp indexer `pilot.utils.utils`/get_prompt_components().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[75,27,75,35]}},{"key":"geid_130_4876","source":"scip-python python temp indexer `pilot.utils.utils`/get_sys_message().","target":"scip-python python temp indexer `pilot.utils.utils`/get_prompt().","attributes":{"type":"uses","at":[91,14,91,24]}},{"key":"geid_130_4877","source":"scip-python python temp indexer `pilot.utils.utils`/find_role_from_step().","target":"scip-python python temp indexer `pilot.const.common`/ROLES.","attributes":{"type":"uses","at":[100,24,100,29]}},{"key":"geid_130_4878","source":"scip-python python temp indexer `pilot.utils.utils`/get_os_info().","target":"scip-python python python-stdlib 3.11 platform/__init__:","attributes":{"type":"uses","at":[109,14,109,22]}},{"key":"geid_130_4879","source":"scip-python python temp indexer `pilot.utils.utils`/get_os_info().","target":"scip-python python python-stdlib 3.11 platform/system().","attributes":{"type":"uses","at":[109,23,109,29]}},{"key":"geid_130_4880","source":"scip-python python temp indexer `pilot.utils.utils`/get_os_info().","target":"scip-python python python-stdlib 3.11 platform/__init__:","attributes":{"type":"uses","at":[110,22,110,30]}},{"key":"geid_130_4881","source":"scip-python python temp indexer `pilot.utils.utils`/get_os_info().","target":"scip-python python python-stdlib 3.11 platform/version().","attributes":{"type":"uses","at":[110,31,110,38]}},{"key":"geid_130_4882","source":"scip-python python temp indexer `pilot.utils.utils`/get_os_info().","target":"scip-python python python-stdlib 3.11 platform/__init__:","attributes":{"type":"uses","at":[111,24,111,32]}},{"key":"geid_130_4883","source":"scip-python python temp indexer `pilot.utils.utils`/get_os_info().","target":"scip-python python python-stdlib 3.11 platform/architecture().","attributes":{"type":"uses","at":[111,33,111,45]}},{"key":"geid_130_4884","source":"scip-python python temp indexer `pilot.utils.utils`/get_os_info().","target":"scip-python python python-stdlib 3.11 platform/__init__:","attributes":{"type":"uses","at":[112,19,112,27]}},{"key":"geid_130_4885","source":"scip-python python temp indexer `pilot.utils.utils`/get_os_info().","target":"scip-python python python-stdlib 3.11 platform/machine().","attributes":{"type":"uses","at":[112,28,112,35]}},{"key":"geid_130_4886","source":"scip-python python temp indexer `pilot.utils.utils`/get_os_info().","target":"scip-python python python-stdlib 3.11 platform/__init__:","attributes":{"type":"uses","at":[113,16,113,24]}},{"key":"geid_130_4887","source":"scip-python python temp indexer `pilot.utils.utils`/get_os_info().","target":"scip-python python python-stdlib 3.11 platform/node().","attributes":{"type":"uses","at":[113,25,113,29]}},{"key":"geid_130_4888","source":"scip-python python temp indexer `pilot.utils.utils`/get_os_info().","target":"scip-python python python-stdlib 3.11 platform/__init__:","attributes":{"type":"uses","at":[114,19,114,27]}},{"key":"geid_130_4889","source":"scip-python python temp indexer `pilot.utils.utils`/get_os_info().","target":"scip-python python python-stdlib 3.11 platform/release().","attributes":{"type":"uses","at":[114,28,114,35]}},{"key":"geid_130_4890","source":"scip-python python temp indexer `pilot.utils.utils`/get_os_info().","target":"scip-python python python-stdlib 3.11 platform/__init__:","attributes":{"type":"uses","at":[120,44,120,52]}},{"key":"geid_130_4891","source":"scip-python python temp indexer `pilot.utils.utils`/get_os_info().","target":"scip-python python python-stdlib 3.11 platform/win32_ver().","attributes":{"type":"uses","at":[120,53,120,62]}},{"key":"geid_130_4892","source":"scip-python python temp indexer `pilot.utils.utils`/get_os_info().","target":"scip-python python python-stdlib 3.11 platform/__init__:","attributes":{"type":"uses","at":[122,33,122,41]}},{"key":"geid_130_4893","source":"scip-python python temp indexer `pilot.utils.utils`/get_os_info().","target":"scip-python python python-stdlib 3.11 platform/mac_ver().","attributes":{"type":"uses","at":[122,42,122,49]}},{"key":"geid_130_4894","source":"scip-python python temp indexer `pilot.utils.utils`/get_os_info().","target":"scip-python python temp indexer `pilot.utils.utils`/array_of_objects_to_string().","attributes":{"type":"uses","at":[125,11,125,37]}},{"key":"geid_130_4895","source":"scip-python python temp indexer `pilot.utils.utils`/should_execute_step().","target":"scip-python python temp indexer `pilot.const.common`/STEPS.","attributes":{"type":"uses","at":[134,48,134,53]}},{"key":"geid_130_4896","source":"scip-python python temp indexer `pilot.utils.utils`/should_execute_step().","target":"scip-python python temp indexer `pilot.const.common`/STEPS.","attributes":{"type":"uses","at":[134,85,134,90]}},{"key":"geid_130_4897","source":"scip-python python temp indexer `pilot.utils.utils`/should_execute_step().","target":"scip-python python temp indexer `pilot.const.common`/STEPS.","attributes":{"type":"uses","at":[135,25,135,30]}},{"key":"geid_130_4898","source":"scip-python python temp indexer `pilot.utils.utils`/should_execute_step().","target":"scip-python python temp indexer `pilot.const.common`/STEPS.","attributes":{"type":"uses","at":[135,70,135,75]}},{"key":"geid_130_4899","source":"scip-python python temp indexer `pilot.utils.utils`/step_already_finished().","target":"scip-python python temp indexer `pilot.utils.utils`/capitalize_first_word_with_underscores().","attributes":{"type":"uses","at":[143,20,143,58]}},{"key":"geid_130_4900","source":"scip-python python temp indexer `pilot.utils.utils`/step_already_finished().","target":"scip-python python temp indexer `pilot.utils.style`/color_green.","attributes":{"type":"uses","at":[144,10,144,21]}},{"key":"geid_130_4901","source":"scip-python python temp indexer `pilot.utils.utils`/step_already_finished().","target":"scip-python python temp indexer `pilot.logger.logger`/logger.","attributes":{"type":"uses","at":[145,4,145,10]}},{"key":"geid_130_4902","source":"scip-python python temp indexer `pilot.utils.utils`/step_already_finished().","target":"scip-python python python-stdlib 3.11 logging/Logger#info().","attributes":{"type":"uses","at":[145,11,145,15]}},{"key":"geid_130_4903","source":"scip-python python temp indexer `pilot.utils.utils`/hash_data().","target":"scip-python python python-stdlib 3.11 json/__init__:","attributes":{"type":"uses","at":[157,22,157,26]}},{"key":"geid_130_4904","source":"scip-python python temp indexer `pilot.utils.utils`/hash_data().","target":"scip-python python python-stdlib 3.11 json/dumps().","attributes":{"type":"uses","at":[157,27,157,32]}},{"key":"geid_130_4905","source":"scip-python python temp indexer `pilot.utils.utils`/hash_data().","target":"scip-python python temp indexer `pilot.utils.utils`/replace_functions().","attributes":{"type":"uses","at":[157,33,157,50]}},{"key":"geid_130_4906","source":"scip-python python temp indexer `pilot.utils.utils`/hash_data().","target":"scip-python python python-stdlib 3.11 hashlib/__init__:","attributes":{"type":"uses","at":[158,11,158,18]}},{"key":"geid_130_4907","source":"scip-python python temp indexer `pilot.utils.utils`/hash_data().","target":"scip-python python python-stdlib 3.11 hashlib/sha256().","attributes":{"type":"uses","at":[158,19,158,25]}},{"key":"geid_130_4908","source":"scip-python python temp indexer `pilot.utils.utils`/hash_data().","target":"scip-python python python-stdlib 3.11 hashlib/_Hash#hexdigest().","attributes":{"type":"uses","at":[158,43,158,52]}},{"key":"geid_130_4909","source":"scip-python python temp indexer `pilot.utils.utils`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/replace_functions().","attributes":{"type":"uses","at":[163,19,163,36]}},{"key":"geid_130_4910","source":"scip-python python temp indexer `pilot.utils.utils`/__init__:","target":"scip-python python temp indexer `pilot.utils.utils`/replace_functions().","attributes":{"type":"uses","at":[165,16,165,33]}},{"key":"geid_130_4911","source":"scip-python python temp indexer `pilot.utils.utils`/fix_json().","target":"scip-python python temp indexer `pilot.utils.utils`/fix_json_newlines().","attributes":{"type":"uses","at":[176,11,176,28]}},{"key":"geid_130_4912","source":"scip-python python temp indexer `pilot.utils.utils`/fix_json_newlines().","target":"scip-python python python-stdlib 3.11 re/__init__:","attributes":{"type":"uses","at":[185,11,185,13]}},{"key":"geid_130_4913","source":"scip-python python temp indexer `pilot.utils.utils`/fix_json_newlines().","target":"scip-python python python-stdlib 3.11 re/sub().","attributes":{"type":"uses","at":[185,14,185,17]}},{"key":"geid_130_4914","source":"scip-python python temp indexer `pilot.utils.utils`/clean_filename().","target":"scip-python python python-stdlib 3.11 re/__init__:","attributes":{"type":"uses","at":[190,23,190,25]}},{"key":"geid_130_4915","source":"scip-python python temp indexer `pilot.utils.utils`/clean_filename().","target":"scip-python python python-stdlib 3.11 re/sub().","attributes":{"type":"uses","at":[190,26,190,29]}},{"key":"geid_130_4916","source":"scip-python python temp indexer `pilot.utils.utils`/clean_filename().","target":"scip-python python python-stdlib 3.11 re/__init__:","attributes":{"type":"uses","at":[193,23,193,25]}},{"key":"geid_130_4917","source":"scip-python python temp indexer `pilot.utils.utils`/clean_filename().","target":"scip-python python python-stdlib 3.11 re/sub().","attributes":{"type":"uses","at":[193,26,193,29]}},{"key":"geid_130_4918","source":"scip-python python temp indexer `pilot.utils.utils`/json_serial().","target":"scip-python python python-stdlib 3.11 datetime/__init__:","attributes":{"type":"uses","at":[199,24,199,32]}},{"key":"geid_130_4919","source":"scip-python python temp indexer `pilot.utils.utils`/json_serial().","target":"scip-python python python-stdlib 3.11 datetime/datetime#","attributes":{"type":"uses","at":[199,33,199,41]}},{"key":"geid_130_4920","source":"scip-python python temp indexer `pilot.utils.utils`/json_serial().","target":"scip-python python python-stdlib 3.11 datetime/__init__:","attributes":{"type":"uses","at":[199,43,199,51]}},{"key":"geid_130_4921","source":"scip-python python temp indexer `pilot.utils.utils`/json_serial().","target":"scip-python python python-stdlib 3.11 datetime/date#","attributes":{"type":"uses","at":[199,52,199,56]}},{"key":"geid_130_4922","source":"scip-python python temp indexer `pilot.utils.utils`/json_serial().","target":"scip-python python python-stdlib 3.11 datetime/datetime#isoformat().","attributes":{"type":"uses","at":[200,19,200,28]}},{"key":"geid_130_4923","source":"scip-python python temp indexer `pilot.utils.utils`/json_serial().","target":"scip-python python python-stdlib 3.11 uuid/__init__:","attributes":{"type":"uses","at":[201,25,201,29]}},{"key":"geid_130_4924","source":"scip-python python temp indexer `pilot.utils.utils`/json_serial().","target":"scip-python python python-stdlib 3.11 uuid/UUID#","attributes":{"type":"uses","at":[201,30,201,34]}},{"key":"geid_130_4925","source":"scip-python python temp indexer `scripts.package_repo`/__init__:","target":"scip-python python temp indexer `scripts.package_repo`/main().","attributes":{"type":"defines","at":[4,0,54,44]}},{"key":"geid_130_4926","source":"scip-python python temp indexer `scripts.package_repo`/__init__:","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[0,7,0,9]}},{"key":"geid_130_4927","source":"scip-python python temp indexer `scripts.package_repo`/__init__:","target":"scip-python python python-stdlib 3.11 shutil/__init__:","attributes":{"type":"uses","at":[1,7,1,13]}},{"key":"geid_130_4928","source":"scip-python python temp indexer `scripts.package_repo`/__init__:","target":"scip-python python python-stdlib 3.11 zipfile/__init__:","attributes":{"type":"uses","at":[2,7,2,14]}},{"key":"geid_130_4929","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[6,15,6,17]}},{"key":"geid_130_4930","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[6,18,6,22]}},{"key":"geid_130_4931","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[6,23,6,30]}},{"key":"geid_130_4932","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[6,31,6,33]}},{"key":"geid_130_4933","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[6,34,6,38]}},{"key":"geid_130_4934","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[6,39,6,46]}},{"key":"geid_130_4935","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[6,47,6,49]}},{"key":"geid_130_4936","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[6,50,6,54]}},{"key":"geid_130_4937","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[6,55,6,62]}},{"key":"geid_130_4938","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python temp indexer `scripts.package_repo`/","attributes":{"type":"uses","at":[6,63,6,71]}},{"key":"geid_130_4939","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[7,16,7,18]}},{"key":"geid_130_4940","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[7,19,7,23]}},{"key":"geid_130_4941","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[7,24,7,31]}},{"key":"geid_130_4942","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[18,22,18,24]}},{"key":"geid_130_4943","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[18,25,18,29]}},{"key":"geid_130_4944","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[18,30,18,34]}},{"key":"geid_130_4945","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[19,11,19,13]}},{"key":"geid_130_4946","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[19,14,19,18]}},{"key":"geid_130_4947","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[19,19,19,25]}},{"key":"geid_130_4948","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[20,23,20,25]}},{"key":"geid_130_4949","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[20,26,20,30]}},{"key":"geid_130_4950","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[20,31,20,35]}},{"key":"geid_130_4951","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[20,44,20,46]}},{"key":"geid_130_4952","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[20,47,20,51]}},{"key":"geid_130_4953","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[20,52,20,60]}},{"key":"geid_130_4954","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 shutil/__init__:","attributes":{"type":"uses","at":[21,12,21,18]}},{"key":"geid_130_4955","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 shutil/move().","attributes":{"type":"uses","at":[21,19,21,23]}},{"key":"geid_130_4956","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[36,23,36,25]}},{"key":"geid_130_4957","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[36,26,36,30]}},{"key":"geid_130_4958","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[36,31,36,38]}},{"key":"geid_130_4959","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[37,19,37,21]}},{"key":"geid_130_4960","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[37,22,37,26]}},{"key":"geid_130_4961","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[37,27,37,31]}},{"key":"geid_130_4962","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 zipfile/__init__:","attributes":{"type":"uses","at":[39,9,39,16]}},{"key":"geid_130_4963","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 zipfile/ZipFile#","attributes":{"type":"uses","at":[39,17,39,24]}},{"key":"geid_130_4964","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 zipfile/__init__:","attributes":{"type":"uses","at":[39,44,39,51]}},{"key":"geid_130_4965","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 zipfile/ZIP_DEFLATED.ZIP_DEFLATED.","attributes":{"type":"uses","at":[39,52,39,64]}},{"key":"geid_130_4966","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[41,24,41,26]}},{"key":"geid_130_4967","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[41,27,41,31]}},{"key":"geid_130_4968","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[41,32,41,36]}},{"key":"geid_130_4969","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[42,15,42,17]}},{"key":"geid_130_4970","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[42,18,42,22]}},{"key":"geid_130_4971","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[42,23,42,29]}},{"key":"geid_130_4972","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 zipfile/ZipFile#write().","attributes":{"type":"uses","at":[43,24,43,29]}},{"key":"geid_130_4973","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[44,17,44,19]}},{"key":"geid_130_4974","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[44,20,44,24]}},{"key":"geid_130_4975","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[44,25,44,30]}},{"key":"geid_130_4976","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[45,38,45,40]}},{"key":"geid_130_4977","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 os/walk().","attributes":{"type":"uses","at":[45,41,45,45]}},{"key":"geid_130_4978","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[47,36,47,38]}},{"key":"geid_130_4979","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[47,39,47,43]}},{"key":"geid_130_4980","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[47,44,47,48]}},{"key":"geid_130_4981","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[48,39,48,41]}},{"key":"geid_130_4982","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[48,42,48,46]}},{"key":"geid_130_4983","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[48,47,48,54]}},{"key":"geid_130_4984","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 zipfile/ZipFile#write().","attributes":{"type":"uses","at":[49,32,49,37]}},{"key":"geid_130_4985","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 os/__init__:","attributes":{"type":"uses","at":[53,11,53,13]}},{"key":"geid_130_4986","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 os/path.","attributes":{"type":"uses","at":[53,14,53,18]}},{"key":"geid_130_4987","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 posixpath/basename().","attributes":{"type":"uses","at":[53,19,53,25]}},{"key":"geid_130_4988","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 shutil/__init__:","attributes":{"type":"uses","at":[54,12,54,18]}},{"key":"geid_130_4989","source":"scip-python python temp indexer `scripts.package_repo`/main().","target":"scip-python python python-stdlib 3.11 shutil/move().","attributes":{"type":"uses","at":[54,19,54,23]}},{"key":"geid_130_4990","source":"scip-python python temp indexer `scripts.package_repo`/__init__:","target":"scip-python python temp indexer `scripts.package_repo`/","attributes":{"type":"uses","at":[56,3,56,11]}},{"key":"geid_130_4991","source":"scip-python python temp indexer `scripts.package_repo`/__init__:","target":"scip-python python temp indexer `scripts.package_repo`/main().","attributes":{"type":"uses","at":[57,4,57,8]}}]}