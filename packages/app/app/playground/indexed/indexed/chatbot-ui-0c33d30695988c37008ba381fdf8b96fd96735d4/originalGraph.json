{"options":{"type":"directed","multi":true,"allowSelfLoops":true},"attributes":{},"nodes":[{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 `vitest.config.ts`/","attributes":{"range":[0,0,10,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 `vitest.config.ts`/","content":"import path from 'path';\nimport { defineConfig } from 'vite';\n\nexport default defineConfig({\n  resolve: {\n    alias: {\n      '@': path.resolve(__dirname, './'),\n    },\n  },\n});\n","file":"/vitest.config.ts","language":"typescript","fileHash":"a2677244c0d423c74918249c219de2ab6e6bbb95e7e889dd3cdca6e217855262","hash":"a2677244c0d423c74918249c219de2ab6e6bbb95e7e889dd3cdca6e217855262","processedContent":"import path from 'path'; #undefined\nimport { defineConfig } from 'vite';\n\nexport default defineConfig({\n  resolve: {\n    alias: {\n      '@': path.resolve(__dirname, './'), #undefined\n    },\n  },\n});\n","documentation":"This code defines a configuration for the Vite build tool, which allows developers to alias paths and resolve dependencies. The `resolve` property specifies the alias for the current directory, which is set to the root of the project."}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/__dirname.","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/__dirname.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 `tailwind.config.js`/","attributes":{"range":[0,0,18,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 `tailwind.config.js`/","content":"/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    './app/**/*.{js,ts,jsx,tsx}',\n    './pages/**/*.{js,ts,jsx,tsx}',\n    './components/**/*.{js,ts,jsx,tsx}',\n  ],\n  darkMode: 'class',\n  theme: {\n    extend: {},\n  },\n  variants: {\n    extend: {\n      visibility: ['group-hover'],\n    },\n  },\n  plugins: [require('@tailwindcss/typography')],\n};\n","file":"/tailwind.config.js","language":"typescript","fileHash":"d8f2e9547e396fe62d1d5f2099ca4c2db2c41b9fe100ab4c6cff400f0ccbba42","hash":"d8f2e9547e396fe62d1d5f2099ca4c2db2c41b9fe100ab4c6cff400f0ccbba42","processedContent":"/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    './app/**/*.{js,ts,jsx,tsx}',\n    './pages/**/*.{js,ts,jsx,tsx}',\n    './components/**/*.{js,ts,jsx,tsx}',\n  ],\n  darkMode: 'class',\n  theme: {\n    extend: {},\n  },\n  variants: {\n    extend: {\n      visibility: ['group-hover'],\n    },\n  },\n  plugins: [require('@tailwindcss/typography')], #undefined\n};\n","documentation":"This code defines a Tailwind CSS configuration file that specifies the files to be processed, the dark mode setting, and the plugins used. It also defines custom variants and extends the default theme."}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/require.","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/require.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 `prettier.config.js`/","attributes":{"range":[0,0,25,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 `prettier.config.js`/","content":"module.exports = {\n  trailingComma: 'all',\n  singleQuote: true,\n  plugins: [\n    'prettier-plugin-tailwindcss',\n    '@trivago/prettier-plugin-sort-imports',\n  ],\n  importOrder: [\n    'react', // React\n    '^react-.*$', // React-related imports\n    '^next', // Next-related imports\n    '^next-.*$', // Next-related imports\n    '^next/.*$', // Next-related imports\n    '^.*/hooks/.*$', // Hooks\n    '^.*/services/.*$', // Services\n    '^.*/utils/.*$', // Utils\n    '^.*/types/.*$', // Types\n    '^.*/pages/.*$', // Components\n    '^.*/components/.*$', // Components\n    '^[./]', // Other imports\n    '.*', // Any uncaught imports\n  ],\n  importOrderSeparation: true,\n  importOrderSortSpecifiers: true,\n};\n","file":"/prettier.config.js","language":"typescript","fileHash":"9baa2ed4e7a3abbf2fc18a613b663baff1a1f777e7bf404bd0212823027e6ff5","hash":"9baa2ed4e7a3abbf2fc18a613b663baff1a1f777e7bf404bd0212823027e6ff5","processedContent":"module.exports = {\n  trailingComma: 'all',\n  singleQuote: true,\n  plugins: [\n    'prettier-plugin-tailwindcss',\n    '@trivago/prettier-plugin-sort-imports',\n  ],\n  importOrder: [\n    'react', // React\n    '^react-.*$', // React-related imports\n    '^next', // Next-related imports\n    '^next-.*$', // Next-related imports\n    '^next/.*$', // Next-related imports\n    '^.*/hooks/.*$', // Hooks\n    '^.*/services/.*$', // Services\n    '^.*/utils/.*$', // Utils\n    '^.*/types/.*$', // Types\n    '^.*/pages/.*$', // Components\n    '^.*/components/.*$', // Components\n    '^[./]', // Other imports\n    '.*', // Any uncaught imports\n  ],\n  importOrderSeparation: true,\n  importOrderSortSpecifiers: true,\n};\n","documentation":"This code defines a configuration object for the Prettier code formatter, which is used to format and organize code in a consistent manner. It specifies various options for formatting, including trailing commas, single quotes, and import sorting. The import order is also defined, with specific rules for ordering imports based on their type and location in the project."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 `postcss.config.js`/","attributes":{"range":[0,0,6,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 `postcss.config.js`/","content":"module.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n};\n","file":"/postcss.config.js","language":"typescript","fileHash":"fa650b380adfabb151a0b352f7135e107e6352345f899060f1c5c231228f94bf","hash":"fa650b380adfabb151a0b352f7135e107e6352345f899060f1c5c231228f94bf","processedContent":"module.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n};\n","documentation":"This code defines a module that exports an object with two plugins: tailwindcss and autoprefixer."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 `next-i18next.config.js`/","attributes":{"range":[0,0,33,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 `next-i18next.config.js`/","content":"module.exports = {\n  i18n: {\n    defaultLocale: 'en',\n    locales: [\n      \"bn\",\n      \"de\",\n      \"en\",\n      \"es\",\n      \"fr\",\n      \"he\",\n      \"id\",\n      \"it\",\n      \"ja\",\n      \"ko\",\n      \"pl\",\n      \"pt\",\n      \"ru\",\n      \"ro\",      \n      \"sv\",\n      \"te\",\n      \"vi\",\n      \"zh\",\n      \"ar\",\n      \"tr\",\n      \"ca\",\n      \"fi\",\n    ],\n  },\n  localePath:\n    typeof window === 'undefined'\n      ? require('path').resolve('./public/locales')\n      : '/public/locales',\n};\n","file":"/next-i18next.config.js","language":"typescript","fileHash":"2ddf6f1adf600c63c71e3e27ee804cf03ebaa6ded17e15c849506f87e6486681","hash":"2ddf6f1adf600c63c71e3e27ee804cf03ebaa6ded17e15c849506f87e6486681","processedContent":"module.exports = {\n  i18n: {\n    defaultLocale: 'en',\n    locales: [\n      \"bn\",\n      \"de\",\n      \"en\",\n      \"es\",\n      \"fr\",\n      \"he\",\n      \"id\",\n      \"it\",\n      \"ja\",\n      \"ko\",\n      \"pl\",\n      \"pt\",\n      \"ru\",\n      \"ro\",      \n      \"sv\",\n      \"te\",\n      \"vi\",\n      \"zh\",\n      \"ar\",\n      \"tr\",\n      \"ca\",\n      \"fi\",\n    ],\n  },\n  localePath:\n    typeof window === 'undefined'\n      ? require('path').resolve('./public/locales')\n      \"\"\"\n      scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/require.: undefined\n      scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/: undefined\n      scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#resolve().: undefined\n      \"\"\"\n      : '/public/locales',\n};\n","documentation":"This code defines the internationalization (i18n) settings for a web application, including the default locale and a list of supported locales."}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#resolve().","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#resolve().","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 `next.config.js`/","attributes":{"range":[0,0,18,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 `next.config.js`/","content":"const { i18n } = require('./next-i18next.config');\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  i18n,\n  reactStrictMode: true,\n\n  webpack(config, { isServer, dev }) {\n    config.experiments = {\n      asyncWebAssembly: true,\n      layers: true,\n    };\n\n    return config;\n  },\n};\n\nmodule.exports = nextConfig;\n","file":"/next.config.js","language":"typescript","fileHash":"aea8cdf73f091a9b156ed7ca006a5d1f514cc851f47adc21d45bb2633ebb8453","hash":"aea8cdf73f091a9b156ed7ca006a5d1f514cc851f47adc21d45bb2633ebb8453","processedContent":"const { i18n } = require('./next-i18next.config');\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 `next-i18next.config.js`/i18n0:: undefined\nscip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/require.: undefined\nscip-typescript npm ai-chatbot-starter 0.1.0 `next-i18next.config.js`/: This code defines the internationalization (i18n) settings for a web application, including the default locale and a list of supported locales.\n\"\"\"\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  i18n,\n  reactStrictMode: true,\n\n  webpack(config, { isServer, dev }) {\n  \"\"\"\n  scip-typescript npm next 14.0.3 dist/server/`config-shared.d.ts`/WebpackConfigContext#isServer.: undefined\n  scip-typescript npm next 14.0.3 dist/server/`config-shared.d.ts`/WebpackConfigContext#dev.: undefined\n  \"\"\"\n    config.experiments = {\n      asyncWebAssembly: true,\n      layers: true,\n    };\n\n    return config;\n  },\n};\n\nmodule.exports = nextConfig; #undefined\n","documentation":"This code defines the internationalization (i18n) settings for a web application, including the default locale and a list of supported locales. It also enables experimental features such as asyncWebAssembly and layers in the Webpack configuration."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 `next-i18next.config.js`/i18n0:","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 `next-i18next.config.js`/i18n0:","language":"typescript"}},{"key":"scip-typescript npm next 14.0.3 dist/server/`config-shared.d.ts`/WebpackConfigContext#isServer.","attributes":{"symbol":"scip-typescript npm next 14.0.3 dist/server/`config-shared.d.ts`/WebpackConfigContext#isServer.","language":"typescript"}},{"key":"scip-typescript npm next 14.0.3 dist/server/`config-shared.d.ts`/WebpackConfigContext#dev.","attributes":{"symbol":"scip-typescript npm next 14.0.3 dist/server/`config-shared.d.ts`/WebpackConfigContext#dev.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 `next.config.js`/nextConfig.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 `next.config.js`/nextConfig.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/","attributes":{"range":[0,0,21,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/","content":"export const DEFAULT_SYSTEM_PROMPT =\n  process.env.NEXT_PUBLIC_DEFAULT_SYSTEM_PROMPT ||\n  \"You are ChatGPT, a large language model trained by OpenAI. Follow the user's instructions carefully. Respond using markdown.\";\n\nexport const OPENAI_API_HOST =\n  process.env.OPENAI_API_HOST || 'https://api.openai.com';\n\nexport const DEFAULT_TEMPERATURE = \n  parseFloat(process.env.NEXT_PUBLIC_DEFAULT_TEMPERATURE || \"1\");\n\nexport const OPENAI_API_TYPE =\n  process.env.OPENAI_API_TYPE || 'openai';\n\nexport const OPENAI_API_VERSION =\n  process.env.OPENAI_API_VERSION || '2023-03-15-preview';\n\nexport const OPENAI_ORGANIZATION =\n  process.env.OPENAI_ORGANIZATION || '';\n\nexport const AZURE_DEPLOYMENT_ID =\n  process.env.AZURE_DEPLOYMENT_ID || '';\n","file":"/utils/app/const.ts","language":"typescript","fileHash":"6cf5a576312ba58f171cdff484e06104fb7af7edeb16b6dc9c92f33938d1a81a","hash":"6cf5a576312ba58f171cdff484e06104fb7af7edeb16b6dc9c92f33938d1a81a","processedContent":"export const DEFAULT_SYSTEM_PROMPT =\n  process.env.NEXT_PUBLIC_DEFAULT_SYSTEM_PROMPT ||\n  \"\"\"\n  scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/process.: undefined\n  scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/process.: undefined\n  scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/NodeJS/Process#env.: undefined\n  \"\"\"\n  \"You are ChatGPT, a large language model trained by OpenAI. Follow the user's instructions carefully. Respond using markdown.\";\n\nexport const OPENAI_API_HOST =\n  process.env.OPENAI_API_HOST || 'https://api.openai.com';\n  \"\"\"\n  scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/process.: undefined\n  scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/process.: undefined\n  scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/NodeJS/Process#env.: undefined\n  \"\"\"\n\nexport const DEFAULT_TEMPERATURE = \n  parseFloat(process.env.NEXT_PUBLIC_DEFAULT_TEMPERATURE || \"1\");\n  \"\"\"\n  scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/process.: undefined\n  scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/process.: undefined\n  scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/NodeJS/Process#env.: undefined\n  \"\"\"\n\nexport const OPENAI_API_TYPE =\n  process.env.OPENAI_API_TYPE || 'openai';\n  \"\"\"\n  scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/process.: undefined\n  scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/process.: undefined\n  scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/NodeJS/Process#env.: undefined\n  \"\"\"\n\nexport const OPENAI_API_VERSION =\n  process.env.OPENAI_API_VERSION || '2023-03-15-preview';\n  \"\"\"\n  scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/process.: undefined\n  scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/process.: undefined\n  scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/NodeJS/Process#env.: undefined\n  \"\"\"\n\nexport const OPENAI_ORGANIZATION =\n  process.env.OPENAI_ORGANIZATION || '';\n  \"\"\"\n  scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/process.: undefined\n  scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/process.: undefined\n  scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/NodeJS/Process#env.: undefined\n  \"\"\"\n\nexport const AZURE_DEPLOYMENT_ID =\n  process.env.AZURE_DEPLOYMENT_ID || '';\n  \"\"\"\n  scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/process.: undefined\n  scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/process.: undefined\n  scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/NodeJS/Process#env.: undefined\n  \"\"\"\n","documentation":"The code defines several constants used in the OpenAI API, including the default system prompt, API host, temperature, API type, version, organization, and deployment ID."}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/process.","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/process.","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/process.","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/process.","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/NodeJS/Process#env.","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/NodeJS/Process#env.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/","attributes":{"range":[0,0,45,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/","content":"import { OPENAI_API_TYPE } from '../utils/app/const';\n\nexport interface OpenAIModel {\n  id: string;\n  name: string;\n  maxLength: number; // maximum length of a message\n  tokenLimit: number;\n}\n\nexport enum OpenAIModelID {\n  GPT_3_5 = 'gpt-3.5-turbo',\n  GPT_3_5_AZ = 'gpt-35-turbo',\n  GPT_4 = 'gpt-4',\n  GPT_4_32K = 'gpt-4-32k',\n}\n\n// in case the `DEFAULT_MODEL` environment variable is not set or set to an unsupported model\nexport const fallbackModelID = OpenAIModelID.GPT_3_5;\n\nexport const OpenAIModels: Record<OpenAIModelID, OpenAIModel> = {\n  [OpenAIModelID.GPT_3_5]: {\n    id: OpenAIModelID.GPT_3_5,\n    name: 'GPT-3.5',\n    maxLength: 12000,\n    tokenLimit: 4000,\n  },\n  [OpenAIModelID.GPT_3_5_AZ]: {\n    id: OpenAIModelID.GPT_3_5_AZ,\n    name: 'GPT-3.5',\n    maxLength: 12000,\n    tokenLimit: 4000,\n  },\n  [OpenAIModelID.GPT_4]: {\n    id: OpenAIModelID.GPT_4,\n    name: 'GPT-4',\n    maxLength: 24000,\n    tokenLimit: 8000,\n  },\n  [OpenAIModelID.GPT_4_32K]: {\n    id: OpenAIModelID.GPT_4_32K,\n    name: 'GPT-4-32K',\n    maxLength: 96000,\n    tokenLimit: 32000,\n  },\n};\n","file":"/types/openai.ts","language":"typescript","fileHash":"41e666e113379a94f930e2dfe308923313ad4710b8efb123f5cc6146ef74e4f8","hash":"41e666e113379a94f930e2dfe308923313ad4710b8efb123f5cc6146ef74e4f8","processedContent":"import { OPENAI_API_TYPE } from '../utils/app/const';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/OPENAI_API_TYPE.: undefined\nscip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/: The code defines several constants used in the OpenAI API, including the default system prompt, API host, temperature, API type, version, organization, and deployment ID.\n\"\"\"\n\nexport interface OpenAIModel {\n  \"\"\"This code defines an interface for an OpenAI model, which includes the ID, name, maximum length of a message, and token limit.\"\"\"\n  pass\n\nexport enum OpenAIModelID {\n  GPT_3_5 = 'gpt-3.5-turbo',\n  GPT_3_5_AZ = 'gpt-35-turbo',\n  GPT_4 = 'gpt-4',\n  GPT_4_32K = 'gpt-4-32k',\n}\n\n// in case the `DEFAULT_MODEL` environment variable is not set or set to an unsupported model\nexport const fallbackModelID = OpenAIModelID.GPT_3_5;\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModelID#: undefined\nscip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModelID#GPT_3_5.: undefined\n\"\"\"\n\nexport const OpenAIModels: Record<OpenAIModelID, OpenAIModel> = {\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModel#: This code defines an interface for an OpenAI model, which includes the ID, name, maximum length of a message, and token limit.\nscip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModelID#: undefined\n\"\"\"\n  [OpenAIModelID.GPT_3_5]: {\n  \"\"\"\n  scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModelID#: undefined\n  scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModelID#GPT_3_5.: undefined\n  \"\"\"\n    id: OpenAIModelID.GPT_3_5,\n    \"\"\"\n    scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModelID#: undefined\n    scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModelID#GPT_3_5.: undefined\n    \"\"\"\n    name: 'GPT-3.5',\n    maxLength: 12000,\n    tokenLimit: 4000,\n  },\n  [OpenAIModelID.GPT_3_5_AZ]: {\n  \"\"\"\n  scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModelID#: undefined\n  scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModelID#GPT_3_5_AZ.: undefined\n  \"\"\"\n    id: OpenAIModelID.GPT_3_5_AZ,\n    \"\"\"\n    scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModelID#: undefined\n    scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModelID#GPT_3_5_AZ.: undefined\n    \"\"\"\n    name: 'GPT-3.5',\n    maxLength: 12000,\n    tokenLimit: 4000,\n  },\n  [OpenAIModelID.GPT_4]: {\n  \"\"\"\n  scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModelID#: undefined\n  scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModelID#GPT_4.: undefined\n  \"\"\"\n    id: OpenAIModelID.GPT_4,\n    \"\"\"\n    scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModelID#: undefined\n    scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModelID#GPT_4.: undefined\n    \"\"\"\n    name: 'GPT-4',\n    maxLength: 24000,\n    tokenLimit: 8000,\n  },\n  [OpenAIModelID.GPT_4_32K]: {\n  \"\"\"\n  scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModelID#: undefined\n  scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModelID#GPT_4_32K.: undefined\n  \"\"\"\n    id: OpenAIModelID.GPT_4_32K,\n    \"\"\"\n    scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModelID#: undefined\n    scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModelID#GPT_4_32K.: undefined\n    \"\"\"\n    name: 'GPT-4-32K',\n    maxLength: 96000,\n    tokenLimit: 32000,\n  },\n};\n","documentation":"The code defines several constants used in the OpenAI API, including the default system prompt, API host, temperature, API type, version, organization, and deployment ID. It also defines an interface for an OpenAI model, which includes the ID, name, maximum length of a message, and token limit."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModel#","attributes":{"range":[2,0,7,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModel#","content":"export interface OpenAIModel {\n  id: string;\n  name: string;\n  maxLength: number; // maximum length of a message\n  tokenLimit: number;\n}","file":"/types/openai.ts","language":"typescript","fileHash":"41e666e113379a94f930e2dfe308923313ad4710b8efb123f5cc6146ef74e4f8","hash":"e67513a7c6b010b8a78db7aefdca84923757489e211bcb0975a05947878721ee","processedContent":"export interface OpenAIModel {\n  id: string;\n  name: string;\n  maxLength: number; // maximum length of a message\n  tokenLimit: number;\n}","documentation":"This code defines an interface for an OpenAI model, which includes the ID, name, maximum length of a message, and token limit."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/OPENAI_API_TYPE.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/OPENAI_API_TYPE.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModelID#","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModelID#","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModelID#GPT_3_5.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModelID#GPT_3_5.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModelID#GPT_3_5_AZ.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModelID#GPT_3_5_AZ.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModelID#GPT_4.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModelID#GPT_4.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModelID#GPT_4_32K.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModelID#GPT_4_32K.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`chat.ts`/","attributes":{"range":[0,0,26,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`chat.ts`/","content":"import { OpenAIModel } from './openai';\n\nexport interface Message {\n  role: Role;\n  content: string;\n}\n\nexport type Role = 'assistant' | 'user';\n\nexport interface ChatBody {\n  model: OpenAIModel;\n  messages: Message[];\n  key: string;\n  prompt: string;\n  temperature: number;\n}\n\nexport interface Conversation {\n  id: string;\n  name: string;\n  messages: Message[];\n  model: OpenAIModel;\n  prompt: string;\n  temperature: number;\n  folderId: string | null;\n}\n","file":"/types/chat.ts","language":"typescript","fileHash":"62dd45d20f4e2a156503fc2a098521123dbae0b7a6b2a7b1e0dec87ce2067863","hash":"62dd45d20f4e2a156503fc2a098521123dbae0b7a6b2a7b1e0dec87ce2067863","processedContent":"import { OpenAIModel } from './openai';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModel#: This code defines an interface for an OpenAI model, which includes the ID, name, maximum length of a message, and token limit.\nscip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/: The code defines several constants used in the OpenAI API, including the default system prompt, API host, temperature, API type, version, organization, and deployment ID. It also defines an interface for an OpenAI model, which includes the ID, name, maximum length of a message, and token limit.\n\"\"\"\n\nexport interface Message {\n  \"\"\"This code defines a message interface with two properties: role and content. The role property is of type Role, which is not defined in this code snippet. The content property is a string.\"\"\"\n  pass\n\nexport type Role = 'assistant' | 'user';\n\nexport interface ChatBody {\n  \"\"\"This code defines an interface for a chatbot that uses an OpenAI model to generate responses. It includes properties for the model ID, name, maximum message length, and token limit, as well as arrays of messages with role and content properties.\"\"\"\n  pass\n\nexport interface Conversation {\n  \"\"\"This code defines a conversation interface with properties such as ID, name, messages, model, prompt, temperature, and folderId. The messages property is an array of message objects with role and content properties. The model property is an OpenAI model interface with properties such as ID, name, maximum length, and token limit.\"\"\"\n  pass\n","documentation":"The code defines an interface for an OpenAI model, a message interface, a chatbot interface, and a conversation interface. It also defines several constants used in the OpenAI API and defines the role of the chatbot as either an assistant or user."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`chat.ts`/Message#","attributes":{"range":[2,0,5,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`chat.ts`/Message#","content":"export interface Message {\n  role: Role;\n  content: string;\n}","file":"/types/chat.ts","language":"typescript","fileHash":"62dd45d20f4e2a156503fc2a098521123dbae0b7a6b2a7b1e0dec87ce2067863","hash":"c11093fb0a706737fde886bb9d6b33dc8a5e39a49e3ae7d29917ac3ed506a88b","processedContent":"export interface Message {\n  role: Role; #undefined\n  content: string;\n}","documentation":"This code defines a message interface with two properties: role and content. The role property is of type Role, which is not defined in this code snippet. The content property is a string."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`chat.ts`/ChatBody#","attributes":{"range":[9,0,15,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`chat.ts`/ChatBody#","content":"export interface ChatBody {\n  model: OpenAIModel;\n  messages: Message[];\n  key: string;\n  prompt: string;\n  temperature: number;\n}","file":"/types/chat.ts","language":"typescript","fileHash":"62dd45d20f4e2a156503fc2a098521123dbae0b7a6b2a7b1e0dec87ce2067863","hash":"3a179063ca790d461a10ad1560902d17726f010a0a7011bf203654fe02a068b1","processedContent":"export interface ChatBody {\n  model: OpenAIModel; #This code defines an interface for an OpenAI model, which includes the ID, name, maximum length of a message, and token limit.\n  messages: Message[]; #This code defines a message interface with two properties: role and content. The role property is of type Role, which is not defined in this code snippet. The content property is a string.\n  key: string;\n  prompt: string;\n  temperature: number;\n}","documentation":"This code defines an interface for a chatbot that uses an OpenAI model to generate responses. It includes properties for the model ID, name, maximum message length, and token limit, as well as arrays of messages with role and content properties."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`chat.ts`/Conversation#","attributes":{"range":[17,0,25,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`chat.ts`/Conversation#","content":"export interface Conversation {\n  id: string;\n  name: string;\n  messages: Message[];\n  model: OpenAIModel;\n  prompt: string;\n  temperature: number;\n  folderId: string | null;\n}","file":"/types/chat.ts","language":"typescript","fileHash":"62dd45d20f4e2a156503fc2a098521123dbae0b7a6b2a7b1e0dec87ce2067863","hash":"7f057d2412c367adf909cbf61f37fc9a95ed209dc2af9d8893bb9c4645f9f837","processedContent":"export interface Conversation {\n  id: string;\n  name: string;\n  messages: Message[]; #This code defines a message interface with two properties: role and content. The role property is of type Role, which is not defined in this code snippet. The content property is a string.\n  model: OpenAIModel; #This code defines an interface for an OpenAI model, which includes the ID, name, maximum length of a message, and token limit.\n  prompt: string;\n  temperature: number;\n  folderId: string | null;\n}","documentation":"This code defines a conversation interface with properties such as ID, name, messages, model, prompt, temperature, and folderId. The messages property is an array of message objects with role and content properties. The model property is an OpenAI model interface with properties such as ID, name, maximum length, and token limit."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`chat.ts`/Role#","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`chat.ts`/Role#","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`folder.ts`/","attributes":{"range":[0,0,7,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`folder.ts`/","content":"export interface FolderInterface {\n  id: string;\n  name: string;\n  type: FolderType;\n}\n\nexport type FolderType = 'chat' | 'prompt';\n","file":"/types/folder.ts","language":"typescript","fileHash":"8aa7619bf71c127336ab7954e1ed0d28c6098e8c6c9b4e54a984bff42092fc61","hash":"8aa7619bf71c127336ab7954e1ed0d28c6098e8c6c9b4e54a984bff42092fc61","processedContent":"export interface FolderInterface {\n  \"\"\"This code defines an interface for a folder object, with properties such as an ID, name, and type. The type property is optional and can be undefined.\"\"\"\n  pass\n\nexport type FolderType = 'chat' | 'prompt';\n","documentation":"This code defines an interface for a folder object with properties such as ID, name, and type. The type property is optional and can be undefined."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`folder.ts`/FolderInterface#","attributes":{"range":[0,0,4,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`folder.ts`/FolderInterface#","content":"export interface FolderInterface {\n  id: string;\n  name: string;\n  type: FolderType;\n}","file":"/types/folder.ts","language":"typescript","fileHash":"8aa7619bf71c127336ab7954e1ed0d28c6098e8c6c9b4e54a984bff42092fc61","hash":"559d562f605b3eec549577cb7619f3b817a96afcbbd6c73816f1366a8bfbf8dd","processedContent":"export interface FolderInterface {\n  id: string;\n  name: string;\n  type: FolderType; #undefined\n}","documentation":"This code defines an interface for a folder object, with properties such as an ID, name, and type. The type property is optional and can be undefined."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`folder.ts`/FolderType#","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`folder.ts`/FolderType#","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`data.ts`/","attributes":{"range":[0,0,4,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`data.ts`/","content":"export interface KeyValuePair {\n  key: string;\n  value: any;\n}\n","file":"/types/data.ts","language":"typescript","fileHash":"ca15df73e201f971dedbab8e434085119683c7bde526febd23ce0ac36d46675b","hash":"ca15df73e201f971dedbab8e434085119683c7bde526febd23ce0ac36d46675b","processedContent":"export interface KeyValuePair {\n  \"\"\"This code defines a key-value pair interface in TypeScript, which is used to store and retrieve data in a structured format.\"\"\"\n  pass\n","documentation":"This code defines a key-value pair interface in TypeScript, which is used to store and retrieve data in a structured format."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`data.ts`/KeyValuePair#","attributes":{"range":[0,0,3,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`data.ts`/KeyValuePair#","content":"export interface KeyValuePair {\n  key: string;\n  value: any;\n}","file":"/types/data.ts","language":"typescript","fileHash":"ca15df73e201f971dedbab8e434085119683c7bde526febd23ce0ac36d46675b","hash":"cd3d0e02fc1bd1b582b588a5af7fae2063d3d82474d3df1d3396e945a4ed07d5","processedContent":"export interface KeyValuePair {\n  key: string;\n  value: any;\n}","documentation":"This code defines a key-value pair interface in TypeScript, which is used to store and retrieve data in a structured format."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/","attributes":{"range":[0,0,39,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/","content":"import { KeyValuePair } from './data';\n\nexport interface Plugin {\n  id: PluginID;\n  name: PluginName;\n  requiredKeys: KeyValuePair[];\n}\n\nexport interface PluginKey {\n  pluginId: PluginID;\n  requiredKeys: KeyValuePair[];\n}\n\nexport enum PluginID {\n  GOOGLE_SEARCH = 'google-search',\n}\n\nexport enum PluginName {\n  GOOGLE_SEARCH = 'Google Search',\n}\n\nexport const Plugins: Record<PluginID, Plugin> = {\n  [PluginID.GOOGLE_SEARCH]: {\n    id: PluginID.GOOGLE_SEARCH,\n    name: PluginName.GOOGLE_SEARCH,\n    requiredKeys: [\n      {\n        key: 'GOOGLE_API_KEY',\n        value: '',\n      },\n      {\n        key: 'GOOGLE_CSE_ID',\n        value: '',\n      },\n    ],\n  },\n};\n\nexport const PluginList = Object.values(Plugins);\n","file":"/types/plugin.ts","language":"typescript","fileHash":"2d5603e6d04fec97613a1514fa7b9ad6140ae281c47e8517b16ccf3a17eafad6","hash":"2d5603e6d04fec97613a1514fa7b9ad6140ae281c47e8517b16ccf3a17eafad6","processedContent":"import { KeyValuePair } from './data';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 types/`data.ts`/KeyValuePair#: This code defines a key-value pair interface in TypeScript, which is used to store and retrieve data in a structured format.\nscip-typescript npm ai-chatbot-starter 0.1.0 types/`data.ts`/: This code defines a key-value pair interface in TypeScript, which is used to store and retrieve data in a structured format.\n\"\"\"\n\nexport interface Plugin {\n  \"\"\"This code defines a plugin interface in TypeScript, which includes an ID, name, and required keys. The required keys are stored in a key-value pair format, allowing for structured data storage and retrieval.\"\"\"\n  pass\n\nexport interface PluginKey {\n  \"\"\"This code defines a key-value pair interface in TypeScript, which is used to store and retrieve data in a structured format.\"\"\"\n  pass\n\nexport enum PluginID {\n  GOOGLE_SEARCH = 'google-search',\n}\n\nexport enum PluginName {\n  GOOGLE_SEARCH = 'Google Search',\n}\n\nexport const Plugins: Record<PluginID, Plugin> = {\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/Plugin#: This code defines a plugin interface in TypeScript, which includes an ID, name, and required keys. The required keys are stored in a key-value pair format, allowing for structured data storage and retrieval.\nscip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/PluginID#: undefined\n\"\"\"\n  [PluginID.GOOGLE_SEARCH]: {\n  \"\"\"\n  scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/PluginID#: undefined\n  scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/PluginID#GOOGLE_SEARCH.: undefined\n  \"\"\"\n    id: PluginID.GOOGLE_SEARCH,\n    \"\"\"\n    scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/PluginID#: undefined\n    scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/PluginID#GOOGLE_SEARCH.: undefined\n    \"\"\"\n    name: PluginName.GOOGLE_SEARCH,\n    \"\"\"\n    scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/PluginName#: undefined\n    scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/PluginName#GOOGLE_SEARCH.: undefined\n    \"\"\"\n    requiredKeys: [\n      {\n        key: 'GOOGLE_API_KEY',\n        value: '',\n      },\n      {\n        key: 'GOOGLE_CSE_ID',\n        value: '',\n      },\n    ],\n  },\n};\n\nexport const PluginList = Object.values(Plugins); #undefined\n","documentation":"The code defines a plugin interface in TypeScript, which includes an ID, name, and required keys. The required keys are stored in a key-value pair format, allowing for structured data storage and retrieval."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/Plugin#","attributes":{"range":[2,0,6,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/Plugin#","content":"export interface Plugin {\n  id: PluginID;\n  name: PluginName;\n  requiredKeys: KeyValuePair[];\n}","file":"/types/plugin.ts","language":"typescript","fileHash":"2d5603e6d04fec97613a1514fa7b9ad6140ae281c47e8517b16ccf3a17eafad6","hash":"204c5d945c4b13ff8a4accddf3ec706c18bd651796dd987650ab90f2f08008a7","processedContent":"export interface Plugin {\n  id: PluginID; #undefined\n  name: PluginName; #undefined\n  requiredKeys: KeyValuePair[]; #This code defines a key-value pair interface in TypeScript, which is used to store and retrieve data in a structured format.\n}","documentation":"This code defines a plugin interface in TypeScript, which includes an ID, name, and required keys. The required keys are stored in a key-value pair format, allowing for structured data storage and retrieval."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/PluginKey#","attributes":{"range":[8,0,11,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/PluginKey#","content":"export interface PluginKey {\n  pluginId: PluginID;\n  requiredKeys: KeyValuePair[];\n}","file":"/types/plugin.ts","language":"typescript","fileHash":"2d5603e6d04fec97613a1514fa7b9ad6140ae281c47e8517b16ccf3a17eafad6","hash":"a1763e095a9ecf6fe84c6fe3c4260405fb9f5399bc14cfef72469b8e92a3f756","processedContent":"export interface PluginKey {\n  pluginId: PluginID; #undefined\n  requiredKeys: KeyValuePair[]; #This code defines a key-value pair interface in TypeScript, which is used to store and retrieve data in a structured format.\n}","documentation":"This code defines a key-value pair interface in TypeScript, which is used to store and retrieve data in a structured format."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/PluginID#","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/PluginID#","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/PluginName#","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/PluginName#","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/PluginID#GOOGLE_SEARCH.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/PluginID#GOOGLE_SEARCH.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/PluginName#GOOGLE_SEARCH.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/PluginName#GOOGLE_SEARCH.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/Plugins.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/Plugins.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`prompt.ts`/","attributes":{"range":[0,0,10,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`prompt.ts`/","content":"import { OpenAIModel } from './openai';\n\nexport interface Prompt {\n  id: string;\n  name: string;\n  description: string;\n  content: string;\n  model: OpenAIModel;\n  folderId: string | null;\n}\n","file":"/types/prompt.ts","language":"typescript","fileHash":"3cae2ea227f4812a03607039861ff08155e3a9c1c470a4fb3b3d78b8afc0c61a","hash":"3cae2ea227f4812a03607039861ff08155e3a9c1c470a4fb3b3d78b8afc0c61a","processedContent":"import { OpenAIModel } from './openai';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModel#: This code defines an interface for an OpenAI model, which includes the ID, name, maximum length of a message, and token limit.\nscip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/: The code defines several constants used in the OpenAI API, including the default system prompt, API host, temperature, API type, version, organization, and deployment ID. It also defines an interface for an OpenAI model, which includes the ID, name, maximum length of a message, and token limit.\n\"\"\"\n\nexport interface Prompt {\n  \"\"\"This code defines an interface for an OpenAI model, which includes the ID, name, maximum length of a message, and token limit.\"\"\"\n  pass\n","documentation":"The code defines an interface for an OpenAI model, which includes the ID, name, maximum length of a message, and token limit."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`prompt.ts`/Prompt#","attributes":{"range":[2,0,9,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`prompt.ts`/Prompt#","content":"export interface Prompt {\n  id: string;\n  name: string;\n  description: string;\n  content: string;\n  model: OpenAIModel;\n  folderId: string | null;\n}","file":"/types/prompt.ts","language":"typescript","fileHash":"3cae2ea227f4812a03607039861ff08155e3a9c1c470a4fb3b3d78b8afc0c61a","hash":"0997defad52eac0276cfa38265e776ce77eba8a19e876195e1c5bd2c31b45e54","processedContent":"export interface Prompt {\n  id: string;\n  name: string;\n  description: string;\n  content: string;\n  model: OpenAIModel; #This code defines an interface for an OpenAI model, which includes the ID, name, maximum length of a message, and token limit.\n  folderId: string | null;\n}","documentation":"This code defines an interface for an OpenAI model, which includes the ID, name, maximum length of a message, and token limit."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`storage.ts`/","attributes":{"range":[0,0,21,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`storage.ts`/","content":"import { Conversation } from './chat';\nimport { FolderInterface } from './folder';\nimport { PluginKey } from './plugin';\nimport { Prompt } from './prompt';\n\n// keep track of local storage schema\nexport interface LocalStorage {\n  apiKey: string;\n  conversationHistory: Conversation[];\n  selectedConversation: Conversation;\n  theme: 'light' | 'dark';\n  // added folders (3/23/23)\n  folders: FolderInterface[];\n  // added prompts (3/26/23)\n  prompts: Prompt[];\n  // added showChatbar and showPromptbar (3/26/23)\n  showChatbar: boolean;\n  showPromptbar: boolean;\n  // added plugin keys (4/3/23)\n  pluginKeys: PluginKey[];\n}\n","file":"/types/storage.ts","language":"typescript","fileHash":"444e37785dc0683115443d67e6b4611130454d74fdf090e6a7f6ac24bbd00260","hash":"444e37785dc0683115443d67e6b4611130454d74fdf090e6a7f6ac24bbd00260","processedContent":"import { Conversation } from './chat';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 types/`chat.ts`/Conversation#: This code defines a conversation interface with properties such as ID, name, messages, model, prompt, temperature, and folderId. The messages property is an array of message objects with role and content properties. The model property is an OpenAI model interface with properties such as ID, name, maximum length, and token limit.\nscip-typescript npm ai-chatbot-starter 0.1.0 types/`chat.ts`/: The code defines an interface for an OpenAI model, a message interface, a chatbot interface, and a conversation interface. It also defines several constants used in the OpenAI API and defines the role of the chatbot as either an assistant or user.\n\"\"\"\nimport { FolderInterface } from './folder';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 types/`folder.ts`/FolderInterface#: This code defines an interface for a folder object, with properties such as an ID, name, and type. The type property is optional and can be undefined.\nscip-typescript npm ai-chatbot-starter 0.1.0 types/`folder.ts`/: This code defines an interface for a folder object with properties such as ID, name, and type. The type property is optional and can be undefined.\n\"\"\"\nimport { PluginKey } from './plugin';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/PluginKey#: This code defines a key-value pair interface in TypeScript, which is used to store and retrieve data in a structured format.\nscip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/: The code defines a plugin interface in TypeScript, which includes an ID, name, and required keys. The required keys are stored in a key-value pair format, allowing for structured data storage and retrieval.\n\"\"\"\nimport { Prompt } from './prompt';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 types/`prompt.ts`/Prompt#: This code defines an interface for an OpenAI model, which includes the ID, name, maximum length of a message, and token limit.\nscip-typescript npm ai-chatbot-starter 0.1.0 types/`prompt.ts`/: The code defines an interface for an OpenAI model, which includes the ID, name, maximum length of a message, and token limit.\n\"\"\"\n\n// keep track of local storage schema\nexport interface LocalStorage {\n  \"\"\"This code defines an interface for a local storage object, which includes properties such as an API key, conversation history, selected conversation, theme, folders, prompts, show chatbar, show promptbar, and plugin keys.\"\"\"\n  pass\n","documentation":"The code defines interfaces for various objects and structures used in an AI chatbot, including conversations, folders, prompts, and plugins. It also defines a local storage interface for storing and retrieving data."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`storage.ts`/LocalStorage#","attributes":{"range":[6,0,20,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`storage.ts`/LocalStorage#","content":"export interface LocalStorage {\n  apiKey: string;\n  conversationHistory: Conversation[];\n  selectedConversation: Conversation;\n  theme: 'light' | 'dark';\n  // added folders (3/23/23)\n  folders: FolderInterface[];\n  // added prompts (3/26/23)\n  prompts: Prompt[];\n  // added showChatbar and showPromptbar (3/26/23)\n  showChatbar: boolean;\n  showPromptbar: boolean;\n  // added plugin keys (4/3/23)\n  pluginKeys: PluginKey[];\n}","file":"/types/storage.ts","language":"typescript","fileHash":"444e37785dc0683115443d67e6b4611130454d74fdf090e6a7f6ac24bbd00260","hash":"1afa89aa7c38e6fd1ca986225d5c0fbed2bd141aab7066696a02716ff44a3301","processedContent":"export interface LocalStorage {\n  apiKey: string;\n  conversationHistory: Conversation[]; #This code defines a conversation interface with properties such as ID, name, messages, model, prompt, temperature, and folderId. The messages property is an array of message objects with role and content properties. The model property is an OpenAI model interface with properties such as ID, name, maximum length, and token limit.\n  selectedConversation: Conversation; #This code defines a conversation interface with properties such as ID, name, messages, model, prompt, temperature, and folderId. The messages property is an array of message objects with role and content properties. The model property is an OpenAI model interface with properties such as ID, name, maximum length, and token limit.\n  theme: 'light' | 'dark';\n  // added folders (3/23/23)\n  folders: FolderInterface[]; #This code defines an interface for a folder object, with properties such as an ID, name, and type. The type property is optional and can be undefined.\n  // added prompts (3/26/23)\n  prompts: Prompt[]; #This code defines an interface for an OpenAI model, which includes the ID, name, maximum length of a message, and token limit.\n  // added showChatbar and showPromptbar (3/26/23)\n  showChatbar: boolean;\n  showPromptbar: boolean;\n  // added plugin keys (4/3/23)\n  pluginKeys: PluginKey[]; #This code defines a key-value pair interface in TypeScript, which is used to store and retrieve data in a structured format.\n}","documentation":"This code defines an interface for a local storage object, which includes properties such as an API key, conversation history, selected conversation, theme, folders, prompts, show chatbar, show promptbar, and plugin keys."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`settings.ts`/","attributes":{"range":[0,0,3,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`settings.ts`/","content":"export interface Settings {\n  theme: 'light' | 'dark';\n}\n","file":"/types/settings.ts","language":"typescript","fileHash":"957d35412d7e78ac5310017a4d1e77e3381c00dc29d7ec39864abe0db40da7a9","hash":"957d35412d7e78ac5310017a4d1e77e3381c00dc29d7ec39864abe0db40da7a9","processedContent":"export interface Settings {\n  \"\"\"This code defines an interface for a settings object that has a single property, \"theme\", which can be either \"light\" or \"dark\".\"\"\"\n  pass\n","documentation":"This code defines an interface for a settings object that has a single property, \"theme\", which can be either \"light\" or \"dark\"."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`settings.ts`/Settings#","attributes":{"range":[0,0,2,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`settings.ts`/Settings#","content":"export interface Settings {\n  theme: 'light' | 'dark';\n}","file":"/types/settings.ts","language":"typescript","fileHash":"957d35412d7e78ac5310017a4d1e77e3381c00dc29d7ec39864abe0db40da7a9","hash":"f8669106f2951f1d3b97e6913e7d3458498d697eb9a35e69c240ed1ffb1081e4","processedContent":"export interface Settings {\n  theme: 'light' | 'dark';\n}","documentation":"This code defines an interface for a settings object that has a single property, \"theme\", which can be either \"light\" or \"dark\"."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`index.ts`/","attributes":{"range":[0,0,1,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`index.ts`/","content":"export {};\n","file":"/types/index.ts","language":"typescript","fileHash":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881","hash":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881","processedContent":"export {};\n","documentation":"This code exports an empty object, which is a common practice in JavaScript to create a new object that can be used as a container for other data."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`google.ts`/","attributes":{"range":[0,0,19,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`google.ts`/","content":"import { ChatBody, Message } from './chat';\n\nexport interface GoogleBody extends ChatBody {\n  googleAPIKey: string;\n  googleCSEId: string;\n}\n\nexport interface GoogleResponse {\n  message: Message;\n}\n\nexport interface GoogleSource {\n  title: string;\n  link: string;\n  displayLink: string;\n  snippet: string;\n  image: string;\n  text: string;\n}\n","file":"/types/google.ts","language":"typescript","fileHash":"c77d1c5c260ea168c78c931d3872fee910294fdb15c19501f6d7744ff84580bb","hash":"c77d1c5c260ea168c78c931d3872fee910294fdb15c19501f6d7744ff84580bb","processedContent":"import { ChatBody, Message } from './chat';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 types/`chat.ts`/ChatBody#: This code defines an interface for a chatbot that uses an OpenAI model to generate responses. It includes properties for the model ID, name, maximum message length, and token limit, as well as arrays of messages with role and content properties.\nscip-typescript npm ai-chatbot-starter 0.1.0 types/`chat.ts`/Message#: This code defines a message interface with two properties: role and content. The role property is of type Role, which is not defined in this code snippet. The content property is a string.\nscip-typescript npm ai-chatbot-starter 0.1.0 types/`chat.ts`/: The code defines an interface for an OpenAI model, a message interface, a chatbot interface, and a conversation interface. It also defines several constants used in the OpenAI API and defines the role of the chatbot as either an assistant or user.\n\"\"\"\n\nexport interface GoogleBody extends ChatBody {\n  \"\"\"This code defines an interface for a chatbot that uses an OpenAI model to generate responses. It includes properties for the model ID, name, maximum message length, and token limit, as well as arrays of messages with role and content properties.\"\"\"\n  pass\n\nexport interface GoogleResponse {\n  \"\"\"This code defines a message interface with two properties: role and content. The role property is of type Role, which is not defined in this code snippet. The content property is a string.\"\"\"\n  pass\n\nexport interface GoogleSource {\n  \"\"\"This code defines an interface for a Google search result, with properties for the title, link, display link, snippet, image, and text.\"\"\"\n  pass\n","documentation":"The code defines interfaces for a chatbot, message, and conversation using OpenAI models. It also defines constants and types used in the OpenAI API and defines the role of the chatbot as either an assistant or user."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`google.ts`/GoogleBody#","attributes":{"range":[2,0,5,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`google.ts`/GoogleBody#","content":"export interface GoogleBody extends ChatBody {\n  googleAPIKey: string;\n  googleCSEId: string;\n}","file":"/types/google.ts","language":"typescript","fileHash":"c77d1c5c260ea168c78c931d3872fee910294fdb15c19501f6d7744ff84580bb","hash":"a3eed72c6e6a7cab4d9612c91a6fad706c659bcaaf7c07e1296145e1a1131bf1","processedContent":"export interface GoogleBody extends ChatBody { #This code defines an interface for a chatbot that uses an OpenAI model to generate responses. It includes properties for the model ID, name, maximum message length, and token limit, as well as arrays of messages with role and content properties.\n  googleAPIKey: string;\n  googleCSEId: string;\n}","documentation":"This code defines an interface for a chatbot that uses an OpenAI model to generate responses. It includes properties for the model ID, name, maximum message length, and token limit, as well as arrays of messages with role and content properties."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`google.ts`/GoogleResponse#","attributes":{"range":[7,0,9,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`google.ts`/GoogleResponse#","content":"export interface GoogleResponse {\n  message: Message;\n}","file":"/types/google.ts","language":"typescript","fileHash":"c77d1c5c260ea168c78c931d3872fee910294fdb15c19501f6d7744ff84580bb","hash":"3eb26cf927662c6ed9b675982fd29f37cf963e5074bfddeba610b634a220c5b2","processedContent":"export interface GoogleResponse {\n  message: Message; #This code defines a message interface with two properties: role and content. The role property is of type Role, which is not defined in this code snippet. The content property is a string.\n}","documentation":"This code defines a message interface with two properties: role and content. The role property is of type Role, which is not defined in this code snippet. The content property is a string."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`google.ts`/GoogleSource#","attributes":{"range":[11,0,18,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`google.ts`/GoogleSource#","content":"export interface GoogleSource {\n  title: string;\n  link: string;\n  displayLink: string;\n  snippet: string;\n  image: string;\n  text: string;\n}","file":"/types/google.ts","language":"typescript","fileHash":"c77d1c5c260ea168c78c931d3872fee910294fdb15c19501f6d7744ff84580bb","hash":"28015491c7768f1286b64bbc79ffb3189927dc72844a2b15aa542bc661531db7","processedContent":"export interface GoogleSource {\n  title: string;\n  link: string;\n  displayLink: string;\n  snippet: string;\n  image: string;\n  text: string;\n}","documentation":"This code defines an interface for a Google search result, with properties for the title, link, display link, snippet, image, and text."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/","attributes":{"range":[0,0,45,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/","content":"import { Conversation, Message } from './chat';\nimport { FolderInterface } from './folder';\nimport { OpenAIModel } from './openai';\nimport { Prompt } from './prompt';\n\nexport type SupportedExportFormats =\n  | ExportFormatV1\n  | ExportFormatV2\n  | ExportFormatV3\n  | ExportFormatV4;\nexport type LatestExportFormat = ExportFormatV4;\n\n////////////////////////////////////////////////////////////////////////////////////////////\ninterface ConversationV1 {\n  id: number;\n  name: string;\n  messages: Message[];\n}\n\nexport type ExportFormatV1 = ConversationV1[];\n\n////////////////////////////////////////////////////////////////////////////////////////////\ninterface ChatFolder {\n  id: number;\n  name: string;\n}\n\nexport interface ExportFormatV2 {\n  history: Conversation[] | null;\n  folders: ChatFolder[] | null;\n}\n\n////////////////////////////////////////////////////////////////////////////////////////////\nexport interface ExportFormatV3 {\n  version: 3;\n  history: Conversation[];\n  folders: FolderInterface[];\n}\n\nexport interface ExportFormatV4 {\n  version: 4;\n  history: Conversation[];\n  folders: FolderInterface[];\n  prompts: Prompt[];\n}\n","file":"/types/export.ts","language":"typescript","fileHash":"a8885437206d83d593f2b644742d433cc359b791f728f7094454e047ad33c8af","hash":"a8885437206d83d593f2b644742d433cc359b791f728f7094454e047ad33c8af","processedContent":"import { Conversation, Message } from './chat';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 types/`chat.ts`/Conversation#: This code defines a conversation interface with properties such as ID, name, messages, model, prompt, temperature, and folderId. The messages property is an array of message objects with role and content properties. The model property is an OpenAI model interface with properties such as ID, name, maximum length, and token limit.\nscip-typescript npm ai-chatbot-starter 0.1.0 types/`chat.ts`/Message#: This code defines a message interface with two properties: role and content. The role property is of type Role, which is not defined in this code snippet. The content property is a string.\nscip-typescript npm ai-chatbot-starter 0.1.0 types/`chat.ts`/: The code defines an interface for an OpenAI model, a message interface, a chatbot interface, and a conversation interface. It also defines several constants used in the OpenAI API and defines the role of the chatbot as either an assistant or user.\n\"\"\"\nimport { FolderInterface } from './folder';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 types/`folder.ts`/FolderInterface#: This code defines an interface for a folder object, with properties such as an ID, name, and type. The type property is optional and can be undefined.\nscip-typescript npm ai-chatbot-starter 0.1.0 types/`folder.ts`/: This code defines an interface for a folder object with properties such as ID, name, and type. The type property is optional and can be undefined.\n\"\"\"\nimport { OpenAIModel } from './openai';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModel#: This code defines an interface for an OpenAI model, which includes the ID, name, maximum length of a message, and token limit.\nscip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/: The code defines several constants used in the OpenAI API, including the default system prompt, API host, temperature, API type, version, organization, and deployment ID. It also defines an interface for an OpenAI model, which includes the ID, name, maximum length of a message, and token limit.\n\"\"\"\nimport { Prompt } from './prompt';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 types/`prompt.ts`/Prompt#: This code defines an interface for an OpenAI model, which includes the ID, name, maximum length of a message, and token limit.\nscip-typescript npm ai-chatbot-starter 0.1.0 types/`prompt.ts`/: The code defines an interface for an OpenAI model, which includes the ID, name, maximum length of a message, and token limit.\n\"\"\"\n\nexport type SupportedExportFormats =\n  | ExportFormatV1 #undefined\n  | ExportFormatV2 #This code defines an interface for exporting conversations and chat folders, with properties such as ID, name, messages, model, prompt, temperature, and folderId.\n  | ExportFormatV3 #This code defines an interface for a conversation object with properties such as ID, name, messages, model, prompt, temperature, and folderId. It also defines an interface for a folder object with properties such as ID, name, and type.\n  | ExportFormatV4; #This code defines an interface for an export format version 4, which includes a conversation history, folders, and prompts. The conversation history is an array of message objects with role and content properties, while the folders and prompts are interfaces for folder and OpenAI model objects, respectively.\nexport type LatestExportFormat = ExportFormatV4; #This code defines an interface for an export format version 4, which includes a conversation history, folders, and prompts. The conversation history is an array of message objects with role and content properties, while the folders and prompts are interfaces for folder and OpenAI model objects, respectively.\n\n////////////////////////////////////////////////////////////////////////////////////////////\ninterface ConversationV1 {\n  \"\"\"This code defines a conversation interface with an ID, name, and a list of messages. Each message has a role and content.\"\"\"\n  pass\n\nexport type ExportFormatV1 = ConversationV1[]; #This code defines a conversation interface with an ID, name, and a list of messages. Each message has a role and content.\n\n////////////////////////////////////////////////////////////////////////////////////////////\ninterface ChatFolder {\n  \"\"\"This code defines a chat folder interface with an ID and name.\"\"\"\n  pass\n\nexport interface ExportFormatV2 {\n  \"\"\"This code defines an interface for exporting conversations and chat folders, with properties such as ID, name, messages, model, prompt, temperature, and folderId.\"\"\"\n  pass\n\n////////////////////////////////////////////////////////////////////////////////////////////\nexport interface ExportFormatV3 {\n  \"\"\"This code defines an interface for a conversation object with properties such as ID, name, messages, model, prompt, temperature, and folderId. It also defines an interface for a folder object with properties such as ID, name, and type.\"\"\"\n  pass\n\nexport interface ExportFormatV4 {\n  \"\"\"This code defines an interface for an export format version 4, which includes a conversation history, folders, and prompts. The conversation history is an array of message objects with role and content properties, while the folders and prompts are interfaces for folder and OpenAI model objects, respectively.\"\"\"\n  pass\n","documentation":"The code defines interfaces for various objects and data structures used in an AI chatbot, including conversations, messages, folders, and prompts. It also defines constants and enums used in the OpenAI API."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/ConversationV1#","attributes":{"range":[13,0,17,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/ConversationV1#","content":"interface ConversationV1 {\n  id: number;\n  name: string;\n  messages: Message[];\n}","file":"/types/export.ts","language":"typescript","fileHash":"a8885437206d83d593f2b644742d433cc359b791f728f7094454e047ad33c8af","hash":"f9c9c7a1a320d4042bfb09a0780fec179ca87de743391da73678766c05bd9aba","processedContent":"interface ConversationV1 {\n  id: number;\n  name: string;\n  messages: Message[]; #This code defines a message interface with two properties: role and content. The role property is of type Role, which is not defined in this code snippet. The content property is a string.\n}","documentation":"This code defines a conversation interface with an ID, name, and a list of messages. Each message has a role and content."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/ChatFolder#","attributes":{"range":[22,0,25,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/ChatFolder#","content":"interface ChatFolder {\n  id: number;\n  name: string;\n}","file":"/types/export.ts","language":"typescript","fileHash":"a8885437206d83d593f2b644742d433cc359b791f728f7094454e047ad33c8af","hash":"55940ae1d1b228dea8c5f7b1b70248cb8a87d64cda91380b08d63de305e5c776","processedContent":"interface ChatFolder {\n  id: number;\n  name: string;\n}","documentation":"This code defines a chat folder interface with an ID and name."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/ExportFormatV2#","attributes":{"range":[27,0,30,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/ExportFormatV2#","content":"export interface ExportFormatV2 {\n  history: Conversation[] | null;\n  folders: ChatFolder[] | null;\n}","file":"/types/export.ts","language":"typescript","fileHash":"a8885437206d83d593f2b644742d433cc359b791f728f7094454e047ad33c8af","hash":"a41a5ef8bc66448fa2d2ca5effab0b66aca1c90c4964c230edeb8b3d164e7c0c","processedContent":"export interface ExportFormatV2 {\n  history: Conversation[] | null; #This code defines a conversation interface with properties such as ID, name, messages, model, prompt, temperature, and folderId. The messages property is an array of message objects with role and content properties. The model property is an OpenAI model interface with properties such as ID, name, maximum length, and token limit.\n  folders: ChatFolder[] | null; #This code defines a chat folder interface with an ID and name.\n}","documentation":"This code defines an interface for exporting conversations and chat folders, with properties such as ID, name, messages, model, prompt, temperature, and folderId."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/ExportFormatV3#","attributes":{"range":[33,0,37,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/ExportFormatV3#","content":"export interface ExportFormatV3 {\n  version: 3;\n  history: Conversation[];\n  folders: FolderInterface[];\n}","file":"/types/export.ts","language":"typescript","fileHash":"a8885437206d83d593f2b644742d433cc359b791f728f7094454e047ad33c8af","hash":"f435d87b6afa8db9eb1e3bac97ce7d13775241e1d7ece6c2b2b536e671d439aa","processedContent":"export interface ExportFormatV3 {\n  version: 3;\n  history: Conversation[]; #This code defines a conversation interface with properties such as ID, name, messages, model, prompt, temperature, and folderId. The messages property is an array of message objects with role and content properties. The model property is an OpenAI model interface with properties such as ID, name, maximum length, and token limit.\n  folders: FolderInterface[]; #This code defines an interface for a folder object, with properties such as an ID, name, and type. The type property is optional and can be undefined.\n}","documentation":"This code defines an interface for a conversation object with properties such as ID, name, messages, model, prompt, temperature, and folderId. It also defines an interface for a folder object with properties such as ID, name, and type."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/ExportFormatV4#","attributes":{"range":[39,0,44,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/ExportFormatV4#","content":"export interface ExportFormatV4 {\n  version: 4;\n  history: Conversation[];\n  folders: FolderInterface[];\n  prompts: Prompt[];\n}","file":"/types/export.ts","language":"typescript","fileHash":"a8885437206d83d593f2b644742d433cc359b791f728f7094454e047ad33c8af","hash":"2add608a108027a5f0fc61c25360b810baa03cffe58f5a0d1f62933e1bc09223","processedContent":"export interface ExportFormatV4 {\n  version: 4;\n  history: Conversation[]; #This code defines a conversation interface with properties such as ID, name, messages, model, prompt, temperature, and folderId. The messages property is an array of message objects with role and content properties. The model property is an OpenAI model interface with properties such as ID, name, maximum length, and token limit.\n  folders: FolderInterface[]; #This code defines an interface for a folder object, with properties such as an ID, name, and type. The type property is optional and can be undefined.\n  prompts: Prompt[]; #This code defines an interface for an OpenAI model, which includes the ID, name, maximum length of a message, and token limit.\n}","documentation":"This code defines an interface for an export format version 4, which includes a conversation history, folders, and prompts. The conversation history is an array of message objects with role and content properties, while the folders and prompts are interfaces for folder and OpenAI model objects, respectively."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/ExportFormatV1#","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/ExportFormatV1#","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`error.ts`/","attributes":{"range":[0,0,5,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`error.ts`/","content":"export interface ErrorMessage {\n  code: String | null;\n  title: String;\n  messageLines: String[];\n}\n","file":"/types/error.ts","language":"typescript","fileHash":"1d931608e41544d7569b33fc3da212962af06a3dd80ebf166029a4674845b0a6","hash":"1d931608e41544d7569b33fc3da212962af06a3dd80ebf166029a4674845b0a6","processedContent":"export interface ErrorMessage {\n  \"\"\"This code defines an interface for an error message object that contains a code, title, and message lines. The code is optional and can be null or undefined, while the title and message lines are required and must be an array of strings.\"\"\"\n  pass\n","documentation":"This code defines an interface for an error message object that contains a code, title, and message lines. The code is optional and can be null or undefined, while the title and message lines are required and must be an array of strings."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`error.ts`/ErrorMessage#","attributes":{"range":[0,0,4,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`error.ts`/ErrorMessage#","content":"export interface ErrorMessage {\n  code: String | null;\n  title: String;\n  messageLines: String[];\n}","file":"/types/error.ts","language":"typescript","fileHash":"1d931608e41544d7569b33fc3da212962af06a3dd80ebf166029a4674845b0a6","hash":"7c12892f66977bf4ad2708d92ed5078fa9ed5bb77f977ba887060a9bf73cefc9","processedContent":"export interface ErrorMessage {\n  code: String | null; #undefined\n  title: String; #undefined\n  messageLines: String[]; #undefined\n}","documentation":"This code defines an interface for an error message object that contains a code, title, and message lines. The code is optional and can be null or undefined, while the title and message lines are required and must be an array of strings."}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/String#","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/String#","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`env.ts`/","attributes":{"range":[0,0,7,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`env.ts`/","content":"export interface ProcessEnv {\n  OPENAI_API_KEY: string;\n  OPENAI_API_HOST?: string;\n  OPENAI_API_TYPE?: 'openai' | 'azure';\n  OPENAI_API_VERSION?: string;\n  OPENAI_ORGANIZATION?: string;\n}\n","file":"/types/env.ts","language":"typescript","fileHash":"cf890fc53b3f3f87fba4cec14a3329d0d09df58ababab56243d3bedc93c1cdc2","hash":"cf890fc53b3f3f87fba4cec14a3329d0d09df58ababab56243d3bedc93c1cdc2","processedContent":"export interface ProcessEnv {\n  \"\"\"This code defines an interface for a process environment, which is used to store and manage environment variables for a program. It specifies the types of variables that can be stored in the environment, including strings, optionally with a default value.\"\"\"\n  pass\n","documentation":"This code defines an interface for a process environment, which is used to store and manage environment variables for a program."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`env.ts`/ProcessEnv#","attributes":{"range":[0,0,6,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`env.ts`/ProcessEnv#","content":"export interface ProcessEnv {\n  OPENAI_API_KEY: string;\n  OPENAI_API_HOST?: string;\n  OPENAI_API_TYPE?: 'openai' | 'azure';\n  OPENAI_API_VERSION?: string;\n  OPENAI_ORGANIZATION?: string;\n}","file":"/types/env.ts","language":"typescript","fileHash":"cf890fc53b3f3f87fba4cec14a3329d0d09df58ababab56243d3bedc93c1cdc2","hash":"3b6b98f1764836445fd27eabcea3e7bbd947c60466e35a2d4aa5d8afdb598bef","processedContent":"export interface ProcessEnv {\n  OPENAI_API_KEY: string;\n  OPENAI_API_HOST?: string;\n  OPENAI_API_TYPE?: 'openai' | 'azure';\n  OPENAI_API_VERSION?: string;\n  OPENAI_ORGANIZATION?: string;\n}","documentation":"This code defines an interface for a process environment, which is used to store and manage environment variables for a program. It specifies the types of variables that can be stored in the environment, including strings, optionally with a default value."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 services/`useApiService.ts`/","attributes":{"range":[0,0,46,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 services/`useApiService.ts`/","content":"import { useCallback } from 'react';\n\nimport { useFetch } from '@/hooks/useFetch';\n\nexport interface GetModelsRequestProps {\n  key: string;\n}\n\nconst useApiService = () => {\n  const fetchService = useFetch();\n\n  // const getModels = useCallback(\n  // \t(\n  // \t\tparams: GetManagementRoutineInstanceDetailedParams,\n  // \t\tsignal?: AbortSignal\n  // \t) => {\n  // \t\treturn fetchService.get<GetManagementRoutineInstanceDetailed>(\n  // \t\t\t`/v1/ManagementRoutines/${params.managementRoutineId}/instances/${params.instanceId\n  // \t\t\t}?sensorGroupIds=${params.sensorGroupId ?? ''}`,\n  // \t\t\t{\n  // \t\t\t\tsignal,\n  // \t\t\t}\n  // \t\t);\n  // \t},\n  // \t[fetchService]\n  // );\n\n  const getModels = useCallback(\n    (params: GetModelsRequestProps, signal?: AbortSignal) => {\n      return fetchService.post<GetModelsRequestProps>(`/api/models`, {\n        body: { key: params.key },\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        signal,\n      });\n    },\n    [fetchService],\n  );\n\n  return {\n    getModels,\n  };\n};\n\nexport default useApiService;\n","file":"/services/useApiService.ts","language":"typescript","fileHash":"21729968c360f7e95bfd8f8c94d6f699c954db09895730de084cb7c4821a035f","hash":"21729968c360f7e95bfd8f8c94d6f699c954db09895730de084cb7c4821a035f","processedContent":"import { useCallback } from 'react';\n\"\"\"\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useCallback().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/: undefined\n\"\"\"\n\nimport { useFetch } from '@/hooks/useFetch';\n\nexport interface GetModelsRequestProps {\n  \"\"\"This code defines an interface for a request to retrieve models from a database, with a single property called \"key\" that is a string.\"\"\"\n  pass\n\nconst useApiService = () => {\n  \"\"\"This code defines a function that returns an object with a single method, `getModels`, which makes a POST request to the `/api/models` endpoint and returns the response as a JSON object. The `GetModelsRequestProps` interface defines the request body, which includes a single property called \"key\" that is a string.\"\"\"\n  pass\n\nexport default useApiService; #This code defines a function that returns an object with a single method, `getModels`, which makes a POST request to the `/api/models` endpoint and returns the response as a JSON object. The `GetModelsRequestProps` interface defines the request body, which includes a single property called \"key\" that is a string.\n","documentation":"The code defines a function called `useApiService` that returns an object with a single method, `getModels`, which makes a POST request to the `/api/models` endpoint and returns the response as a JSON object. The request body includes a single property called \"key\" that is a string."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 services/`useApiService.ts`/GetModelsRequestProps#","attributes":{"range":[4,0,6,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 services/`useApiService.ts`/GetModelsRequestProps#","content":"export interface GetModelsRequestProps {\n  key: string;\n}","file":"/services/useApiService.ts","language":"typescript","fileHash":"21729968c360f7e95bfd8f8c94d6f699c954db09895730de084cb7c4821a035f","hash":"bd47e32bc2752589add89d58acfd83d5e8bc24f887d2cc3cc4ec1adee423d07c","processedContent":"export interface GetModelsRequestProps {\n  key: string;\n}","documentation":"This code defines an interface for a request to retrieve models from a database, with a single property called \"key\" that is a string."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 services/`useApiService.ts`/useApiService.","attributes":{"range":[8,22,43,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 services/`useApiService.ts`/useApiService.","content":"() => {\n  const fetchService = useFetch();\n\n  // const getModels = useCallback(\n  // \t(\n  // \t\tparams: GetManagementRoutineInstanceDetailedParams,\n  // \t\tsignal?: AbortSignal\n  // \t) => {\n  // \t\treturn fetchService.get<GetManagementRoutineInstanceDetailed>(\n  // \t\t\t`/v1/ManagementRoutines/${params.managementRoutineId}/instances/${params.instanceId\n  // \t\t\t}?sensorGroupIds=${params.sensorGroupId ?? ''}`,\n  // \t\t\t{\n  // \t\t\t\tsignal,\n  // \t\t\t}\n  // \t\t);\n  // \t},\n  // \t[fetchService]\n  // );\n\n  const getModels = useCallback(\n    (params: GetModelsRequestProps, signal?: AbortSignal) => {\n      return fetchService.post<GetModelsRequestProps>(`/api/models`, {\n        body: { key: params.key },\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        signal,\n      });\n    },\n    [fetchService],\n  );\n\n  return {\n    getModels,\n  };\n}","file":"/services/useApiService.ts","language":"typescript","fileHash":"21729968c360f7e95bfd8f8c94d6f699c954db09895730de084cb7c4821a035f","hash":"b374d96574e4c36baa8d11c159a0a09d4aec8191eff621059f1f9092c4adf155","processedContent":"() => {\n  const fetchService = useFetch();\n\n  // const getModels = useCallback(\n  // \t(\n  // \t\tparams: GetManagementRoutineInstanceDetailedParams,\n  // \t\tsignal?: AbortSignal\n  // \t) => {\n  // \t\treturn fetchService.get<GetManagementRoutineInstanceDetailed>(\n  // \t\t\t`/v1/ManagementRoutines/${params.managementRoutineId}/instances/${params.instanceId\n  // \t\t\t}?sensorGroupIds=${params.sensorGroupId ?? ''}`,\n  // \t\t\t{\n  // \t\t\t\tsignal,\n  // \t\t\t}\n  // \t\t);\n  // \t},\n  // \t[fetchService]\n  // );\n\n  const getModels = useCallback( #undefined\n    (params: GetModelsRequestProps, signal?: AbortSignal) => {\n    \"\"\"\n    scip-typescript npm ai-chatbot-starter 0.1.0 services/`useApiService.ts`/GetModelsRequestProps#: This code defines an interface for a request to retrieve models from a database, with a single property called \"key\" that is a string.\n    scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/AbortSignal#: undefined\n    scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/AbortSignal.: undefined\n    \"\"\"\n      return fetchService.post<GetModelsRequestProps>(`/api/models`, { #This code defines an interface for a request to retrieve models from a database, with a single property called \"key\" that is a string.\n        body: { key: params.key }, #undefined\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        signal,\n      });\n    },\n    [fetchService],\n  );\n\n  return {\n    getModels,\n  };\n}","documentation":"This code defines a function that returns an object with a single method, `getModels`, which makes a POST request to the `/api/models` endpoint and returns the response as a JSON object. The `GetModelsRequestProps` interface defines the request body, which includes a single property called \"key\" that is a string."}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useCallback().","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useCallback().","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/AbortSignal#","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/AbortSignal#","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/AbortSignal.","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/AbortSignal.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 services/`useApiService.ts`/GetModelsRequestProps#key.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 services/`useApiService.ts`/GetModelsRequestProps#key.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 services/`errorService.ts`/","attributes":{"range":[0,0,35,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 services/`errorService.ts`/","content":"import { useMemo } from 'react';\n\nimport { useTranslation } from 'next-i18next';\n\nimport { ErrorMessage } from '@/types/error';\n\nconst useErrorService = () => {\n  const { t } = useTranslation('chat');\n\n  return {\n    getModelsError: useMemo(\n      () => (error: any) => {\n        return !error\n          ? null\n          : ({\n              title: t('Error fetching models.'),\n              code: error.status || 'unknown',\n              messageLines: error.statusText\n                ? [error.statusText]\n                : [\n                    t(\n                      'Make sure your OpenAI API key is set in the bottom left of the sidebar.',\n                    ),\n                    t(\n                      'If you completed this step, OpenAI may be experiencing issues.',\n                    ),\n                  ],\n            } as ErrorMessage);\n      },\n      [t],\n    ),\n  };\n};\n\nexport default useErrorService;\n","file":"/services/errorService.ts","language":"typescript","fileHash":"2c17abf68a88979d9b4ba9fe240591f455c9d9bf48f22d3e6258ef1530045020","hash":"2c17abf68a88979d9b4ba9fe240591f455c9d9bf48f22d3e6258ef1530045020","processedContent":"import { useMemo } from 'react';\n\"\"\"\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useMemo().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/: undefined\n\"\"\"\n\nimport { useTranslation } from 'next-i18next';\n\nimport { ErrorMessage } from '@/types/error';\n\nconst useErrorService = () => {\n  \"\"\"This code defines a function that returns an object with a `getModelsError` property. The `getModelsError` property is a memoized function that takes an error object as an argument and returns an error message object if the error is not null. The error message object has a title, code, and messageLines properties. The function uses the `useTranslation` hook to translate the error messages.\"\"\"\n  pass\n\nexport default useErrorService; #This code defines a function that returns an object with a `getModelsError` property. The `getModelsError` property is a memoized function that takes an error object as an argument and returns an error message object if the error is not null. The error message object has a title, code, and messageLines properties. The function uses the `useTranslation` hook to translate the error messages.\n","documentation":"This code defines a function that returns an object with a `getModelsError` property, which is a memoized function that takes an error object as an argument and returns an error message object if the error is not null. The error message object has a title, code, and messageLines properties. The function uses the `useTranslation` hook to translate the error messages."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 services/`errorService.ts`/useErrorService.","attributes":{"range":[6,24,32,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 services/`errorService.ts`/useErrorService.","content":"() => {\n  const { t } = useTranslation('chat');\n\n  return {\n    getModelsError: useMemo(\n      () => (error: any) => {\n        return !error\n          ? null\n          : ({\n              title: t('Error fetching models.'),\n              code: error.status || 'unknown',\n              messageLines: error.statusText\n                ? [error.statusText]\n                : [\n                    t(\n                      'Make sure your OpenAI API key is set in the bottom left of the sidebar.',\n                    ),\n                    t(\n                      'If you completed this step, OpenAI may be experiencing issues.',\n                    ),\n                  ],\n            } as ErrorMessage);\n      },\n      [t],\n    ),\n  };\n}","file":"/services/errorService.ts","language":"typescript","fileHash":"2c17abf68a88979d9b4ba9fe240591f455c9d9bf48f22d3e6258ef1530045020","hash":"e0229de36e502a622a2e9155f8eb9a2d45baa5c360171f292b758404346c031f","processedContent":"() => {\n  const { t } = useTranslation('chat');\n\n  return {\n    getModelsError: useMemo( #undefined\n      () => (error: any) => {\n        return !error\n          ? null\n          : ({\n              title: t('Error fetching models.'),\n              code: error.status || 'unknown',\n              messageLines: error.statusText\n                ? [error.statusText]\n                : [\n                    t(\n                      'Make sure your OpenAI API key is set in the bottom left of the sidebar.',\n                    ),\n                    t(\n                      'If you completed this step, OpenAI may be experiencing issues.',\n                    ),\n                  ],\n            } as ErrorMessage);\n      },\n      [t],\n    ),\n  };\n}","documentation":"This code defines a function that returns an object with a `getModelsError` property. The `getModelsError` property is a memoized function that takes an error object as an argument and returns an error message object if the error is not null. The error message object has a title, code, and messageLines properties. The function uses the `useTranslation` hook to translate the error messages."}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useMemo().","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useMemo().","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`index.ts`/","attributes":{"range":[0,0,1,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`index.ts`/","content":"export { default, getServerSideProps } from './home';\n","file":"/pages/api/home/index.ts","language":"typescript","fileHash":"b51520d87c0281410338ecb99e69bdeced0a535366a1bd89f6e9ef7f81ee721d","hash":"b51520d87c0281410338ecb99e69bdeced0a535366a1bd89f6e9ef7f81ee721d","processedContent":"export { default, getServerSideProps } from './home';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.: This code defines a component that renders a home page for an AI chatbot. It includes various properties such as API keys, models, and conversations, and provides methods for creating, deleting, and updating folders, conversations, and prompts.\nscip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/getServerSideProps.: This code is a server-side function that returns an object with properties for the default model ID, whether server-side plugin keys are set, and server-side translations for the given locale. It also checks for the presence of environment variables for OpenAI API key and Google API key/CSE ID.\nscip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/: This code defines a Next.js component that renders a home page for an AI chatbot, including various properties and methods for managing folders, conversations, and prompts. It also includes server-side functions for generating default model IDs and checking for the presence of environment variables.\n\"\"\"\n","documentation":"This code defines a Next.js component for an AI chatbot home page, including properties and methods for managing folders, conversations, and prompts, as well as server-side functions for generating default model IDs and checking for the presence of environment variables."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","language":"typescript","range":[49,13,394,1],"content":"({\n  serverSideApiKeyIsSet,\n  serverSidePluginKeysSet,\n  defaultModelId,\n}: Props) => {\n  const { t } = useTranslation('chat');\n  const { getModels } = useApiService();\n  const { getModelsError } = useErrorService();\n  const [initialRender, setInitialRender] = useState<boolean>(true);\n\n  const contextValue = useCreateReducer<HomeInitialState>({\n    initialState,\n  });\n\n  const {\n    state: {\n      apiKey,\n      lightMode,\n      folders,\n      conversations,\n      selectedConversation,\n      prompts,\n      temperature,\n    },\n    dispatch,\n  } = contextValue;\n\n  const stopConversationRef = useRef<boolean>(false);\n\n  const { data, error, refetch } = useQuery(\n    ['GetModels', apiKey, serverSideApiKeyIsSet],\n    ({ signal }) => {\n      if (!apiKey && !serverSideApiKeyIsSet) return null;\n\n      return getModels(\n        {\n          key: apiKey,\n        },\n        signal,\n      );\n    },\n    { enabled: true, refetchOnMount: false },\n  );\n\n  useEffect(() => {\n    if (data) dispatch({ field: 'models', value: data });\n  }, [data, dispatch]);\n\n  useEffect(() => {\n    dispatch({ field: 'modelError', value: getModelsError(error) });\n  }, [dispatch, error, getModelsError]);\n\n  // FETCH MODELS ----------------------------------------------\n\n  const handleSelectConversation = (conversation: Conversation) => {\n    dispatch({\n      field: 'selectedConversation',\n      value: conversation,\n    });\n\n    saveConversation(conversation);\n  };\n\n  // FOLDER OPERATIONS  --------------------------------------------\n\n  const handleCreateFolder = (name: string, type: FolderType) => {\n    const newFolder: FolderInterface = {\n      id: uuidv4(),\n      name,\n      type,\n    };\n\n    const updatedFolders = [...folders, newFolder];\n\n    dispatch({ field: 'folders', value: updatedFolders });\n    saveFolders(updatedFolders);\n  };\n\n  const handleDeleteFolder = (folderId: string) => {\n    const updatedFolders = folders.filter((f) => f.id !== folderId);\n    dispatch({ field: 'folders', value: updatedFolders });\n    saveFolders(updatedFolders);\n\n    const updatedConversations: Conversation[] = conversations.map((c) => {\n      if (c.folderId === folderId) {\n        return {\n          ...c,\n          folderId: null,\n        };\n      }\n\n      return c;\n    });\n\n    dispatch({ field: 'conversations', value: updatedConversations });\n    saveConversations(updatedConversations);\n\n    const updatedPrompts: Prompt[] = prompts.map((p) => {\n      if (p.folderId === folderId) {\n        return {\n          ...p,\n          folderId: null,\n        };\n      }\n\n      return p;\n    });\n\n    dispatch({ field: 'prompts', value: updatedPrompts });\n    savePrompts(updatedPrompts);\n  };\n\n  const handleUpdateFolder = (folderId: string, name: string) => {\n    const updatedFolders = folders.map((f) => {\n      if (f.id === folderId) {\n        return {\n          ...f,\n          name,\n        };\n      }\n\n      return f;\n    });\n\n    dispatch({ field: 'folders', value: updatedFolders });\n\n    saveFolders(updatedFolders);\n  };\n\n  // CONVERSATION OPERATIONS  --------------------------------------------\n\n  const handleNewConversation = () => {\n    const lastConversation = conversations[conversations.length - 1];\n\n    const newConversation: Conversation = {\n      id: uuidv4(),\n      name: t('New Conversation'),\n      messages: [],\n      model: lastConversation?.model || {\n        id: OpenAIModels[defaultModelId].id,\n        name: OpenAIModels[defaultModelId].name,\n        maxLength: OpenAIModels[defaultModelId].maxLength,\n        tokenLimit: OpenAIModels[defaultModelId].tokenLimit,\n      },\n      prompt: DEFAULT_SYSTEM_PROMPT,\n      temperature: lastConversation?.temperature ?? DEFAULT_TEMPERATURE,\n      folderId: null,\n    };\n\n    const updatedConversations = [...conversations, newConversation];\n\n    dispatch({ field: 'selectedConversation', value: newConversation });\n    dispatch({ field: 'conversations', value: updatedConversations });\n\n    saveConversation(newConversation);\n    saveConversations(updatedConversations);\n\n    dispatch({ field: 'loading', value: false });\n  };\n\n  const handleUpdateConversation = (\n    conversation: Conversation,\n    data: KeyValuePair,\n  ) => {\n    const updatedConversation = {\n      ...conversation,\n      [data.key]: data.value,\n    };\n\n    const { single, all } = updateConversation(\n      updatedConversation,\n      conversations,\n    );\n\n    dispatch({ field: 'selectedConversation', value: single });\n    dispatch({ field: 'conversations', value: all });\n  };\n\n  // EFFECTS  --------------------------------------------\n\n  useEffect(() => {\n    if (window.innerWidth < 640) {\n      dispatch({ field: 'showChatbar', value: false });\n    }\n  }, [selectedConversation]);\n\n  useEffect(() => {\n    defaultModelId &&\n      dispatch({ field: 'defaultModelId', value: defaultModelId });\n    serverSideApiKeyIsSet &&\n      dispatch({\n        field: 'serverSideApiKeyIsSet',\n        value: serverSideApiKeyIsSet,\n      });\n    serverSidePluginKeysSet &&\n      dispatch({\n        field: 'serverSidePluginKeysSet',\n        value: serverSidePluginKeysSet,\n      });\n  }, [defaultModelId, serverSideApiKeyIsSet, serverSidePluginKeysSet]);\n\n  // ON LOAD --------------------------------------------\n\n  useEffect(() => {\n    const settings = getSettings();\n    if (settings.theme) {\n      dispatch({\n        field: 'lightMode',\n        value: settings.theme,\n      });\n    }\n\n    const apiKey = localStorage.getItem('apiKey');\n\n    if (serverSideApiKeyIsSet) {\n      dispatch({ field: 'apiKey', value: '' });\n\n      localStorage.removeItem('apiKey');\n    } else if (apiKey) {\n      dispatch({ field: 'apiKey', value: apiKey });\n    }\n\n    const pluginKeys = localStorage.getItem('pluginKeys');\n    if (serverSidePluginKeysSet) {\n      dispatch({ field: 'pluginKeys', value: [] });\n      localStorage.removeItem('pluginKeys');\n    } else if (pluginKeys) {\n      dispatch({ field: 'pluginKeys', value: pluginKeys });\n    }\n\n    if (window.innerWidth < 640) {\n      dispatch({ field: 'showChatbar', value: false });\n      dispatch({ field: 'showPromptbar', value: false });\n    }\n\n    const showChatbar = localStorage.getItem('showChatbar');\n    if (showChatbar) {\n      dispatch({ field: 'showChatbar', value: showChatbar === 'true' });\n    }\n\n    const showPromptbar = localStorage.getItem('showPromptbar');\n    if (showPromptbar) {\n      dispatch({ field: 'showPromptbar', value: showPromptbar === 'true' });\n    }\n\n    const folders = localStorage.getItem('folders');\n    if (folders) {\n      dispatch({ field: 'folders', value: JSON.parse(folders) });\n    }\n\n    const prompts = localStorage.getItem('prompts');\n    if (prompts) {\n      dispatch({ field: 'prompts', value: JSON.parse(prompts) });\n    }\n\n    const conversationHistory = localStorage.getItem('conversationHistory');\n    if (conversationHistory) {\n      const parsedConversationHistory: Conversation[] =\n        JSON.parse(conversationHistory);\n      const cleanedConversationHistory = cleanConversationHistory(\n        parsedConversationHistory,\n      );\n\n      dispatch({ field: 'conversations', value: cleanedConversationHistory });\n    }\n\n    const selectedConversation = localStorage.getItem('selectedConversation');\n    if (selectedConversation) {\n      const parsedSelectedConversation: Conversation =\n        JSON.parse(selectedConversation);\n      const cleanedSelectedConversation = cleanSelectedConversation(\n        parsedSelectedConversation,\n      );\n\n      dispatch({\n        field: 'selectedConversation',\n        value: cleanedSelectedConversation,\n      });\n    } else {\n      const lastConversation = conversations[conversations.length - 1];\n      dispatch({\n        field: 'selectedConversation',\n        value: {\n          id: uuidv4(),\n          name: t('New Conversation'),\n          messages: [],\n          model: OpenAIModels[defaultModelId],\n          prompt: DEFAULT_SYSTEM_PROMPT,\n          temperature: lastConversation?.temperature ?? DEFAULT_TEMPERATURE,\n          folderId: null,\n        },\n      });\n    }\n  }, [\n    defaultModelId,\n    dispatch,\n    serverSideApiKeyIsSet,\n    serverSidePluginKeysSet,\n  ]);\n\n  return (\n    <HomeContext.Provider\n      value={{\n        ...contextValue,\n        handleNewConversation,\n        handleCreateFolder,\n        handleDeleteFolder,\n        handleUpdateFolder,\n        handleSelectConversation,\n        handleUpdateConversation,\n      }}\n    >\n      <Head>\n        <title>Chatbot UI</title>\n        <meta name=\"description\" content=\"ChatGPT but better.\" />\n        <meta\n          name=\"viewport\"\n          content=\"height=device-height ,width=device-width, initial-scale=1, user-scalable=no\"\n        />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      {selectedConversation && (\n        <main\n          className={`flex h-screen w-screen flex-col text-sm text-white dark:text-white ${lightMode}`}\n        >\n          <div className=\"fixed top-0 w-full sm:hidden\">\n            <Navbar\n              selectedConversation={selectedConversation}\n              onNewConversation={handleNewConversation}\n            />\n          </div>\n\n          <div className=\"flex h-full w-full pt-[48px] sm:pt-0\">\n            <Chatbar />\n\n            <div className=\"flex flex-1\">\n              <Chat stopConversationRef={stopConversationRef} />\n            </div>\n\n            <Promptbar />\n          </div>\n        </main>\n      )}\n    </HomeContext.Provider>\n  );\n}","file":"/pages/api/home/home.tsx","fileHash":"29efd041208997937e22273fccce62905ed6ef4f8c4d9a288c894efe40972e1f","hash":"d19016b3f4e3384401a59764d6f4ae5de9dd629aa1b6ed06e046c06b9fa973fe","processedContent":"({\n  serverSideApiKeyIsSet, #undefined\n  serverSidePluginKeysSet, #undefined\n  defaultModelId, #undefined\n}: Props) => { #This code defines a set of properties for a component that will be used to render a specific view. The properties include a flag indicating whether the server-side API key is set, another flag indicating whether the server-side plugin keys are set, and a default model ID for the OpenAI model that will be used to generate text.\n  const { t } = useTranslation('chat');\n  const { getModels } = useApiService();\n  const { getModelsError } = useErrorService();\n  const [initialRender, setInitialRender] = useState<boolean>(true); #undefined\n\n  const contextValue = useCreateReducer<HomeInitialState>({ #This code defines an interface for the initial state of a home page, including various properties such as API keys, models, and conversations.\n    initialState, #This code defines an interface for the initial state of a home page, including various properties such as API keys, models, and conversations.\n  });\n\n  const {\n    state: {\n      apiKey,\n      lightMode,\n      folders,\n      conversations,\n      selectedConversation,\n      prompts,\n      temperature,\n    },\n    dispatch,\n  } = contextValue;\n\n  const stopConversationRef = useRef<boolean>(false); #undefined\n\n  const { data, error, refetch } = useQuery(\n    ['GetModels', apiKey, serverSideApiKeyIsSet],\n    ({ signal }) => {\n      if (!apiKey && !serverSideApiKeyIsSet) return null;\n\n      return getModels(\n        {\n          key: apiKey,\n        },\n        signal,\n      );\n    },\n    { enabled: true, refetchOnMount: false },\n  );\n\n  useEffect(() => { #undefined\n    if (data) dispatch({ field: 'models', value: data });\n  }, [data, dispatch]);\n\n  useEffect(() => { #undefined\n    dispatch({ field: 'modelError', value: getModelsError(error) });\n  }, [dispatch, error, getModelsError]);\n\n  // FETCH MODELS ----------------------------------------------\n\n  const handleSelectConversation = (conversation: Conversation) => {\n    dispatch({\n      field: 'selectedConversation',\n      value: conversation,\n    });\n\n    saveConversation(conversation);\n  };\n\n  // FOLDER OPERATIONS  --------------------------------------------\n\n  const handleCreateFolder = (name: string, type: FolderType) => {\n    const newFolder: FolderInterface = {\n      id: uuidv4(), #undefined\n      name,\n      type,\n    };\n\n    const updatedFolders = [...folders, newFolder];\n\n    dispatch({ field: 'folders', value: updatedFolders });\n    saveFolders(updatedFolders);\n  };\n\n  const handleDeleteFolder = (folderId: string) => {\n    const updatedFolders = folders.filter((f) => f.id !== folderId);\n    dispatch({ field: 'folders', value: updatedFolders });\n    saveFolders(updatedFolders);\n\n    const updatedConversations: Conversation[] = conversations.map((c) => {\n      if (c.folderId === folderId) {\n        return {\n          ...c,\n          folderId: null,\n        };\n      }\n\n      return c;\n    });\n\n    dispatch({ field: 'conversations', value: updatedConversations });\n    saveConversations(updatedConversations);\n\n    const updatedPrompts: Prompt[] = prompts.map((p) => {\n      if (p.folderId === folderId) {\n        return {\n          ...p,\n          folderId: null,\n        };\n      }\n\n      return p;\n    });\n\n    dispatch({ field: 'prompts', value: updatedPrompts });\n    savePrompts(updatedPrompts);\n  };\n\n  const handleUpdateFolder = (folderId: string, name: string) => {\n    const updatedFolders = folders.map((f) => {\n      if (f.id === folderId) {\n        return {\n          ...f,\n          name,\n        };\n      }\n\n      return f;\n    });\n\n    dispatch({ field: 'folders', value: updatedFolders });\n\n    saveFolders(updatedFolders);\n  };\n\n  // CONVERSATION OPERATIONS  --------------------------------------------\n\n  const handleNewConversation = () => {\n    const lastConversation = conversations[conversations.length - 1];\n\n    const newConversation: Conversation = {\n      id: uuidv4(), #undefined\n      name: t('New Conversation'),\n      messages: [],\n      model: lastConversation?.model || {\n        id: OpenAIModels[defaultModelId].id,\n        name: OpenAIModels[defaultModelId].name,\n        maxLength: OpenAIModels[defaultModelId].maxLength,\n        tokenLimit: OpenAIModels[defaultModelId].tokenLimit,\n      },\n      prompt: DEFAULT_SYSTEM_PROMPT,\n      temperature: lastConversation?.temperature ?? DEFAULT_TEMPERATURE,\n      folderId: null,\n    };\n\n    const updatedConversations = [...conversations, newConversation];\n\n    dispatch({ field: 'selectedConversation', value: newConversation });\n    dispatch({ field: 'conversations', value: updatedConversations });\n\n    saveConversation(newConversation);\n    saveConversations(updatedConversations);\n\n    dispatch({ field: 'loading', value: false });\n  };\n\n  const handleUpdateConversation = (\n    conversation: Conversation,\n    data: KeyValuePair,\n  ) => {\n    const updatedConversation = {\n      ...conversation,\n      [data.key]: data.value,\n    };\n\n    const { single, all } = updateConversation(\n      updatedConversation,\n      conversations,\n    );\n\n    dispatch({ field: 'selectedConversation', value: single });\n    dispatch({ field: 'conversations', value: all });\n  };\n\n  // EFFECTS  --------------------------------------------\n\n  useEffect(() => { #undefined\n    if (window.innerWidth < 640) {\n      dispatch({ field: 'showChatbar', value: false });\n    }\n  }, [selectedConversation]);\n\n  useEffect(() => { #undefined\n    defaultModelId &&\n      dispatch({ field: 'defaultModelId', value: defaultModelId });\n    serverSideApiKeyIsSet &&\n      dispatch({\n        field: 'serverSideApiKeyIsSet',\n        value: serverSideApiKeyIsSet,\n      });\n    serverSidePluginKeysSet &&\n      dispatch({\n        field: 'serverSidePluginKeysSet',\n        value: serverSidePluginKeysSet,\n      });\n  }, [defaultModelId, serverSideApiKeyIsSet, serverSidePluginKeysSet]);\n\n  // ON LOAD --------------------------------------------\n\n  useEffect(() => { #undefined\n    const settings = getSettings();\n    if (settings.theme) {\n      dispatch({\n        field: 'lightMode',\n        value: settings.theme,\n      });\n    }\n\n    const apiKey = localStorage.getItem('apiKey');\n\n    if (serverSideApiKeyIsSet) {\n      dispatch({ field: 'apiKey', value: '' });\n\n      localStorage.removeItem('apiKey');\n    } else if (apiKey) {\n      dispatch({ field: 'apiKey', value: apiKey });\n    }\n\n    const pluginKeys = localStorage.getItem('pluginKeys');\n    if (serverSidePluginKeysSet) {\n      dispatch({ field: 'pluginKeys', value: [] });\n      localStorage.removeItem('pluginKeys');\n    } else if (pluginKeys) {\n      dispatch({ field: 'pluginKeys', value: pluginKeys });\n    }\n\n    if (window.innerWidth < 640) {\n      dispatch({ field: 'showChatbar', value: false });\n      dispatch({ field: 'showPromptbar', value: false });\n    }\n\n    const showChatbar = localStorage.getItem('showChatbar');\n    if (showChatbar) {\n      dispatch({ field: 'showChatbar', value: showChatbar === 'true' });\n    }\n\n    const showPromptbar = localStorage.getItem('showPromptbar');\n    if (showPromptbar) {\n      dispatch({ field: 'showPromptbar', value: showPromptbar === 'true' });\n    }\n\n    const folders = localStorage.getItem('folders');\n    if (folders) {\n      dispatch({ field: 'folders', value: JSON.parse(folders) });\n    }\n\n    const prompts = localStorage.getItem('prompts');\n    if (prompts) {\n      dispatch({ field: 'prompts', value: JSON.parse(prompts) });\n    }\n\n    const conversationHistory = localStorage.getItem('conversationHistory');\n    if (conversationHistory) {\n      const parsedConversationHistory: Conversation[] =\n        JSON.parse(conversationHistory);\n      const cleanedConversationHistory = cleanConversationHistory(\n        parsedConversationHistory,\n      );\n\n      dispatch({ field: 'conversations', value: cleanedConversationHistory });\n    }\n\n    const selectedConversation = localStorage.getItem('selectedConversation');\n    if (selectedConversation) {\n      const parsedSelectedConversation: Conversation =\n        JSON.parse(selectedConversation);\n      const cleanedSelectedConversation = cleanSelectedConversation(\n        parsedSelectedConversation,\n      );\n\n      dispatch({\n        field: 'selectedConversation',\n        value: cleanedSelectedConversation,\n      });\n    } else {\n      const lastConversation = conversations[conversations.length - 1];\n      dispatch({\n        field: 'selectedConversation',\n        value: {\n          id: uuidv4(), #undefined\n          name: t('New Conversation'),\n          messages: [],\n          model: OpenAIModels[defaultModelId],\n          prompt: DEFAULT_SYSTEM_PROMPT,\n          temperature: lastConversation?.temperature ?? DEFAULT_TEMPERATURE,\n          folderId: null,\n        },\n      });\n    }\n  }, [\n    defaultModelId,\n    dispatch,\n    serverSideApiKeyIsSet,\n    serverSidePluginKeysSet,\n  ]);\n\n  return (\n    <HomeContext.Provider\n    \"\"\"\n    scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.context.tsx`/HomeContext.: undefined\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/Context#Provider.: undefined\n    \"\"\"\n      value={{ #undefined\n        ...contextValue,\n        handleNewConversation,\n        handleCreateFolder,\n        handleDeleteFolder,\n        handleUpdateFolder,\n        handleSelectConversation,\n        handleUpdateConversation,\n      }}\n    >\n      <Head> #undefined\n        <title>Chatbot UI</title>\n        \"\"\"\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#title.: undefined\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#title.: undefined\n        \"\"\"\n        <meta name=\"description\" content=\"ChatGPT but better.\" />\n        \"\"\"\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#meta.: undefined\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MetaHTMLAttributes#name.: undefined\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#content.: undefined\n        \"\"\"\n        <meta #undefined\n          name=\"viewport\" #undefined\n          content=\"height=device-height ,width=device-width, initial-scale=1, user-scalable=no\" #undefined\n        />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n        \"\"\"\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#link.: undefined\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#rel.: undefined\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/LinkHTMLAttributes#href.: undefined\n        \"\"\"\n      </Head> #undefined\n      {selectedConversation && (\n        <main #undefined\n          className={`flex h-screen w-screen flex-col text-sm text-white dark:text-white ${lightMode}`} #undefined\n        >\n          <div className=\"fixed top-0 w-full sm:hidden\">\n          \"\"\"\n          scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n          scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n          \"\"\"\n            <Navbar\n              selectedConversation={selectedConversation}\n              onNewConversation={handleNewConversation}\n            />\n          </div> #undefined\n\n          <div className=\"flex h-full w-full pt-[48px] sm:pt-0\">\n          \"\"\"\n          scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n          scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n          \"\"\"\n            <Chatbar />\n\n            <div className=\"flex flex-1\">\n            \"\"\"\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n            \"\"\"\n              <Chat stopConversationRef={stopConversationRef} />\n            </div> #undefined\n\n            <Promptbar />\n          </div> #undefined\n        </main> #undefined\n      )}\n    </HomeContext.Provider>\n    \"\"\"\n    scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.context.tsx`/HomeContext.: undefined\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/Context#Provider.: undefined\n    \"\"\"\n  );\n}","documentation":"This code defines a component that renders a home page for an AI chatbot. It includes various properties such as API keys, models, and conversations, and provides methods for creating, deleting, and updating folders, conversations, and prompts."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/getServerSideProps.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/getServerSideProps.","language":"typescript","range":[397,54,430,1],"content":"async ({ locale }) => {\n  const defaultModelId =\n    (process.env.DEFAULT_MODEL &&\n      Object.values(OpenAIModelID).includes(\n        process.env.DEFAULT_MODEL as OpenAIModelID,\n      ) &&\n      process.env.DEFAULT_MODEL) ||\n    fallbackModelID;\n\n  let serverSidePluginKeysSet = false;\n\n  const googleApiKey = process.env.GOOGLE_API_KEY;\n  const googleCSEId = process.env.GOOGLE_CSE_ID;\n\n  if (googleApiKey && googleCSEId) {\n    serverSidePluginKeysSet = true;\n  }\n\n  return {\n    props: {\n      serverSideApiKeyIsSet: !!process.env.OPENAI_API_KEY,\n      defaultModelId,\n      serverSidePluginKeysSet,\n      ...(await serverSideTranslations(locale ?? 'en', [\n        'common',\n        'chat',\n        'sidebar',\n        'markdown',\n        'promptbar',\n        'settings',\n      ])),\n    },\n  };\n}","file":"/pages/api/home/home.tsx","fileHash":"29efd041208997937e22273fccce62905ed6ef4f8c4d9a288c894efe40972e1f","hash":"b3d240910fba24c3c90f5bdc6c5ab2e50f1a6e948aa551f3e4469f6ffd43423e","processedContent":"async ({ locale }) => {\n  const defaultModelId =\n    (process.env.DEFAULT_MODEL &&\n    \"\"\"\n    scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/process.: undefined\n    scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/process.: undefined\n    scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/NodeJS/Process#env.: undefined\n    \"\"\"\n      Object.values(OpenAIModelID).includes(\n        process.env.DEFAULT_MODEL as OpenAIModelID,\n        \"\"\"\n        scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/process.: undefined\n        scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/process.: undefined\n        scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/NodeJS/Process#env.: undefined\n        \"\"\"\n      ) &&\n      process.env.DEFAULT_MODEL) ||\n      \"\"\"\n      scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/process.: undefined\n      scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/process.: undefined\n      scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/NodeJS/Process#env.: undefined\n      \"\"\"\n    fallbackModelID;\n\n  let serverSidePluginKeysSet = false;\n\n  const googleApiKey = process.env.GOOGLE_API_KEY;\n  \"\"\"\n  scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/process.: undefined\n  scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/process.: undefined\n  scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/NodeJS/Process#env.: undefined\n  \"\"\"\n  const googleCSEId = process.env.GOOGLE_CSE_ID;\n  \"\"\"\n  scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/process.: undefined\n  scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/process.: undefined\n  scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/NodeJS/Process#env.: undefined\n  \"\"\"\n\n  if (googleApiKey && googleCSEId) {\n    serverSidePluginKeysSet = true;\n  }\n\n  return {\n    props: {\n      serverSideApiKeyIsSet: !!process.env.OPENAI_API_KEY,\n      \"\"\"\n      scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/process.: undefined\n      scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/process.: undefined\n      scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/NodeJS/Process#env.: undefined\n      \"\"\"\n      defaultModelId,\n      serverSidePluginKeysSet,\n      ...(await serverSideTranslations(locale ?? 'en', [\n        'common',\n        'chat',\n        'sidebar',\n        'markdown',\n        'promptbar',\n        'settings',\n      ])),\n    },\n  };\n}","documentation":"This code is a server-side function that returns an object with properties for the default model ID, whether server-side plugin keys are set, and server-side translations for the given locale. It also checks for the presence of environment variables for OpenAI API key and Google API key/CSE ID."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/","language":"typescript","range":[0,0,431,0],"content":"import { useEffect, useRef, useState } from 'react';\nimport { useQuery } from 'react-query';\n\nimport { GetServerSideProps } from 'next';\nimport { useTranslation } from 'next-i18next';\nimport { serverSideTranslations } from 'next-i18next/serverSideTranslations';\nimport Head from 'next/head';\n\nimport { useCreateReducer } from '@/hooks/useCreateReducer';\n\nimport useErrorService from '@/services/errorService';\nimport useApiService from '@/services/useApiService';\n\nimport {\n  cleanConversationHistory,\n  cleanSelectedConversation,\n} from '@/utils/app/clean';\nimport { DEFAULT_SYSTEM_PROMPT, DEFAULT_TEMPERATURE } from '@/utils/app/const';\nimport {\n  saveConversation,\n  saveConversations,\n  updateConversation,\n} from '@/utils/app/conversation';\nimport { saveFolders } from '@/utils/app/folders';\nimport { savePrompts } from '@/utils/app/prompts';\nimport { getSettings } from '@/utils/app/settings';\n\nimport { Conversation } from '@/types/chat';\nimport { KeyValuePair } from '@/types/data';\nimport { FolderInterface, FolderType } from '@/types/folder';\nimport { OpenAIModelID, OpenAIModels, fallbackModelID } from '@/types/openai';\nimport { Prompt } from '@/types/prompt';\n\nimport { Chat } from '@/components/Chat/Chat';\nimport { Chatbar } from '@/components/Chatbar/Chatbar';\nimport { Navbar } from '@/components/Mobile/Navbar';\nimport Promptbar from '@/components/Promptbar';\n\nimport HomeContext from './home.context';\nimport { HomeInitialState, initialState } from './home.state';\n\nimport { v4 as uuidv4 } from 'uuid';\n\ninterface Props {\n  serverSideApiKeyIsSet: boolean;\n  serverSidePluginKeysSet: boolean;\n  defaultModelId: OpenAIModelID;\n}\n\nconst Home = ({\n  serverSideApiKeyIsSet,\n  serverSidePluginKeysSet,\n  defaultModelId,\n}: Props) => {\n  const { t } = useTranslation('chat');\n  const { getModels } = useApiService();\n  const { getModelsError } = useErrorService();\n  const [initialRender, setInitialRender] = useState<boolean>(true);\n\n  const contextValue = useCreateReducer<HomeInitialState>({\n    initialState,\n  });\n\n  const {\n    state: {\n      apiKey,\n      lightMode,\n      folders,\n      conversations,\n      selectedConversation,\n      prompts,\n      temperature,\n    },\n    dispatch,\n  } = contextValue;\n\n  const stopConversationRef = useRef<boolean>(false);\n\n  const { data, error, refetch } = useQuery(\n    ['GetModels', apiKey, serverSideApiKeyIsSet],\n    ({ signal }) => {\n      if (!apiKey && !serverSideApiKeyIsSet) return null;\n\n      return getModels(\n        {\n          key: apiKey,\n        },\n        signal,\n      );\n    },\n    { enabled: true, refetchOnMount: false },\n  );\n\n  useEffect(() => {\n    if (data) dispatch({ field: 'models', value: data });\n  }, [data, dispatch]);\n\n  useEffect(() => {\n    dispatch({ field: 'modelError', value: getModelsError(error) });\n  }, [dispatch, error, getModelsError]);\n\n  // FETCH MODELS ----------------------------------------------\n\n  const handleSelectConversation = (conversation: Conversation) => {\n    dispatch({\n      field: 'selectedConversation',\n      value: conversation,\n    });\n\n    saveConversation(conversation);\n  };\n\n  // FOLDER OPERATIONS  --------------------------------------------\n\n  const handleCreateFolder = (name: string, type: FolderType) => {\n    const newFolder: FolderInterface = {\n      id: uuidv4(),\n      name,\n      type,\n    };\n\n    const updatedFolders = [...folders, newFolder];\n\n    dispatch({ field: 'folders', value: updatedFolders });\n    saveFolders(updatedFolders);\n  };\n\n  const handleDeleteFolder = (folderId: string) => {\n    const updatedFolders = folders.filter((f) => f.id !== folderId);\n    dispatch({ field: 'folders', value: updatedFolders });\n    saveFolders(updatedFolders);\n\n    const updatedConversations: Conversation[] = conversations.map((c) => {\n      if (c.folderId === folderId) {\n        return {\n          ...c,\n          folderId: null,\n        };\n      }\n\n      return c;\n    });\n\n    dispatch({ field: 'conversations', value: updatedConversations });\n    saveConversations(updatedConversations);\n\n    const updatedPrompts: Prompt[] = prompts.map((p) => {\n      if (p.folderId === folderId) {\n        return {\n          ...p,\n          folderId: null,\n        };\n      }\n\n      return p;\n    });\n\n    dispatch({ field: 'prompts', value: updatedPrompts });\n    savePrompts(updatedPrompts);\n  };\n\n  const handleUpdateFolder = (folderId: string, name: string) => {\n    const updatedFolders = folders.map((f) => {\n      if (f.id === folderId) {\n        return {\n          ...f,\n          name,\n        };\n      }\n\n      return f;\n    });\n\n    dispatch({ field: 'folders', value: updatedFolders });\n\n    saveFolders(updatedFolders);\n  };\n\n  // CONVERSATION OPERATIONS  --------------------------------------------\n\n  const handleNewConversation = () => {\n    const lastConversation = conversations[conversations.length - 1];\n\n    const newConversation: Conversation = {\n      id: uuidv4(),\n      name: t('New Conversation'),\n      messages: [],\n      model: lastConversation?.model || {\n        id: OpenAIModels[defaultModelId].id,\n        name: OpenAIModels[defaultModelId].name,\n        maxLength: OpenAIModels[defaultModelId].maxLength,\n        tokenLimit: OpenAIModels[defaultModelId].tokenLimit,\n      },\n      prompt: DEFAULT_SYSTEM_PROMPT,\n      temperature: lastConversation?.temperature ?? DEFAULT_TEMPERATURE,\n      folderId: null,\n    };\n\n    const updatedConversations = [...conversations, newConversation];\n\n    dispatch({ field: 'selectedConversation', value: newConversation });\n    dispatch({ field: 'conversations', value: updatedConversations });\n\n    saveConversation(newConversation);\n    saveConversations(updatedConversations);\n\n    dispatch({ field: 'loading', value: false });\n  };\n\n  const handleUpdateConversation = (\n    conversation: Conversation,\n    data: KeyValuePair,\n  ) => {\n    const updatedConversation = {\n      ...conversation,\n      [data.key]: data.value,\n    };\n\n    const { single, all } = updateConversation(\n      updatedConversation,\n      conversations,\n    );\n\n    dispatch({ field: 'selectedConversation', value: single });\n    dispatch({ field: 'conversations', value: all });\n  };\n\n  // EFFECTS  --------------------------------------------\n\n  useEffect(() => {\n    if (window.innerWidth < 640) {\n      dispatch({ field: 'showChatbar', value: false });\n    }\n  }, [selectedConversation]);\n\n  useEffect(() => {\n    defaultModelId &&\n      dispatch({ field: 'defaultModelId', value: defaultModelId });\n    serverSideApiKeyIsSet &&\n      dispatch({\n        field: 'serverSideApiKeyIsSet',\n        value: serverSideApiKeyIsSet,\n      });\n    serverSidePluginKeysSet &&\n      dispatch({\n        field: 'serverSidePluginKeysSet',\n        value: serverSidePluginKeysSet,\n      });\n  }, [defaultModelId, serverSideApiKeyIsSet, serverSidePluginKeysSet]);\n\n  // ON LOAD --------------------------------------------\n\n  useEffect(() => {\n    const settings = getSettings();\n    if (settings.theme) {\n      dispatch({\n        field: 'lightMode',\n        value: settings.theme,\n      });\n    }\n\n    const apiKey = localStorage.getItem('apiKey');\n\n    if (serverSideApiKeyIsSet) {\n      dispatch({ field: 'apiKey', value: '' });\n\n      localStorage.removeItem('apiKey');\n    } else if (apiKey) {\n      dispatch({ field: 'apiKey', value: apiKey });\n    }\n\n    const pluginKeys = localStorage.getItem('pluginKeys');\n    if (serverSidePluginKeysSet) {\n      dispatch({ field: 'pluginKeys', value: [] });\n      localStorage.removeItem('pluginKeys');\n    } else if (pluginKeys) {\n      dispatch({ field: 'pluginKeys', value: pluginKeys });\n    }\n\n    if (window.innerWidth < 640) {\n      dispatch({ field: 'showChatbar', value: false });\n      dispatch({ field: 'showPromptbar', value: false });\n    }\n\n    const showChatbar = localStorage.getItem('showChatbar');\n    if (showChatbar) {\n      dispatch({ field: 'showChatbar', value: showChatbar === 'true' });\n    }\n\n    const showPromptbar = localStorage.getItem('showPromptbar');\n    if (showPromptbar) {\n      dispatch({ field: 'showPromptbar', value: showPromptbar === 'true' });\n    }\n\n    const folders = localStorage.getItem('folders');\n    if (folders) {\n      dispatch({ field: 'folders', value: JSON.parse(folders) });\n    }\n\n    const prompts = localStorage.getItem('prompts');\n    if (prompts) {\n      dispatch({ field: 'prompts', value: JSON.parse(prompts) });\n    }\n\n    const conversationHistory = localStorage.getItem('conversationHistory');\n    if (conversationHistory) {\n      const parsedConversationHistory: Conversation[] =\n        JSON.parse(conversationHistory);\n      const cleanedConversationHistory = cleanConversationHistory(\n        parsedConversationHistory,\n      );\n\n      dispatch({ field: 'conversations', value: cleanedConversationHistory });\n    }\n\n    const selectedConversation = localStorage.getItem('selectedConversation');\n    if (selectedConversation) {\n      const parsedSelectedConversation: Conversation =\n        JSON.parse(selectedConversation);\n      const cleanedSelectedConversation = cleanSelectedConversation(\n        parsedSelectedConversation,\n      );\n\n      dispatch({\n        field: 'selectedConversation',\n        value: cleanedSelectedConversation,\n      });\n    } else {\n      const lastConversation = conversations[conversations.length - 1];\n      dispatch({\n        field: 'selectedConversation',\n        value: {\n          id: uuidv4(),\n          name: t('New Conversation'),\n          messages: [],\n          model: OpenAIModels[defaultModelId],\n          prompt: DEFAULT_SYSTEM_PROMPT,\n          temperature: lastConversation?.temperature ?? DEFAULT_TEMPERATURE,\n          folderId: null,\n        },\n      });\n    }\n  }, [\n    defaultModelId,\n    dispatch,\n    serverSideApiKeyIsSet,\n    serverSidePluginKeysSet,\n  ]);\n\n  return (\n    <HomeContext.Provider\n      value={{\n        ...contextValue,\n        handleNewConversation,\n        handleCreateFolder,\n        handleDeleteFolder,\n        handleUpdateFolder,\n        handleSelectConversation,\n        handleUpdateConversation,\n      }}\n    >\n      <Head>\n        <title>Chatbot UI</title>\n        <meta name=\"description\" content=\"ChatGPT but better.\" />\n        <meta\n          name=\"viewport\"\n          content=\"height=device-height ,width=device-width, initial-scale=1, user-scalable=no\"\n        />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      {selectedConversation && (\n        <main\n          className={`flex h-screen w-screen flex-col text-sm text-white dark:text-white ${lightMode}`}\n        >\n          <div className=\"fixed top-0 w-full sm:hidden\">\n            <Navbar\n              selectedConversation={selectedConversation}\n              onNewConversation={handleNewConversation}\n            />\n          </div>\n\n          <div className=\"flex h-full w-full pt-[48px] sm:pt-0\">\n            <Chatbar />\n\n            <div className=\"flex flex-1\">\n              <Chat stopConversationRef={stopConversationRef} />\n            </div>\n\n            <Promptbar />\n          </div>\n        </main>\n      )}\n    </HomeContext.Provider>\n  );\n};\nexport default Home;\n\nexport const getServerSideProps: GetServerSideProps = async ({ locale }) => {\n  const defaultModelId =\n    (process.env.DEFAULT_MODEL &&\n      Object.values(OpenAIModelID).includes(\n        process.env.DEFAULT_MODEL as OpenAIModelID,\n      ) &&\n      process.env.DEFAULT_MODEL) ||\n    fallbackModelID;\n\n  let serverSidePluginKeysSet = false;\n\n  const googleApiKey = process.env.GOOGLE_API_KEY;\n  const googleCSEId = process.env.GOOGLE_CSE_ID;\n\n  if (googleApiKey && googleCSEId) {\n    serverSidePluginKeysSet = true;\n  }\n\n  return {\n    props: {\n      serverSideApiKeyIsSet: !!process.env.OPENAI_API_KEY,\n      defaultModelId,\n      serverSidePluginKeysSet,\n      ...(await serverSideTranslations(locale ?? 'en', [\n        'common',\n        'chat',\n        'sidebar',\n        'markdown',\n        'promptbar',\n        'settings',\n      ])),\n    },\n  };\n};\n","file":"/pages/api/home/home.tsx","fileHash":"29efd041208997937e22273fccce62905ed6ef4f8c4d9a288c894efe40972e1f","hash":"29efd041208997937e22273fccce62905ed6ef4f8c4d9a288c894efe40972e1f","processedContent":"import { useEffect, useRef, useState } from 'react';\n\"\"\"\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/: undefined\n\"\"\"\nimport { useQuery } from 'react-query';\n\nimport { GetServerSideProps } from 'next';\n\"\"\"\nscip-typescript npm next 14.0.3 types/`index.d.ts`/GetServerSideProps#: undefined\nscip-typescript npm next 14.0.3 `index.d.ts`/: undefined\n\"\"\"\nimport { useTranslation } from 'next-i18next';\nimport { serverSideTranslations } from 'next-i18next/serverSideTranslations';\nimport Head from 'next/head';\n\"\"\"\nscip-typescript npm next 14.0.3 dist/shared/lib/`head.d.ts`/Head().: undefined\nscip-typescript npm next 14.0.3 `head.d.ts`/: undefined\n\"\"\"\n\nimport { useCreateReducer } from '@/hooks/useCreateReducer';\n\nimport useErrorService from '@/services/errorService';\nimport useApiService from '@/services/useApiService';\n\nimport {\n  cleanConversationHistory,\n  cleanSelectedConversation,\n} from '@/utils/app/clean';\nimport { DEFAULT_SYSTEM_PROMPT, DEFAULT_TEMPERATURE } from '@/utils/app/const';\nimport {\n  saveConversation,\n  saveConversations,\n  updateConversation,\n} from '@/utils/app/conversation';\nimport { saveFolders } from '@/utils/app/folders';\nimport { savePrompts } from '@/utils/app/prompts';\nimport { getSettings } from '@/utils/app/settings';\n\nimport { Conversation } from '@/types/chat';\nimport { KeyValuePair } from '@/types/data';\nimport { FolderInterface, FolderType } from '@/types/folder';\nimport { OpenAIModelID, OpenAIModels, fallbackModelID } from '@/types/openai';\nimport { Prompt } from '@/types/prompt';\n\nimport { Chat } from '@/components/Chat/Chat';\nimport { Chatbar } from '@/components/Chatbar/Chatbar';\nimport { Navbar } from '@/components/Mobile/Navbar';\nimport Promptbar from '@/components/Promptbar';\n\nimport HomeContext from './home.context';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.context.tsx`/HomeContext.: undefined\nscip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.context.tsx`/: This code defines a context for the home page, including an initial state with properties such as API keys, models, and conversations. It also exports a default instance of the context.\n\"\"\"\nimport { HomeInitialState, initialState } from './home.state';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.state.tsx`/HomeInitialState#: This code defines an interface for the initial state of a home page, including various properties such as API keys, models, and conversations.\nscip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.state.tsx`/initialState.: undefined\nscip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.state.tsx`/: This code defines an interface for the initial state of a home page, including various properties such as API keys, models, and conversations.\n\"\"\"\n\nimport { v4 as uuidv4 } from 'uuid';\n\"\"\"\nscip-typescript npm @types/uuid 9.0.7 `index.d.ts`/v4.: undefined\nscip-typescript npm @types/uuid 9.0.7 `index.d.ts`/v4.: undefined\nscip-typescript npm @types/uuid 9.0.7 `index.d.ts`/: undefined\n\"\"\"\n\ninterface Props {\n  \"\"\"This code defines a set of properties for a component that will be used to render a specific view. The properties include a flag indicating whether the server-side API key is set, another flag indicating whether the server-side plugin keys are set, and a default model ID for the OpenAI model that will be used to generate text.\"\"\"\n  pass\n\nconst Home = ({\n  \"\"\"This code defines a component that renders a home page for an AI chatbot. It includes various properties such as API keys, models, and conversations, and provides methods for creating, deleting, and updating folders, conversations, and prompts.\"\"\"\n  pass\nexport default Home; #This code defines a component that renders a home page for an AI chatbot. It includes various properties such as API keys, models, and conversations, and provides methods for creating, deleting, and updating folders, conversations, and prompts.\n\nexport const getServerSideProps: GetServerSideProps = async ({ locale }) => { #undefined\n  \"\"\"This code is a server-side function that returns an object with properties for the default model ID, whether server-side plugin keys are set, and server-side translations for the given locale. It also checks for the presence of environment variables for OpenAI API key and Google API key/CSE ID.\"\"\"\n  pass\n","documentation":"This code defines a Next.js component that renders a home page for an AI chatbot, including various properties and methods for managing folders, conversations, and prompts. It also includes server-side functions for generating default model IDs and checking for the presence of environment variables."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`index.tsx`/","attributes":{"range":[0,0,1,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`index.tsx`/","content":"export { default, getServerSideProps } from './api/home';\n","file":"/pages/index.tsx","language":"typescript","fileHash":"fc3b2dd95961e8c7e9faa913916a34c88cd6dad9e0176600ecc477468a686aa3","hash":"fc3b2dd95961e8c7e9faa913916a34c88cd6dad9e0176600ecc477468a686aa3","processedContent":"export { default, getServerSideProps } from './api/home';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.: This code defines a component that renders a home page for an AI chatbot. It includes various properties such as API keys, models, and conversations, and provides methods for creating, deleting, and updating folders, conversations, and prompts.\nscip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/getServerSideProps.: This code is a server-side function that returns an object with properties for the default model ID, whether server-side plugin keys are set, and server-side translations for the given locale. It also checks for the presence of environment variables for OpenAI API key and Google API key/CSE ID.\nscip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`index.ts`/: This code defines a Next.js component for an AI chatbot home page, including properties and methods for managing folders, conversations, and prompts, as well as server-side functions for generating default model IDs and checking for the presence of environment variables.\n\"\"\"\n","documentation":"This code defines a Next.js component for an AI chatbot home page that includes properties and methods for managing folders, conversations, and prompts, as well as server-side functions for generating default model IDs and checking for the presence of environment variables."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_document.tsx`/","attributes":{"range":[0,0,24,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_document.tsx`/","content":"import { DocumentProps, Head, Html, Main, NextScript } from 'next/document';\n\nimport i18nextConfig from '../next-i18next.config';\n\ntype Props = DocumentProps & {\n  // add custom document props\n};\n\nexport default function Document(props: Props) {\n  const currentLocale =\n    props.__NEXT_DATA__.locale ?? i18nextConfig.i18n.defaultLocale;\n  return (\n    <Html lang={currentLocale}>\n      <Head>\n        <meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />\n        <meta name=\"apple-mobile-web-app-title\" content=\"Chatbot UI\"></meta>\n      </Head>\n      <body>\n        <Main />\n        <NextScript />\n      </body>\n    </Html>\n  );\n}\n","file":"/pages/_document.tsx","language":"typescript","fileHash":"9cff0853435faf47511104f18a978610c01f1d9aaea4ec9f20b0e17aaf4334c6","hash":"9cff0853435faf47511104f18a978610c01f1d9aaea4ec9f20b0e17aaf4334c6","processedContent":"import { DocumentProps, Head, Html, Main, NextScript } from 'next/document';\n\"\"\"\nscip-typescript npm next 14.0.3 dist/shared/lib/`utils.d.ts`/DocumentProps#: undefined\nscip-typescript npm next 14.0.3 dist/pages/`_document.d.ts`/Head#: undefined\nscip-typescript npm next 14.0.3 dist/pages/`_document.d.ts`/Html().: undefined\nscip-typescript npm next 14.0.3 dist/pages/`_document.d.ts`/Main().: undefined\nscip-typescript npm next 14.0.3 dist/pages/`_document.d.ts`/NextScript#: undefined\nscip-typescript npm next 14.0.3 `document.d.ts`/: undefined\n\"\"\"\n\nimport i18nextConfig from '../next-i18next.config'; #This code defines the internationalization (i18n) settings for a web application, including the default locale and a list of supported locales.\n\ntype Props = DocumentProps & { #undefined\n  // add custom document props\n};\n\nexport default function Document(props: Props) {\n  \"\"\"This code defines a React component called `Document` that renders an HTML document. It sets the language attribute of the `<html>` element to the current locale, and includes a `<meta>` tag with the name \"apple-mobile-web-app-capable\" and content \"yes\". Additionally, it includes a `<meta>` tag with the name \"apple-mobile-web-app-title\" and content \"Chatbot UI\". The component also renders a `<Main />` and `<NextScript />` component.\"\"\"\n  pass\n","documentation":"This code defines a React component called `Document` that renders an HTML document, sets the language attribute of the `<html>` element to the current locale, and includes a `<meta>` tag with the name \"apple-mobile-web-app-capable\" and content \"yes\". Additionally, it includes a `<meta>` tag with the name \"apple-mobile-web-app-title\" and content \"Chatbot UI\". The component also renders a `<Main />` and `<NextScript />` component."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_document.tsx`/Document().","attributes":{"range":[8,0,23,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_document.tsx`/Document().","content":"export default function Document(props: Props) {\n  const currentLocale =\n    props.__NEXT_DATA__.locale ?? i18nextConfig.i18n.defaultLocale;\n  return (\n    <Html lang={currentLocale}>\n      <Head>\n        <meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />\n        <meta name=\"apple-mobile-web-app-title\" content=\"Chatbot UI\"></meta>\n      </Head>\n      <body>\n        <Main />\n        <NextScript />\n      </body>\n    </Html>\n  );\n}","file":"/pages/_document.tsx","language":"typescript","fileHash":"9cff0853435faf47511104f18a978610c01f1d9aaea4ec9f20b0e17aaf4334c6","hash":"ba95f245ee180681cf6eafbc5d632d7abab1123c961abdbd568755559aa5500b","processedContent":"export default function Document(props: Props) { #undefined\n  const currentLocale =\n    props.__NEXT_DATA__.locale ?? i18nextConfig.i18n.defaultLocale;\n    \"\"\"\n    scip-typescript npm next 14.0.3 dist/shared/lib/`html-context.shared-runtime.d.ts`/HtmlProps#typeLiteral4:__NEXT_DATA__.: undefined\n    scip-typescript npm next 14.0.3 dist/shared/lib/`utils.d.ts`/NEXT_DATA#typeLiteral5:locale.: undefined\n    \"\"\"\n  return (\n    <Html lang={currentLocale}> #undefined\n      <Head> #undefined\n        <meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />\n        \"\"\"\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#meta.: undefined\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MetaHTMLAttributes#name.: undefined\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#content.: undefined\n        \"\"\"\n        <meta name=\"apple-mobile-web-app-title\" content=\"Chatbot UI\"></meta>\n        \"\"\"\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#meta.: undefined\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#meta.: undefined\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MetaHTMLAttributes#name.: undefined\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#content.: undefined\n        \"\"\"\n      </Head> #undefined\n      <body> #undefined\n        <Main /> #undefined\n        <NextScript /> #undefined\n      </body> #undefined\n    </Html> #undefined\n  );\n}","documentation":"This code defines a React component called `Document` that renders an HTML document. It sets the language attribute of the `<html>` element to the current locale, and includes a `<meta>` tag with the name \"apple-mobile-web-app-capable\" and content \"yes\". Additionally, it includes a `<meta>` tag with the name \"apple-mobile-web-app-title\" and content \"Chatbot UI\". The component also renders a `<Main />` and `<NextScript />` component."}},{"key":"scip-typescript npm next 14.0.3 dist/shared/lib/`utils.d.ts`/DocumentProps#","attributes":{"symbol":"scip-typescript npm next 14.0.3 dist/shared/lib/`utils.d.ts`/DocumentProps#","language":"typescript"}},{"key":"scip-typescript npm next 14.0.3 dist/pages/`_document.d.ts`/Head#","attributes":{"symbol":"scip-typescript npm next 14.0.3 dist/pages/`_document.d.ts`/Head#","language":"typescript"}},{"key":"scip-typescript npm next 14.0.3 dist/pages/`_document.d.ts`/Html().","attributes":{"symbol":"scip-typescript npm next 14.0.3 dist/pages/`_document.d.ts`/Html().","language":"typescript"}},{"key":"scip-typescript npm next 14.0.3 dist/pages/`_document.d.ts`/Main().","attributes":{"symbol":"scip-typescript npm next 14.0.3 dist/pages/`_document.d.ts`/Main().","language":"typescript"}},{"key":"scip-typescript npm next 14.0.3 dist/pages/`_document.d.ts`/NextScript#","attributes":{"symbol":"scip-typescript npm next 14.0.3 dist/pages/`_document.d.ts`/NextScript#","language":"typescript"}},{"key":"scip-typescript npm next 14.0.3 `document.d.ts`/","attributes":{"symbol":"scip-typescript npm next 14.0.3 `document.d.ts`/","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_document.tsx`/Props#","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_document.tsx`/Props#","language":"typescript"}},{"key":"scip-typescript npm next 14.0.3 dist/shared/lib/`html-context.shared-runtime.d.ts`/HtmlProps#typeLiteral4:__NEXT_DATA__.","attributes":{"symbol":"scip-typescript npm next 14.0.3 dist/shared/lib/`html-context.shared-runtime.d.ts`/HtmlProps#typeLiteral4:__NEXT_DATA__.","language":"typescript"}},{"key":"scip-typescript npm next 14.0.3 dist/shared/lib/`utils.d.ts`/NEXT_DATA#typeLiteral5:locale.","attributes":{"symbol":"scip-typescript npm next 14.0.3 dist/shared/lib/`utils.d.ts`/NEXT_DATA#typeLiteral5:locale.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#meta.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#meta.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MetaHTMLAttributes#name.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MetaHTMLAttributes#name.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#content.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#content.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#body.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#body.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_app.tsx`/","attributes":{"range":[0,0,25,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_app.tsx`/","content":"import { Toaster } from 'react-hot-toast';\nimport { QueryClient, QueryClientProvider } from 'react-query';\n\nimport { appWithTranslation } from 'next-i18next';\nimport type { AppProps } from 'next/app';\nimport { Inter } from 'next/font/google';\n\nimport '@/styles/globals.css';\n\nconst inter = Inter({ subsets: ['latin'] });\n\nfunction App({ Component, pageProps }: AppProps<{}>) {\n  const queryClient = new QueryClient();\n\n  return (\n    <div className={inter.className}>\n      <Toaster />\n      <QueryClientProvider client={queryClient}>\n        <Component {...pageProps} />\n      </QueryClientProvider>\n    </div>\n  );\n}\n\nexport default appWithTranslation(App);\n","file":"/pages/_app.tsx","language":"typescript","fileHash":"7a470169955056aad9a83bc6518ecfbf078ff401491f99d988a1791fa99739bb","hash":"7a470169955056aad9a83bc6518ecfbf078ff401491f99d988a1791fa99739bb","processedContent":"import { Toaster } from 'react-hot-toast';\nimport { QueryClient, QueryClientProvider } from 'react-query';\n\nimport { appWithTranslation } from 'next-i18next';\nimport type { AppProps } from 'next/app';\n\"\"\"\nscip-typescript npm next 14.0.3 dist/pages/`_app.d.ts`/AppProps#: undefined\nscip-typescript npm next 14.0.3 `app.d.ts`/: undefined\n\"\"\"\nimport { Inter } from 'next/font/google';\n\"\"\"\nscip-typescript npm @next/font HEAD dist/google/`index.d.ts`/Inter().: undefined\nscip-typescript npm next 14.0.3 font/google/`index.d.ts`/: undefined\n\"\"\"\n\nimport '@/styles/globals.css';\n\nconst inter = Inter({ subsets: ['latin'] }); #undefined\n\nfunction App({ Component, pageProps }: AppProps<{}>) {\n  \"\"\"This code defines a function called `App` that takes in two parameters: `Component` and `pageProps`. It creates a new instance of `QueryClient` and returns a JSX element that includes the `Toaster` component, the `QueryClientProvider` component, and the `Component` parameter with the `pageProps` parameter spread into it.\"\"\"\n  pass\n\nexport default appWithTranslation(App); #This code defines a function called `App` that takes in two parameters: `Component` and `pageProps`. It creates a new instance of `QueryClient` and returns a JSX element that includes the `Toaster` component, the `QueryClientProvider` component, and the `Component` parameter with the `pageProps` parameter spread into it.\n","documentation":"This code defines a Next.js app that uses the `react-hot-toast` and `react-query` libraries to display a toaster component and fetch data from an API."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_app.tsx`/App().","attributes":{"range":[11,0,22,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_app.tsx`/App().","content":"function App({ Component, pageProps }: AppProps<{}>) {\n  const queryClient = new QueryClient();\n\n  return (\n    <div className={inter.className}>\n      <Toaster />\n      <QueryClientProvider client={queryClient}>\n        <Component {...pageProps} />\n      </QueryClientProvider>\n    </div>\n  );\n}","file":"/pages/_app.tsx","language":"typescript","fileHash":"7a470169955056aad9a83bc6518ecfbf078ff401491f99d988a1791fa99739bb","hash":"426c6251063231e08b1b1c1d684f7310806580db48c32750895ae4fb5fb36c09","processedContent":"function App({ Component, pageProps }: AppProps<{}>) {\n\"\"\"\nscip-typescript npm next 14.0.3 dist/shared/lib/`utils.d.ts`/AppInitialProps#typeLiteral10:pageProps.: undefined\nscip-typescript npm next 14.0.3 dist/pages/`_app.d.ts`/AppProps#: undefined\n\"\"\"\n  const queryClient = new QueryClient();\n\n  return (\n    <div className={inter.className}>\n    \"\"\"\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n    scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_app.tsx`/inter.: undefined\n    scip-typescript npm @next/font HEAD dist/`types.d.ts`/NextFont#typeLiteral14:className.: undefined\n    \"\"\"\n      <Toaster />\n      <QueryClientProvider client={queryClient}>\n        <Component {...pageProps} />\n      </QueryClientProvider>\n    </div> #undefined\n  );\n}","documentation":"This code defines a function called `App` that takes in two parameters: `Component` and `pageProps`. It creates a new instance of `QueryClient` and returns a JSX element that includes the `Toaster` component, the `QueryClientProvider` component, and the `Component` parameter with the `pageProps` parameter spread into it."}},{"key":"scip-typescript npm next 14.0.3 dist/pages/`_app.d.ts`/AppProps#","attributes":{"symbol":"scip-typescript npm next 14.0.3 dist/pages/`_app.d.ts`/AppProps#","language":"typescript"}},{"key":"scip-typescript npm next 14.0.3 `app.d.ts`/","attributes":{"symbol":"scip-typescript npm next 14.0.3 `app.d.ts`/","language":"typescript"}},{"key":"scip-typescript npm @next/font HEAD dist/google/`index.d.ts`/Inter().","attributes":{"symbol":"scip-typescript npm @next/font HEAD dist/google/`index.d.ts`/Inter().","language":"typescript"}},{"key":"scip-typescript npm next 14.0.3 font/google/`index.d.ts`/","attributes":{"symbol":"scip-typescript npm next 14.0.3 font/google/`index.d.ts`/","language":"typescript"}},{"key":"scip-typescript npm next 14.0.3 dist/shared/lib/`utils.d.ts`/AppInitialProps#typeLiteral10:pageProps.","attributes":{"symbol":"scip-typescript npm next 14.0.3 dist/shared/lib/`utils.d.ts`/AppInitialProps#typeLiteral10:pageProps.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_app.tsx`/inter.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_app.tsx`/inter.","language":"typescript"}},{"key":"scip-typescript npm @next/font HEAD dist/`types.d.ts`/NextFont#typeLiteral14:className.","attributes":{"symbol":"scip-typescript npm @next/font HEAD dist/`types.d.ts`/NextFont#typeLiteral14:className.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useFetch.ts`/","attributes":{"range":[0,0,88,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useFetch.ts`/","content":"export type RequestModel = {\n  params?: object;\n  headers?: object;\n  signal?: AbortSignal;\n};\n\nexport type RequestWithBodyModel = RequestModel & {\n  body?: object | FormData;\n};\n\nexport const useFetch = () => {\n  const handleFetch = async (\n    url: string,\n    request: any,\n    signal?: AbortSignal,\n  ) => {\n    const requestUrl = request?.params ? `${url}${request.params}` : url;\n\n    const requestBody = request?.body\n      ? request.body instanceof FormData\n        ? { ...request, body: request.body }\n        : { ...request, body: JSON.stringify(request.body) }\n      : request;\n\n    const headers = {\n      ...(request?.headers\n        ? request.headers\n        : request?.body && request.body instanceof FormData\n        ? {}\n        : { 'Content-type': 'application/json' }),\n    };\n\n    return fetch(requestUrl, { ...requestBody, headers, signal })\n      .then((response) => {\n        if (!response.ok) throw response;\n\n        const contentType = response.headers.get('content-type');\n        const contentDisposition = response.headers.get('content-disposition');\n\n        const headers = response.headers;\n\n        const result =\n          contentType &&\n          (contentType?.indexOf('application/json') !== -1 ||\n            contentType?.indexOf('text/plain') !== -1)\n            ? response.json()\n            : contentDisposition?.indexOf('attachment') !== -1\n            ? response.blob()\n            : response;\n\n        return result;\n      })\n      .catch(async (err) => {\n        const contentType = err.headers.get('content-type');\n\n        const errResult =\n          contentType && contentType?.indexOf('application/problem+json') !== -1\n            ? await err.json()\n            : err;\n\n        throw errResult;\n      });\n  };\n\n  return {\n    get: async <T>(url: string, request?: RequestModel): Promise<T> => {\n      return handleFetch(url, { ...request, method: 'get' });\n    },\n    post: async <T>(\n      url: string,\n      request?: RequestWithBodyModel,\n    ): Promise<T> => {\n      return handleFetch(url, { ...request, method: 'post' });\n    },\n    put: async <T>(url: string, request?: RequestWithBodyModel): Promise<T> => {\n      return handleFetch(url, { ...request, method: 'put' });\n    },\n    patch: async <T>(\n      url: string,\n      request?: RequestWithBodyModel,\n    ): Promise<T> => {\n      return handleFetch(url, { ...request, method: 'patch' });\n    },\n    delete: async <T>(url: string, request?: RequestModel): Promise<T> => {\n      return handleFetch(url, { ...request, method: 'delete' });\n    },\n  };\n};\n","file":"/hooks/useFetch.ts","language":"typescript","fileHash":"4f9aa03f8e0919d5b9e320967eb1ebc4da6431ed38dcc685c36122c49470223d","hash":"4f9aa03f8e0919d5b9e320967eb1ebc4da6431ed38dcc685c36122c49470223d","processedContent":"export type RequestModel = {\n  params?: object;\n  headers?: object;\n  signal?: AbortSignal;\n  \"\"\"\n  scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/AbortSignal#: undefined\n  scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/AbortSignal.: undefined\n  \"\"\"\n};\n\nexport type RequestWithBodyModel = RequestModel & { #undefined\n  body?: object | FormData;\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/FormData#: undefined\n  scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/FormData#: undefined\n  scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/FormData.: undefined\n  \"\"\"\n};\n\nexport const useFetch = () => {\n  \"\"\"This code defines a function that returns an object with five methods: get, post, put, patch, and delete. Each method takes a URL and an optional request object as parameters and returns a promise that resolves to the response data. The function also defines a handleFetch function that handles the actual fetching of the data, including setting the appropriate headers and handling errors.\"\"\"\n  pass\n","documentation":"This code defines a function called useFetch that returns an object with five methods for making HTTP requests (get, post, put, patch, and delete). Each method takes a URL and an optional request object as parameters and returns a promise that resolves to the response data."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useFetch.ts`/useFetch.","attributes":{"range":[10,24,87,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useFetch.ts`/useFetch.","content":"() => {\n  const handleFetch = async (\n    url: string,\n    request: any,\n    signal?: AbortSignal,\n  ) => {\n    const requestUrl = request?.params ? `${url}${request.params}` : url;\n\n    const requestBody = request?.body\n      ? request.body instanceof FormData\n        ? { ...request, body: request.body }\n        : { ...request, body: JSON.stringify(request.body) }\n      : request;\n\n    const headers = {\n      ...(request?.headers\n        ? request.headers\n        : request?.body && request.body instanceof FormData\n        ? {}\n        : { 'Content-type': 'application/json' }),\n    };\n\n    return fetch(requestUrl, { ...requestBody, headers, signal })\n      .then((response) => {\n        if (!response.ok) throw response;\n\n        const contentType = response.headers.get('content-type');\n        const contentDisposition = response.headers.get('content-disposition');\n\n        const headers = response.headers;\n\n        const result =\n          contentType &&\n          (contentType?.indexOf('application/json') !== -1 ||\n            contentType?.indexOf('text/plain') !== -1)\n            ? response.json()\n            : contentDisposition?.indexOf('attachment') !== -1\n            ? response.blob()\n            : response;\n\n        return result;\n      })\n      .catch(async (err) => {\n        const contentType = err.headers.get('content-type');\n\n        const errResult =\n          contentType && contentType?.indexOf('application/problem+json') !== -1\n            ? await err.json()\n            : err;\n\n        throw errResult;\n      });\n  };\n\n  return {\n    get: async <T>(url: string, request?: RequestModel): Promise<T> => {\n      return handleFetch(url, { ...request, method: 'get' });\n    },\n    post: async <T>(\n      url: string,\n      request?: RequestWithBodyModel,\n    ): Promise<T> => {\n      return handleFetch(url, { ...request, method: 'post' });\n    },\n    put: async <T>(url: string, request?: RequestWithBodyModel): Promise<T> => {\n      return handleFetch(url, { ...request, method: 'put' });\n    },\n    patch: async <T>(\n      url: string,\n      request?: RequestWithBodyModel,\n    ): Promise<T> => {\n      return handleFetch(url, { ...request, method: 'patch' });\n    },\n    delete: async <T>(url: string, request?: RequestModel): Promise<T> => {\n      return handleFetch(url, { ...request, method: 'delete' });\n    },\n  };\n}","file":"/hooks/useFetch.ts","language":"typescript","fileHash":"4f9aa03f8e0919d5b9e320967eb1ebc4da6431ed38dcc685c36122c49470223d","hash":"3723f4d17b5c4d78c899ffcf419c9084f45ea729b57d1e53e13b0c112f52f223","processedContent":"() => {\n  const handleFetch = async (\n    url: string,\n    request: any,\n    signal?: AbortSignal,\n    \"\"\"\n    scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/AbortSignal#: undefined\n    scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/AbortSignal.: undefined\n    \"\"\"\n  ) => {\n    const requestUrl = request?.params ? `${url}${request.params}` : url;\n\n    const requestBody = request?.body\n      ? request.body instanceof FormData\n      \"\"\"\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/FormData#: undefined\n      scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/FormData#: undefined\n      scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/FormData.: undefined\n      \"\"\"\n        ? { ...request, body: request.body }\n        : { ...request, body: JSON.stringify(request.body) }\n      : request;\n\n    const headers = {\n      ...(request?.headers\n        ? request.headers\n        : request?.body && request.body instanceof FormData\n        \"\"\"\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/FormData#: undefined\n        scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/FormData#: undefined\n        scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/FormData.: undefined\n        \"\"\"\n        ? {}\n        : { 'Content-type': 'application/json' }),\n    };\n\n    return fetch(requestUrl, { ...requestBody, headers, signal }) #undefined\n      .then((response) => {\n        if (!response.ok) throw response;\n\n        const contentType = response.headers.get('content-type');\n        const contentDisposition = response.headers.get('content-disposition');\n\n        const headers = response.headers;\n\n        const result =\n          contentType &&\n          (contentType?.indexOf('application/json') !== -1 ||\n            contentType?.indexOf('text/plain') !== -1)\n            ? response.json()\n            : contentDisposition?.indexOf('attachment') !== -1\n            ? response.blob()\n            : response;\n\n        return result;\n      })\n      .catch(async (err) => {\n        const contentType = err.headers.get('content-type');\n\n        const errResult =\n          contentType && contentType?.indexOf('application/problem+json') !== -1\n            ? await err.json()\n            : err;\n\n        throw errResult;\n      });\n  };\n\n  return {\n    get: async <T>(url: string, request?: RequestModel): Promise<T> => { #undefined\n      return handleFetch(url, { ...request, method: 'get' });\n    },\n    post: async <T>(\n      url: string,\n      request?: RequestWithBodyModel, #undefined\n    ): Promise<T> => {\n      return handleFetch(url, { ...request, method: 'post' });\n    },\n    put: async <T>(url: string, request?: RequestWithBodyModel): Promise<T> => { #undefined\n      return handleFetch(url, { ...request, method: 'put' });\n    },\n    patch: async <T>(\n      url: string,\n      request?: RequestWithBodyModel, #undefined\n    ): Promise<T> => {\n      return handleFetch(url, { ...request, method: 'patch' });\n    },\n    delete: async <T>(url: string, request?: RequestModel): Promise<T> => { #undefined\n      return handleFetch(url, { ...request, method: 'delete' });\n    },\n  };\n}","documentation":"This code defines a function that returns an object with five methods: get, post, put, patch, and delete. Each method takes a URL and an optional request object as parameters and returns a promise that resolves to the response data. The function also defines a handleFetch function that handles the actual fetching of the data, including setting the appropriate headers and handling errors."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useFetch.ts`/RequestModel#","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useFetch.ts`/RequestModel#","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/FormData#","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/FormData#","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/FormData#","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/FormData#","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/FormData.","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/FormData.","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/fetch().","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/fetch().","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useFetch.ts`/RequestWithBodyModel#","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useFetch.ts`/RequestWithBodyModel#","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useCreateReducer.ts`/","attributes":{"range":[0,0,30,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useCreateReducer.ts`/","content":"import { useMemo, useReducer } from 'react';\n\n// Extracts property names from initial state of reducer to allow typesafe dispatch objects\nexport type FieldNames<T> = {\n  [K in keyof T]: T[K] extends string ? K : K;\n}[keyof T];\n\n// Returns the Action Type for the dispatch object to be used for typing in things like context\nexport type ActionType<T> =\n  | { type: 'reset' }\n  | { type?: 'change'; field: FieldNames<T>; value: any };\n\n// Returns a typed dispatch and state\nexport const useCreateReducer = <T>({ initialState }: { initialState: T }) => {\n  type Action =\n    | { type: 'reset' }\n    | { type?: 'change'; field: FieldNames<T>; value: any };\n\n  const reducer = (state: T, action: Action) => {\n    if (!action.type) return { ...state, [action.field]: action.value };\n\n    if (action.type === 'reset') return initialState;\n\n    throw new Error();\n  };\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return useMemo(() => ({ state, dispatch }), [state, dispatch]);\n};\n","file":"/hooks/useCreateReducer.ts","language":"typescript","fileHash":"f53bc9a5e5906eda610af172ab38aa02d56a401747fb84e1eaca03f5efad56ed","hash":"f53bc9a5e5906eda610af172ab38aa02d56a401747fb84e1eaca03f5efad56ed","processedContent":"import { useMemo, useReducer } from 'react';\n\"\"\"\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useMemo().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useReducer().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/: undefined\n\"\"\"\n\n// Extracts property names from initial state of reducer to allow typesafe dispatch objects\nexport type FieldNames<T> = {\n  [K in keyof T]: T[K] extends string ? K : K;\n  \"\"\"\n  scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useCreateReducer.ts`/FieldNames#[T]: undefined\n  scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useCreateReducer.ts`/FieldNames#[T]: undefined\n  \"\"\"\n}[keyof T]; #undefined\n\n// Returns the Action Type for the dispatch object to be used for typing in things like context\nexport type ActionType<T> =\n  | { type: 'reset' }\n  | { type?: 'change'; field: FieldNames<T>; value: any };\n  \"\"\"\n  scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useCreateReducer.ts`/FieldNames#: undefined\n  scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useCreateReducer.ts`/ActionType#[T]: undefined\n  \"\"\"\n\n// Returns a typed dispatch and state\nexport const useCreateReducer = <T>({ initialState }: { initialState: T }) => {\n  \"\"\"This code defines a custom hook that allows for the management of state in functional components. It takes an initial state as an argument and returns an object with two properties: `state` and `dispatch`. The `state` property contains the current state, and the `dispatch` property is a function that can be used to update the state by dispatching actions.\"\"\"\n  pass\n","documentation":"This code defines a custom React hook called `useCreateReducer` that allows for the management of state in functional components. It takes an initial state as an argument and returns an object with two properties: `state` and `dispatch`. The `state` property contains the current state, and the `dispatch` property is a function that can be used to update the state by dispatching actions."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useCreateReducer.ts`/useCreateReducer.","attributes":{"range":[13,32,29,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useCreateReducer.ts`/useCreateReducer.","content":"<T>({ initialState }: { initialState: T }) => {\n  type Action =\n    | { type: 'reset' }\n    | { type?: 'change'; field: FieldNames<T>; value: any };\n\n  const reducer = (state: T, action: Action) => {\n    if (!action.type) return { ...state, [action.field]: action.value };\n\n    if (action.type === 'reset') return initialState;\n\n    throw new Error();\n  };\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return useMemo(() => ({ state, dispatch }), [state, dispatch]);\n}","file":"/hooks/useCreateReducer.ts","language":"typescript","fileHash":"f53bc9a5e5906eda610af172ab38aa02d56a401747fb84e1eaca03f5efad56ed","hash":"49665a0a559187f24125f2fbb822089dc1ac82535aba631d4fc3913c26bcdb23","processedContent":"<T>({ initialState }: { initialState: T }) => {\n  type Action =\n    | { type: 'reset' }\n    | { type?: 'change'; field: FieldNames<T>; value: any }; #undefined\n\n  const reducer = (state: T, action: Action) => {\n    if (!action.type) return { ...state, [action.field]: action.value };\n\n    if (action.type === 'reset') return initialState;\n\n    throw new Error();\n  };\n\n  const [state, dispatch] = useReducer(reducer, initialState); #undefined\n\n  return useMemo(() => ({ state, dispatch }), [state, dispatch]); #undefined\n}","documentation":"This code defines a custom hook that allows for the management of state in functional components. It takes an initial state as an argument and returns an object with two properties: `state` and `dispatch`. The `state` property contains the current state, and the `dispatch` property is a function that can be used to update the state by dispatching actions."}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useReducer().","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useReducer().","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useCreateReducer.ts`/FieldNames#[T]","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useCreateReducer.ts`/FieldNames#[T]","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useCreateReducer.ts`/FieldNames#","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useCreateReducer.ts`/FieldNames#","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useCreateReducer.ts`/ActionType#[T]","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useCreateReducer.ts`/ActionType#[T]","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/","attributes":{"range":[0,0,117,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/","content":"import { Message } from '@/types/chat';\nimport { OpenAIModel } from '@/types/openai';\n\nimport { AZURE_DEPLOYMENT_ID, OPENAI_API_HOST, OPENAI_API_TYPE, OPENAI_API_VERSION, OPENAI_ORGANIZATION } from '../app/const';\n\nimport {\n  ParsedEvent,\n  ReconnectInterval,\n  createParser,\n} from 'eventsource-parser';\n\nexport class OpenAIError extends Error {\n  type: string;\n  param: string;\n  code: string;\n\n  constructor(message: string, type: string, param: string, code: string) {\n    super(message);\n    this.name = 'OpenAIError';\n    this.type = type;\n    this.param = param;\n    this.code = code;\n  }\n}\n\nexport const OpenAIStream = async (\n  model: OpenAIModel,\n  systemPrompt: string,\n  temperature : number,\n  key: string,\n  messages: Message[],\n) => {\n  let url = `${OPENAI_API_HOST}/v1/chat/completions`;\n  if (OPENAI_API_TYPE === 'azure') {\n    url = `${OPENAI_API_HOST}/openai/deployments/${AZURE_DEPLOYMENT_ID}/chat/completions?api-version=${OPENAI_API_VERSION}`;\n  }\n  const res = await fetch(url, {\n    headers: {\n      'Content-Type': 'application/json',\n      ...(OPENAI_API_TYPE === 'openai' && {\n        Authorization: `Bearer ${key ? key : process.env.OPENAI_API_KEY}`\n      }),\n      ...(OPENAI_API_TYPE === 'azure' && {\n        'api-key': `${key ? key : process.env.OPENAI_API_KEY}`\n      }),\n      ...((OPENAI_API_TYPE === 'openai' && OPENAI_ORGANIZATION) && {\n        'OpenAI-Organization': OPENAI_ORGANIZATION,\n      }),\n    },\n    method: 'POST',\n    body: JSON.stringify({\n      ...(OPENAI_API_TYPE === 'openai' && {model: model.id}),\n      messages: [\n        {\n          role: 'system',\n          content: systemPrompt,\n        },\n        ...messages,\n      ],\n      max_tokens: 1000,\n      temperature: temperature,\n      stream: true,\n    }),\n  });\n\n  const encoder = new TextEncoder();\n  const decoder = new TextDecoder();\n\n  if (res.status !== 200) {\n    const result = await res.json();\n    if (result.error) {\n      throw new OpenAIError(\n        result.error.message,\n        result.error.type,\n        result.error.param,\n        result.error.code,\n      );\n    } else {\n      throw new Error(\n        `OpenAI API returned an error: ${\n          decoder.decode(result?.value) || result.statusText\n        }`,\n      );\n    }\n  }\n\n  const stream = new ReadableStream({\n    async start(controller) {\n      const onParse = (event: ParsedEvent | ReconnectInterval) => {\n        if (event.type === 'event') {\n          const data = event.data;\n\n          try {\n            const json = JSON.parse(data);\n            if (json.choices[0].finish_reason != null) {\n              controller.close();\n              return;\n            }\n            const text = json.choices[0].delta.content;\n            const queue = encoder.encode(text);\n            controller.enqueue(queue);\n          } catch (e) {\n            controller.error(e);\n          }\n        }\n      };\n\n      const parser = createParser(onParse);\n\n      for await (const chunk of res.body as any) {\n        parser.feed(decoder.decode(chunk));\n      }\n    },\n  });\n\n  return stream;\n};\n","file":"/utils/server/index.ts","language":"typescript","fileHash":"f4678ebf42defbc265b782244615db4684b4cb029f01c40f9022a34de396213d","hash":"f4678ebf42defbc265b782244615db4684b4cb029f01c40f9022a34de396213d","processedContent":"import { Message } from '@/types/chat';\nimport { OpenAIModel } from '@/types/openai';\n\nimport { AZURE_DEPLOYMENT_ID, OPENAI_API_HOST, OPENAI_API_TYPE, OPENAI_API_VERSION, OPENAI_ORGANIZATION } from '../app/const';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/AZURE_DEPLOYMENT_ID.: undefined\nscip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/OPENAI_API_HOST.: undefined\nscip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/OPENAI_API_TYPE.: undefined\nscip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/OPENAI_API_VERSION.: undefined\nscip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/OPENAI_ORGANIZATION.: undefined\nscip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/: The code defines several constants used in the OpenAI API, including the default system prompt, API host, temperature, API type, version, organization, and deployment ID.\n\"\"\"\n\nimport {\n  ParsedEvent,\n  ReconnectInterval,\n  createParser,\n} from 'eventsource-parser';\n\nexport class OpenAIError extends Error {\n  \"\"\"This code defines a custom error class called OpenAIError that inherits from the built-in JavaScript Error class. It includes properties for type, param, and code, which are set in the constructor. The class is used to create instances of errors that occur during the use of the OpenAI API.\"\"\"\n  pass\n\nexport const OpenAIStream = async (\n  \"\"\"This code is an asynchronous function that sends a request to the OpenAI API to generate text based on a given prompt and returns a ReadableStream object that emits the generated text.\"\"\"\n  pass\n","documentation":"The code defines several constants and a custom error class for the OpenAI API, as well as an asynchronous function to generate text based on a prompt."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/OpenAIError#","attributes":{"range":[11,0,23,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/OpenAIError#","content":"export class OpenAIError extends Error {\n  type: string;\n  param: string;\n  code: string;\n\n  constructor(message: string, type: string, param: string, code: string) {\n    super(message);\n    this.name = 'OpenAIError';\n    this.type = type;\n    this.param = param;\n    this.code = code;\n  }\n}","file":"/utils/server/index.ts","language":"typescript","fileHash":"f4678ebf42defbc265b782244615db4684b4cb029f01c40f9022a34de396213d","hash":"9b894dfbc6509a3f5ba44ec1d5cc9f17655022ee369848fcc101a3fca381e444","processedContent":"export class OpenAIError extends Error {\n  type: string;\n  param: string;\n  code: string;\n\n  constructor(message: string, type: string, param: string, code: string) {\n    super(message);\n    this.name = 'OpenAIError';\n    this.type = type; #undefined\n    this.param = param; #undefined\n    this.code = code; #undefined\n  }\n}","documentation":"This code defines a custom error class called OpenAIError that inherits from the built-in JavaScript Error class. It includes properties for type, param, and code, which are set in the constructor. The class is used to create instances of errors that occur during the use of the OpenAI API."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/OpenAIStream.","attributes":{"range":[25,28,116,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/OpenAIStream.","content":"async (\n  model: OpenAIModel,\n  systemPrompt: string,\n  temperature : number,\n  key: string,\n  messages: Message[],\n) => {\n  let url = `${OPENAI_API_HOST}/v1/chat/completions`;\n  if (OPENAI_API_TYPE === 'azure') {\n    url = `${OPENAI_API_HOST}/openai/deployments/${AZURE_DEPLOYMENT_ID}/chat/completions?api-version=${OPENAI_API_VERSION}`;\n  }\n  const res = await fetch(url, {\n    headers: {\n      'Content-Type': 'application/json',\n      ...(OPENAI_API_TYPE === 'openai' && {\n        Authorization: `Bearer ${key ? key : process.env.OPENAI_API_KEY}`\n      }),\n      ...(OPENAI_API_TYPE === 'azure' && {\n        'api-key': `${key ? key : process.env.OPENAI_API_KEY}`\n      }),\n      ...((OPENAI_API_TYPE === 'openai' && OPENAI_ORGANIZATION) && {\n        'OpenAI-Organization': OPENAI_ORGANIZATION,\n      }),\n    },\n    method: 'POST',\n    body: JSON.stringify({\n      ...(OPENAI_API_TYPE === 'openai' && {model: model.id}),\n      messages: [\n        {\n          role: 'system',\n          content: systemPrompt,\n        },\n        ...messages,\n      ],\n      max_tokens: 1000,\n      temperature: temperature,\n      stream: true,\n    }),\n  });\n\n  const encoder = new TextEncoder();\n  const decoder = new TextDecoder();\n\n  if (res.status !== 200) {\n    const result = await res.json();\n    if (result.error) {\n      throw new OpenAIError(\n        result.error.message,\n        result.error.type,\n        result.error.param,\n        result.error.code,\n      );\n    } else {\n      throw new Error(\n        `OpenAI API returned an error: ${\n          decoder.decode(result?.value) || result.statusText\n        }`,\n      );\n    }\n  }\n\n  const stream = new ReadableStream({\n    async start(controller) {\n      const onParse = (event: ParsedEvent | ReconnectInterval) => {\n        if (event.type === 'event') {\n          const data = event.data;\n\n          try {\n            const json = JSON.parse(data);\n            if (json.choices[0].finish_reason != null) {\n              controller.close();\n              return;\n            }\n            const text = json.choices[0].delta.content;\n            const queue = encoder.encode(text);\n            controller.enqueue(queue);\n          } catch (e) {\n            controller.error(e);\n          }\n        }\n      };\n\n      const parser = createParser(onParse);\n\n      for await (const chunk of res.body as any) {\n        parser.feed(decoder.decode(chunk));\n      }\n    },\n  });\n\n  return stream;\n}","file":"/utils/server/index.ts","language":"typescript","fileHash":"f4678ebf42defbc265b782244615db4684b4cb029f01c40f9022a34de396213d","hash":"1f66c12c8b72dc9585d51287228f2f893e9ecfec771f3892ec10d2c30c358014","processedContent":"async (\n  model: OpenAIModel,\n  systemPrompt: string,\n  temperature : number,\n  key: string,\n  messages: Message[],\n) => {\n  let url = `${OPENAI_API_HOST}/v1/chat/completions`; #undefined\n  if (OPENAI_API_TYPE === 'azure') { #undefined\n    url = `${OPENAI_API_HOST}/openai/deployments/${AZURE_DEPLOYMENT_ID}/chat/completions?api-version=${OPENAI_API_VERSION}`;\n    \"\"\"\n    scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/OPENAI_API_HOST.: undefined\n    scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/AZURE_DEPLOYMENT_ID.: undefined\n    scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/OPENAI_API_VERSION.: undefined\n    \"\"\"\n  }\n  const res = await fetch(url, { #undefined\n    headers: {\n      'Content-Type': 'application/json',\n      ...(OPENAI_API_TYPE === 'openai' && { #undefined\n        Authorization: `Bearer ${key ? key : process.env.OPENAI_API_KEY}`\n        \"\"\"\n        scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/process.: undefined\n        scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/process.: undefined\n        scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/NodeJS/Process#env.: undefined\n        \"\"\"\n      }),\n      ...(OPENAI_API_TYPE === 'azure' && { #undefined\n        'api-key': `${key ? key : process.env.OPENAI_API_KEY}`\n        \"\"\"\n        scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/process.: undefined\n        scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/process.: undefined\n        scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/NodeJS/Process#env.: undefined\n        \"\"\"\n      }),\n      ...((OPENAI_API_TYPE === 'openai' && OPENAI_ORGANIZATION) && {\n      \"\"\"\n      scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/OPENAI_API_TYPE.: undefined\n      scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/OPENAI_ORGANIZATION.: undefined\n      \"\"\"\n        'OpenAI-Organization': OPENAI_ORGANIZATION, #undefined\n      }),\n    },\n    method: 'POST',\n    body: JSON.stringify({\n      ...(OPENAI_API_TYPE === 'openai' && {model: model.id}), #undefined\n      messages: [\n        {\n          role: 'system',\n          content: systemPrompt,\n        },\n        ...messages,\n      ],\n      max_tokens: 1000,\n      temperature: temperature,\n      stream: true,\n    }),\n  });\n\n  const encoder = new TextEncoder(); #undefined\n  const decoder = new TextDecoder(); #undefined\n\n  if (res.status !== 200) {\n    const result = await res.json();\n    if (result.error) {\n      throw new OpenAIError( #undefined\n        result.error.message,\n        result.error.type,\n        result.error.param,\n        result.error.code,\n      );\n    } else {\n      throw new Error(\n        `OpenAI API returned an error: ${\n          decoder.decode(result?.value) || result.statusText #undefined\n        }`,\n      );\n    }\n  }\n\n  const stream = new ReadableStream({\n    async start(controller) {\n      const onParse = (event: ParsedEvent | ReconnectInterval) => {\n        if (event.type === 'event') {\n          const data = event.data;\n\n          try {\n            const json = JSON.parse(data);\n            if (json.choices[0].finish_reason != null) {\n              controller.close();\n              return;\n            }\n            const text = json.choices[0].delta.content;\n            const queue = encoder.encode(text); #undefined\n            controller.enqueue(queue);\n          } catch (e) {\n            controller.error(e);\n          }\n        }\n      };\n\n      const parser = createParser(onParse);\n\n      for await (const chunk of res.body as any) {\n        parser.feed(decoder.decode(chunk)); #undefined\n      }\n    },\n  });\n\n  return stream;\n}","documentation":"This code is an asynchronous function that sends a request to the OpenAI API to generate text based on a given prompt and returns a ReadableStream object that emits the generated text."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/AZURE_DEPLOYMENT_ID.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/AZURE_DEPLOYMENT_ID.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/OPENAI_API_HOST.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/OPENAI_API_HOST.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/OPENAI_API_VERSION.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/OPENAI_API_VERSION.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/OPENAI_ORGANIZATION.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/OPENAI_ORGANIZATION.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/OpenAIError#type.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/OpenAIError#type.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/OpenAIError#param.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/OpenAIError#param.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/OpenAIError#code.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/OpenAIError#code.","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`util.d.ts`/`\"util\"`/global/TextEncoder.","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`util.d.ts`/`\"util\"`/global/TextEncoder.","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`util.d.ts`/`\"util\"`/global/TextDecoder.","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`util.d.ts`/`\"util\"`/global/TextDecoder.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/OpenAIError#`<constructor>`().","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/OpenAIError#`<constructor>`().","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`util.d.ts`/`\"util\"`/TextDecoder#decode().","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`util.d.ts`/`\"util\"`/TextDecoder#decode().","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`util.d.ts`/`\"util\"`/TextEncoder#encode().","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`util.d.ts`/`\"util\"`/TextEncoder#encode().","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`google.ts`/","attributes":{"range":[0,0,9,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`google.ts`/","content":"export const cleanSourceText = (text: string) => {\n  return text\n    .trim()\n    .replace(/(\\n){4,}/g, '\\n\\n\\n')\n    .replace(/\\n\\n/g, ' ')\n    .replace(/ {3,}/g, '  ')\n    .replace(/\\t/g, '')\n    .replace(/\\n+(\\s*\\n)*/g, '\\n');\n};\n","file":"/utils/server/google.ts","language":"typescript","fileHash":"8c04ac3454b9e4f990bd5ee271c703a5021d6989d2e23768f9fd18f9e53e1125","hash":"8c04ac3454b9e4f990bd5ee271c703a5021d6989d2e23768f9fd18f9e53e1125","processedContent":"export const cleanSourceText = (text: string) => {\n  \"\"\"This code takes a string as input and cleans it by removing excessive whitespace, including newlines, tabs, and multiple spaces. It also converts consecutive newlines to a single newline.\"\"\"\n  pass\n","documentation":"This code cleans a string by removing excessive whitespace, including newlines, tabs, and multiple spaces, and converting consecutive newlines to a single newline."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`google.ts`/cleanSourceText.","attributes":{"range":[0,31,8,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`google.ts`/cleanSourceText.","content":"(text: string) => {\n  return text\n    .trim()\n    .replace(/(\\n){4,}/g, '\\n\\n\\n')\n    .replace(/\\n\\n/g, ' ')\n    .replace(/ {3,}/g, '  ')\n    .replace(/\\t/g, '')\n    .replace(/\\n+(\\s*\\n)*/g, '\\n');\n}","file":"/utils/server/google.ts","language":"typescript","fileHash":"8c04ac3454b9e4f990bd5ee271c703a5021d6989d2e23768f9fd18f9e53e1125","hash":"bf30fea9c674680031743898650b10c8b2b5ff018d1fcb21fcdde48a40c2df1e","processedContent":"(text: string) => {\n  return text\n    .trim()\n    .replace(/(\\n){4,}/g, '\\n\\n\\n')\n    .replace(/\\n\\n/g, ' ')\n    .replace(/ {3,}/g, '  ')\n    .replace(/\\t/g, '')\n    .replace(/\\n+(\\s*\\n)*/g, '\\n');\n}","documentation":"This code takes a string as input and cleans it by removing excessive whitespace, including newlines, tabs, and multiple spaces. It also converts consecutive newlines to a single newline."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/data/`throttle.ts`/","attributes":{"range":[0,0,22,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/data/`throttle.ts`/","content":"export function throttle<T extends (...args: any[]) => any>(\n  func: T,\n  limit: number,\n): T {\n  let lastFunc: ReturnType<typeof setTimeout>;\n  let lastRan: number;\n\n  return ((...args) => {\n    if (!lastRan) {\n      func(...args);\n      lastRan = Date.now();\n    } else {\n      clearTimeout(lastFunc);\n      lastFunc = setTimeout(() => {\n        if (Date.now() - lastRan >= limit) {\n          func(...args);\n          lastRan = Date.now();\n        }\n      }, limit - (Date.now() - lastRan));\n    }\n  }) as T;\n}\n","file":"/utils/data/throttle.ts","language":"typescript","fileHash":"3021542ec640461db29b8bfae9a1484c55d6f97214fea4e4cad56975ae9f24e0","hash":"3021542ec640461db29b8bfae9a1484c55d6f97214fea4e4cad56975ae9f24e0","processedContent":"export function throttle<T extends (...args: any[]) => any>(\n  \"\"\"This code defines a function called `throttle` that takes another function as an argument and returns a new function that limits the number of times the original function can be called within a certain time frame.\"\"\"\n  pass\n","documentation":"This code defines a function called `throttle` that limits the number of times another function can be called within a certain time frame, making it useful for preventing overlapping requests or optimizing performance."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/data/`throttle.ts`/throttle().","attributes":{"range":[0,0,21,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/data/`throttle.ts`/throttle().","content":"export function throttle<T extends (...args: any[]) => any>(\n  func: T,\n  limit: number,\n): T {\n  let lastFunc: ReturnType<typeof setTimeout>;\n  let lastRan: number;\n\n  return ((...args) => {\n    if (!lastRan) {\n      func(...args);\n      lastRan = Date.now();\n    } else {\n      clearTimeout(lastFunc);\n      lastFunc = setTimeout(() => {\n        if (Date.now() - lastRan >= limit) {\n          func(...args);\n          lastRan = Date.now();\n        }\n      }, limit - (Date.now() - lastRan));\n    }\n  }) as T;\n}","file":"/utils/data/throttle.ts","language":"typescript","fileHash":"3021542ec640461db29b8bfae9a1484c55d6f97214fea4e4cad56975ae9f24e0","hash":"ea10d50f6f5e8cefa0831d9d865bd9845cfb26072035c4859c1718fbd40c1ea5","processedContent":"export function throttle<T extends (...args: any[]) => any>(\n  func: T, #undefined\n  limit: number,\n): T { #undefined\n  let lastFunc: ReturnType<typeof setTimeout>;\n  \"\"\"\n  scip-typescript npm @types/node 20.9.3 `ts4.8`/`timers.d.ts`/`\"timers\"`/global/setTimeout().: undefined\n  scip-typescript npm @types/node 20.9.3 `ts4.8`/`timers.d.ts`/`\"timers\"`/global/setTimeout/: undefined\n  \"\"\"\n  let lastRan: number;\n\n  return ((...args) => {\n    if (!lastRan) {\n      func(...args);\n      lastRan = Date.now();\n    } else {\n      clearTimeout(lastFunc); #undefined\n      lastFunc = setTimeout(() => {\n      \"\"\"\n      scip-typescript npm @types/node 20.9.3 `ts4.8`/`timers.d.ts`/`\"timers\"`/global/setTimeout().: undefined\n      scip-typescript npm @types/node 20.9.3 `ts4.8`/`timers.d.ts`/`\"timers\"`/global/setTimeout/: undefined\n      \"\"\"\n        if (Date.now() - lastRan >= limit) {\n          func(...args);\n          lastRan = Date.now();\n        }\n      }, limit - (Date.now() - lastRan));\n    }\n  }) as T; #undefined\n}","documentation":"This code defines a function called `throttle` that takes another function as an argument and returns a new function that limits the number of times the original function can be called within a certain time frame."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/data/`throttle.ts`/throttle().[T]","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/data/`throttle.ts`/throttle().[T]","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`timers.d.ts`/`\"timers\"`/global/setTimeout().","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`timers.d.ts`/`\"timers\"`/global/setTimeout().","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`timers.d.ts`/`\"timers\"`/global/setTimeout/","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`timers.d.ts`/`\"timers\"`/global/setTimeout/","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`timers.d.ts`/`\"timers\"`/global/clearTimeout().","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`timers.d.ts`/`\"timers\"`/global/clearTimeout().","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`settings.ts`/","attributes":{"range":[0,0,23,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`settings.ts`/","content":"import { Settings } from '@/types/settings';\n\nconst STORAGE_KEY = 'settings';\n\nexport const getSettings = (): Settings => {\n  let settings: Settings = {\n    theme: 'dark',\n  };\n  const settingsJson = localStorage.getItem(STORAGE_KEY);\n  if (settingsJson) {\n    try {\n      let savedSettings = JSON.parse(settingsJson) as Settings;\n      settings = Object.assign(settings, savedSettings);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  return settings;\n};\n\nexport const saveSettings = (settings: Settings) => {\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(settings));\n};\n","file":"/utils/app/settings.ts","language":"typescript","fileHash":"98f5076dec8743d1e4c18d3997375904eea33d7bd34ff5e09354ce743e940bb4","hash":"98f5076dec8743d1e4c18d3997375904eea33d7bd34ff5e09354ce743e940bb4","processedContent":"import { Settings } from '@/types/settings';\n\nconst STORAGE_KEY = 'settings';\n\nexport const getSettings = (): Settings => {\n  \"\"\"This code is a function that retrieves settings from local storage and merges them with the default settings. It uses JSON parsing to convert the saved settings from a string to an object, and then assigns the merged settings to the `settings` variable.\"\"\"\n  pass\n\nexport const saveSettings = (settings: Settings) => {\n  \"\"\"This code sets a local storage item with the key \"STORAGE_KEY\" and the value of a JSON-stringified version of the \"settings\" object.\"\"\"\n  pass\n","documentation":"The code retrieves and saves settings to local storage, using JSON parsing to convert between string and object representations."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`settings.ts`/getSettings.","attributes":{"range":[4,27,18,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`settings.ts`/getSettings.","content":"(): Settings => {\n  let settings: Settings = {\n    theme: 'dark',\n  };\n  const settingsJson = localStorage.getItem(STORAGE_KEY);\n  if (settingsJson) {\n    try {\n      let savedSettings = JSON.parse(settingsJson) as Settings;\n      settings = Object.assign(settings, savedSettings);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  return settings;\n}","file":"/utils/app/settings.ts","language":"typescript","fileHash":"98f5076dec8743d1e4c18d3997375904eea33d7bd34ff5e09354ce743e940bb4","hash":"8a4716322a2d464f4054e5a8bc0508898ea320a6f0e78998c397f77a316d80b9","processedContent":"(): Settings => {\n  let settings: Settings = {\n    theme: 'dark',\n  };\n  const settingsJson = localStorage.getItem(STORAGE_KEY); #undefined\n  if (settingsJson) {\n    try {\n      let savedSettings = JSON.parse(settingsJson) as Settings;\n      settings = Object.assign(settings, savedSettings);\n    } catch (e) {\n      console.error(e);\n      \"\"\"\n      scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.: undefined\n      scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/: undefined\n      scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.: undefined\n      scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#error().: undefined\n      \"\"\"\n    }\n  }\n  return settings;\n}","documentation":"This code is a function that retrieves settings from local storage and merges them with the default settings. It uses JSON parsing to convert the saved settings from a string to an object, and then assigns the merged settings to the `settings` variable."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`settings.ts`/saveSettings.","attributes":{"range":[20,28,22,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`settings.ts`/saveSettings.","content":"(settings: Settings) => {\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(settings));\n}","file":"/utils/app/settings.ts","language":"typescript","fileHash":"98f5076dec8743d1e4c18d3997375904eea33d7bd34ff5e09354ce743e940bb4","hash":"655f1c125324bb3685550d8ee4b11d42c595b5f0b5460dffbd35fe1185586094","processedContent":"(settings: Settings) => {\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(settings)); #undefined\n}","documentation":"This code sets a local storage item with the key \"STORAGE_KEY\" and the value of a JSON-stringified version of the \"settings\" object."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`settings.ts`/STORAGE_KEY.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`settings.ts`/STORAGE_KEY.","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#error().","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#error().","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`prompts.ts`/","attributes":{"range":[0,0,22,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`prompts.ts`/","content":"import { Prompt } from '@/types/prompt';\n\nexport const updatePrompt = (updatedPrompt: Prompt, allPrompts: Prompt[]) => {\n  const updatedPrompts = allPrompts.map((c) => {\n    if (c.id === updatedPrompt.id) {\n      return updatedPrompt;\n    }\n\n    return c;\n  });\n\n  savePrompts(updatedPrompts);\n\n  return {\n    single: updatedPrompt,\n    all: updatedPrompts,\n  };\n};\n\nexport const savePrompts = (prompts: Prompt[]) => {\n  localStorage.setItem('prompts', JSON.stringify(prompts));\n};\n","file":"/utils/app/prompts.ts","language":"typescript","fileHash":"6941e11cf19898d569914f4188f492268710089642d4d62f0e6e67a821c64833","hash":"6941e11cf19898d569914f4188f492268710089642d4d62f0e6e67a821c64833","processedContent":"import { Prompt } from '@/types/prompt';\n\nexport const updatePrompt = (updatedPrompt: Prompt, allPrompts: Prompt[]) => {\n  \"\"\"This code updates a local storage item with the name \"prompts\" and the value of a JSON-stringified array of prompts.\"\"\"\n  pass\n\nexport const savePrompts = (prompts: Prompt[]) => {\n  \"\"\"This code sets a local storage item with the name \"prompts\" and the value of a JSON-stringified array of prompts.\"\"\"\n  pass\n","documentation":"The code updates a local storage item with the name \"prompts\" and the value of a JSON-stringified array of prompts."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`prompts.ts`/updatePrompt.","attributes":{"range":[2,28,17,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`prompts.ts`/updatePrompt.","content":"(updatedPrompt: Prompt, allPrompts: Prompt[]) => {\n  const updatedPrompts = allPrompts.map((c) => {\n    if (c.id === updatedPrompt.id) {\n      return updatedPrompt;\n    }\n\n    return c;\n  });\n\n  savePrompts(updatedPrompts);\n\n  return {\n    single: updatedPrompt,\n    all: updatedPrompts,\n  };\n}","file":"/utils/app/prompts.ts","language":"typescript","fileHash":"6941e11cf19898d569914f4188f492268710089642d4d62f0e6e67a821c64833","hash":"64601feba896ffe2bf8fcdc46a4a405b42e8cd59d0efc59b1da41fe016a85a8f","processedContent":"(updatedPrompt: Prompt, allPrompts: Prompt[]) => {\n  const updatedPrompts = allPrompts.map((c) => {\n    if (c.id === updatedPrompt.id) {\n      return updatedPrompt;\n    }\n\n    return c;\n  });\n\n  savePrompts(updatedPrompts); #This code sets a local storage item with the name \"prompts\" and the value of a JSON-stringified array of prompts.\n\n  return {\n    single: updatedPrompt,\n    all: updatedPrompts,\n  };\n}","documentation":"This code updates a local storage item with the name \"prompts\" and the value of a JSON-stringified array of prompts."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`prompts.ts`/savePrompts.","attributes":{"range":[19,27,21,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`prompts.ts`/savePrompts.","content":"(prompts: Prompt[]) => {\n  localStorage.setItem('prompts', JSON.stringify(prompts));\n}","file":"/utils/app/prompts.ts","language":"typescript","fileHash":"6941e11cf19898d569914f4188f492268710089642d4d62f0e6e67a821c64833","hash":"4a524730319b0a03ef32b07b9e0888d45422f838632e65573518100b6d46fc9c","processedContent":"(prompts: Prompt[]) => {\n  localStorage.setItem('prompts', JSON.stringify(prompts));\n}","documentation":"This code sets a local storage item with the name \"prompts\" and the value of a JSON-stringified array of prompts."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`clean.ts`/","attributes":{"range":[0,0,99,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`clean.ts`/","content":"import { Conversation } from '@/types/chat';\nimport { OpenAIModelID, OpenAIModels } from '@/types/openai';\n\nimport { DEFAULT_SYSTEM_PROMPT, DEFAULT_TEMPERATURE } from './const';\n\nexport const cleanSelectedConversation = (conversation: Conversation) => {\n  // added model for each conversation (3/20/23)\n  // added system prompt for each conversation (3/21/23)\n  // added folders (3/23/23)\n  // added prompts (3/26/23)\n  // added messages (4/16/23)\n\n  let updatedConversation = conversation;\n\n  // check for model on each conversation\n  if (!updatedConversation.model) {\n    updatedConversation = {\n      ...updatedConversation,\n      model: updatedConversation.model || OpenAIModels[OpenAIModelID.GPT_3_5],\n    };\n  }\n\n  // check for system prompt on each conversation\n  if (!updatedConversation.prompt) {\n    updatedConversation = {\n      ...updatedConversation,\n      prompt: updatedConversation.prompt || DEFAULT_SYSTEM_PROMPT,\n    };\n  }\n\n  if (!updatedConversation.temperature) {\n    updatedConversation = {\n      ...updatedConversation,\n      temperature: updatedConversation.temperature || DEFAULT_TEMPERATURE,\n    };\n  }\n\n  if (!updatedConversation.folderId) {\n    updatedConversation = {\n      ...updatedConversation,\n      folderId: updatedConversation.folderId || null,\n    };\n  }\n\n  if (!updatedConversation.messages) {\n    updatedConversation = {\n      ...updatedConversation,\n      messages: updatedConversation.messages || [],\n    };\n  }\n\n  return updatedConversation;\n};\n\nexport const cleanConversationHistory = (history: any[]): Conversation[] => {\n  // added model for each conversation (3/20/23)\n  // added system prompt for each conversation (3/21/23)\n  // added folders (3/23/23)\n  // added prompts (3/26/23)\n  // added messages (4/16/23)\n\n  if (!Array.isArray(history)) {\n    console.warn('history is not an array. Returning an empty array.');\n    return [];\n  }\n\n  return history.reduce((acc: any[], conversation) => {\n    try {\n      if (!conversation.model) {\n        conversation.model = OpenAIModels[OpenAIModelID.GPT_3_5];\n      }\n\n      if (!conversation.prompt) {\n        conversation.prompt = DEFAULT_SYSTEM_PROMPT;\n      }\n\n      if (!conversation.temperature) {\n        conversation.temperature = DEFAULT_TEMPERATURE;\n      }\n\n      if (!conversation.folderId) {\n        conversation.folderId = null;\n      }\n\n      if (!conversation.messages) {\n        conversation.messages = [];\n      }\n\n      acc.push(conversation);\n      return acc;\n    } catch (error) {\n      console.warn(\n        `error while cleaning conversations' history. Removing culprit`,\n        error,\n      );\n    }\n    return acc;\n  }, []);\n};\n","file":"/utils/app/clean.ts","language":"typescript","fileHash":"5b363a3228ead4c9d6fd6d7119f07ff7c42f7bf96630e4f0bd19bf77707cc8c5","hash":"5b363a3228ead4c9d6fd6d7119f07ff7c42f7bf96630e4f0bd19bf77707cc8c5","processedContent":"import { Conversation } from '@/types/chat';\nimport { OpenAIModelID, OpenAIModels } from '@/types/openai';\n\nimport { DEFAULT_SYSTEM_PROMPT, DEFAULT_TEMPERATURE } from './const';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/DEFAULT_SYSTEM_PROMPT.: undefined\nscip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/DEFAULT_TEMPERATURE.: undefined\nscip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/: The code defines several constants used in the OpenAI API, including the default system prompt, API host, temperature, API type, version, organization, and deployment ID.\n\"\"\"\n\nexport const cleanSelectedConversation = (conversation: Conversation) => {\n  \"\"\"The code is a function that takes a conversation object as an argument and returns an updated version of the object with default values for certain properties if they are not already set.\"\"\"\n  pass\n\nexport const cleanConversationHistory = (history: any[]): Conversation[] => {\n  \"\"\"The code is a function that takes an array of conversations as input and returns a new array with the same conversations, but with some default values added if they are missing. It also logs a warning message to the console if there are any errors while cleaning the conversations' history.\"\"\"\n  pass\n","documentation":"The code defines constants for the OpenAI API and two functions to clean conversations, ensuring default values are set for certain properties."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`clean.ts`/cleanSelectedConversation.","attributes":{"range":[5,41,52,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`clean.ts`/cleanSelectedConversation.","content":"(conversation: Conversation) => {\n  // added model for each conversation (3/20/23)\n  // added system prompt for each conversation (3/21/23)\n  // added folders (3/23/23)\n  // added prompts (3/26/23)\n  // added messages (4/16/23)\n\n  let updatedConversation = conversation;\n\n  // check for model on each conversation\n  if (!updatedConversation.model) {\n    updatedConversation = {\n      ...updatedConversation,\n      model: updatedConversation.model || OpenAIModels[OpenAIModelID.GPT_3_5],\n    };\n  }\n\n  // check for system prompt on each conversation\n  if (!updatedConversation.prompt) {\n    updatedConversation = {\n      ...updatedConversation,\n      prompt: updatedConversation.prompt || DEFAULT_SYSTEM_PROMPT,\n    };\n  }\n\n  if (!updatedConversation.temperature) {\n    updatedConversation = {\n      ...updatedConversation,\n      temperature: updatedConversation.temperature || DEFAULT_TEMPERATURE,\n    };\n  }\n\n  if (!updatedConversation.folderId) {\n    updatedConversation = {\n      ...updatedConversation,\n      folderId: updatedConversation.folderId || null,\n    };\n  }\n\n  if (!updatedConversation.messages) {\n    updatedConversation = {\n      ...updatedConversation,\n      messages: updatedConversation.messages || [],\n    };\n  }\n\n  return updatedConversation;\n}","file":"/utils/app/clean.ts","language":"typescript","fileHash":"5b363a3228ead4c9d6fd6d7119f07ff7c42f7bf96630e4f0bd19bf77707cc8c5","hash":"5ff7dfca6b5ddf41b3f0b4765067ac8792540a4eee6e868f769adb88daeef7a4","processedContent":"(conversation: Conversation) => {\n  // added model for each conversation (3/20/23)\n  // added system prompt for each conversation (3/21/23)\n  // added folders (3/23/23)\n  // added prompts (3/26/23)\n  // added messages (4/16/23)\n\n  let updatedConversation = conversation;\n\n  // check for model on each conversation\n  if (!updatedConversation.model) {\n    updatedConversation = {\n      ...updatedConversation,\n      model: updatedConversation.model || OpenAIModels[OpenAIModelID.GPT_3_5],\n    };\n  }\n\n  // check for system prompt on each conversation\n  if (!updatedConversation.prompt) {\n    updatedConversation = {\n      ...updatedConversation,\n      prompt: updatedConversation.prompt || DEFAULT_SYSTEM_PROMPT, #undefined\n    };\n  }\n\n  if (!updatedConversation.temperature) {\n    updatedConversation = {\n      ...updatedConversation,\n      temperature: updatedConversation.temperature || DEFAULT_TEMPERATURE, #undefined\n    };\n  }\n\n  if (!updatedConversation.folderId) {\n    updatedConversation = {\n      ...updatedConversation,\n      folderId: updatedConversation.folderId || null,\n    };\n  }\n\n  if (!updatedConversation.messages) {\n    updatedConversation = {\n      ...updatedConversation,\n      messages: updatedConversation.messages || [],\n    };\n  }\n\n  return updatedConversation;\n}","documentation":"The code is a function that takes a conversation object as an argument and returns an updated version of the object with default values for certain properties if they are not already set."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`clean.ts`/cleanConversationHistory.","attributes":{"range":[54,40,98,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`clean.ts`/cleanConversationHistory.","content":"(history: any[]): Conversation[] => {\n  // added model for each conversation (3/20/23)\n  // added system prompt for each conversation (3/21/23)\n  // added folders (3/23/23)\n  // added prompts (3/26/23)\n  // added messages (4/16/23)\n\n  if (!Array.isArray(history)) {\n    console.warn('history is not an array. Returning an empty array.');\n    return [];\n  }\n\n  return history.reduce((acc: any[], conversation) => {\n    try {\n      if (!conversation.model) {\n        conversation.model = OpenAIModels[OpenAIModelID.GPT_3_5];\n      }\n\n      if (!conversation.prompt) {\n        conversation.prompt = DEFAULT_SYSTEM_PROMPT;\n      }\n\n      if (!conversation.temperature) {\n        conversation.temperature = DEFAULT_TEMPERATURE;\n      }\n\n      if (!conversation.folderId) {\n        conversation.folderId = null;\n      }\n\n      if (!conversation.messages) {\n        conversation.messages = [];\n      }\n\n      acc.push(conversation);\n      return acc;\n    } catch (error) {\n      console.warn(\n        `error while cleaning conversations' history. Removing culprit`,\n        error,\n      );\n    }\n    return acc;\n  }, []);\n}","file":"/utils/app/clean.ts","language":"typescript","fileHash":"5b363a3228ead4c9d6fd6d7119f07ff7c42f7bf96630e4f0bd19bf77707cc8c5","hash":"38aed2002142d81902c56228dbd527c79192300326e36a48f683228fc5b9db1e","processedContent":"(history: any[]): Conversation[] => {\n  // added model for each conversation (3/20/23)\n  // added system prompt for each conversation (3/21/23)\n  // added folders (3/23/23)\n  // added prompts (3/26/23)\n  // added messages (4/16/23)\n\n  if (!Array.isArray(history)) {\n    console.warn('history is not an array. Returning an empty array.');\n    \"\"\"\n    scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.: undefined\n    scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/: undefined\n    scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.: undefined\n    scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#warn().: undefined\n    \"\"\"\n    return [];\n  }\n\n  return history.reduce((acc: any[], conversation) => {\n    try {\n      if (!conversation.model) {\n        conversation.model = OpenAIModels[OpenAIModelID.GPT_3_5];\n      }\n\n      if (!conversation.prompt) {\n        conversation.prompt = DEFAULT_SYSTEM_PROMPT; #undefined\n      }\n\n      if (!conversation.temperature) {\n        conversation.temperature = DEFAULT_TEMPERATURE; #undefined\n      }\n\n      if (!conversation.folderId) {\n        conversation.folderId = null;\n      }\n\n      if (!conversation.messages) {\n        conversation.messages = [];\n      }\n\n      acc.push(conversation);\n      return acc;\n    } catch (error) {\n      console.warn(\n      \"\"\"\n      scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.: undefined\n      scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/: undefined\n      scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.: undefined\n      scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#warn().: undefined\n      \"\"\"\n        `error while cleaning conversations' history. Removing culprit`,\n        error,\n      );\n    }\n    return acc;\n  }, []);\n}","documentation":"The code is a function that takes an array of conversations as input and returns a new array with the same conversations, but with some default values added if they are missing. It also logs a warning message to the console if there are any errors while cleaning the conversations' history."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/DEFAULT_SYSTEM_PROMPT.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/DEFAULT_SYSTEM_PROMPT.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/DEFAULT_TEMPERATURE.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/DEFAULT_TEMPERATURE.","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#warn().","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#warn().","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/","attributes":{"range":[0,0,164,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/","content":"import { Conversation } from '@/types/chat';\nimport {\n  ExportFormatV1,\n  ExportFormatV2,\n  ExportFormatV3,\n  ExportFormatV4,\n  LatestExportFormat,\n  SupportedExportFormats,\n} from '@/types/export';\nimport { FolderInterface } from '@/types/folder';\nimport { Prompt } from '@/types/prompt';\n\nimport { cleanConversationHistory } from './clean';\n\nexport function isExportFormatV1(obj: any): obj is ExportFormatV1 {\n  return Array.isArray(obj);\n}\n\nexport function isExportFormatV2(obj: any): obj is ExportFormatV2 {\n  return !('version' in obj) && 'folders' in obj && 'history' in obj;\n}\n\nexport function isExportFormatV3(obj: any): obj is ExportFormatV3 {\n  return obj.version === 3;\n}\n\nexport function isExportFormatV4(obj: any): obj is ExportFormatV4 {\n  return obj.version === 4;\n}\n\nexport const isLatestExportFormat = isExportFormatV4;\n\nexport function cleanData(data: SupportedExportFormats): LatestExportFormat {\n  if (isExportFormatV1(data)) {\n    return {\n      version: 4,\n      history: cleanConversationHistory(data),\n      folders: [],\n      prompts: [],\n    };\n  }\n\n  if (isExportFormatV2(data)) {\n    return {\n      version: 4,\n      history: cleanConversationHistory(data.history || []),\n      folders: (data.folders || []).map((chatFolder) => ({\n        id: chatFolder.id.toString(),\n        name: chatFolder.name,\n        type: 'chat',\n      })),\n      prompts: [],\n    };\n  }\n\n  if (isExportFormatV3(data)) {\n    return { ...data, version: 4, prompts: [] };\n  }\n\n  if (isExportFormatV4(data)) {\n    return data;\n  }\n\n  throw new Error('Unsupported data format');\n}\n\nfunction currentDate() {\n  const date = new Date();\n  const month = date.getMonth() + 1;\n  const day = date.getDate();\n  return `${month}-${day}`;\n}\n\nexport const exportData = () => {\n  let history = localStorage.getItem('conversationHistory');\n  let folders = localStorage.getItem('folders');\n  let prompts = localStorage.getItem('prompts');\n\n  if (history) {\n    history = JSON.parse(history);\n  }\n\n  if (folders) {\n    folders = JSON.parse(folders);\n  }\n\n  if (prompts) {\n    prompts = JSON.parse(prompts);\n  }\n\n  const data = {\n    version: 4,\n    history: history || [],\n    folders: folders || [],\n    prompts: prompts || [],\n  } as LatestExportFormat;\n\n  const blob = new Blob([JSON.stringify(data, null, 2)], {\n    type: 'application/json',\n  });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.download = `chatbot_ui_history_${currentDate()}.json`;\n  link.href = url;\n  link.style.display = 'none';\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n};\n\nexport const importData = (\n  data: SupportedExportFormats,\n): LatestExportFormat => {\n  const { history, folders, prompts } = cleanData(data);\n\n  const oldConversations = localStorage.getItem('conversationHistory');\n  const oldConversationsParsed = oldConversations\n    ? JSON.parse(oldConversations)\n    : [];\n\n  const newHistory: Conversation[] = [\n    ...oldConversationsParsed,\n    ...history,\n  ].filter(\n    (conversation, index, self) =>\n      index === self.findIndex((c) => c.id === conversation.id),\n  );\n  localStorage.setItem('conversationHistory', JSON.stringify(newHistory));\n  if (newHistory.length > 0) {\n    localStorage.setItem(\n      'selectedConversation',\n      JSON.stringify(newHistory[newHistory.length - 1]),\n    );\n  } else {\n    localStorage.removeItem('selectedConversation');\n  }\n\n  const oldFolders = localStorage.getItem('folders');\n  const oldFoldersParsed = oldFolders ? JSON.parse(oldFolders) : [];\n  const newFolders: FolderInterface[] = [\n    ...oldFoldersParsed,\n    ...folders,\n  ].filter(\n    (folder, index, self) =>\n      index === self.findIndex((f) => f.id === folder.id),\n  );\n  localStorage.setItem('folders', JSON.stringify(newFolders));\n\n  const oldPrompts = localStorage.getItem('prompts');\n  const oldPromptsParsed = oldPrompts ? JSON.parse(oldPrompts) : [];\n  const newPrompts: Prompt[] = [...oldPromptsParsed, ...prompts].filter(\n    (prompt, index, self) =>\n      index === self.findIndex((p) => p.id === prompt.id),\n  );\n  localStorage.setItem('prompts', JSON.stringify(newPrompts));\n\n  return {\n    version: 4,\n    history: newHistory,\n    folders: newFolders,\n    prompts: newPrompts,\n  };\n};\n","file":"/utils/app/importExport.ts","language":"typescript","fileHash":"bab36112b1b1d4a60cc2dec8e61005bf68bf2f70fbb7b4eca1921df6b8be93c4","hash":"bab36112b1b1d4a60cc2dec8e61005bf68bf2f70fbb7b4eca1921df6b8be93c4","processedContent":"import { Conversation } from '@/types/chat';\nimport {\n  ExportFormatV1,\n  ExportFormatV2,\n  ExportFormatV3,\n  ExportFormatV4,\n  LatestExportFormat,\n  SupportedExportFormats,\n} from '@/types/export';\nimport { FolderInterface } from '@/types/folder';\nimport { Prompt } from '@/types/prompt';\n\nimport { cleanConversationHistory } from './clean';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`clean.ts`/cleanConversationHistory.: The code is a function that takes an array of conversations as input and returns a new array with the same conversations, but with some default values added if they are missing. It also logs a warning message to the console if there are any errors while cleaning the conversations' history.\nscip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`clean.ts`/: The code defines constants for the OpenAI API and two functions to clean conversations, ensuring default values are set for certain properties.\n\"\"\"\n\nexport function isExportFormatV1(obj: any): obj is ExportFormatV1 {\n  \"\"\"This code checks if an object is an array.\"\"\"\n  pass\n\nexport function isExportFormatV2(obj: any): obj is ExportFormatV2 {\n  \"\"\"This code defines a function that checks if an object is of type ExportFormatV2, which is a specific data structure used in our application. The function returns true if the object has the required properties and false otherwise.\"\"\"\n  pass\n\nexport function isExportFormatV3(obj: any): obj is ExportFormatV3 {\n  \"\"\"This code defines a function called `isExportFormatV3` that checks if an object has a specific version number (in this case, 3) and returns a boolean value indicating whether the object is of type `ExportFormatV3`.\"\"\"\n  pass\n\nexport function isExportFormatV4(obj: any): obj is ExportFormatV4 {\n  \"\"\"This code defines a function called `isExportFormatV4` that takes an object as an argument and returns a boolean value indicating whether the object is of type `ExportFormatV4`.\"\"\"\n  pass\n\nexport const isLatestExportFormat = isExportFormatV4; #This code defines a function called `isExportFormatV4` that takes an object as an argument and returns a boolean value indicating whether the object is of type `ExportFormatV4`.\n\nexport function cleanData(data: SupportedExportFormats): LatestExportFormat {\n  \"\"\"The code defines a function called `cleanData` that takes an object as input and returns a new object with the same properties, but with some default values added if they are missing. The function also logs a warning message to the console if there are any errors while cleaning the conversations' history.\"\"\"\n  pass\n\nfunction currentDate() {\n  \"\"\"This code defines a function called `currentDate()` that returns the current date in the format of `MM-DD`.\"\"\"\n  pass\n\nexport const exportData = () => {\n  \"\"\"This code defines a function that exports the chatbot's history, folders, and prompts to a JSON file for backup purposes. It uses the `localStorage` API to retrieve the data and the `Blob` constructor to create a blob object that can be downloaded as a file.\"\"\"\n  pass\n\nexport const importData = (\n  \"\"\"This code defines a function that takes an object as input and returns a new object with the same properties, but with some default values added if they are missing. The function also logs a warning message to the console if there are any errors while cleaning the conversations' history.\"\"\"\n  pass\n","documentation":"The code defines a series of functions and constants related to data cleaning, exporting, and importing for an AI chatbot."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/isExportFormatV1().","attributes":{"range":[14,0,16,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/isExportFormatV1().","content":"export function isExportFormatV1(obj: any): obj is ExportFormatV1 {\n  return Array.isArray(obj);\n}","file":"/utils/app/importExport.ts","language":"typescript","fileHash":"bab36112b1b1d4a60cc2dec8e61005bf68bf2f70fbb7b4eca1921df6b8be93c4","hash":"41455330c975f59f74ede716b2da3e29f6aee79dc5c4a60e9d000032c17c0982","processedContent":"export function isExportFormatV1(obj: any): obj is ExportFormatV1 {\n  return Array.isArray(obj);\n}","documentation":"This code checks if an object is an array."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/isExportFormatV2().","attributes":{"range":[18,0,20,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/isExportFormatV2().","content":"export function isExportFormatV2(obj: any): obj is ExportFormatV2 {\n  return !('version' in obj) && 'folders' in obj && 'history' in obj;\n}","file":"/utils/app/importExport.ts","language":"typescript","fileHash":"bab36112b1b1d4a60cc2dec8e61005bf68bf2f70fbb7b4eca1921df6b8be93c4","hash":"3e977c7acc1ed107ca460a9ebcc9402f0a943a12225fa3810079427ce27e3f9d","processedContent":"export function isExportFormatV2(obj: any): obj is ExportFormatV2 {\n  return !('version' in obj) && 'folders' in obj && 'history' in obj;\n}","documentation":"This code defines a function that checks if an object is of type ExportFormatV2, which is a specific data structure used in our application. The function returns true if the object has the required properties and false otherwise."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/isExportFormatV3().","attributes":{"range":[22,0,24,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/isExportFormatV3().","content":"export function isExportFormatV3(obj: any): obj is ExportFormatV3 {\n  return obj.version === 3;\n}","file":"/utils/app/importExport.ts","language":"typescript","fileHash":"bab36112b1b1d4a60cc2dec8e61005bf68bf2f70fbb7b4eca1921df6b8be93c4","hash":"074c400e83eb1185bb46d7ecf810eee35662904ed1a75eeb49aad22d74449a1c","processedContent":"export function isExportFormatV3(obj: any): obj is ExportFormatV3 {\n  return obj.version === 3;\n}","documentation":"This code defines a function called `isExportFormatV3` that checks if an object has a specific version number (in this case, 3) and returns a boolean value indicating whether the object is of type `ExportFormatV3`."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/isExportFormatV4().","attributes":{"range":[26,0,28,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/isExportFormatV4().","content":"export function isExportFormatV4(obj: any): obj is ExportFormatV4 {\n  return obj.version === 4;\n}","file":"/utils/app/importExport.ts","language":"typescript","fileHash":"bab36112b1b1d4a60cc2dec8e61005bf68bf2f70fbb7b4eca1921df6b8be93c4","hash":"ac26c9f123244834fe0c4a2328426793376d9fd714ec783bc63e5758b90d6ae7","processedContent":"export function isExportFormatV4(obj: any): obj is ExportFormatV4 {\n  return obj.version === 4;\n}","documentation":"This code defines a function called `isExportFormatV4` that takes an object as an argument and returns a boolean value indicating whether the object is of type `ExportFormatV4`."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/cleanData().","attributes":{"range":[32,0,64,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/cleanData().","content":"export function cleanData(data: SupportedExportFormats): LatestExportFormat {\n  if (isExportFormatV1(data)) {\n    return {\n      version: 4,\n      history: cleanConversationHistory(data),\n      folders: [],\n      prompts: [],\n    };\n  }\n\n  if (isExportFormatV2(data)) {\n    return {\n      version: 4,\n      history: cleanConversationHistory(data.history || []),\n      folders: (data.folders || []).map((chatFolder) => ({\n        id: chatFolder.id.toString(),\n        name: chatFolder.name,\n        type: 'chat',\n      })),\n      prompts: [],\n    };\n  }\n\n  if (isExportFormatV3(data)) {\n    return { ...data, version: 4, prompts: [] };\n  }\n\n  if (isExportFormatV4(data)) {\n    return data;\n  }\n\n  throw new Error('Unsupported data format');\n}","file":"/utils/app/importExport.ts","language":"typescript","fileHash":"bab36112b1b1d4a60cc2dec8e61005bf68bf2f70fbb7b4eca1921df6b8be93c4","hash":"d479c96a2cc0b89feca3f918a9848512992cded5d64a9036e34004644b0a958a","processedContent":"export function cleanData(data: SupportedExportFormats): LatestExportFormat {\n  if (isExportFormatV1(data)) { #This code checks if an object is an array.\n    return {\n      version: 4,\n      history: cleanConversationHistory(data), #The code is a function that takes an array of conversations as input and returns a new array with the same conversations, but with some default values added if they are missing. It also logs a warning message to the console if there are any errors while cleaning the conversations' history.\n      folders: [],\n      prompts: [],\n    };\n  }\n\n  if (isExportFormatV2(data)) { #This code defines a function that checks if an object is of type ExportFormatV2, which is a specific data structure used in our application. The function returns true if the object has the required properties and false otherwise.\n    return {\n      version: 4,\n      history: cleanConversationHistory(data.history || []), #The code is a function that takes an array of conversations as input and returns a new array with the same conversations, but with some default values added if they are missing. It also logs a warning message to the console if there are any errors while cleaning the conversations' history.\n      folders: (data.folders || []).map((chatFolder) => ({\n        id: chatFolder.id.toString(),\n        name: chatFolder.name,\n        type: 'chat',\n      })),\n      prompts: [],\n    };\n  }\n\n  if (isExportFormatV3(data)) { #This code defines a function called `isExportFormatV3` that checks if an object has a specific version number (in this case, 3) and returns a boolean value indicating whether the object is of type `ExportFormatV3`.\n    return { ...data, version: 4, prompts: [] };\n  }\n\n  if (isExportFormatV4(data)) { #This code defines a function called `isExportFormatV4` that takes an object as an argument and returns a boolean value indicating whether the object is of type `ExportFormatV4`.\n    return data;\n  }\n\n  throw new Error('Unsupported data format');\n}","documentation":"The code defines a function called `cleanData` that takes an object as input and returns a new object with the same properties, but with some default values added if they are missing. The function also logs a warning message to the console if there are any errors while cleaning the conversations' history."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/currentDate().","attributes":{"range":[66,0,71,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/currentDate().","content":"function currentDate() {\n  const date = new Date();\n  const month = date.getMonth() + 1;\n  const day = date.getDate();\n  return `${month}-${day}`;\n}","file":"/utils/app/importExport.ts","language":"typescript","fileHash":"bab36112b1b1d4a60cc2dec8e61005bf68bf2f70fbb7b4eca1921df6b8be93c4","hash":"7fd9a548315919cc2e0b2d03ef2a1cdbfce298bdf6cd693da963cc1a50a0e789","processedContent":"function currentDate() {\n  const date = new Date();\n  const month = date.getMonth() + 1;\n  const day = date.getDate();\n  return `${month}-${day}`;\n}","documentation":"This code defines a function called `currentDate()` that returns the current date in the format of `MM-DD`."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/exportData.","attributes":{"range":[73,26,109,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/exportData.","content":"() => {\n  let history = localStorage.getItem('conversationHistory');\n  let folders = localStorage.getItem('folders');\n  let prompts = localStorage.getItem('prompts');\n\n  if (history) {\n    history = JSON.parse(history);\n  }\n\n  if (folders) {\n    folders = JSON.parse(folders);\n  }\n\n  if (prompts) {\n    prompts = JSON.parse(prompts);\n  }\n\n  const data = {\n    version: 4,\n    history: history || [],\n    folders: folders || [],\n    prompts: prompts || [],\n  } as LatestExportFormat;\n\n  const blob = new Blob([JSON.stringify(data, null, 2)], {\n    type: 'application/json',\n  });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.download = `chatbot_ui_history_${currentDate()}.json`;\n  link.href = url;\n  link.style.display = 'none';\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n}","file":"/utils/app/importExport.ts","language":"typescript","fileHash":"bab36112b1b1d4a60cc2dec8e61005bf68bf2f70fbb7b4eca1921df6b8be93c4","hash":"b111c502d4704eab56591f11558b276079151b721a0e8947c6b73d48b9cfcc80","processedContent":"() => {\n  let history = localStorage.getItem('conversationHistory');\n  let folders = localStorage.getItem('folders');\n  let prompts = localStorage.getItem('prompts');\n\n  if (history) {\n    history = JSON.parse(history);\n  }\n\n  if (folders) {\n    folders = JSON.parse(folders);\n  }\n\n  if (prompts) {\n    prompts = JSON.parse(prompts);\n  }\n\n  const data = {\n    version: 4,\n    history: history || [],\n    folders: folders || [],\n    prompts: prompts || [],\n  } as LatestExportFormat;\n\n  const blob = new Blob([JSON.stringify(data, null, 2)], {\n  \"\"\"\n  scip-typescript npm @types/node 20.9.3 `ts4.8`/`buffer.d.ts`/`\"buffer\"`/global/Blob#: undefined\n  scip-typescript npm @types/node 20.9.3 `ts4.8`/`buffer.d.ts`/`\"buffer\"`/global/Blob.: undefined\n  \"\"\"\n    type: 'application/json',\n  });\n  const url = URL.createObjectURL(blob);\n  \"\"\"\n  scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/global/URL#: undefined\n  scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/global/URL.: undefined\n  scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/URL#createObjectURL().: undefined\n  \"\"\"\n  const link = document.createElement('a');\n  link.download = `chatbot_ui_history_${currentDate()}.json`; #This code defines a function called `currentDate()` that returns the current date in the format of `MM-DD`.\n  link.href = url;\n  link.style.display = 'none';\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n  \"\"\"\n  scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/global/URL#: undefined\n  scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/global/URL.: undefined\n  scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/URL#revokeObjectURL().: undefined\n  \"\"\"\n}","documentation":"This code defines a function that exports the chatbot's history, folders, and prompts to a JSON file for backup purposes. It uses the `localStorage` API to retrieve the data and the `Blob` constructor to create a blob object that can be downloaded as a file."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/importData.","attributes":{"range":[111,26,163,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/importData.","content":"(\n  data: SupportedExportFormats,\n): LatestExportFormat => {\n  const { history, folders, prompts } = cleanData(data);\n\n  const oldConversations = localStorage.getItem('conversationHistory');\n  const oldConversationsParsed = oldConversations\n    ? JSON.parse(oldConversations)\n    : [];\n\n  const newHistory: Conversation[] = [\n    ...oldConversationsParsed,\n    ...history,\n  ].filter(\n    (conversation, index, self) =>\n      index === self.findIndex((c) => c.id === conversation.id),\n  );\n  localStorage.setItem('conversationHistory', JSON.stringify(newHistory));\n  if (newHistory.length > 0) {\n    localStorage.setItem(\n      'selectedConversation',\n      JSON.stringify(newHistory[newHistory.length - 1]),\n    );\n  } else {\n    localStorage.removeItem('selectedConversation');\n  }\n\n  const oldFolders = localStorage.getItem('folders');\n  const oldFoldersParsed = oldFolders ? JSON.parse(oldFolders) : [];\n  const newFolders: FolderInterface[] = [\n    ...oldFoldersParsed,\n    ...folders,\n  ].filter(\n    (folder, index, self) =>\n      index === self.findIndex((f) => f.id === folder.id),\n  );\n  localStorage.setItem('folders', JSON.stringify(newFolders));\n\n  const oldPrompts = localStorage.getItem('prompts');\n  const oldPromptsParsed = oldPrompts ? JSON.parse(oldPrompts) : [];\n  const newPrompts: Prompt[] = [...oldPromptsParsed, ...prompts].filter(\n    (prompt, index, self) =>\n      index === self.findIndex((p) => p.id === prompt.id),\n  );\n  localStorage.setItem('prompts', JSON.stringify(newPrompts));\n\n  return {\n    version: 4,\n    history: newHistory,\n    folders: newFolders,\n    prompts: newPrompts,\n  };\n}","file":"/utils/app/importExport.ts","language":"typescript","fileHash":"bab36112b1b1d4a60cc2dec8e61005bf68bf2f70fbb7b4eca1921df6b8be93c4","hash":"d0dd489a926d9998399ef5c21bbc86be08f5653ee98514ea84fd558e2bdffca8","processedContent":"(\n  data: SupportedExportFormats,\n): LatestExportFormat => {\n  const { history, folders, prompts } = cleanData(data); #The code defines a function called `cleanData` that takes an object as input and returns a new object with the same properties, but with some default values added if they are missing. The function also logs a warning message to the console if there are any errors while cleaning the conversations' history.\n\n  const oldConversations = localStorage.getItem('conversationHistory');\n  const oldConversationsParsed = oldConversations\n    ? JSON.parse(oldConversations)\n    : [];\n\n  const newHistory: Conversation[] = [\n    ...oldConversationsParsed,\n    ...history,\n  ].filter(\n    (conversation, index, self) =>\n      index === self.findIndex((c) => c.id === conversation.id),\n  );\n  localStorage.setItem('conversationHistory', JSON.stringify(newHistory));\n  if (newHistory.length > 0) {\n    localStorage.setItem(\n      'selectedConversation',\n      JSON.stringify(newHistory[newHistory.length - 1]),\n    );\n  } else {\n    localStorage.removeItem('selectedConversation');\n  }\n\n  const oldFolders = localStorage.getItem('folders');\n  const oldFoldersParsed = oldFolders ? JSON.parse(oldFolders) : [];\n  const newFolders: FolderInterface[] = [\n    ...oldFoldersParsed,\n    ...folders,\n  ].filter(\n    (folder, index, self) =>\n      index === self.findIndex((f) => f.id === folder.id),\n  );\n  localStorage.setItem('folders', JSON.stringify(newFolders));\n\n  const oldPrompts = localStorage.getItem('prompts');\n  const oldPromptsParsed = oldPrompts ? JSON.parse(oldPrompts) : [];\n  const newPrompts: Prompt[] = [...oldPromptsParsed, ...prompts].filter(\n    (prompt, index, self) =>\n      index === self.findIndex((p) => p.id === prompt.id),\n  );\n  localStorage.setItem('prompts', JSON.stringify(newPrompts));\n\n  return {\n    version: 4,\n    history: newHistory,\n    folders: newFolders,\n    prompts: newPrompts,\n  };\n}","documentation":"This code defines a function that takes an object as input and returns a new object with the same properties, but with some default values added if they are missing. The function also logs a warning message to the console if there are any errors while cleaning the conversations' history."}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`buffer.d.ts`/`\"buffer\"`/global/Blob#","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`buffer.d.ts`/`\"buffer\"`/global/Blob#","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`buffer.d.ts`/`\"buffer\"`/global/Blob.","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`buffer.d.ts`/`\"buffer\"`/global/Blob.","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/global/URL#","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/global/URL#","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/global/URL.","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/global/URL.","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/URL#createObjectURL().","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/URL#createObjectURL().","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/URL#revokeObjectURL().","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/URL#revokeObjectURL().","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`folders.ts`/","attributes":{"range":[0,0,5,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`folders.ts`/","content":"import { FolderInterface } from '@/types/folder';\n\nexport const saveFolders = (folders: FolderInterface[]) => {\n  localStorage.setItem('folders', JSON.stringify(folders));\n};\n","file":"/utils/app/folders.ts","language":"typescript","fileHash":"db7ee28bbad1de97b44a3e8718a596df4f52e01fbb263013a0b43c2e5b1ac387","hash":"db7ee28bbad1de97b44a3e8718a596df4f52e01fbb263013a0b43c2e5b1ac387","processedContent":"import { FolderInterface } from '@/types/folder';\n\nexport const saveFolders = (folders: FolderInterface[]) => {\n  \"\"\"This code sets the value of the localStorage item 'folders' to a JSON string representation of an array of FolderInterface objects.\"\"\"\n  pass\n","documentation":"This code saves an array of FolderInterface objects to the localStorage item 'folders' by converting it to a JSON string representation."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`folders.ts`/saveFolders.","attributes":{"range":[2,27,4,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`folders.ts`/saveFolders.","content":"(folders: FolderInterface[]) => {\n  localStorage.setItem('folders', JSON.stringify(folders));\n}","file":"/utils/app/folders.ts","language":"typescript","fileHash":"db7ee28bbad1de97b44a3e8718a596df4f52e01fbb263013a0b43c2e5b1ac387","hash":"031db89c0d9d837926e1abfc53d8511754962754c31d50c6cb6671a035aa4336","processedContent":"(folders: FolderInterface[]) => {\n  localStorage.setItem('folders', JSON.stringify(folders));\n}","documentation":"This code sets the value of the localStorage item 'folders' to a JSON string representation of an array of FolderInterface objects."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`conversation.ts`/","attributes":{"range":[0,0,30,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`conversation.ts`/","content":"import { Conversation } from '@/types/chat';\n\nexport const updateConversation = (\n  updatedConversation: Conversation,\n  allConversations: Conversation[],\n) => {\n  const updatedConversations = allConversations.map((c) => {\n    if (c.id === updatedConversation.id) {\n      return updatedConversation;\n    }\n\n    return c;\n  });\n\n  saveConversation(updatedConversation);\n  saveConversations(updatedConversations);\n\n  return {\n    single: updatedConversation,\n    all: updatedConversations,\n  };\n};\n\nexport const saveConversation = (conversation: Conversation) => {\n  localStorage.setItem('selectedConversation', JSON.stringify(conversation));\n};\n\nexport const saveConversations = (conversations: Conversation[]) => {\n  localStorage.setItem('conversationHistory', JSON.stringify(conversations));\n};\n","file":"/utils/app/conversation.ts","language":"typescript","fileHash":"5d3c76081aa57f0412b65c2a97be00e23535797f84fd100372c5161c56e6215a","hash":"5d3c76081aa57f0412b65c2a97be00e23535797f84fd100372c5161c56e6215a","processedContent":"import { Conversation } from '@/types/chat';\n\nexport const updateConversation = (\n  \"\"\"This code updates a conversation object and stores it in local storage, as well as an array of all conversations.\"\"\"\n  pass\n\nexport const saveConversation = (conversation: Conversation) => {\n  \"\"\"This code sets a local storage item with the name \"selectedConversation\" and the value of a JSON-stringified version of the conversation object.\"\"\"\n  pass\n\nexport const saveConversations = (conversations: Conversation[]) => {\n  \"\"\"This code stores an array of conversations in the browser's local storage, allowing the user to access and review previous conversations.\"\"\"\n  pass\n","documentation":"The code updates a conversation object and stores it in local storage, as well as an array of all conversations. It also sets a local storage item with the name \"selectedConversation\" and the value of a JSON-stringified version of the conversation object. Additionally, it stores an array of conversations in the browser's local storage, allowing the user to access and review previous conversations."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`conversation.ts`/updateConversation.","attributes":{"range":[2,34,21,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`conversation.ts`/updateConversation.","content":"(\n  updatedConversation: Conversation,\n  allConversations: Conversation[],\n) => {\n  const updatedConversations = allConversations.map((c) => {\n    if (c.id === updatedConversation.id) {\n      return updatedConversation;\n    }\n\n    return c;\n  });\n\n  saveConversation(updatedConversation);\n  saveConversations(updatedConversations);\n\n  return {\n    single: updatedConversation,\n    all: updatedConversations,\n  };\n}","file":"/utils/app/conversation.ts","language":"typescript","fileHash":"5d3c76081aa57f0412b65c2a97be00e23535797f84fd100372c5161c56e6215a","hash":"4b9e56c308d1e61c1477643f4e744fbb3ea79a9499b562efb5385a046969ecee","processedContent":"(\n  updatedConversation: Conversation,\n  allConversations: Conversation[],\n) => {\n  const updatedConversations = allConversations.map((c) => {\n    if (c.id === updatedConversation.id) {\n      return updatedConversation;\n    }\n\n    return c;\n  });\n\n  saveConversation(updatedConversation); #This code sets a local storage item with the name \"selectedConversation\" and the value of a JSON-stringified version of the conversation object.\n  saveConversations(updatedConversations); #This code stores an array of conversations in the browser's local storage, allowing the user to access and review previous conversations.\n\n  return {\n    single: updatedConversation,\n    all: updatedConversations,\n  };\n}","documentation":"This code updates a conversation object and stores it in local storage, as well as an array of all conversations."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`conversation.ts`/saveConversation.","attributes":{"range":[23,32,25,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`conversation.ts`/saveConversation.","content":"(conversation: Conversation) => {\n  localStorage.setItem('selectedConversation', JSON.stringify(conversation));\n}","file":"/utils/app/conversation.ts","language":"typescript","fileHash":"5d3c76081aa57f0412b65c2a97be00e23535797f84fd100372c5161c56e6215a","hash":"e3ad6e9142503f5d951e4ccc31d3309bdae65edcf320d5c4639376b339fd62af","processedContent":"(conversation: Conversation) => {\n  localStorage.setItem('selectedConversation', JSON.stringify(conversation));\n}","documentation":"This code sets a local storage item with the name \"selectedConversation\" and the value of a JSON-stringified version of the conversation object."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`conversation.ts`/saveConversations.","attributes":{"range":[27,33,29,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`conversation.ts`/saveConversations.","content":"(conversations: Conversation[]) => {\n  localStorage.setItem('conversationHistory', JSON.stringify(conversations));\n}","file":"/utils/app/conversation.ts","language":"typescript","fileHash":"5d3c76081aa57f0412b65c2a97be00e23535797f84fd100372c5161c56e6215a","hash":"772f7a9d197b0053812de8350a67bbc2e2d05f05df21574205717777a8086c75","processedContent":"(conversations: Conversation[]) => {\n  localStorage.setItem('conversationHistory', JSON.stringify(conversations));\n}","documentation":"This code stores an array of conversations in the browser's local storage, allowing the user to access and review previous conversations."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`codeblock.ts`/","attributes":{"range":[0,0,39,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`codeblock.ts`/","content":"interface languageMap {\n  [key: string]: string | undefined;\n}\n\nexport const programmingLanguages: languageMap = {\n  javascript: '.js',\n  python: '.py',\n  java: '.java',\n  c: '.c',\n  cpp: '.cpp',\n  'c++': '.cpp',\n  'c#': '.cs',\n  ruby: '.rb',\n  php: '.php',\n  swift: '.swift',\n  'objective-c': '.m',\n  kotlin: '.kt',\n  typescript: '.ts',\n  go: '.go',\n  perl: '.pl',\n  rust: '.rs',\n  scala: '.scala',\n  haskell: '.hs',\n  lua: '.lua',\n  shell: '.sh',\n  sql: '.sql',\n  html: '.html',\n  css: '.css',\n  // add more file extensions here, make sure the key is same as language prop in CodeBlock.tsx component\n};\n\nexport const generateRandomString = (length: number, lowercase = false) => {\n  const chars = 'ABCDEFGHJKLMNPQRSTUVWXY3456789'; // excluding similar looking characters like Z, 2, I, 1, O, 0\n  let result = '';\n  for (let i = 0; i < length; i++) {\n    result += chars.charAt(Math.floor(Math.random() * chars.length));\n  }\n  return lowercase ? result.toLowerCase() : result;\n};\n","file":"/utils/app/codeblock.ts","language":"typescript","fileHash":"a71178bd1d491213e0884c996a9904ffe3f5ebcde2a28654b2009dc8af6bb52f","hash":"a71178bd1d491213e0884c996a9904ffe3f5ebcde2a28654b2009dc8af6bb52f","processedContent":"interface languageMap {\n  \"\"\"This code defines a type called `languageMap` that is an object with string keys and values that are either strings or undefined.\"\"\"\n  pass\n\nexport const programmingLanguages: languageMap = { #This code defines a type called `languageMap` that is an object with string keys and values that are either strings or undefined.\n  javascript: '.js',\n  python: '.py',\n  java: '.java',\n  c: '.c',\n  cpp: '.cpp',\n  'c++': '.cpp',\n  'c#': '.cs',\n  ruby: '.rb',\n  php: '.php',\n  swift: '.swift',\n  'objective-c': '.m',\n  kotlin: '.kt',\n  typescript: '.ts',\n  go: '.go',\n  perl: '.pl',\n  rust: '.rs',\n  scala: '.scala',\n  haskell: '.hs',\n  lua: '.lua',\n  shell: '.sh',\n  sql: '.sql',\n  html: '.html',\n  css: '.css',\n  // add more file extensions here, make sure the key is same as language prop in CodeBlock.tsx component\n};\n\nexport const generateRandomString = (length: number, lowercase = false) => {\n  \"\"\"This code generates a random string of characters, excluding certain similar-looking characters. It takes two arguments: the length of the string and a boolean indicating whether the result should be lowercase. The code uses a for loop to generate the string, and Math.random() to select a random character from a predefined set of characters.\"\"\"\n  pass\n","documentation":"The code defines a `languageMap` object with string keys and values that are either strings or undefined. It also defines a function called `generateRandomString` that generates a random string of characters, excluding certain similar-looking characters."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`codeblock.ts`/languageMap#","attributes":{"range":[0,0,2,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`codeblock.ts`/languageMap#","content":"interface languageMap {\n  [key: string]: string | undefined;\n}","file":"/utils/app/codeblock.ts","language":"typescript","fileHash":"a71178bd1d491213e0884c996a9904ffe3f5ebcde2a28654b2009dc8af6bb52f","hash":"c3323f108dc189d35293e48f3cd8296482d0653ad88e6a7ab358ff1e9b2881c8","processedContent":"interface languageMap {\n  [key: string]: string | undefined;\n}","documentation":"This code defines a type called `languageMap` that is an object with string keys and values that are either strings or undefined."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`codeblock.ts`/generateRandomString.","attributes":{"range":[31,36,38,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`codeblock.ts`/generateRandomString.","content":"(length: number, lowercase = false) => {\n  const chars = 'ABCDEFGHJKLMNPQRSTUVWXY3456789'; // excluding similar looking characters like Z, 2, I, 1, O, 0\n  let result = '';\n  for (let i = 0; i < length; i++) {\n    result += chars.charAt(Math.floor(Math.random() * chars.length));\n  }\n  return lowercase ? result.toLowerCase() : result;\n}","file":"/utils/app/codeblock.ts","language":"typescript","fileHash":"a71178bd1d491213e0884c996a9904ffe3f5ebcde2a28654b2009dc8af6bb52f","hash":"6fa437362f043f95d8244b2c4b7f3321709bc064712e792eb54c1c1cad708566","processedContent":"(length: number, lowercase = false) => {\n  const chars = 'ABCDEFGHJKLMNPQRSTUVWXY3456789'; // excluding similar looking characters like Z, 2, I, 1, O, 0\n  let result = '';\n  for (let i = 0; i < length; i++) {\n    result += chars.charAt(Math.floor(Math.random() * chars.length));\n  }\n  return lowercase ? result.toLowerCase() : result;\n}","documentation":"This code generates a random string of characters, excluding certain similar-looking characters. It takes two arguments: the length of the string and a boolean indicating whether the result should be lowercase. The code uses a for loop to generate the string, and Math.random() to select a random character from a predefined set of characters."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`api.ts`/","attributes":{"range":[0,0,13,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`api.ts`/","content":"import { Plugin, PluginID } from '@/types/plugin';\n\nexport const getEndpoint = (plugin: Plugin | null) => {\n  if (!plugin) {\n    return 'api/chat';\n  }\n\n  if (plugin.id === PluginID.GOOGLE_SEARCH) {\n    return 'api/google';\n  }\n\n  return 'api/chat';\n};\n","file":"/utils/app/api.ts","language":"typescript","fileHash":"345246876c129ffaf782b6a65347ed6bbc700719c3bb58acc6a13203982f5ef8","hash":"345246876c129ffaf782b6a65347ed6bbc700719c3bb58acc6a13203982f5ef8","processedContent":"import { Plugin, PluginID } from '@/types/plugin';\n\nexport const getEndpoint = (plugin: Plugin | null) => {\n  \"\"\"This code defines a function that takes a plugin object as an argument and returns the appropriate API endpoint based on the plugin's ID. If no plugin is provided, it defaults to the chat API.\"\"\"\n  pass\n","documentation":"This code defines a function that returns the appropriate API endpoint based on a plugin's ID. If no plugin is provided, it defaults to the chat API."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`api.ts`/getEndpoint.","attributes":{"range":[2,27,12,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`api.ts`/getEndpoint.","content":"(plugin: Plugin | null) => {\n  if (!plugin) {\n    return 'api/chat';\n  }\n\n  if (plugin.id === PluginID.GOOGLE_SEARCH) {\n    return 'api/google';\n  }\n\n  return 'api/chat';\n}","file":"/utils/app/api.ts","language":"typescript","fileHash":"345246876c129ffaf782b6a65347ed6bbc700719c3bb58acc6a13203982f5ef8","hash":"5b801bb7dc03e22a795986223834372b568ae7b82f6402c50906dcf12dab48a0","processedContent":"(plugin: Plugin | null) => {\n  if (!plugin) {\n    return 'api/chat';\n  }\n\n  if (plugin.id === PluginID.GOOGLE_SEARCH) {\n    return 'api/google';\n  }\n\n  return 'api/chat';\n}","documentation":"This code defines a function that takes a plugin object as an argument and returns the appropriate API endpoint based on the plugin's ID. If no plugin is provided, it defaults to the chat API."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`models.ts`/","attributes":{"range":[0,0,72,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`models.ts`/","content":"import { OPENAI_API_HOST, OPENAI_API_TYPE, OPENAI_API_VERSION, OPENAI_ORGANIZATION } from '@/utils/app/const';\n\nimport { OpenAIModel, OpenAIModelID, OpenAIModels } from '@/types/openai';\n\nexport const config = {\n  runtime: 'edge',\n};\n\nconst handler = async (req: Request): Promise<Response> => {\n  try {\n    const { key } = (await req.json()) as {\n      key: string;\n    };\n\n    let url = `${OPENAI_API_HOST}/v1/models`;\n    if (OPENAI_API_TYPE === 'azure') {\n      url = `${OPENAI_API_HOST}/openai/deployments?api-version=${OPENAI_API_VERSION}`;\n    }\n\n    const response = await fetch(url, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...(OPENAI_API_TYPE === 'openai' && {\n          Authorization: `Bearer ${key ? key : process.env.OPENAI_API_KEY}`\n        }),\n        ...(OPENAI_API_TYPE === 'azure' && {\n          'api-key': `${key ? key : process.env.OPENAI_API_KEY}`\n        }),\n        ...((OPENAI_API_TYPE === 'openai' && OPENAI_ORGANIZATION) && {\n          'OpenAI-Organization': OPENAI_ORGANIZATION,\n        }),\n      },\n    });\n\n    if (response.status === 401) {\n      return new Response(response.body, {\n        status: 500,\n        headers: response.headers,\n      });\n    } else if (response.status !== 200) {\n      console.error(\n        `OpenAI API returned an error ${\n          response.status\n        }: ${await response.text()}`,\n      );\n      throw new Error('OpenAI API returned an error');\n    }\n\n    const json = await response.json();\n\n    const models: OpenAIModel[] = json.data\n      .map((model: any) => {\n        const model_name = (OPENAI_API_TYPE === 'azure') ? model.model : model.id;\n        for (const [key, value] of Object.entries(OpenAIModelID)) {\n          if (value === model_name) {\n            return {\n              id: model.id,\n              name: OpenAIModels[value].name,\n            };\n          }\n        }\n      })\n      .filter(Boolean);\n\n    return new Response(JSON.stringify(models), { status: 200 });\n  } catch (error) {\n    console.error(error);\n    return new Response('Error', { status: 500 });\n  }\n};\n\nexport default handler;\n","file":"/pages/api/models.ts","language":"typescript","fileHash":"2ec8fa11f5f3005b71d1cb42ad879abbcf1e6d23ee979eb46de4ec624896a27c","hash":"2ec8fa11f5f3005b71d1cb42ad879abbcf1e6d23ee979eb46de4ec624896a27c","processedContent":"import { OPENAI_API_HOST, OPENAI_API_TYPE, OPENAI_API_VERSION, OPENAI_ORGANIZATION } from '@/utils/app/const';\n\nimport { OpenAIModel, OpenAIModelID, OpenAIModels } from '@/types/openai';\n\nexport const config = {\n  runtime: 'edge',\n};\n\nconst handler = async (req: Request): Promise<Response> => {\n  \"\"\"This code is an asynchronous function that retrieves a list of OpenAI models from the OpenAI API. It first checks the request body for a key, then constructs a URL based on the API type and organization, and finally makes a GET request to the API to retrieve the model list. The response is then parsed and returned as a JSON object.\"\"\"\n  pass\n\nexport default handler; #This code is an asynchronous function that retrieves a list of OpenAI models from the OpenAI API. It first checks the request body for a key, then constructs a URL based on the API type and organization, and finally makes a GET request to the API to retrieve the model list. The response is then parsed and returned as a JSON object.\n","documentation":"This code retrieves a list of OpenAI models from the OpenAI API using an asynchronous function. It first checks the request body for a key, then constructs a URL based on the API type and organization, and finally makes a GET request to the API to retrieve the model list. The response is then parsed and returned as a JSON object."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`models.ts`/handler.","attributes":{"range":[8,16,69,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`models.ts`/handler.","content":"async (req: Request): Promise<Response> => {\n  try {\n    const { key } = (await req.json()) as {\n      key: string;\n    };\n\n    let url = `${OPENAI_API_HOST}/v1/models`;\n    if (OPENAI_API_TYPE === 'azure') {\n      url = `${OPENAI_API_HOST}/openai/deployments?api-version=${OPENAI_API_VERSION}`;\n    }\n\n    const response = await fetch(url, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...(OPENAI_API_TYPE === 'openai' && {\n          Authorization: `Bearer ${key ? key : process.env.OPENAI_API_KEY}`\n        }),\n        ...(OPENAI_API_TYPE === 'azure' && {\n          'api-key': `${key ? key : process.env.OPENAI_API_KEY}`\n        }),\n        ...((OPENAI_API_TYPE === 'openai' && OPENAI_ORGANIZATION) && {\n          'OpenAI-Organization': OPENAI_ORGANIZATION,\n        }),\n      },\n    });\n\n    if (response.status === 401) {\n      return new Response(response.body, {\n        status: 500,\n        headers: response.headers,\n      });\n    } else if (response.status !== 200) {\n      console.error(\n        `OpenAI API returned an error ${\n          response.status\n        }: ${await response.text()}`,\n      );\n      throw new Error('OpenAI API returned an error');\n    }\n\n    const json = await response.json();\n\n    const models: OpenAIModel[] = json.data\n      .map((model: any) => {\n        const model_name = (OPENAI_API_TYPE === 'azure') ? model.model : model.id;\n        for (const [key, value] of Object.entries(OpenAIModelID)) {\n          if (value === model_name) {\n            return {\n              id: model.id,\n              name: OpenAIModels[value].name,\n            };\n          }\n        }\n      })\n      .filter(Boolean);\n\n    return new Response(JSON.stringify(models), { status: 200 });\n  } catch (error) {\n    console.error(error);\n    return new Response('Error', { status: 500 });\n  }\n}","file":"/pages/api/models.ts","language":"typescript","fileHash":"2ec8fa11f5f3005b71d1cb42ad879abbcf1e6d23ee979eb46de4ec624896a27c","hash":"fcde1eeba695dd918b2a8fd959058eb42481d47183f51f6f7c7f06fc24de575f","processedContent":"async (req: Request): Promise<Response> => {\n  try {\n    const { key } = (await req.json()) as { #undefined\n      key: string;\n    };\n\n    let url = `${OPENAI_API_HOST}/v1/models`;\n    if (OPENAI_API_TYPE === 'azure') {\n      url = `${OPENAI_API_HOST}/openai/deployments?api-version=${OPENAI_API_VERSION}`;\n    }\n\n    const response = await fetch(url, { #undefined\n      headers: {\n        'Content-Type': 'application/json',\n        ...(OPENAI_API_TYPE === 'openai' && {\n          Authorization: `Bearer ${key ? key : process.env.OPENAI_API_KEY}`\n          \"\"\"\n          scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/process.: undefined\n          scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/process.: undefined\n          scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/NodeJS/Process#env.: undefined\n          \"\"\"\n        }),\n        ...(OPENAI_API_TYPE === 'azure' && {\n          'api-key': `${key ? key : process.env.OPENAI_API_KEY}`\n          \"\"\"\n          scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/process.: undefined\n          scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/process.: undefined\n          scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/NodeJS/Process#env.: undefined\n          \"\"\"\n        }),\n        ...((OPENAI_API_TYPE === 'openai' && OPENAI_ORGANIZATION) && {\n          'OpenAI-Organization': OPENAI_ORGANIZATION,\n        }),\n      },\n    });\n\n    if (response.status === 401) {\n      return new Response(response.body, {\n      \"\"\"\n      scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Response#: undefined\n      scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Response.: undefined\n      \"\"\"\n        status: 500,\n        headers: response.headers,\n      });\n    } else if (response.status !== 200) {\n      console.error(\n      \"\"\"\n      scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.: undefined\n      scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/: undefined\n      scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.: undefined\n      scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#error().: undefined\n      \"\"\"\n        `OpenAI API returned an error ${\n          response.status\n        }: ${await response.text()}`,\n      );\n      throw new Error('OpenAI API returned an error');\n    }\n\n    const json = await response.json();\n\n    const models: OpenAIModel[] = json.data\n      .map((model: any) => {\n        const model_name = (OPENAI_API_TYPE === 'azure') ? model.model : model.id;\n        for (const [key, value] of Object.entries(OpenAIModelID)) {\n          if (value === model_name) {\n            return {\n              id: model.id,\n              name: OpenAIModels[value].name,\n            };\n          }\n        }\n      })\n      .filter(Boolean);\n\n    return new Response(JSON.stringify(models), { status: 200 });\n    \"\"\"\n    scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Response#: undefined\n    scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Response.: undefined\n    \"\"\"\n  } catch (error) {\n    console.error(error);\n    \"\"\"\n    scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.: undefined\n    scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/: undefined\n    scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.: undefined\n    scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#error().: undefined\n    \"\"\"\n    return new Response('Error', { status: 500 });\n    \"\"\"\n    scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Response#: undefined\n    scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Response.: undefined\n    \"\"\"\n  }\n}","documentation":"This code is an asynchronous function that retrieves a list of OpenAI models from the OpenAI API. It first checks the request body for a key, then constructs a URL based on the API type and organization, and finally makes a GET request to the API to retrieve the model list. The response is then parsed and returned as a JSON object."}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Request#","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Request#","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Request.","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Request.","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Response#","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Response#","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Response.","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Response.","language":"typescript"}},{"key":"scip-typescript npm undici-types 5.26.5 `fetch.d.ts`/Request#json.","attributes":{"symbol":"scip-typescript npm undici-types 5.26.5 `fetch.d.ts`/Request#json.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`google.ts`/","attributes":{"range":[0,0,149,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`google.ts`/","content":"import { NextApiRequest, NextApiResponse } from 'next';\n\nimport { OPENAI_API_HOST } from '@/utils/app/const';\nimport { cleanSourceText } from '@/utils/server/google';\n\nimport { Message } from '@/types/chat';\nimport { GoogleBody, GoogleSource } from '@/types/google';\n\nimport { Readability } from '@mozilla/readability';\nimport endent from 'endent';\nimport jsdom, { JSDOM } from 'jsdom';\n\nconst handler = async (req: NextApiRequest, res: NextApiResponse<any>) => {\n  try {\n    const { messages, key, model, googleAPIKey, googleCSEId } =\n      req.body as GoogleBody;\n\n    const userMessage = messages[messages.length - 1];\n    const query = encodeURIComponent(userMessage.content.trim());\n\n    const googleRes = await fetch(\n      `https://customsearch.googleapis.com/customsearch/v1?key=${\n        googleAPIKey ? googleAPIKey : process.env.GOOGLE_API_KEY\n      }&cx=${\n        googleCSEId ? googleCSEId : process.env.GOOGLE_CSE_ID\n      }&q=${query}&num=5`,\n    );\n\n    const googleData = await googleRes.json();\n\n    const sources: GoogleSource[] = googleData.items.map((item: any) => ({\n      title: item.title,\n      link: item.link,\n      displayLink: item.displayLink,\n      snippet: item.snippet,\n      image: item.pagemap?.cse_image?.[0]?.src,\n      text: '',\n    }));\n\n    const sourcesWithText: any = await Promise.all(\n      sources.map(async (source) => {\n        try {\n          const timeoutPromise = new Promise((_, reject) =>\n            setTimeout(() => reject(new Error('Request timed out')), 5000),\n          );\n\n          const res = (await Promise.race([\n            fetch(source.link),\n            timeoutPromise,\n          ])) as any;\n\n          // if (res) {\n          const html = await res.text();\n\n          const virtualConsole = new jsdom.VirtualConsole();\n          virtualConsole.on('error', (error) => {\n            if (!error.message.includes('Could not parse CSS stylesheet')) {\n              console.error(error);\n            }\n          });\n\n          const dom = new JSDOM(html, { virtualConsole });\n          const doc = dom.window.document;\n          const parsed = new Readability(doc).parse();\n\n          if (parsed) {\n            let sourceText = cleanSourceText(parsed.textContent);\n\n            return {\n              ...source,\n              // TODO: switch to tokens\n              text: sourceText.slice(0, 2000),\n            } as GoogleSource;\n          }\n          // }\n\n          return null;\n        } catch (error) {\n          console.error(error);\n          return null;\n        }\n      }),\n    );\n\n    const filteredSources: GoogleSource[] = sourcesWithText.filter(Boolean);\n\n    const answerPrompt = endent`\n    Provide me with the information I requested. Use the sources to provide an accurate response. Respond in markdown format. Cite the sources you used as a markdown link as you use them at the end of each sentence by number of the source (ex: [[1]](link.com)). Provide an accurate response and then stop. Today's date is ${new Date().toLocaleDateString()}.\n\n    Example Input:\n    What's the weather in San Francisco today?\n\n    Example Sources:\n    [Weather in San Francisco](https://www.google.com/search?q=weather+san+francisco)\n\n    Example Response:\n    It's 70 degrees and sunny in San Francisco today. [[1]](https://www.google.com/search?q=weather+san+francisco)\n\n    Input:\n    ${userMessage.content.trim()}\n\n    Sources:\n    ${filteredSources.map((source) => {\n      return endent`\n      ${source.title} (${source.link}):\n      ${source.text}\n      `;\n    })}\n\n    Response:\n    `;\n\n    const answerMessage: Message = { role: 'user', content: answerPrompt };\n\n    const answerRes = await fetch(`${OPENAI_API_HOST}/v1/chat/completions`, {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${key ? key : process.env.OPENAI_API_KEY}`,\n        ...(process.env.OPENAI_ORGANIZATION && {\n          'OpenAI-Organization': process.env.OPENAI_ORGANIZATION,\n        }),\n      },\n      method: 'POST',\n      body: JSON.stringify({\n        model: model.id,\n        messages: [\n          {\n            role: 'system',\n            content: `Use the sources to provide an accurate response. Respond in markdown format. Cite the sources you used as [1](link), etc, as you use them. Maximum 4 sentences.`,\n          },\n          answerMessage,\n        ],\n        max_tokens: 1000,\n        temperature: 1,\n        stream: false,\n      }),\n    });\n\n    const { choices: choices2 } = await answerRes.json();\n    const answer = choices2[0].message.content;\n\n    res.status(200).json({ answer });\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({ error: 'Error'})\n  }\n};\n\nexport default handler;\n","file":"/pages/api/google.ts","language":"typescript","fileHash":"6ac513ad6ede4bd4ad5c381f99c159b3d51165f9593c6f04991035c48d557fb5","hash":"6ac513ad6ede4bd4ad5c381f99c159b3d51165f9593c6f04991035c48d557fb5","processedContent":"import { NextApiRequest, NextApiResponse } from 'next';\n\"\"\"\nscip-typescript npm next 14.0.3 dist/shared/lib/`utils.d.ts`/NextApiRequest#: undefined\nscip-typescript npm next 14.0.3 dist/shared/lib/`utils.d.ts`/NextApiResponse#: undefined\nscip-typescript npm next 14.0.3 `index.d.ts`/: undefined\n\"\"\"\n\nimport { OPENAI_API_HOST } from '@/utils/app/const';\nimport { cleanSourceText } from '@/utils/server/google';\n\nimport { Message } from '@/types/chat';\nimport { GoogleBody, GoogleSource } from '@/types/google';\n\nimport { Readability } from '@mozilla/readability';\nimport endent from 'endent';\nimport jsdom, { JSDOM } from 'jsdom';\n\nconst handler = async (req: NextApiRequest, res: NextApiResponse<any>) => {\n  \"\"\"This code is a Next.js API endpoint that uses the OpenAI API to generate a response to a user's input based on a set of pre-defined sources. It first retrieves the necessary information from the request body, then uses the Google Custom Search API to retrieve relevant search results. The code then uses the Readability library to extract text from the search results and generates a response based on the input provided. Finally, it sends the response back to the client as JSON.\"\"\"\n  pass\n\nexport default handler; #This code is a Next.js API endpoint that uses the OpenAI API to generate a response to a user's input based on a set of pre-defined sources. It first retrieves the necessary information from the request body, then uses the Google Custom Search API to retrieve relevant search results. The code then uses the Readability library to extract text from the search results and generates a response based on the input provided. Finally, it sends the response back to the client as JSON.\n","documentation":"This code is a Next.js API endpoint that uses the OpenAI API to generate a response to a user's input based on a set of pre-defined sources. It retrieves information from the request body, uses the Google Custom Search API to retrieve relevant search results, extracts text from the search results using the Readability library, and generates a response based on the input provided before sending it back to the client as JSON."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`google.ts`/handler.","attributes":{"range":[12,16,146,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`google.ts`/handler.","content":"async (req: NextApiRequest, res: NextApiResponse<any>) => {\n  try {\n    const { messages, key, model, googleAPIKey, googleCSEId } =\n      req.body as GoogleBody;\n\n    const userMessage = messages[messages.length - 1];\n    const query = encodeURIComponent(userMessage.content.trim());\n\n    const googleRes = await fetch(\n      `https://customsearch.googleapis.com/customsearch/v1?key=${\n        googleAPIKey ? googleAPIKey : process.env.GOOGLE_API_KEY\n      }&cx=${\n        googleCSEId ? googleCSEId : process.env.GOOGLE_CSE_ID\n      }&q=${query}&num=5`,\n    );\n\n    const googleData = await googleRes.json();\n\n    const sources: GoogleSource[] = googleData.items.map((item: any) => ({\n      title: item.title,\n      link: item.link,\n      displayLink: item.displayLink,\n      snippet: item.snippet,\n      image: item.pagemap?.cse_image?.[0]?.src,\n      text: '',\n    }));\n\n    const sourcesWithText: any = await Promise.all(\n      sources.map(async (source) => {\n        try {\n          const timeoutPromise = new Promise((_, reject) =>\n            setTimeout(() => reject(new Error('Request timed out')), 5000),\n          );\n\n          const res = (await Promise.race([\n            fetch(source.link),\n            timeoutPromise,\n          ])) as any;\n\n          // if (res) {\n          const html = await res.text();\n\n          const virtualConsole = new jsdom.VirtualConsole();\n          virtualConsole.on('error', (error) => {\n            if (!error.message.includes('Could not parse CSS stylesheet')) {\n              console.error(error);\n            }\n          });\n\n          const dom = new JSDOM(html, { virtualConsole });\n          const doc = dom.window.document;\n          const parsed = new Readability(doc).parse();\n\n          if (parsed) {\n            let sourceText = cleanSourceText(parsed.textContent);\n\n            return {\n              ...source,\n              // TODO: switch to tokens\n              text: sourceText.slice(0, 2000),\n            } as GoogleSource;\n          }\n          // }\n\n          return null;\n        } catch (error) {\n          console.error(error);\n          return null;\n        }\n      }),\n    );\n\n    const filteredSources: GoogleSource[] = sourcesWithText.filter(Boolean);\n\n    const answerPrompt = endent`\n    Provide me with the information I requested. Use the sources to provide an accurate response. Respond in markdown format. Cite the sources you used as a markdown link as you use them at the end of each sentence by number of the source (ex: [[1]](link.com)). Provide an accurate response and then stop. Today's date is ${new Date().toLocaleDateString()}.\n\n    Example Input:\n    What's the weather in San Francisco today?\n\n    Example Sources:\n    [Weather in San Francisco](https://www.google.com/search?q=weather+san+francisco)\n\n    Example Response:\n    It's 70 degrees and sunny in San Francisco today. [[1]](https://www.google.com/search?q=weather+san+francisco)\n\n    Input:\n    ${userMessage.content.trim()}\n\n    Sources:\n    ${filteredSources.map((source) => {\n      return endent`\n      ${source.title} (${source.link}):\n      ${source.text}\n      `;\n    })}\n\n    Response:\n    `;\n\n    const answerMessage: Message = { role: 'user', content: answerPrompt };\n\n    const answerRes = await fetch(`${OPENAI_API_HOST}/v1/chat/completions`, {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${key ? key : process.env.OPENAI_API_KEY}`,\n        ...(process.env.OPENAI_ORGANIZATION && {\n          'OpenAI-Organization': process.env.OPENAI_ORGANIZATION,\n        }),\n      },\n      method: 'POST',\n      body: JSON.stringify({\n        model: model.id,\n        messages: [\n          {\n            role: 'system',\n            content: `Use the sources to provide an accurate response. Respond in markdown format. Cite the sources you used as [1](link), etc, as you use them. Maximum 4 sentences.`,\n          },\n          answerMessage,\n        ],\n        max_tokens: 1000,\n        temperature: 1,\n        stream: false,\n      }),\n    });\n\n    const { choices: choices2 } = await answerRes.json();\n    const answer = choices2[0].message.content;\n\n    res.status(200).json({ answer });\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({ error: 'Error'})\n  }\n}","file":"/pages/api/google.ts","language":"typescript","fileHash":"6ac513ad6ede4bd4ad5c381f99c159b3d51165f9593c6f04991035c48d557fb5","hash":"df79f03f95d28537ba0583d79244909a39bbc8a692ecc1f0856493316fd1fba6","processedContent":"async (req: NextApiRequest, res: NextApiResponse<any>) => {\n  try {\n    const { messages, key, model, googleAPIKey, googleCSEId } =\n      req.body as GoogleBody; #undefined\n\n    const userMessage = messages[messages.length - 1];\n    const query = encodeURIComponent(userMessage.content.trim());\n\n    const googleRes = await fetch( #undefined\n      `https://customsearch.googleapis.com/customsearch/v1?key=${\n        googleAPIKey ? googleAPIKey : process.env.GOOGLE_API_KEY\n        \"\"\"\n        scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/process.: undefined\n        scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/process.: undefined\n        scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/NodeJS/Process#env.: undefined\n        \"\"\"\n      }&cx=${\n        googleCSEId ? googleCSEId : process.env.GOOGLE_CSE_ID\n        \"\"\"\n        scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/process.: undefined\n        scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/process.: undefined\n        scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/NodeJS/Process#env.: undefined\n        \"\"\"\n      }&q=${query}&num=5`,\n    );\n\n    const googleData = await googleRes.json();\n\n    const sources: GoogleSource[] = googleData.items.map((item: any) => ({\n      title: item.title,\n      link: item.link,\n      displayLink: item.displayLink,\n      snippet: item.snippet,\n      image: item.pagemap?.cse_image?.[0]?.src,\n      text: '',\n    }));\n\n    const sourcesWithText: any = await Promise.all(\n      sources.map(async (source) => {\n        try {\n          const timeoutPromise = new Promise((_, reject) =>\n            setTimeout(() => reject(new Error('Request timed out')), 5000),\n            \"\"\"\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`timers.d.ts`/`\"timers\"`/global/setTimeout().: undefined\n            scip-typescript npm @types/node 20.9.3 `ts4.8`/`timers.d.ts`/`\"timers\"`/global/setTimeout/: undefined\n            \"\"\"\n          );\n\n          const res = (await Promise.race([\n            fetch(source.link), #undefined\n            timeoutPromise,\n          ])) as any;\n\n          // if (res) {\n          const html = await res.text();\n\n          const virtualConsole = new jsdom.VirtualConsole();\n          virtualConsole.on('error', (error) => {\n            if (!error.message.includes('Could not parse CSS stylesheet')) {\n              console.error(error);\n              \"\"\"\n              scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.: undefined\n              scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/: undefined\n              scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.: undefined\n              scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#error().: undefined\n              \"\"\"\n          \"\"\"\n          scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.: undefined\n          scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/: undefined\n          scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.: undefined\n          scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#error().: undefined\n          \"\"\"\n    \"\"\"\n    scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.: undefined\n    scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/: undefined\n    scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.: undefined\n    scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#error().: undefined\n    \"\"\"\n            }\n          });\n\n          const dom = new JSDOM(html, { virtualConsole });\n          const doc = dom.window.document;\n          const parsed = new Readability(doc).parse();\n\n          if (parsed) {\n            let sourceText = cleanSourceText(parsed.textContent);\n\n            return {\n              ...source,\n              // TODO: switch to tokens\n              text: sourceText.slice(0, 2000),\n            } as GoogleSource;\n          }\n          // }\n\n          return null;\n        } catch (error) {\n          console.error(error);\n          return null;\n        }\n      }),\n    );\n\n    const filteredSources: GoogleSource[] = sourcesWithText.filter(Boolean);\n\n    const answerPrompt = endent`\n    Provide me with the information I requested. Use the sources to provide an accurate response. Respond in markdown format. Cite the sources you used as a markdown link as you use them at the end of each sentence by number of the source (ex: [[1]](link.com)). Provide an accurate response and then stop. Today's date is ${new Date().toLocaleDateString()}.\n\n    Example Input:\n    What's the weather in San Francisco today?\n\n    Example Sources:\n    [Weather in San Francisco](https://www.google.com/search?q=weather+san+francisco)\n\n    Example Response:\n    It's 70 degrees and sunny in San Francisco today. [[1]](https://www.google.com/search?q=weather+san+francisco)\n\n    Input:\n    ${userMessage.content.trim()}\n\n    Sources:\n    ${filteredSources.map((source) => {\n      return endent`\n      ${source.title} (${source.link}):\n      ${source.text}\n      `;\n    })}\n\n    Response:\n    `;\n\n    const answerMessage: Message = { role: 'user', content: answerPrompt };\n\n    const answerRes = await fetch(`${OPENAI_API_HOST}/v1/chat/completions`, { #undefined\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${key ? key : process.env.OPENAI_API_KEY}`,\n        \"\"\"\n        scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/process.: undefined\n        scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/process.: undefined\n        scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/NodeJS/Process#env.: undefined\n        \"\"\"\n        ...(process.env.OPENAI_ORGANIZATION && {\n        \"\"\"\n        scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/process.: undefined\n        scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/process.: undefined\n        scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/NodeJS/Process#env.: undefined\n        \"\"\"\n          'OpenAI-Organization': process.env.OPENAI_ORGANIZATION,\n          \"\"\"\n          scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/process.: undefined\n          scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/process.: undefined\n          scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/NodeJS/Process#env.: undefined\n          \"\"\"\n        }),\n      },\n      method: 'POST',\n      body: JSON.stringify({\n        model: model.id,\n        messages: [\n          {\n            role: 'system',\n            content: `Use the sources to provide an accurate response. Respond in markdown format. Cite the sources you used as [1](link), etc, as you use them. Maximum 4 sentences.`,\n          },\n          answerMessage,\n        ],\n        max_tokens: 1000,\n        temperature: 1,\n        stream: false,\n      }),\n    });\n\n    const { choices: choices2 } = await answerRes.json();\n    const answer = choices2[0].message.content;\n\n    res.status(200).json({ answer });\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({ error: 'Error'})\n  }\n}","documentation":"This code is a Next.js API endpoint that uses the OpenAI API to generate a response to a user's input based on a set of pre-defined sources. It first retrieves the necessary information from the request body, then uses the Google Custom Search API to retrieve relevant search results. The code then uses the Readability library to extract text from the search results and generates a response based on the input provided. Finally, it sends the response back to the client as JSON."}},{"key":"scip-typescript npm next 14.0.3 dist/shared/lib/`utils.d.ts`/NextApiRequest#","attributes":{"symbol":"scip-typescript npm next 14.0.3 dist/shared/lib/`utils.d.ts`/NextApiRequest#","language":"typescript"}},{"key":"scip-typescript npm next 14.0.3 dist/shared/lib/`utils.d.ts`/NextApiResponse#","attributes":{"symbol":"scip-typescript npm next 14.0.3 dist/shared/lib/`utils.d.ts`/NextApiResponse#","language":"typescript"}},{"key":"scip-typescript npm next 14.0.3 `index.d.ts`/","attributes":{"symbol":"scip-typescript npm next 14.0.3 `index.d.ts`/","language":"typescript"}},{"key":"scip-typescript npm next 14.0.3 dist/shared/lib/`utils.d.ts`/NextApiRequest#body.","attributes":{"symbol":"scip-typescript npm next 14.0.3 dist/shared/lib/`utils.d.ts`/NextApiRequest#body.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`chat.ts`/","attributes":{"range":[0,0,68,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`chat.ts`/","content":"import { DEFAULT_SYSTEM_PROMPT, DEFAULT_TEMPERATURE } from '@/utils/app/const';\nimport { OpenAIError, OpenAIStream } from '@/utils/server';\n\nimport { ChatBody, Message } from '@/types/chat';\n\n// @ts-expect-error\nimport wasm from '../../node_modules/@dqbd/tiktoken/lite/tiktoken_bg.wasm?module';\n\nimport tiktokenModel from '@dqbd/tiktoken/encoders/cl100k_base.json';\nimport { Tiktoken, init } from '@dqbd/tiktoken/lite/init';\n\nexport const config = {\n  runtime: 'edge',\n};\n\nconst handler = async (req: Request): Promise<Response> => {\n  try {\n    const { model, messages, key, prompt, temperature } = (await req.json()) as ChatBody;\n\n    await init((imports) => WebAssembly.instantiate(wasm, imports));\n    const encoding = new Tiktoken(\n      tiktokenModel.bpe_ranks,\n      tiktokenModel.special_tokens,\n      tiktokenModel.pat_str,\n    );\n\n    let promptToSend = prompt;\n    if (!promptToSend) {\n      promptToSend = DEFAULT_SYSTEM_PROMPT;\n    }\n\n    let temperatureToUse = temperature;\n    if (temperatureToUse == null) {\n      temperatureToUse = DEFAULT_TEMPERATURE;\n    }\n\n    const prompt_tokens = encoding.encode(promptToSend);\n\n    let tokenCount = prompt_tokens.length;\n    let messagesToSend: Message[] = [];\n\n    for (let i = messages.length - 1; i >= 0; i--) {\n      const message = messages[i];\n      const tokens = encoding.encode(message.content);\n\n      if (tokenCount + tokens.length + 1000 > model.tokenLimit) {\n        break;\n      }\n      tokenCount += tokens.length;\n      messagesToSend = [message, ...messagesToSend];\n    }\n\n    encoding.free();\n\n    const stream = await OpenAIStream(model, promptToSend, temperatureToUse, key, messagesToSend);\n\n    return new Response(stream);\n  } catch (error) {\n    console.error(error);\n    if (error instanceof OpenAIError) {\n      return new Response('Error', { status: 500, statusText: error.message });\n    } else {\n      return new Response('Error', { status: 500 });\n    }\n  }\n};\n\nexport default handler;\n","file":"/pages/api/chat.ts","language":"typescript","fileHash":"f95e1b7c0517d1328c1ee6e6023709bd41931e1fdfff053b7c8f46ac4c3fae81","hash":"f95e1b7c0517d1328c1ee6e6023709bd41931e1fdfff053b7c8f46ac4c3fae81","processedContent":"import { DEFAULT_SYSTEM_PROMPT, DEFAULT_TEMPERATURE } from '@/utils/app/const';\nimport { OpenAIError, OpenAIStream } from '@/utils/server';\n\nimport { ChatBody, Message } from '@/types/chat';\n\n// @ts-expect-error\nimport wasm from '../../node_modules/@dqbd/tiktoken/lite/tiktoken_bg.wasm?module';\n\nimport tiktokenModel from '@dqbd/tiktoken/encoders/cl100k_base.json';\nimport { Tiktoken, init } from '@dqbd/tiktoken/lite/init';\n\nexport const config = {\n  runtime: 'edge',\n};\n\nconst handler = async (req: Request): Promise<Response> => {\n  \"\"\"This code is an asynchronous function that handles a request from the client and returns a response. It initializes a WebAssembly module, encodes the prompt and messages using a Tiktoken encoding, and then sends the encoded prompt and messages to the OpenAI API for natural language processing. If there is an error, it logs the error and returns a 500 status code with a message.\"\"\"\n  pass\n\nexport default handler; #This code is an asynchronous function that handles a request from the client and returns a response. It initializes a WebAssembly module, encodes the prompt and messages using a Tiktoken encoding, and then sends the encoded prompt and messages to the OpenAI API for natural language processing. If there is an error, it logs the error and returns a 500 status code with a message.\n","documentation":"This code is a serverless function that handles requests from the client and returns responses using the OpenAI API for natural language processing. It initializes a WebAssembly module, encodes prompts and messages using a Tiktoken encoding, and sends the encoded data to the OpenAI API for processing. If there is an error, it logs the error and returns a 500 status code with a message."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`chat.ts`/handler.","attributes":{"range":[15,16,65,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`chat.ts`/handler.","content":"async (req: Request): Promise<Response> => {\n  try {\n    const { model, messages, key, prompt, temperature } = (await req.json()) as ChatBody;\n\n    await init((imports) => WebAssembly.instantiate(wasm, imports));\n    const encoding = new Tiktoken(\n      tiktokenModel.bpe_ranks,\n      tiktokenModel.special_tokens,\n      tiktokenModel.pat_str,\n    );\n\n    let promptToSend = prompt;\n    if (!promptToSend) {\n      promptToSend = DEFAULT_SYSTEM_PROMPT;\n    }\n\n    let temperatureToUse = temperature;\n    if (temperatureToUse == null) {\n      temperatureToUse = DEFAULT_TEMPERATURE;\n    }\n\n    const prompt_tokens = encoding.encode(promptToSend);\n\n    let tokenCount = prompt_tokens.length;\n    let messagesToSend: Message[] = [];\n\n    for (let i = messages.length - 1; i >= 0; i--) {\n      const message = messages[i];\n      const tokens = encoding.encode(message.content);\n\n      if (tokenCount + tokens.length + 1000 > model.tokenLimit) {\n        break;\n      }\n      tokenCount += tokens.length;\n      messagesToSend = [message, ...messagesToSend];\n    }\n\n    encoding.free();\n\n    const stream = await OpenAIStream(model, promptToSend, temperatureToUse, key, messagesToSend);\n\n    return new Response(stream);\n  } catch (error) {\n    console.error(error);\n    if (error instanceof OpenAIError) {\n      return new Response('Error', { status: 500, statusText: error.message });\n    } else {\n      return new Response('Error', { status: 500 });\n    }\n  }\n}","file":"/pages/api/chat.ts","language":"typescript","fileHash":"f95e1b7c0517d1328c1ee6e6023709bd41931e1fdfff053b7c8f46ac4c3fae81","hash":"1f471f157bd6064745f81136c88637e3f2d2915bce7b088f0e7f7f6fb4d63a07","processedContent":"async (req: Request): Promise<Response> => {\n  try {\n    const { model, messages, key, prompt, temperature } = (await req.json()) as ChatBody; #undefined\n\n    await init((imports) => WebAssembly.instantiate(wasm, imports));\n    const encoding = new Tiktoken(\n      tiktokenModel.bpe_ranks,\n      tiktokenModel.special_tokens,\n      tiktokenModel.pat_str,\n    );\n\n    let promptToSend = prompt;\n    if (!promptToSend) {\n      promptToSend = DEFAULT_SYSTEM_PROMPT;\n    }\n\n    let temperatureToUse = temperature;\n    if (temperatureToUse == null) {\n      temperatureToUse = DEFAULT_TEMPERATURE;\n    }\n\n    const prompt_tokens = encoding.encode(promptToSend);\n\n    let tokenCount = prompt_tokens.length;\n    let messagesToSend: Message[] = [];\n\n    for (let i = messages.length - 1; i >= 0; i--) {\n      const message = messages[i];\n      const tokens = encoding.encode(message.content);\n\n      if (tokenCount + tokens.length + 1000 > model.tokenLimit) {\n        break;\n      }\n      tokenCount += tokens.length;\n      messagesToSend = [message, ...messagesToSend];\n    }\n\n    encoding.free();\n\n    const stream = await OpenAIStream(model, promptToSend, temperatureToUse, key, messagesToSend);\n\n    return new Response(stream);\n    \"\"\"\n    scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Response#: undefined\n    scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Response.: undefined\n    \"\"\"\n  } catch (error) {\n    console.error(error);\n    \"\"\"\n    scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.: undefined\n    scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/: undefined\n    scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.: undefined\n    scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#error().: undefined\n    \"\"\"\n    if (error instanceof OpenAIError) {\n      return new Response('Error', { status: 500, statusText: error.message });\n      \"\"\"\n      scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Response#: undefined\n      scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Response.: undefined\n      \"\"\"\n    } else {\n      return new Response('Error', { status: 500 });\n      \"\"\"\n      scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Response#: undefined\n      scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Response.: undefined\n      \"\"\"\n    }\n  }\n}","documentation":"This code is an asynchronous function that handles a request from the client and returns a response. It initializes a WebAssembly module, encodes the prompt and messages using a Tiktoken encoding, and then sends the encoded prompt and messages to the OpenAI API for natural language processing. If there is an error, it logs the error and returns a 500 status code with a message."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`index.ts`/","attributes":{"range":[0,0,1,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`index.ts`/","content":"export { default } from './Spinner';\n","file":"/components/Spinner/index.ts","language":"typescript","fileHash":"31de5a66ecec4dae2e4c99261f8ef6a5dbaf1de61d33f50c146ec7df655ddd2d","hash":"31de5a66ecec4dae2e4c99261f8ef6a5dbaf1de61d33f50c146ec7df655ddd2d","processedContent":"export { default } from './Spinner';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.: This code defines a React component that renders an SVG icon with 12 lines, used to indicate the loading state of a page or application.\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/: This code defines a React component called \"Spinner\" that renders an SVG icon with 12 lines, used to indicate the loading state of a page or application.\n\"\"\"\n","documentation":"This code defines a React component called \"Spinner\" that renders an SVG icon with 12 lines, used to indicate the loading state of a page or application."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","language":"typescript","range":[7,16,31,1],"content":"({ size = '1em', className = '' }: Props) => {\n  return (\n    <svg\n      stroke=\"currentColor\"\n      fill=\"none\"\n      strokeWidth=\"2\"\n      viewBox=\"0 0 24 24\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      className={`animate-spin ${className}`}\n      height={size}\n      width={size}\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <line x1=\"12\" y1=\"2\" x2=\"12\" y2=\"6\"></line>\n      <line x1=\"12\" y1=\"18\" x2=\"12\" y2=\"22\"></line>\n      <line x1=\"4.93\" y1=\"4.93\" x2=\"7.76\" y2=\"7.76\"></line>\n      <line x1=\"16.24\" y1=\"16.24\" x2=\"19.07\" y2=\"19.07\"></line>\n      <line x1=\"2\" y1=\"12\" x2=\"6\" y2=\"12\"></line>\n      <line x1=\"18\" y1=\"12\" x2=\"22\" y2=\"12\"></line>\n      <line x1=\"4.93\" y1=\"19.07\" x2=\"7.76\" y2=\"16.24\"></line>\n      <line x1=\"16.24\" y1=\"7.76\" x2=\"19.07\" y2=\"4.93\"></line>\n    </svg>\n  );\n}","file":"/components/Spinner/Spinner.tsx","fileHash":"a0db3404c1a4a0d28c8b82cf2cbc8f571e9b9bce8ddc5a8eea9b19573c83512c","hash":"7f90a17730c9ffb9d853bacbf1bef1c0bd2c842b7a8dde402469dbada0e7daf3","processedContent":"({ size = '1em', className = '' }: Props) => {\n  return (\n    <svg #undefined\n      stroke=\"currentColor\" #undefined\n      fill=\"none\" #undefined\n      strokeWidth=\"2\" #undefined\n      viewBox=\"0 0 24 24\" #undefined\n      strokeLinecap=\"round\" #undefined\n      strokeLinejoin=\"round\" #undefined\n      className={`animate-spin ${className}`} #undefined\n      height={size} #undefined\n      width={size} #undefined\n      xmlns=\"http://www.w3.org/2000/svg\" #undefined\n    >\n      <line x1=\"12\" y1=\"2\" x2=\"12\" y2=\"6\"></line>\n      \"\"\"\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#line.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#line.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#x1.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#y1.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#x2.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#y2.: undefined\n      \"\"\"\n      <line x1=\"12\" y1=\"18\" x2=\"12\" y2=\"22\"></line>\n      \"\"\"\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#line.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#line.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#x1.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#y1.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#x2.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#y2.: undefined\n      \"\"\"\n      <line x1=\"4.93\" y1=\"4.93\" x2=\"7.76\" y2=\"7.76\"></line>\n      \"\"\"\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#line.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#line.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#x1.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#y1.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#x2.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#y2.: undefined\n      \"\"\"\n      <line x1=\"16.24\" y1=\"16.24\" x2=\"19.07\" y2=\"19.07\"></line>\n      \"\"\"\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#line.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#line.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#x1.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#y1.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#x2.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#y2.: undefined\n      \"\"\"\n      <line x1=\"2\" y1=\"12\" x2=\"6\" y2=\"12\"></line>\n      \"\"\"\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#line.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#line.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#x1.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#y1.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#x2.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#y2.: undefined\n      \"\"\"\n      <line x1=\"18\" y1=\"12\" x2=\"22\" y2=\"12\"></line>\n      \"\"\"\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#line.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#line.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#x1.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#y1.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#x2.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#y2.: undefined\n      \"\"\"\n      <line x1=\"4.93\" y1=\"19.07\" x2=\"7.76\" y2=\"16.24\"></line>\n      \"\"\"\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#line.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#line.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#x1.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#y1.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#x2.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#y2.: undefined\n      \"\"\"\n      <line x1=\"16.24\" y1=\"7.76\" x2=\"19.07\" y2=\"4.93\"></line>\n      \"\"\"\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#line.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#line.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#x1.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#y1.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#x2.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#y2.: undefined\n      \"\"\"\n    </svg> #undefined\n  );\n}","documentation":"This code defines a React component that renders an SVG icon with 12 lines, used to indicate the loading state of a page or application."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/","language":"typescript","range":[0,0,34,0],"content":"import { FC } from 'react';\n\ninterface Props {\n  size?: string;\n  className?: string;\n}\n\nconst Spinner = ({ size = '1em', className = '' }: Props) => {\n  return (\n    <svg\n      stroke=\"currentColor\"\n      fill=\"none\"\n      strokeWidth=\"2\"\n      viewBox=\"0 0 24 24\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      className={`animate-spin ${className}`}\n      height={size}\n      width={size}\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <line x1=\"12\" y1=\"2\" x2=\"12\" y2=\"6\"></line>\n      <line x1=\"12\" y1=\"18\" x2=\"12\" y2=\"22\"></line>\n      <line x1=\"4.93\" y1=\"4.93\" x2=\"7.76\" y2=\"7.76\"></line>\n      <line x1=\"16.24\" y1=\"16.24\" x2=\"19.07\" y2=\"19.07\"></line>\n      <line x1=\"2\" y1=\"12\" x2=\"6\" y2=\"12\"></line>\n      <line x1=\"18\" y1=\"12\" x2=\"22\" y2=\"12\"></line>\n      <line x1=\"4.93\" y1=\"19.07\" x2=\"7.76\" y2=\"16.24\"></line>\n      <line x1=\"16.24\" y1=\"7.76\" x2=\"19.07\" y2=\"4.93\"></line>\n    </svg>\n  );\n};\n\nexport default Spinner;\n","file":"/components/Spinner/Spinner.tsx","fileHash":"a0db3404c1a4a0d28c8b82cf2cbc8f571e9b9bce8ddc5a8eea9b19573c83512c","hash":"a0db3404c1a4a0d28c8b82cf2cbc8f571e9b9bce8ddc5a8eea9b19573c83512c","processedContent":"import { FC } from 'react';\n\"\"\"\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/: undefined\n\"\"\"\n\ninterface Props {\n  \"\"\"This code defines a type called \"Props\" that has two optional properties: \"size\" and \"className\". These properties are used to define the size and class name of an element in a React component.\"\"\"\n  pass\n\nconst Spinner = ({ size = '1em', className = '' }: Props) => {\n  \"\"\"This code defines a React component that renders an SVG icon with 12 lines, used to indicate the loading state of a page or application.\"\"\"\n  pass\n\nexport default Spinner; #This code defines a React component that renders an SVG icon with 12 lines, used to indicate the loading state of a page or application.\n","documentation":"This code defines a React component called \"Spinner\" that renders an SVG icon with 12 lines, used to indicate the loading state of a page or application."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Props#","attributes":{"range":[2,0,5,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Props#","content":"interface Props {\n  size?: string;\n  className?: string;\n}","file":"/components/Spinner/Spinner.tsx","language":"typescript","fileHash":"a0db3404c1a4a0d28c8b82cf2cbc8f571e9b9bce8ddc5a8eea9b19573c83512c","hash":"e68e3e1f108030112b348f8020b55f41b71ec6a611d8fe26da620d41d7afa0a5","processedContent":"interface Props {\n  size?: string;\n  className?: string;\n}","documentation":"This code defines a type called \"Props\" that has two optional properties: \"size\" and \"className\". These properties are used to define the size and class name of an element in a React component."}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Props#size.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Props#size.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Props#className.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Props#className.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#svg.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#svg.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#stroke.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#stroke.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#fill.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#fill.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#strokeWidth.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#strokeWidth.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#viewBox.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#viewBox.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#strokeLinecap.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#strokeLinecap.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#strokeLinejoin.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#strokeLinejoin.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#className.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#className.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#height.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#height.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#width.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#width.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#xmlns.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#xmlns.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#line.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#line.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#x1.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#x1.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#y1.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#y1.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#x2.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#x2.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#y2.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#y2.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`index.ts`/","attributes":{"range":[0,0,1,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`index.ts`/","content":"export { default } from './Sidebar';\n","file":"/components/Sidebar/index.ts","language":"typescript","fileHash":"ae42a02768b73c388c54f592fefd84ce1d6aacc754ce72522e7b8f67dce05889","hash":"ae42a02768b73c388c54f592fefd84ce1d6aacc754ce72522e7b8f67dce05889","processedContent":"export { default } from './Sidebar';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.: This code defines a React component for a folder tree, with properties that allow users to add items, search for items, and toggle the open/closed state of the component.\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/: The code defines a React component for a folder tree that allows users to add, search, and toggle the open/closed state of items.\n\"\"\"\n","documentation":"This code defines a React component for a folder tree that allows users to add, search, and toggle the open/closed state of items."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","language":"typescript","range":[27,16,120,1],"content":"<T,>({\n  isOpen,\n  addItemButtonTitle,\n  side,\n  items,\n  itemComponent,\n  folderComponent,\n  footerComponent,\n  searchTerm,\n  handleSearchTerm,\n  toggleOpen,\n  handleCreateItem,\n  handleCreateFolder,\n  handleDrop,\n}: Props<T>) => {\n  const { t } = useTranslation('promptbar');\n\n  const allowDrop = (e: any) => {\n    e.preventDefault();\n  };\n\n  const highlightDrop = (e: any) => {\n    e.target.style.background = '#343541';\n  };\n\n  const removeHighlight = (e: any) => {\n    e.target.style.background = 'none';\n  };\n\n  return isOpen ? (\n    <div>\n      <div\n        className={`fixed top-0 ${side}-0 z-40 flex h-full w-[260px] flex-none flex-col space-y-2 bg-[#202123] p-2 text-[14px] transition-all sm:relative sm:top-0`}\n      >\n        <div className=\"flex items-center\">\n          <button\n            className=\"text-sidebar flex w-[190px] flex-shrink-0 cursor-pointer select-none items-center gap-3 rounded-md border border-white/20 p-3 text-white transition-colors duration-200 hover:bg-gray-500/10\"\n            onClick={() => {\n              handleCreateItem();\n              handleSearchTerm('');\n            }}\n          >\n            <IconPlus size={16} />\n            {addItemButtonTitle}\n          </button>\n\n          <button\n            className=\"ml-2 flex flex-shrink-0 cursor-pointer items-center gap-3 rounded-md border border-white/20 p-3 text-sm text-white transition-colors duration-200 hover:bg-gray-500/10\"\n            onClick={handleCreateFolder}\n          >\n            <IconFolderPlus size={16} />\n          </button>\n        </div>\n        <Search\n          placeholder={t('Search...') || ''}\n          searchTerm={searchTerm}\n          onSearch={handleSearchTerm}\n        />\n\n        <div className=\"flex-grow overflow-auto\">\n          {items?.length > 0 && (\n            <div className=\"flex border-b border-white/20 pb-2\">\n              {folderComponent}\n            </div>\n          )}\n\n          {items?.length > 0 ? (\n            <div\n              className=\"pt-2\"\n              onDrop={handleDrop}\n              onDragOver={allowDrop}\n              onDragEnter={highlightDrop}\n              onDragLeave={removeHighlight}\n            >\n              {itemComponent}\n            </div>\n          ) : (\n            <div className=\"mt-8 select-none text-center text-white opacity-50\">\n              <IconMistOff className=\"mx-auto mb-3\" />\n              <span className=\"text-[14px] leading-normal\">\n                {t('No data.')}\n              </span>\n            </div>\n          )}\n        </div>\n        {footerComponent}\n      </div>\n\n      <CloseSidebarButton onClick={toggleOpen} side={side} />\n    </div>\n  ) : (\n    <OpenSidebarButton onClick={toggleOpen} side={side} />\n  );\n}","file":"/components/Sidebar/Sidebar.tsx","fileHash":"557b0f5d1c7aa0a5cc2ec36b927532866eeecc32009988819e64bf5aa47f0af0","hash":"a112853412527ee53307d9fc715ea91b72db314be4774dc1cba6ce64dca07fa2","processedContent":"<T,>({\n  isOpen, #undefined\n  addItemButtonTitle, #undefined\n  side, #undefined\n  items, #undefined\n  itemComponent, #undefined\n  folderComponent, #undefined\n  footerComponent, #undefined\n  searchTerm, #undefined\n  handleSearchTerm, #undefined\n  toggleOpen, #undefined\n  handleCreateItem, #undefined\n  handleCreateFolder, #undefined\n  handleDrop, #undefined\n}: Props<T>) => { #This code defines a React component interface for a folder tree component, with properties that include the ability to add items, search for items, and toggle the open/closed state of the component.\n  const { t } = useTranslation('promptbar');\n\n  const allowDrop = (e: any) => {\n    e.preventDefault();\n  };\n\n  const highlightDrop = (e: any) => {\n    e.target.style.background = '#343541';\n  };\n\n  const removeHighlight = (e: any) => {\n    e.target.style.background = 'none';\n  };\n\n  return isOpen ? (\n    <div> #undefined\n      <div #undefined\n        className={`fixed top-0 ${side}-0 z-40 flex h-full w-[260px] flex-none flex-col space-y-2 bg-[#202123] p-2 text-[14px] transition-all sm:relative sm:top-0`} #undefined\n      >\n        <div className=\"flex items-center\">\n        \"\"\"\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n        \"\"\"\n          <button #undefined\n            className=\"text-sidebar flex w-[190px] flex-shrink-0 cursor-pointer select-none items-center gap-3 rounded-md border border-white/20 p-3 text-white transition-colors duration-200 hover:bg-gray-500/10\" #undefined\n            onClick={() => { #undefined\n              handleCreateItem();\n              handleSearchTerm('');\n            }}\n          >\n            <IconPlus size={16} />\n            {addItemButtonTitle}\n          </button> #undefined\n\n          <button #undefined\n            className=\"ml-2 flex flex-shrink-0 cursor-pointer items-center gap-3 rounded-md border border-white/20 p-3 text-sm text-white transition-colors duration-200 hover:bg-gray-500/10\" #undefined\n            onClick={handleCreateFolder} #undefined\n          >\n            <IconFolderPlus size={16} />\n          </button> #undefined\n        </div> #undefined\n        <Search #This code defines a search bar component for a web application. It takes in three props: placeholder, searchTerm, and onSearch. The component renders an input field with a clear button that calls the onSearch function when clicked.\n          placeholder={t('Search...') || ''} #undefined\n          searchTerm={searchTerm} #undefined\n          onSearch={handleSearchTerm} #undefined\n        />\n\n        <div className=\"flex-grow overflow-auto\">\n        \"\"\"\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n        \"\"\"\n          {items?.length > 0 && (\n            <div className=\"flex border-b border-white/20 pb-2\">\n            \"\"\"\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n            \"\"\"\n              {folderComponent}\n            </div> #undefined\n          )}\n\n          {items?.length > 0 ? (\n            <div #undefined\n              className=\"pt-2\" #undefined\n              onDrop={handleDrop} #undefined\n              onDragOver={allowDrop} #undefined\n              onDragEnter={highlightDrop} #undefined\n              onDragLeave={removeHighlight} #undefined\n            >\n              {itemComponent}\n            </div> #undefined\n          ) : (\n            <div className=\"mt-8 select-none text-center text-white opacity-50\">\n            \"\"\"\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n            \"\"\"\n              <IconMistOff className=\"mx-auto mb-3\" />\n              <span className=\"text-[14px] leading-normal\">\n              \"\"\"\n              scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n              scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#span.: undefined\n              \"\"\"\n                {t('No data.')}\n              </span> #undefined\n            </div> #undefined\n          )}\n        </div> #undefined\n        {footerComponent}\n      </div>\n\n      <CloseSidebarButton onClick={toggleOpen} side={side} />\n      \"\"\"\n      scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/CloseSidebarButton.: This code defines a React component that renders a button and a div element. The button is positioned on the side of the screen and has an arrow icon. When clicked, it triggers an event handler function. The div element is used to create a dark overlay that appears when the button is clicked on small screens.\n      scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/Props#onClick.: undefined\n      scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/Props#side.: undefined\n      \"\"\"\n    </div>\n  ) : (\n    <OpenSidebarButton onClick={toggleOpen} side={side} />\n    \"\"\"\n    scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/Props#onClick.: undefined\n    scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/Props#side.: undefined\n    scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/OpenSidebarButton.: This code defines a button component that displays an arrow icon and triggers an `onClick` event when clicked. The button is positioned on the right or left side of the screen, depending on the value of the `side` prop, and has a fixed position to stay in the same place even when scrolling.\n    \"\"\"\n  );\n}","documentation":"This code defines a React component for a folder tree, with properties that allow users to add items, search for items, and toggle the open/closed state of the component."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/","language":"typescript","range":[0,0,123,0],"content":"import { IconFolderPlus, IconMistOff, IconPlus } from '@tabler/icons-react';\nimport { ReactNode } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  CloseSidebarButton,\n  OpenSidebarButton,\n} from './components/OpenCloseButton';\n\nimport Search from '../Search';\n\ninterface Props<T> {\n  isOpen: boolean;\n  addItemButtonTitle: string;\n  side: 'left' | 'right';\n  items: T[];\n  itemComponent: ReactNode;\n  folderComponent: ReactNode;\n  footerComponent?: ReactNode;\n  searchTerm: string;\n  handleSearchTerm: (searchTerm: string) => void;\n  toggleOpen: () => void;\n  handleCreateItem: () => void;\n  handleCreateFolder: () => void;\n  handleDrop: (e: any) => void;\n}\n\nconst Sidebar = <T,>({\n  isOpen,\n  addItemButtonTitle,\n  side,\n  items,\n  itemComponent,\n  folderComponent,\n  footerComponent,\n  searchTerm,\n  handleSearchTerm,\n  toggleOpen,\n  handleCreateItem,\n  handleCreateFolder,\n  handleDrop,\n}: Props<T>) => {\n  const { t } = useTranslation('promptbar');\n\n  const allowDrop = (e: any) => {\n    e.preventDefault();\n  };\n\n  const highlightDrop = (e: any) => {\n    e.target.style.background = '#343541';\n  };\n\n  const removeHighlight = (e: any) => {\n    e.target.style.background = 'none';\n  };\n\n  return isOpen ? (\n    <div>\n      <div\n        className={`fixed top-0 ${side}-0 z-40 flex h-full w-[260px] flex-none flex-col space-y-2 bg-[#202123] p-2 text-[14px] transition-all sm:relative sm:top-0`}\n      >\n        <div className=\"flex items-center\">\n          <button\n            className=\"text-sidebar flex w-[190px] flex-shrink-0 cursor-pointer select-none items-center gap-3 rounded-md border border-white/20 p-3 text-white transition-colors duration-200 hover:bg-gray-500/10\"\n            onClick={() => {\n              handleCreateItem();\n              handleSearchTerm('');\n            }}\n          >\n            <IconPlus size={16} />\n            {addItemButtonTitle}\n          </button>\n\n          <button\n            className=\"ml-2 flex flex-shrink-0 cursor-pointer items-center gap-3 rounded-md border border-white/20 p-3 text-sm text-white transition-colors duration-200 hover:bg-gray-500/10\"\n            onClick={handleCreateFolder}\n          >\n            <IconFolderPlus size={16} />\n          </button>\n        </div>\n        <Search\n          placeholder={t('Search...') || ''}\n          searchTerm={searchTerm}\n          onSearch={handleSearchTerm}\n        />\n\n        <div className=\"flex-grow overflow-auto\">\n          {items?.length > 0 && (\n            <div className=\"flex border-b border-white/20 pb-2\">\n              {folderComponent}\n            </div>\n          )}\n\n          {items?.length > 0 ? (\n            <div\n              className=\"pt-2\"\n              onDrop={handleDrop}\n              onDragOver={allowDrop}\n              onDragEnter={highlightDrop}\n              onDragLeave={removeHighlight}\n            >\n              {itemComponent}\n            </div>\n          ) : (\n            <div className=\"mt-8 select-none text-center text-white opacity-50\">\n              <IconMistOff className=\"mx-auto mb-3\" />\n              <span className=\"text-[14px] leading-normal\">\n                {t('No data.')}\n              </span>\n            </div>\n          )}\n        </div>\n        {footerComponent}\n      </div>\n\n      <CloseSidebarButton onClick={toggleOpen} side={side} />\n    </div>\n  ) : (\n    <OpenSidebarButton onClick={toggleOpen} side={side} />\n  );\n};\n\nexport default Sidebar;\n","file":"/components/Sidebar/Sidebar.tsx","fileHash":"557b0f5d1c7aa0a5cc2ec36b927532866eeecc32009988819e64bf5aa47f0af0","hash":"557b0f5d1c7aa0a5cc2ec36b927532866eeecc32009988819e64bf5aa47f0af0","processedContent":"import { IconFolderPlus, IconMistOff, IconPlus } from '@tabler/icons-react';\nimport { ReactNode } from 'react';\n\"\"\"\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ReactNode#: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/: undefined\n\"\"\"\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  CloseSidebarButton, #This code defines a React component that renders a button and a div element. The button is positioned on the side of the screen and has an arrow icon. When clicked, it triggers an event handler function. The div element is used to create a dark overlay that appears when the button is clicked on small screens.\n  OpenSidebarButton, #This code defines a button component that displays an arrow icon and triggers an `onClick` event when clicked. The button is positioned on the right or left side of the screen, depending on the value of the `side` prop, and has a fixed position to stay in the same place even when scrolling.\n} from './components/OpenCloseButton'; #The code defines two React components, `CloseSidebarButton` and `OpenSidebarButton`, which are used to display a button with an arrow icon on the left or right side of the screen. When clicked, they trigger event handler functions and create a dark overlay on small screens.\n\nimport Search from '../Search';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/Search.: This code defines a search bar component for a web application. It takes in three props: placeholder, searchTerm, and onSearch. The component renders an input field with a clear button that calls the onSearch function when clicked.\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`index.ts`/: This code defines a search bar component for a web application that takes in three props: placeholder, searchTerm, and onSearch. The component renders an input field with a clear button that calls the onSearch function when clicked.\n\"\"\"\n\ninterface Props<T> {\n  \"\"\"This code defines a React component interface for a folder tree component, with properties that include the ability to add items, search for items, and toggle the open/closed state of the component.\"\"\"\n  pass\n\nconst Sidebar = <T,>({\n  \"\"\"This code defines a React component for a folder tree, with properties that allow users to add items, search for items, and toggle the open/closed state of the component.\"\"\"\n  pass\n\nexport default Sidebar; #This code defines a React component for a folder tree, with properties that allow users to add items, search for items, and toggle the open/closed state of the component.\n","documentation":"The code defines a React component for a folder tree that allows users to add, search, and toggle the open/closed state of items."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/","attributes":{"range":[0,0,19,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/","content":"import { FC } from 'react';\n\ninterface Props {\n  text: string;\n  icon: JSX.Element;\n  onClick: () => void;\n}\n\nexport const SidebarButton: FC<Props> = ({ text, icon, onClick }) => {\n  return (\n    <button\n      className=\"flex w-full cursor-pointer select-none items-center gap-3 rounded-md py-3 px-3 text-[14px] leading-3 text-white transition-colors duration-200 hover:bg-gray-500/10\"\n      onClick={onClick}\n    >\n      <div>{icon}</div>\n      <span>{text}</span>\n    </button>\n  );\n};\n","file":"/components/Sidebar/SidebarButton.tsx","language":"typescript","fileHash":"25c2fa7604e1bf1faba98d898c8171c2760486fd748e649cebf87d92dcc9956d","hash":"25c2fa7604e1bf1faba98d898c8171c2760486fd748e649cebf87d92dcc9956d","processedContent":"import { FC } from 'react';\n\"\"\"\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/: undefined\n\"\"\"\n\ninterface Props {\n  \"\"\"This code defines a component's properties, including a text string, an icon element, and an onClick event handler.\"\"\"\n  pass\n\nexport const SidebarButton: FC<Props> = ({ text, icon, onClick }) => {\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/Props#: This code defines a component's properties, including a text string, an icon element, and an onClick event handler.\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#: undefined\n\"\"\"\n  \"\"\"This code defines a function that takes three arguments: `text`, `icon`, and `onClick`. It returns a React component that renders a button with an icon and text. The button has a hover effect and an onClick event handler.\"\"\"\n  pass\n","documentation":"This code defines a React component called `SidebarButton` that renders a button with an icon and text. The button has a hover effect and an onClick event handler."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/Props#","attributes":{"range":[2,0,6,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/Props#","content":"interface Props {\n  text: string;\n  icon: JSX.Element;\n  onClick: () => void;\n}","file":"/components/Sidebar/SidebarButton.tsx","language":"typescript","fileHash":"25c2fa7604e1bf1faba98d898c8171c2760486fd748e649cebf87d92dcc9956d","hash":"2c7a776d28404e313efc3043f22f4bc661a035ba4422f1fe0a64f82852947548","processedContent":"interface Props {\n  text: string;\n  icon: JSX.Element;\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/Element#: undefined\n  \"\"\"\n  onClick: () => void;\n}","documentation":"This code defines a component's properties, including a text string, an icon element, and an onClick event handler."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/SidebarButton.","attributes":{"range":[8,40,18,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/SidebarButton.","content":"({ text, icon, onClick }) => {\n  return (\n    <button\n      className=\"flex w-full cursor-pointer select-none items-center gap-3 rounded-md py-3 px-3 text-[14px] leading-3 text-white transition-colors duration-200 hover:bg-gray-500/10\"\n      onClick={onClick}\n    >\n      <div>{icon}</div>\n      <span>{text}</span>\n    </button>\n  );\n}","file":"/components/Sidebar/SidebarButton.tsx","language":"typescript","fileHash":"25c2fa7604e1bf1faba98d898c8171c2760486fd748e649cebf87d92dcc9956d","hash":"a482380a90ca6cef4066776f4e9173c5f1b0a9a5d0ba48040229456a25b1d3bb","processedContent":"({ text, icon, onClick }) => {\n  return (\n    <button #undefined\n      className=\"flex w-full cursor-pointer select-none items-center gap-3 rounded-md py-3 px-3 text-[14px] leading-3 text-white transition-colors duration-200 hover:bg-gray-500/10\" #undefined\n      onClick={onClick} #undefined\n    >\n      <div>{icon}</div>\n      \"\"\"\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n      \"\"\"\n      <span>{text}</span>\n      \"\"\"\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#span.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#span.: undefined\n      \"\"\"\n    </button> #undefined\n  );\n}","documentation":"This code defines a function that takes three arguments: `text`, `icon`, and `onClick`. It returns a React component that renders a button with an icon and text. The button has a hover effect and an onClick event handler."}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/Element#","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/Element#","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/Props#text.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/Props#text.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/Props#icon.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/Props#icon.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/Props#onClick.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/Props#onClick.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onClick.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onClick.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#span.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#span.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`index.ts`/","attributes":{"range":[0,0,1,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`index.ts`/","content":"export { default } from './Search';\n","file":"/components/Search/index.ts","language":"typescript","fileHash":"25ef03b91c216b33b9883057a16bebf1e21f01af7b38849a8404562463a666a6","hash":"25ef03b91c216b33b9883057a16bebf1e21f01af7b38849a8404562463a666a6","processedContent":"export { default } from './Search';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/Search.: This code defines a search bar component for a web application. It takes in three props: placeholder, searchTerm, and onSearch. The component renders an input field with a clear button that calls the onSearch function when clicked.\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/: This code defines a search bar component for a web application that takes in three props: placeholder, searchTerm, and onSearch. The component renders an input field with a clear button that calls the onSearch function when clicked.\n\"\"\"\n","documentation":"This code defines a search bar component for a web application that takes in three props: placeholder, searchTerm, and onSearch. The component renders an input field with a clear button that calls the onSearch function when clicked."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/Search.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/Search.","language":"typescript","range":[10,26,40,1],"content":"({ placeholder, searchTerm, onSearch }) => {\n  const { t } = useTranslation('sidebar');\n\n  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    onSearch(e.target.value);\n  };\n\n  const clearSearch = () => {\n    onSearch('');\n  };\n\n  return (\n    <div className=\"relative flex items-center\">\n      <input\n        className=\"w-full flex-1 rounded-md border border-neutral-600 bg-[#202123] px-4 py-3 pr-10 text-[14px] leading-3 text-white\"\n        type=\"text\"\n        placeholder={t(placeholder) || ''}\n        value={searchTerm}\n        onChange={handleSearchChange}\n      />\n\n      {searchTerm && (\n        <IconX\n          className=\"absolute right-4 cursor-pointer text-neutral-300 hover:text-neutral-400\"\n          size={18}\n          onClick={clearSearch}\n        />\n      )}\n    </div>\n  );\n}","file":"/components/Search/Search.tsx","fileHash":"eb87cea90c9436bd9e7ee5b4fc0fba61d60f14ade365ce10cde5356fec0cce21","hash":"d29b524eae046d1de2d32762b9a4b8526c3476174bfa38c2db8915b8f87883b1","processedContent":"({ placeholder, searchTerm, onSearch }) => {\n  const { t } = useTranslation('sidebar');\n\n  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ChangeEvent#: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLInputElement#: undefined\n  \"\"\"\n    onSearch(e.target.value); #undefined\n  };\n\n  const clearSearch = () => {\n    onSearch('');\n  };\n\n  return (\n    <div className=\"relative flex items-center\">\n    \"\"\"\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n    \"\"\"\n      <input #undefined\n        className=\"w-full flex-1 rounded-md border border-neutral-600 bg-[#202123] px-4 py-3 pr-10 text-[14px] leading-3 text-white\" #undefined\n        type=\"text\" #undefined\n        placeholder={t(placeholder) || ''} #undefined\n        value={searchTerm} #undefined\n        onChange={handleSearchChange} #undefined\n      />\n\n      {searchTerm && (\n        <IconX\n          className=\"absolute right-4 cursor-pointer text-neutral-300 hover:text-neutral-400\"\n          size={18}\n          onClick={clearSearch}\n        />\n      )}\n    </div> #undefined\n  );\n}","documentation":"This code defines a search bar component for a web application. It takes in three props: placeholder, searchTerm, and onSearch. The component renders an input field with a clear button that calls the onSearch function when clicked."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/","language":"typescript","range":[0,0,43,0],"content":"import { IconX } from '@tabler/icons-react';\nimport { FC } from 'react';\n\nimport { useTranslation } from 'next-i18next';\n\ninterface Props {\n  placeholder: string;\n  searchTerm: string;\n  onSearch: (searchTerm: string) => void;\n}\nconst Search: FC<Props> = ({ placeholder, searchTerm, onSearch }) => {\n  const { t } = useTranslation('sidebar');\n\n  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    onSearch(e.target.value);\n  };\n\n  const clearSearch = () => {\n    onSearch('');\n  };\n\n  return (\n    <div className=\"relative flex items-center\">\n      <input\n        className=\"w-full flex-1 rounded-md border border-neutral-600 bg-[#202123] px-4 py-3 pr-10 text-[14px] leading-3 text-white\"\n        type=\"text\"\n        placeholder={t(placeholder) || ''}\n        value={searchTerm}\n        onChange={handleSearchChange}\n      />\n\n      {searchTerm && (\n        <IconX\n          className=\"absolute right-4 cursor-pointer text-neutral-300 hover:text-neutral-400\"\n          size={18}\n          onClick={clearSearch}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Search;\n","file":"/components/Search/Search.tsx","fileHash":"eb87cea90c9436bd9e7ee5b4fc0fba61d60f14ade365ce10cde5356fec0cce21","hash":"eb87cea90c9436bd9e7ee5b4fc0fba61d60f14ade365ce10cde5356fec0cce21","processedContent":"import { IconX } from '@tabler/icons-react';\nimport { FC } from 'react';\n\"\"\"\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/: undefined\n\"\"\"\n\nimport { useTranslation } from 'next-i18next';\n\ninterface Props {\n  \"\"\"This code defines a component's properties, including a placeholder for the search input, a search term, and a function to handle the search event.\"\"\"\n  pass\nconst Search: FC<Props> = ({ placeholder, searchTerm, onSearch }) => {\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/Props#: This code defines a component's properties, including a placeholder for the search input, a search term, and a function to handle the search event.\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#: undefined\n\"\"\"\n  \"\"\"This code defines a search bar component for a web application. It takes in three props: placeholder, searchTerm, and onSearch. The component renders an input field with a clear button that calls the onSearch function when clicked.\"\"\"\n  pass\n\nexport default Search; #This code defines a search bar component for a web application. It takes in three props: placeholder, searchTerm, and onSearch. The component renders an input field with a clear button that calls the onSearch function when clicked.\n","documentation":"This code defines a search bar component for a web application that takes in three props: placeholder, searchTerm, and onSearch. The component renders an input field with a clear button that calls the onSearch function when clicked."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#","attributes":{"range":[11,0,25,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#","content":"interface Props<T> {\n  isOpen: boolean;\n  addItemButtonTitle: string;\n  side: 'left' | 'right';\n  items: T[];\n  itemComponent: ReactNode;\n  folderComponent: ReactNode;\n  footerComponent?: ReactNode;\n  searchTerm: string;\n  handleSearchTerm: (searchTerm: string) => void;\n  toggleOpen: () => void;\n  handleCreateItem: () => void;\n  handleCreateFolder: () => void;\n  handleDrop: (e: any) => void;\n}","file":"/components/Sidebar/Sidebar.tsx","language":"typescript","fileHash":"557b0f5d1c7aa0a5cc2ec36b927532866eeecc32009988819e64bf5aa47f0af0","hash":"6aec163a8c8fff1d702aabffa1a567bcb6e2cf58d0e4c11a3e68a88ecfcfa845","processedContent":"interface Props<T> {\n  isOpen: boolean;\n  addItemButtonTitle: string;\n  side: 'left' | 'right';\n  items: T[]; #undefined\n  itemComponent: ReactNode; #undefined\n  folderComponent: ReactNode; #undefined\n  footerComponent?: ReactNode; #undefined\n  searchTerm: string;\n  handleSearchTerm: (searchTerm: string) => void;\n  toggleOpen: () => void;\n  handleCreateItem: () => void;\n  handleCreateFolder: () => void;\n  handleDrop: (e: any) => void;\n}","documentation":"This code defines a React component interface for a folder tree component, with properties that include the ability to add items, search for items, and toggle the open/closed state of the component."}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ReactNode#","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ReactNode#","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/CloseSidebarButton.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/CloseSidebarButton.","language":"typescript","range":[7,34,26,1],"content":"({ onClick, side }: Props) => {\n  return (\n    <>\n      <button\n        className={`fixed top-5 ${\n          side === 'right' ? 'right-[270px]' : 'left-[270px]'\n        } z-50 h-7 w-7 hover:text-gray-400 dark:text-white dark:hover:text-gray-300 sm:top-0.5 sm:${\n          side === 'right' ? 'right-[270px]' : 'left-[270px]'\n        } sm:h-8 sm:w-8 sm:text-neutral-700`}\n        onClick={onClick}\n      >\n        {side === 'right' ? <IconArrowBarRight /> : <IconArrowBarLeft />}\n      </button>\n      <div\n        onClick={onClick}\n        className=\"absolute top-0 left-0 z-10 h-full w-full bg-black opacity-70 sm:hidden\"\n      ></div>\n    </>\n  );\n}","file":"/components/Sidebar/components/OpenCloseButton.tsx","fileHash":"b60d675b5ecd9fb1cad65606f0d899e7202cac3c8bfa058c2d693f5dd110d5d7","hash":"c46ad796c81dc67ae77ccb9bc14a4fb1c86115d683ca247c4e8e6062260d620e","processedContent":"({ onClick, side }: Props) => {\n  return (\n    <>\n      <button #undefined\n        className={`fixed top-5 ${ #undefined\n          side === 'right' ? 'right-[270px]' : 'left-[270px]'\n        } z-50 h-7 w-7 hover:text-gray-400 dark:text-white dark:hover:text-gray-300 sm:top-0.5 sm:${\n          side === 'right' ? 'right-[270px]' : 'left-[270px]'\n        } sm:h-8 sm:w-8 sm:text-neutral-700`}\n        onClick={onClick} #undefined\n      >\n        {side === 'right' ? <IconArrowBarRight /> : <IconArrowBarLeft />}\n      </button> #undefined\n      <div #undefined\n        onClick={onClick} #undefined\n        className=\"absolute top-0 left-0 z-10 h-full w-full bg-black opacity-70 sm:hidden\" #undefined\n      ></div> #undefined\n    </>\n  );\n}","documentation":"This code defines a React component that renders a button and a div element. The button is positioned on the side of the screen and has an arrow icon. When clicked, it triggers an event handler function. The div element is used to create a dark overlay that appears when the button is clicked on small screens."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/OpenSidebarButton.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/OpenSidebarButton.","language":"typescript","range":[28,33,41,1],"content":"({ onClick, side }: Props) => {\n  return (\n    <button\n      className={`fixed top-2.5 ${\n        side === 'right' ? 'right-2' : 'left-2'\n      } z-50 h-7 w-7 text-white hover:text-gray-400 dark:text-white dark:hover:text-gray-300 sm:top-0.5 sm:${\n        side === 'right' ? 'right-2' : 'left-2'\n      } sm:h-8 sm:w-8 sm:text-neutral-700`}\n      onClick={onClick}\n    >\n      {side === 'right' ? <IconArrowBarLeft /> : <IconArrowBarRight />}\n    </button>\n  );\n}","file":"/components/Sidebar/components/OpenCloseButton.tsx","fileHash":"b60d675b5ecd9fb1cad65606f0d899e7202cac3c8bfa058c2d693f5dd110d5d7","hash":"73599163890bd82e6ddae117da1706f98a5299b8e0e30c9ba58770920dae14e2","processedContent":"({ onClick, side }: Props) => {\n  return (\n    <button #undefined\n      className={`fixed top-2.5 ${ #undefined\n        side === 'right' ? 'right-2' : 'left-2'\n      } z-50 h-7 w-7 text-white hover:text-gray-400 dark:text-white dark:hover:text-gray-300 sm:top-0.5 sm:${\n        side === 'right' ? 'right-2' : 'left-2'\n      } sm:h-8 sm:w-8 sm:text-neutral-700`}\n      onClick={onClick} #undefined\n    >\n      {side === 'right' ? <IconArrowBarLeft /> : <IconArrowBarRight />}\n    </button> #undefined\n  );\n}","documentation":"This code defines a button component that displays an arrow icon and triggers an `onClick` event when clicked. The button is positioned on the right or left side of the screen, depending on the value of the `side` prop, and has a fixed position to stay in the same place even when scrolling."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/","language":"typescript","range":[0,0,42,0],"content":"import { IconArrowBarLeft, IconArrowBarRight } from '@tabler/icons-react';\n\ninterface Props {\n  onClick: any;\n  side: 'left' | 'right';\n}\n\nexport const CloseSidebarButton = ({ onClick, side }: Props) => {\n  return (\n    <>\n      <button\n        className={`fixed top-5 ${\n          side === 'right' ? 'right-[270px]' : 'left-[270px]'\n        } z-50 h-7 w-7 hover:text-gray-400 dark:text-white dark:hover:text-gray-300 sm:top-0.5 sm:${\n          side === 'right' ? 'right-[270px]' : 'left-[270px]'\n        } sm:h-8 sm:w-8 sm:text-neutral-700`}\n        onClick={onClick}\n      >\n        {side === 'right' ? <IconArrowBarRight /> : <IconArrowBarLeft />}\n      </button>\n      <div\n        onClick={onClick}\n        className=\"absolute top-0 left-0 z-10 h-full w-full bg-black opacity-70 sm:hidden\"\n      ></div>\n    </>\n  );\n};\n\nexport const OpenSidebarButton = ({ onClick, side }: Props) => {\n  return (\n    <button\n      className={`fixed top-2.5 ${\n        side === 'right' ? 'right-2' : 'left-2'\n      } z-50 h-7 w-7 text-white hover:text-gray-400 dark:text-white dark:hover:text-gray-300 sm:top-0.5 sm:${\n        side === 'right' ? 'right-2' : 'left-2'\n      } sm:h-8 sm:w-8 sm:text-neutral-700`}\n      onClick={onClick}\n    >\n      {side === 'right' ? <IconArrowBarLeft /> : <IconArrowBarRight />}\n    </button>\n  );\n};\n","file":"/components/Sidebar/components/OpenCloseButton.tsx","fileHash":"b60d675b5ecd9fb1cad65606f0d899e7202cac3c8bfa058c2d693f5dd110d5d7","hash":"b60d675b5ecd9fb1cad65606f0d899e7202cac3c8bfa058c2d693f5dd110d5d7","processedContent":"import { IconArrowBarLeft, IconArrowBarRight } from '@tabler/icons-react';\n\ninterface Props {\n  \"\"\"This code defines a component's properties, including an `onClick` event handler and a `side` property that can be either 'left' or 'right'.\"\"\"\n  pass\n\nexport const CloseSidebarButton = ({ onClick, side }: Props) => {\n  \"\"\"This code defines a React component that renders a button and a div element. The button is positioned on the side of the screen and has an arrow icon. When clicked, it triggers an event handler function. The div element is used to create a dark overlay that appears when the button is clicked on small screens.\"\"\"\n  pass\n\nexport const OpenSidebarButton = ({ onClick, side }: Props) => {\n  \"\"\"This code defines a button component that displays an arrow icon and triggers an `onClick` event when clicked. The button is positioned on the right or left side of the screen, depending on the value of the `side` prop, and has a fixed position to stay in the same place even when scrolling.\"\"\"\n  pass\n","documentation":"The code defines two React components, `CloseSidebarButton` and `OpenSidebarButton`, which are used to display a button with an arrow icon on the left or right side of the screen. When clicked, they trigger event handler functions and create a dark overlay on small screens."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#[T]","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#[T]","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#isOpen.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#isOpen.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#addItemButtonTitle.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#addItemButtonTitle.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#side.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#side.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#items.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#items.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#itemComponent.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#itemComponent.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#folderComponent.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#folderComponent.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#footerComponent.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#footerComponent.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#searchTerm.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#searchTerm.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#handleSearchTerm.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#handleSearchTerm.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#toggleOpen.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#toggleOpen.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#handleCreateItem.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#handleCreateItem.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#handleCreateFolder.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#handleCreateFolder.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#handleDrop.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#handleDrop.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/Props#placeholder.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/Props#placeholder.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/Props#searchTerm.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/Props#searchTerm.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/Props#onSearch.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/Props#onSearch.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onDrop.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onDrop.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onDragOver.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onDragOver.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onDragEnter.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onDragEnter.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onDragLeave.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onDragLeave.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/Props#onClick.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/Props#onClick.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/Props#side.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/Props#side.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/","attributes":{"range":[0,0,105,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/","content":"import { FC, useContext, useEffect, useReducer, useRef } from 'react';\n\nimport { useTranslation } from 'next-i18next';\n\nimport { useCreateReducer } from '@/hooks/useCreateReducer';\n\nimport { getSettings, saveSettings } from '@/utils/app/settings';\n\nimport { Settings } from '@/types/settings';\n\nimport HomeContext from '@/pages/api/home/home.context';\n\ninterface Props {\n  open: boolean;\n  onClose: () => void;\n}\n\nexport const SettingDialog: FC<Props> = ({ open, onClose }) => {\n  const { t } = useTranslation('settings');\n  const settings: Settings = getSettings();\n  const { state, dispatch } = useCreateReducer<Settings>({\n    initialState: settings,\n  });\n  const { dispatch: homeDispatch } = useContext(HomeContext);\n  const modalRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const handleMouseDown = (e: MouseEvent) => {\n      if (modalRef.current && !modalRef.current.contains(e.target as Node)) {\n        window.addEventListener('mouseup', handleMouseUp);\n      }\n    };\n\n    const handleMouseUp = (e: MouseEvent) => {\n      window.removeEventListener('mouseup', handleMouseUp);\n      onClose();\n    };\n\n    window.addEventListener('mousedown', handleMouseDown);\n\n    return () => {\n      window.removeEventListener('mousedown', handleMouseDown);\n    };\n  }, [onClose]);\n\n  const handleSave = () => {\n    homeDispatch({ field: 'lightMode', value: state.theme });\n    saveSettings(state);\n  };\n\n  // Render nothing if the dialog is not open.\n  if (!open) {\n    return <></>;\n  }\n\n  // Render the dialog.\n  return (\n    <div className=\"fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50\">\n      <div className=\"fixed inset-0 z-10 overflow-hidden\">\n        <div className=\"flex items-center justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0\">\n          <div\n            className=\"hidden sm:inline-block sm:h-screen sm:align-middle\"\n            aria-hidden=\"true\"\n          />\n\n          <div\n            ref={modalRef}\n            className=\"dark:border-netural-400 inline-block max-h-[400px] transform overflow-y-auto rounded-lg border border-gray-300 bg-white px-4 pt-5 pb-4 text-left align-bottom shadow-xl transition-all dark:bg-[#202123] sm:my-8 sm:max-h-[600px] sm:w-full sm:max-w-lg sm:p-6 sm:align-middle\"\n            role=\"dialog\"\n          >\n            <div className=\"text-lg pb-4 font-bold text-black dark:text-neutral-200\">\n              {t('Settings')}\n            </div>\n\n            <div className=\"text-sm font-bold mb-2 text-black dark:text-neutral-200\">\n              {t('Theme')}\n            </div>\n\n            <select\n              className=\"w-full cursor-pointer bg-transparent p-2 text-neutral-700 dark:text-neutral-200\"\n              value={state.theme}\n              onChange={(event) =>\n                dispatch({ field: 'theme', value: event.target.value })\n              }\n            >\n              <option value=\"dark\">{t('Dark mode')}</option>\n              <option value=\"light\">{t('Light mode')}</option>\n            </select>\n\n            <button\n              type=\"button\"\n              className=\"w-full px-4 py-2 mt-6 border rounded-lg shadow border-neutral-500 text-neutral-900 hover:bg-neutral-100 focus:outline-none dark:border-neutral-800 dark:border-opacity-50 dark:bg-white dark:text-black dark:hover:bg-neutral-300\"\n              onClick={() => {\n                handleSave();\n                onClose();\n              }}\n            >\n              {t('Save')}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","file":"/components/Settings/SettingDialog.tsx","language":"typescript","fileHash":"4077df72025ab253375990813840c466401f79e01a9e20b13a410ccd22d36f21","hash":"4077df72025ab253375990813840c466401f79e01a9e20b13a410ccd22d36f21","processedContent":"import { FC, useContext, useEffect, useReducer, useRef } from 'react';\n\"\"\"\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useReducer().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/: undefined\n\"\"\"\n\nimport { useTranslation } from 'next-i18next';\n\nimport { useCreateReducer } from '@/hooks/useCreateReducer';\n\nimport { getSettings, saveSettings } from '@/utils/app/settings';\n\nimport { Settings } from '@/types/settings';\n\nimport HomeContext from '@/pages/api/home/home.context';\n\ninterface Props {\n  \"\"\"This code defines a component's properties, including an open state and a function to close the component.\"\"\"\n  pass\n\nexport const SettingDialog: FC<Props> = ({ open, onClose }) => {\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/Props#: This code defines a component's properties, including an open state and a function to close the component.\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#: undefined\n\"\"\"\n  \"\"\"This code defines a React component that renders a modal dialog with a form to change the user's settings. The component uses the `useTranslation` hook to localize the text, and the `useCreateReducer` hook to manage the state of the form. The component also uses the `useContext` hook to access the home context and dispatch an action to save the settings.\"\"\"\n  pass\n","documentation":"This code defines a React component that renders a modal dialog with a form to change the user's settings. It uses the `useTranslation` hook to localize the text and the `useCreateReducer` hook to manage the state of the form. The component also uses the `useContext` hook to access the home context and dispatch an action to save the settings."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/Props#","attributes":{"range":[12,0,15,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/Props#","content":"interface Props {\n  open: boolean;\n  onClose: () => void;\n}","file":"/components/Settings/SettingDialog.tsx","language":"typescript","fileHash":"4077df72025ab253375990813840c466401f79e01a9e20b13a410ccd22d36f21","hash":"8f4c1615327faf6d82f1a761009a3f4e47f2c8905410c0704a19fafec534e8cf","processedContent":"interface Props {\n  open: boolean;\n  onClose: () => void;\n}","documentation":"This code defines a component's properties, including an open state and a function to close the component."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","attributes":{"range":[17,40,104,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","content":"({ open, onClose }) => {\n  const { t } = useTranslation('settings');\n  const settings: Settings = getSettings();\n  const { state, dispatch } = useCreateReducer<Settings>({\n    initialState: settings,\n  });\n  const { dispatch: homeDispatch } = useContext(HomeContext);\n  const modalRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const handleMouseDown = (e: MouseEvent) => {\n      if (modalRef.current && !modalRef.current.contains(e.target as Node)) {\n        window.addEventListener('mouseup', handleMouseUp);\n      }\n    };\n\n    const handleMouseUp = (e: MouseEvent) => {\n      window.removeEventListener('mouseup', handleMouseUp);\n      onClose();\n    };\n\n    window.addEventListener('mousedown', handleMouseDown);\n\n    return () => {\n      window.removeEventListener('mousedown', handleMouseDown);\n    };\n  }, [onClose]);\n\n  const handleSave = () => {\n    homeDispatch({ field: 'lightMode', value: state.theme });\n    saveSettings(state);\n  };\n\n  // Render nothing if the dialog is not open.\n  if (!open) {\n    return <></>;\n  }\n\n  // Render the dialog.\n  return (\n    <div className=\"fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50\">\n      <div className=\"fixed inset-0 z-10 overflow-hidden\">\n        <div className=\"flex items-center justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0\">\n          <div\n            className=\"hidden sm:inline-block sm:h-screen sm:align-middle\"\n            aria-hidden=\"true\"\n          />\n\n          <div\n            ref={modalRef}\n            className=\"dark:border-netural-400 inline-block max-h-[400px] transform overflow-y-auto rounded-lg border border-gray-300 bg-white px-4 pt-5 pb-4 text-left align-bottom shadow-xl transition-all dark:bg-[#202123] sm:my-8 sm:max-h-[600px] sm:w-full sm:max-w-lg sm:p-6 sm:align-middle\"\n            role=\"dialog\"\n          >\n            <div className=\"text-lg pb-4 font-bold text-black dark:text-neutral-200\">\n              {t('Settings')}\n            </div>\n\n            <div className=\"text-sm font-bold mb-2 text-black dark:text-neutral-200\">\n              {t('Theme')}\n            </div>\n\n            <select\n              className=\"w-full cursor-pointer bg-transparent p-2 text-neutral-700 dark:text-neutral-200\"\n              value={state.theme}\n              onChange={(event) =>\n                dispatch({ field: 'theme', value: event.target.value })\n              }\n            >\n              <option value=\"dark\">{t('Dark mode')}</option>\n              <option value=\"light\">{t('Light mode')}</option>\n            </select>\n\n            <button\n              type=\"button\"\n              className=\"w-full px-4 py-2 mt-6 border rounded-lg shadow border-neutral-500 text-neutral-900 hover:bg-neutral-100 focus:outline-none dark:border-neutral-800 dark:border-opacity-50 dark:bg-white dark:text-black dark:hover:bg-neutral-300\"\n              onClick={() => {\n                handleSave();\n                onClose();\n              }}\n            >\n              {t('Save')}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","file":"/components/Settings/SettingDialog.tsx","language":"typescript","fileHash":"4077df72025ab253375990813840c466401f79e01a9e20b13a410ccd22d36f21","hash":"8d32adbbc75ae7d87336c95d43c7a72213ca3e484f6ec339eda9c936417424ec","processedContent":"({ open, onClose }) => {\n  const { t } = useTranslation('settings');\n  const settings: Settings = getSettings();\n  const { state, dispatch } = useCreateReducer<Settings>({\n    initialState: settings,\n  });\n  const { dispatch: homeDispatch } = useContext(HomeContext);\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().: undefined\n  \"\"\"\n  const modalRef = useRef<HTMLDivElement>(null);\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLDivElement#: undefined\n  \"\"\"\n\n  useEffect(() => { #undefined\n    const handleMouseDown = (e: MouseEvent) => { #undefined\n      if (modalRef.current && !modalRef.current.contains(e.target as Node)) {\n      \"\"\"\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.: undefined\n      \"\"\"\n        window.addEventListener('mouseup', handleMouseUp);\n      }\n    };\n\n    const handleMouseUp = (e: MouseEvent) => { #undefined\n      window.removeEventListener('mouseup', handleMouseUp);\n      onClose();\n    };\n\n    window.addEventListener('mousedown', handleMouseDown);\n\n    return () => {\n      window.removeEventListener('mousedown', handleMouseDown);\n    };\n  }, [onClose]);\n\n  const handleSave = () => {\n    homeDispatch({ field: 'lightMode', value: state.theme });\n    saveSettings(state);\n  };\n\n  // Render nothing if the dialog is not open.\n  if (!open) {\n    return <></>;\n  }\n\n  // Render the dialog.\n  return (\n    <div className=\"fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50\">\n    \"\"\"\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n    \"\"\"\n      <div className=\"fixed inset-0 z-10 overflow-hidden\">\n      \"\"\"\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n      \"\"\"\n        <div className=\"flex items-center justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0\">\n        \"\"\"\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n        \"\"\"\n          <div #undefined\n            className=\"hidden sm:inline-block sm:h-screen sm:align-middle\" #undefined\n            aria-hidden=\"true\" #undefined\n          />\n\n          <div #undefined\n            ref={modalRef} #undefined\n            className=\"dark:border-netural-400 inline-block max-h-[400px] transform overflow-y-auto rounded-lg border border-gray-300 bg-white px-4 pt-5 pb-4 text-left align-bottom shadow-xl transition-all dark:bg-[#202123] sm:my-8 sm:max-h-[600px] sm:w-full sm:max-w-lg sm:p-6 sm:align-middle\" #undefined\n            role=\"dialog\" #undefined\n          >\n            <div className=\"text-lg pb-4 font-bold text-black dark:text-neutral-200\">\n            \"\"\"\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n            \"\"\"\n              {t('Settings')}\n            </div> #undefined\n\n            <div className=\"text-sm font-bold mb-2 text-black dark:text-neutral-200\">\n            \"\"\"\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n            \"\"\"\n              {t('Theme')}\n            </div> #undefined\n\n            <select #undefined\n              className=\"w-full cursor-pointer bg-transparent p-2 text-neutral-700 dark:text-neutral-200\" #undefined\n              value={state.theme} #undefined\n              onChange={(event) => #undefined\n                dispatch({ field: 'theme', value: event.target.value }) #undefined\n              }\n            >\n              <option value=\"dark\">{t('Dark mode')}</option>\n              \"\"\"\n              scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#option.: undefined\n              scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#option.: undefined\n              scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/OptionHTMLAttributes#value.: undefined\n              \"\"\"\n              <option value=\"light\">{t('Light mode')}</option>\n              \"\"\"\n              scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#option.: undefined\n              scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#option.: undefined\n              scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/OptionHTMLAttributes#value.: undefined\n              \"\"\"\n            </select> #undefined\n\n            <button #undefined\n              type=\"button\" #undefined\n              className=\"w-full px-4 py-2 mt-6 border rounded-lg shadow border-neutral-500 text-neutral-900 hover:bg-neutral-100 focus:outline-none dark:border-neutral-800 dark:border-opacity-50 dark:bg-white dark:text-black dark:hover:bg-neutral-300\" #undefined\n              onClick={() => { #undefined\n                handleSave();\n                onClose();\n              }}\n            >\n              {t('Save')}\n            </button> #undefined\n          </div> #undefined\n        </div>\n      </div>\n    </div>\n  );\n}","documentation":"This code defines a React component that renders a modal dialog with a form to change the user's settings. The component uses the `useTranslation` hook to localize the text, and the `useCreateReducer` hook to manage the state of the form. The component also uses the `useContext` hook to access the home context and dispatch an action to save the settings."}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/Props#open.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/Props#open.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/Props#onClose.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/Props#onClose.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLDivElement#","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLDivElement#","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/MouseEvent#","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/MouseEvent#","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/AriaAttributes#`\"aria-hidden\"`.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/AriaAttributes#`\"aria-hidden\"`.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ClassAttributes#ref.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ClassAttributes#ref.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#role.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#role.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#select.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#select.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SelectHTMLAttributes#value.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SelectHTMLAttributes#value.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SelectHTMLAttributes#onChange.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SelectHTMLAttributes#onChange.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ChangeEvent#target.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ChangeEvent#target.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#option.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#option.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/OptionHTMLAttributes#value.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/OptionHTMLAttributes#value.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ButtonHTMLAttributes#type.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ButtonHTMLAttributes#type.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/","attributes":{"range":[0,0,79,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/","content":"import { IconCheck, IconKey, IconX } from '@tabler/icons-react';\nimport { FC, KeyboardEvent, useEffect, useRef, useState } from 'react';\n\nimport { useTranslation } from 'next-i18next';\n\nimport { SidebarButton } from '../Sidebar/SidebarButton';\n\ninterface Props {\n  apiKey: string;\n  onApiKeyChange: (apiKey: string) => void;\n}\n\nexport const Key: FC<Props> = ({ apiKey, onApiKeyChange }) => {\n  const { t } = useTranslation('sidebar');\n  const [isChanging, setIsChanging] = useState(false);\n  const [newKey, setNewKey] = useState(apiKey);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const handleEnterDown = (e: KeyboardEvent<HTMLDivElement>) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      handleUpdateKey(newKey);\n    }\n  };\n\n  const handleUpdateKey = (newKey: string) => {\n    onApiKeyChange(newKey.trim());\n    setIsChanging(false);\n  };\n\n  useEffect(() => {\n    if (isChanging) {\n      inputRef.current?.focus();\n    }\n  }, [isChanging]);\n\n  return isChanging ? (\n    <div className=\"duration:200 flex w-full cursor-pointer items-center rounded-md py-3 px-3 transition-colors hover:bg-gray-500/10\">\n      <IconKey size={18} />\n\n      <input\n        ref={inputRef}\n        className=\"ml-2 h-[20px] flex-1 overflow-hidden overflow-ellipsis border-b border-neutral-400 bg-transparent pr-1 text-[12.5px] leading-3 text-left text-white outline-none focus:border-neutral-100\"\n        type=\"password\"\n        value={newKey}\n        onChange={(e) => setNewKey(e.target.value)}\n        onKeyDown={handleEnterDown}\n        placeholder={t('API Key') || 'API Key'}\n      />\n\n      <div className=\"flex w-[40px]\">\n        <IconCheck\n          className=\"ml-auto min-w-[20px] text-neutral-400 hover:text-neutral-100\"\n          size={18}\n          onClick={(e) => {\n            e.stopPropagation();\n            handleUpdateKey(newKey);\n          }}\n        />\n\n        <IconX\n          className=\"ml-auto min-w-[20px] text-neutral-400 hover:text-neutral-100\"\n          size={18}\n          onClick={(e) => {\n            e.stopPropagation();\n            setIsChanging(false);\n            setNewKey(apiKey);\n          }}\n        />\n      </div>\n    </div>\n  ) : (\n    <SidebarButton\n      text={t('OpenAI API Key')}\n      icon={<IconKey size={18} />}\n      onClick={() => setIsChanging(true)}\n    />\n  );\n};\n","file":"/components/Settings/Key.tsx","language":"typescript","fileHash":"4004aab2a8a87007c4259b5f3adc2578a74ee5d16b84cee9b052294361c49678","hash":"4004aab2a8a87007c4259b5f3adc2578a74ee5d16b84cee9b052294361c49678","processedContent":"import { IconCheck, IconKey, IconX } from '@tabler/icons-react';\nimport { FC, KeyboardEvent, useEffect, useRef, useState } from 'react';\n\"\"\"\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/: undefined\n\"\"\"\n\nimport { useTranslation } from 'next-i18next';\n\nimport { SidebarButton } from '../Sidebar/SidebarButton';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/SidebarButton.: This code defines a function that takes three arguments: `text`, `icon`, and `onClick`. It returns a React component that renders a button with an icon and text. The button has a hover effect and an onClick event handler.\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/: This code defines a React component called `SidebarButton` that renders a button with an icon and text. The button has a hover effect and an onClick event handler.\n\"\"\"\n\ninterface Props {\n  \"\"\"This code defines a component's properties, including an API key and a function to handle changes to the API key.\"\"\"\n  pass\n\nexport const Key: FC<Props> = ({ apiKey, onApiKeyChange }) => {\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Props#: This code defines a component's properties, including an API key and a function to handle changes to the API key.\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#: undefined\n\"\"\"\n  \"\"\"This code defines a function that renders a button with an icon and text. When clicked, it opens a form to input a new API key. The form has a cancel and save button, and the save button is only enabled when the user presses enter or clicks the save button.\"\"\"\n  pass\n","documentation":"The code defines a React component called `Key` that renders a button with an icon and text. When clicked, it opens a form to input a new API key, with a cancel and save button. The save button is only enabled when the user presses enter or clicks the save button."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Props#","attributes":{"range":[7,0,10,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Props#","content":"interface Props {\n  apiKey: string;\n  onApiKeyChange: (apiKey: string) => void;\n}","file":"/components/Settings/Key.tsx","language":"typescript","fileHash":"4004aab2a8a87007c4259b5f3adc2578a74ee5d16b84cee9b052294361c49678","hash":"bce0c362df548ac208783be08f9eff6ca7dc3ff45e327548c1c784ee2ac957fe","processedContent":"interface Props {\n  apiKey: string;\n  onApiKeyChange: (apiKey: string) => void;\n}","documentation":"This code defines a component's properties, including an API key and a function to handle changes to the API key."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Key.","attributes":{"range":[12,30,78,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Key.","content":"({ apiKey, onApiKeyChange }) => {\n  const { t } = useTranslation('sidebar');\n  const [isChanging, setIsChanging] = useState(false);\n  const [newKey, setNewKey] = useState(apiKey);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const handleEnterDown = (e: KeyboardEvent<HTMLDivElement>) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      handleUpdateKey(newKey);\n    }\n  };\n\n  const handleUpdateKey = (newKey: string) => {\n    onApiKeyChange(newKey.trim());\n    setIsChanging(false);\n  };\n\n  useEffect(() => {\n    if (isChanging) {\n      inputRef.current?.focus();\n    }\n  }, [isChanging]);\n\n  return isChanging ? (\n    <div className=\"duration:200 flex w-full cursor-pointer items-center rounded-md py-3 px-3 transition-colors hover:bg-gray-500/10\">\n      <IconKey size={18} />\n\n      <input\n        ref={inputRef}\n        className=\"ml-2 h-[20px] flex-1 overflow-hidden overflow-ellipsis border-b border-neutral-400 bg-transparent pr-1 text-[12.5px] leading-3 text-left text-white outline-none focus:border-neutral-100\"\n        type=\"password\"\n        value={newKey}\n        onChange={(e) => setNewKey(e.target.value)}\n        onKeyDown={handleEnterDown}\n        placeholder={t('API Key') || 'API Key'}\n      />\n\n      <div className=\"flex w-[40px]\">\n        <IconCheck\n          className=\"ml-auto min-w-[20px] text-neutral-400 hover:text-neutral-100\"\n          size={18}\n          onClick={(e) => {\n            e.stopPropagation();\n            handleUpdateKey(newKey);\n          }}\n        />\n\n        <IconX\n          className=\"ml-auto min-w-[20px] text-neutral-400 hover:text-neutral-100\"\n          size={18}\n          onClick={(e) => {\n            e.stopPropagation();\n            setIsChanging(false);\n            setNewKey(apiKey);\n          }}\n        />\n      </div>\n    </div>\n  ) : (\n    <SidebarButton\n      text={t('OpenAI API Key')}\n      icon={<IconKey size={18} />}\n      onClick={() => setIsChanging(true)}\n    />\n  );\n}","file":"/components/Settings/Key.tsx","language":"typescript","fileHash":"4004aab2a8a87007c4259b5f3adc2578a74ee5d16b84cee9b052294361c49678","hash":"e2247c3b40c2dcb0198e97760cea34428c945a1cf084e20c07ccd10a1e83b52b","processedContent":"({ apiKey, onApiKeyChange }) => {\n  const { t } = useTranslation('sidebar');\n  const [isChanging, setIsChanging] = useState(false); #undefined\n  const [newKey, setNewKey] = useState(apiKey); #undefined\n  const inputRef = useRef<HTMLInputElement>(null);\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLInputElement#: undefined\n  \"\"\"\n\n  const handleEnterDown = (e: KeyboardEvent<HTMLDivElement>) => {\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLDivElement#: undefined\n  \"\"\"\n    if (e.key === 'Enter') { #undefined\n      e.preventDefault(); #undefined\n      handleUpdateKey(newKey);\n    }\n  };\n\n  const handleUpdateKey = (newKey: string) => {\n    onApiKeyChange(newKey.trim());\n    setIsChanging(false);\n  };\n\n  useEffect(() => { #undefined\n    if (isChanging) {\n      inputRef.current?.focus(); #undefined\n    }\n  }, [isChanging]);\n\n  return isChanging ? (\n    <div className=\"duration:200 flex w-full cursor-pointer items-center rounded-md py-3 px-3 transition-colors hover:bg-gray-500/10\">\n    \"\"\"\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n    \"\"\"\n      <IconKey size={18} />\n\n      <input #undefined\n        ref={inputRef} #undefined\n        className=\"ml-2 h-[20px] flex-1 overflow-hidden overflow-ellipsis border-b border-neutral-400 bg-transparent pr-1 text-[12.5px] leading-3 text-left text-white outline-none focus:border-neutral-100\" #undefined\n        type=\"password\" #undefined\n        value={newKey} #undefined\n        onChange={(e) => setNewKey(e.target.value)}\n        \"\"\"\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#onChange.: undefined\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ChangeEvent#target.: undefined\n        \"\"\"\n        onKeyDown={handleEnterDown} #undefined\n        placeholder={t('API Key') || 'API Key'} #undefined\n      />\n\n      <div className=\"flex w-[40px]\">\n      \"\"\"\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n      \"\"\"\n        <IconCheck\n          className=\"ml-auto min-w-[20px] text-neutral-400 hover:text-neutral-100\"\n          size={18}\n          onClick={(e) => {\n            e.stopPropagation();\n            handleUpdateKey(newKey);\n          }}\n        />\n\n        <IconX\n          className=\"ml-auto min-w-[20px] text-neutral-400 hover:text-neutral-100\"\n          size={18}\n          onClick={(e) => {\n            e.stopPropagation();\n            setIsChanging(false);\n            setNewKey(apiKey);\n          }}\n        />\n      </div> #undefined\n    </div>\n  ) : (\n    <SidebarButton #This code defines a function that takes three arguments: `text`, `icon`, and `onClick`. It returns a React component that renders a button with an icon and text. The button has a hover effect and an onClick event handler.\n      text={t('OpenAI API Key')} #undefined\n      icon={<IconKey size={18} />} #undefined\n      onClick={() => setIsChanging(true)} #undefined\n    />\n  );\n}","documentation":"This code defines a function that renders a button with an icon and text. When clicked, it opens a form to input a new API key. The form has a cancel and save button, and the save button is only enabled when the user presses enter or clicks the save button."}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Props#apiKey.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Props#apiKey.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Props#onApiKeyChange.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Props#onApiKeyChange.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLInputElement#","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLInputElement#","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#key.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#key.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/BaseSyntheticEvent#preventDefault().","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/BaseSyntheticEvent#preventDefault().","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#input.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#input.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#type.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#type.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#value.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#value.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#onChange.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#onChange.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onKeyDown.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onKeyDown.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#placeholder.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#placeholder.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Import.tsx`/","attributes":{"range":[0,0,51,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Import.tsx`/","content":"import { IconFileImport } from '@tabler/icons-react';\nimport { FC } from 'react';\n\nimport { useTranslation } from 'next-i18next';\n\nimport { SupportedExportFormats } from '@/types/export';\n\nimport { SidebarButton } from '../Sidebar/SidebarButton';\n\ninterface Props {\n  onImport: (data: SupportedExportFormats) => void;\n}\n\nexport const Import: FC<Props> = ({ onImport }) => {\n  const { t } = useTranslation('sidebar');\n  return (\n    <>\n      <input\n        id=\"import-file\"\n        className=\"sr-only\"\n        tabIndex={-1}\n        type=\"file\"\n        accept=\".json\"\n        onChange={(e) => {\n          if (!e.target.files?.length) return;\n\n          const file = e.target.files[0];\n          const reader = new FileReader();\n          reader.onload = (e) => {\n            let json = JSON.parse(e.target?.result as string);\n            onImport(json);\n          };\n          reader.readAsText(file);\n        }}\n      />\n\n      <SidebarButton\n        text={t('Import data')}\n        icon={<IconFileImport size={18} />}\n        onClick={() => {\n          const importFile = document.querySelector(\n            '#import-file',\n          ) as HTMLInputElement;\n          if (importFile) {\n            importFile.click();\n          }\n        }}\n      />\n    </>\n  );\n};\n","file":"/components/Settings/Import.tsx","language":"typescript","fileHash":"8cbb01f22cfdf8a9cf0b3082a9605f2a17f72b289195cd58fc8ca9a54dc5aeea","hash":"8cbb01f22cfdf8a9cf0b3082a9605f2a17f72b289195cd58fc8ca9a54dc5aeea","processedContent":"import { IconFileImport } from '@tabler/icons-react';\nimport { FC } from 'react';\n\"\"\"\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/: undefined\n\"\"\"\n\nimport { useTranslation } from 'next-i18next';\n\nimport { SupportedExportFormats } from '@/types/export';\n\nimport { SidebarButton } from '../Sidebar/SidebarButton';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/SidebarButton.: This code defines a function that takes three arguments: `text`, `icon`, and `onClick`. It returns a React component that renders a button with an icon and text. The button has a hover effect and an onClick event handler.\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/: This code defines a React component called `SidebarButton` that renders a button with an icon and text. The button has a hover effect and an onClick event handler.\n\"\"\"\n\ninterface Props {\n  \"\"\"This code defines a type called `Props` that has a single property called `onImport`. The `onImport` property is a function that takes a single argument of type `SupportedExportFormats` and returns nothing. In other words, it's a callback function that will be called when the user imports data from a supported export format.\"\"\"\n  pass\n\nexport const Import: FC<Props> = ({ onImport }) => {\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Import.tsx`/Props#: This code defines a type called `Props` that has a single property called `onImport`. The `onImport` property is a function that takes a single argument of type `SupportedExportFormats` and returns nothing. In other words, it's a callback function that will be called when the user imports data from a supported export format.\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#: undefined\n\"\"\"\n  \"\"\"This code defines a function that returns a React component that renders a button with an icon and text. The button has a hover effect and an onClick event handler that imports data from a JSON file when clicked.\"\"\"\n  pass\n","documentation":"This code defines a React component called `Import` that renders a button with an icon and text. When clicked, the button imports data from a JSON file using a callback function passed as a prop."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Import.tsx`/Props#","attributes":{"range":[9,0,11,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Import.tsx`/Props#","content":"interface Props {\n  onImport: (data: SupportedExportFormats) => void;\n}","file":"/components/Settings/Import.tsx","language":"typescript","fileHash":"8cbb01f22cfdf8a9cf0b3082a9605f2a17f72b289195cd58fc8ca9a54dc5aeea","hash":"b3fa0a19a72feb44fa6c2ee25e4bfe940f561f04daa5aa05c4fb6201757fa8c6","processedContent":"interface Props {\n  onImport: (data: SupportedExportFormats) => void;\n}","documentation":"This code defines a type called `Props` that has a single property called `onImport`. The `onImport` property is a function that takes a single argument of type `SupportedExportFormats` and returns nothing. In other words, it's a callback function that will be called when the user imports data from a supported export format."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Import.tsx`/Import.","attributes":{"range":[13,33,50,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Import.tsx`/Import.","content":"({ onImport }) => {\n  const { t } = useTranslation('sidebar');\n  return (\n    <>\n      <input\n        id=\"import-file\"\n        className=\"sr-only\"\n        tabIndex={-1}\n        type=\"file\"\n        accept=\".json\"\n        onChange={(e) => {\n          if (!e.target.files?.length) return;\n\n          const file = e.target.files[0];\n          const reader = new FileReader();\n          reader.onload = (e) => {\n            let json = JSON.parse(e.target?.result as string);\n            onImport(json);\n          };\n          reader.readAsText(file);\n        }}\n      />\n\n      <SidebarButton\n        text={t('Import data')}\n        icon={<IconFileImport size={18} />}\n        onClick={() => {\n          const importFile = document.querySelector(\n            '#import-file',\n          ) as HTMLInputElement;\n          if (importFile) {\n            importFile.click();\n          }\n        }}\n      />\n    </>\n  );\n}","file":"/components/Settings/Import.tsx","language":"typescript","fileHash":"8cbb01f22cfdf8a9cf0b3082a9605f2a17f72b289195cd58fc8ca9a54dc5aeea","hash":"d928921d99cb2654a8c0f0187ecbab43b36c9909727475f81efadcfd2d711280","processedContent":"({ onImport }) => {\n  const { t } = useTranslation('sidebar');\n  return (\n    <>\n      <input #undefined\n        id=\"import-file\" #undefined\n        className=\"sr-only\" #undefined\n        tabIndex={-1} #undefined\n        type=\"file\" #undefined\n        accept=\".json\" #undefined\n        onChange={(e) => { #undefined\n          if (!e.target.files?.length) return; #undefined\n\n          const file = e.target.files[0]; #undefined\n          const reader = new FileReader();\n          reader.onload = (e) => {\n            let json = JSON.parse(e.target?.result as string);\n            onImport(json);\n          };\n          reader.readAsText(file);\n        }}\n      />\n\n      <SidebarButton #This code defines a function that takes three arguments: `text`, `icon`, and `onClick`. It returns a React component that renders a button with an icon and text. The button has a hover effect and an onClick event handler.\n        text={t('Import data')} #undefined\n        icon={<IconFileImport size={18} />} #undefined\n        onClick={() => { #undefined\n          const importFile = document.querySelector(\n            '#import-file',\n          ) as HTMLInputElement; #undefined\n          if (importFile) {\n            importFile.click();\n          }\n        }}\n      />\n    </>\n  );\n}","documentation":"This code defines a function that returns a React component that renders a button with an icon and text. The button has a hover effect and an onClick event handler that imports data from a JSON file when clicked."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Import.tsx`/Props#onImport.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Import.tsx`/Props#onImport.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#id.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#id.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#tabIndex.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#tabIndex.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#accept.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#accept.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/Props#","attributes":{"range":[5,0,9,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/Props#","content":"interface Props {\n  placeholder: string;\n  searchTerm: string;\n  onSearch: (searchTerm: string) => void;\n}","file":"/components/Search/Search.tsx","language":"typescript","fileHash":"eb87cea90c9436bd9e7ee5b4fc0fba61d60f14ade365ce10cde5356fec0cce21","hash":"7d825b304ec7190f31c5c4c989ac2435b1da5db4fee4ea738938e2f83419879c","processedContent":"interface Props {\n  placeholder: string;\n  searchTerm: string;\n  onSearch: (searchTerm: string) => void;\n}","documentation":"This code defines a component's properties, including a placeholder for the search input, a search term, and a function to handle the search event."}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ChangeEvent#","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ChangeEvent#","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`index.ts`/","attributes":{"range":[0,0,1,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`index.ts`/","content":"export { default } from './Promptbar';\n","file":"/components/Promptbar/index.ts","language":"typescript","fileHash":"a10b94d463fb836474cdbeea4a55f4338ebab8eb47f94fcba5ade02b8c8e53d2","hash":"a10b94d463fb836474cdbeea4a55f4338ebab8eb47f94fcba5ade02b8c8e53d2","processedContent":"export { default } from './Promptbar';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/Promptbar.: This code defines a React component for a prompt bar that allows users to add, search, and organize prompts. It uses the `useContext` hook to access the state of the `HomeContext` and the `PromptbarContext`, and it defines several functions to handle user interactions such as creating, deleting, and updating prompts.\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/: This code defines a React component for a prompt bar that allows users to add, search, and organize prompts. It uses the `useContext` hook to access the state of two different contexts and defines several functions to handle user interactions.\n\"\"\"\n","documentation":"This code defines a React component for a prompt bar that allows users to add, search, and organize prompts. It uses the `useContext` hook to access the state of two different contexts and defines several functions to handle user interactions."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/Promptbar.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/Promptbar.","language":"typescript","range":[22,18,149,1],"content":"() => {\n  const { t } = useTranslation('promptbar');\n\n  const promptBarContextValue = useCreateReducer<PromptbarInitialState>({\n    initialState,\n  });\n\n  const {\n    state: { prompts, defaultModelId, showPromptbar },\n    dispatch: homeDispatch,\n    handleCreateFolder,\n  } = useContext(HomeContext);\n\n  const {\n    state: { searchTerm, filteredPrompts },\n    dispatch: promptDispatch,\n  } = promptBarContextValue;\n\n  const handleTogglePromptbar = () => {\n    homeDispatch({ field: 'showPromptbar', value: !showPromptbar });\n    localStorage.setItem('showPromptbar', JSON.stringify(!showPromptbar));\n  };\n\n  const handleCreatePrompt = () => {\n    if (defaultModelId) {\n      const newPrompt: Prompt = {\n        id: uuidv4(),\n        name: `Prompt ${prompts.length + 1}`,\n        description: '',\n        content: '',\n        model: OpenAIModels[defaultModelId],\n        folderId: null,\n      };\n\n      const updatedPrompts = [...prompts, newPrompt];\n\n      homeDispatch({ field: 'prompts', value: updatedPrompts });\n\n      savePrompts(updatedPrompts);\n    }\n  };\n\n  const handleDeletePrompt = (prompt: Prompt) => {\n    const updatedPrompts = prompts.filter((p) => p.id !== prompt.id);\n\n    homeDispatch({ field: 'prompts', value: updatedPrompts });\n    savePrompts(updatedPrompts);\n  };\n\n  const handleUpdatePrompt = (prompt: Prompt) => {\n    const updatedPrompts = prompts.map((p) => {\n      if (p.id === prompt.id) {\n        return prompt;\n      }\n\n      return p;\n    });\n    homeDispatch({ field: 'prompts', value: updatedPrompts });\n\n    savePrompts(updatedPrompts);\n  };\n\n  const handleDrop = (e: any) => {\n    if (e.dataTransfer) {\n      const prompt = JSON.parse(e.dataTransfer.getData('prompt'));\n\n      const updatedPrompt = {\n        ...prompt,\n        folderId: e.target.dataset.folderId,\n      };\n\n      handleUpdatePrompt(updatedPrompt);\n\n      e.target.style.background = 'none';\n    }\n  };\n\n  useEffect(() => {\n    if (searchTerm) {\n      promptDispatch({\n        field: 'filteredPrompts',\n        value: prompts.filter((prompt) => {\n          const searchable =\n            prompt.name.toLowerCase() +\n            ' ' +\n            prompt.description.toLowerCase() +\n            ' ' +\n            prompt.content.toLowerCase();\n          return searchable.includes(searchTerm.toLowerCase());\n        }),\n      });\n    } else {\n      promptDispatch({ field: 'filteredPrompts', value: prompts });\n    }\n  }, [searchTerm, prompts]);\n\n  return (\n    <PromptbarContext.Provider\n      value={{\n        ...promptBarContextValue,\n        handleCreatePrompt,\n        handleDeletePrompt,\n        handleUpdatePrompt,\n      }}\n    >\n      <Sidebar<Prompt>\n        side={'right'}\n        isOpen={showPromptbar}\n        addItemButtonTitle={t('New prompt')}\n        itemComponent={\n          <Prompts\n            prompts={filteredPrompts.filter((prompt) => !prompt.folderId)}\n          />\n        }\n        folderComponent={<PromptFolders />}\n        items={filteredPrompts}\n        searchTerm={searchTerm}\n        handleSearchTerm={(searchTerm: string) =>\n          promptDispatch({ field: 'searchTerm', value: searchTerm })\n        }\n        toggleOpen={handleTogglePromptbar}\n        handleCreateItem={handleCreatePrompt}\n        handleCreateFolder={() => handleCreateFolder(t('New folder'), 'prompt')}\n        handleDrop={handleDrop}\n      />\n    </PromptbarContext.Provider>\n  );\n}","file":"/components/Promptbar/Promptbar.tsx","fileHash":"649cb2967029094219d8443ad667fcc6955c316c2d0e7e417c938d7f4a3598dc","hash":"9e57f96e7e364bbd52085c60972ef1bfee02e48b284963cbdeb3fc10cd90936a","processedContent":"() => {\n  const { t } = useTranslation('promptbar');\n\n  const promptBarContextValue = useCreateReducer<PromptbarInitialState>({ #This code defines an interface for the initial state of a prompt bar component. It includes a search term and a list of filtered prompts.\n    initialState, #This code defines an interface for the initial state of a prompt bar component. It includes a search term and a list of filtered prompts.\n  });\n\n  const {\n    state: { prompts, defaultModelId, showPromptbar },\n    dispatch: homeDispatch,\n    handleCreateFolder,\n  } = useContext(HomeContext);\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().: undefined\n  \"\"\"\n\n  const {\n    state: { searchTerm, filteredPrompts },\n    dispatch: promptDispatch,\n  } = promptBarContextValue;\n\n  const handleTogglePromptbar = () => {\n    homeDispatch({ field: 'showPromptbar', value: !showPromptbar });\n    localStorage.setItem('showPromptbar', JSON.stringify(!showPromptbar));\n  };\n\n  const handleCreatePrompt = () => {\n    if (defaultModelId) {\n      const newPrompt: Prompt = {\n        id: uuidv4(), #undefined\n        name: `Prompt ${prompts.length + 1}`,\n        description: '',\n        content: '',\n        model: OpenAIModels[defaultModelId],\n        folderId: null,\n      };\n\n      const updatedPrompts = [...prompts, newPrompt];\n\n      homeDispatch({ field: 'prompts', value: updatedPrompts });\n\n      savePrompts(updatedPrompts);\n    }\n  };\n\n  const handleDeletePrompt = (prompt: Prompt) => {\n    const updatedPrompts = prompts.filter((p) => p.id !== prompt.id);\n\n    homeDispatch({ field: 'prompts', value: updatedPrompts });\n    savePrompts(updatedPrompts);\n  };\n\n  const handleUpdatePrompt = (prompt: Prompt) => {\n    const updatedPrompts = prompts.map((p) => {\n      if (p.id === prompt.id) {\n        return prompt;\n      }\n\n      return p;\n    });\n    homeDispatch({ field: 'prompts', value: updatedPrompts });\n\n    savePrompts(updatedPrompts);\n  };\n\n  const handleDrop = (e: any) => {\n    if (e.dataTransfer) {\n      const prompt = JSON.parse(e.dataTransfer.getData('prompt'));\n\n      const updatedPrompt = {\n        ...prompt,\n        folderId: e.target.dataset.folderId,\n      };\n\n      handleUpdatePrompt(updatedPrompt);\n\n      e.target.style.background = 'none';\n    }\n  };\n\n  useEffect(() => { #undefined\n    if (searchTerm) {\n      promptDispatch({\n        field: 'filteredPrompts',\n        value: prompts.filter((prompt) => {\n          const searchable =\n            prompt.name.toLowerCase() +\n            ' ' +\n            prompt.description.toLowerCase() +\n            ' ' +\n            prompt.content.toLowerCase();\n          return searchable.includes(searchTerm.toLowerCase());\n        }),\n      });\n    } else {\n      promptDispatch({ field: 'filteredPrompts', value: prompts });\n    }\n  }, [searchTerm, prompts]);\n\n  return (\n    <PromptbarContext.Provider\n    \"\"\"\n    scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/PromptbarContext.: undefined\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/Context#Provider.: undefined\n    \"\"\"\n      value={{ #undefined\n        ...promptBarContextValue,\n        handleCreatePrompt,\n        handleDeletePrompt,\n        handleUpdatePrompt,\n      }}\n    >\n      <Sidebar<Prompt> #This code defines a React component for a folder tree, with properties that allow users to add items, search for items, and toggle the open/closed state of the component.\n        side={'right'} #undefined\n        isOpen={showPromptbar} #undefined\n        addItemButtonTitle={t('New prompt')} #undefined\n        itemComponent={ #undefined\n          <Prompts #This code defines a React component that renders a prompt bar with a button to open a modal for editing the prompt. The component uses state and refs to manage the modal and input elements, and it handles keyboard and click events to close the modal and update the prompt.\n            prompts={filteredPrompts.filter((prompt) => !prompt.folderId)} #undefined\n          />\n        }\n        folderComponent={<PromptFolders />}\n        \"\"\"\n        scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#folderComponent.: undefined\n        scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptFolders.tsx`/PromptFolders.: This code is a React component that renders a list of folders, each with a list of prompts. The component uses the `useContext` hook to access the state of the `HomeContext` and the `PromptbarContext`. It also defines a `handleDrop` function that updates the prompt's folder ID when a prompt is dragged and dropped onto a folder.\n        \"\"\"\n        items={filteredPrompts} #undefined\n        searchTerm={searchTerm} #undefined\n        handleSearchTerm={(searchTerm: string) => #undefined\n          promptDispatch({ field: 'searchTerm', value: searchTerm })\n        }\n        toggleOpen={handleTogglePromptbar} #undefined\n        handleCreateItem={handleCreatePrompt} #undefined\n        handleCreateFolder={() => handleCreateFolder(t('New folder'), 'prompt')} #undefined\n        handleDrop={handleDrop} #undefined\n      />\n    </PromptbarContext.Provider>\n    \"\"\"\n    scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/PromptbarContext.: undefined\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/Context#Provider.: undefined\n    \"\"\"\n  );\n}","documentation":"This code defines a React component for a prompt bar that allows users to add, search, and organize prompts. It uses the `useContext` hook to access the state of the `HomeContext` and the `PromptbarContext`, and it defines several functions to handle user interactions such as creating, deleting, and updating prompts."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/","language":"typescript","range":[0,0,152,0],"content":"import { useContext, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { useCreateReducer } from '@/hooks/useCreateReducer';\n\nimport { savePrompts } from '@/utils/app/prompts';\n\nimport { OpenAIModels } from '@/types/openai';\nimport { Prompt } from '@/types/prompt';\n\nimport HomeContext from '@/pages/api/home/home.context';\n\nimport { PromptFolders } from './components/PromptFolders';\nimport { PromptbarSettings } from './components/PromptbarSettings';\nimport { Prompts } from './components/Prompts';\n\nimport Sidebar from '../Sidebar';\nimport PromptbarContext from './PromptBar.context';\nimport { PromptbarInitialState, initialState } from './Promptbar.state';\n\nimport { v4 as uuidv4 } from 'uuid';\n\nconst Promptbar = () => {\n  const { t } = useTranslation('promptbar');\n\n  const promptBarContextValue = useCreateReducer<PromptbarInitialState>({\n    initialState,\n  });\n\n  const {\n    state: { prompts, defaultModelId, showPromptbar },\n    dispatch: homeDispatch,\n    handleCreateFolder,\n  } = useContext(HomeContext);\n\n  const {\n    state: { searchTerm, filteredPrompts },\n    dispatch: promptDispatch,\n  } = promptBarContextValue;\n\n  const handleTogglePromptbar = () => {\n    homeDispatch({ field: 'showPromptbar', value: !showPromptbar });\n    localStorage.setItem('showPromptbar', JSON.stringify(!showPromptbar));\n  };\n\n  const handleCreatePrompt = () => {\n    if (defaultModelId) {\n      const newPrompt: Prompt = {\n        id: uuidv4(),\n        name: `Prompt ${prompts.length + 1}`,\n        description: '',\n        content: '',\n        model: OpenAIModels[defaultModelId],\n        folderId: null,\n      };\n\n      const updatedPrompts = [...prompts, newPrompt];\n\n      homeDispatch({ field: 'prompts', value: updatedPrompts });\n\n      savePrompts(updatedPrompts);\n    }\n  };\n\n  const handleDeletePrompt = (prompt: Prompt) => {\n    const updatedPrompts = prompts.filter((p) => p.id !== prompt.id);\n\n    homeDispatch({ field: 'prompts', value: updatedPrompts });\n    savePrompts(updatedPrompts);\n  };\n\n  const handleUpdatePrompt = (prompt: Prompt) => {\n    const updatedPrompts = prompts.map((p) => {\n      if (p.id === prompt.id) {\n        return prompt;\n      }\n\n      return p;\n    });\n    homeDispatch({ field: 'prompts', value: updatedPrompts });\n\n    savePrompts(updatedPrompts);\n  };\n\n  const handleDrop = (e: any) => {\n    if (e.dataTransfer) {\n      const prompt = JSON.parse(e.dataTransfer.getData('prompt'));\n\n      const updatedPrompt = {\n        ...prompt,\n        folderId: e.target.dataset.folderId,\n      };\n\n      handleUpdatePrompt(updatedPrompt);\n\n      e.target.style.background = 'none';\n    }\n  };\n\n  useEffect(() => {\n    if (searchTerm) {\n      promptDispatch({\n        field: 'filteredPrompts',\n        value: prompts.filter((prompt) => {\n          const searchable =\n            prompt.name.toLowerCase() +\n            ' ' +\n            prompt.description.toLowerCase() +\n            ' ' +\n            prompt.content.toLowerCase();\n          return searchable.includes(searchTerm.toLowerCase());\n        }),\n      });\n    } else {\n      promptDispatch({ field: 'filteredPrompts', value: prompts });\n    }\n  }, [searchTerm, prompts]);\n\n  return (\n    <PromptbarContext.Provider\n      value={{\n        ...promptBarContextValue,\n        handleCreatePrompt,\n        handleDeletePrompt,\n        handleUpdatePrompt,\n      }}\n    >\n      <Sidebar<Prompt>\n        side={'right'}\n        isOpen={showPromptbar}\n        addItemButtonTitle={t('New prompt')}\n        itemComponent={\n          <Prompts\n            prompts={filteredPrompts.filter((prompt) => !prompt.folderId)}\n          />\n        }\n        folderComponent={<PromptFolders />}\n        items={filteredPrompts}\n        searchTerm={searchTerm}\n        handleSearchTerm={(searchTerm: string) =>\n          promptDispatch({ field: 'searchTerm', value: searchTerm })\n        }\n        toggleOpen={handleTogglePromptbar}\n        handleCreateItem={handleCreatePrompt}\n        handleCreateFolder={() => handleCreateFolder(t('New folder'), 'prompt')}\n        handleDrop={handleDrop}\n      />\n    </PromptbarContext.Provider>\n  );\n};\n\nexport default Promptbar;\n","file":"/components/Promptbar/Promptbar.tsx","fileHash":"649cb2967029094219d8443ad667fcc6955c316c2d0e7e417c938d7f4a3598dc","hash":"649cb2967029094219d8443ad667fcc6955c316c2d0e7e417c938d7f4a3598dc","processedContent":"import { useContext, useEffect, useState } from 'react';\n\"\"\"\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/: undefined\n\"\"\"\nimport { useTranslation } from 'react-i18next';\n\nimport { useCreateReducer } from '@/hooks/useCreateReducer';\n\nimport { savePrompts } from '@/utils/app/prompts';\n\nimport { OpenAIModels } from '@/types/openai';\nimport { Prompt } from '@/types/prompt';\n\nimport HomeContext from '@/pages/api/home/home.context';\n\nimport { PromptFolders } from './components/PromptFolders';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptFolders.tsx`/PromptFolders.: This code is a React component that renders a list of folders, each with a list of prompts. The component uses the `useContext` hook to access the state of the `HomeContext` and the `PromptbarContext`. It also defines a `handleDrop` function that updates the prompt's folder ID when a prompt is dragged and dropped onto a folder.\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptFolders.tsx`/: This code is a React component that renders a list of folders and prompts, using the `useContext` hook to access state from two different contexts.\n\"\"\"\nimport { PromptbarSettings } from './components/PromptbarSettings';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptbarSettings.tsx`/PromptbarSettings.: This code defines a function that returns a React component, which is a div element. The function is written in TypeScript and uses the JSX syntax to define the component.\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptbarSettings.tsx`/: This code defines a React component called \"PromptbarSettings\" that returns a div element with properties defined in an interface called \"Props\".\n\"\"\"\nimport { Prompts } from './components/Prompts';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompts.tsx`/Prompts.: This code defines a React component that renders a prompt bar with a button to open a modal for editing the prompt. The component uses state and refs to manage the modal and input elements, and it handles keyboard and click events to close the modal and update the prompt.\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompts.tsx`/: The code defines a React component called \"Prompts\" that renders a prompt bar with a button to open a modal for editing the prompt.\n\"\"\"\n\nimport Sidebar from '../Sidebar';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.: This code defines a React component for a folder tree, with properties that allow users to add items, search for items, and toggle the open/closed state of the component.\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`index.ts`/: This code defines a React component for a folder tree that allows users to add, search, and toggle the open/closed state of items.\n\"\"\"\nimport PromptbarContext from './PromptBar.context';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/PromptbarContext.: undefined\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/: This code defines a context for a prompt bar component in an AI chatbot, which includes an initial state with a search term and a list of filtered prompts, as well as functions for handling create, delete, and update operations on prompts.\n\"\"\"\nimport { PromptbarInitialState, initialState } from './Promptbar.state';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.state.tsx`/PromptbarInitialState#: This code defines an interface for the initial state of a prompt bar component. It includes a search term and a list of filtered prompts.\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.state.tsx`/initialState.: undefined\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.state.tsx`/: This code defines an interface for the initial state of a prompt bar component, which includes a search term and a list of filtered prompts.\n\"\"\"\n\nimport { v4 as uuidv4 } from 'uuid';\n\"\"\"\nscip-typescript npm @types/uuid 9.0.7 `index.d.ts`/v4.: undefined\nscip-typescript npm @types/uuid 9.0.7 `index.d.ts`/v4.: undefined\nscip-typescript npm @types/uuid 9.0.7 `index.d.ts`/: undefined\n\"\"\"\n\nconst Promptbar = () => {\n  \"\"\"This code defines a React component for a prompt bar that allows users to add, search, and organize prompts. It uses the `useContext` hook to access the state of the `HomeContext` and the `PromptbarContext`, and it defines several functions to handle user interactions such as creating, deleting, and updating prompts.\"\"\"\n  pass\n\nexport default Promptbar; #This code defines a React component for a prompt bar that allows users to add, search, and organize prompts. It uses the `useContext` hook to access the state of the `HomeContext` and the `PromptbarContext`, and it defines several functions to handle user interactions such as creating, deleting, and updating prompts.\n","documentation":"This code defines a React component for a prompt bar that allows users to add, search, and organize prompts. It uses the `useContext` hook to access the state of two different contexts and defines several functions to handle user interactions."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptFolders.tsx`/PromptFolders.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptFolders.tsx`/PromptFolders.","language":"typescript","range":[11,29,63,1],"content":"() => {\n  const {\n    state: { folders },\n  } = useContext(HomeContext);\n\n  const {\n    state: { searchTerm, filteredPrompts },\n    handleUpdatePrompt,\n  } = useContext(PromptbarContext);\n\n  const handleDrop = (e: any, folder: FolderInterface) => {\n    if (e.dataTransfer) {\n      const prompt = JSON.parse(e.dataTransfer.getData('prompt'));\n\n      const updatedPrompt = {\n        ...prompt,\n        folderId: folder.id,\n      };\n\n      handleUpdatePrompt(updatedPrompt);\n    }\n  };\n\n  const PromptFolders = (currentFolder: FolderInterface) =>\n    filteredPrompts\n      .filter((p) => p.folderId)\n      .map((prompt, index) => {\n        if (prompt.folderId === currentFolder.id) {\n          return (\n            <div key={index} className=\"ml-5 gap-2 border-l pl-2\">\n              <PromptComponent prompt={prompt} />\n            </div>\n          );\n        }\n      });\n\n  return (\n    <div className=\"flex w-full flex-col pt-2\">\n      {folders\n        .filter((folder) => folder.type === 'prompt')\n        .sort((a, b) => a.name.localeCompare(b.name))\n        .map((folder, index) => (\n          <Folder\n            key={index}\n            searchTerm={searchTerm}\n            currentFolder={folder}\n            handleDrop={handleDrop}\n            folderComponent={PromptFolders(folder)}\n          />\n        ))}\n    </div>\n  );\n}","file":"/components/Promptbar/components/PromptFolders.tsx","fileHash":"d27e8de280ea882cfa692f4c7028152c708fb32cff5d76244e78018007641eb8","hash":"8cfc4c804693af5e8c0b933c6864070fab4411f014477cb229e2284eb42bb67c","processedContent":"() => {\n  const {\n    state: { folders },\n  } = useContext(HomeContext);\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().: undefined\n  \"\"\"\n\n  const {\n    state: { searchTerm, filteredPrompts },\n    \"\"\"\n    scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/PromptbarContextProps#state.: undefined\n    scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.state.tsx`/PromptbarInitialState#searchTerm.: undefined\n    scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.state.tsx`/PromptbarInitialState#filteredPrompts.: undefined\n    \"\"\"\n    handleUpdatePrompt, #undefined\n  } = useContext(PromptbarContext);\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().: undefined\n  scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/PromptbarContext.: undefined\n  \"\"\"\n\n  const handleDrop = (e: any, folder: FolderInterface) => {\n    if (e.dataTransfer) {\n      const prompt = JSON.parse(e.dataTransfer.getData('prompt'));\n\n      const updatedPrompt = {\n        ...prompt,\n        folderId: folder.id,\n      };\n\n      handleUpdatePrompt(updatedPrompt);\n    }\n  };\n\n  const PromptFolders = (currentFolder: FolderInterface) =>\n    filteredPrompts\n      .filter((p) => p.folderId)\n      .map((prompt, index) => {\n        if (prompt.folderId === currentFolder.id) {\n          return (\n            <div key={index} className=\"ml-5 gap-2 border-l pl-2\">\n            \"\"\"\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/Attributes#key.: undefined\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n            \"\"\"\n              <PromptComponent prompt={prompt} />\n            </div> #undefined\n          );\n        }\n      });\n\n  return (\n    <div className=\"flex w-full flex-col pt-2\">\n    \"\"\"\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n    \"\"\"\n      {folders\n        .filter((folder) => folder.type === 'prompt')\n        .sort((a, b) => a.name.localeCompare(b.name))\n        .map((folder, index) => (\n          <Folder\n            key={index}\n            searchTerm={searchTerm}\n            currentFolder={folder}\n            handleDrop={handleDrop}\n            folderComponent={PromptFolders(folder)}\n          />\n        ))}\n    </div>\n  );\n}","documentation":"This code is a React component that renders a list of folders, each with a list of prompts. The component uses the `useContext` hook to access the state of the `HomeContext` and the `PromptbarContext`. It also defines a `handleDrop` function that updates the prompt's folder ID when a prompt is dragged and dropped onto a folder."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptFolders.tsx`/","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptFolders.tsx`/","language":"typescript","range":[0,0,64,0],"content":"import { useContext } from 'react';\n\nimport { FolderInterface } from '@/types/folder';\n\nimport HomeContext from '@/pages/api/home/home.context';\n\nimport Folder from '@/components/Folder';\nimport { PromptComponent } from '@/components/Promptbar/components/Prompt';\n\nimport PromptbarContext from '../PromptBar.context';\n\nexport const PromptFolders = () => {\n  const {\n    state: { folders },\n  } = useContext(HomeContext);\n\n  const {\n    state: { searchTerm, filteredPrompts },\n    handleUpdatePrompt,\n  } = useContext(PromptbarContext);\n\n  const handleDrop = (e: any, folder: FolderInterface) => {\n    if (e.dataTransfer) {\n      const prompt = JSON.parse(e.dataTransfer.getData('prompt'));\n\n      const updatedPrompt = {\n        ...prompt,\n        folderId: folder.id,\n      };\n\n      handleUpdatePrompt(updatedPrompt);\n    }\n  };\n\n  const PromptFolders = (currentFolder: FolderInterface) =>\n    filteredPrompts\n      .filter((p) => p.folderId)\n      .map((prompt, index) => {\n        if (prompt.folderId === currentFolder.id) {\n          return (\n            <div key={index} className=\"ml-5 gap-2 border-l pl-2\">\n              <PromptComponent prompt={prompt} />\n            </div>\n          );\n        }\n      });\n\n  return (\n    <div className=\"flex w-full flex-col pt-2\">\n      {folders\n        .filter((folder) => folder.type === 'prompt')\n        .sort((a, b) => a.name.localeCompare(b.name))\n        .map((folder, index) => (\n          <Folder\n            key={index}\n            searchTerm={searchTerm}\n            currentFolder={folder}\n            handleDrop={handleDrop}\n            folderComponent={PromptFolders(folder)}\n          />\n        ))}\n    </div>\n  );\n};\n","file":"/components/Promptbar/components/PromptFolders.tsx","fileHash":"d27e8de280ea882cfa692f4c7028152c708fb32cff5d76244e78018007641eb8","hash":"d27e8de280ea882cfa692f4c7028152c708fb32cff5d76244e78018007641eb8","processedContent":"import { useContext } from 'react';\n\"\"\"\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/: undefined\n\"\"\"\n\nimport { FolderInterface } from '@/types/folder';\n\nimport HomeContext from '@/pages/api/home/home.context';\n\nimport Folder from '@/components/Folder';\nimport { PromptComponent } from '@/components/Promptbar/components/Prompt';\n\nimport PromptbarContext from '../PromptBar.context';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/PromptbarContext.: undefined\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/: This code defines a context for a prompt bar component in an AI chatbot, which includes an initial state with a search term and a list of filtered prompts, as well as functions for handling create, delete, and update operations on prompts.\n\"\"\"\n\nexport const PromptFolders = () => {\n  \"\"\"This code is a React component that renders a list of folders, each with a list of prompts. The component uses the `useContext` hook to access the state of the `HomeContext` and the `PromptbarContext`. It also defines a `handleDrop` function that updates the prompt's folder ID when a prompt is dragged and dropped onto a folder.\"\"\"\n  pass\n","documentation":"This code is a React component that renders a list of folders and prompts, using the `useContext` hook to access state from two different contexts."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptbarSettings.tsx`/PromptbarSettings.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptbarSettings.tsx`/PromptbarSettings.","language":"typescript","range":[4,44,6,1],"content":"() => {\n  return <div></div>;\n}","file":"/components/Promptbar/components/PromptbarSettings.tsx","fileHash":"1bdcd58266c71e6169148c2bf5e30e13ac787073abb39bad3f220b0181a7aba3","hash":"747a9727a62819820f811382dcfeef4e6291a5eb5ac4f9469d181a227261ac3d","processedContent":"() => {\n  return <div></div>;\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n  \"\"\"\n}","documentation":"This code defines a function that returns a React component, which is a div element. The function is written in TypeScript and uses the JSX syntax to define the component."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptbarSettings.tsx`/","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptbarSettings.tsx`/","language":"typescript","range":[0,0,7,0],"content":"import { FC } from 'react';\n\ninterface Props {}\n\nexport const PromptbarSettings: FC<Props> = () => {\n  return <div></div>;\n};\n","file":"/components/Promptbar/components/PromptbarSettings.tsx","fileHash":"1bdcd58266c71e6169148c2bf5e30e13ac787073abb39bad3f220b0181a7aba3","hash":"1bdcd58266c71e6169148c2bf5e30e13ac787073abb39bad3f220b0181a7aba3","processedContent":"import { FC } from 'react';\n\"\"\"\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/: undefined\n\"\"\"\n\n\"\"\"This code defines an interface called \"Props\" that is used to define the properties of a component in a React application.\"\"\"\npass\ninterface Props {}\n\nexport const PromptbarSettings: FC<Props> = () => {\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptbarSettings.tsx`/Props#: This code defines an interface called \"Props\" that is used to define the properties of a component in a React application.\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#: undefined\n\"\"\"\n  \"\"\"This code defines a function that returns a React component, which is a div element. The function is written in TypeScript and uses the JSX syntax to define the component.\"\"\"\n  pass\n","documentation":"This code defines a React component called \"PromptbarSettings\" that returns a div element with properties defined in an interface called \"Props\"."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompts.tsx`/Prompts.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompts.tsx`/Prompts.","language":"typescript","range":[10,34,21,1],"content":"({ prompts }) => {\n  return (\n    <div className=\"flex w-full flex-col gap-1\">\n      {prompts\n        .slice()\n        .reverse()\n        .map((prompt, index) => (\n          <PromptComponent key={index} prompt={prompt} />\n        ))}\n    </div>\n  );\n}","file":"/components/Promptbar/components/Prompts.tsx","fileHash":"6d9d51ad735bac5063606294c007ac67f7dc13cf5ddb19db99024fa5451061da","hash":"b3e40f40a36d6fb2443268177523c5b86cabbef8079b850f9e8d45b13c61f821","processedContent":"({ prompts }) => {\n  return (\n    <div className=\"flex w-full flex-col gap-1\">\n    \"\"\"\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n    \"\"\"\n      {prompts\n        .slice()\n        .reverse()\n        .map((prompt, index) => (\n          <PromptComponent key={index} prompt={prompt} />\n          \"\"\"\n          scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.: This code defines a React component that renders a prompt bar with a button to open a modal for editing the prompt. The component uses state and refs to manage the modal and input elements, and it handles keyboard and click events to close the modal and update the prompt.\n          scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/Props#prompt.: undefined\n          \"\"\"\n        ))}\n    </div> #undefined\n  );\n}","documentation":"This code defines a React component that renders a prompt bar with a button to open a modal for editing the prompt. The component uses state and refs to manage the modal and input elements, and it handles keyboard and click events to close the modal and update the prompt."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompts.tsx`/","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompts.tsx`/","language":"typescript","range":[0,0,22,0],"content":"import { FC } from 'react';\n\nimport { Prompt } from '@/types/prompt';\n\nimport { PromptComponent } from './Prompt';\n\ninterface Props {\n  prompts: Prompt[];\n}\n\nexport const Prompts: FC<Props> = ({ prompts }) => {\n  return (\n    <div className=\"flex w-full flex-col gap-1\">\n      {prompts\n        .slice()\n        .reverse()\n        .map((prompt, index) => (\n          <PromptComponent key={index} prompt={prompt} />\n        ))}\n    </div>\n  );\n};\n","file":"/components/Promptbar/components/Prompts.tsx","fileHash":"6d9d51ad735bac5063606294c007ac67f7dc13cf5ddb19db99024fa5451061da","hash":"6d9d51ad735bac5063606294c007ac67f7dc13cf5ddb19db99024fa5451061da","processedContent":"import { FC } from 'react';\n\"\"\"\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/: undefined\n\"\"\"\n\nimport { Prompt } from '@/types/prompt';\n\nimport { PromptComponent } from './Prompt';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.: This code defines a React component that renders a prompt bar with a button to open a modal for editing the prompt. The component uses state and refs to manage the modal and input elements, and it handles keyboard and click events to close the modal and update the prompt.\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/: This code defines a React component that renders a prompt bar with a button to open a modal for editing the prompt. The component uses state and refs to manage the modal and input elements, and it handles keyboard and click events to close the modal and update the prompt.\n\"\"\"\n\ninterface Props {\n  \"\"\"This code defines a type called \"Props\" that contains an array of objects called \"Prompts\".\"\"\"\n  pass\n\nexport const Prompts: FC<Props> = ({ prompts }) => {\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompts.tsx`/Props#: This code defines a type called \"Props\" that contains an array of objects called \"Prompts\".\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#: undefined\n\"\"\"\n  \"\"\"This code defines a React component that renders a prompt bar with a button to open a modal for editing the prompt. The component uses state and refs to manage the modal and input elements, and it handles keyboard and click events to close the modal and update the prompt.\"\"\"\n  pass\n","documentation":"The code defines a React component called \"Prompts\" that renders a prompt bar with a button to open a modal for editing the prompt."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/PromptbarContext.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/PromptbarContext.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/","language":"typescript","range":[0,0,19,0],"content":"import { Dispatch, createContext } from 'react';\n\nimport { ActionType } from '@/hooks/useCreateReducer';\n\nimport { Prompt } from '@/types/prompt';\n\nimport { PromptbarInitialState } from './Promptbar.state';\n\nexport interface PromptbarContextProps {\n  state: PromptbarInitialState;\n  dispatch: Dispatch<ActionType<PromptbarInitialState>>;\n  handleCreatePrompt: () => void;\n  handleDeletePrompt: (prompt: Prompt) => void;\n  handleUpdatePrompt: (prompt: Prompt) => void;\n}\n\nconst PromptbarContext = createContext<PromptbarContextProps>(undefined!);\n\nexport default PromptbarContext;\n","file":"/components/Promptbar/PromptBar.context.tsx","fileHash":"5522f432552621f7b5158e752c44deb8bf1a204e8899bffee34cc1c878c67f63","hash":"5522f432552621f7b5158e752c44deb8bf1a204e8899bffee34cc1c878c67f63","processedContent":"import { Dispatch, createContext } from 'react';\n\"\"\"\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/Dispatch#: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/createContext().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/: undefined\n\"\"\"\n\nimport { ActionType } from '@/hooks/useCreateReducer';\n\nimport { Prompt } from '@/types/prompt';\n\nimport { PromptbarInitialState } from './Promptbar.state';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.state.tsx`/PromptbarInitialState#: This code defines an interface for the initial state of a prompt bar component. It includes a search term and a list of filtered prompts.\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.state.tsx`/: This code defines an interface for the initial state of a prompt bar component, which includes a search term and a list of filtered prompts.\n\"\"\"\n\nexport interface PromptbarContextProps {\n  \"\"\"This code defines an interface for the initial state of a prompt bar component, which includes a search term and a list of filtered prompts. It also includes functions for handling create, delete, and update operations on prompts.\"\"\"\n  pass\n\nconst PromptbarContext = createContext<PromptbarContextProps>(undefined!);\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/PromptbarContextProps#: This code defines an interface for the initial state of a prompt bar component, which includes a search term and a list of filtered prompts. It also includes functions for handling create, delete, and update operations on prompts.\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/createContext().: undefined\n\"\"\"\n\nexport default PromptbarContext; #undefined\n","documentation":"This code defines a context for a prompt bar component in an AI chatbot, which includes an initial state with a search term and a list of filtered prompts, as well as functions for handling create, delete, and update operations on prompts."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.state.tsx`/PromptbarInitialState#","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.state.tsx`/PromptbarInitialState#","language":"typescript","range":[2,0,5,1],"content":"export interface PromptbarInitialState {\n  searchTerm: string;\n  filteredPrompts: Prompt[];\n}","file":"/components/Promptbar/Promptbar.state.tsx","fileHash":"0166e8366ffe566ab44611e4243095a71a35e7d1ad979e26e20a9cf65394bdc3","hash":"cfec9f1a9a43b5b04d55371b3ea4655da982a60e30dc4bd9aabba036f6882e65","processedContent":"export interface PromptbarInitialState {\n  searchTerm: string;\n  filteredPrompts: Prompt[];\n}","documentation":"This code defines an interface for the initial state of a prompt bar component. It includes a search term and a list of filtered prompts."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.state.tsx`/initialState.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.state.tsx`/initialState.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.state.tsx`/","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.state.tsx`/","language":"typescript","range":[0,0,11,0],"content":"import { Prompt } from '@/types/prompt';\n\nexport interface PromptbarInitialState {\n  searchTerm: string;\n  filteredPrompts: Prompt[];\n}\n\nexport const initialState: PromptbarInitialState = {\n  searchTerm: '',\n  filteredPrompts: [],\n};\n","file":"/components/Promptbar/Promptbar.state.tsx","fileHash":"0166e8366ffe566ab44611e4243095a71a35e7d1ad979e26e20a9cf65394bdc3","hash":"0166e8366ffe566ab44611e4243095a71a35e7d1ad979e26e20a9cf65394bdc3","processedContent":"import { Prompt } from '@/types/prompt';\n\nexport interface PromptbarInitialState {\n  \"\"\"This code defines an interface for the initial state of a prompt bar component. It includes a search term and a list of filtered prompts.\"\"\"\n  pass\n\nexport const initialState: PromptbarInitialState = { #This code defines an interface for the initial state of a prompt bar component. It includes a search term and a list of filtered prompts.\n  searchTerm: '',\n  filteredPrompts: [],\n};\n","documentation":"This code defines an interface for the initial state of a prompt bar component, which includes a search term and a list of filtered prompts."}},{"key":"scip-typescript npm @types/uuid 9.0.7 `index.d.ts`/v4.","attributes":{"symbol":"scip-typescript npm @types/uuid 9.0.7 `index.d.ts`/v4.","language":"typescript"}},{"key":"scip-typescript npm @types/uuid 9.0.7 `index.d.ts`/","attributes":{"symbol":"scip-typescript npm @types/uuid 9.0.7 `index.d.ts`/","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/Context#Provider.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/Context#Provider.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ProviderProps#value.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ProviderProps#value.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompts.tsx`/Props#prompts.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompts.tsx`/Props#prompts.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/PromptbarContextProps#","attributes":{"range":[8,0,14,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/PromptbarContextProps#","content":"export interface PromptbarContextProps {\n  state: PromptbarInitialState;\n  dispatch: Dispatch<ActionType<PromptbarInitialState>>;\n  handleCreatePrompt: () => void;\n  handleDeletePrompt: (prompt: Prompt) => void;\n  handleUpdatePrompt: (prompt: Prompt) => void;\n}","file":"/components/Promptbar/PromptBar.context.tsx","language":"typescript","fileHash":"5522f432552621f7b5158e752c44deb8bf1a204e8899bffee34cc1c878c67f63","hash":"60f1e4cd9f1b82ca75b2beb7cb74d345fd52624b7a0ced2f53dc5577ae1676ca","processedContent":"export interface PromptbarContextProps {\n  state: PromptbarInitialState; #This code defines an interface for the initial state of a prompt bar component. It includes a search term and a list of filtered prompts.\n  dispatch: Dispatch<ActionType<PromptbarInitialState>>;\n  \"\"\"\n  scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.state.tsx`/PromptbarInitialState#: This code defines an interface for the initial state of a prompt bar component. It includes a search term and a list of filtered prompts.\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/Dispatch#: undefined\n  \"\"\"\n  handleCreatePrompt: () => void;\n  handleDeletePrompt: (prompt: Prompt) => void;\n  handleUpdatePrompt: (prompt: Prompt) => void;\n}","documentation":"This code defines an interface for the initial state of a prompt bar component, which includes a search term and a list of filtered prompts. It also includes functions for handling create, delete, and update operations on prompts."}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/Dispatch#","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/Dispatch#","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/createContext().","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/createContext().","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Mobile/`Navbar.tsx`/","attributes":{"range":[0,0,29,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Mobile/`Navbar.tsx`/","content":"import { IconPlus } from '@tabler/icons-react';\nimport { FC } from 'react';\n\nimport { Conversation } from '@/types/chat';\n\ninterface Props {\n  selectedConversation: Conversation;\n  onNewConversation: () => void;\n}\n\nexport const Navbar: FC<Props> = ({\n  selectedConversation,\n  onNewConversation,\n}) => {\n  return (\n    <nav className=\"flex w-full justify-between bg-[#202123] py-3 px-4\">\n      <div className=\"mr-4\"></div>\n\n      <div className=\"max-w-[240px] overflow-hidden text-ellipsis whitespace-nowrap\">\n        {selectedConversation.name}\n      </div>\n\n      <IconPlus\n        className=\"cursor-pointer hover:text-neutral-400 mr-8\"\n        onClick={onNewConversation}\n      />\n    </nav>\n  );\n};\n","file":"/components/Mobile/Navbar.tsx","language":"typescript","fileHash":"974486d36aaf77f99e6ad8051e9edd4e008dddd7b90037ad0f05c8eb1f7e279c","hash":"974486d36aaf77f99e6ad8051e9edd4e008dddd7b90037ad0f05c8eb1f7e279c","processedContent":"import { IconPlus } from '@tabler/icons-react';\nimport { FC } from 'react';\n\"\"\"\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/: undefined\n\"\"\"\n\nimport { Conversation } from '@/types/chat';\n\ninterface Props {\n  \"\"\"This code defines a component's properties, including a selected conversation and a function to handle creating a new conversation.\"\"\"\n  pass\n\nexport const Navbar: FC<Props> = ({\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Mobile/`Navbar.tsx`/Props#: This code defines a component's properties, including a selected conversation and a function to handle creating a new conversation.\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#: undefined\n\"\"\"\n  \"\"\"This code defines a React component that renders a navigation bar with a dropdown menu for selecting a conversation and an icon to create a new conversation.\"\"\"\n  pass\n","documentation":"This code defines a React component that renders a navigation bar with a dropdown menu for selecting a conversation and an icon to create a new conversation."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Mobile/`Navbar.tsx`/Props#","attributes":{"range":[5,0,8,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Mobile/`Navbar.tsx`/Props#","content":"interface Props {\n  selectedConversation: Conversation;\n  onNewConversation: () => void;\n}","file":"/components/Mobile/Navbar.tsx","language":"typescript","fileHash":"974486d36aaf77f99e6ad8051e9edd4e008dddd7b90037ad0f05c8eb1f7e279c","hash":"ac79c28caf36fbb71aa2a6998a871909ebb6d8b4d3c42e6203b7759c4ae3397b","processedContent":"interface Props {\n  selectedConversation: Conversation;\n  onNewConversation: () => void;\n}","documentation":"This code defines a component's properties, including a selected conversation and a function to handle creating a new conversation."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Mobile/`Navbar.tsx`/Navbar.","attributes":{"range":[10,33,28,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Mobile/`Navbar.tsx`/Navbar.","content":"({\n  selectedConversation,\n  onNewConversation,\n}) => {\n  return (\n    <nav className=\"flex w-full justify-between bg-[#202123] py-3 px-4\">\n      <div className=\"mr-4\"></div>\n\n      <div className=\"max-w-[240px] overflow-hidden text-ellipsis whitespace-nowrap\">\n        {selectedConversation.name}\n      </div>\n\n      <IconPlus\n        className=\"cursor-pointer hover:text-neutral-400 mr-8\"\n        onClick={onNewConversation}\n      />\n    </nav>\n  );\n}","file":"/components/Mobile/Navbar.tsx","language":"typescript","fileHash":"974486d36aaf77f99e6ad8051e9edd4e008dddd7b90037ad0f05c8eb1f7e279c","hash":"b0bee1e93e5f4eeeb52990bba5eb86df48a4effc1cd2207d860e98e5b72e82c1","processedContent":"({\n  selectedConversation, #undefined\n  onNewConversation, #undefined\n}) => {\n  return (\n    <nav className=\"flex w-full justify-between bg-[#202123] py-3 px-4\">\n    \"\"\"\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#nav.: undefined\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n    \"\"\"\n      <div className=\"mr-4\"></div>\n      \"\"\"\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n      \"\"\"\n\n      <div className=\"max-w-[240px] overflow-hidden text-ellipsis whitespace-nowrap\">\n      \"\"\"\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n      \"\"\"\n        {selectedConversation.name}\n      </div> #undefined\n\n      <IconPlus\n        className=\"cursor-pointer hover:text-neutral-400 mr-8\"\n        onClick={onNewConversation}\n      />\n    </nav> #undefined\n  );\n}","documentation":"This code defines a React component that renders a navigation bar with a dropdown menu for selecting a conversation and an icon to create a new conversation."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Mobile/`Navbar.tsx`/Props#selectedConversation.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Mobile/`Navbar.tsx`/Props#selectedConversation.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Mobile/`Navbar.tsx`/Props#onNewConversation.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Mobile/`Navbar.tsx`/Props#onNewConversation.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#nav.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#nav.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`MemoizedReactMarkdown.tsx`/","attributes":{"range":[0,0,9,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`MemoizedReactMarkdown.tsx`/","content":"import { FC, memo } from 'react';\nimport ReactMarkdown, { Options } from 'react-markdown';\n\nexport const MemoizedReactMarkdown: FC<Options> = memo(\n    ReactMarkdown,\n    (prevProps, nextProps) => (\n        prevProps.children === nextProps.children\n    )\n);\n","file":"/components/Markdown/MemoizedReactMarkdown.tsx","language":"typescript","fileHash":"60b2430d17c8be9afee5b54c60885a54ebf377a144bf74858c0988630adbec66","hash":"60b2430d17c8be9afee5b54c60885a54ebf377a144bf74858c0988630adbec66","processedContent":"import { FC, memo } from 'react';\n\"\"\"\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/memo().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/: undefined\n\"\"\"\nimport ReactMarkdown, { Options } from 'react-markdown';\n\nexport const MemoizedReactMarkdown: FC<Options> = memo(\n\"\"\"\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/memo().: undefined\n\"\"\"\n    ReactMarkdown,\n    (prevProps, nextProps) => (\n        prevProps.children === nextProps.children\n    )\n);\n","documentation":"This code defines a memoized version of the ReactMarkdown component, which is used to render Markdown text in a React application. The memoization helps improve performance by avoiding unnecessary re-renders of the component when its props remain unchanged."}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/memo().","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/memo().","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/","attributes":{"range":[0,0,94,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/","content":"import { IconCheck, IconClipboard, IconDownload } from '@tabler/icons-react';\nimport { FC, memo, useState } from 'react';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { oneDark } from 'react-syntax-highlighter/dist/cjs/styles/prism';\n\nimport { useTranslation } from 'next-i18next';\n\nimport {\n  generateRandomString,\n  programmingLanguages,\n} from '@/utils/app/codeblock';\n\ninterface Props {\n  language: string;\n  value: string;\n}\n\nexport const CodeBlock: FC<Props> = memo(({ language, value }) => {\n  const { t } = useTranslation('markdown');\n  const [isCopied, setIsCopied] = useState<Boolean>(false);\n\n  const copyToClipboard = () => {\n    if (!navigator.clipboard || !navigator.clipboard.writeText) {\n      return;\n    }\n\n    navigator.clipboard.writeText(value).then(() => {\n      setIsCopied(true);\n\n      setTimeout(() => {\n        setIsCopied(false);\n      }, 2000);\n    });\n  };\n  const downloadAsFile = () => {\n    const fileExtension = programmingLanguages[language] || '.file';\n    const suggestedFileName = `file-${generateRandomString(\n      3,\n      true,\n    )}${fileExtension}`;\n    const fileName = window.prompt(\n      t('Enter file name') || '',\n      suggestedFileName,\n    );\n\n    if (!fileName) {\n      // user pressed cancel on prompt\n      return;\n    }\n\n    const blob = new Blob([value], { type: 'text/plain' });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.download = fileName;\n    link.href = url;\n    link.style.display = 'none';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n  };\n  return (\n    <div className=\"codeblock relative font-sans text-[16px]\">\n      <div className=\"flex items-center justify-between py-1.5 px-4\">\n        <span className=\"text-xs lowercase text-white\">{language}</span>\n\n        <div className=\"flex items-center\">\n          <button\n            className=\"flex gap-1.5 items-center rounded bg-none p-1 text-xs text-white\"\n            onClick={copyToClipboard}\n          >\n            {isCopied ? <IconCheck size={18} /> : <IconClipboard size={18} />}\n            {isCopied ? t('Copied!') : t('Copy code')}\n          </button>\n          <button\n            className=\"flex items-center rounded bg-none p-1 text-xs text-white\"\n            onClick={downloadAsFile}\n          >\n            <IconDownload size={18} />\n          </button>\n        </div>\n      </div>\n\n      <SyntaxHighlighter\n        language={language}\n        style={oneDark}\n        customStyle={{ margin: 0 }}\n      >\n        {value}\n      </SyntaxHighlighter>\n    </div>\n  );\n});\nCodeBlock.displayName = 'CodeBlock';\n","file":"/components/Markdown/CodeBlock.tsx","language":"typescript","fileHash":"12b5e4726812ed6abe9677039db266117db1976129f5aa8aef2432a5260af431","hash":"12b5e4726812ed6abe9677039db266117db1976129f5aa8aef2432a5260af431","processedContent":"import { IconCheck, IconClipboard, IconDownload } from '@tabler/icons-react';\nimport { FC, memo, useState } from 'react';\n\"\"\"\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/memo().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/: undefined\n\"\"\"\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { oneDark } from 'react-syntax-highlighter/dist/cjs/styles/prism';\n\nimport { useTranslation } from 'next-i18next';\n\nimport {\n  generateRandomString,\n  programmingLanguages,\n} from '@/utils/app/codeblock';\n\ninterface Props {\n  \"\"\"This code defines a type called \"Props\" that has two properties: \"language\" and \"value\". The \"language\" property is a string that represents the programming language, and the \"value\" property is a string that represents the value of the variable.\"\"\"\n  pass\n\nexport const CodeBlock: FC<Props> = memo(({ language, value }) => {\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/Props#: This code defines a type called \"Props\" that has two properties: \"language\" and \"value\". The \"language\" property is a string that represents the programming language, and the \"value\" property is a string that represents the value of the variable.\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/memo().: undefined\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/Props#language.: undefined\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/Props#value.: undefined\n\"\"\"\n  const { t } = useTranslation('markdown');\n  const [isCopied, setIsCopied] = useState<Boolean>(false); #undefined\n\n  const copyToClipboard = () => {\n    if (!navigator.clipboard || !navigator.clipboard.writeText) {\n      return;\n    }\n\n    navigator.clipboard.writeText(value).then(() => {\n      setIsCopied(true);\n\n      setTimeout(() => {\n      \"\"\"\n      scip-typescript npm @types/node 20.9.3 `ts4.8`/`timers.d.ts`/`\"timers\"`/global/setTimeout().: undefined\n      scip-typescript npm @types/node 20.9.3 `ts4.8`/`timers.d.ts`/`\"timers\"`/global/setTimeout/: undefined\n      \"\"\"\n        setIsCopied(false);\n      }, 2000);\n    });\n  };\n  const downloadAsFile = () => {\n    const fileExtension = programmingLanguages[language] || '.file';\n    const suggestedFileName = `file-${generateRandomString(\n      3,\n      true,\n    )}${fileExtension}`;\n    const fileName = window.prompt(\n      t('Enter file name') || '',\n      suggestedFileName,\n    );\n\n    if (!fileName) {\n      // user pressed cancel on prompt\n      return;\n    }\n\n    const blob = new Blob([value], { type: 'text/plain' });\n    \"\"\"\n    scip-typescript npm @types/node 20.9.3 `ts4.8`/`buffer.d.ts`/`\"buffer\"`/global/Blob#: undefined\n    scip-typescript npm @types/node 20.9.3 `ts4.8`/`buffer.d.ts`/`\"buffer\"`/global/Blob.: undefined\n    \"\"\"\n    const url = URL.createObjectURL(blob);\n    \"\"\"\n    scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/global/URL#: undefined\n    scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/global/URL.: undefined\n    scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/URL#createObjectURL().: undefined\n    \"\"\"\n    const link = document.createElement('a');\n    link.download = fileName;\n    link.href = url;\n    link.style.display = 'none';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n    \"\"\"\n    scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/global/URL#: undefined\n    scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/global/URL.: undefined\n    scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/URL#revokeObjectURL().: undefined\n    \"\"\"\n  };\n  return (\n    <div className=\"codeblock relative font-sans text-[16px]\">\n    \"\"\"\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n    \"\"\"\n      <div className=\"flex items-center justify-between py-1.5 px-4\">\n      \"\"\"\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n      \"\"\"\n        <span className=\"text-xs lowercase text-white\">{language}</span>\n        \"\"\"\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#span.: undefined\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#span.: undefined\n        \"\"\"\n\n        <div className=\"flex items-center\">\n        \"\"\"\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n        \"\"\"\n          <button #undefined\n            className=\"flex gap-1.5 items-center rounded bg-none p-1 text-xs text-white\" #undefined\n            onClick={copyToClipboard} #undefined\n          >\n            {isCopied ? <IconCheck size={18} /> : <IconClipboard size={18} />}\n            {isCopied ? t('Copied!') : t('Copy code')}\n          </button> #undefined\n          <button #undefined\n            className=\"flex items-center rounded bg-none p-1 text-xs text-white\" #undefined\n            onClick={downloadAsFile} #undefined\n          >\n            <IconDownload size={18} />\n          </button> #undefined\n        </div> #undefined\n      </div> #undefined\n\n      <SyntaxHighlighter\n        language={language}\n        style={oneDark}\n        customStyle={{ margin: 0 }}\n      >\n        {value}\n      </SyntaxHighlighter>\n    </div>\n  );\n});\nCodeBlock.displayName = 'CodeBlock';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/CodeBlock.: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FunctionComponent#displayName.: undefined\n\"\"\"\n","documentation":"The code defines a React component called \"CodeBlock\" that displays code in a syntax-highlighted format. It takes two props: \"language\" and \"value\", which represent the programming language and the value of the variable, respectively. The component includes a copy button to copy the code to the clipboard and a download button to save the code as a file."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/Props#","attributes":{"range":[12,0,15,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/Props#","content":"interface Props {\n  language: string;\n  value: string;\n}","file":"/components/Markdown/CodeBlock.tsx","language":"typescript","fileHash":"12b5e4726812ed6abe9677039db266117db1976129f5aa8aef2432a5260af431","hash":"15eda5216f0359a76effad0d2f543277c9ab9143b780e7d524865b664e61a263","processedContent":"interface Props {\n  language: string;\n  value: string;\n}","documentation":"This code defines a type called \"Props\" that has two properties: \"language\" and \"value\". The \"language\" property is a string that represents the programming language, and the \"value\" property is a string that represents the value of the variable."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/Props#language.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/Props#language.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/Props#value.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/Props#value.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/CodeBlock.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/CodeBlock.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FunctionComponent#displayName.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FunctionComponent#displayName.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`index.ts`/","attributes":{"range":[0,0,1,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`index.ts`/","content":"export { default } from './Folder';\n","file":"/components/Folder/index.ts","language":"typescript","fileHash":"94cd3812ef68ed544160d9fa598e4a97795bda18b61e053b6a1de1a8be90bb7b","hash":"94cd3812ef68ed544160d9fa598e4a97795bda18b61e053b6a1de1a8be90bb7b","processedContent":"export { default } from './Folder';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.: This code defines a component that renders a folder and its subfolders, with the ability to rename or delete the folder. It also includes a search bar for filtering the folders.\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/: This code defines a component that renders a folder and its subfolders, with the ability to rename or delete the folder. It also includes a search bar for filtering the folders.\n\"\"\"\n","documentation":"This code defines a component that renders a folder and its subfolders, with the ability to rename or delete the folder, and includes a search bar for filtering the folders."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","language":"typescript","range":[29,15,189,1],"content":"({\n  currentFolder,\n  searchTerm,\n  handleDrop,\n  folderComponent,\n}: Props) => {\n  const { handleDeleteFolder, handleUpdateFolder } = useContext(HomeContext);\n\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [isRenaming, setIsRenaming] = useState(false);\n  const [renameValue, setRenameValue] = useState('');\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleEnterDown = (e: KeyboardEvent<HTMLDivElement>) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      handleRename();\n    }\n  };\n\n  const handleRename = () => {\n    handleUpdateFolder(currentFolder.id, renameValue);\n    setRenameValue('');\n    setIsRenaming(false);\n  };\n\n  const dropHandler = (e: any) => {\n    if (e.dataTransfer) {\n      setIsOpen(true);\n\n      handleDrop(e, currentFolder);\n\n      e.target.style.background = 'none';\n    }\n  };\n\n  const allowDrop = (e: any) => {\n    e.preventDefault();\n  };\n\n  const highlightDrop = (e: any) => {\n    e.target.style.background = '#343541';\n  };\n\n  const removeHighlight = (e: any) => {\n    e.target.style.background = 'none';\n  };\n\n  useEffect(() => {\n    if (isRenaming) {\n      setIsDeleting(false);\n    } else if (isDeleting) {\n      setIsRenaming(false);\n    }\n  }, [isRenaming, isDeleting]);\n\n  useEffect(() => {\n    if (searchTerm) {\n      setIsOpen(true);\n    } else {\n      setIsOpen(false);\n    }\n  }, [searchTerm]);\n\n  return (\n    <>\n      <div className=\"relative flex items-center\">\n        {isRenaming ? (\n          <div className=\"flex w-full items-center gap-3 bg-[#343541]/90 p-3\">\n            {isOpen ? (\n              <IconCaretDown size={18} />\n            ) : (\n              <IconCaretRight size={18} />\n            )}\n            <input\n              className=\"mr-12 flex-1 overflow-hidden overflow-ellipsis border-neutral-400 bg-transparent text-left text-[12.5px] leading-3 text-white outline-none focus:border-neutral-100\"\n              type=\"text\"\n              value={renameValue}\n              onChange={(e) => setRenameValue(e.target.value)}\n              onKeyDown={handleEnterDown}\n              autoFocus\n            />\n          </div>\n        ) : (\n          <button\n            className={`flex w-full cursor-pointer items-center gap-3 rounded-lg p-3 text-sm transition-colors duration-200 hover:bg-[#343541]/90`}\n            onClick={() => setIsOpen(!isOpen)}\n            onDrop={(e) => dropHandler(e)}\n            onDragOver={allowDrop}\n            onDragEnter={highlightDrop}\n            onDragLeave={removeHighlight}\n          >\n            {isOpen ? (\n              <IconCaretDown size={18} />\n            ) : (\n              <IconCaretRight size={18} />\n            )}\n\n            <div className=\"relative max-h-5 flex-1 overflow-hidden text-ellipsis whitespace-nowrap break-all text-left text-[12.5px] leading-3\">\n              {currentFolder.name}\n            </div>\n          </button>\n        )}\n\n        {(isDeleting || isRenaming) && (\n          <div className=\"absolute right-1 z-10 flex text-gray-300\">\n            <SidebarActionButton\n              handleClick={(e) => {\n                e.stopPropagation();\n\n                if (isDeleting) {\n                  handleDeleteFolder(currentFolder.id);\n                } else if (isRenaming) {\n                  handleRename();\n                }\n\n                setIsDeleting(false);\n                setIsRenaming(false);\n              }}\n            >\n              <IconCheck size={18} />\n            </SidebarActionButton>\n            <SidebarActionButton\n              handleClick={(e) => {\n                e.stopPropagation();\n                setIsDeleting(false);\n                setIsRenaming(false);\n              }}\n            >\n              <IconX size={18} />\n            </SidebarActionButton>\n          </div>\n        )}\n\n        {!isDeleting && !isRenaming && (\n          <div className=\"absolute right-1 z-10 flex text-gray-300\">\n            <SidebarActionButton\n              handleClick={(e) => {\n                e.stopPropagation();\n                setIsRenaming(true);\n                setRenameValue(currentFolder.name);\n              }}\n            >\n              <IconPencil size={18} />\n            </SidebarActionButton>\n            <SidebarActionButton\n              handleClick={(e) => {\n                e.stopPropagation();\n                setIsDeleting(true);\n              }}\n            >\n              <IconTrash size={18} />\n            </SidebarActionButton>\n          </div>\n        )}\n      </div>\n\n      {isOpen ? folderComponent : null}\n    </>\n  );\n}","file":"/components/Folder/Folder.tsx","fileHash":"7fb842bf630bd4f117dea865a6cdbc0b64ad12a040eb32d953d426fdd850bf26","hash":"af8aff36d297153fb0d402924f31c9bbd57db470b8f21cf1c55e04afce8a9765","processedContent":"({\n  currentFolder, #undefined\n  searchTerm, #undefined\n  handleDrop, #undefined\n  folderComponent, #undefined\n}: Props) => { #This code defines a component's props, which are used to pass data from the parent component to the child component. The props include a current folder, a search term, a handle drop function, and a folder component that is an array of React elements or undefined.\n  const { handleDeleteFolder, handleUpdateFolder } = useContext(HomeContext);\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().: undefined\n  \"\"\"\n\n  const [isDeleting, setIsDeleting] = useState(false); #undefined\n  const [isRenaming, setIsRenaming] = useState(false); #undefined\n  const [renameValue, setRenameValue] = useState(''); #undefined\n  const [isOpen, setIsOpen] = useState(false); #undefined\n\n  const handleEnterDown = (e: KeyboardEvent<HTMLDivElement>) => {\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLDivElement#: undefined\n  \"\"\"\n    if (e.key === 'Enter') { #undefined\n      e.preventDefault(); #undefined\n      handleRename();\n    }\n  };\n\n  const handleRename = () => {\n    handleUpdateFolder(currentFolder.id, renameValue);\n    setRenameValue('');\n    setIsRenaming(false);\n  };\n\n  const dropHandler = (e: any) => {\n    if (e.dataTransfer) {\n      setIsOpen(true);\n\n      handleDrop(e, currentFolder);\n\n      e.target.style.background = 'none';\n    }\n  };\n\n  const allowDrop = (e: any) => {\n    e.preventDefault();\n  };\n\n  const highlightDrop = (e: any) => {\n    e.target.style.background = '#343541';\n  };\n\n  const removeHighlight = (e: any) => {\n    e.target.style.background = 'none';\n  };\n\n  useEffect(() => { #undefined\n    if (isRenaming) {\n      setIsDeleting(false);\n    } else if (isDeleting) {\n      setIsRenaming(false);\n    }\n  }, [isRenaming, isDeleting]);\n\n  useEffect(() => { #undefined\n    if (searchTerm) {\n      setIsOpen(true);\n    } else {\n      setIsOpen(false);\n    }\n  }, [searchTerm]);\n\n  return (\n    <>\n      <div className=\"relative flex items-center\">\n      \"\"\"\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n      \"\"\"\n        {isRenaming ? (\n          <div className=\"flex w-full items-center gap-3 bg-[#343541]/90 p-3\">\n          \"\"\"\n          scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n          scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n          \"\"\"\n            {isOpen ? (\n              <IconCaretDown size={18} />\n            ) : (\n              <IconCaretRight size={18} />\n            )}\n            <input #undefined\n              className=\"mr-12 flex-1 overflow-hidden overflow-ellipsis border-neutral-400 bg-transparent text-left text-[12.5px] leading-3 text-white outline-none focus:border-neutral-100\" #undefined\n              type=\"text\" #undefined\n              value={renameValue} #undefined\n              onChange={(e) => setRenameValue(e.target.value)}\n              \"\"\"\n              scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#onChange.: undefined\n              scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ChangeEvent#target.: undefined\n              \"\"\"\n              onKeyDown={handleEnterDown} #undefined\n              autoFocus #undefined\n            />\n          </div> #undefined\n        ) : (\n          <button #undefined\n            className={`flex w-full cursor-pointer items-center gap-3 rounded-lg p-3 text-sm transition-colors duration-200 hover:bg-[#343541]/90`} #undefined\n            onClick={() => setIsOpen(!isOpen)} #undefined\n            onDrop={(e) => dropHandler(e)} #undefined\n            onDragOver={allowDrop} #undefined\n            onDragEnter={highlightDrop} #undefined\n            onDragLeave={removeHighlight} #undefined\n          >\n            {isOpen ? (\n              <IconCaretDown size={18} />\n            ) : (\n              <IconCaretRight size={18} />\n            )}\n\n            <div className=\"relative max-h-5 flex-1 overflow-hidden text-ellipsis whitespace-nowrap break-all text-left text-[12.5px] leading-3\">\n            \"\"\"\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n            \"\"\"\n              {currentFolder.name}\n            </div> #undefined\n          </button> #undefined\n        )}\n\n        {(isDeleting || isRenaming) && (\n          <div className=\"absolute right-1 z-10 flex text-gray-300\">\n          \"\"\"\n          scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n          scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n          \"\"\"\n          \"\"\"\n          scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n          scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n          \"\"\"\n            <SidebarActionButton\n              handleClick={(e) => {\n                e.stopPropagation();\n\n                if (isDeleting) {\n                  handleDeleteFolder(currentFolder.id);\n                } else if (isRenaming) {\n                  handleRename();\n                }\n\n                setIsDeleting(false);\n                setIsRenaming(false);\n              }}\n            >\n              <IconCheck size={18} />\n            </SidebarActionButton>\n            <SidebarActionButton\n              handleClick={(e) => {\n                e.stopPropagation();\n                setIsDeleting(false);\n                setIsRenaming(false);\n              }}\n            >\n              <IconX size={18} />\n            </SidebarActionButton>\n          </div> #undefined\n        )}\n\n        {!isDeleting && !isRenaming && (\n          <div className=\"absolute right-1 z-10 flex text-gray-300\">\n            <SidebarActionButton\n              handleClick={(e) => {\n                e.stopPropagation();\n                setIsRenaming(true);\n                setRenameValue(currentFolder.name);\n              }}\n            >\n              <IconPencil size={18} />\n            </SidebarActionButton>\n            <SidebarActionButton\n              handleClick={(e) => {\n                e.stopPropagation();\n                setIsDeleting(true);\n              }}\n            >\n              <IconTrash size={18} />\n            </SidebarActionButton>\n          </div> #undefined\n        )}\n      </div>\n\n      {isOpen ? folderComponent : null}\n    </>\n  );\n}","documentation":"This code defines a component that renders a folder and its subfolders, with the ability to rename or delete the folder. It also includes a search bar for filtering the folders."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/","language":"typescript","range":[0,0,192,0],"content":"import {\n  IconCaretDown,\n  IconCaretRight,\n  IconCheck,\n  IconPencil,\n  IconTrash,\n  IconX,\n} from '@tabler/icons-react';\nimport {\n  KeyboardEvent,\n  ReactElement,\n  useContext,\n  useEffect,\n  useState,\n} from 'react';\n\nimport { FolderInterface } from '@/types/folder';\n\nimport HomeContext from '@/pages/api/home/home.context';\n\nimport SidebarActionButton from '@/components/Buttons/SidebarActionButton';\n\ninterface Props {\n  currentFolder: FolderInterface;\n  searchTerm: string;\n  handleDrop: (e: any, folder: FolderInterface) => void;\n  folderComponent: (ReactElement | undefined)[];\n}\n\nconst Folder = ({\n  currentFolder,\n  searchTerm,\n  handleDrop,\n  folderComponent,\n}: Props) => {\n  const { handleDeleteFolder, handleUpdateFolder } = useContext(HomeContext);\n\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [isRenaming, setIsRenaming] = useState(false);\n  const [renameValue, setRenameValue] = useState('');\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleEnterDown = (e: KeyboardEvent<HTMLDivElement>) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      handleRename();\n    }\n  };\n\n  const handleRename = () => {\n    handleUpdateFolder(currentFolder.id, renameValue);\n    setRenameValue('');\n    setIsRenaming(false);\n  };\n\n  const dropHandler = (e: any) => {\n    if (e.dataTransfer) {\n      setIsOpen(true);\n\n      handleDrop(e, currentFolder);\n\n      e.target.style.background = 'none';\n    }\n  };\n\n  const allowDrop = (e: any) => {\n    e.preventDefault();\n  };\n\n  const highlightDrop = (e: any) => {\n    e.target.style.background = '#343541';\n  };\n\n  const removeHighlight = (e: any) => {\n    e.target.style.background = 'none';\n  };\n\n  useEffect(() => {\n    if (isRenaming) {\n      setIsDeleting(false);\n    } else if (isDeleting) {\n      setIsRenaming(false);\n    }\n  }, [isRenaming, isDeleting]);\n\n  useEffect(() => {\n    if (searchTerm) {\n      setIsOpen(true);\n    } else {\n      setIsOpen(false);\n    }\n  }, [searchTerm]);\n\n  return (\n    <>\n      <div className=\"relative flex items-center\">\n        {isRenaming ? (\n          <div className=\"flex w-full items-center gap-3 bg-[#343541]/90 p-3\">\n            {isOpen ? (\n              <IconCaretDown size={18} />\n            ) : (\n              <IconCaretRight size={18} />\n            )}\n            <input\n              className=\"mr-12 flex-1 overflow-hidden overflow-ellipsis border-neutral-400 bg-transparent text-left text-[12.5px] leading-3 text-white outline-none focus:border-neutral-100\"\n              type=\"text\"\n              value={renameValue}\n              onChange={(e) => setRenameValue(e.target.value)}\n              onKeyDown={handleEnterDown}\n              autoFocus\n            />\n          </div>\n        ) : (\n          <button\n            className={`flex w-full cursor-pointer items-center gap-3 rounded-lg p-3 text-sm transition-colors duration-200 hover:bg-[#343541]/90`}\n            onClick={() => setIsOpen(!isOpen)}\n            onDrop={(e) => dropHandler(e)}\n            onDragOver={allowDrop}\n            onDragEnter={highlightDrop}\n            onDragLeave={removeHighlight}\n          >\n            {isOpen ? (\n              <IconCaretDown size={18} />\n            ) : (\n              <IconCaretRight size={18} />\n            )}\n\n            <div className=\"relative max-h-5 flex-1 overflow-hidden text-ellipsis whitespace-nowrap break-all text-left text-[12.5px] leading-3\">\n              {currentFolder.name}\n            </div>\n          </button>\n        )}\n\n        {(isDeleting || isRenaming) && (\n          <div className=\"absolute right-1 z-10 flex text-gray-300\">\n            <SidebarActionButton\n              handleClick={(e) => {\n                e.stopPropagation();\n\n                if (isDeleting) {\n                  handleDeleteFolder(currentFolder.id);\n                } else if (isRenaming) {\n                  handleRename();\n                }\n\n                setIsDeleting(false);\n                setIsRenaming(false);\n              }}\n            >\n              <IconCheck size={18} />\n            </SidebarActionButton>\n            <SidebarActionButton\n              handleClick={(e) => {\n                e.stopPropagation();\n                setIsDeleting(false);\n                setIsRenaming(false);\n              }}\n            >\n              <IconX size={18} />\n            </SidebarActionButton>\n          </div>\n        )}\n\n        {!isDeleting && !isRenaming && (\n          <div className=\"absolute right-1 z-10 flex text-gray-300\">\n            <SidebarActionButton\n              handleClick={(e) => {\n                e.stopPropagation();\n                setIsRenaming(true);\n                setRenameValue(currentFolder.name);\n              }}\n            >\n              <IconPencil size={18} />\n            </SidebarActionButton>\n            <SidebarActionButton\n              handleClick={(e) => {\n                e.stopPropagation();\n                setIsDeleting(true);\n              }}\n            >\n              <IconTrash size={18} />\n            </SidebarActionButton>\n          </div>\n        )}\n      </div>\n\n      {isOpen ? folderComponent : null}\n    </>\n  );\n};\n\nexport default Folder;\n","file":"/components/Folder/Folder.tsx","fileHash":"7fb842bf630bd4f117dea865a6cdbc0b64ad12a040eb32d953d426fdd850bf26","hash":"7fb842bf630bd4f117dea865a6cdbc0b64ad12a040eb32d953d426fdd850bf26","processedContent":"import {\n  IconCaretDown,\n  IconCaretRight,\n  IconCheck,\n  IconPencil,\n  IconTrash,\n  IconX,\n} from '@tabler/icons-react';\nimport {\n  KeyboardEvent, #undefined\n  ReactElement, #undefined\n  useContext,\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().: undefined\n  \"\"\"\n  useEffect, #undefined\n  useState, #undefined\n} from 'react'; #undefined\n\nimport { FolderInterface } from '@/types/folder';\n\nimport HomeContext from '@/pages/api/home/home.context';\n\nimport SidebarActionButton from '@/components/Buttons/SidebarActionButton';\n\ninterface Props {\n  \"\"\"This code defines a component's props, which are used to pass data from the parent component to the child component. The props include a current folder, a search term, a handle drop function, and a folder component that is an array of React elements or undefined.\"\"\"\n  pass\n\nconst Folder = ({\n  \"\"\"This code defines a component that renders a folder and its subfolders, with the ability to rename or delete the folder. It also includes a search bar for filtering the folders.\"\"\"\n  pass\n\nexport default Folder; #This code defines a component that renders a folder and its subfolders, with the ability to rename or delete the folder. It also includes a search bar for filtering the folders.\n","documentation":"This code defines a component that renders a folder and its subfolders, with the ability to rename or delete the folder. It also includes a search bar for filtering the folders."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Props#","attributes":{"range":[22,0,27,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Props#","content":"interface Props {\n  currentFolder: FolderInterface;\n  searchTerm: string;\n  handleDrop: (e: any, folder: FolderInterface) => void;\n  folderComponent: (ReactElement | undefined)[];\n}","file":"/components/Folder/Folder.tsx","language":"typescript","fileHash":"7fb842bf630bd4f117dea865a6cdbc0b64ad12a040eb32d953d426fdd850bf26","hash":"4ecfdb0676692f1446e9e77fe4abb157395214e481ea7a70d7a9921c1ba4e817","processedContent":"interface Props {\n  currentFolder: FolderInterface;\n  searchTerm: string;\n  handleDrop: (e: any, folder: FolderInterface) => void;\n  folderComponent: (ReactElement | undefined)[]; #undefined\n}","documentation":"This code defines a component's props, which are used to pass data from the parent component to the child component. The props include a current folder, a search term, a handle drop function, and a folder component that is an array of React elements or undefined."}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ReactElement#","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ReactElement#","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Props#currentFolder.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Props#currentFolder.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Props#searchTerm.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Props#searchTerm.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Props#handleDrop.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Props#handleDrop.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Props#folderComponent.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Props#folderComponent.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#autoFocus.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#autoFocus.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/","attributes":{"range":[0,0,241,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/","content":"import { useCallback, useContext, useEffect } from 'react';\n\nimport { useTranslation } from 'next-i18next';\n\nimport { useCreateReducer } from '@/hooks/useCreateReducer';\n\nimport { DEFAULT_SYSTEM_PROMPT, DEFAULT_TEMPERATURE } from '@/utils/app/const';\nimport { saveConversation, saveConversations } from '@/utils/app/conversation';\nimport { saveFolders } from '@/utils/app/folders';\nimport { exportData, importData } from '@/utils/app/importExport';\n\nimport { Conversation } from '@/types/chat';\nimport { LatestExportFormat, SupportedExportFormats } from '@/types/export';\nimport { OpenAIModels } from '@/types/openai';\nimport { PluginKey } from '@/types/plugin';\n\nimport HomeContext from '@/pages/api/home/home.context';\n\nimport { ChatFolders } from './components/ChatFolders';\nimport { ChatbarSettings } from './components/ChatbarSettings';\nimport { Conversations } from './components/Conversations';\n\nimport Sidebar from '../Sidebar';\nimport ChatbarContext from './Chatbar.context';\nimport { ChatbarInitialState, initialState } from './Chatbar.state';\n\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const Chatbar = () => {\n  const { t } = useTranslation('sidebar');\n\n  const chatBarContextValue = useCreateReducer<ChatbarInitialState>({\n    initialState,\n  });\n\n  const {\n    state: { conversations, showChatbar, defaultModelId, folders, pluginKeys },\n    dispatch: homeDispatch,\n    handleCreateFolder,\n    handleNewConversation,\n    handleUpdateConversation,\n  } = useContext(HomeContext);\n\n  const {\n    state: { searchTerm, filteredConversations },\n    dispatch: chatDispatch,\n  } = chatBarContextValue;\n\n  const handleApiKeyChange = useCallback(\n    (apiKey: string) => {\n      homeDispatch({ field: 'apiKey', value: apiKey });\n\n      localStorage.setItem('apiKey', apiKey);\n    },\n    [homeDispatch],\n  );\n\n  const handlePluginKeyChange = (pluginKey: PluginKey) => {\n    if (pluginKeys.some((key) => key.pluginId === pluginKey.pluginId)) {\n      const updatedPluginKeys = pluginKeys.map((key) => {\n        if (key.pluginId === pluginKey.pluginId) {\n          return pluginKey;\n        }\n\n        return key;\n      });\n\n      homeDispatch({ field: 'pluginKeys', value: updatedPluginKeys });\n\n      localStorage.setItem('pluginKeys', JSON.stringify(updatedPluginKeys));\n    } else {\n      homeDispatch({ field: 'pluginKeys', value: [...pluginKeys, pluginKey] });\n\n      localStorage.setItem(\n        'pluginKeys',\n        JSON.stringify([...pluginKeys, pluginKey]),\n      );\n    }\n  };\n\n  const handleClearPluginKey = (pluginKey: PluginKey) => {\n    const updatedPluginKeys = pluginKeys.filter(\n      (key) => key.pluginId !== pluginKey.pluginId,\n    );\n\n    if (updatedPluginKeys.length === 0) {\n      homeDispatch({ field: 'pluginKeys', value: [] });\n      localStorage.removeItem('pluginKeys');\n      return;\n    }\n\n    homeDispatch({ field: 'pluginKeys', value: updatedPluginKeys });\n\n    localStorage.setItem('pluginKeys', JSON.stringify(updatedPluginKeys));\n  };\n\n  const handleExportData = () => {\n    exportData();\n  };\n\n  const handleImportConversations = (data: SupportedExportFormats) => {\n    const { history, folders, prompts }: LatestExportFormat = importData(data);\n    homeDispatch({ field: 'conversations', value: history });\n    homeDispatch({\n      field: 'selectedConversation',\n      value: history[history.length - 1],\n    });\n    homeDispatch({ field: 'folders', value: folders });\n    homeDispatch({ field: 'prompts', value: prompts });\n\n    window.location.reload();\n  };\n\n  const handleClearConversations = () => {\n    defaultModelId &&\n      homeDispatch({\n        field: 'selectedConversation',\n        value: {\n          id: uuidv4(),\n          name: t('New Conversation'),\n          messages: [],\n          model: OpenAIModels[defaultModelId],\n          prompt: DEFAULT_SYSTEM_PROMPT,\n          temperature: DEFAULT_TEMPERATURE,\n          folderId: null,\n        },\n      });\n\n    homeDispatch({ field: 'conversations', value: [] });\n\n    localStorage.removeItem('conversationHistory');\n    localStorage.removeItem('selectedConversation');\n\n    const updatedFolders = folders.filter((f) => f.type !== 'chat');\n\n    homeDispatch({ field: 'folders', value: updatedFolders });\n    saveFolders(updatedFolders);\n  };\n\n  const handleDeleteConversation = (conversation: Conversation) => {\n    const updatedConversations = conversations.filter(\n      (c) => c.id !== conversation.id,\n    );\n\n    homeDispatch({ field: 'conversations', value: updatedConversations });\n    chatDispatch({ field: 'searchTerm', value: '' });\n    saveConversations(updatedConversations);\n\n    if (updatedConversations.length > 0) {\n      homeDispatch({\n        field: 'selectedConversation',\n        value: updatedConversations[updatedConversations.length - 1],\n      });\n\n      saveConversation(updatedConversations[updatedConversations.length - 1]);\n    } else {\n      defaultModelId &&\n        homeDispatch({\n          field: 'selectedConversation',\n          value: {\n            id: uuidv4(),\n            name: t('New Conversation'),\n            messages: [],\n            model: OpenAIModels[defaultModelId],\n            prompt: DEFAULT_SYSTEM_PROMPT,\n            temperature: DEFAULT_TEMPERATURE,\n            folderId: null,\n          },\n        });\n\n      localStorage.removeItem('selectedConversation');\n    }\n  };\n\n  const handleToggleChatbar = () => {\n    homeDispatch({ field: 'showChatbar', value: !showChatbar });\n    localStorage.setItem('showChatbar', JSON.stringify(!showChatbar));\n  };\n\n  const handleDrop = (e: any) => {\n    if (e.dataTransfer) {\n      const conversation = JSON.parse(e.dataTransfer.getData('conversation'));\n      handleUpdateConversation(conversation, { key: 'folderId', value: 0 });\n      chatDispatch({ field: 'searchTerm', value: '' });\n      e.target.style.background = 'none';\n    }\n  };\n\n  useEffect(() => {\n    if (searchTerm) {\n      chatDispatch({\n        field: 'filteredConversations',\n        value: conversations.filter((conversation) => {\n          const searchable =\n            conversation.name.toLocaleLowerCase() +\n            ' ' +\n            conversation.messages.map((message) => message.content).join(' ');\n          return searchable.toLowerCase().includes(searchTerm.toLowerCase());\n        }),\n      });\n    } else {\n      chatDispatch({\n        field: 'filteredConversations',\n        value: conversations,\n      });\n    }\n  }, [searchTerm, conversations]);\n\n  return (\n    <ChatbarContext.Provider\n      value={{\n        ...chatBarContextValue,\n        handleDeleteConversation,\n        handleClearConversations,\n        handleImportConversations,\n        handleExportData,\n        handlePluginKeyChange,\n        handleClearPluginKey,\n        handleApiKeyChange,\n      }}\n    >\n      <Sidebar<Conversation>\n        side={'left'}\n        isOpen={showChatbar}\n        addItemButtonTitle={t('New chat')}\n        itemComponent={<Conversations conversations={filteredConversations} />}\n        folderComponent={<ChatFolders searchTerm={searchTerm} />}\n        items={filteredConversations}\n        searchTerm={searchTerm}\n        handleSearchTerm={(searchTerm: string) =>\n          chatDispatch({ field: 'searchTerm', value: searchTerm })\n        }\n        toggleOpen={handleToggleChatbar}\n        handleCreateItem={handleNewConversation}\n        handleCreateFolder={() => handleCreateFolder(t('New folder'), 'chat')}\n        handleDrop={handleDrop}\n        footerComponent={<ChatbarSettings />}\n      />\n    </ChatbarContext.Provider>\n  );\n};\n","file":"/components/Chatbar/Chatbar.tsx","language":"typescript","fileHash":"6a69fc60779cf27dd740506824db673786985d4d717988282716f038113bee9f","hash":"6a69fc60779cf27dd740506824db673786985d4d717988282716f038113bee9f","processedContent":"import { useCallback, useContext, useEffect } from 'react';\n\"\"\"\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useCallback().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/: undefined\n\"\"\"\n\nimport { useTranslation } from 'next-i18next';\n\nimport { useCreateReducer } from '@/hooks/useCreateReducer';\n\nimport { DEFAULT_SYSTEM_PROMPT, DEFAULT_TEMPERATURE } from '@/utils/app/const';\nimport { saveConversation, saveConversations } from '@/utils/app/conversation';\nimport { saveFolders } from '@/utils/app/folders';\nimport { exportData, importData } from '@/utils/app/importExport';\n\nimport { Conversation } from '@/types/chat';\nimport { LatestExportFormat, SupportedExportFormats } from '@/types/export';\nimport { OpenAIModels } from '@/types/openai';\nimport { PluginKey } from '@/types/plugin';\n\nimport HomeContext from '@/pages/api/home/home.context';\n\nimport { ChatFolders } from './components/ChatFolders';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatFolders.tsx`/ChatFolders.: This code is a React component that renders a list of chat folders in a chat application. It allows users to rename or delete conversations by clicking on the conversation name or using keyboard shortcuts. The component also includes a modal for renaming and deleting conversations.\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatFolders.tsx`/: This code is a React component that renders a list of chat folders in a chat application, allowing users to rename or delete conversations. It uses the `useContext` hook from React to access the `HomeContext` and the `FolderInterface` type to define the props for the component.\n\"\"\"\nimport { ChatbarSettings } from './components/ChatbarSettings';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/ChatbarSettings.: This code defines a React component that displays a sidebar with several buttons and a modal window. The buttons allow users to clear conversations, import data, export data, and access settings. The component also manages the state of the modal window and updates the plugin keys in the HomeContext when the user clicks the \"Save\" button.\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/: The code defines a React component called ChatbarSettings that displays a sidebar with several buttons and a modal window. The buttons allow users to clear conversations, import data, export data, and access settings. The component also manages the state of the modal window and updates the plugin keys in the HomeContext when the user clicks the \"Save\" button.\n\"\"\"\nimport { Conversations } from './components/Conversations';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversations.tsx`/Conversations.: This code is a React component that renders a list of conversations in a chat application, allowing users to rename or delete them.\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversations.tsx`/: This code defines a React component that renders a list of conversations in a chat application, allowing users to rename or delete them.\n\"\"\"\n\nimport Sidebar from '../Sidebar';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.: This code defines a React component for a folder tree, with properties that allow users to add items, search for items, and toggle the open/closed state of the component.\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`index.ts`/: This code defines a React component for a folder tree that allows users to add, search, and toggle the open/closed state of items.\n\"\"\"\nimport ChatbarContext from './Chatbar.context';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/ChatbarContext.: undefined\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/: This code defines a context for a chatbar component, which includes an initial state interface and a default export. The initial state interface defines properties such as searchTerm and filteredConversations, and methods for handling actions like deleting conversations or importing data.\n\"\"\"\nimport { ChatbarInitialState, initialState } from './Chatbar.state';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.state.tsx`/ChatbarInitialState#: This code defines an interface for the initial state of a chatbar component. It includes two properties: searchTerm, which is a string, and filteredConversations, which is an array of conversations.\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.state.tsx`/initialState.: undefined\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.state.tsx`/: This code defines an interface for the initial state of a chatbar component, which includes two properties: searchTerm (a string) and filteredConversations (an array of conversations).\n\"\"\"\n\nimport { v4 as uuidv4 } from 'uuid';\n\"\"\"\nscip-typescript npm @types/uuid 9.0.7 `index.d.ts`/v4.: undefined\nscip-typescript npm @types/uuid 9.0.7 `index.d.ts`/v4.: undefined\nscip-typescript npm @types/uuid 9.0.7 `index.d.ts`/: undefined\n\"\"\"\n\nexport const Chatbar = () => {\n  \"\"\"This code defines a React component for a chat application's sidebar, which allows users to add and manage conversations, as well as access settings and import/export data.\"\"\"\n  pass\n","documentation":"The code defines a React component for a chat application's sidebar, which allows users to add and manage conversations, as well as access settings and import/export data."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/Chatbar.","attributes":{"range":[28,23,240,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/Chatbar.","content":"() => {\n  const { t } = useTranslation('sidebar');\n\n  const chatBarContextValue = useCreateReducer<ChatbarInitialState>({\n    initialState,\n  });\n\n  const {\n    state: { conversations, showChatbar, defaultModelId, folders, pluginKeys },\n    dispatch: homeDispatch,\n    handleCreateFolder,\n    handleNewConversation,\n    handleUpdateConversation,\n  } = useContext(HomeContext);\n\n  const {\n    state: { searchTerm, filteredConversations },\n    dispatch: chatDispatch,\n  } = chatBarContextValue;\n\n  const handleApiKeyChange = useCallback(\n    (apiKey: string) => {\n      homeDispatch({ field: 'apiKey', value: apiKey });\n\n      localStorage.setItem('apiKey', apiKey);\n    },\n    [homeDispatch],\n  );\n\n  const handlePluginKeyChange = (pluginKey: PluginKey) => {\n    if (pluginKeys.some((key) => key.pluginId === pluginKey.pluginId)) {\n      const updatedPluginKeys = pluginKeys.map((key) => {\n        if (key.pluginId === pluginKey.pluginId) {\n          return pluginKey;\n        }\n\n        return key;\n      });\n\n      homeDispatch({ field: 'pluginKeys', value: updatedPluginKeys });\n\n      localStorage.setItem('pluginKeys', JSON.stringify(updatedPluginKeys));\n    } else {\n      homeDispatch({ field: 'pluginKeys', value: [...pluginKeys, pluginKey] });\n\n      localStorage.setItem(\n        'pluginKeys',\n        JSON.stringify([...pluginKeys, pluginKey]),\n      );\n    }\n  };\n\n  const handleClearPluginKey = (pluginKey: PluginKey) => {\n    const updatedPluginKeys = pluginKeys.filter(\n      (key) => key.pluginId !== pluginKey.pluginId,\n    );\n\n    if (updatedPluginKeys.length === 0) {\n      homeDispatch({ field: 'pluginKeys', value: [] });\n      localStorage.removeItem('pluginKeys');\n      return;\n    }\n\n    homeDispatch({ field: 'pluginKeys', value: updatedPluginKeys });\n\n    localStorage.setItem('pluginKeys', JSON.stringify(updatedPluginKeys));\n  };\n\n  const handleExportData = () => {\n    exportData();\n  };\n\n  const handleImportConversations = (data: SupportedExportFormats) => {\n    const { history, folders, prompts }: LatestExportFormat = importData(data);\n    homeDispatch({ field: 'conversations', value: history });\n    homeDispatch({\n      field: 'selectedConversation',\n      value: history[history.length - 1],\n    });\n    homeDispatch({ field: 'folders', value: folders });\n    homeDispatch({ field: 'prompts', value: prompts });\n\n    window.location.reload();\n  };\n\n  const handleClearConversations = () => {\n    defaultModelId &&\n      homeDispatch({\n        field: 'selectedConversation',\n        value: {\n          id: uuidv4(),\n          name: t('New Conversation'),\n          messages: [],\n          model: OpenAIModels[defaultModelId],\n          prompt: DEFAULT_SYSTEM_PROMPT,\n          temperature: DEFAULT_TEMPERATURE,\n          folderId: null,\n        },\n      });\n\n    homeDispatch({ field: 'conversations', value: [] });\n\n    localStorage.removeItem('conversationHistory');\n    localStorage.removeItem('selectedConversation');\n\n    const updatedFolders = folders.filter((f) => f.type !== 'chat');\n\n    homeDispatch({ field: 'folders', value: updatedFolders });\n    saveFolders(updatedFolders);\n  };\n\n  const handleDeleteConversation = (conversation: Conversation) => {\n    const updatedConversations = conversations.filter(\n      (c) => c.id !== conversation.id,\n    );\n\n    homeDispatch({ field: 'conversations', value: updatedConversations });\n    chatDispatch({ field: 'searchTerm', value: '' });\n    saveConversations(updatedConversations);\n\n    if (updatedConversations.length > 0) {\n      homeDispatch({\n        field: 'selectedConversation',\n        value: updatedConversations[updatedConversations.length - 1],\n      });\n\n      saveConversation(updatedConversations[updatedConversations.length - 1]);\n    } else {\n      defaultModelId &&\n        homeDispatch({\n          field: 'selectedConversation',\n          value: {\n            id: uuidv4(),\n            name: t('New Conversation'),\n            messages: [],\n            model: OpenAIModels[defaultModelId],\n            prompt: DEFAULT_SYSTEM_PROMPT,\n            temperature: DEFAULT_TEMPERATURE,\n            folderId: null,\n          },\n        });\n\n      localStorage.removeItem('selectedConversation');\n    }\n  };\n\n  const handleToggleChatbar = () => {\n    homeDispatch({ field: 'showChatbar', value: !showChatbar });\n    localStorage.setItem('showChatbar', JSON.stringify(!showChatbar));\n  };\n\n  const handleDrop = (e: any) => {\n    if (e.dataTransfer) {\n      const conversation = JSON.parse(e.dataTransfer.getData('conversation'));\n      handleUpdateConversation(conversation, { key: 'folderId', value: 0 });\n      chatDispatch({ field: 'searchTerm', value: '' });\n      e.target.style.background = 'none';\n    }\n  };\n\n  useEffect(() => {\n    if (searchTerm) {\n      chatDispatch({\n        field: 'filteredConversations',\n        value: conversations.filter((conversation) => {\n          const searchable =\n            conversation.name.toLocaleLowerCase() +\n            ' ' +\n            conversation.messages.map((message) => message.content).join(' ');\n          return searchable.toLowerCase().includes(searchTerm.toLowerCase());\n        }),\n      });\n    } else {\n      chatDispatch({\n        field: 'filteredConversations',\n        value: conversations,\n      });\n    }\n  }, [searchTerm, conversations]);\n\n  return (\n    <ChatbarContext.Provider\n      value={{\n        ...chatBarContextValue,\n        handleDeleteConversation,\n        handleClearConversations,\n        handleImportConversations,\n        handleExportData,\n        handlePluginKeyChange,\n        handleClearPluginKey,\n        handleApiKeyChange,\n      }}\n    >\n      <Sidebar<Conversation>\n        side={'left'}\n        isOpen={showChatbar}\n        addItemButtonTitle={t('New chat')}\n        itemComponent={<Conversations conversations={filteredConversations} />}\n        folderComponent={<ChatFolders searchTerm={searchTerm} />}\n        items={filteredConversations}\n        searchTerm={searchTerm}\n        handleSearchTerm={(searchTerm: string) =>\n          chatDispatch({ field: 'searchTerm', value: searchTerm })\n        }\n        toggleOpen={handleToggleChatbar}\n        handleCreateItem={handleNewConversation}\n        handleCreateFolder={() => handleCreateFolder(t('New folder'), 'chat')}\n        handleDrop={handleDrop}\n        footerComponent={<ChatbarSettings />}\n      />\n    </ChatbarContext.Provider>\n  );\n}","file":"/components/Chatbar/Chatbar.tsx","language":"typescript","fileHash":"6a69fc60779cf27dd740506824db673786985d4d717988282716f038113bee9f","hash":"b94ea3a1fe4377c2de2331addafea62541844e27b6dcb89279a22db735dda54d","processedContent":"() => {\n  const { t } = useTranslation('sidebar');\n\n  const chatBarContextValue = useCreateReducer<ChatbarInitialState>({ #This code defines an interface for the initial state of a chatbar component. It includes two properties: searchTerm, which is a string, and filteredConversations, which is an array of conversations.\n    initialState, #This code defines an interface for the initial state of a chatbar component. It includes two properties: searchTerm, which is a string, and filteredConversations, which is an array of conversations.\n  });\n\n  const {\n    state: { conversations, showChatbar, defaultModelId, folders, pluginKeys },\n    dispatch: homeDispatch,\n    handleCreateFolder,\n    handleNewConversation,\n    handleUpdateConversation,\n  } = useContext(HomeContext);\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().: undefined\n  \"\"\"\n\n  const {\n    state: { searchTerm, filteredConversations },\n    dispatch: chatDispatch,\n  } = chatBarContextValue;\n\n  const handleApiKeyChange = useCallback( #undefined\n    (apiKey: string) => {\n      homeDispatch({ field: 'apiKey', value: apiKey });\n\n      localStorage.setItem('apiKey', apiKey);\n    },\n    [homeDispatch],\n  );\n\n  const handlePluginKeyChange = (pluginKey: PluginKey) => {\n    if (pluginKeys.some((key) => key.pluginId === pluginKey.pluginId)) {\n      const updatedPluginKeys = pluginKeys.map((key) => {\n        if (key.pluginId === pluginKey.pluginId) {\n          return pluginKey;\n        }\n\n        return key;\n      });\n\n      homeDispatch({ field: 'pluginKeys', value: updatedPluginKeys });\n\n      localStorage.setItem('pluginKeys', JSON.stringify(updatedPluginKeys));\n    } else {\n      homeDispatch({ field: 'pluginKeys', value: [...pluginKeys, pluginKey] });\n\n      localStorage.setItem(\n        'pluginKeys',\n        JSON.stringify([...pluginKeys, pluginKey]),\n      );\n    }\n  };\n\n  const handleClearPluginKey = (pluginKey: PluginKey) => {\n    const updatedPluginKeys = pluginKeys.filter(\n      (key) => key.pluginId !== pluginKey.pluginId,\n    );\n\n    if (updatedPluginKeys.length === 0) {\n      homeDispatch({ field: 'pluginKeys', value: [] });\n      localStorage.removeItem('pluginKeys');\n      return;\n    }\n\n    homeDispatch({ field: 'pluginKeys', value: updatedPluginKeys });\n\n    localStorage.setItem('pluginKeys', JSON.stringify(updatedPluginKeys));\n  };\n\n  const handleExportData = () => {\n    exportData();\n  };\n\n  const handleImportConversations = (data: SupportedExportFormats) => {\n    const { history, folders, prompts }: LatestExportFormat = importData(data);\n    homeDispatch({ field: 'conversations', value: history });\n    homeDispatch({\n      field: 'selectedConversation',\n      value: history[history.length - 1],\n    });\n    homeDispatch({ field: 'folders', value: folders });\n    homeDispatch({ field: 'prompts', value: prompts });\n\n    window.location.reload();\n  };\n\n  const handleClearConversations = () => {\n    defaultModelId &&\n      homeDispatch({\n        field: 'selectedConversation',\n        value: {\n          id: uuidv4(), #undefined\n          name: t('New Conversation'),\n          messages: [],\n          model: OpenAIModels[defaultModelId],\n          prompt: DEFAULT_SYSTEM_PROMPT,\n          temperature: DEFAULT_TEMPERATURE,\n          folderId: null,\n        },\n      });\n\n    homeDispatch({ field: 'conversations', value: [] });\n\n    localStorage.removeItem('conversationHistory');\n    localStorage.removeItem('selectedConversation');\n\n    const updatedFolders = folders.filter((f) => f.type !== 'chat');\n\n    homeDispatch({ field: 'folders', value: updatedFolders });\n    saveFolders(updatedFolders);\n  };\n\n  const handleDeleteConversation = (conversation: Conversation) => {\n    const updatedConversations = conversations.filter(\n      (c) => c.id !== conversation.id,\n    );\n\n    homeDispatch({ field: 'conversations', value: updatedConversations });\n    chatDispatch({ field: 'searchTerm', value: '' });\n    saveConversations(updatedConversations);\n\n    if (updatedConversations.length > 0) {\n      homeDispatch({\n        field: 'selectedConversation',\n        value: updatedConversations[updatedConversations.length - 1],\n      });\n\n      saveConversation(updatedConversations[updatedConversations.length - 1]);\n    } else {\n      defaultModelId &&\n        homeDispatch({\n          field: 'selectedConversation',\n          value: {\n            id: uuidv4(), #undefined\n            name: t('New Conversation'),\n            messages: [],\n            model: OpenAIModels[defaultModelId],\n            prompt: DEFAULT_SYSTEM_PROMPT,\n            temperature: DEFAULT_TEMPERATURE,\n            folderId: null,\n          },\n        });\n\n      localStorage.removeItem('selectedConversation');\n    }\n  };\n\n  const handleToggleChatbar = () => {\n    homeDispatch({ field: 'showChatbar', value: !showChatbar });\n    localStorage.setItem('showChatbar', JSON.stringify(!showChatbar));\n  };\n\n  const handleDrop = (e: any) => {\n    if (e.dataTransfer) {\n      const conversation = JSON.parse(e.dataTransfer.getData('conversation'));\n      handleUpdateConversation(conversation, { key: 'folderId', value: 0 });\n      chatDispatch({ field: 'searchTerm', value: '' });\n      e.target.style.background = 'none';\n    }\n  };\n\n  useEffect(() => { #undefined\n    if (searchTerm) {\n      chatDispatch({\n        field: 'filteredConversations',\n        value: conversations.filter((conversation) => {\n          const searchable =\n            conversation.name.toLocaleLowerCase() +\n            ' ' +\n            conversation.messages.map((message) => message.content).join(' ');\n          return searchable.toLowerCase().includes(searchTerm.toLowerCase());\n        }),\n      });\n    } else {\n      chatDispatch({\n        field: 'filteredConversations',\n        value: conversations,\n      });\n    }\n  }, [searchTerm, conversations]);\n\n  return (\n    <ChatbarContext.Provider\n    \"\"\"\n    scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/ChatbarContext.: undefined\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/Context#Provider.: undefined\n    \"\"\"\n      value={{ #undefined\n        ...chatBarContextValue,\n        handleDeleteConversation,\n        handleClearConversations,\n        handleImportConversations,\n        handleExportData,\n        handlePluginKeyChange,\n        handleClearPluginKey,\n        handleApiKeyChange,\n      }}\n    >\n      <Sidebar<Conversation> #This code defines a React component for a folder tree, with properties that allow users to add items, search for items, and toggle the open/closed state of the component.\n        side={'left'} #undefined\n        isOpen={showChatbar} #undefined\n        addItemButtonTitle={t('New chat')} #undefined\n        itemComponent={<Conversations conversations={filteredConversations} />}\n        \"\"\"\n        scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#itemComponent.: undefined\n        scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversations.tsx`/Conversations.: This code is a React component that renders a list of conversations in a chat application, allowing users to rename or delete them.\n        scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversations.tsx`/Props#conversations.: undefined\n        \"\"\"\n        folderComponent={<ChatFolders searchTerm={searchTerm} />}\n        \"\"\"\n        scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#folderComponent.: undefined\n        scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatFolders.tsx`/ChatFolders.: This code is a React component that renders a list of chat folders in a chat application. It allows users to rename or delete conversations by clicking on the conversation name or using keyboard shortcuts. The component also includes a modal for renaming and deleting conversations.\n        scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatFolders.tsx`/Props#searchTerm.: undefined\n        \"\"\"\n        items={filteredConversations} #undefined\n        searchTerm={searchTerm} #undefined\n        handleSearchTerm={(searchTerm: string) => #undefined\n          chatDispatch({ field: 'searchTerm', value: searchTerm })\n        }\n        toggleOpen={handleToggleChatbar} #undefined\n        handleCreateItem={handleNewConversation} #undefined\n        handleCreateFolder={() => handleCreateFolder(t('New folder'), 'chat')} #undefined\n        handleDrop={handleDrop} #undefined\n        footerComponent={<ChatbarSettings />}\n        \"\"\"\n        scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#footerComponent.: undefined\n        scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/ChatbarSettings.: This code defines a React component that displays a sidebar with several buttons and a modal window. The buttons allow users to clear conversations, import data, export data, and access settings. The component also manages the state of the modal window and updates the plugin keys in the HomeContext when the user clicks the \"Save\" button.\n        \"\"\"\n      />\n    </ChatbarContext.Provider>\n    \"\"\"\n    scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/ChatbarContext.: undefined\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/Context#Provider.: undefined\n    \"\"\"\n  );\n}","documentation":"This code defines a React component for a chat application's sidebar, which allows users to add and manage conversations, as well as access settings and import/export data."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatFolders.tsx`/ChatFolders.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatFolders.tsx`/ChatFolders.","language":"typescript","range":[14,27,63,1],"content":"({ searchTerm }: Props) => {\n  const {\n    state: { folders, conversations },\n    handleUpdateConversation,\n  } = useContext(HomeContext);\n\n  const handleDrop = (e: any, folder: FolderInterface) => {\n    if (e.dataTransfer) {\n      const conversation = JSON.parse(e.dataTransfer.getData('conversation'));\n      handleUpdateConversation(conversation, {\n        key: 'folderId',\n        value: folder.id,\n      });\n    }\n  };\n\n  const ChatFolders = (currentFolder: FolderInterface) => {\n    return (\n      conversations &&\n      conversations\n        .filter((conversation) => conversation.folderId)\n        .map((conversation, index) => {\n          if (conversation.folderId === currentFolder.id) {\n            return (\n              <div key={index} className=\"ml-5 gap-2 border-l pl-2\">\n                <ConversationComponent conversation={conversation} />\n              </div>\n            );\n          }\n        })\n    );\n  };\n\n  return (\n    <div className=\"flex w-full flex-col pt-2\">\n      {folders\n        .filter((folder) => folder.type === 'chat')\n        .sort((a, b) => a.name.localeCompare(b.name))\n        .map((folder, index) => (\n          <Folder\n            key={index}\n            searchTerm={searchTerm}\n            currentFolder={folder}\n            handleDrop={handleDrop}\n            folderComponent={ChatFolders(folder)}\n          />\n        ))}\n    </div>\n  );\n}","file":"/components/Chatbar/components/ChatFolders.tsx","fileHash":"bdf6c41fbc8a1e9bada2d59b9fbf0cbad09ff8815dd3ddedb5274732ba43cc81","hash":"43b4bac1e31006482a8bd25f7d5a502d0d044f4d926e8d9c3255c23061836bd1","processedContent":"({ searchTerm }: Props) => {\n  const {\n    state: { folders, conversations },\n    handleUpdateConversation,\n  } = useContext(HomeContext);\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().: undefined\n  \"\"\"\n\n  const handleDrop = (e: any, folder: FolderInterface) => {\n    if (e.dataTransfer) {\n      const conversation = JSON.parse(e.dataTransfer.getData('conversation'));\n      handleUpdateConversation(conversation, {\n        key: 'folderId',\n        value: folder.id,\n      });\n    }\n  };\n\n  const ChatFolders = (currentFolder: FolderInterface) => {\n    return (\n      conversations &&\n      conversations\n        .filter((conversation) => conversation.folderId)\n        .map((conversation, index) => {\n          if (conversation.folderId === currentFolder.id) {\n            return (\n              <div key={index} className=\"ml-5 gap-2 border-l pl-2\">\n              \"\"\"\n              scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n              scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/Attributes#key.: undefined\n              scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n              \"\"\"\n                <ConversationComponent conversation={conversation} />\n                \"\"\"\n                scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.: This code is a React component that renders a list of conversations in a chat application. It allows users to rename or delete conversations by clicking on the conversation name or using keyboard shortcuts. The component also includes a modal for renaming and deleting conversations.\n                scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/Props#conversation.: undefined\n                \"\"\"\n              </div> #undefined\n            );\n          }\n        })\n    );\n  };\n\n  return (\n    <div className=\"flex w-full flex-col pt-2\">\n    \"\"\"\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n    \"\"\"\n      {folders\n        .filter((folder) => folder.type === 'chat')\n        .sort((a, b) => a.name.localeCompare(b.name))\n        .map((folder, index) => (\n          <Folder\n            key={index}\n            searchTerm={searchTerm}\n            currentFolder={folder}\n            handleDrop={handleDrop}\n            folderComponent={ChatFolders(folder)}\n          />\n        ))}\n    </div>\n  );\n}","documentation":"This code is a React component that renders a list of chat folders in a chat application. It allows users to rename or delete conversations by clicking on the conversation name or using keyboard shortcuts. The component also includes a modal for renaming and deleting conversations."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatFolders.tsx`/","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatFolders.tsx`/","language":"typescript","range":[0,0,64,0],"content":"import { useContext } from 'react';\n\nimport { FolderInterface } from '@/types/folder';\n\nimport HomeContext from '@/pages/api/home/home.context';\n\nimport Folder from '@/components/Folder';\n\nimport { ConversationComponent } from './Conversation';\n\ninterface Props {\n  searchTerm: string;\n}\n\nexport const ChatFolders = ({ searchTerm }: Props) => {\n  const {\n    state: { folders, conversations },\n    handleUpdateConversation,\n  } = useContext(HomeContext);\n\n  const handleDrop = (e: any, folder: FolderInterface) => {\n    if (e.dataTransfer) {\n      const conversation = JSON.parse(e.dataTransfer.getData('conversation'));\n      handleUpdateConversation(conversation, {\n        key: 'folderId',\n        value: folder.id,\n      });\n    }\n  };\n\n  const ChatFolders = (currentFolder: FolderInterface) => {\n    return (\n      conversations &&\n      conversations\n        .filter((conversation) => conversation.folderId)\n        .map((conversation, index) => {\n          if (conversation.folderId === currentFolder.id) {\n            return (\n              <div key={index} className=\"ml-5 gap-2 border-l pl-2\">\n                <ConversationComponent conversation={conversation} />\n              </div>\n            );\n          }\n        })\n    );\n  };\n\n  return (\n    <div className=\"flex w-full flex-col pt-2\">\n      {folders\n        .filter((folder) => folder.type === 'chat')\n        .sort((a, b) => a.name.localeCompare(b.name))\n        .map((folder, index) => (\n          <Folder\n            key={index}\n            searchTerm={searchTerm}\n            currentFolder={folder}\n            handleDrop={handleDrop}\n            folderComponent={ChatFolders(folder)}\n          />\n        ))}\n    </div>\n  );\n};\n","file":"/components/Chatbar/components/ChatFolders.tsx","fileHash":"bdf6c41fbc8a1e9bada2d59b9fbf0cbad09ff8815dd3ddedb5274732ba43cc81","hash":"bdf6c41fbc8a1e9bada2d59b9fbf0cbad09ff8815dd3ddedb5274732ba43cc81","processedContent":"import { useContext } from 'react';\n\"\"\"\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/: undefined\n\"\"\"\n\nimport { FolderInterface } from '@/types/folder';\n\nimport HomeContext from '@/pages/api/home/home.context';\n\nimport Folder from '@/components/Folder';\n\nimport { ConversationComponent } from './Conversation';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.: This code is a React component that renders a list of conversations in a chat application. It allows users to rename or delete conversations by clicking on the conversation name or using keyboard shortcuts. The component also includes a modal for renaming and deleting conversations.\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/: This code defines a React component that renders a list of conversations in a chat application. It allows users to rename or delete conversations by clicking on the conversation name or using keyboard shortcuts.\n\"\"\"\n\ninterface Props {\n  \"\"\"This code defines a type called \"Props\" that has one property called \"searchTerm\" which is a string.\"\"\"\n  pass\n\nexport const ChatFolders = ({ searchTerm }: Props) => {\n  \"\"\"This code is a React component that renders a list of chat folders in a chat application. It allows users to rename or delete conversations by clicking on the conversation name or using keyboard shortcuts. The component also includes a modal for renaming and deleting conversations.\"\"\"\n  pass\n","documentation":"This code is a React component that renders a list of chat folders in a chat application, allowing users to rename or delete conversations. It uses the `useContext` hook from React to access the `HomeContext` and the `FolderInterface` type to define the props for the component."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/ChatbarSettings.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/ChatbarSettings.","language":"typescript","range":[16,31,72,1],"content":"() => {\n  const { t } = useTranslation('sidebar');\n  const [isSettingDialogOpen, setIsSettingDialog] = useState<boolean>(false);\n\n  const {\n    state: {\n      apiKey,\n      lightMode,\n      serverSideApiKeyIsSet,\n      serverSidePluginKeysSet,\n      conversations,\n    },\n    dispatch: homeDispatch,\n  } = useContext(HomeContext);\n\n  const {\n    handleClearConversations,\n    handleImportConversations,\n    handleExportData,\n    handleApiKeyChange,\n  } = useContext(ChatbarContext);\n\n  return (\n    <div className=\"flex flex-col items-center space-y-1 border-t border-white/20 pt-1 text-sm\">\n      {conversations.length > 0 ? (\n        <ClearConversations onClearConversations={handleClearConversations} />\n      ) : null}\n\n      <Import onImport={handleImportConversations} />\n\n      <SidebarButton\n        text={t('Export data')}\n        icon={<IconFileExport size={18} />}\n        onClick={() => handleExportData()}\n      />\n\n      <SidebarButton\n        text={t('Settings')}\n        icon={<IconSettings size={18} />}\n        onClick={() => setIsSettingDialog(true)}\n      />\n\n      {!serverSideApiKeyIsSet ? (\n        <Key apiKey={apiKey} onApiKeyChange={handleApiKeyChange} />\n      ) : null}\n\n      {!serverSidePluginKeysSet ? <PluginKeys /> : null}\n\n      <SettingDialog\n        open={isSettingDialogOpen}\n        onClose={() => {\n          setIsSettingDialog(false);\n        }}\n      />\n    </div>\n  );\n}","file":"/components/Chatbar/components/ChatbarSettings.tsx","fileHash":"423af6c8631828b07af79606aa663dcc7fd44b99611c4c179a6f391b92e34f3d","hash":"6e6f83969a643185e571e77a571c6296c3f7711e51c8bb0af0895e3f9c03613e","processedContent":"() => {\n  const { t } = useTranslation('sidebar');\n  const [isSettingDialogOpen, setIsSettingDialog] = useState<boolean>(false); #undefined\n\n  const {\n    state: {\n      apiKey,\n      lightMode,\n      serverSideApiKeyIsSet,\n      serverSidePluginKeysSet,\n      conversations,\n    },\n    dispatch: homeDispatch,\n  } = useContext(HomeContext);\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().: undefined\n  \"\"\"\n\n  const {\n    handleClearConversations, #undefined\n    handleImportConversations, #undefined\n    handleExportData, #undefined\n    handleApiKeyChange, #undefined\n  } = useContext(ChatbarContext);\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().: undefined\n  scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/ChatbarContext.: undefined\n  \"\"\"\n\n  return (\n    <div className=\"flex flex-col items-center space-y-1 border-t border-white/20 pt-1 text-sm\">\n    \"\"\"\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n    \"\"\"\n      {conversations.length > 0 ? (\n        <ClearConversations onClearConversations={handleClearConversations} />\n        \"\"\"\n        scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ClearConversations.tsx`/ClearConversations.: This code defines a React component that displays a button with an icon and text. When the button is clicked, it sets a state variable to true, which causes the button to display a confirmation message. If the user confirms the action, the `onClearConversations` function is called, and the state variable is set back to false.\n        scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ClearConversations.tsx`/Props#onClearConversations.: undefined\n        \"\"\"\n      ) : null}\n\n      <Import onImport={handleImportConversations} />\n      \"\"\"\n      scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Import.tsx`/Import.: This code defines a function that returns a React component that renders a button with an icon and text. The button has a hover effect and an onClick event handler that imports data from a JSON file when clicked.\n      scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Import.tsx`/Props#onImport.: undefined\n      \"\"\"\n\n      <SidebarButton #This code defines a function that takes three arguments: `text`, `icon`, and `onClick`. It returns a React component that renders a button with an icon and text. The button has a hover effect and an onClick event handler.\n        text={t('Export data')} #undefined\n        icon={<IconFileExport size={18} />} #undefined\n        onClick={() => handleExportData()} #undefined\n      />\n\n      <SidebarButton #This code defines a function that takes three arguments: `text`, `icon`, and `onClick`. It returns a React component that renders a button with an icon and text. The button has a hover effect and an onClick event handler.\n        text={t('Settings')} #undefined\n        icon={<IconSettings size={18} />} #undefined\n        onClick={() => setIsSettingDialog(true)} #undefined\n      />\n\n      {!serverSideApiKeyIsSet ? (\n        <Key apiKey={apiKey} onApiKeyChange={handleApiKeyChange} />\n        \"\"\"\n        scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Key.: This code defines a function that renders a button with an icon and text. When clicked, it opens a form to input a new API key. The form has a cancel and save button, and the save button is only enabled when the user presses enter or clicks the save button.\n        scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Props#apiKey.: undefined\n        scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Props#onApiKeyChange.: undefined\n        \"\"\"\n      ) : null}\n\n      {!serverSidePluginKeysSet ? <PluginKeys /> : null} #This code is a React component that displays a modal window with input fields for entering Google API keys and IDs. The component uses the `useContext` hook to access the plugin keys from the HomeContext, and it also uses the `useState` hook to manage the state of the modal window. When the user clicks the \"Save\" button, the component calls the `handlePluginKeyChange` function to update the plugin keys in the HomeContext.\n\n      <SettingDialog\n        open={isSettingDialogOpen}\n        onClose={() => {\n          setIsSettingDialog(false);\n        }}\n      />\n    </div> #undefined\n  );\n}","documentation":"This code defines a React component that displays a sidebar with several buttons and a modal window. The buttons allow users to clear conversations, import data, export data, and access settings. The component also manages the state of the modal window and updates the plugin keys in the HomeContext when the user clicks the \"Save\" button."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/","language":"typescript","range":[0,0,73,0],"content":"import { IconFileExport, IconSettings } from '@tabler/icons-react';\nimport { useContext, useState } from 'react';\n\nimport { useTranslation } from 'next-i18next';\n\nimport HomeContext from '@/pages/api/home/home.context';\n\nimport { SettingDialog } from '@/components/Settings/SettingDialog';\n\nimport { Import } from '../../Settings/Import';\nimport { Key } from '../../Settings/Key';\nimport { SidebarButton } from '../../Sidebar/SidebarButton';\nimport ChatbarContext from '../Chatbar.context';\nimport { ClearConversations } from './ClearConversations';\nimport { PluginKeys } from './PluginKeys';\n\nexport const ChatbarSettings = () => {\n  const { t } = useTranslation('sidebar');\n  const [isSettingDialogOpen, setIsSettingDialog] = useState<boolean>(false);\n\n  const {\n    state: {\n      apiKey,\n      lightMode,\n      serverSideApiKeyIsSet,\n      serverSidePluginKeysSet,\n      conversations,\n    },\n    dispatch: homeDispatch,\n  } = useContext(HomeContext);\n\n  const {\n    handleClearConversations,\n    handleImportConversations,\n    handleExportData,\n    handleApiKeyChange,\n  } = useContext(ChatbarContext);\n\n  return (\n    <div className=\"flex flex-col items-center space-y-1 border-t border-white/20 pt-1 text-sm\">\n      {conversations.length > 0 ? (\n        <ClearConversations onClearConversations={handleClearConversations} />\n      ) : null}\n\n      <Import onImport={handleImportConversations} />\n\n      <SidebarButton\n        text={t('Export data')}\n        icon={<IconFileExport size={18} />}\n        onClick={() => handleExportData()}\n      />\n\n      <SidebarButton\n        text={t('Settings')}\n        icon={<IconSettings size={18} />}\n        onClick={() => setIsSettingDialog(true)}\n      />\n\n      {!serverSideApiKeyIsSet ? (\n        <Key apiKey={apiKey} onApiKeyChange={handleApiKeyChange} />\n      ) : null}\n\n      {!serverSidePluginKeysSet ? <PluginKeys /> : null}\n\n      <SettingDialog\n        open={isSettingDialogOpen}\n        onClose={() => {\n          setIsSettingDialog(false);\n        }}\n      />\n    </div>\n  );\n};\n","file":"/components/Chatbar/components/ChatbarSettings.tsx","fileHash":"423af6c8631828b07af79606aa663dcc7fd44b99611c4c179a6f391b92e34f3d","hash":"423af6c8631828b07af79606aa663dcc7fd44b99611c4c179a6f391b92e34f3d","processedContent":"import { IconFileExport, IconSettings } from '@tabler/icons-react';\nimport { useContext, useState } from 'react';\n\"\"\"\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/: undefined\n\"\"\"\n\nimport { useTranslation } from 'next-i18next';\n\nimport HomeContext from '@/pages/api/home/home.context';\n\nimport { SettingDialog } from '@/components/Settings/SettingDialog';\n\nimport { Import } from '../../Settings/Import';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Import.tsx`/Import.: This code defines a function that returns a React component that renders a button with an icon and text. The button has a hover effect and an onClick event handler that imports data from a JSON file when clicked.\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Import.tsx`/: This code defines a React component called `Import` that renders a button with an icon and text. When clicked, the button imports data from a JSON file using a callback function passed as a prop.\n\"\"\"\nimport { Key } from '../../Settings/Key';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Key.: This code defines a function that renders a button with an icon and text. When clicked, it opens a form to input a new API key. The form has a cancel and save button, and the save button is only enabled when the user presses enter or clicks the save button.\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/: The code defines a React component called `Key` that renders a button with an icon and text. When clicked, it opens a form to input a new API key, with a cancel and save button. The save button is only enabled when the user presses enter or clicks the save button.\n\"\"\"\nimport { SidebarButton } from '../../Sidebar/SidebarButton';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/SidebarButton.: This code defines a function that takes three arguments: `text`, `icon`, and `onClick`. It returns a React component that renders a button with an icon and text. The button has a hover effect and an onClick event handler.\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/: This code defines a React component called `SidebarButton` that renders a button with an icon and text. The button has a hover effect and an onClick event handler.\n\"\"\"\nimport ChatbarContext from '../Chatbar.context';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/ChatbarContext.: undefined\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/: This code defines a context for a chatbar component, which includes an initial state interface and a default export. The initial state interface defines properties such as searchTerm and filteredConversations, and methods for handling actions like deleting conversations or importing data.\n\"\"\"\nimport { ClearConversations } from './ClearConversations';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ClearConversations.tsx`/ClearConversations.: This code defines a React component that displays a button with an icon and text. When the button is clicked, it sets a state variable to true, which causes the button to display a confirmation message. If the user confirms the action, the `onClearConversations` function is called, and the state variable is set back to false.\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ClearConversations.tsx`/: This code defines a React component that displays a button with an icon and text. When the button is clicked, it sets a state variable to true, which causes the button to display a confirmation message. If the user confirms the action, the `onClearConversations` function is called, and the state variable is set back to false.\n\"\"\"\nimport { PluginKeys } from './PluginKeys';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.: This code is a React component that displays a modal window with input fields for entering Google API keys and IDs. The component uses the `useContext` hook to access the plugin keys from the HomeContext, and it also uses the `useState` hook to manage the state of the modal window. When the user clicks the \"Save\" button, the component calls the `handlePluginKeyChange` function to update the plugin keys in the HomeContext.\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/: This code defines a React component that displays a modal window for entering Google API keys and IDs, and it updates the plugin keys in the HomeContext when the user clicks \"Save\".\n\"\"\"\n\nexport const ChatbarSettings = () => {\n  \"\"\"This code defines a React component that displays a sidebar with several buttons and a modal window. The buttons allow users to clear conversations, import data, export data, and access settings. The component also manages the state of the modal window and updates the plugin keys in the HomeContext when the user clicks the \"Save\" button.\"\"\"\n  pass\n","documentation":"The code defines a React component called ChatbarSettings that displays a sidebar with several buttons and a modal window. The buttons allow users to clear conversations, import data, export data, and access settings. The component also manages the state of the modal window and updates the plugin keys in the HomeContext when the user clicks the \"Save\" button."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversations.tsx`/Conversations.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversations.tsx`/Conversations.","language":"typescript","range":[8,29,20,1],"content":"({ conversations }: Props) => {\n  return (\n    <div className=\"flex w-full flex-col gap-1\">\n      {conversations\n        .filter((conversation) => !conversation.folderId)\n        .slice()\n        .reverse()\n        .map((conversation, index) => (\n          <ConversationComponent key={index} conversation={conversation} />\n        ))}\n    </div>\n  );\n}","file":"/components/Chatbar/components/Conversations.tsx","fileHash":"9c39eb0d3dfeb15f6ae87e5cafa54606c3dfbf20a46c722e8ce3828ab5332bec","hash":"b86bb122aa8f5b96187f63d891e4f12034996cf59c82ffc85d2e8eb272a55a22","processedContent":"({ conversations }: Props) => {\n  return (\n    <div className=\"flex w-full flex-col gap-1\">\n    \"\"\"\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n    \"\"\"\n      {conversations\n        .filter((conversation) => !conversation.folderId)\n        .slice()\n        .reverse()\n        .map((conversation, index) => (\n          <ConversationComponent key={index} conversation={conversation} />\n          \"\"\"\n          scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.: This code is a React component that renders a list of conversations in a chat application. It allows users to rename or delete conversations by clicking on the conversation name or using keyboard shortcuts. The component also includes a modal for renaming and deleting conversations.\n          scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/Props#conversation.: undefined\n          \"\"\"\n        ))}\n    </div> #undefined\n  );\n}","documentation":"This code is a React component that renders a list of conversations in a chat application, allowing users to rename or delete them."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversations.tsx`/","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversations.tsx`/","language":"typescript","range":[0,0,21,0],"content":"import { Conversation } from '@/types/chat';\n\nimport { ConversationComponent } from './Conversation';\n\ninterface Props {\n  conversations: Conversation[];\n}\n\nexport const Conversations = ({ conversations }: Props) => {\n  return (\n    <div className=\"flex w-full flex-col gap-1\">\n      {conversations\n        .filter((conversation) => !conversation.folderId)\n        .slice()\n        .reverse()\n        .map((conversation, index) => (\n          <ConversationComponent key={index} conversation={conversation} />\n        ))}\n    </div>\n  );\n};\n","file":"/components/Chatbar/components/Conversations.tsx","fileHash":"9c39eb0d3dfeb15f6ae87e5cafa54606c3dfbf20a46c722e8ce3828ab5332bec","hash":"9c39eb0d3dfeb15f6ae87e5cafa54606c3dfbf20a46c722e8ce3828ab5332bec","processedContent":"import { Conversation } from '@/types/chat';\n\nimport { ConversationComponent } from './Conversation';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.: This code is a React component that renders a list of conversations in a chat application. It allows users to rename or delete conversations by clicking on the conversation name or using keyboard shortcuts. The component also includes a modal for renaming and deleting conversations.\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/: This code defines a React component that renders a list of conversations in a chat application. It allows users to rename or delete conversations by clicking on the conversation name or using keyboard shortcuts.\n\"\"\"\n\ninterface Props {\n  \"\"\"This code defines a type called \"Props\" that contains an array of \"Conversation\" objects.\"\"\"\n  pass\n\nexport const Conversations = ({ conversations }: Props) => {\n  \"\"\"This code is a React component that renders a list of conversations in a chat application, allowing users to rename or delete them.\"\"\"\n  pass\n","documentation":"This code defines a React component that renders a list of conversations in a chat application, allowing users to rename or delete them."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/ChatbarContext.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/ChatbarContext.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/","language":"typescript","range":[0,0,25,0],"content":"import { Dispatch, createContext } from 'react';\n\nimport { ActionType } from '@/hooks/useCreateReducer';\n\nimport { Conversation } from '@/types/chat';\nimport { SupportedExportFormats } from '@/types/export';\nimport { PluginKey } from '@/types/plugin';\n\nimport { ChatbarInitialState } from './Chatbar.state';\n\nexport interface ChatbarContextProps {\n  state: ChatbarInitialState;\n  dispatch: Dispatch<ActionType<ChatbarInitialState>>;\n  handleDeleteConversation: (conversation: Conversation) => void;\n  handleClearConversations: () => void;\n  handleExportData: () => void;\n  handleImportConversations: (data: SupportedExportFormats) => void;\n  handlePluginKeyChange: (pluginKey: PluginKey) => void;\n  handleClearPluginKey: (pluginKey: PluginKey) => void;\n  handleApiKeyChange: (apiKey: string) => void;\n}\n\nconst ChatbarContext = createContext<ChatbarContextProps>(undefined!);\n\nexport default ChatbarContext;\n","file":"/components/Chatbar/Chatbar.context.tsx","fileHash":"c6f7947df64168bac0cb6eee79e594ac6ea482f2ea709970562186fc373033b4","hash":"c6f7947df64168bac0cb6eee79e594ac6ea482f2ea709970562186fc373033b4","processedContent":"import { Dispatch, createContext } from 'react';\n\"\"\"\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/Dispatch#: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/createContext().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/: undefined\n\"\"\"\n\nimport { ActionType } from '@/hooks/useCreateReducer';\n\nimport { Conversation } from '@/types/chat';\nimport { SupportedExportFormats } from '@/types/export';\nimport { PluginKey } from '@/types/plugin';\n\nimport { ChatbarInitialState } from './Chatbar.state';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.state.tsx`/ChatbarInitialState#: This code defines an interface for the initial state of a chatbar component. It includes two properties: searchTerm, which is a string, and filteredConversations, which is an array of conversations.\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.state.tsx`/: This code defines an interface for the initial state of a chatbar component, which includes two properties: searchTerm (a string) and filteredConversations (an array of conversations).\n\"\"\"\n\nexport interface ChatbarContextProps {\n  \"\"\"This code defines an interface for the initial state of a chatbar component, which includes properties such as searchTerm, filteredConversations, and methods for handling various actions like deleting conversations or importing data.\"\"\"\n  pass\n\nconst ChatbarContext = createContext<ChatbarContextProps>(undefined!);\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/ChatbarContextProps#: This code defines an interface for the initial state of a chatbar component, which includes properties such as searchTerm, filteredConversations, and methods for handling various actions like deleting conversations or importing data.\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/createContext().: undefined\n\"\"\"\n\nexport default ChatbarContext; #undefined\n","documentation":"This code defines a context for a chatbar component, which includes an initial state interface and a default export. The initial state interface defines properties such as searchTerm and filteredConversations, and methods for handling actions like deleting conversations or importing data."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.state.tsx`/ChatbarInitialState#","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.state.tsx`/ChatbarInitialState#","language":"typescript","range":[2,0,5,1],"content":"export interface ChatbarInitialState {\n  searchTerm: string;\n  filteredConversations: Conversation[];\n}","file":"/components/Chatbar/Chatbar.state.tsx","fileHash":"15747a253faa9e124c1db2583a8035f6cefdf7a8db76674f84575bf7a3b16656","hash":"75ec1c7be4c226b82d86d6a904c9cc8575435736a3247b2c0a27f87c74bec6a7","processedContent":"export interface ChatbarInitialState {\n  searchTerm: string;\n  filteredConversations: Conversation[];\n}","documentation":"This code defines an interface for the initial state of a chatbar component. It includes two properties: searchTerm, which is a string, and filteredConversations, which is an array of conversations."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.state.tsx`/initialState.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.state.tsx`/initialState.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.state.tsx`/","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.state.tsx`/","language":"typescript","range":[0,0,11,0],"content":"import { Conversation } from '@/types/chat';\n\nexport interface ChatbarInitialState {\n  searchTerm: string;\n  filteredConversations: Conversation[];\n}\n\nexport const initialState: ChatbarInitialState = {\n  searchTerm: '',\n  filteredConversations: [],\n};\n","file":"/components/Chatbar/Chatbar.state.tsx","fileHash":"15747a253faa9e124c1db2583a8035f6cefdf7a8db76674f84575bf7a3b16656","hash":"15747a253faa9e124c1db2583a8035f6cefdf7a8db76674f84575bf7a3b16656","processedContent":"import { Conversation } from '@/types/chat';\n\nexport interface ChatbarInitialState {\n  \"\"\"This code defines an interface for the initial state of a chatbar component. It includes two properties: searchTerm, which is a string, and filteredConversations, which is an array of conversations.\"\"\"\n  pass\n\nexport const initialState: ChatbarInitialState = { #This code defines an interface for the initial state of a chatbar component. It includes two properties: searchTerm, which is a string, and filteredConversations, which is an array of conversations.\n  searchTerm: '',\n  filteredConversations: [],\n};\n","documentation":"This code defines an interface for the initial state of a chatbar component, which includes two properties: searchTerm (a string) and filteredConversations (an array of conversations)."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversations.tsx`/Props#conversations.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversations.tsx`/Props#conversations.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatFolders.tsx`/Props#searchTerm.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatFolders.tsx`/Props#searchTerm.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/ChatbarContextProps#","attributes":{"range":[10,0,20,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/ChatbarContextProps#","content":"export interface ChatbarContextProps {\n  state: ChatbarInitialState;\n  dispatch: Dispatch<ActionType<ChatbarInitialState>>;\n  handleDeleteConversation: (conversation: Conversation) => void;\n  handleClearConversations: () => void;\n  handleExportData: () => void;\n  handleImportConversations: (data: SupportedExportFormats) => void;\n  handlePluginKeyChange: (pluginKey: PluginKey) => void;\n  handleClearPluginKey: (pluginKey: PluginKey) => void;\n  handleApiKeyChange: (apiKey: string) => void;\n}","file":"/components/Chatbar/Chatbar.context.tsx","language":"typescript","fileHash":"c6f7947df64168bac0cb6eee79e594ac6ea482f2ea709970562186fc373033b4","hash":"4b68ea691f05d5b815b762e637a951a04044cca5dd02dd45f7f432334924d76b","processedContent":"export interface ChatbarContextProps {\n  state: ChatbarInitialState; #This code defines an interface for the initial state of a chatbar component. It includes two properties: searchTerm, which is a string, and filteredConversations, which is an array of conversations.\n  dispatch: Dispatch<ActionType<ChatbarInitialState>>;\n  \"\"\"\n  scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.state.tsx`/ChatbarInitialState#: This code defines an interface for the initial state of a chatbar component. It includes two properties: searchTerm, which is a string, and filteredConversations, which is an array of conversations.\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/Dispatch#: undefined\n  \"\"\"\n  handleDeleteConversation: (conversation: Conversation) => void;\n  handleClearConversations: () => void;\n  handleExportData: () => void;\n  handleImportConversations: (data: SupportedExportFormats) => void;\n  handlePluginKeyChange: (pluginKey: PluginKey) => void;\n  handleClearPluginKey: (pluginKey: PluginKey) => void;\n  handleApiKeyChange: (apiKey: string) => void;\n}","documentation":"This code defines an interface for the initial state of a chatbar component, which includes properties such as searchTerm, filteredConversations, and methods for handling various actions like deleting conversations or importing data."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/","attributes":{"range":[0,0,124,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/","content":"import { FC, KeyboardEvent, useEffect, useRef, useState } from 'react';\n\nimport { Prompt } from '@/types/prompt';\n\ninterface Props {\n  prompt: Prompt;\n  variables: string[];\n  onSubmit: (updatedVariables: string[]) => void;\n  onClose: () => void;\n}\n\nexport const VariableModal: FC<Props> = ({\n  prompt,\n  variables,\n  onSubmit,\n  onClose,\n}) => {\n  const [updatedVariables, setUpdatedVariables] = useState<\n    { key: string; value: string }[]\n  >(\n    variables\n      .map((variable) => ({ key: variable, value: '' }))\n      .filter(\n        (item, index, array) =>\n          array.findIndex((t) => t.key === item.key) === index,\n      ),\n  );\n\n  const modalRef = useRef<HTMLDivElement>(null);\n  const nameInputRef = useRef<HTMLTextAreaElement>(null);\n\n  const handleChange = (index: number, value: string) => {\n    setUpdatedVariables((prev) => {\n      const updated = [...prev];\n      updated[index].value = value;\n      return updated;\n    });\n  };\n\n  const handleSubmit = () => {\n    if (updatedVariables.some((variable) => variable.value === '')) {\n      alert('Please fill out all variables');\n      return;\n    }\n\n    onSubmit(updatedVariables.map((variable) => variable.value));\n    onClose();\n  };\n\n  const handleKeyDown = (e: KeyboardEvent<HTMLDivElement>) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSubmit();\n    } else if (e.key === 'Escape') {\n      onClose();\n    }\n  };\n\n  useEffect(() => {\n    const handleOutsideClick = (e: MouseEvent) => {\n      if (modalRef.current && !modalRef.current.contains(e.target as Node)) {\n        onClose();\n      }\n    };\n\n    window.addEventListener('click', handleOutsideClick);\n\n    return () => {\n      window.removeEventListener('click', handleOutsideClick);\n    };\n  }, [onClose]);\n\n  useEffect(() => {\n    if (nameInputRef.current) {\n      nameInputRef.current.focus();\n    }\n  }, []);\n\n  return (\n    <div\n      className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50\"\n      onKeyDown={handleKeyDown}\n    >\n      <div\n        ref={modalRef}\n        className=\"dark:border-netural-400 inline-block max-h-[400px] transform overflow-y-auto rounded-lg border border-gray-300 bg-white px-4 pt-5 pb-4 text-left align-bottom shadow-xl transition-all dark:bg-[#202123] sm:my-8 sm:max-h-[600px] sm:w-full sm:max-w-lg sm:p-6 sm:align-middle\"\n        role=\"dialog\"\n      >\n        <div className=\"mb-4 text-xl font-bold text-black dark:text-neutral-200\">\n          {prompt.name}\n        </div>\n\n        <div className=\"mb-4 text-sm italic text-black dark:text-neutral-200\">\n          {prompt.description}\n        </div>\n\n        {updatedVariables.map((variable, index) => (\n          <div className=\"mb-4\" key={index}>\n            <div className=\"mb-2 text-sm font-bold text-neutral-200\">\n              {variable.key}\n            </div>\n\n            <textarea\n              ref={index === 0 ? nameInputRef : undefined}\n              className=\"mt-1 w-full rounded-lg border border-neutral-500 px-4 py-2 text-neutral-900 shadow focus:outline-none dark:border-neutral-800 dark:border-opacity-50 dark:bg-[#40414F] dark:text-neutral-100\"\n              style={{ resize: 'none' }}\n              placeholder={`Enter a value for ${variable.key}...`}\n              value={variable.value}\n              onChange={(e) => handleChange(index, e.target.value)}\n              rows={3}\n            />\n          </div>\n        ))}\n\n        <button\n          className=\"mt-6 w-full rounded-lg border border-neutral-500 px-4 py-2 text-neutral-900 shadow hover:bg-neutral-100 focus:outline-none dark:border-neutral-800 dark:border-opacity-50 dark:bg-white dark:text-black dark:hover:bg-neutral-300\"\n          onClick={handleSubmit}\n        >\n          Submit\n        </button>\n      </div>\n    </div>\n  );\n};\n","file":"/components/Chat/VariableModal.tsx","language":"typescript","fileHash":"a047cb2b0ffa9b3fbeac3e8260da257ebdaae2f7016b9dd28b34668bdb110ff0","hash":"a047cb2b0ffa9b3fbeac3e8260da257ebdaae2f7016b9dd28b34668bdb110ff0","processedContent":"import { FC, KeyboardEvent, useEffect, useRef, useState } from 'react';\n\"\"\"\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/: undefined\n\"\"\"\n\nimport { Prompt } from '@/types/prompt';\n\ninterface Props {\n  \"\"\"This code defines a component's properties, including a prompt, variables, and callback functions for handling user input and closing the component.\"\"\"\n  pass\n\nexport const VariableModal: FC<Props> = ({\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/Props#: This code defines a component's properties, including a prompt, variables, and callback functions for handling user input and closing the component.\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#: undefined\n\"\"\"\n  \"\"\"This code defines a React component that renders a modal dialog with a form for the user to input values for a set of variables. The form includes a text area for each variable, and the user can submit the form by clicking a button. The component also includes an event listener for the escape key, which closes the modal when pressed.\"\"\"\n  pass\n","documentation":"This code defines a React component that renders a modal dialog with a form for inputting values for variables. The component includes an event listener for the escape key, which closes the modal when pressed."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/Props#","attributes":{"range":[4,0,9,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/Props#","content":"interface Props {\n  prompt: Prompt;\n  variables: string[];\n  onSubmit: (updatedVariables: string[]) => void;\n  onClose: () => void;\n}","file":"/components/Chat/VariableModal.tsx","language":"typescript","fileHash":"a047cb2b0ffa9b3fbeac3e8260da257ebdaae2f7016b9dd28b34668bdb110ff0","hash":"cb281bcb4d2e4b5e42e7db5d577c888a3034ec49f2454e689ef60cbc2c6f109f","processedContent":"interface Props {\n  prompt: Prompt;\n  variables: string[];\n  onSubmit: (updatedVariables: string[]) => void;\n  onClose: () => void;\n}","documentation":"This code defines a component's properties, including a prompt, variables, and callback functions for handling user input and closing the component."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","attributes":{"range":[11,40,123,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","content":"({\n  prompt,\n  variables,\n  onSubmit,\n  onClose,\n}) => {\n  const [updatedVariables, setUpdatedVariables] = useState<\n    { key: string; value: string }[]\n  >(\n    variables\n      .map((variable) => ({ key: variable, value: '' }))\n      .filter(\n        (item, index, array) =>\n          array.findIndex((t) => t.key === item.key) === index,\n      ),\n  );\n\n  const modalRef = useRef<HTMLDivElement>(null);\n  const nameInputRef = useRef<HTMLTextAreaElement>(null);\n\n  const handleChange = (index: number, value: string) => {\n    setUpdatedVariables((prev) => {\n      const updated = [...prev];\n      updated[index].value = value;\n      return updated;\n    });\n  };\n\n  const handleSubmit = () => {\n    if (updatedVariables.some((variable) => variable.value === '')) {\n      alert('Please fill out all variables');\n      return;\n    }\n\n    onSubmit(updatedVariables.map((variable) => variable.value));\n    onClose();\n  };\n\n  const handleKeyDown = (e: KeyboardEvent<HTMLDivElement>) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSubmit();\n    } else if (e.key === 'Escape') {\n      onClose();\n    }\n  };\n\n  useEffect(() => {\n    const handleOutsideClick = (e: MouseEvent) => {\n      if (modalRef.current && !modalRef.current.contains(e.target as Node)) {\n        onClose();\n      }\n    };\n\n    window.addEventListener('click', handleOutsideClick);\n\n    return () => {\n      window.removeEventListener('click', handleOutsideClick);\n    };\n  }, [onClose]);\n\n  useEffect(() => {\n    if (nameInputRef.current) {\n      nameInputRef.current.focus();\n    }\n  }, []);\n\n  return (\n    <div\n      className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50\"\n      onKeyDown={handleKeyDown}\n    >\n      <div\n        ref={modalRef}\n        className=\"dark:border-netural-400 inline-block max-h-[400px] transform overflow-y-auto rounded-lg border border-gray-300 bg-white px-4 pt-5 pb-4 text-left align-bottom shadow-xl transition-all dark:bg-[#202123] sm:my-8 sm:max-h-[600px] sm:w-full sm:max-w-lg sm:p-6 sm:align-middle\"\n        role=\"dialog\"\n      >\n        <div className=\"mb-4 text-xl font-bold text-black dark:text-neutral-200\">\n          {prompt.name}\n        </div>\n\n        <div className=\"mb-4 text-sm italic text-black dark:text-neutral-200\">\n          {prompt.description}\n        </div>\n\n        {updatedVariables.map((variable, index) => (\n          <div className=\"mb-4\" key={index}>\n            <div className=\"mb-2 text-sm font-bold text-neutral-200\">\n              {variable.key}\n            </div>\n\n            <textarea\n              ref={index === 0 ? nameInputRef : undefined}\n              className=\"mt-1 w-full rounded-lg border border-neutral-500 px-4 py-2 text-neutral-900 shadow focus:outline-none dark:border-neutral-800 dark:border-opacity-50 dark:bg-[#40414F] dark:text-neutral-100\"\n              style={{ resize: 'none' }}\n              placeholder={`Enter a value for ${variable.key}...`}\n              value={variable.value}\n              onChange={(e) => handleChange(index, e.target.value)}\n              rows={3}\n            />\n          </div>\n        ))}\n\n        <button\n          className=\"mt-6 w-full rounded-lg border border-neutral-500 px-4 py-2 text-neutral-900 shadow hover:bg-neutral-100 focus:outline-none dark:border-neutral-800 dark:border-opacity-50 dark:bg-white dark:text-black dark:hover:bg-neutral-300\"\n          onClick={handleSubmit}\n        >\n          Submit\n        </button>\n      </div>\n    </div>\n  );\n}","file":"/components/Chat/VariableModal.tsx","language":"typescript","fileHash":"a047cb2b0ffa9b3fbeac3e8260da257ebdaae2f7016b9dd28b34668bdb110ff0","hash":"0085dd5a7f1cf1cee33020fba9023b7eef28431f30b636e67d44feccc7d53209","processedContent":"({\n  prompt, #undefined\n  variables, #undefined\n  onSubmit, #undefined\n  onClose, #undefined\n}) => {\n  const [updatedVariables, setUpdatedVariables] = useState< #undefined\n    { key: string; value: string }[]\n  >(\n    variables\n      .map((variable) => ({ key: variable, value: '' }))\n      .filter(\n        (item, index, array) =>\n          array.findIndex((t) => t.key === item.key) === index,\n      ),\n  );\n\n  const modalRef = useRef<HTMLDivElement>(null);\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLDivElement#: undefined\n  \"\"\"\n  const nameInputRef = useRef<HTMLTextAreaElement>(null);\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLTextAreaElement#: undefined\n  \"\"\"\n\n  const handleChange = (index: number, value: string) => {\n    setUpdatedVariables((prev) => {\n      const updated = [...prev];\n      updated[index].value = value;\n      return updated;\n    });\n  };\n\n  const handleSubmit = () => {\n    if (updatedVariables.some((variable) => variable.value === '')) {\n      alert('Please fill out all variables');\n      return;\n    }\n\n    onSubmit(updatedVariables.map((variable) => variable.value));\n    onClose();\n  };\n\n  const handleKeyDown = (e: KeyboardEvent<HTMLDivElement>) => {\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLDivElement#: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#: undefined\n  \"\"\"\n    if (e.key === 'Enter' && !e.shiftKey) {\n    \"\"\"\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#key.: undefined\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#shiftKey.: undefined\n    \"\"\"\n      e.preventDefault(); #undefined\n      handleSubmit();\n    } else if (e.key === 'Escape') { #undefined\n      onClose();\n    }\n  };\n\n  useEffect(() => { #undefined\n    const handleOutsideClick = (e: MouseEvent) => { #undefined\n      if (modalRef.current && !modalRef.current.contains(e.target as Node)) {\n      \"\"\"\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.: undefined\n      \"\"\"\n        onClose();\n      }\n    };\n\n    window.addEventListener('click', handleOutsideClick);\n\n    return () => {\n      window.removeEventListener('click', handleOutsideClick);\n    };\n  }, [onClose]);\n\n  useEffect(() => { #undefined\n    if (nameInputRef.current) { #undefined\n      nameInputRef.current.focus(); #undefined\n    }\n  }, []);\n\n  return (\n    <div #undefined\n      className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50\" #undefined\n      onKeyDown={handleKeyDown} #undefined\n    >\n      <div #undefined\n        ref={modalRef} #undefined\n        className=\"dark:border-netural-400 inline-block max-h-[400px] transform overflow-y-auto rounded-lg border border-gray-300 bg-white px-4 pt-5 pb-4 text-left align-bottom shadow-xl transition-all dark:bg-[#202123] sm:my-8 sm:max-h-[600px] sm:w-full sm:max-w-lg sm:p-6 sm:align-middle\" #undefined\n        role=\"dialog\" #undefined\n      >\n        <div className=\"mb-4 text-xl font-bold text-black dark:text-neutral-200\">\n        \"\"\"\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n        \"\"\"\n          {prompt.name}\n        </div> #undefined\n\n        <div className=\"mb-4 text-sm italic text-black dark:text-neutral-200\">\n        \"\"\"\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n        \"\"\"\n          {prompt.description}\n        </div> #undefined\n\n        {updatedVariables.map((variable, index) => (\n          <div className=\"mb-4\" key={index}>\n          \"\"\"\n          scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n          scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n          scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/Attributes#key.: undefined\n          \"\"\"\n            <div className=\"mb-2 text-sm font-bold text-neutral-200\">\n            \"\"\"\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n            \"\"\"\n              {variable.key}\n            </div> #undefined\n\n            <textarea #undefined\n              ref={index === 0 ? nameInputRef : undefined} #undefined\n              className=\"mt-1 w-full rounded-lg border border-neutral-500 px-4 py-2 text-neutral-900 shadow focus:outline-none dark:border-neutral-800 dark:border-opacity-50 dark:bg-[#40414F] dark:text-neutral-100\" #undefined\n              style={{ resize: 'none' }} #undefined\n              placeholder={`Enter a value for ${variable.key}...`} #undefined\n              value={variable.value} #undefined\n              onChange={(e) => handleChange(index, e.target.value)}\n              \"\"\"\n              scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/TextareaHTMLAttributes#onChange.: undefined\n              scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ChangeEvent#target.: undefined\n              \"\"\"\n              rows={3} #undefined\n            />\n          </div> #undefined\n        ))}\n\n        <button #undefined\n          className=\"mt-6 w-full rounded-lg border border-neutral-500 px-4 py-2 text-neutral-900 shadow hover:bg-neutral-100 focus:outline-none dark:border-neutral-800 dark:border-opacity-50 dark:bg-white dark:text-black dark:hover:bg-neutral-300\" #undefined\n          onClick={handleSubmit} #undefined\n        >\n          Submit\n        </button> #undefined\n      </div>\n    </div>\n  );\n}","documentation":"This code defines a React component that renders a modal dialog with a form for the user to input values for a set of variables. The form includes a text area for each variable, and the user can submit the form by clicking a button. The component also includes an event listener for the escape key, which closes the modal when pressed."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/Props#prompt.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/Props#prompt.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/Props#variables.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/Props#variables.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/Props#onSubmit.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/Props#onSubmit.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/Props#onClose.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/Props#onClose.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLTextAreaElement#","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLTextAreaElement#","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#shiftKey.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#shiftKey.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/Attributes#key.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/Attributes#key.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#textarea.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#textarea.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#style.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#style.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/TextareaHTMLAttributes#placeholder.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/TextareaHTMLAttributes#placeholder.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/TextareaHTMLAttributes#value.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/TextareaHTMLAttributes#value.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/TextareaHTMLAttributes#onChange.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/TextareaHTMLAttributes#onChange.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/TextareaHTMLAttributes#rows.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/TextareaHTMLAttributes#rows.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/","attributes":{"range":[0,0,67,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/","content":"import { FC, useContext, useState } from 'react';\n\nimport { useTranslation } from 'next-i18next';\n\nimport { DEFAULT_TEMPERATURE } from '@/utils/app/const';\n\nimport HomeContext from '@/pages/api/home/home.context';\n\ninterface Props {\n  label: string;\n  onChangeTemperature: (temperature: number) => void;\n}\n\nexport const TemperatureSlider: FC<Props> = ({\n  label,\n  onChangeTemperature,\n}) => {\n  const {\n    state: { conversations },\n  } = useContext(HomeContext);\n  const lastConversation = conversations[conversations.length - 1];\n  const [temperature, setTemperature] = useState(\n    lastConversation?.temperature ?? DEFAULT_TEMPERATURE,\n  );\n  const { t } = useTranslation('chat');\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = parseFloat(event.target.value);\n    setTemperature(newValue);\n    onChangeTemperature(newValue);\n  };\n\n  return (\n    <div className=\"flex flex-col\">\n      <label className=\"mb-2 text-left text-neutral-700 dark:text-neutral-400\">\n        {label}\n      </label>\n      <span className=\"text-[12px] text-black/50 dark:text-white/50 text-sm\">\n        {t(\n          'Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.',\n        )}\n      </span>\n      <span className=\"mt-2 mb-1 text-center text-neutral-900 dark:text-neutral-100\">\n        {temperature.toFixed(1)}\n      </span>\n      <input\n        className=\"cursor-pointer\"\n        type=\"range\"\n        min={0}\n        max={1}\n        step={0.1}\n        value={temperature}\n        onChange={handleChange}\n      />\n      <ul className=\"w mt-2 pb-8 flex justify-between px-[24px] text-neutral-900 dark:text-neutral-100\">\n        <li className=\"flex justify-center\">\n          <span className=\"absolute\">{t('Precise')}</span>\n        </li>\n        <li className=\"flex justify-center\">\n          <span className=\"absolute\">{t('Neutral')}</span>\n        </li>\n        <li className=\"flex justify-center\">\n          <span className=\"absolute\">{t('Creative')}</span>\n        </li>\n      </ul>\n    </div>\n  );\n};\n","file":"/components/Chat/Temperature.tsx","language":"typescript","fileHash":"758bceea29f05cfadf6a45a16fd390c1f5a1a31325dd5bb030a2152c40a46b72","hash":"758bceea29f05cfadf6a45a16fd390c1f5a1a31325dd5bb030a2152c40a46b72","processedContent":"import { FC, useContext, useState } from 'react';\n\"\"\"\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/: undefined\n\"\"\"\n\nimport { useTranslation } from 'next-i18next';\n\nimport { DEFAULT_TEMPERATURE } from '@/utils/app/const';\n\nimport HomeContext from '@/pages/api/home/home.context';\n\ninterface Props {\n  \"\"\"This code defines a component's properties, including a label and an event handler for when the temperature changes.\"\"\"\n  pass\n\nexport const TemperatureSlider: FC<Props> = ({\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/Props#: This code defines a component's properties, including a label and an event handler for when the temperature changes.\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#: undefined\n\"\"\"\n  \"\"\"This code defines a React component that allows the user to adjust the temperature of a chatbot. The component uses the `useContext` hook to access the conversations and the `useState` hook to store the current temperature. The component also includes a range input field for the user to adjust the temperature, as well as a set of labels and tooltips to help the user understand the different temperature options.\"\"\"\n  pass\n","documentation":"This code defines a React component that allows the user to adjust the temperature of a chatbot. It uses the `useContext` hook to access conversations and the `useState` hook to store the current temperature, and includes a range input field, labels, and tooltips to help the user understand different temperature options."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/Props#","attributes":{"range":[8,0,11,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/Props#","content":"interface Props {\n  label: string;\n  onChangeTemperature: (temperature: number) => void;\n}","file":"/components/Chat/Temperature.tsx","language":"typescript","fileHash":"758bceea29f05cfadf6a45a16fd390c1f5a1a31325dd5bb030a2152c40a46b72","hash":"c3d23cd30d97516674f0aaa98b0ef89f19eae0fdb8a371eeac643334adc9a282","processedContent":"interface Props {\n  label: string;\n  onChangeTemperature: (temperature: number) => void;\n}","documentation":"This code defines a component's properties, including a label and an event handler for when the temperature changes."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","attributes":{"range":[13,44,66,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","content":"({\n  label,\n  onChangeTemperature,\n}) => {\n  const {\n    state: { conversations },\n  } = useContext(HomeContext);\n  const lastConversation = conversations[conversations.length - 1];\n  const [temperature, setTemperature] = useState(\n    lastConversation?.temperature ?? DEFAULT_TEMPERATURE,\n  );\n  const { t } = useTranslation('chat');\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = parseFloat(event.target.value);\n    setTemperature(newValue);\n    onChangeTemperature(newValue);\n  };\n\n  return (\n    <div className=\"flex flex-col\">\n      <label className=\"mb-2 text-left text-neutral-700 dark:text-neutral-400\">\n        {label}\n      </label>\n      <span className=\"text-[12px] text-black/50 dark:text-white/50 text-sm\">\n        {t(\n          'Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.',\n        )}\n      </span>\n      <span className=\"mt-2 mb-1 text-center text-neutral-900 dark:text-neutral-100\">\n        {temperature.toFixed(1)}\n      </span>\n      <input\n        className=\"cursor-pointer\"\n        type=\"range\"\n        min={0}\n        max={1}\n        step={0.1}\n        value={temperature}\n        onChange={handleChange}\n      />\n      <ul className=\"w mt-2 pb-8 flex justify-between px-[24px] text-neutral-900 dark:text-neutral-100\">\n        <li className=\"flex justify-center\">\n          <span className=\"absolute\">{t('Precise')}</span>\n        </li>\n        <li className=\"flex justify-center\">\n          <span className=\"absolute\">{t('Neutral')}</span>\n        </li>\n        <li className=\"flex justify-center\">\n          <span className=\"absolute\">{t('Creative')}</span>\n        </li>\n      </ul>\n    </div>\n  );\n}","file":"/components/Chat/Temperature.tsx","language":"typescript","fileHash":"758bceea29f05cfadf6a45a16fd390c1f5a1a31325dd5bb030a2152c40a46b72","hash":"7b9dee7ad02acd681bcd615057cff0da9d9e72a56352fce4d3e900193886db9b","processedContent":"({\n  label, #undefined\n  onChangeTemperature, #undefined\n}) => {\n  const {\n    state: { conversations },\n  } = useContext(HomeContext);\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().: undefined\n  \"\"\"\n  const lastConversation = conversations[conversations.length - 1];\n  const [temperature, setTemperature] = useState( #undefined\n    lastConversation?.temperature ?? DEFAULT_TEMPERATURE,\n  );\n  const { t } = useTranslation('chat');\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ChangeEvent#: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLInputElement#: undefined\n  \"\"\"\n    const newValue = parseFloat(event.target.value); #undefined\n    setTemperature(newValue);\n    onChangeTemperature(newValue);\n  };\n\n  return (\n    <div className=\"flex flex-col\">\n    \"\"\"\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n    \"\"\"\n      <label className=\"mb-2 text-left text-neutral-700 dark:text-neutral-400\">\n      \"\"\"\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#label.: undefined\n      \"\"\"\n        {label}\n      </label> #undefined\n      <span className=\"text-[12px] text-black/50 dark:text-white/50 text-sm\">\n      \"\"\"\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#span.: undefined\n      \"\"\"\n        {t(\n          'Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.',\n        )}\n      </span> #undefined\n      <span className=\"mt-2 mb-1 text-center text-neutral-900 dark:text-neutral-100\">\n      \"\"\"\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#span.: undefined\n      \"\"\"\n        {temperature.toFixed(1)}\n      </span> #undefined\n      <input #undefined\n        className=\"cursor-pointer\" #undefined\n        type=\"range\" #undefined\n        min={0} #undefined\n        max={1} #undefined\n        step={0.1} #undefined\n        value={temperature} #undefined\n        onChange={handleChange} #undefined\n      />\n      <ul className=\"w mt-2 pb-8 flex justify-between px-[24px] text-neutral-900 dark:text-neutral-100\">\n      \"\"\"\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#ul.: undefined\n      \"\"\"\n        <li className=\"flex justify-center\">\n        \"\"\"\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#li.: undefined\n        \"\"\"\n        \"\"\"\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#li.: undefined\n        \"\"\"\n        \"\"\"\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#li.: undefined\n        \"\"\"\n          <span className=\"absolute\">{t('Precise')}</span>\n          \"\"\"\n          scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n          scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#span.: undefined\n          scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#span.: undefined\n          \"\"\"\n        </li> #undefined\n        <li className=\"flex justify-center\">\n          <span className=\"absolute\">{t('Neutral')}</span>\n          \"\"\"\n          scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n          scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#span.: undefined\n          scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#span.: undefined\n          \"\"\"\n        </li> #undefined\n        <li className=\"flex justify-center\">\n          <span className=\"absolute\">{t('Creative')}</span>\n          \"\"\"\n          scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n          scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#span.: undefined\n          scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#span.: undefined\n          \"\"\"\n        </li> #undefined\n      </ul> #undefined\n    </div> #undefined\n  );\n}","documentation":"This code defines a React component that allows the user to adjust the temperature of a chatbot. The component uses the `useContext` hook to access the conversations and the `useState` hook to store the current temperature. The component also includes a range input field for the user to adjust the temperature, as well as a set of labels and tooltips to help the user understand the different temperature options."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/Props#label.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/Props#label.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/Props#onChangeTemperature.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/Props#onChangeTemperature.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#label.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#label.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#min.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#min.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#max.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#max.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#step.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#step.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#ul.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#ul.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#li.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#li.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/","attributes":{"range":[0,0,243,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/","content":"import {\n  FC,\n  KeyboardEvent,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\n\nimport { useTranslation } from 'next-i18next';\n\nimport { DEFAULT_SYSTEM_PROMPT } from '@/utils/app/const';\n\nimport { Conversation } from '@/types/chat';\nimport { Prompt } from '@/types/prompt';\n\nimport { PromptList } from './PromptList';\nimport { VariableModal } from './VariableModal';\n\ninterface Props {\n  conversation: Conversation;\n  prompts: Prompt[];\n  onChangePrompt: (prompt: string) => void;\n}\n\nexport const SystemPrompt: FC<Props> = ({\n  conversation,\n  prompts,\n  onChangePrompt,\n}) => {\n  const { t } = useTranslation('chat');\n\n  const [value, setValue] = useState<string>('');\n  const [activePromptIndex, setActivePromptIndex] = useState(0);\n  const [showPromptList, setShowPromptList] = useState(false);\n  const [promptInputValue, setPromptInputValue] = useState('');\n  const [variables, setVariables] = useState<string[]>([]);\n  const [isModalVisible, setIsModalVisible] = useState(false);\n\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const promptListRef = useRef<HTMLUListElement | null>(null);\n\n  const filteredPrompts = prompts.filter((prompt) =>\n    prompt.name.toLowerCase().includes(promptInputValue.toLowerCase()),\n  );\n\n  const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const value = e.target.value;\n    const maxLength = conversation.model.maxLength;\n\n    if (value.length > maxLength) {\n      alert(\n        t(\n          `Prompt limit is {{maxLength}} characters. You have entered {{valueLength}} characters.`,\n          { maxLength, valueLength: value.length },\n        ),\n      );\n      return;\n    }\n\n    setValue(value);\n    updatePromptListVisibility(value);\n\n    if (value.length > 0) {\n      onChangePrompt(value);\n    }\n  };\n\n  const handleInitModal = () => {\n    const selectedPrompt = filteredPrompts[activePromptIndex];\n    setValue((prevVal) => {\n      const newContent = prevVal?.replace(/\\/\\w*$/, selectedPrompt.content);\n      return newContent;\n    });\n    handlePromptSelect(selectedPrompt);\n    setShowPromptList(false);\n  };\n\n  const parseVariables = (content: string) => {\n    const regex = /{{(.*?)}}/g;\n    const foundVariables = [];\n    let match;\n\n    while ((match = regex.exec(content)) !== null) {\n      foundVariables.push(match[1]);\n    }\n\n    return foundVariables;\n  };\n\n  const updatePromptListVisibility = useCallback((text: string) => {\n    const match = text.match(/\\/\\w*$/);\n\n    if (match) {\n      setShowPromptList(true);\n      setPromptInputValue(match[0].slice(1));\n    } else {\n      setShowPromptList(false);\n      setPromptInputValue('');\n    }\n  }, []);\n\n  const handlePromptSelect = (prompt: Prompt) => {\n    const parsedVariables = parseVariables(prompt.content);\n    setVariables(parsedVariables);\n\n    if (parsedVariables.length > 0) {\n      setIsModalVisible(true);\n    } else {\n      const updatedContent = value?.replace(/\\/\\w*$/, prompt.content);\n\n      setValue(updatedContent);\n      onChangePrompt(updatedContent);\n\n      updatePromptListVisibility(prompt.content);\n    }\n  };\n\n  const handleSubmit = (updatedVariables: string[]) => {\n    const newContent = value?.replace(/{{(.*?)}}/g, (match, variable) => {\n      const index = variables.indexOf(variable);\n      return updatedVariables[index];\n    });\n\n    setValue(newContent);\n    onChangePrompt(newContent);\n\n    if (textareaRef && textareaRef.current) {\n      textareaRef.current.focus();\n    }\n  };\n\n  const handleKeyDown = (e: KeyboardEvent<HTMLTextAreaElement>) => {\n    if (showPromptList) {\n      if (e.key === 'ArrowDown') {\n        e.preventDefault();\n        setActivePromptIndex((prevIndex) =>\n          prevIndex < prompts.length - 1 ? prevIndex + 1 : prevIndex,\n        );\n      } else if (e.key === 'ArrowUp') {\n        e.preventDefault();\n        setActivePromptIndex((prevIndex) =>\n          prevIndex > 0 ? prevIndex - 1 : prevIndex,\n        );\n      } else if (e.key === 'Tab') {\n        e.preventDefault();\n        setActivePromptIndex((prevIndex) =>\n          prevIndex < prompts.length - 1 ? prevIndex + 1 : 0,\n        );\n      } else if (e.key === 'Enter') {\n        e.preventDefault();\n        handleInitModal();\n      } else if (e.key === 'Escape') {\n        e.preventDefault();\n        setShowPromptList(false);\n      } else {\n        setActivePromptIndex(0);\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (textareaRef && textareaRef.current) {\n      textareaRef.current.style.height = 'inherit';\n      textareaRef.current.style.height = `${textareaRef.current?.scrollHeight}px`;\n    }\n  }, [value]);\n\n  useEffect(() => {\n    if (conversation.prompt) {\n      setValue(conversation.prompt);\n    } else {\n      setValue(DEFAULT_SYSTEM_PROMPT);\n    }\n  }, [conversation]);\n\n  useEffect(() => {\n    const handleOutsideClick = (e: MouseEvent) => {\n      if (\n        promptListRef.current &&\n        !promptListRef.current.contains(e.target as Node)\n      ) {\n        setShowPromptList(false);\n      }\n    };\n\n    window.addEventListener('click', handleOutsideClick);\n\n    return () => {\n      window.removeEventListener('click', handleOutsideClick);\n    };\n  }, []);\n\n  return (\n    <div className=\"flex flex-col\">\n      <label className=\"mb-2 text-left text-neutral-700 dark:text-neutral-400\">\n        {t('System Prompt')}\n      </label>\n      <textarea\n        ref={textareaRef}\n        className=\"w-full rounded-lg border border-neutral-200 bg-transparent px-4 py-3 text-neutral-900 dark:border-neutral-600 dark:text-neutral-100\"\n        style={{\n          resize: 'none',\n          bottom: `${textareaRef?.current?.scrollHeight}px`,\n          maxHeight: '300px',\n          overflow: `${\n            textareaRef.current && textareaRef.current.scrollHeight > 400\n              ? 'auto'\n              : 'hidden'\n          }`,\n        }}\n        placeholder={\n          t(`Enter a prompt or type \"/\" to select a prompt...`) || ''\n        }\n        value={t(value) || ''}\n        rows={1}\n        onChange={handleChange}\n        onKeyDown={handleKeyDown}\n      />\n\n      {showPromptList && filteredPrompts.length > 0 && (\n        <div>\n          <PromptList\n            activePromptIndex={activePromptIndex}\n            prompts={filteredPrompts}\n            onSelect={handleInitModal}\n            onMouseOver={setActivePromptIndex}\n            promptListRef={promptListRef}\n          />\n        </div>\n      )}\n\n      {isModalVisible && (\n        <VariableModal\n          prompt={prompts[activePromptIndex]}\n          variables={variables}\n          onSubmit={handleSubmit}\n          onClose={() => setIsModalVisible(false)}\n        />\n      )}\n    </div>\n  );\n};\n","file":"/components/Chat/SystemPrompt.tsx","language":"typescript","fileHash":"8a384791b4bc0522e7bfc018852c166ceceff4c074753a29aa22ed0e1af4b2f4","hash":"8a384791b4bc0522e7bfc018852c166ceceff4c074753a29aa22ed0e1af4b2f4","processedContent":"import {\n  FC, #undefined\n  KeyboardEvent, #undefined\n  useCallback, #undefined\n  useEffect, #undefined\n  useRef, #undefined\n  useState, #undefined\n} from 'react'; #undefined\n\nimport { useTranslation } from 'next-i18next';\n\nimport { DEFAULT_SYSTEM_PROMPT } from '@/utils/app/const';\n\nimport { Conversation } from '@/types/chat';\nimport { Prompt } from '@/types/prompt';\n\nimport { PromptList } from './PromptList';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/PromptList.: This code defines a React component that renders a list of prompts, with each prompt being a clickable item that triggers an action when selected. The component also includes event handlers for mouse hover and click events.\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/: This code defines a React component that renders a list of prompts, with each prompt being a clickable item that triggers an action when selected. The component also includes event handlers for mouse hover and click events.\n\"\"\"\nimport { VariableModal } from './VariableModal';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.: This code defines a React component that renders a modal dialog with a form for the user to input values for a set of variables. The form includes a text area for each variable, and the user can submit the form by clicking a button. The component also includes an event listener for the escape key, which closes the modal when pressed.\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/: This code defines a React component that renders a modal dialog with a form for inputting values for variables. The component includes an event listener for the escape key, which closes the modal when pressed.\n\"\"\"\n\ninterface Props {\n  \"\"\"This code defines a component's properties, including a conversation object, an array of prompts, and a function to update the prompts.\"\"\"\n  pass\n\nexport const SystemPrompt: FC<Props> = ({\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/Props#: This code defines a component's properties, including a conversation object, an array of prompts, and a function to update the prompts.\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#: undefined\n\"\"\"\n  \"\"\"This code defines a React component that allows users to input text and select from a list of pre-defined prompts. The component also includes a modal dialog for the user to input values for variables in the selected prompt.\"\"\"\n  pass\n","documentation":"This code defines a React component that allows users to input text and select from a list of pre-defined prompts. The component also includes a modal dialog for the user to input values for variables in the selected prompt."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/Props#","attributes":{"range":[19,0,23,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/Props#","content":"interface Props {\n  conversation: Conversation;\n  prompts: Prompt[];\n  onChangePrompt: (prompt: string) => void;\n}","file":"/components/Chat/SystemPrompt.tsx","language":"typescript","fileHash":"8a384791b4bc0522e7bfc018852c166ceceff4c074753a29aa22ed0e1af4b2f4","hash":"226ad51fd0cdd5132565e1e42d8193a64d913af942d68da147a06576ed861ae1","processedContent":"interface Props {\n  conversation: Conversation;\n  prompts: Prompt[];\n  onChangePrompt: (prompt: string) => void;\n}","documentation":"This code defines a component's properties, including a conversation object, an array of prompts, and a function to update the prompts."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","attributes":{"range":[25,39,242,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","content":"({\n  conversation,\n  prompts,\n  onChangePrompt,\n}) => {\n  const { t } = useTranslation('chat');\n\n  const [value, setValue] = useState<string>('');\n  const [activePromptIndex, setActivePromptIndex] = useState(0);\n  const [showPromptList, setShowPromptList] = useState(false);\n  const [promptInputValue, setPromptInputValue] = useState('');\n  const [variables, setVariables] = useState<string[]>([]);\n  const [isModalVisible, setIsModalVisible] = useState(false);\n\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const promptListRef = useRef<HTMLUListElement | null>(null);\n\n  const filteredPrompts = prompts.filter((prompt) =>\n    prompt.name.toLowerCase().includes(promptInputValue.toLowerCase()),\n  );\n\n  const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const value = e.target.value;\n    const maxLength = conversation.model.maxLength;\n\n    if (value.length > maxLength) {\n      alert(\n        t(\n          `Prompt limit is {{maxLength}} characters. You have entered {{valueLength}} characters.`,\n          { maxLength, valueLength: value.length },\n        ),\n      );\n      return;\n    }\n\n    setValue(value);\n    updatePromptListVisibility(value);\n\n    if (value.length > 0) {\n      onChangePrompt(value);\n    }\n  };\n\n  const handleInitModal = () => {\n    const selectedPrompt = filteredPrompts[activePromptIndex];\n    setValue((prevVal) => {\n      const newContent = prevVal?.replace(/\\/\\w*$/, selectedPrompt.content);\n      return newContent;\n    });\n    handlePromptSelect(selectedPrompt);\n    setShowPromptList(false);\n  };\n\n  const parseVariables = (content: string) => {\n    const regex = /{{(.*?)}}/g;\n    const foundVariables = [];\n    let match;\n\n    while ((match = regex.exec(content)) !== null) {\n      foundVariables.push(match[1]);\n    }\n\n    return foundVariables;\n  };\n\n  const updatePromptListVisibility = useCallback((text: string) => {\n    const match = text.match(/\\/\\w*$/);\n\n    if (match) {\n      setShowPromptList(true);\n      setPromptInputValue(match[0].slice(1));\n    } else {\n      setShowPromptList(false);\n      setPromptInputValue('');\n    }\n  }, []);\n\n  const handlePromptSelect = (prompt: Prompt) => {\n    const parsedVariables = parseVariables(prompt.content);\n    setVariables(parsedVariables);\n\n    if (parsedVariables.length > 0) {\n      setIsModalVisible(true);\n    } else {\n      const updatedContent = value?.replace(/\\/\\w*$/, prompt.content);\n\n      setValue(updatedContent);\n      onChangePrompt(updatedContent);\n\n      updatePromptListVisibility(prompt.content);\n    }\n  };\n\n  const handleSubmit = (updatedVariables: string[]) => {\n    const newContent = value?.replace(/{{(.*?)}}/g, (match, variable) => {\n      const index = variables.indexOf(variable);\n      return updatedVariables[index];\n    });\n\n    setValue(newContent);\n    onChangePrompt(newContent);\n\n    if (textareaRef && textareaRef.current) {\n      textareaRef.current.focus();\n    }\n  };\n\n  const handleKeyDown = (e: KeyboardEvent<HTMLTextAreaElement>) => {\n    if (showPromptList) {\n      if (e.key === 'ArrowDown') {\n        e.preventDefault();\n        setActivePromptIndex((prevIndex) =>\n          prevIndex < prompts.length - 1 ? prevIndex + 1 : prevIndex,\n        );\n      } else if (e.key === 'ArrowUp') {\n        e.preventDefault();\n        setActivePromptIndex((prevIndex) =>\n          prevIndex > 0 ? prevIndex - 1 : prevIndex,\n        );\n      } else if (e.key === 'Tab') {\n        e.preventDefault();\n        setActivePromptIndex((prevIndex) =>\n          prevIndex < prompts.length - 1 ? prevIndex + 1 : 0,\n        );\n      } else if (e.key === 'Enter') {\n        e.preventDefault();\n        handleInitModal();\n      } else if (e.key === 'Escape') {\n        e.preventDefault();\n        setShowPromptList(false);\n      } else {\n        setActivePromptIndex(0);\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (textareaRef && textareaRef.current) {\n      textareaRef.current.style.height = 'inherit';\n      textareaRef.current.style.height = `${textareaRef.current?.scrollHeight}px`;\n    }\n  }, [value]);\n\n  useEffect(() => {\n    if (conversation.prompt) {\n      setValue(conversation.prompt);\n    } else {\n      setValue(DEFAULT_SYSTEM_PROMPT);\n    }\n  }, [conversation]);\n\n  useEffect(() => {\n    const handleOutsideClick = (e: MouseEvent) => {\n      if (\n        promptListRef.current &&\n        !promptListRef.current.contains(e.target as Node)\n      ) {\n        setShowPromptList(false);\n      }\n    };\n\n    window.addEventListener('click', handleOutsideClick);\n\n    return () => {\n      window.removeEventListener('click', handleOutsideClick);\n    };\n  }, []);\n\n  return (\n    <div className=\"flex flex-col\">\n      <label className=\"mb-2 text-left text-neutral-700 dark:text-neutral-400\">\n        {t('System Prompt')}\n      </label>\n      <textarea\n        ref={textareaRef}\n        className=\"w-full rounded-lg border border-neutral-200 bg-transparent px-4 py-3 text-neutral-900 dark:border-neutral-600 dark:text-neutral-100\"\n        style={{\n          resize: 'none',\n          bottom: `${textareaRef?.current?.scrollHeight}px`,\n          maxHeight: '300px',\n          overflow: `${\n            textareaRef.current && textareaRef.current.scrollHeight > 400\n              ? 'auto'\n              : 'hidden'\n          }`,\n        }}\n        placeholder={\n          t(`Enter a prompt or type \"/\" to select a prompt...`) || ''\n        }\n        value={t(value) || ''}\n        rows={1}\n        onChange={handleChange}\n        onKeyDown={handleKeyDown}\n      />\n\n      {showPromptList && filteredPrompts.length > 0 && (\n        <div>\n          <PromptList\n            activePromptIndex={activePromptIndex}\n            prompts={filteredPrompts}\n            onSelect={handleInitModal}\n            onMouseOver={setActivePromptIndex}\n            promptListRef={promptListRef}\n          />\n        </div>\n      )}\n\n      {isModalVisible && (\n        <VariableModal\n          prompt={prompts[activePromptIndex]}\n          variables={variables}\n          onSubmit={handleSubmit}\n          onClose={() => setIsModalVisible(false)}\n        />\n      )}\n    </div>\n  );\n}","file":"/components/Chat/SystemPrompt.tsx","language":"typescript","fileHash":"8a384791b4bc0522e7bfc018852c166ceceff4c074753a29aa22ed0e1af4b2f4","hash":"c5ea4dc07986ff7e31559606af67a5beb4b42a668fbea9225a5abd827155ade9","processedContent":"({\n  conversation, #undefined\n  prompts, #undefined\n  onChangePrompt, #undefined\n}) => {\n  const { t } = useTranslation('chat');\n\n  const [value, setValue] = useState<string>(''); #undefined\n  const [activePromptIndex, setActivePromptIndex] = useState(0); #undefined\n  const [showPromptList, setShowPromptList] = useState(false); #undefined\n  const [promptInputValue, setPromptInputValue] = useState(''); #undefined\n  const [variables, setVariables] = useState<string[]>([]); #undefined\n  const [isModalVisible, setIsModalVisible] = useState(false); #undefined\n\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLTextAreaElement#: undefined\n  \"\"\"\n  const promptListRef = useRef<HTMLUListElement | null>(null);\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLUListElement#: undefined\n  \"\"\"\n\n  const filteredPrompts = prompts.filter((prompt) =>\n    prompt.name.toLowerCase().includes(promptInputValue.toLowerCase()),\n  );\n\n  const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLTextAreaElement#: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ChangeEvent#: undefined\n  \"\"\"\n    const value = e.target.value; #undefined\n    const maxLength = conversation.model.maxLength;\n\n    if (value.length > maxLength) {\n      alert(\n        t(\n          `Prompt limit is {{maxLength}} characters. You have entered {{valueLength}} characters.`,\n          { maxLength, valueLength: value.length },\n        ),\n      );\n      return;\n    }\n\n    setValue(value);\n    updatePromptListVisibility(value);\n\n    if (value.length > 0) {\n      onChangePrompt(value);\n    }\n  };\n\n  const handleInitModal = () => {\n    const selectedPrompt = filteredPrompts[activePromptIndex];\n    setValue((prevVal) => {\n      const newContent = prevVal?.replace(/\\/\\w*$/, selectedPrompt.content);\n      return newContent;\n    });\n    handlePromptSelect(selectedPrompt);\n    setShowPromptList(false);\n  };\n\n  const parseVariables = (content: string) => {\n    const regex = /{{(.*?)}}/g;\n    const foundVariables = [];\n    let match;\n\n    while ((match = regex.exec(content)) !== null) {\n      foundVariables.push(match[1]);\n    }\n\n    return foundVariables;\n  };\n\n  const updatePromptListVisibility = useCallback((text: string) => { #undefined\n    const match = text.match(/\\/\\w*$/);\n\n    if (match) {\n      setShowPromptList(true);\n      setPromptInputValue(match[0].slice(1));\n    } else {\n      setShowPromptList(false);\n      setPromptInputValue('');\n    }\n  }, []);\n\n  const handlePromptSelect = (prompt: Prompt) => {\n    const parsedVariables = parseVariables(prompt.content);\n    setVariables(parsedVariables);\n\n    if (parsedVariables.length > 0) {\n      setIsModalVisible(true);\n    } else {\n      const updatedContent = value?.replace(/\\/\\w*$/, prompt.content);\n\n      setValue(updatedContent);\n      onChangePrompt(updatedContent);\n\n      updatePromptListVisibility(prompt.content);\n    }\n  };\n\n  const handleSubmit = (updatedVariables: string[]) => {\n    const newContent = value?.replace(/{{(.*?)}}/g, (match, variable) => {\n      const index = variables.indexOf(variable);\n      return updatedVariables[index];\n    });\n\n    setValue(newContent);\n    onChangePrompt(newContent);\n\n    if (textareaRef && textareaRef.current) { #undefined\n      textareaRef.current.focus(); #undefined\n    }\n  };\n\n  const handleKeyDown = (e: KeyboardEvent<HTMLTextAreaElement>) => {\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLTextAreaElement#: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#: undefined\n  \"\"\"\n    if (showPromptList) {\n      if (e.key === 'ArrowDown') { #undefined\n        e.preventDefault(); #undefined\n        setActivePromptIndex((prevIndex) =>\n          prevIndex < prompts.length - 1 ? prevIndex + 1 : prevIndex,\n        );\n      } else if (e.key === 'ArrowUp') { #undefined\n        e.preventDefault(); #undefined\n        setActivePromptIndex((prevIndex) =>\n          prevIndex > 0 ? prevIndex - 1 : prevIndex,\n        );\n      } else if (e.key === 'Tab') { #undefined\n        e.preventDefault(); #undefined\n        setActivePromptIndex((prevIndex) =>\n          prevIndex < prompts.length - 1 ? prevIndex + 1 : 0,\n        );\n      } else if (e.key === 'Enter') { #undefined\n        e.preventDefault(); #undefined\n        handleInitModal();\n      } else if (e.key === 'Escape') { #undefined\n        e.preventDefault(); #undefined\n        setShowPromptList(false);\n      } else {\n        setActivePromptIndex(0);\n      }\n    }\n  };\n\n  useEffect(() => { #undefined\n    if (textareaRef && textareaRef.current) { #undefined\n      textareaRef.current.style.height = 'inherit'; #undefined\n      textareaRef.current.style.height = `${textareaRef.current?.scrollHeight}px`;\n      \"\"\"\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.: undefined\n      \"\"\"\n    }\n  }, [value]);\n\n  useEffect(() => { #undefined\n    if (conversation.prompt) {\n      setValue(conversation.prompt);\n    } else {\n      setValue(DEFAULT_SYSTEM_PROMPT);\n    }\n  }, [conversation]);\n\n  useEffect(() => { #undefined\n    const handleOutsideClick = (e: MouseEvent) => { #undefined\n      if (\n        promptListRef.current && #undefined\n        !promptListRef.current.contains(e.target as Node) #undefined\n      ) {\n        setShowPromptList(false);\n      }\n    };\n\n    window.addEventListener('click', handleOutsideClick);\n\n    return () => {\n      window.removeEventListener('click', handleOutsideClick);\n    };\n  }, []);\n\n  return (\n    <div className=\"flex flex-col\">\n    \"\"\"\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n    \"\"\"\n      <label className=\"mb-2 text-left text-neutral-700 dark:text-neutral-400\">\n      \"\"\"\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#label.: undefined\n      \"\"\"\n        {t('System Prompt')}\n      </label> #undefined\n      <textarea #undefined\n        ref={textareaRef} #undefined\n        className=\"w-full rounded-lg border border-neutral-200 bg-transparent px-4 py-3 text-neutral-900 dark:border-neutral-600 dark:text-neutral-100\" #undefined\n        style={{ #undefined\n          resize: 'none',\n          bottom: `${textareaRef?.current?.scrollHeight}px`, #undefined\n          maxHeight: '300px',\n          overflow: `${\n            textareaRef.current && textareaRef.current.scrollHeight > 400\n            \"\"\"\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.: undefined\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.: undefined\n            \"\"\"\n              ? 'auto'\n              : 'hidden'\n          }`,\n        }}\n        placeholder={ #undefined\n          t(`Enter a prompt or type \"/\" to select a prompt...`) || ''\n        }\n        value={t(value) || ''} #undefined\n        rows={1} #undefined\n        onChange={handleChange} #undefined\n        onKeyDown={handleKeyDown} #undefined\n      />\n\n      {showPromptList && filteredPrompts.length > 0 && (\n        <div> #undefined\n          <PromptList #This code defines a React component that renders a list of prompts, with each prompt being a clickable item that triggers an action when selected. The component also includes event handlers for mouse hover and click events.\n            activePromptIndex={activePromptIndex} #undefined\n            prompts={filteredPrompts} #undefined\n            onSelect={handleInitModal} #undefined\n            onMouseOver={setActivePromptIndex} #undefined\n            promptListRef={promptListRef} #undefined\n          />\n        </div> #undefined\n      )}\n\n      {isModalVisible && (\n        <VariableModal #This code defines a React component that renders a modal dialog with a form for the user to input values for a set of variables. The form includes a text area for each variable, and the user can submit the form by clicking a button. The component also includes an event listener for the escape key, which closes the modal when pressed.\n          prompt={prompts[activePromptIndex]} #undefined\n          variables={variables} #undefined\n          onSubmit={handleSubmit} #undefined\n          onClose={() => setIsModalVisible(false)} #undefined\n        />\n      )}\n    </div>\n  );\n}","documentation":"This code defines a React component that allows users to input text and select from a list of pre-defined prompts. The component also includes a modal dialog for the user to input values for variables in the selected prompt."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/PromptList.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/PromptList.","language":"typescript","range":[12,37,44,1],"content":"({\n  prompts,\n  activePromptIndex,\n  onSelect,\n  onMouseOver,\n  promptListRef,\n}) => {\n  return (\n    <ul\n      ref={promptListRef}\n      className=\"z-10 max-h-52 w-full overflow-scroll rounded border border-black/10 bg-white shadow-[0_0_10px_rgba(0,0,0,0.10)] dark:border-neutral-500 dark:bg-[#343541] dark:text-white dark:shadow-[0_0_15px_rgba(0,0,0,0.10)]\"\n    >\n      {prompts.map((prompt, index) => (\n        <li\n          key={prompt.id}\n          className={`${\n            index === activePromptIndex\n              ? 'bg-gray-200 dark:bg-[#202123] dark:text-black'\n              : ''\n          } cursor-pointer px-3 py-2 text-sm text-black dark:text-white`}\n          onClick={(e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            onSelect();\n          }}\n          onMouseEnter={() => onMouseOver(index)}\n        >\n          {prompt.name}\n        </li>\n      ))}\n    </ul>\n  );\n}","file":"/components/Chat/PromptList.tsx","fileHash":"5c43ec5e3bcc267907a48154b7902ad83d8701f43faa350cfd3997581c54c94c","hash":"4baac5f8ba108e07ffd360b57151b7a5a4db8545350e1ae053686e912b39504c","processedContent":"({\n  prompts, #undefined\n  activePromptIndex, #undefined\n  onSelect, #undefined\n  onMouseOver, #undefined\n  promptListRef, #undefined\n}) => {\n  return (\n    <ul #undefined\n      ref={promptListRef} #undefined\n      className=\"z-10 max-h-52 w-full overflow-scroll rounded border border-black/10 bg-white shadow-[0_0_10px_rgba(0,0,0,0.10)] dark:border-neutral-500 dark:bg-[#343541] dark:text-white dark:shadow-[0_0_15px_rgba(0,0,0,0.10)]\" #undefined\n    >\n      {prompts.map((prompt, index) => (\n        <li #undefined\n          key={prompt.id} #undefined\n          className={`${ #undefined\n            index === activePromptIndex\n              ? 'bg-gray-200 dark:bg-[#202123] dark:text-black'\n              : ''\n          } cursor-pointer px-3 py-2 text-sm text-black dark:text-white`}\n          onClick={(e) => { #undefined\n            e.preventDefault(); #undefined\n            e.stopPropagation(); #undefined\n            onSelect();\n          }}\n          onMouseEnter={() => onMouseOver(index)} #undefined\n        >\n          {prompt.name}\n        </li> #undefined\n      ))}\n    </ul> #undefined\n  );\n}","documentation":"This code defines a React component that renders a list of prompts, with each prompt being a clickable item that triggers an action when selected. The component also includes event handlers for mouse hover and click events."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/","language":"typescript","range":[0,0,45,0],"content":"import { FC, MutableRefObject } from 'react';\n\nimport { Prompt } from '@/types/prompt';\n\ninterface Props {\n  prompts: Prompt[];\n  activePromptIndex: number;\n  onSelect: () => void;\n  onMouseOver: (index: number) => void;\n  promptListRef: MutableRefObject<HTMLUListElement | null>;\n}\n\nexport const PromptList: FC<Props> = ({\n  prompts,\n  activePromptIndex,\n  onSelect,\n  onMouseOver,\n  promptListRef,\n}) => {\n  return (\n    <ul\n      ref={promptListRef}\n      className=\"z-10 max-h-52 w-full overflow-scroll rounded border border-black/10 bg-white shadow-[0_0_10px_rgba(0,0,0,0.10)] dark:border-neutral-500 dark:bg-[#343541] dark:text-white dark:shadow-[0_0_15px_rgba(0,0,0,0.10)]\"\n    >\n      {prompts.map((prompt, index) => (\n        <li\n          key={prompt.id}\n          className={`${\n            index === activePromptIndex\n              ? 'bg-gray-200 dark:bg-[#202123] dark:text-black'\n              : ''\n          } cursor-pointer px-3 py-2 text-sm text-black dark:text-white`}\n          onClick={(e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            onSelect();\n          }}\n          onMouseEnter={() => onMouseOver(index)}\n        >\n          {prompt.name}\n        </li>\n      ))}\n    </ul>\n  );\n};\n","file":"/components/Chat/PromptList.tsx","fileHash":"5c43ec5e3bcc267907a48154b7902ad83d8701f43faa350cfd3997581c54c94c","hash":"5c43ec5e3bcc267907a48154b7902ad83d8701f43faa350cfd3997581c54c94c","processedContent":"import { FC, MutableRefObject } from 'react';\n\"\"\"\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/: undefined\n\"\"\"\n\nimport { Prompt } from '@/types/prompt';\n\ninterface Props {\n  \"\"\"This code defines a component's props, which are used to pass data and functions between components. The `Props` interface specifies the shape of the data that will be passed to the component, including an array of prompts, an active prompt index, and callback functions for when a prompt is selected or the mouse hovers over a prompt.\"\"\"\n  pass\n\nexport const PromptList: FC<Props> = ({\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/Props#: This code defines a component's props, which are used to pass data and functions between components. The `Props` interface specifies the shape of the data that will be passed to the component, including an array of prompts, an active prompt index, and callback functions for when a prompt is selected or the mouse hovers over a prompt.\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#: undefined\n\"\"\"\n  \"\"\"This code defines a React component that renders a list of prompts, with each prompt being a clickable item that triggers an action when selected. The component also includes event handlers for mouse hover and click events.\"\"\"\n  pass\n","documentation":"This code defines a React component that renders a list of prompts, with each prompt being a clickable item that triggers an action when selected. The component also includes event handlers for mouse hover and click events."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/Props#conversation.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/Props#conversation.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/Props#prompts.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/Props#prompts.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/Props#onChangePrompt.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/Props#onChangePrompt.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLUListElement#","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLUListElement#","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/Props#activePromptIndex.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/Props#activePromptIndex.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/Props#prompts.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/Props#prompts.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/Props#onSelect.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/Props#onSelect.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/Props#onMouseOver.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/Props#onMouseOver.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/Props#promptListRef.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/Props#promptListRef.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Regenerate.tsx`/","attributes":{"range":[0,0,26,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Regenerate.tsx`/","content":"import { IconRefresh } from '@tabler/icons-react';\nimport { FC } from 'react';\n\nimport { useTranslation } from 'next-i18next';\n\ninterface Props {\n  onRegenerate: () => void;\n}\n\nexport const Regenerate: FC<Props> = ({ onRegenerate }) => {\n  const { t } = useTranslation('chat');\n  return (\n    <div className=\"fixed bottom-4 left-0 right-0 ml-auto mr-auto w-full px-2 sm:absolute sm:bottom-8 sm:left-[280px] sm:w-1/2 lg:left-[200px]\">\n      <div className=\"mb-4 text-center text-red-500\">\n        {t('Sorry, there was an error.')}\n      </div>\n      <button\n        className=\"flex h-12 gap-2 w-full items-center justify-center rounded-lg border border-b-neutral-300 bg-neutral-100 text-sm font-semibold text-neutral-500 dark:border-none dark:bg-[#444654] dark:text-neutral-200\"\n        onClick={onRegenerate}\n      >\n        <IconRefresh />\n        <div>{t('Regenerate response')}</div>\n      </button>\n    </div>\n  );\n};\n","file":"/components/Chat/Regenerate.tsx","language":"typescript","fileHash":"4d791340b6a09f8e7bc40cd1ac4321455572e867c656929354a054a7b65128c4","hash":"4d791340b6a09f8e7bc40cd1ac4321455572e867c656929354a054a7b65128c4","processedContent":"import { IconRefresh } from '@tabler/icons-react';\nimport { FC } from 'react';\n\"\"\"\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/: undefined\n\"\"\"\n\nimport { useTranslation } from 'next-i18next';\n\ninterface Props {\n  \"\"\"This code defines a component's properties, including an event handler for when the component needs to be regenerated.\"\"\"\n  pass\n\nexport const Regenerate: FC<Props> = ({ onRegenerate }) => {\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Regenerate.tsx`/Props#: This code defines a component's properties, including an event handler for when the component needs to be regenerated.\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#: undefined\n\"\"\"\n  \"\"\"This code defines a React component that displays an error message and a button to regenerate the response. The component uses the `useTranslation` hook from the `react-i18next` library to internationalize the text.\"\"\"\n  pass\n","documentation":"This code defines a React component that displays an error message and a button to regenerate the response. The component uses the `useTranslation` hook from the `react-i18next` library to internationalize the text."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Regenerate.tsx`/Props#","attributes":{"range":[5,0,7,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Regenerate.tsx`/Props#","content":"interface Props {\n  onRegenerate: () => void;\n}","file":"/components/Chat/Regenerate.tsx","language":"typescript","fileHash":"4d791340b6a09f8e7bc40cd1ac4321455572e867c656929354a054a7b65128c4","hash":"38274b087dca87521193ba1542a1e190b0f9a5b9d05cb880590f954525035589","processedContent":"interface Props {\n  onRegenerate: () => void;\n}","documentation":"This code defines a component's properties, including an event handler for when the component needs to be regenerated."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Regenerate.tsx`/Regenerate.","attributes":{"range":[9,37,25,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Regenerate.tsx`/Regenerate.","content":"({ onRegenerate }) => {\n  const { t } = useTranslation('chat');\n  return (\n    <div className=\"fixed bottom-4 left-0 right-0 ml-auto mr-auto w-full px-2 sm:absolute sm:bottom-8 sm:left-[280px] sm:w-1/2 lg:left-[200px]\">\n      <div className=\"mb-4 text-center text-red-500\">\n        {t('Sorry, there was an error.')}\n      </div>\n      <button\n        className=\"flex h-12 gap-2 w-full items-center justify-center rounded-lg border border-b-neutral-300 bg-neutral-100 text-sm font-semibold text-neutral-500 dark:border-none dark:bg-[#444654] dark:text-neutral-200\"\n        onClick={onRegenerate}\n      >\n        <IconRefresh />\n        <div>{t('Regenerate response')}</div>\n      </button>\n    </div>\n  );\n}","file":"/components/Chat/Regenerate.tsx","language":"typescript","fileHash":"4d791340b6a09f8e7bc40cd1ac4321455572e867c656929354a054a7b65128c4","hash":"35352c8853fc54ae27595250798cf6e2bb3d06eaa6898ffead4cbddeb0f520cd","processedContent":"({ onRegenerate }) => {\n  const { t } = useTranslation('chat');\n  return (\n    <div className=\"fixed bottom-4 left-0 right-0 ml-auto mr-auto w-full px-2 sm:absolute sm:bottom-8 sm:left-[280px] sm:w-1/2 lg:left-[200px]\">\n    \"\"\"\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n    \"\"\"\n      <div className=\"mb-4 text-center text-red-500\">\n      \"\"\"\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n      \"\"\"\n        {t('Sorry, there was an error.')}\n      </div> #undefined\n      <button #undefined\n        className=\"flex h-12 gap-2 w-full items-center justify-center rounded-lg border border-b-neutral-300 bg-neutral-100 text-sm font-semibold text-neutral-500 dark:border-none dark:bg-[#444654] dark:text-neutral-200\" #undefined\n        onClick={onRegenerate} #undefined\n      >\n        <IconRefresh />\n        <div>{t('Regenerate response')}</div>\n        \"\"\"\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n        \"\"\"\n      </button> #undefined\n    </div>\n  );\n}","documentation":"This code defines a React component that displays an error message and a button to regenerate the response. The component uses the `useTranslation` hook from the `react-i18next` library to internationalize the text."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Regenerate.tsx`/Props#onRegenerate.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Regenerate.tsx`/Props#onRegenerate.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/Props#","attributes":{"range":[4,0,10,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/Props#","content":"interface Props {\n  prompts: Prompt[];\n  activePromptIndex: number;\n  onSelect: () => void;\n  onMouseOver: (index: number) => void;\n  promptListRef: MutableRefObject<HTMLUListElement | null>;\n}","file":"/components/Chat/PromptList.tsx","language":"typescript","fileHash":"5c43ec5e3bcc267907a48154b7902ad83d8701f43faa350cfd3997581c54c94c","hash":"95df9e47fac26ed8961f3cf0a6d61c136159c8517508ad13a36db2cdb620de1b","processedContent":"interface Props {\n  prompts: Prompt[];\n  activePromptIndex: number;\n  onSelect: () => void;\n  onMouseOver: (index: number) => void;\n  promptListRef: MutableRefObject<HTMLUListElement | null>;\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLUListElement#: undefined\n  \"\"\"\n}","documentation":"This code defines a component's props, which are used to pass data and functions between components. The `Props` interface specifies the shape of the data that will be passed to the component, including an array of prompts, an active prompt index, and callback functions for when a prompt is selected or the mouse hovers over a prompt."}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/BaseSyntheticEvent#stopPropagation().","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/BaseSyntheticEvent#stopPropagation().","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onMouseEnter.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onMouseEnter.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/","attributes":{"range":[0,0,103,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/","content":"import { FC, useEffect, useRef } from 'react';\n\nimport { useTranslation } from 'next-i18next';\n\nimport { Plugin, PluginList } from '@/types/plugin';\n\ninterface Props {\n  plugin: Plugin | null;\n  onPluginChange: (plugin: Plugin) => void;\n  onKeyDown: (e: React.KeyboardEvent<HTMLSelectElement>) => void;\n}\n\nexport const PluginSelect: FC<Props> = ({\n  plugin,\n  onPluginChange,\n  onKeyDown,\n}) => {\n  const { t } = useTranslation('chat');\n\n  const selectRef = useRef<HTMLSelectElement>(null);\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLSelectElement>) => {\n    const selectElement = selectRef.current;\n    const optionCount = selectElement?.options.length || 0;\n\n    if (e.key === '/' && e.metaKey) {\n      e.preventDefault();\n      if (selectElement) {\n        selectElement.selectedIndex =\n          (selectElement.selectedIndex + 1) % optionCount;\n        selectElement.dispatchEvent(new Event('change'));\n      }\n    } else if (e.key === '/' && e.shiftKey && e.metaKey) {\n      e.preventDefault();\n      if (selectElement) {\n        selectElement.selectedIndex =\n          (selectElement.selectedIndex - 1 + optionCount) % optionCount;\n        selectElement.dispatchEvent(new Event('change'));\n      }\n    } else if (e.key === 'Enter') {\n      e.preventDefault();\n      if (selectElement) {\n        selectElement.dispatchEvent(new Event('change'));\n      }\n\n      onPluginChange(\n        PluginList.find(\n          (plugin) =>\n            plugin.name === selectElement?.selectedOptions[0].innerText,\n        ) as Plugin,\n      );\n    } else {\n      onKeyDown(e);\n    }\n  };\n\n  useEffect(() => {\n    if (selectRef.current) {\n      selectRef.current.focus();\n    }\n  }, []);\n\n  return (\n    <div className=\"flex flex-col\">\n      <div className=\"mb-1 w-full rounded border border-neutral-200 bg-transparent pr-2 text-neutral-900 dark:border-neutral-600 dark:text-white\">\n        <select\n          ref={selectRef}\n          className=\"w-full cursor-pointer bg-transparent p-2\"\n          placeholder={t('Select a plugin') || ''}\n          value={plugin?.id || ''}\n          onChange={(e) => {\n            onPluginChange(\n              PluginList.find(\n                (plugin) => plugin.id === e.target.value,\n              ) as Plugin,\n            );\n          }}\n          onKeyDown={(e) => {\n            handleKeyDown(e);\n          }}\n        >\n          <option\n            key=\"chatgpt\"\n            value=\"chatgpt\"\n            className=\"dark:bg-[#343541] dark:text-white\"\n          >\n            ChatGPT\n          </option>\n\n          {PluginList.map((plugin) => (\n            <option\n              key={plugin.id}\n              value={plugin.id}\n              className=\"dark:bg-[#343541] dark:text-white\"\n            >\n              {plugin.name}\n            </option>\n          ))}\n        </select>\n      </div>\n    </div>\n  );\n};\n","file":"/components/Chat/PluginSelect.tsx","language":"typescript","fileHash":"55cdf17f83195e2e771d22d0b27a26f08a9a71aa8a5e2917e6f1c2e9ff0a65f8","hash":"55cdf17f83195e2e771d22d0b27a26f08a9a71aa8a5e2917e6f1c2e9ff0a65f8","processedContent":"import { FC, useEffect, useRef } from 'react';\n\"\"\"\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/: undefined\n\"\"\"\n\nimport { useTranslation } from 'next-i18next';\n\nimport { Plugin, PluginList } from '@/types/plugin';\n\ninterface Props {\n  \"\"\"This code defines a component's properties, including a plugin object and event handlers for when the plugin changes or the user presses a key on the select element.\"\"\"\n  pass\n\nexport const PluginSelect: FC<Props> = ({\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/Props#: This code defines a component's properties, including a plugin object and event handlers for when the plugin changes or the user presses a key on the select element.\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#: undefined\n\"\"\"\n  \"\"\"This code defines a React component that renders a dropdown menu for selecting a plugin. The component uses the `useRef` hook to store a reference to the select element, and the `useEffect` hook to focus on the select element when the component mounts. The component also defines a `handleKeyDown` function that handles keyboard events for the select element, including navigation and selection of options.\"\"\"\n  pass\n","documentation":"This code defines a React component that renders a dropdown menu for selecting a plugin. The component uses the `useRef` hook to store a reference to the select element, and the `useEffect` hook to focus on the select element when the component mounts. The component also defines a `handleKeyDown` function that handles keyboard events for the select element, including navigation and selection of options."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/Props#","attributes":{"range":[6,0,10,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/Props#","content":"interface Props {\n  plugin: Plugin | null;\n  onPluginChange: (plugin: Plugin) => void;\n  onKeyDown: (e: React.KeyboardEvent<HTMLSelectElement>) => void;\n}","file":"/components/Chat/PluginSelect.tsx","language":"typescript","fileHash":"55cdf17f83195e2e771d22d0b27a26f08a9a71aa8a5e2917e6f1c2e9ff0a65f8","hash":"43ae82c9a78cdc25871833692ae090b8523ca0b5ecabe7ee3f1f607b7e56acac","processedContent":"interface Props {\n  plugin: Plugin | null;\n  onPluginChange: (plugin: Plugin) => void;\n  onKeyDown: (e: React.KeyboardEvent<HTMLSelectElement>) => void;\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLSelectElement#: undefined\n  \"\"\"\n}","documentation":"This code defines a component's properties, including a plugin object and event handlers for when the plugin changes or the user presses a key on the select element."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","attributes":{"range":[12,39,102,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","content":"({\n  plugin,\n  onPluginChange,\n  onKeyDown,\n}) => {\n  const { t } = useTranslation('chat');\n\n  const selectRef = useRef<HTMLSelectElement>(null);\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLSelectElement>) => {\n    const selectElement = selectRef.current;\n    const optionCount = selectElement?.options.length || 0;\n\n    if (e.key === '/' && e.metaKey) {\n      e.preventDefault();\n      if (selectElement) {\n        selectElement.selectedIndex =\n          (selectElement.selectedIndex + 1) % optionCount;\n        selectElement.dispatchEvent(new Event('change'));\n      }\n    } else if (e.key === '/' && e.shiftKey && e.metaKey) {\n      e.preventDefault();\n      if (selectElement) {\n        selectElement.selectedIndex =\n          (selectElement.selectedIndex - 1 + optionCount) % optionCount;\n        selectElement.dispatchEvent(new Event('change'));\n      }\n    } else if (e.key === 'Enter') {\n      e.preventDefault();\n      if (selectElement) {\n        selectElement.dispatchEvent(new Event('change'));\n      }\n\n      onPluginChange(\n        PluginList.find(\n          (plugin) =>\n            plugin.name === selectElement?.selectedOptions[0].innerText,\n        ) as Plugin,\n      );\n    } else {\n      onKeyDown(e);\n    }\n  };\n\n  useEffect(() => {\n    if (selectRef.current) {\n      selectRef.current.focus();\n    }\n  }, []);\n\n  return (\n    <div className=\"flex flex-col\">\n      <div className=\"mb-1 w-full rounded border border-neutral-200 bg-transparent pr-2 text-neutral-900 dark:border-neutral-600 dark:text-white\">\n        <select\n          ref={selectRef}\n          className=\"w-full cursor-pointer bg-transparent p-2\"\n          placeholder={t('Select a plugin') || ''}\n          value={plugin?.id || ''}\n          onChange={(e) => {\n            onPluginChange(\n              PluginList.find(\n                (plugin) => plugin.id === e.target.value,\n              ) as Plugin,\n            );\n          }}\n          onKeyDown={(e) => {\n            handleKeyDown(e);\n          }}\n        >\n          <option\n            key=\"chatgpt\"\n            value=\"chatgpt\"\n            className=\"dark:bg-[#343541] dark:text-white\"\n          >\n            ChatGPT\n          </option>\n\n          {PluginList.map((plugin) => (\n            <option\n              key={plugin.id}\n              value={plugin.id}\n              className=\"dark:bg-[#343541] dark:text-white\"\n            >\n              {plugin.name}\n            </option>\n          ))}\n        </select>\n      </div>\n    </div>\n  );\n}","file":"/components/Chat/PluginSelect.tsx","language":"typescript","fileHash":"55cdf17f83195e2e771d22d0b27a26f08a9a71aa8a5e2917e6f1c2e9ff0a65f8","hash":"e5e3e85a9c3da14aebd16fefdc4e4b62b85a42395b90c1728ac99f2407541460","processedContent":"({\n  plugin, #undefined\n  onPluginChange, #undefined\n  onKeyDown, #undefined\n}) => {\n  const { t } = useTranslation('chat');\n\n  const selectRef = useRef<HTMLSelectElement>(null);\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLSelectElement#: undefined\n  \"\"\"\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLSelectElement>) => {\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLSelectElement#: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#: undefined\n  \"\"\"\n    const selectElement = selectRef.current; #undefined\n    const optionCount = selectElement?.options.length || 0;\n\n    if (e.key === '/' && e.metaKey) {\n    \"\"\"\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#key.: undefined\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#metaKey.: undefined\n    \"\"\"\n      e.preventDefault(); #undefined\n      if (selectElement) {\n        selectElement.selectedIndex =\n          (selectElement.selectedIndex + 1) % optionCount;\n        selectElement.dispatchEvent(new Event('change'));\n        \"\"\"\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/Event#: undefined\n        scip-typescript npm @types/node 20.9.3 `ts4.8`/`dom-events.d.ts`/global/Event#: undefined\n        scip-typescript npm @types/node 20.9.3 `ts4.8`/`dom-events.d.ts`/global/Event.: undefined\n        \"\"\"\n        \"\"\"\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/Event#: undefined\n        scip-typescript npm @types/node 20.9.3 `ts4.8`/`dom-events.d.ts`/global/Event#: undefined\n        scip-typescript npm @types/node 20.9.3 `ts4.8`/`dom-events.d.ts`/global/Event.: undefined\n        \"\"\"\n        \"\"\"\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/Event#: undefined\n        scip-typescript npm @types/node 20.9.3 `ts4.8`/`dom-events.d.ts`/global/Event#: undefined\n        scip-typescript npm @types/node 20.9.3 `ts4.8`/`dom-events.d.ts`/global/Event.: undefined\n        \"\"\"\n      }\n    } else if (e.key === '/' && e.shiftKey && e.metaKey) {\n    \"\"\"\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#key.: undefined\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#metaKey.: undefined\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#shiftKey.: undefined\n    \"\"\"\n      e.preventDefault(); #undefined\n      if (selectElement) {\n        selectElement.selectedIndex =\n          (selectElement.selectedIndex - 1 + optionCount) % optionCount;\n        selectElement.dispatchEvent(new Event('change'));\n      }\n    } else if (e.key === 'Enter') { #undefined\n      e.preventDefault(); #undefined\n      if (selectElement) {\n        selectElement.dispatchEvent(new Event('change'));\n      }\n\n      onPluginChange(\n        PluginList.find(\n          (plugin) =>\n            plugin.name === selectElement?.selectedOptions[0].innerText,\n        ) as Plugin,\n      );\n    } else {\n      onKeyDown(e);\n    }\n  };\n\n  useEffect(() => { #undefined\n    if (selectRef.current) { #undefined\n      selectRef.current.focus(); #undefined\n    }\n  }, []);\n\n  return (\n    <div className=\"flex flex-col\">\n    \"\"\"\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n    \"\"\"\n      <div className=\"mb-1 w-full rounded border border-neutral-200 bg-transparent pr-2 text-neutral-900 dark:border-neutral-600 dark:text-white\">\n      \"\"\"\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n      \"\"\"\n        <select #undefined\n          ref={selectRef} #undefined\n          className=\"w-full cursor-pointer bg-transparent p-2\" #undefined\n          placeholder={t('Select a plugin') || ''} #undefined\n          value={plugin?.id || ''} #undefined\n          onChange={(e) => { #undefined\n            onPluginChange(\n              PluginList.find(\n                (plugin) => plugin.id === e.target.value, #undefined\n              ) as Plugin,\n            );\n          }}\n          onKeyDown={(e) => { #undefined\n            handleKeyDown(e);\n          }}\n        >\n          <option #undefined\n            key=\"chatgpt\" #undefined\n            value=\"chatgpt\" #undefined\n            className=\"dark:bg-[#343541] dark:text-white\" #undefined\n          >\n            ChatGPT\n          </option> #undefined\n\n          {PluginList.map((plugin) => (\n            <option #undefined\n              key={plugin.id} #undefined\n              value={plugin.id} #undefined\n              className=\"dark:bg-[#343541] dark:text-white\" #undefined\n            >\n              {plugin.name}\n            </option> #undefined\n          ))}\n        </select> #undefined\n      </div> #undefined\n    </div>\n  );\n}","documentation":"This code defines a React component that renders a dropdown menu for selecting a plugin. The component uses the `useRef` hook to store a reference to the select element, and the `useEffect` hook to focus on the select element when the component mounts. The component also defines a `handleKeyDown` function that handles keyboard events for the select element, including navigation and selection of options."}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLSelectElement#","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLSelectElement#","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/Props#plugin.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/Props#plugin.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/Props#onPluginChange.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/Props#onPluginChange.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/Props#onKeyDown.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/Props#onKeyDown.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#metaKey.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#metaKey.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/Event#","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/Event#","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`dom-events.d.ts`/global/Event#","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`dom-events.d.ts`/global/Event#","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`dom-events.d.ts`/global/Event.","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`dom-events.d.ts`/global/Event.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#placeholder.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#placeholder.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ModelSelect.tsx`/","attributes":{"range":[0,0,66,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ModelSelect.tsx`/","content":"import { IconExternalLink } from '@tabler/icons-react';\nimport { useContext } from 'react';\n\nimport { useTranslation } from 'next-i18next';\n\nimport { OpenAIModel } from '@/types/openai';\n\nimport HomeContext from '@/pages/api/home/home.context';\n\nexport const ModelSelect = () => {\n  const { t } = useTranslation('chat');\n\n  const {\n    state: { selectedConversation, models, defaultModelId },\n    handleUpdateConversation,\n    dispatch: homeDispatch,\n  } = useContext(HomeContext);\n\n  const handleChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    selectedConversation &&\n      handleUpdateConversation(selectedConversation, {\n        key: 'model',\n        value: models.find(\n          (model) => model.id === e.target.value,\n        ) as OpenAIModel,\n      });\n  };\n\n  return (\n    <div className=\"flex flex-col\">\n      <label className=\"mb-2 text-left text-neutral-700 dark:text-neutral-400\">\n        {t('Model')}\n      </label>\n      <div className=\"w-full rounded-lg border border-neutral-200 bg-transparent pr-2 text-neutral-900 dark:border-neutral-600 dark:text-white\">\n        <select\n          className=\"w-full bg-transparent p-2\"\n          placeholder={t('Select a model') || ''}\n          value={selectedConversation?.model?.id || defaultModelId}\n          onChange={handleChange}\n        >\n          {models.map((model) => (\n            <option\n              key={model.id}\n              value={model.id}\n              className=\"dark:bg-[#343541] dark:text-white\"\n            >\n              {model.id === defaultModelId\n                ? `Default (${model.name})`\n                : model.name}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div className=\"w-full mt-3 text-left text-neutral-700 dark:text-neutral-400 flex items-center\">\n        <a\n          href=\"https://platform.openai.com/account/usage\"\n          target=\"_blank\"\n          className=\"flex items-center\"\n        >\n          <IconExternalLink size={18} className={'inline mr-1'} />\n          {t('View Account Usage')}\n        </a>\n      </div>\n    </div>\n  );\n};\n","file":"/components/Chat/ModelSelect.tsx","language":"typescript","fileHash":"a5629864225277f50390a2d1d1279701f0690f6fcac840e05b2eb9d8d0586ce2","hash":"a5629864225277f50390a2d1d1279701f0690f6fcac840e05b2eb9d8d0586ce2","processedContent":"import { IconExternalLink } from '@tabler/icons-react';\nimport { useContext } from 'react';\n\"\"\"\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/: undefined\n\"\"\"\n\nimport { useTranslation } from 'next-i18next';\n\nimport { OpenAIModel } from '@/types/openai';\n\nimport HomeContext from '@/pages/api/home/home.context';\n\nexport const ModelSelect = () => {\n  \"\"\"This code is a React component that renders a dropdown menu for selecting an OpenAI model. It uses the `useTranslation` hook to localize the text, and the `useContext` hook to access the selected conversation and models from the HomeContext. The component also includes a link to view account usage.\"\"\"\n  pass\n","documentation":"This code is a React component that renders a dropdown menu for selecting an OpenAI model. It uses the `useTranslation` hook to localize the text and the `useContext` hook to access the selected conversation and models from the HomeContext."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ModelSelect.tsx`/ModelSelect.","attributes":{"range":[9,27,65,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ModelSelect.tsx`/ModelSelect.","content":"() => {\n  const { t } = useTranslation('chat');\n\n  const {\n    state: { selectedConversation, models, defaultModelId },\n    handleUpdateConversation,\n    dispatch: homeDispatch,\n  } = useContext(HomeContext);\n\n  const handleChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    selectedConversation &&\n      handleUpdateConversation(selectedConversation, {\n        key: 'model',\n        value: models.find(\n          (model) => model.id === e.target.value,\n        ) as OpenAIModel,\n      });\n  };\n\n  return (\n    <div className=\"flex flex-col\">\n      <label className=\"mb-2 text-left text-neutral-700 dark:text-neutral-400\">\n        {t('Model')}\n      </label>\n      <div className=\"w-full rounded-lg border border-neutral-200 bg-transparent pr-2 text-neutral-900 dark:border-neutral-600 dark:text-white\">\n        <select\n          className=\"w-full bg-transparent p-2\"\n          placeholder={t('Select a model') || ''}\n          value={selectedConversation?.model?.id || defaultModelId}\n          onChange={handleChange}\n        >\n          {models.map((model) => (\n            <option\n              key={model.id}\n              value={model.id}\n              className=\"dark:bg-[#343541] dark:text-white\"\n            >\n              {model.id === defaultModelId\n                ? `Default (${model.name})`\n                : model.name}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div className=\"w-full mt-3 text-left text-neutral-700 dark:text-neutral-400 flex items-center\">\n        <a\n          href=\"https://platform.openai.com/account/usage\"\n          target=\"_blank\"\n          className=\"flex items-center\"\n        >\n          <IconExternalLink size={18} className={'inline mr-1'} />\n          {t('View Account Usage')}\n        </a>\n      </div>\n    </div>\n  );\n}","file":"/components/Chat/ModelSelect.tsx","language":"typescript","fileHash":"a5629864225277f50390a2d1d1279701f0690f6fcac840e05b2eb9d8d0586ce2","hash":"530cf6d66bfcaabd0f44cfb84d91cbf350c0d869f2a2d9fdd1e82c5c4a8491ff","processedContent":"() => {\n  const { t } = useTranslation('chat');\n\n  const {\n    state: { selectedConversation, models, defaultModelId },\n    handleUpdateConversation,\n    dispatch: homeDispatch,\n  } = useContext(HomeContext);\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().: undefined\n  \"\"\"\n\n  const handleChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ChangeEvent#: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLSelectElement#: undefined\n  \"\"\"\n    selectedConversation &&\n      handleUpdateConversation(selectedConversation, {\n        key: 'model',\n        value: models.find(\n          (model) => model.id === e.target.value, #undefined\n        ) as OpenAIModel,\n      });\n  };\n\n  return (\n    <div className=\"flex flex-col\">\n    \"\"\"\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n    \"\"\"\n      <label className=\"mb-2 text-left text-neutral-700 dark:text-neutral-400\">\n      \"\"\"\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#label.: undefined\n      \"\"\"\n        {t('Model')}\n      </label> #undefined\n      <div className=\"w-full rounded-lg border border-neutral-200 bg-transparent pr-2 text-neutral-900 dark:border-neutral-600 dark:text-white\">\n      \"\"\"\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n      \"\"\"\n        <select #undefined\n          className=\"w-full bg-transparent p-2\" #undefined\n          placeholder={t('Select a model') || ''} #undefined\n          value={selectedConversation?.model?.id || defaultModelId} #undefined\n          onChange={handleChange} #undefined\n        >\n          {models.map((model) => (\n            <option #undefined\n              key={model.id} #undefined\n              value={model.id} #undefined\n              className=\"dark:bg-[#343541] dark:text-white\" #undefined\n            >\n              {model.id === defaultModelId\n                ? `Default (${model.name})`\n                : model.name}\n            </option> #undefined\n          ))}\n        </select> #undefined\n      </div> #undefined\n      <div className=\"w-full mt-3 text-left text-neutral-700 dark:text-neutral-400 flex items-center\">\n      \"\"\"\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n      \"\"\"\n        <a #undefined\n          href=\"https://platform.openai.com/account/usage\" #undefined\n          target=\"_blank\" #undefined\n          className=\"flex items-center\" #undefined\n        >\n          <IconExternalLink size={18} className={'inline mr-1'} />\n          {t('View Account Usage')}\n        </a> #undefined\n      </div> #undefined\n    </div>\n  );\n}","documentation":"This code is a React component that renders a dropdown menu for selecting an OpenAI model. It uses the `useTranslation` hook to localize the text, and the `useContext` hook to access the selected conversation and models from the HomeContext. The component also includes a link to view account usage."}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#a.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#a.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/AnchorHTMLAttributes#href.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/AnchorHTMLAttributes#href.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/AnchorHTMLAttributes#target.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/AnchorHTMLAttributes#target.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`MemoizedChatMessage.tsx`/","attributes":{"range":[0,0,9,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`MemoizedChatMessage.tsx`/","content":"import { FC, memo } from \"react\";\nimport { ChatMessage, Props } from \"./ChatMessage\";\n\nexport const MemoizedChatMessage: FC<Props> = memo(\n    ChatMessage,\n    (prevProps, nextProps) => (\n        prevProps.message.content === nextProps.message.content\n    )\n);\n","file":"/components/Chat/MemoizedChatMessage.tsx","language":"typescript","fileHash":"120c6e9457432eb097bcd8dbbbd5f413484860a1f903be3a6b9b2d9e1b6fc760","hash":"120c6e9457432eb097bcd8dbbbd5f413484860a1f903be3a6b9b2d9e1b6fc760","processedContent":"import { FC, memo } from \"react\";\n\"\"\"\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/memo().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/: undefined\n\"\"\"\nimport { ChatMessage, Props } from \"./ChatMessage\";\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/ChatMessage.: undefined\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/Props#: This code defines a component's props, which are the values that can be passed to the component when it is rendered. The props include a message object, an index for the message, and an optional callback function for when the message is edited.\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/: The code defines a React component called \"ChatMessage\" that displays a chat message in a syntax-highlighted format. It includes a copy button to copy the code to the clipboard and a download button to save the code as a file.\n\"\"\"\n\nexport const MemoizedChatMessage: FC<Props> = memo(\n\"\"\"\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/memo().: undefined\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/Props#: This code defines a component's props, which are the values that can be passed to the component when it is rendered. The props include a message object, an index for the message, and an optional callback function for when the message is edited.\n\"\"\"\n    ChatMessage, #undefined\n    (prevProps, nextProps) => (\n        prevProps.message.content === nextProps.message.content\n    )\n);\n","documentation":"This code defines a React component called \"MemoizedChatMessage\" that memoizes the \"ChatMessage\" component, which displays a chat message in a syntax-highlighted format. The component takes in props that include a message object, an index for the message, and an optional callback function for when the message is edited."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/ChatMessage.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/ChatMessage.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/Props#","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/Props#","language":"typescript","range":[25,0,29,1],"content":"export interface Props {\n  message: Message;\n  messageIndex: number;\n  onEdit?: (editedMessage: Message) => void\n}","file":"/components/Chat/ChatMessage.tsx","fileHash":"78a7c2384c3b7dbc76e26c0146482c895e78014a9751756cc6de878b1086b926","hash":"9b3da9870933fe25fa28a20bfd89648f3cec2a59a7423f66e80b654f90c9b700","processedContent":"export interface Props {\n  message: Message;\n  messageIndex: number;\n  onEdit?: (editedMessage: Message) => void\n}","documentation":"This code defines a component's props, which are the values that can be passed to the component when it is rendered. The props include a message object, an index for the message, and an optional callback function for when the message is edited."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","language":"typescript","range":[0,0,291,0],"content":"import {\n  IconCheck,\n  IconCopy,\n  IconEdit,\n  IconRobot,\n  IconTrash,\n  IconUser,\n} from '@tabler/icons-react';\nimport { FC, memo, useContext, useEffect, useRef, useState } from 'react';\n\nimport { useTranslation } from 'next-i18next';\n\nimport { updateConversation } from '@/utils/app/conversation';\n\nimport { Message } from '@/types/chat';\n\nimport HomeContext from '@/pages/api/home/home.context';\n\nimport { CodeBlock } from '../Markdown/CodeBlock';\nimport { MemoizedReactMarkdown } from '../Markdown/MemoizedReactMarkdown';\n\nimport rehypeMathjax from 'rehype-mathjax';\nimport remarkGfm from 'remark-gfm';\nimport remarkMath from 'remark-math';\n\nexport interface Props {\n  message: Message;\n  messageIndex: number;\n  onEdit?: (editedMessage: Message) => void\n}\n\nexport const ChatMessage: FC<Props> = memo(({ message, messageIndex, onEdit }) => {\n  const { t } = useTranslation('chat');\n\n  const {\n    state: { selectedConversation, conversations, currentMessage, messageIsStreaming },\n    dispatch: homeDispatch,\n  } = useContext(HomeContext);\n\n  const [isEditing, setIsEditing] = useState<boolean>(false);\n  const [isTyping, setIsTyping] = useState<boolean>(false);\n  const [messageContent, setMessageContent] = useState(message.content);\n  const [messagedCopied, setMessageCopied] = useState(false);\n\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n  const toggleEditing = () => {\n    setIsEditing(!isEditing);\n  };\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setMessageContent(event.target.value);\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'inherit';\n      textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;\n    }\n  };\n\n  const handleEditMessage = () => {\n    if (message.content != messageContent) {\n      if (selectedConversation && onEdit) {\n        onEdit({ ...message, content: messageContent });\n      }\n    }\n    setIsEditing(false);\n  };\n\n  const handleDeleteMessage = () => {\n    if (!selectedConversation) return;\n\n    const { messages } = selectedConversation;\n    const findIndex = messages.findIndex((elm) => elm === message);\n\n    if (findIndex < 0) return;\n\n    if (\n      findIndex < messages.length - 1 &&\n      messages[findIndex + 1].role === 'assistant'\n    ) {\n      messages.splice(findIndex, 2);\n    } else {\n      messages.splice(findIndex, 1);\n    }\n    const updatedConversation = {\n      ...selectedConversation,\n      messages,\n    };\n\n    const { single, all } = updateConversation(\n      updatedConversation,\n      conversations,\n    );\n    homeDispatch({ field: 'selectedConversation', value: single });\n    homeDispatch({ field: 'conversations', value: all });\n  };\n\n  const handlePressEnter = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    if (e.key === 'Enter' && !isTyping && !e.shiftKey) {\n      e.preventDefault();\n      handleEditMessage();\n    }\n  };\n\n  const copyOnClick = () => {\n    if (!navigator.clipboard) return;\n\n    navigator.clipboard.writeText(message.content).then(() => {\n      setMessageCopied(true);\n      setTimeout(() => {\n        setMessageCopied(false);\n      }, 2000);\n    });\n  };\n\n  useEffect(() => {\n    setMessageContent(message.content);\n  }, [message.content]);\n\n\n  useEffect(() => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'inherit';\n      textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;\n    }\n  }, [isEditing]);\n\n  return (\n    <div\n      className={`group md:px-4 ${\n        message.role === 'assistant'\n          ? 'border-b border-black/10 bg-gray-50 text-gray-800 dark:border-gray-900/50 dark:bg-[#444654] dark:text-gray-100'\n          : 'border-b border-black/10 bg-white text-gray-800 dark:border-gray-900/50 dark:bg-[#343541] dark:text-gray-100'\n      }`}\n      style={{ overflowWrap: 'anywhere' }}\n    >\n      <div className=\"relative m-auto flex p-4 text-base md:max-w-2xl md:gap-6 md:py-6 lg:max-w-2xl lg:px-0 xl:max-w-3xl\">\n        <div className=\"min-w-[40px] text-right font-bold\">\n          {message.role === 'assistant' ? (\n            <IconRobot size={30} />\n          ) : (\n            <IconUser size={30} />\n          )}\n        </div>\n\n        <div className=\"prose mt-[-2px] w-full dark:prose-invert\">\n          {message.role === 'user' ? (\n            <div className=\"flex w-full\">\n              {isEditing ? (\n                <div className=\"flex w-full flex-col\">\n                  <textarea\n                    ref={textareaRef}\n                    className=\"w-full resize-none whitespace-pre-wrap border-none dark:bg-[#343541]\"\n                    value={messageContent}\n                    onChange={handleInputChange}\n                    onKeyDown={handlePressEnter}\n                    onCompositionStart={() => setIsTyping(true)}\n                    onCompositionEnd={() => setIsTyping(false)}\n                    style={{\n                      fontFamily: 'inherit',\n                      fontSize: 'inherit',\n                      lineHeight: 'inherit',\n                      padding: '0',\n                      margin: '0',\n                      overflow: 'hidden',\n                    }}\n                  />\n\n                  <div className=\"mt-10 flex justify-center space-x-4\">\n                    <button\n                      className=\"h-[40px] rounded-md bg-blue-500 px-4 py-1 text-sm font-medium text-white enabled:hover:bg-blue-600 disabled:opacity-50\"\n                      onClick={handleEditMessage}\n                      disabled={messageContent.trim().length <= 0}\n                    >\n                      {t('Save & Submit')}\n                    </button>\n                    <button\n                      className=\"h-[40px] rounded-md border border-neutral-300 px-4 py-1 text-sm font-medium text-neutral-700 hover:bg-neutral-100 dark:border-neutral-700 dark:text-neutral-300 dark:hover:bg-neutral-800\"\n                      onClick={() => {\n                        setMessageContent(message.content);\n                        setIsEditing(false);\n                      }}\n                    >\n                      {t('Cancel')}\n                    </button>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"prose whitespace-pre-wrap dark:prose-invert flex-1\">\n                  {message.content}\n                </div>\n              )}\n\n              {!isEditing && (\n                <div className=\"md:-mr-8 ml-1 md:ml-0 flex flex-col md:flex-row gap-4 md:gap-1 items-center md:items-start justify-end md:justify-start\">\n                  <button\n                    className=\"invisible group-hover:visible focus:visible text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300\"\n                    onClick={toggleEditing}\n                  >\n                    <IconEdit size={20} />\n                  </button>\n                  <button\n                    className=\"invisible group-hover:visible focus:visible text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300\"\n                    onClick={handleDeleteMessage}\n                  >\n                    <IconTrash size={20} />\n                  </button>\n                </div>\n              )}\n            </div>\n          ) : (\n            <div className=\"flex flex-row\">\n              <MemoizedReactMarkdown\n                className=\"prose dark:prose-invert flex-1\"\n                remarkPlugins={[remarkGfm, remarkMath]}\n                rehypePlugins={[rehypeMathjax]}\n                components={{\n                  code({ node, inline, className, children, ...props }) {\n                    if (children.length) {\n                      if (children[0] == '▍') {\n                        return <span className=\"animate-pulse cursor-default mt-1\">▍</span>\n                      }\n\n                      children[0] = (children[0] as string).replace(\"`▍`\", \"▍\")\n                    }\n\n                    const match = /language-(\\w+)/.exec(className || '');\n\n                    return !inline ? (\n                      <CodeBlock\n                        key={Math.random()}\n                        language={(match && match[1]) || ''}\n                        value={String(children).replace(/\\n$/, '')}\n                        {...props}\n                      />\n                    ) : (\n                      <code className={className} {...props}>\n                        {children}\n                      </code>\n                    );\n                  },\n                  table({ children }) {\n                    return (\n                      <table className=\"border-collapse border border-black px-3 py-1 dark:border-white\">\n                        {children}\n                      </table>\n                    );\n                  },\n                  th({ children }) {\n                    return (\n                      <th className=\"break-words border border-black bg-gray-500 px-3 py-1 text-white dark:border-white\">\n                        {children}\n                      </th>\n                    );\n                  },\n                  td({ children }) {\n                    return (\n                      <td className=\"break-words border border-black px-3 py-1 dark:border-white\">\n                        {children}\n                      </td>\n                    );\n                  },\n                }}\n              >\n                {`${message.content}${\n                  messageIsStreaming && messageIndex == (selectedConversation?.messages.length ?? 0) - 1 ? '`▍`' : ''\n                }`}\n              </MemoizedReactMarkdown>\n\n              <div className=\"md:-mr-8 ml-1 md:ml-0 flex flex-col md:flex-row gap-4 md:gap-1 items-center md:items-start justify-end md:justify-start\">\n                {messagedCopied ? (\n                  <IconCheck\n                    size={20}\n                    className=\"text-green-500 dark:text-green-400\"\n                  />\n                ) : (\n                  <button\n                    className=\"invisible group-hover:visible focus:visible text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300\"\n                    onClick={copyOnClick}\n                  >\n                    <IconCopy size={20} />\n                  </button>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n});\nChatMessage.displayName = 'ChatMessage';\n","file":"/components/Chat/ChatMessage.tsx","fileHash":"78a7c2384c3b7dbc76e26c0146482c895e78014a9751756cc6de878b1086b926","hash":"78a7c2384c3b7dbc76e26c0146482c895e78014a9751756cc6de878b1086b926","processedContent":"import {\n  IconCheck,\n  IconCopy,\n  IconEdit,\n  IconRobot,\n  IconTrash,\n  IconUser,\n} from '@tabler/icons-react';\nimport { FC, memo, useContext, useEffect, useRef, useState } from 'react';\n\"\"\"\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/memo().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/: undefined\n\"\"\"\n\nimport { useTranslation } from 'next-i18next';\n\nimport { updateConversation } from '@/utils/app/conversation';\n\nimport { Message } from '@/types/chat';\n\nimport HomeContext from '@/pages/api/home/home.context';\n\nimport { CodeBlock } from '../Markdown/CodeBlock';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/CodeBlock.: undefined\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/: The code defines a React component called \"CodeBlock\" that displays code in a syntax-highlighted format. It takes two props: \"language\" and \"value\", which represent the programming language and the value of the variable, respectively. The component includes a copy button to copy the code to the clipboard and a download button to save the code as a file.\n\"\"\"\nimport { MemoizedReactMarkdown } from '../Markdown/MemoizedReactMarkdown';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`MemoizedReactMarkdown.tsx`/MemoizedReactMarkdown.: undefined\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`MemoizedReactMarkdown.tsx`/: This code defines a memoized version of the ReactMarkdown component, which is used to render Markdown text in a React application. The memoization helps improve performance by avoiding unnecessary re-renders of the component when its props remain unchanged.\n\"\"\"\n\nimport rehypeMathjax from 'rehype-mathjax';\nimport remarkGfm from 'remark-gfm';\nimport remarkMath from 'remark-math';\n\nexport interface Props {\n  \"\"\"This code defines a component's props, which are the values that can be passed to the component when it is rendered. The props include a message object, an index for the message, and an optional callback function for when the message is edited.\"\"\"\n  pass\n\nexport const ChatMessage: FC<Props> = memo(({ message, messageIndex, onEdit }) => {\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/Props#: This code defines a component's props, which are the values that can be passed to the component when it is rendered. The props include a message object, an index for the message, and an optional callback function for when the message is edited.\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/memo().: undefined\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/Props#message.: undefined\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/Props#messageIndex.: undefined\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/Props#onEdit.: undefined\n\"\"\"\n  const { t } = useTranslation('chat');\n\n  const {\n    state: { selectedConversation, conversations, currentMessage, messageIsStreaming },\n    dispatch: homeDispatch,\n  } = useContext(HomeContext);\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().: undefined\n  \"\"\"\n\n  const [isEditing, setIsEditing] = useState<boolean>(false); #undefined\n  const [isTyping, setIsTyping] = useState<boolean>(false); #undefined\n  const [messageContent, setMessageContent] = useState(message.content); #undefined\n  const [messagedCopied, setMessageCopied] = useState(false); #undefined\n\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLTextAreaElement#: undefined\n  \"\"\"\n\n  const toggleEditing = () => {\n    setIsEditing(!isEditing);\n  };\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLTextAreaElement#: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ChangeEvent#: undefined\n  \"\"\"\n    setMessageContent(event.target.value); #undefined\n    if (textareaRef.current) { #undefined\n      textareaRef.current.style.height = 'inherit'; #undefined\n      textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;\n      \"\"\"\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.: undefined\n      \"\"\"\n      \"\"\"\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.: undefined\n      \"\"\"\n    }\n  };\n\n  const handleEditMessage = () => {\n    if (message.content != messageContent) {\n      if (selectedConversation && onEdit) {\n        onEdit({ ...message, content: messageContent });\n      }\n    }\n    setIsEditing(false);\n  };\n\n  const handleDeleteMessage = () => {\n    if (!selectedConversation) return;\n\n    const { messages } = selectedConversation;\n    const findIndex = messages.findIndex((elm) => elm === message);\n\n    if (findIndex < 0) return;\n\n    if (\n      findIndex < messages.length - 1 &&\n      messages[findIndex + 1].role === 'assistant'\n    ) {\n      messages.splice(findIndex, 2);\n    } else {\n      messages.splice(findIndex, 1);\n    }\n    const updatedConversation = {\n      ...selectedConversation,\n      messages,\n    };\n\n    const { single, all } = updateConversation(\n      updatedConversation,\n      conversations,\n    );\n    homeDispatch({ field: 'selectedConversation', value: single });\n    homeDispatch({ field: 'conversations', value: all });\n  };\n\n  const handlePressEnter = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLTextAreaElement#: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#: undefined\n  \"\"\"\n    if (e.key === 'Enter' && !isTyping && !e.shiftKey) {\n    \"\"\"\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#key.: undefined\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#shiftKey.: undefined\n    \"\"\"\n      e.preventDefault(); #undefined\n      handleEditMessage();\n    }\n  };\n\n  const copyOnClick = () => {\n    if (!navigator.clipboard) return;\n\n    navigator.clipboard.writeText(message.content).then(() => {\n      setMessageCopied(true);\n      setTimeout(() => {\n      \"\"\"\n      scip-typescript npm @types/node 20.9.3 `ts4.8`/`timers.d.ts`/`\"timers\"`/global/setTimeout().: undefined\n      scip-typescript npm @types/node 20.9.3 `ts4.8`/`timers.d.ts`/`\"timers\"`/global/setTimeout/: undefined\n      \"\"\"\n        setMessageCopied(false);\n      }, 2000);\n    });\n  };\n\n  useEffect(() => { #undefined\n    setMessageContent(message.content);\n  }, [message.content]);\n\n\n  useEffect(() => { #undefined\n    if (textareaRef.current) { #undefined\n      textareaRef.current.style.height = 'inherit'; #undefined\n      textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;\n    }\n  }, [isEditing]);\n\n  return (\n    <div #undefined\n      className={`group md:px-4 ${ #undefined\n        message.role === 'assistant'\n          ? 'border-b border-black/10 bg-gray-50 text-gray-800 dark:border-gray-900/50 dark:bg-[#444654] dark:text-gray-100'\n          : 'border-b border-black/10 bg-white text-gray-800 dark:border-gray-900/50 dark:bg-[#343541] dark:text-gray-100'\n      }`}\n      style={{ overflowWrap: 'anywhere' }} #undefined\n    >\n      <div className=\"relative m-auto flex p-4 text-base md:max-w-2xl md:gap-6 md:py-6 lg:max-w-2xl lg:px-0 xl:max-w-3xl\">\n      \"\"\"\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n      \"\"\"\n        <div className=\"min-w-[40px] text-right font-bold\">\n        \"\"\"\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n        \"\"\"\n          {message.role === 'assistant' ? (\n            <IconRobot size={30} />\n          ) : (\n            <IconUser size={30} />\n          )}\n        </div> #undefined\n\n        <div className=\"prose mt-[-2px] w-full dark:prose-invert\">\n        \"\"\"\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n        \"\"\"\n          {message.role === 'user' ? (\n            <div className=\"flex w-full\">\n            \"\"\"\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n            \"\"\"\n              {isEditing ? (\n                <div className=\"flex w-full flex-col\">\n                \"\"\"\n                scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n                scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n                \"\"\"\n                  <textarea #undefined\n                    ref={textareaRef} #undefined\n                    className=\"w-full resize-none whitespace-pre-wrap border-none dark:bg-[#343541]\" #undefined\n                    value={messageContent} #undefined\n                    onChange={handleInputChange} #undefined\n                    onKeyDown={handlePressEnter} #undefined\n                    onCompositionStart={() => setIsTyping(true)} #undefined\n                    onCompositionEnd={() => setIsTyping(false)} #undefined\n                    style={{ #undefined\n                      fontFamily: 'inherit',\n                      fontSize: 'inherit',\n                      lineHeight: 'inherit',\n                      padding: '0',\n                      margin: '0',\n                      overflow: 'hidden',\n                    }}\n                  />\n\n                  <div className=\"mt-10 flex justify-center space-x-4\">\n                  \"\"\"\n                  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n                  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n                  \"\"\"\n                    <button #undefined\n                      className=\"h-[40px] rounded-md bg-blue-500 px-4 py-1 text-sm font-medium text-white enabled:hover:bg-blue-600 disabled:opacity-50\" #undefined\n                      onClick={handleEditMessage} #undefined\n                      disabled={messageContent.trim().length <= 0} #undefined\n                    >\n                      {t('Save & Submit')}\n                    </button> #undefined\n                    <button #undefined\n                      className=\"h-[40px] rounded-md border border-neutral-300 px-4 py-1 text-sm font-medium text-neutral-700 hover:bg-neutral-100 dark:border-neutral-700 dark:text-neutral-300 dark:hover:bg-neutral-800\" #undefined\n                      onClick={() => { #undefined\n                        setMessageContent(message.content);\n                        setIsEditing(false);\n                      }}\n                    >\n                      {t('Cancel')}\n                    </button> #undefined\n                  </div> #undefined\n                </div> #undefined\n              ) : (\n                <div className=\"prose whitespace-pre-wrap dark:prose-invert flex-1\">\n                \"\"\"\n                scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n                scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n                \"\"\"\n                  {message.content}\n                </div> #undefined\n              )}\n\n              {!isEditing && (\n                <div className=\"md:-mr-8 ml-1 md:ml-0 flex flex-col md:flex-row gap-4 md:gap-1 items-center md:items-start justify-end md:justify-start\">\n                \"\"\"\n                scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n                scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n                \"\"\"\n              \"\"\"\n              scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n              scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n              \"\"\"\n                  <button #undefined\n                    className=\"invisible group-hover:visible focus:visible text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300\" #undefined\n                    onClick={toggleEditing} #undefined\n                  >\n                    <IconEdit size={20} />\n                  </button> #undefined\n                  <button\n                    className=\"invisible group-hover:visible focus:visible text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300\" #undefined\n                    onClick={handleDeleteMessage} #undefined\n                  >\n                    <IconTrash size={20} />\n                  </button>\n                </div> #undefined\n              )}\n            </div> #undefined\n          ) : (\n            <div className=\"flex flex-row\">\n            \"\"\"\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n            \"\"\"\n              <MemoizedReactMarkdown #undefined\n                className=\"prose dark:prose-invert flex-1\"\n                remarkPlugins={[remarkGfm, remarkMath]}\n                rehypePlugins={[rehypeMathjax]}\n                components={{\n                  code({ node, inline, className, children, ...props }) {\n                    if (children.length) {\n                      if (children[0] == '▍') {\n                        return <span className=\"animate-pulse cursor-default mt-1\">▍</span>\n                        \"\"\"\n                        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n                        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#span.: undefined\n                        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#span.: undefined\n                        \"\"\"\n                      }\n\n                      children[0] = (children[0] as string).replace(\"`▍`\", \"▍\")\n                    }\n\n                    const match = /language-(\\w+)/.exec(className || '');\n\n                    return !inline ? (\n                      <CodeBlock #undefined\n                        key={Math.random()}\n                        language={(match && match[1]) || ''} #undefined\n                        value={String(children).replace(/\\n$/, '')} #undefined\n                        {...props}\n                      />\n                    ) : (\n                      <code className={className} {...props}>\n                      \"\"\"\n                      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n                      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#code.: undefined\n                      \"\"\"\n                        {children}\n                      </code> #undefined\n                    );\n                  },\n                  table({ children }) {\n                    return (\n                      <table className=\"border-collapse border border-black px-3 py-1 dark:border-white\">\n                      \"\"\"\n                      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n                      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#table.: undefined\n                      \"\"\"\n                        {children}\n                      </table> #undefined\n                    );\n                  },\n                  th({ children }) {\n                    return (\n                      <th className=\"break-words border border-black bg-gray-500 px-3 py-1 text-white dark:border-white\">\n                      \"\"\"\n                      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n                      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#th.: undefined\n                      \"\"\"\n                        {children}\n                      </th> #undefined\n                    );\n                  },\n                  td({ children }) {\n                    return (\n                      <td className=\"break-words border border-black px-3 py-1 dark:border-white\">\n                      \"\"\"\n                      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n                      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#td.: undefined\n                      \"\"\"\n                        {children}\n                      </td> #undefined\n                    );\n                  },\n                }}\n              >\n                {`${message.content}${\n                  messageIsStreaming && messageIndex == (selectedConversation?.messages.length ?? 0) - 1 ? '`▍`' : ''\n                }`}\n              </MemoizedReactMarkdown> #undefined\n\n              <div className=\"md:-mr-8 ml-1 md:ml-0 flex flex-col md:flex-row gap-4 md:gap-1 items-center md:items-start justify-end md:justify-start\">\n                {messagedCopied ? (\n                  <IconCheck\n                    size={20}\n                    className=\"text-green-500 dark:text-green-400\"\n                  />\n                ) : (\n                  <button\n                    className=\"invisible group-hover:visible focus:visible text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300\" #undefined\n                    onClick={copyOnClick} #undefined\n                  >\n                    <IconCopy size={20} />\n                  </button>\n                )}\n              </div> #undefined\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n});\nChatMessage.displayName = 'ChatMessage';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/ChatMessage.: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FunctionComponent#displayName.: undefined\n\"\"\"\n","documentation":"The code defines a React component called \"ChatMessage\" that displays a chat message in a syntax-highlighted format. It includes a copy button to copy the code to the clipboard and a download button to save the code as a file."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ErrorMessageDiv.tsx`/","attributes":{"range":[0,0,28,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ErrorMessageDiv.tsx`/","content":"import { IconCircleX } from '@tabler/icons-react';\nimport { FC } from 'react';\n\nimport { ErrorMessage } from '@/types/error';\n\ninterface Props {\n  error: ErrorMessage;\n}\n\nexport const ErrorMessageDiv: FC<Props> = ({ error }) => {\n  return (\n    <div className=\"mx-6 flex h-full flex-col items-center justify-center text-red-500\">\n      <div className=\"mb-5\">\n        <IconCircleX size={36} />\n      </div>\n      <div className=\"mb-3 text-2xl font-medium\">{error.title}</div>\n      {error.messageLines.map((line, index) => (\n        <div key={index} className=\"text-center\">\n          {' '}\n          {line}{' '}\n        </div>\n      ))}\n      <div className=\"mt-4 text-xs opacity-50 dark:text-red-400\">\n        {error.code ? <i>Code: {error.code}</i> : ''}\n      </div>\n    </div>\n  );\n};\n","file":"/components/Chat/ErrorMessageDiv.tsx","language":"typescript","fileHash":"4283888f3aef8996b60c775073b753320d6d8b4d683bf407c37b3ffcccee7722","hash":"4283888f3aef8996b60c775073b753320d6d8b4d683bf407c37b3ffcccee7722","processedContent":"import { IconCircleX } from '@tabler/icons-react';\nimport { FC } from 'react';\n\"\"\"\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/: undefined\n\"\"\"\n\nimport { ErrorMessage } from '@/types/error';\n\ninterface Props {\n  \"\"\"This code defines a component's properties, including an error message.\"\"\"\n  pass\n\nexport const ErrorMessageDiv: FC<Props> = ({ error }) => {\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ErrorMessageDiv.tsx`/Props#: This code defines a component's properties, including an error message.\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#: undefined\n\"\"\"\n  \"\"\"This code defines a function that takes an error object as an argument and returns a React component that displays the error message, including the error title, description, and code (if available). The component uses CSS classes to style the layout and text.\"\"\"\n  pass\n","documentation":"This code defines a React component called ErrorMessageDiv that takes an error object as a prop and displays the error message, including the title, description, and code (if available). The component uses CSS classes to style the layout and text."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ErrorMessageDiv.tsx`/Props#","attributes":{"range":[5,0,7,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ErrorMessageDiv.tsx`/Props#","content":"interface Props {\n  error: ErrorMessage;\n}","file":"/components/Chat/ErrorMessageDiv.tsx","language":"typescript","fileHash":"4283888f3aef8996b60c775073b753320d6d8b4d683bf407c37b3ffcccee7722","hash":"b475f2ef8507fb88f03805abad98a28eb0c7b590156d04b40f998820d07ff14b","processedContent":"interface Props {\n  error: ErrorMessage;\n}","documentation":"This code defines a component's properties, including an error message."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ErrorMessageDiv.tsx`/ErrorMessageDiv.","attributes":{"range":[9,42,27,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ErrorMessageDiv.tsx`/ErrorMessageDiv.","content":"({ error }) => {\n  return (\n    <div className=\"mx-6 flex h-full flex-col items-center justify-center text-red-500\">\n      <div className=\"mb-5\">\n        <IconCircleX size={36} />\n      </div>\n      <div className=\"mb-3 text-2xl font-medium\">{error.title}</div>\n      {error.messageLines.map((line, index) => (\n        <div key={index} className=\"text-center\">\n          {' '}\n          {line}{' '}\n        </div>\n      ))}\n      <div className=\"mt-4 text-xs opacity-50 dark:text-red-400\">\n        {error.code ? <i>Code: {error.code}</i> : ''}\n      </div>\n    </div>\n  );\n}","file":"/components/Chat/ErrorMessageDiv.tsx","language":"typescript","fileHash":"4283888f3aef8996b60c775073b753320d6d8b4d683bf407c37b3ffcccee7722","hash":"5a80593d95ca7778e1a1e29a833e66646739109de9c9098c869b3a3e7f0d5922","processedContent":"({ error }) => {\n  return (\n    <div className=\"mx-6 flex h-full flex-col items-center justify-center text-red-500\">\n    \"\"\"\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n    \"\"\"\n      <div className=\"mb-5\">\n      \"\"\"\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n      \"\"\"\n        <IconCircleX size={36} />\n      </div> #undefined\n      <div className=\"mb-3 text-2xl font-medium\">{error.title}</div>\n      \"\"\"\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n      \"\"\"\n      {error.messageLines.map((line, index) => (\n        <div key={index} className=\"text-center\">\n        \"\"\"\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/Attributes#key.: undefined\n        \"\"\"\n          {' '}\n          {line}{' '}\n        </div> #undefined\n      ))}\n      <div className=\"mt-4 text-xs opacity-50 dark:text-red-400\">\n      \"\"\"\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n      \"\"\"\n        {error.code ? <i>Code: {error.code}</i> : ''}\n        \"\"\"\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#i.: undefined\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#i.: undefined\n        \"\"\"\n      </div> #undefined\n    </div>\n  );\n}","documentation":"This code defines a function that takes an error object as an argument and returns a React component that displays the error message, including the error title, description, and code (if available). The component uses CSS classes to style the layout and text."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ErrorMessageDiv.tsx`/Props#error.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ErrorMessageDiv.tsx`/Props#error.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#i.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#i.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`MemoizedReactMarkdown.tsx`/MemoizedReactMarkdown.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`MemoizedReactMarkdown.tsx`/MemoizedReactMarkdown.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/Props#message.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/Props#message.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/Props#messageIndex.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/Props#messageIndex.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/Props#onEdit.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/Props#onEdit.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onCompositionStart.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onCompositionStart.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onCompositionEnd.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onCompositionEnd.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ButtonHTMLAttributes#disabled.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ButtonHTMLAttributes#disabled.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#code.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#code.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#table.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#table.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#th.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#th.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#td.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#td.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatLoader.tsx`/","attributes":{"range":[0,0,20,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatLoader.tsx`/","content":"import { IconRobot } from '@tabler/icons-react';\nimport { FC } from 'react';\n\ninterface Props { }\n\nexport const ChatLoader: FC<Props> = () => {\n  return (\n    <div\n      className=\"group border-b border-black/10 bg-gray-50 text-gray-800 dark:border-gray-900/50 dark:bg-[#444654] dark:text-gray-100\"\n      style={{ overflowWrap: 'anywhere' }}\n    >\n      <div className=\"m-auto flex gap-4 p-4 text-base md:max-w-2xl md:gap-6 md:py-6 lg:max-w-2xl lg:px-0 xl:max-w-3xl\">\n        <div className=\"min-w-[40px] items-end\">\n          <IconRobot size={30} />\n        </div>\n        <span className=\"animate-pulse cursor-default mt-1\">▍</span>\n      </div>\n    </div>\n  );\n};\n","file":"/components/Chat/ChatLoader.tsx","language":"typescript","fileHash":"5df13432e040d438c3a06f680c723eaa0e9c7410ddf8c72ab794ef15f5cb31c9","hash":"5df13432e040d438c3a06f680c723eaa0e9c7410ddf8c72ab794ef15f5cb31c9","processedContent":"import { IconRobot } from '@tabler/icons-react';\nimport { FC } from 'react';\n\"\"\"\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/: undefined\n\"\"\"\n\n\"\"\"The code defines an interface called \"Props\" that is used to define the properties of a component in a React application.\"\"\"\npass\ninterface Props { }\n\nexport const ChatLoader: FC<Props> = () => {\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatLoader.tsx`/Props#: The code defines an interface called \"Props\" that is used to define the properties of a component in a React application.\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#: undefined\n\"\"\"\n  \"\"\"This code defines a React component that renders a div element with a robot icon and a loading animation. The component uses TypeScript to define the types of its props and state, and it imports the necessary dependencies from the `@types/react` package.\"\"\"\n  pass\n","documentation":"The code defines a React component called \"ChatLoader\" that renders a div element with a robot icon and a loading animation. It uses TypeScript to define the types of its props and state, and it imports the necessary dependencies from the `@types/react` package."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatLoader.tsx`/Props#","attributes":{"range":[3,0,3,19],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatLoader.tsx`/Props#","content":"interface Props { }","file":"/components/Chat/ChatLoader.tsx","language":"typescript","fileHash":"5df13432e040d438c3a06f680c723eaa0e9c7410ddf8c72ab794ef15f5cb31c9","hash":"ca22521e73964743ff410b619319619e278f8aa6d9fe30eec42bb79466e67c75","processedContent":"interface Props { }","documentation":"The code defines an interface called \"Props\" that is used to define the properties of a component in a React application."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatLoader.tsx`/ChatLoader.","attributes":{"range":[5,37,19,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatLoader.tsx`/ChatLoader.","content":"() => {\n  return (\n    <div\n      className=\"group border-b border-black/10 bg-gray-50 text-gray-800 dark:border-gray-900/50 dark:bg-[#444654] dark:text-gray-100\"\n      style={{ overflowWrap: 'anywhere' }}\n    >\n      <div className=\"m-auto flex gap-4 p-4 text-base md:max-w-2xl md:gap-6 md:py-6 lg:max-w-2xl lg:px-0 xl:max-w-3xl\">\n        <div className=\"min-w-[40px] items-end\">\n          <IconRobot size={30} />\n        </div>\n        <span className=\"animate-pulse cursor-default mt-1\">▍</span>\n      </div>\n    </div>\n  );\n}","file":"/components/Chat/ChatLoader.tsx","language":"typescript","fileHash":"5df13432e040d438c3a06f680c723eaa0e9c7410ddf8c72ab794ef15f5cb31c9","hash":"f7ce19517f11547164ef4ef15ccff29f5f5e0c25cb6fe412546ff4dfca645b07","processedContent":"() => {\n  return (\n    <div #undefined\n      className=\"group border-b border-black/10 bg-gray-50 text-gray-800 dark:border-gray-900/50 dark:bg-[#444654] dark:text-gray-100\" #undefined\n      style={{ overflowWrap: 'anywhere' }} #undefined\n    >\n      <div className=\"m-auto flex gap-4 p-4 text-base md:max-w-2xl md:gap-6 md:py-6 lg:max-w-2xl lg:px-0 xl:max-w-3xl\">\n      \"\"\"\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n      \"\"\"\n        <div className=\"min-w-[40px] items-end\">\n        \"\"\"\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n        \"\"\"\n          <IconRobot size={30} />\n        </div> #undefined\n        <span className=\"animate-pulse cursor-default mt-1\">▍</span>\n        \"\"\"\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#span.: undefined\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#span.: undefined\n        \"\"\"\n      </div> #undefined\n    </div>\n  );\n}","documentation":"This code defines a React component that renders a div element with a robot icon and a loading animation. The component uses TypeScript to define the types of its props and state, and it imports the necessary dependencies from the `@types/react` package."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/","attributes":{"range":[0,0,398,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/","content":"import {\n  IconArrowDown,\n  IconBolt,\n  IconBrandGoogle,\n  IconPlayerStop,\n  IconRepeat,\n  IconSend,\n} from '@tabler/icons-react';\nimport {\n  KeyboardEvent,\n  MutableRefObject,\n  useCallback,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\n\nimport { useTranslation } from 'next-i18next';\n\nimport { Message } from '@/types/chat';\nimport { Plugin } from '@/types/plugin';\nimport { Prompt } from '@/types/prompt';\n\nimport HomeContext from '@/pages/api/home/home.context';\n\nimport { PluginSelect } from './PluginSelect';\nimport { PromptList } from './PromptList';\nimport { VariableModal } from './VariableModal';\n\ninterface Props {\n  onSend: (message: Message, plugin: Plugin | null) => void;\n  onRegenerate: () => void;\n  onScrollDownClick: () => void;\n  stopConversationRef: MutableRefObject<boolean>;\n  textareaRef: MutableRefObject<HTMLTextAreaElement | null>;\n  showScrollDownButton: boolean;\n}\n\nexport const ChatInput = ({\n  onSend,\n  onRegenerate,\n  onScrollDownClick,\n  stopConversationRef,\n  textareaRef,\n  showScrollDownButton,\n}: Props) => {\n  const { t } = useTranslation('chat');\n\n  const {\n    state: { selectedConversation, messageIsStreaming, prompts },\n\n    dispatch: homeDispatch,\n  } = useContext(HomeContext);\n\n  const [content, setContent] = useState<string>();\n  const [isTyping, setIsTyping] = useState<boolean>(false);\n  const [showPromptList, setShowPromptList] = useState(false);\n  const [activePromptIndex, setActivePromptIndex] = useState(0);\n  const [promptInputValue, setPromptInputValue] = useState('');\n  const [variables, setVariables] = useState<string[]>([]);\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [showPluginSelect, setShowPluginSelect] = useState(false);\n  const [plugin, setPlugin] = useState<Plugin | null>(null);\n\n  const promptListRef = useRef<HTMLUListElement | null>(null);\n\n  const filteredPrompts = prompts.filter((prompt) =>\n    prompt.name.toLowerCase().includes(promptInputValue.toLowerCase()),\n  );\n\n  const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const value = e.target.value;\n    const maxLength = selectedConversation?.model.maxLength;\n\n    if (maxLength && value.length > maxLength) {\n      alert(\n        t(\n          `Message limit is {{maxLength}} characters. You have entered {{valueLength}} characters.`,\n          { maxLength, valueLength: value.length },\n        ),\n      );\n      return;\n    }\n\n    setContent(value);\n    updatePromptListVisibility(value);\n  };\n\n  const handleSend = () => {\n    if (messageIsStreaming) {\n      return;\n    }\n\n    if (!content) {\n      alert(t('Please enter a message'));\n      return;\n    }\n\n    onSend({ role: 'user', content }, plugin);\n    setContent('');\n    setPlugin(null);\n\n    if (window.innerWidth < 640 && textareaRef && textareaRef.current) {\n      textareaRef.current.blur();\n    }\n  };\n\n  const handleStopConversation = () => {\n    stopConversationRef.current = true;\n    setTimeout(() => {\n      stopConversationRef.current = false;\n    }, 1000);\n  };\n\n  const isMobile = () => {\n    const userAgent =\n      typeof window.navigator === 'undefined' ? '' : navigator.userAgent;\n    const mobileRegex =\n      /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|Mobile|mobile|CriOS/i;\n    return mobileRegex.test(userAgent);\n  };\n\n  const handleInitModal = () => {\n    const selectedPrompt = filteredPrompts[activePromptIndex];\n    if (selectedPrompt) {\n      setContent((prevContent) => {\n        const newContent = prevContent?.replace(\n          /\\/\\w*$/,\n          selectedPrompt.content,\n        );\n        return newContent;\n      });\n      handlePromptSelect(selectedPrompt);\n    }\n    setShowPromptList(false);\n  };\n\n  const handleKeyDown = (e: KeyboardEvent<HTMLTextAreaElement>) => {\n    if (showPromptList) {\n      if (e.key === 'ArrowDown') {\n        e.preventDefault();\n        setActivePromptIndex((prevIndex) =>\n          prevIndex < prompts.length - 1 ? prevIndex + 1 : prevIndex,\n        );\n      } else if (e.key === 'ArrowUp') {\n        e.preventDefault();\n        setActivePromptIndex((prevIndex) =>\n          prevIndex > 0 ? prevIndex - 1 : prevIndex,\n        );\n      } else if (e.key === 'Tab') {\n        e.preventDefault();\n        setActivePromptIndex((prevIndex) =>\n          prevIndex < prompts.length - 1 ? prevIndex + 1 : 0,\n        );\n      } else if (e.key === 'Enter') {\n        e.preventDefault();\n        handleInitModal();\n      } else if (e.key === 'Escape') {\n        e.preventDefault();\n        setShowPromptList(false);\n      } else {\n        setActivePromptIndex(0);\n      }\n    } else if (e.key === 'Enter' && !isTyping && !isMobile() && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    } else if (e.key === '/' && e.metaKey) {\n      e.preventDefault();\n      setShowPluginSelect(!showPluginSelect);\n    }\n  };\n\n  const parseVariables = (content: string) => {\n    const regex = /{{(.*?)}}/g;\n    const foundVariables = [];\n    let match;\n\n    while ((match = regex.exec(content)) !== null) {\n      foundVariables.push(match[1]);\n    }\n\n    return foundVariables;\n  };\n\n  const updatePromptListVisibility = useCallback((text: string) => {\n    const match = text.match(/\\/\\w*$/);\n\n    if (match) {\n      setShowPromptList(true);\n      setPromptInputValue(match[0].slice(1));\n    } else {\n      setShowPromptList(false);\n      setPromptInputValue('');\n    }\n  }, []);\n\n  const handlePromptSelect = (prompt: Prompt) => {\n    const parsedVariables = parseVariables(prompt.content);\n    setVariables(parsedVariables);\n\n    if (parsedVariables.length > 0) {\n      setIsModalVisible(true);\n    } else {\n      setContent((prevContent) => {\n        const updatedContent = prevContent?.replace(/\\/\\w*$/, prompt.content);\n        return updatedContent;\n      });\n      updatePromptListVisibility(prompt.content);\n    }\n  };\n\n  const handleSubmit = (updatedVariables: string[]) => {\n    const newContent = content?.replace(/{{(.*?)}}/g, (match, variable) => {\n      const index = variables.indexOf(variable);\n      return updatedVariables[index];\n    });\n\n    setContent(newContent);\n\n    if (textareaRef && textareaRef.current) {\n      textareaRef.current.focus();\n    }\n  };\n\n  useEffect(() => {\n    if (promptListRef.current) {\n      promptListRef.current.scrollTop = activePromptIndex * 30;\n    }\n  }, [activePromptIndex]);\n\n  useEffect(() => {\n    if (textareaRef && textareaRef.current) {\n      textareaRef.current.style.height = 'inherit';\n      textareaRef.current.style.height = `${textareaRef.current?.scrollHeight}px`;\n      textareaRef.current.style.overflow = `${\n        textareaRef?.current?.scrollHeight > 400 ? 'auto' : 'hidden'\n      }`;\n    }\n  }, [content]);\n\n  useEffect(() => {\n    const handleOutsideClick = (e: MouseEvent) => {\n      if (\n        promptListRef.current &&\n        !promptListRef.current.contains(e.target as Node)\n      ) {\n        setShowPromptList(false);\n      }\n    };\n\n    window.addEventListener('click', handleOutsideClick);\n\n    return () => {\n      window.removeEventListener('click', handleOutsideClick);\n    };\n  }, []);\n\n  return (\n    <div className=\"absolute bottom-0 left-0 w-full border-transparent bg-gradient-to-b from-transparent via-white to-white pt-6 dark:border-white/20 dark:via-[#343541] dark:to-[#343541] md:pt-2\">\n      <div className=\"stretch mx-2 mt-4 flex flex-row gap-3 last:mb-2 md:mx-4 md:mt-[52px] md:last:mb-6 lg:mx-auto lg:max-w-3xl\">\n        {messageIsStreaming && (\n          <button\n            className=\"absolute top-0 left-0 right-0 mx-auto mb-3 flex w-fit items-center gap-3 rounded border border-neutral-200 bg-white py-2 px-4 text-black hover:opacity-50 dark:border-neutral-600 dark:bg-[#343541] dark:text-white md:mb-0 md:mt-2\"\n            onClick={handleStopConversation}\n          >\n            <IconPlayerStop size={16} /> {t('Stop Generating')}\n          </button>\n        )}\n\n        {!messageIsStreaming &&\n          selectedConversation &&\n          selectedConversation.messages.length > 0 && (\n            <button\n              className=\"absolute top-0 left-0 right-0 mx-auto mb-3 flex w-fit items-center gap-3 rounded border border-neutral-200 bg-white py-2 px-4 text-black hover:opacity-50 dark:border-neutral-600 dark:bg-[#343541] dark:text-white md:mb-0 md:mt-2\"\n              onClick={onRegenerate}\n            >\n              <IconRepeat size={16} /> {t('Regenerate response')}\n            </button>\n          )}\n\n        <div className=\"relative mx-2 flex w-full flex-grow flex-col rounded-md border border-black/10 bg-white shadow-[0_0_10px_rgba(0,0,0,0.10)] dark:border-gray-900/50 dark:bg-[#40414F] dark:text-white dark:shadow-[0_0_15px_rgba(0,0,0,0.10)] sm:mx-4\">\n          <button\n            className=\"absolute left-2 top-2 rounded-sm p-1 text-neutral-800 opacity-60 hover:bg-neutral-200 hover:text-neutral-900 dark:bg-opacity-50 dark:text-neutral-100 dark:hover:text-neutral-200\"\n            onClick={() => setShowPluginSelect(!showPluginSelect)}\n            onKeyDown={(e) => {}}\n          >\n            {plugin ? <IconBrandGoogle size={20} /> : <IconBolt size={20} />}\n          </button>\n\n          {showPluginSelect && (\n            <div className=\"absolute left-0 bottom-14 rounded bg-white dark:bg-[#343541]\">\n              <PluginSelect\n                plugin={plugin}\n                onKeyDown={(e: any) => {\n                  if (e.key === 'Escape') {\n                    e.preventDefault();\n                    setShowPluginSelect(false);\n                    textareaRef.current?.focus();\n                  }\n                }}\n                onPluginChange={(plugin: Plugin) => {\n                  setPlugin(plugin);\n                  setShowPluginSelect(false);\n\n                  if (textareaRef && textareaRef.current) {\n                    textareaRef.current.focus();\n                  }\n                }}\n              />\n            </div>\n          )}\n\n          <textarea\n            ref={textareaRef}\n            className=\"m-0 w-full resize-none border-0 bg-transparent p-0 py-2 pr-8 pl-10 text-black dark:bg-transparent dark:text-white md:py-3 md:pl-10\"\n            style={{\n              resize: 'none',\n              bottom: `${textareaRef?.current?.scrollHeight}px`,\n              maxHeight: '400px',\n              overflow: `${\n                textareaRef.current && textareaRef.current.scrollHeight > 400\n                  ? 'auto'\n                  : 'hidden'\n              }`,\n            }}\n            placeholder={\n              t('Type a message or type \"/\" to select a prompt...') || ''\n            }\n            value={content}\n            rows={1}\n            onCompositionStart={() => setIsTyping(true)}\n            onCompositionEnd={() => setIsTyping(false)}\n            onChange={handleChange}\n            onKeyDown={handleKeyDown}\n          />\n\n          <button\n            className=\"absolute right-2 top-2 rounded-sm p-1 text-neutral-800 opacity-60 hover:bg-neutral-200 hover:text-neutral-900 dark:bg-opacity-50 dark:text-neutral-100 dark:hover:text-neutral-200\"\n            onClick={handleSend}\n          >\n            {messageIsStreaming ? (\n              <div className=\"h-4 w-4 animate-spin rounded-full border-t-2 border-neutral-800 opacity-60 dark:border-neutral-100\"></div>\n            ) : (\n              <IconSend size={18} />\n            )}\n          </button>\n\n          {showScrollDownButton && (\n            <div className=\"absolute bottom-12 right-0 lg:bottom-0 lg:-right-10\">\n              <button\n                className=\"flex h-7 w-7 items-center justify-center rounded-full bg-neutral-300 text-gray-800 shadow-md hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-neutral-200\"\n                onClick={onScrollDownClick}\n              >\n                <IconArrowDown size={18} />\n              </button>\n            </div>\n          )}\n\n          {showPromptList && filteredPrompts.length > 0 && (\n            <div className=\"absolute bottom-12 w-full\">\n              <PromptList\n                activePromptIndex={activePromptIndex}\n                prompts={filteredPrompts}\n                onSelect={handleInitModal}\n                onMouseOver={setActivePromptIndex}\n                promptListRef={promptListRef}\n              />\n            </div>\n          )}\n\n          {isModalVisible && (\n            <VariableModal\n              prompt={filteredPrompts[activePromptIndex]}\n              variables={variables}\n              onSubmit={handleSubmit}\n              onClose={() => setIsModalVisible(false)}\n            />\n          )}\n        </div>\n      </div>\n      <div className=\"px-3 pt-2 pb-3 text-center text-[12px] text-black/50 dark:text-white/50 md:px-4 md:pt-3 md:pb-6\">\n        <a\n          href=\"https://github.com/mckaywrigley/chatbot-ui\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          className=\"underline\"\n        >\n          ChatBot UI\n        </a>\n        .{' '}\n        {t(\n          \"Chatbot UI is an advanced chatbot kit for OpenAI's chat models aiming to mimic ChatGPT's interface and functionality.\",\n        )}\n      </div>\n    </div>\n  );\n};\n","file":"/components/Chat/ChatInput.tsx","language":"typescript","fileHash":"1f270c653a3154f04bed3d18023026cff1b75064bbea7537743e43f804239a18","hash":"1f270c653a3154f04bed3d18023026cff1b75064bbea7537743e43f804239a18","processedContent":"import {\n  IconArrowDown,\n  IconBolt,\n  IconBrandGoogle,\n  IconPlayerStop,\n  IconRepeat,\n  IconSend,\n} from '@tabler/icons-react';\nimport {\n  KeyboardEvent, #undefined\n  MutableRefObject, #undefined\n  useCallback, #undefined\n  useContext,\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().: undefined\n  \"\"\"\n  useEffect, #undefined\n  useRef, #undefined\n  useState, #undefined\n} from 'react'; #undefined\n\nimport { useTranslation } from 'next-i18next';\n\nimport { Message } from '@/types/chat';\nimport { Plugin } from '@/types/plugin';\nimport { Prompt } from '@/types/prompt';\n\nimport HomeContext from '@/pages/api/home/home.context';\n\nimport { PluginSelect } from './PluginSelect';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.: This code defines a React component that renders a dropdown menu for selecting a plugin. The component uses the `useRef` hook to store a reference to the select element, and the `useEffect` hook to focus on the select element when the component mounts. The component also defines a `handleKeyDown` function that handles keyboard events for the select element, including navigation and selection of options.\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/: This code defines a React component that renders a dropdown menu for selecting a plugin. The component uses the `useRef` hook to store a reference to the select element, and the `useEffect` hook to focus on the select element when the component mounts. The component also defines a `handleKeyDown` function that handles keyboard events for the select element, including navigation and selection of options.\n\"\"\"\nimport { PromptList } from './PromptList';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/PromptList.: This code defines a React component that renders a list of prompts, with each prompt being a clickable item that triggers an action when selected. The component also includes event handlers for mouse hover and click events.\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/: This code defines a React component that renders a list of prompts, with each prompt being a clickable item that triggers an action when selected. The component also includes event handlers for mouse hover and click events.\n\"\"\"\nimport { VariableModal } from './VariableModal';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.: This code defines a React component that renders a modal dialog with a form for the user to input values for a set of variables. The form includes a text area for each variable, and the user can submit the form by clicking a button. The component also includes an event listener for the escape key, which closes the modal when pressed.\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/: This code defines a React component that renders a modal dialog with a form for inputting values for variables. The component includes an event listener for the escape key, which closes the modal when pressed.\n\"\"\"\n\ninterface Props {\n  \"\"\"This code defines a set of properties for a React component, including functions to handle user interactions and a reference to a textarea element.\"\"\"\n  pass\n\nexport const ChatInput = ({\n  onSend,\n  onRegenerate,\n  onScrollDownClick,\n  stopConversationRef,\n  textareaRef,\n  showScrollDownButton,\n}: Props) => {\n  const { t } = useTranslation('chat');\n\n  const {\n    state: { selectedConversation, messageIsStreaming, prompts },\n\n    dispatch: homeDispatch,\n  } = useContext(HomeContext);\n\n  const [content, setContent] = useState<string>();\n  const [isTyping, setIsTyping] = useState<boolean>(false);\n  const [showPromptList, setShowPromptList] = useState(false);\n  const [activePromptIndex, setActivePromptIndex] = useState(0);\n  const [promptInputValue, setPromptInputValue] = useState('');\n  const [variables, setVariables] = useState<string[]>([]);\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [showPluginSelect, setShowPluginSelect] = useState(false);\n  const [plugin, setPlugin] = useState<Plugin | null>(null);\n\n  const promptListRef = useRef<HTMLUListElement | null>(null);\n\n  const filteredPrompts = prompts.filter((prompt) =>\n    prompt.name.toLowerCase().includes(promptInputValue.toLowerCase()),\n  );\n\n  const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const value = e.target.value;\n    const maxLength = selectedConversation?.model.maxLength;\n\n    if (maxLength && value.length > maxLength) {\n      alert(\n        t(\n          `Message limit is {{maxLength}} characters. You have entered {{valueLength}} characters.`,\n          { maxLength, valueLength: value.length },\n        ),\n      );\n      return;\n    }\n\n    setContent(value);\n    updatePromptListVisibility(value);\n  };\n\n  const handleSend = () => {\n    if (messageIsStreaming) {\n      return;\n    }\n\n    if (!content) {\n      alert(t('Please enter a message'));\n      return;\n    }\n\n    onSend({ role: 'user', content }, plugin);\n    setContent('');\n    setPlugin(null);\n\n    if (window.innerWidth < 640 && textareaRef && textareaRef.current) {\n      textareaRef.current.blur();\n    }\n  };\n\n  const handleStopConversation = () => {\n    stopConversationRef.current = true;\n    setTimeout(() => {\n      stopConversationRef.current = false;\n    }, 1000);\n  };\n\n  const isMobile = () => {\n    const userAgent =\n      typeof window.navigator === 'undefined' ? '' : navigator.userAgent;\n    const mobileRegex =\n      /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|Mobile|mobile|CriOS/i;\n    return mobileRegex.test(userAgent);\n  };\n\n  const handleInitModal = () => {\n    const selectedPrompt = filteredPrompts[activePromptIndex];\n    if (selectedPrompt) {\n      setContent((prevContent) => {\n        const newContent = prevContent?.replace(\n          /\\/\\w*$/,\n          selectedPrompt.content,\n        );\n        return newContent;\n      });\n      handlePromptSelect(selectedPrompt);\n    }\n    setShowPromptList(false);\n  };\n\n  const handleKeyDown = (e: KeyboardEvent<HTMLTextAreaElement>) => {\n    if (showPromptList) {\n      if (e.key === 'ArrowDown') {\n        e.preventDefault();\n        setActivePromptIndex((prevIndex) =>\n          prevIndex < prompts.length - 1 ? prevIndex + 1 : prevIndex,\n        );\n      } else if (e.key === 'ArrowUp') {\n        e.preventDefault();\n        setActivePromptIndex((prevIndex) =>\n          prevIndex > 0 ? prevIndex - 1 : prevIndex,\n        );\n      } else if (e.key === 'Tab') {\n        e.preventDefault();\n        setActivePromptIndex((prevIndex) =>\n          prevIndex < prompts.length - 1 ? prevIndex + 1 : 0,\n        );\n      } else if (e.key === 'Enter') {\n        e.preventDefault();\n        handleInitModal();\n      } else if (e.key === 'Escape') {\n        e.preventDefault();\n        setShowPromptList(false);\n      } else {\n        setActivePromptIndex(0);\n      }\n    } else if (e.key === 'Enter' && !isTyping && !isMobile() && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    } else if (e.key === '/' && e.metaKey) {\n      e.preventDefault();\n      setShowPluginSelect(!showPluginSelect);\n    }\n  };\n\n  const parseVariables = (content: string) => {\n    const regex = /{{(.*?)}}/g;\n    const foundVariables = [];\n    let match;\n\n    while ((match = regex.exec(content)) !== null) {\n      foundVariables.push(match[1]);\n    }\n\n    return foundVariables;\n  };\n\n  const updatePromptListVisibility = useCallback((text: string) => {\n    const match = text.match(/\\/\\w*$/);\n\n    if (match) {\n      setShowPromptList(true);\n      setPromptInputValue(match[0].slice(1));\n    } else {\n      setShowPromptList(false);\n      setPromptInputValue('');\n    }\n  }, []);\n\n  const handlePromptSelect = (prompt: Prompt) => {\n    const parsedVariables = parseVariables(prompt.content);\n    setVariables(parsedVariables);\n\n    if (parsedVariables.length > 0) {\n      setIsModalVisible(true);\n    } else {\n      setContent((prevContent) => {\n        const updatedContent = prevContent?.replace(/\\/\\w*$/, prompt.content);\n        return updatedContent;\n      });\n      updatePromptListVisibility(prompt.content);\n    }\n  };\n\n  const handleSubmit = (updatedVariables: string[]) => {\n    const newContent = content?.replace(/{{(.*?)}}/g, (match, variable) => {\n      const index = variables.indexOf(variable);\n      return updatedVariables[index];\n    });\n\n    setContent(newContent);\n\n    if (textareaRef && textareaRef.current) {\n      textareaRef.current.focus();\n    }\n  };\n\n  useEffect(() => {\n    if (promptListRef.current) {\n      promptListRef.current.scrollTop = activePromptIndex * 30;\n    }\n  }, [activePromptIndex]);\n\n  useEffect(() => {\n    if (textareaRef && textareaRef.current) {\n      textareaRef.current.style.height = 'inherit';\n      textareaRef.current.style.height = `${textareaRef.current?.scrollHeight}px`;\n      textareaRef.current.style.overflow = `${\n        textareaRef?.current?.scrollHeight > 400 ? 'auto' : 'hidden'\n      }`;\n    }\n  }, [content]);\n\n  useEffect(() => {\n    const handleOutsideClick = (e: MouseEvent) => {\n      if (\n        promptListRef.current &&\n        !promptListRef.current.contains(e.target as Node)\n      ) {\n        setShowPromptList(false);\n      }\n    };\n\n    window.addEventListener('click', handleOutsideClick);\n\n    return () => {\n      window.removeEventListener('click', handleOutsideClick);\n    };\n  }, []);\n\n  return (\n    <div className=\"absolute bottom-0 left-0 w-full border-transparent bg-gradient-to-b from-transparent via-white to-white pt-6 dark:border-white/20 dark:via-[#343541] dark:to-[#343541] md:pt-2\">\n      <div className=\"stretch mx-2 mt-4 flex flex-row gap-3 last:mb-2 md:mx-4 md:mt-[52px] md:last:mb-6 lg:mx-auto lg:max-w-3xl\">\n        {messageIsStreaming && (\n          <button\n            className=\"absolute top-0 left-0 right-0 mx-auto mb-3 flex w-fit items-center gap-3 rounded border border-neutral-200 bg-white py-2 px-4 text-black hover:opacity-50 dark:border-neutral-600 dark:bg-[#343541] dark:text-white md:mb-0 md:mt-2\"\n            onClick={handleStopConversation}\n          >\n            <IconPlayerStop size={16} /> {t('Stop Generating')}\n          </button>\n        )}\n\n        {!messageIsStreaming &&\n          selectedConversation &&\n          selectedConversation.messages.length > 0 && (\n            <button\n              className=\"absolute top-0 left-0 right-0 mx-auto mb-3 flex w-fit items-center gap-3 rounded border border-neutral-200 bg-white py-2 px-4 text-black hover:opacity-50 dark:border-neutral-600 dark:bg-[#343541] dark:text-white md:mb-0 md:mt-2\"\n              onClick={onRegenerate}\n            >\n              <IconRepeat size={16} /> {t('Regenerate response')}\n            </button>\n          )}\n\n        <div className=\"relative mx-2 flex w-full flex-grow flex-col rounded-md border border-black/10 bg-white shadow-[0_0_10px_rgba(0,0,0,0.10)] dark:border-gray-900/50 dark:bg-[#40414F] dark:text-white dark:shadow-[0_0_15px_rgba(0,0,0,0.10)] sm:mx-4\">\n          <button\n            className=\"absolute left-2 top-2 rounded-sm p-1 text-neutral-800 opacity-60 hover:bg-neutral-200 hover:text-neutral-900 dark:bg-opacity-50 dark:text-neutral-100 dark:hover:text-neutral-200\"\n            onClick={() => setShowPluginSelect(!showPluginSelect)}\n            onKeyDown={(e) => {}}\n          >\n            {plugin ? <IconBrandGoogle size={20} /> : <IconBolt size={20} />}\n          </button>\n\n          {showPluginSelect && (\n            <div className=\"absolute left-0 bottom-14 rounded bg-white dark:bg-[#343541]\">\n              <PluginSelect\n                plugin={plugin}\n                onKeyDown={(e: any) => {\n                  if (e.key === 'Escape') {\n                    e.preventDefault();\n                    setShowPluginSelect(false);\n                    textareaRef.current?.focus();\n                  }\n                }}\n                onPluginChange={(plugin: Plugin) => {\n                  setPlugin(plugin);\n                  setShowPluginSelect(false);\n\n                  if (textareaRef && textareaRef.current) {\n                    textareaRef.current.focus();\n                  }\n                }}\n              />\n            </div>\n          )}\n\n          <textarea\n            ref={textareaRef}\n            className=\"m-0 w-full resize-none border-0 bg-transparent p-0 py-2 pr-8 pl-10 text-black dark:bg-transparent dark:text-white md:py-3 md:pl-10\"\n            style={{\n              resize: 'none',\n              bottom: `${textareaRef?.current?.scrollHeight}px`,\n              maxHeight: '400px',\n              overflow: `${\n                textareaRef.current && textareaRef.current.scrollHeight > 400\n                  ? 'auto'\n                  : 'hidden'\n              }`,\n            }}\n            placeholder={\n              t('Type a message or type \"/\" to select a prompt...') || ''\n            }\n            value={content}\n            rows={1}\n            onCompositionStart={() => setIsTyping(true)}\n            onCompositionEnd={() => setIsTyping(false)}\n            onChange={handleChange}\n            onKeyDown={handleKeyDown}\n          />\n\n          <button\n            className=\"absolute right-2 top-2 rounded-sm p-1 text-neutral-800 opacity-60 hover:bg-neutral-200 hover:text-neutral-900 dark:bg-opacity-50 dark:text-neutral-100 dark:hover:text-neutral-200\"\n            onClick={handleSend}\n          >\n            {messageIsStreaming ? (\n              <div className=\"h-4 w-4 animate-spin rounded-full border-t-2 border-neutral-800 opacity-60 dark:border-neutral-100\"></div>\n            ) : (\n              <IconSend size={18} />\n            )}\n          </button>\n\n          {showScrollDownButton && (\n            <div className=\"absolute bottom-12 right-0 lg:bottom-0 lg:-right-10\">\n              <button\n                className=\"flex h-7 w-7 items-center justify-center rounded-full bg-neutral-300 text-gray-800 shadow-md hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-neutral-200\"\n                onClick={onScrollDownClick}\n              >\n                <IconArrowDown size={18} />\n              </button>\n            </div>\n          )}\n\n          {showPromptList && filteredPrompts.length > 0 && (\n            <div className=\"absolute bottom-12 w-full\">\n              <PromptList\n                activePromptIndex={activePromptIndex}\n                prompts={filteredPrompts}\n                onSelect={handleInitModal}\n                onMouseOver={setActivePromptIndex}\n                promptListRef={promptListRef}\n              />\n            </div>\n          )}\n\n          {isModalVisible && (\n            <VariableModal\n              prompt={filteredPrompts[activePromptIndex]}\n              variables={variables}\n              onSubmit={handleSubmit}\n              onClose={() => setIsModalVisible(false)}\n            />\n          )}\n        </div>\n      </div>\n      <div className=\"px-3 pt-2 pb-3 text-center text-[12px] text-black/50 dark:text-white/50 md:px-4 md:pt-3 md:pb-6\">\n        <a\n          href=\"https://github.com/mckaywrigley/chatbot-ui\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          className=\"underline\"\n        >\n          ChatBot UI\n        </a>\n        .{' '}\n        {t(\n          \"Chatbot UI is an advanced chatbot kit for OpenAI's chat models aiming to mimic ChatGPT's interface and functionality.\",\n        \"\"\"The code defines a React component that renders a chat interface for a chatbot, allowing users to input text and select prompts. It also includes a modal dialog for inputting values for variables in the chatbot's responses.\"\"\"\n        pass\n","documentation":"The code defines a React component that renders a chat interface for a chatbot, allowing users to input text and select prompts. It also includes a modal dialog for inputting values for variables in the chatbot's responses."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/Props#","attributes":{"range":[30,0,37,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/Props#","content":"interface Props {\n  onSend: (message: Message, plugin: Plugin | null) => void;\n  onRegenerate: () => void;\n  onScrollDownClick: () => void;\n  stopConversationRef: MutableRefObject<boolean>;\n  textareaRef: MutableRefObject<HTMLTextAreaElement | null>;\n  showScrollDownButton: boolean;\n}","file":"/components/Chat/ChatInput.tsx","language":"typescript","fileHash":"1f270c653a3154f04bed3d18023026cff1b75064bbea7537743e43f804239a18","hash":"6739c006fb19edd8108f01143a29b3a189b3f4455b0ace779f80c978a647217d","processedContent":"interface Props {\n  onSend: (message: Message, plugin: Plugin | null) => void;\n  onRegenerate: () => void;\n  onScrollDownClick: () => void;\n  stopConversationRef: MutableRefObject<boolean>; #undefined\n  textareaRef: MutableRefObject<HTMLTextAreaElement | null>;\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLTextAreaElement#: undefined\n  \"\"\"\n  showScrollDownButton: boolean;\n}","documentation":"This code defines a set of properties for a React component, including functions to handle user interactions and a reference to a textarea element."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","attributes":{"range":[39,25,397,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","content":"({\n  onSend,\n  onRegenerate,\n  onScrollDownClick,\n  stopConversationRef,\n  textareaRef,\n  showScrollDownButton,\n}: Props) => {\n  const { t } = useTranslation('chat');\n\n  const {\n    state: { selectedConversation, messageIsStreaming, prompts },\n\n    dispatch: homeDispatch,\n  } = useContext(HomeContext);\n\n  const [content, setContent] = useState<string>();\n  const [isTyping, setIsTyping] = useState<boolean>(false);\n  const [showPromptList, setShowPromptList] = useState(false);\n  const [activePromptIndex, setActivePromptIndex] = useState(0);\n  const [promptInputValue, setPromptInputValue] = useState('');\n  const [variables, setVariables] = useState<string[]>([]);\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [showPluginSelect, setShowPluginSelect] = useState(false);\n  const [plugin, setPlugin] = useState<Plugin | null>(null);\n\n  const promptListRef = useRef<HTMLUListElement | null>(null);\n\n  const filteredPrompts = prompts.filter((prompt) =>\n    prompt.name.toLowerCase().includes(promptInputValue.toLowerCase()),\n  );\n\n  const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const value = e.target.value;\n    const maxLength = selectedConversation?.model.maxLength;\n\n    if (maxLength && value.length > maxLength) {\n      alert(\n        t(\n          `Message limit is {{maxLength}} characters. You have entered {{valueLength}} characters.`,\n          { maxLength, valueLength: value.length },\n        ),\n      );\n      return;\n    }\n\n    setContent(value);\n    updatePromptListVisibility(value);\n  };\n\n  const handleSend = () => {\n    if (messageIsStreaming) {\n      return;\n    }\n\n    if (!content) {\n      alert(t('Please enter a message'));\n      return;\n    }\n\n    onSend({ role: 'user', content }, plugin);\n    setContent('');\n    setPlugin(null);\n\n    if (window.innerWidth < 640 && textareaRef && textareaRef.current) {\n      textareaRef.current.blur();\n    }\n  };\n\n  const handleStopConversation = () => {\n    stopConversationRef.current = true;\n    setTimeout(() => {\n      stopConversationRef.current = false;\n    }, 1000);\n  };\n\n  const isMobile = () => {\n    const userAgent =\n      typeof window.navigator === 'undefined' ? '' : navigator.userAgent;\n    const mobileRegex =\n      /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|Mobile|mobile|CriOS/i;\n    return mobileRegex.test(userAgent);\n  };\n\n  const handleInitModal = () => {\n    const selectedPrompt = filteredPrompts[activePromptIndex];\n    if (selectedPrompt) {\n      setContent((prevContent) => {\n        const newContent = prevContent?.replace(\n          /\\/\\w*$/,\n          selectedPrompt.content,\n        );\n        return newContent;\n      });\n      handlePromptSelect(selectedPrompt);\n    }\n    setShowPromptList(false);\n  };\n\n  const handleKeyDown = (e: KeyboardEvent<HTMLTextAreaElement>) => {\n    if (showPromptList) {\n      if (e.key === 'ArrowDown') {\n        e.preventDefault();\n        setActivePromptIndex((prevIndex) =>\n          prevIndex < prompts.length - 1 ? prevIndex + 1 : prevIndex,\n        );\n      } else if (e.key === 'ArrowUp') {\n        e.preventDefault();\n        setActivePromptIndex((prevIndex) =>\n          prevIndex > 0 ? prevIndex - 1 : prevIndex,\n        );\n      } else if (e.key === 'Tab') {\n        e.preventDefault();\n        setActivePromptIndex((prevIndex) =>\n          prevIndex < prompts.length - 1 ? prevIndex + 1 : 0,\n        );\n      } else if (e.key === 'Enter') {\n        e.preventDefault();\n        handleInitModal();\n      } else if (e.key === 'Escape') {\n        e.preventDefault();\n        setShowPromptList(false);\n      } else {\n        setActivePromptIndex(0);\n      }\n    } else if (e.key === 'Enter' && !isTyping && !isMobile() && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    } else if (e.key === '/' && e.metaKey) {\n      e.preventDefault();\n      setShowPluginSelect(!showPluginSelect);\n    }\n  };\n\n  const parseVariables = (content: string) => {\n    const regex = /{{(.*?)}}/g;\n    const foundVariables = [];\n    let match;\n\n    while ((match = regex.exec(content)) !== null) {\n      foundVariables.push(match[1]);\n    }\n\n    return foundVariables;\n  };\n\n  const updatePromptListVisibility = useCallback((text: string) => {\n    const match = text.match(/\\/\\w*$/);\n\n    if (match) {\n      setShowPromptList(true);\n      setPromptInputValue(match[0].slice(1));\n    } else {\n      setShowPromptList(false);\n      setPromptInputValue('');\n    }\n  }, []);\n\n  const handlePromptSelect = (prompt: Prompt) => {\n    const parsedVariables = parseVariables(prompt.content);\n    setVariables(parsedVariables);\n\n    if (parsedVariables.length > 0) {\n      setIsModalVisible(true);\n    } else {\n      setContent((prevContent) => {\n        const updatedContent = prevContent?.replace(/\\/\\w*$/, prompt.content);\n        return updatedContent;\n      });\n      updatePromptListVisibility(prompt.content);\n    }\n  };\n\n  const handleSubmit = (updatedVariables: string[]) => {\n    const newContent = content?.replace(/{{(.*?)}}/g, (match, variable) => {\n      const index = variables.indexOf(variable);\n      return updatedVariables[index];\n    });\n\n    setContent(newContent);\n\n    if (textareaRef && textareaRef.current) {\n      textareaRef.current.focus();\n    }\n  };\n\n  useEffect(() => {\n    if (promptListRef.current) {\n      promptListRef.current.scrollTop = activePromptIndex * 30;\n    }\n  }, [activePromptIndex]);\n\n  useEffect(() => {\n    if (textareaRef && textareaRef.current) {\n      textareaRef.current.style.height = 'inherit';\n      textareaRef.current.style.height = `${textareaRef.current?.scrollHeight}px`;\n      textareaRef.current.style.overflow = `${\n        textareaRef?.current?.scrollHeight > 400 ? 'auto' : 'hidden'\n      }`;\n    }\n  }, [content]);\n\n  useEffect(() => {\n    const handleOutsideClick = (e: MouseEvent) => {\n      if (\n        promptListRef.current &&\n        !promptListRef.current.contains(e.target as Node)\n      ) {\n        setShowPromptList(false);\n      }\n    };\n\n    window.addEventListener('click', handleOutsideClick);\n\n    return () => {\n      window.removeEventListener('click', handleOutsideClick);\n    };\n  }, []);\n\n  return (\n    <div className=\"absolute bottom-0 left-0 w-full border-transparent bg-gradient-to-b from-transparent via-white to-white pt-6 dark:border-white/20 dark:via-[#343541] dark:to-[#343541] md:pt-2\">\n      <div className=\"stretch mx-2 mt-4 flex flex-row gap-3 last:mb-2 md:mx-4 md:mt-[52px] md:last:mb-6 lg:mx-auto lg:max-w-3xl\">\n        {messageIsStreaming && (\n          <button\n            className=\"absolute top-0 left-0 right-0 mx-auto mb-3 flex w-fit items-center gap-3 rounded border border-neutral-200 bg-white py-2 px-4 text-black hover:opacity-50 dark:border-neutral-600 dark:bg-[#343541] dark:text-white md:mb-0 md:mt-2\"\n            onClick={handleStopConversation}\n          >\n            <IconPlayerStop size={16} /> {t('Stop Generating')}\n          </button>\n        )}\n\n        {!messageIsStreaming &&\n          selectedConversation &&\n          selectedConversation.messages.length > 0 && (\n            <button\n              className=\"absolute top-0 left-0 right-0 mx-auto mb-3 flex w-fit items-center gap-3 rounded border border-neutral-200 bg-white py-2 px-4 text-black hover:opacity-50 dark:border-neutral-600 dark:bg-[#343541] dark:text-white md:mb-0 md:mt-2\"\n              onClick={onRegenerate}\n            >\n              <IconRepeat size={16} /> {t('Regenerate response')}\n            </button>\n          )}\n\n        <div className=\"relative mx-2 flex w-full flex-grow flex-col rounded-md border border-black/10 bg-white shadow-[0_0_10px_rgba(0,0,0,0.10)] dark:border-gray-900/50 dark:bg-[#40414F] dark:text-white dark:shadow-[0_0_15px_rgba(0,0,0,0.10)] sm:mx-4\">\n          <button\n            className=\"absolute left-2 top-2 rounded-sm p-1 text-neutral-800 opacity-60 hover:bg-neutral-200 hover:text-neutral-900 dark:bg-opacity-50 dark:text-neutral-100 dark:hover:text-neutral-200\"\n            onClick={() => setShowPluginSelect(!showPluginSelect)}\n            onKeyDown={(e) => {}}\n          >\n            {plugin ? <IconBrandGoogle size={20} /> : <IconBolt size={20} />}\n          </button>\n\n          {showPluginSelect && (\n            <div className=\"absolute left-0 bottom-14 rounded bg-white dark:bg-[#343541]\">\n              <PluginSelect\n                plugin={plugin}\n                onKeyDown={(e: any) => {\n                  if (e.key === 'Escape') {\n                    e.preventDefault();\n                    setShowPluginSelect(false);\n                    textareaRef.current?.focus();\n                  }\n                }}\n                onPluginChange={(plugin: Plugin) => {\n                  setPlugin(plugin);\n                  setShowPluginSelect(false);\n\n                  if (textareaRef && textareaRef.current) {\n                    textareaRef.current.focus();\n                  }\n                }}\n              />\n            </div>\n          )}\n\n          <textarea\n            ref={textareaRef}\n            className=\"m-0 w-full resize-none border-0 bg-transparent p-0 py-2 pr-8 pl-10 text-black dark:bg-transparent dark:text-white md:py-3 md:pl-10\"\n            style={{\n              resize: 'none',\n              bottom: `${textareaRef?.current?.scrollHeight}px`,\n              maxHeight: '400px',\n              overflow: `${\n                textareaRef.current && textareaRef.current.scrollHeight > 400\n                  ? 'auto'\n                  : 'hidden'\n              }`,\n            }}\n            placeholder={\n              t('Type a message or type \"/\" to select a prompt...') || ''\n            }\n            value={content}\n            rows={1}\n            onCompositionStart={() => setIsTyping(true)}\n            onCompositionEnd={() => setIsTyping(false)}\n            onChange={handleChange}\n            onKeyDown={handleKeyDown}\n          />\n\n          <button\n            className=\"absolute right-2 top-2 rounded-sm p-1 text-neutral-800 opacity-60 hover:bg-neutral-200 hover:text-neutral-900 dark:bg-opacity-50 dark:text-neutral-100 dark:hover:text-neutral-200\"\n            onClick={handleSend}\n          >\n            {messageIsStreaming ? (\n              <div className=\"h-4 w-4 animate-spin rounded-full border-t-2 border-neutral-800 opacity-60 dark:border-neutral-100\"></div>\n            ) : (\n              <IconSend size={18} />\n            )}\n          </button>\n\n          {showScrollDownButton && (\n            <div className=\"absolute bottom-12 right-0 lg:bottom-0 lg:-right-10\">\n              <button\n                className=\"flex h-7 w-7 items-center justify-center rounded-full bg-neutral-300 text-gray-800 shadow-md hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-neutral-200\"\n                onClick={onScrollDownClick}\n              >\n                <IconArrowDown size={18} />\n              </button>\n            </div>\n          )}\n\n          {showPromptList && filteredPrompts.length > 0 && (\n            <div className=\"absolute bottom-12 w-full\">\n              <PromptList\n                activePromptIndex={activePromptIndex}\n                prompts={filteredPrompts}\n                onSelect={handleInitModal}\n                onMouseOver={setActivePromptIndex}\n                promptListRef={promptListRef}\n              />\n            </div>\n          )}\n\n          {isModalVisible && (\n            <VariableModal\n              prompt={filteredPrompts[activePromptIndex]}\n              variables={variables}\n              onSubmit={handleSubmit}\n              onClose={() => setIsModalVisible(false)}\n            />\n          )}\n        </div>\n      </div>\n      <div className=\"px-3 pt-2 pb-3 text-center text-[12px] text-black/50 dark:text-white/50 md:px-4 md:pt-3 md:pb-6\">\n        <a\n          href=\"https://github.com/mckaywrigley/chatbot-ui\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          className=\"underline\"\n        >\n          ChatBot UI\n        </a>\n        .{' '}\n        {t(\n          \"Chatbot UI is an advanced chatbot kit for OpenAI's chat models aiming to mimic ChatGPT's interface and functionality.\",\n        )}\n      </div>\n    </div>\n  );\n}","file":"/components/Chat/ChatInput.tsx","language":"typescript","fileHash":"1f270c653a3154f04bed3d18023026cff1b75064bbea7537743e43f804239a18","hash":"fa2d9185ec149efff6457b9a659a95e0791a12313abbd994ed040a6b36a545e4","processedContent":"({\n  onSend, #undefined\n  onRegenerate, #undefined\n  onScrollDownClick, #undefined\n  stopConversationRef, #undefined\n  textareaRef, #undefined\n  showScrollDownButton, #undefined\n}: Props) => { #This code defines a set of properties for a React component, including functions to handle user interactions and a reference to a textarea element.\n  const { t } = useTranslation('chat');\n\n  const {\n    state: { selectedConversation, messageIsStreaming, prompts },\n\n    dispatch: homeDispatch,\n  } = useContext(HomeContext);\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().: undefined\n  \"\"\"\n\n  const [content, setContent] = useState<string>(); #undefined\n  const [isTyping, setIsTyping] = useState<boolean>(false); #undefined\n  const [showPromptList, setShowPromptList] = useState(false); #undefined\n  const [activePromptIndex, setActivePromptIndex] = useState(0); #undefined\n  const [promptInputValue, setPromptInputValue] = useState(''); #undefined\n  const [variables, setVariables] = useState<string[]>([]); #undefined\n  const [isModalVisible, setIsModalVisible] = useState(false); #undefined\n  const [showPluginSelect, setShowPluginSelect] = useState(false); #undefined\n  const [plugin, setPlugin] = useState<Plugin | null>(null); #undefined\n\n  const promptListRef = useRef<HTMLUListElement | null>(null);\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLUListElement#: undefined\n  \"\"\"\n\n  const filteredPrompts = prompts.filter((prompt) =>\n    prompt.name.toLowerCase().includes(promptInputValue.toLowerCase()),\n  );\n\n  const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ChangeEvent#: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLTextAreaElement#: undefined\n  \"\"\"\n    const value = e.target.value; #undefined\n    const maxLength = selectedConversation?.model.maxLength;\n\n    if (maxLength && value.length > maxLength) {\n      alert(\n        t(\n          `Message limit is {{maxLength}} characters. You have entered {{valueLength}} characters.`,\n          { maxLength, valueLength: value.length },\n        ),\n      );\n      return;\n    }\n\n    setContent(value);\n    updatePromptListVisibility(value);\n  };\n\n  const handleSend = () => {\n    if (messageIsStreaming) {\n      return;\n    }\n\n    if (!content) {\n      alert(t('Please enter a message'));\n      return;\n    }\n\n    onSend({ role: 'user', content }, plugin);\n    setContent('');\n    setPlugin(null);\n\n    if (window.innerWidth < 640 && textareaRef && textareaRef.current) { #undefined\n      textareaRef.current.blur(); #undefined\n    }\n  };\n\n  const handleStopConversation = () => {\n    stopConversationRef.current = true; #undefined\n    setTimeout(() => {\n    \"\"\"\n    scip-typescript npm @types/node 20.9.3 `ts4.8`/`timers.d.ts`/`\"timers\"`/global/setTimeout().: undefined\n    scip-typescript npm @types/node 20.9.3 `ts4.8`/`timers.d.ts`/`\"timers\"`/global/setTimeout/: undefined\n    \"\"\"\n      stopConversationRef.current = false; #undefined\n    }, 1000);\n  };\n\n  const isMobile = () => {\n    const userAgent =\n      typeof window.navigator === 'undefined' ? '' : navigator.userAgent;\n    const mobileRegex =\n      /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|Mobile|mobile|CriOS/i;\n    return mobileRegex.test(userAgent);\n  };\n\n  const handleInitModal = () => {\n    const selectedPrompt = filteredPrompts[activePromptIndex];\n    if (selectedPrompt) {\n      setContent((prevContent) => {\n        const newContent = prevContent?.replace(\n          /\\/\\w*$/,\n          selectedPrompt.content,\n        );\n        return newContent;\n      });\n      handlePromptSelect(selectedPrompt);\n    }\n    setShowPromptList(false);\n  };\n\n  const handleKeyDown = (e: KeyboardEvent<HTMLTextAreaElement>) => {\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLTextAreaElement#: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#: undefined\n  \"\"\"\n    if (showPromptList) {\n      if (e.key === 'ArrowDown') { #undefined\n        e.preventDefault(); #undefined\n        setActivePromptIndex((prevIndex) =>\n          prevIndex < prompts.length - 1 ? prevIndex + 1 : prevIndex,\n        );\n      } else if (e.key === 'ArrowUp') { #undefined\n        e.preventDefault(); #undefined\n        setActivePromptIndex((prevIndex) =>\n          prevIndex > 0 ? prevIndex - 1 : prevIndex,\n        );\n      } else if (e.key === 'Tab') { #undefined\n        e.preventDefault(); #undefined\n        setActivePromptIndex((prevIndex) =>\n          prevIndex < prompts.length - 1 ? prevIndex + 1 : 0,\n        );\n      } else if (e.key === 'Enter') { #undefined\n        e.preventDefault(); #undefined\n        handleInitModal();\n      } else if (e.key === 'Escape') { #undefined\n        e.preventDefault(); #undefined\n        setShowPromptList(false);\n      } else {\n        setActivePromptIndex(0);\n      }\n    } else if (e.key === 'Enter' && !isTyping && !isMobile() && !e.shiftKey) {\n    \"\"\"\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#key.: undefined\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#shiftKey.: undefined\n    \"\"\"\n      e.preventDefault();\n      handleSend();\n    } else if (e.key === '/' && e.metaKey) {\n    \"\"\"\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#key.: undefined\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#metaKey.: undefined\n    \"\"\"\n      e.preventDefault();\n      setShowPluginSelect(!showPluginSelect);\n    }\n  };\n\n  const parseVariables = (content: string) => {\n    const regex = /{{(.*?)}}/g;\n    const foundVariables = [];\n    let match;\n\n    while ((match = regex.exec(content)) !== null) {\n      foundVariables.push(match[1]);\n    }\n\n    return foundVariables;\n  };\n\n  const updatePromptListVisibility = useCallback((text: string) => { #undefined\n    const match = text.match(/\\/\\w*$/);\n\n    if (match) {\n      setShowPromptList(true);\n      setPromptInputValue(match[0].slice(1));\n    } else {\n      setShowPromptList(false);\n      setPromptInputValue('');\n    }\n  }, []);\n\n  const handlePromptSelect = (prompt: Prompt) => {\n    const parsedVariables = parseVariables(prompt.content);\n    setVariables(parsedVariables);\n\n    if (parsedVariables.length > 0) {\n      setIsModalVisible(true);\n    } else {\n      setContent((prevContent) => {\n        const updatedContent = prevContent?.replace(/\\/\\w*$/, prompt.content);\n        return updatedContent;\n      });\n      updatePromptListVisibility(prompt.content);\n    }\n  };\n\n  const handleSubmit = (updatedVariables: string[]) => {\n    const newContent = content?.replace(/{{(.*?)}}/g, (match, variable) => {\n      const index = variables.indexOf(variable);\n      return updatedVariables[index];\n    });\n\n    setContent(newContent);\n\n    if (textareaRef && textareaRef.current) { #undefined\n      textareaRef.current.focus(); #undefined\n    }\n  };\n\n  useEffect(() => { #undefined\n    if (promptListRef.current) { #undefined\n      promptListRef.current.scrollTop = activePromptIndex * 30; #undefined\n    }\n  }, [activePromptIndex]);\n\n  useEffect(() => { #undefined\n    if (textareaRef && textareaRef.current) { #undefined\n      textareaRef.current.style.height = 'inherit'; #undefined\n      textareaRef.current.style.height = `${textareaRef.current?.scrollHeight}px`;\n      \"\"\"\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.: undefined\n      \"\"\"\n      textareaRef.current.style.overflow = `${ #undefined\n        textareaRef?.current?.scrollHeight > 400 ? 'auto' : 'hidden' #undefined\n      }`;\n    }\n  }, [content]);\n\n  useEffect(() => { #undefined\n    const handleOutsideClick = (e: MouseEvent) => { #undefined\n      if (\n        promptListRef.current && #undefined\n        !promptListRef.current.contains(e.target as Node) #undefined\n      ) {\n        setShowPromptList(false);\n      }\n    };\n\n    window.addEventListener('click', handleOutsideClick);\n\n    return () => {\n      window.removeEventListener('click', handleOutsideClick);\n    };\n  }, []);\n\n  return (\n    <div className=\"absolute bottom-0 left-0 w-full border-transparent bg-gradient-to-b from-transparent via-white to-white pt-6 dark:border-white/20 dark:via-[#343541] dark:to-[#343541] md:pt-2\">\n    \"\"\"\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n    \"\"\"\n      <div className=\"stretch mx-2 mt-4 flex flex-row gap-3 last:mb-2 md:mx-4 md:mt-[52px] md:last:mb-6 lg:mx-auto lg:max-w-3xl\">\n      \"\"\"\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n      \"\"\"\n        {messageIsStreaming && (\n          <button #undefined\n            className=\"absolute top-0 left-0 right-0 mx-auto mb-3 flex w-fit items-center gap-3 rounded border border-neutral-200 bg-white py-2 px-4 text-black hover:opacity-50 dark:border-neutral-600 dark:bg-[#343541] dark:text-white md:mb-0 md:mt-2\" #undefined\n            onClick={handleStopConversation} #undefined\n          >\n            <IconPlayerStop size={16} /> {t('Stop Generating')}\n          </button> #undefined\n        )}\n\n        {!messageIsStreaming &&\n          selectedConversation &&\n          selectedConversation.messages.length > 0 && (\n            <button #undefined\n              className=\"absolute top-0 left-0 right-0 mx-auto mb-3 flex w-fit items-center gap-3 rounded border border-neutral-200 bg-white py-2 px-4 text-black hover:opacity-50 dark:border-neutral-600 dark:bg-[#343541] dark:text-white md:mb-0 md:mt-2\" #undefined\n              onClick={onRegenerate} #undefined\n            >\n              <IconRepeat size={16} /> {t('Regenerate response')}\n            </button> #undefined\n          )}\n\n        <div className=\"relative mx-2 flex w-full flex-grow flex-col rounded-md border border-black/10 bg-white shadow-[0_0_10px_rgba(0,0,0,0.10)] dark:border-gray-900/50 dark:bg-[#40414F] dark:text-white dark:shadow-[0_0_15px_rgba(0,0,0,0.10)] sm:mx-4\">\n        \"\"\"\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n        \"\"\"\n          <button #undefined\n            className=\"absolute left-2 top-2 rounded-sm p-1 text-neutral-800 opacity-60 hover:bg-neutral-200 hover:text-neutral-900 dark:bg-opacity-50 dark:text-neutral-100 dark:hover:text-neutral-200\" #undefined\n            onClick={() => setShowPluginSelect(!showPluginSelect)} #undefined\n            onKeyDown={(e) => {}} #undefined\n          >\n            {plugin ? <IconBrandGoogle size={20} /> : <IconBolt size={20} />}\n          </button> #undefined\n\n          {showPluginSelect && (\n            <div className=\"absolute left-0 bottom-14 rounded bg-white dark:bg-[#343541]\">\n            \"\"\"\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n            \"\"\"\n              <PluginSelect #This code defines a React component that renders a dropdown menu for selecting a plugin. The component uses the `useRef` hook to store a reference to the select element, and the `useEffect` hook to focus on the select element when the component mounts. The component also defines a `handleKeyDown` function that handles keyboard events for the select element, including navigation and selection of options.\n                plugin={plugin} #undefined\n                onKeyDown={(e: any) => { #undefined\n                  if (e.key === 'Escape') {\n                    e.preventDefault(); #undefined\n                    setShowPluginSelect(false);\n                    textareaRef.current?.focus(); #undefined\n                  }\n                }}\n                onPluginChange={(plugin: Plugin) => { #undefined\n                  setPlugin(plugin);\n                  setShowPluginSelect(false);\n\n                  if (textareaRef && textareaRef.current) { #undefined\n                    textareaRef.current.focus(); #undefined\n                  }\n                }}\n              />\n            </div> #undefined\n          )}\n\n          <textarea #undefined\n            ref={textareaRef} #undefined\n            className=\"m-0 w-full resize-none border-0 bg-transparent p-0 py-2 pr-8 pl-10 text-black dark:bg-transparent dark:text-white md:py-3 md:pl-10\" #undefined\n            style={{ #undefined\n              resize: 'none',\n              bottom: `${textareaRef?.current?.scrollHeight}px`, #undefined\n              maxHeight: '400px',\n              overflow: `${\n                textareaRef.current && textareaRef.current.scrollHeight > 400\n                \"\"\"\n                scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.: undefined\n                scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.: undefined\n                \"\"\"\n                  ? 'auto'\n                  : 'hidden'\n              }`,\n            }}\n            placeholder={ #undefined\n              t('Type a message or type \"/\" to select a prompt...') || ''\n            }\n            value={content} #undefined\n            rows={1} #undefined\n            onCompositionStart={() => setIsTyping(true)} #undefined\n            onCompositionEnd={() => setIsTyping(false)} #undefined\n            onChange={handleChange} #undefined\n            onKeyDown={handleKeyDown} #undefined\n          />\n\n          <button\n            className=\"absolute right-2 top-2 rounded-sm p-1 text-neutral-800 opacity-60 hover:bg-neutral-200 hover:text-neutral-900 dark:bg-opacity-50 dark:text-neutral-100 dark:hover:text-neutral-200\" #undefined\n            onClick={handleSend} #undefined\n          >\n            {messageIsStreaming ? (\n              <div className=\"h-4 w-4 animate-spin rounded-full border-t-2 border-neutral-800 opacity-60 dark:border-neutral-100\"></div>\n              \"\"\"\n              scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n              scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n              scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n              \"\"\"\n            ) : (\n              <IconSend size={18} />\n            )}\n          </button>\n\n          {showScrollDownButton && (\n            <div className=\"absolute bottom-12 right-0 lg:bottom-0 lg:-right-10\">\n            \"\"\"\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n            \"\"\"\n              <button #undefined\n                className=\"flex h-7 w-7 items-center justify-center rounded-full bg-neutral-300 text-gray-800 shadow-md hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-neutral-200\" #undefined\n                onClick={onScrollDownClick} #undefined\n              >\n                <IconArrowDown size={18} />\n              </button> #undefined\n            </div> #undefined\n          )}\n\n          {showPromptList && filteredPrompts.length > 0 && (\n            <div className=\"absolute bottom-12 w-full\">\n            \"\"\"\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n            \"\"\"\n              <PromptList #This code defines a React component that renders a list of prompts, with each prompt being a clickable item that triggers an action when selected. The component also includes event handlers for mouse hover and click events.\n                activePromptIndex={activePromptIndex} #undefined\n                prompts={filteredPrompts} #undefined\n                onSelect={handleInitModal} #undefined\n                onMouseOver={setActivePromptIndex} #undefined\n                promptListRef={promptListRef} #undefined\n              />\n            </div> #undefined\n          )}\n\n          {isModalVisible && (\n            <VariableModal #This code defines a React component that renders a modal dialog with a form for the user to input values for a set of variables. The form includes a text area for each variable, and the user can submit the form by clicking a button. The component also includes an event listener for the escape key, which closes the modal when pressed.\n              prompt={filteredPrompts[activePromptIndex]} #undefined\n              variables={variables} #undefined\n              onSubmit={handleSubmit} #undefined\n              onClose={() => setIsModalVisible(false)} #undefined\n            />\n          )}\n        </div> #undefined\n      </div>\n      <div className=\"px-3 pt-2 pb-3 text-center text-[12px] text-black/50 dark:text-white/50 md:px-4 md:pt-3 md:pb-6\">\n      \"\"\"\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n      \"\"\"\n        <a #undefined\n          href=\"https://github.com/mckaywrigley/chatbot-ui\" #undefined\n          target=\"_blank\" #undefined\n          rel=\"noreferrer\" #undefined\n          className=\"underline\" #undefined\n        >\n          ChatBot UI\n        </a> #undefined\n        .{' '}\n        {t(\n          \"Chatbot UI is an advanced chatbot kit for OpenAI's chat models aiming to mimic ChatGPT's interface and functionality.\",\n        )}\n      </div>\n    </div>\n  );\n}","documentation":"The code defines a React component that renders a chat interface for a chatbot, allowing users to input text and select prompts. It also includes a modal dialog for inputting values for variables in the chatbot's responses."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/Props#onSend.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/Props#onSend.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/Props#onRegenerate.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/Props#onRegenerate.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/Props#onScrollDownClick.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/Props#onScrollDownClick.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/Props#stopConversationRef.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/Props#stopConversationRef.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/Props#textareaRef.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/Props#textareaRef.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/Props#showScrollDownButton.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/Props#showScrollDownButton.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#rel.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#rel.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","attributes":{"range":[0,0,512,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","content":"import { IconClearAll, IconSettings } from '@tabler/icons-react';\nimport {\n  MutableRefObject,\n  memo,\n  useCallback,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport toast from 'react-hot-toast';\n\nimport { useTranslation } from 'next-i18next';\n\nimport { getEndpoint } from '@/utils/app/api';\nimport {\n  saveConversation,\n  saveConversations,\n  updateConversation,\n} from '@/utils/app/conversation';\nimport { throttle } from '@/utils/data/throttle';\n\nimport { ChatBody, Conversation, Message } from '@/types/chat';\nimport { Plugin } from '@/types/plugin';\n\nimport HomeContext from '@/pages/api/home/home.context';\n\nimport Spinner from '../Spinner';\nimport { ChatInput } from './ChatInput';\nimport { ChatLoader } from './ChatLoader';\nimport { ErrorMessageDiv } from './ErrorMessageDiv';\nimport { ModelSelect } from './ModelSelect';\nimport { SystemPrompt } from './SystemPrompt';\nimport { TemperatureSlider } from './Temperature';\nimport { MemoizedChatMessage } from './MemoizedChatMessage';\n\ninterface Props {\n  stopConversationRef: MutableRefObject<boolean>;\n}\n\nexport const Chat = memo(({ stopConversationRef }: Props) => {\n  const { t } = useTranslation('chat');\n\n  const {\n    state: {\n      selectedConversation,\n      conversations,\n      models,\n      apiKey,\n      pluginKeys,\n      serverSideApiKeyIsSet,\n      messageIsStreaming,\n      modelError,\n      loading,\n      prompts,\n    },\n    handleUpdateConversation,\n    dispatch: homeDispatch,\n  } = useContext(HomeContext);\n\n  const [currentMessage, setCurrentMessage] = useState<Message>();\n  const [autoScrollEnabled, setAutoScrollEnabled] = useState<boolean>(true);\n  const [showSettings, setShowSettings] = useState<boolean>(false);\n  const [showScrollDownButton, setShowScrollDownButton] =\n    useState<boolean>(false);\n\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const chatContainerRef = useRef<HTMLDivElement>(null);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n  const handleSend = useCallback(\n    async (message: Message, deleteCount = 0, plugin: Plugin | null = null) => {\n      if (selectedConversation) {\n        let updatedConversation: Conversation;\n        if (deleteCount) {\n          const updatedMessages = [...selectedConversation.messages];\n          for (let i = 0; i < deleteCount; i++) {\n            updatedMessages.pop();\n          }\n          updatedConversation = {\n            ...selectedConversation,\n            messages: [...updatedMessages, message],\n          };\n        } else {\n          updatedConversation = {\n            ...selectedConversation,\n            messages: [...selectedConversation.messages, message],\n          };\n        }\n        homeDispatch({\n          field: 'selectedConversation',\n          value: updatedConversation,\n        });\n        homeDispatch({ field: 'loading', value: true });\n        homeDispatch({ field: 'messageIsStreaming', value: true });\n        const chatBody: ChatBody = {\n          model: updatedConversation.model,\n          messages: updatedConversation.messages,\n          key: apiKey,\n          prompt: updatedConversation.prompt,\n          temperature: updatedConversation.temperature,\n        };\n        const endpoint = getEndpoint(plugin);\n        let body;\n        if (!plugin) {\n          body = JSON.stringify(chatBody);\n        } else {\n          body = JSON.stringify({\n            ...chatBody,\n            googleAPIKey: pluginKeys\n              .find((key) => key.pluginId === 'google-search')\n              ?.requiredKeys.find((key) => key.key === 'GOOGLE_API_KEY')?.value,\n            googleCSEId: pluginKeys\n              .find((key) => key.pluginId === 'google-search')\n              ?.requiredKeys.find((key) => key.key === 'GOOGLE_CSE_ID')?.value,\n          });\n        }\n        const controller = new AbortController();\n        const response = await fetch(endpoint, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          signal: controller.signal,\n          body,\n        });\n        if (!response.ok) {\n          homeDispatch({ field: 'loading', value: false });\n          homeDispatch({ field: 'messageIsStreaming', value: false });\n          toast.error(response.statusText);\n          return;\n        }\n        const data = response.body;\n        if (!data) {\n          homeDispatch({ field: 'loading', value: false });\n          homeDispatch({ field: 'messageIsStreaming', value: false });\n          return;\n        }\n        if (!plugin) {\n          if (updatedConversation.messages.length === 1) {\n            const { content } = message;\n            const customName =\n              content.length > 30 ? content.substring(0, 30) + '...' : content;\n            updatedConversation = {\n              ...updatedConversation,\n              name: customName,\n            };\n          }\n          homeDispatch({ field: 'loading', value: false });\n          const reader = data.getReader();\n          const decoder = new TextDecoder();\n          let done = false;\n          let isFirst = true;\n          let text = '';\n          while (!done) {\n            if (stopConversationRef.current === true) {\n              controller.abort();\n              done = true;\n              break;\n            }\n            const { value, done: doneReading } = await reader.read();\n            done = doneReading;\n            const chunkValue = decoder.decode(value);\n            text += chunkValue;\n            if (isFirst) {\n              isFirst = false;\n              const updatedMessages: Message[] = [\n                ...updatedConversation.messages,\n                { role: 'assistant', content: chunkValue },\n              ];\n              updatedConversation = {\n                ...updatedConversation,\n                messages: updatedMessages,\n              };\n              homeDispatch({\n                field: 'selectedConversation',\n                value: updatedConversation,\n              });\n            } else {\n              const updatedMessages: Message[] =\n                updatedConversation.messages.map((message, index) => {\n                  if (index === updatedConversation.messages.length - 1) {\n                    return {\n                      ...message,\n                      content: text,\n                    };\n                  }\n                  return message;\n                });\n              updatedConversation = {\n                ...updatedConversation,\n                messages: updatedMessages,\n              };\n              homeDispatch({\n                field: 'selectedConversation',\n                value: updatedConversation,\n              });\n            }\n          }\n          saveConversation(updatedConversation);\n          const updatedConversations: Conversation[] = conversations.map(\n            (conversation) => {\n              if (conversation.id === selectedConversation.id) {\n                return updatedConversation;\n              }\n              return conversation;\n            },\n          );\n          if (updatedConversations.length === 0) {\n            updatedConversations.push(updatedConversation);\n          }\n          homeDispatch({ field: 'conversations', value: updatedConversations });\n          saveConversations(updatedConversations);\n          homeDispatch({ field: 'messageIsStreaming', value: false });\n        } else {\n          const { answer } = await response.json();\n          const updatedMessages: Message[] = [\n            ...updatedConversation.messages,\n            { role: 'assistant', content: answer },\n          ];\n          updatedConversation = {\n            ...updatedConversation,\n            messages: updatedMessages,\n          };\n          homeDispatch({\n            field: 'selectedConversation',\n            value: updateConversation,\n          });\n          saveConversation(updatedConversation);\n          const updatedConversations: Conversation[] = conversations.map(\n            (conversation) => {\n              if (conversation.id === selectedConversation.id) {\n                return updatedConversation;\n              }\n              return conversation;\n            },\n          );\n          if (updatedConversations.length === 0) {\n            updatedConversations.push(updatedConversation);\n          }\n          homeDispatch({ field: 'conversations', value: updatedConversations });\n          saveConversations(updatedConversations);\n          homeDispatch({ field: 'loading', value: false });\n          homeDispatch({ field: 'messageIsStreaming', value: false });\n        }\n      }\n    },\n    [\n      apiKey,\n      conversations,\n      pluginKeys,\n      selectedConversation,\n      stopConversationRef,\n    ],\n  );\n\n  const scrollToBottom = useCallback(() => {\n    if (autoScrollEnabled) {\n      messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n      textareaRef.current?.focus();\n    }\n  }, [autoScrollEnabled]);\n\n  const handleScroll = () => {\n    if (chatContainerRef.current) {\n      const { scrollTop, scrollHeight, clientHeight } =\n        chatContainerRef.current;\n      const bottomTolerance = 30;\n\n      if (scrollTop + clientHeight < scrollHeight - bottomTolerance) {\n        setAutoScrollEnabled(false);\n        setShowScrollDownButton(true);\n      } else {\n        setAutoScrollEnabled(true);\n        setShowScrollDownButton(false);\n      }\n    }\n  };\n\n  const handleScrollDown = () => {\n    chatContainerRef.current?.scrollTo({\n      top: chatContainerRef.current.scrollHeight,\n      behavior: 'smooth',\n    });\n  };\n\n  const handleSettings = () => {\n    setShowSettings(!showSettings);\n  };\n\n  const onClearAll = () => {\n    if (\n      confirm(t<string>('Are you sure you want to clear all messages?')) &&\n      selectedConversation\n    ) {\n      handleUpdateConversation(selectedConversation, {\n        key: 'messages',\n        value: [],\n      });\n    }\n  };\n\n  const scrollDown = () => {\n    if (autoScrollEnabled) {\n      messagesEndRef.current?.scrollIntoView(true);\n    }\n  };\n  const throttledScrollDown = throttle(scrollDown, 250);\n\n  // useEffect(() => {\n  //   console.log('currentMessage', currentMessage);\n  //   if (currentMessage) {\n  //     handleSend(currentMessage);\n  //     homeDispatch({ field: 'currentMessage', value: undefined });\n  //   }\n  // }, [currentMessage]);\n\n  useEffect(() => {\n    throttledScrollDown();\n    selectedConversation &&\n      setCurrentMessage(\n        selectedConversation.messages[selectedConversation.messages.length - 2],\n      );\n  }, [selectedConversation, throttledScrollDown]);\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        setAutoScrollEnabled(entry.isIntersecting);\n        if (entry.isIntersecting) {\n          textareaRef.current?.focus();\n        }\n      },\n      {\n        root: null,\n        threshold: 0.5,\n      },\n    );\n    const messagesEndElement = messagesEndRef.current;\n    if (messagesEndElement) {\n      observer.observe(messagesEndElement);\n    }\n    return () => {\n      if (messagesEndElement) {\n        observer.unobserve(messagesEndElement);\n      }\n    };\n  }, [messagesEndRef]);\n\n  return (\n    <div className=\"relative flex-1 overflow-hidden bg-white dark:bg-[#343541]\">\n      {!(apiKey || serverSideApiKeyIsSet) ? (\n        <div className=\"mx-auto flex h-full w-[300px] flex-col justify-center space-y-6 sm:w-[600px]\">\n          <div className=\"text-center text-4xl font-bold text-black dark:text-white\">\n            Welcome to Chatbot UI\n          </div>\n          <div className=\"text-center text-lg text-black dark:text-white\">\n            <div className=\"mb-8\">{`Chatbot UI is an open source clone of OpenAI's ChatGPT UI.`}</div>\n            <div className=\"mb-2 font-bold\">\n              Important: Chatbot UI is 100% unaffiliated with OpenAI.\n            </div>\n          </div>\n          <div className=\"text-center text-gray-500 dark:text-gray-400\">\n            <div className=\"mb-2\">\n              Chatbot UI allows you to plug in your API key to use this UI with\n              their API.\n            </div>\n            <div className=\"mb-2\">\n              It is <span className=\"italic\">only</span> used to communicate\n              with their API.\n            </div>\n            <div className=\"mb-2\">\n              {t(\n                'Please set your OpenAI API key in the bottom left of the sidebar.',\n              )}\n            </div>\n            <div>\n              {t(\"If you don't have an OpenAI API key, you can get one here: \")}\n              <a\n                href=\"https://platform.openai.com/account/api-keys\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                className=\"text-blue-500 hover:underline\"\n              >\n                openai.com\n              </a>\n            </div>\n          </div>\n        </div>\n      ) : modelError ? (\n        <ErrorMessageDiv error={modelError} />\n      ) : (\n        <>\n          <div\n            className=\"max-h-full overflow-x-hidden\"\n            ref={chatContainerRef}\n            onScroll={handleScroll}\n          >\n            {selectedConversation?.messages.length === 0 ? (\n              <>\n                <div className=\"mx-auto flex flex-col space-y-5 md:space-y-10 px-3 pt-5 md:pt-12 sm:max-w-[600px]\">\n                  <div className=\"text-center text-3xl font-semibold text-gray-800 dark:text-gray-100\">\n                    {models.length === 0 ? (\n                      <div>\n                        <Spinner size=\"16px\" className=\"mx-auto\" />\n                      </div>\n                    ) : (\n                      'Chatbot UI'\n                    )}\n                  </div>\n\n                  {models.length > 0 && (\n                    <div className=\"flex h-full flex-col space-y-4 rounded-lg border border-neutral-200 p-4 dark:border-neutral-600\">\n                      <ModelSelect />\n\n                      <SystemPrompt\n                        conversation={selectedConversation}\n                        prompts={prompts}\n                        onChangePrompt={(prompt) =>\n                          handleUpdateConversation(selectedConversation, {\n                            key: 'prompt',\n                            value: prompt,\n                          })\n                        }\n                      />\n\n                      <TemperatureSlider\n                        label={t('Temperature')}\n                        onChangeTemperature={(temperature) =>\n                          handleUpdateConversation(selectedConversation, {\n                            key: 'temperature',\n                            value: temperature,\n                          })\n                        }\n                      />\n                    </div>\n                  )}\n                </div>\n              </>\n            ) : (\n              <>\n                <div className=\"sticky top-0 z-10 flex justify-center border border-b-neutral-300 bg-neutral-100 py-2 text-sm text-neutral-500 dark:border-none dark:bg-[#444654] dark:text-neutral-200\">\n                  {t('Model')}: {selectedConversation?.model.name} | {t('Temp')}\n                  : {selectedConversation?.temperature} |\n                  <button\n                    className=\"ml-2 cursor-pointer hover:opacity-50\"\n                    onClick={handleSettings}\n                  >\n                    <IconSettings size={18} />\n                  </button>\n                  <button\n                    className=\"ml-2 cursor-pointer hover:opacity-50\"\n                    onClick={onClearAll}\n                  >\n                    <IconClearAll size={18} />\n                  </button>\n                </div>\n                {showSettings && (\n                  <div className=\"flex flex-col space-y-10 md:mx-auto md:max-w-xl md:gap-6 md:py-3 md:pt-6 lg:max-w-2xl lg:px-0 xl:max-w-3xl\">\n                    <div className=\"flex h-full flex-col space-y-4 border-b border-neutral-200 p-4 dark:border-neutral-600 md:rounded-lg md:border\">\n                      <ModelSelect />\n                    </div>\n                  </div>\n                )}\n\n                {selectedConversation?.messages.map((message, index) => (\n                  <MemoizedChatMessage\n                    key={index}\n                    message={message}\n                    messageIndex={index}\n                    onEdit={(editedMessage) => {\n                      setCurrentMessage(editedMessage);\n                      // discard edited message and the ones that come after then resend\n                      handleSend(\n                        editedMessage,\n                        selectedConversation?.messages.length - index,\n                      );\n                    }}\n                  />\n                ))}\n\n                {loading && <ChatLoader />}\n\n                <div\n                  className=\"h-[162px] bg-white dark:bg-[#343541]\"\n                  ref={messagesEndRef}\n                />\n              </>\n            )}\n          </div>\n\n          <ChatInput\n            stopConversationRef={stopConversationRef}\n            textareaRef={textareaRef}\n            onSend={(message, plugin) => {\n              setCurrentMessage(message);\n              handleSend(message, 0, plugin);\n            }}\n            onScrollDownClick={handleScrollDown}\n            onRegenerate={() => {\n              if (currentMessage) {\n                handleSend(currentMessage, 2, null);\n              }\n            }}\n            showScrollDownButton={showScrollDownButton}\n          />\n        </>\n      )}\n    </div>\n  );\n});\nChat.displayName = 'Chat';\n","file":"/components/Chat/Chat.tsx","language":"typescript","fileHash":"3305a19f2c06814eeee52e437155702febc0f5d7d52f4861414577b1659fa1d6","hash":"3305a19f2c06814eeee52e437155702febc0f5d7d52f4861414577b1659fa1d6","processedContent":"import { IconClearAll, IconSettings } from '@tabler/icons-react';\nimport {\n  MutableRefObject, #undefined\n  memo, #undefined\n  useCallback, #undefined\n  useContext,\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().: undefined\n  \"\"\"\n  useEffect, #undefined\n  useRef, #undefined\n  useState, #undefined\n} from 'react'; #undefined\nimport toast from 'react-hot-toast';\n\nimport { useTranslation } from 'next-i18next';\n\nimport { getEndpoint } from '@/utils/app/api';\nimport {\n  saveConversation,\n  saveConversations,\n  updateConversation,\n} from '@/utils/app/conversation';\nimport { throttle } from '@/utils/data/throttle';\n\nimport { ChatBody, Conversation, Message } from '@/types/chat';\nimport { Plugin } from '@/types/plugin';\n\nimport HomeContext from '@/pages/api/home/home.context';\n\nimport Spinner from '../Spinner';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.: This code defines a React component that renders an SVG icon with 12 lines, used to indicate the loading state of a page or application.\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`index.ts`/: This code defines a React component called \"Spinner\" that renders an SVG icon with 12 lines, used to indicate the loading state of a page or application.\n\"\"\"\nimport { ChatInput } from './ChatInput';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.: The code defines a React component that renders a chat interface for a chatbot, allowing users to input text and select prompts. It also includes a modal dialog for inputting values for variables in the chatbot's responses.\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/: The code defines a React component that renders a chat interface for a chatbot, allowing users to input text and select prompts. It also includes a modal dialog for inputting values for variables in the chatbot's responses.\n\"\"\"\nimport { ChatLoader } from './ChatLoader';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatLoader.tsx`/ChatLoader.: This code defines a React component that renders a div element with a robot icon and a loading animation. The component uses TypeScript to define the types of its props and state, and it imports the necessary dependencies from the `@types/react` package.\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatLoader.tsx`/: The code defines a React component called \"ChatLoader\" that renders a div element with a robot icon and a loading animation. It uses TypeScript to define the types of its props and state, and it imports the necessary dependencies from the `@types/react` package.\n\"\"\"\nimport { ErrorMessageDiv } from './ErrorMessageDiv';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ErrorMessageDiv.tsx`/ErrorMessageDiv.: This code defines a function that takes an error object as an argument and returns a React component that displays the error message, including the error title, description, and code (if available). The component uses CSS classes to style the layout and text.\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ErrorMessageDiv.tsx`/: This code defines a React component called ErrorMessageDiv that takes an error object as a prop and displays the error message, including the title, description, and code (if available). The component uses CSS classes to style the layout and text.\n\"\"\"\nimport { ModelSelect } from './ModelSelect';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ModelSelect.tsx`/ModelSelect.: This code is a React component that renders a dropdown menu for selecting an OpenAI model. It uses the `useTranslation` hook to localize the text, and the `useContext` hook to access the selected conversation and models from the HomeContext. The component also includes a link to view account usage.\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ModelSelect.tsx`/: This code is a React component that renders a dropdown menu for selecting an OpenAI model. It uses the `useTranslation` hook to localize the text and the `useContext` hook to access the selected conversation and models from the HomeContext.\n\"\"\"\nimport { SystemPrompt } from './SystemPrompt';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.: This code defines a React component that allows users to input text and select from a list of pre-defined prompts. The component also includes a modal dialog for the user to input values for variables in the selected prompt.\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/: This code defines a React component that allows users to input text and select from a list of pre-defined prompts. The component also includes a modal dialog for the user to input values for variables in the selected prompt.\n\"\"\"\nimport { TemperatureSlider } from './Temperature';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.: This code defines a React component that allows the user to adjust the temperature of a chatbot. The component uses the `useContext` hook to access the conversations and the `useState` hook to store the current temperature. The component also includes a range input field for the user to adjust the temperature, as well as a set of labels and tooltips to help the user understand the different temperature options.\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/: This code defines a React component that allows the user to adjust the temperature of a chatbot. It uses the `useContext` hook to access conversations and the `useState` hook to store the current temperature, and includes a range input field, labels, and tooltips to help the user understand different temperature options.\n\"\"\"\nimport { MemoizedChatMessage } from './MemoizedChatMessage';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`MemoizedChatMessage.tsx`/MemoizedChatMessage.: undefined\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`MemoizedChatMessage.tsx`/: This code defines a React component called \"MemoizedChatMessage\" that memoizes the \"ChatMessage\" component, which displays a chat message in a syntax-highlighted format. The component takes in props that include a message object, an index for the message, and an optional callback function for when the message is edited.\n\"\"\"\n\ninterface Props {\n  \"\"\"This code defines a type called `Props` that has a single property called `stopConversationRef`, which is a mutable reference to a boolean value.\"\"\"\n  pass\n\nexport const Chat = memo(({ stopConversationRef }: Props) => {\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/Props#: This code defines a type called `Props` that has a single property called `stopConversationRef`, which is a mutable reference to a boolean value.\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/memo().: undefined\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/Props#stopConversationRef.: undefined\n\"\"\"\n  const { t } = useTranslation('chat');\n\n  const {\n    state: {\n      selectedConversation,\n      conversations,\n      models,\n      apiKey,\n      pluginKeys,\n      serverSideApiKeyIsSet,\n      messageIsStreaming,\n      modelError,\n      loading,\n      prompts,\n    },\n    handleUpdateConversation,\n    dispatch: homeDispatch,\n  } = useContext(HomeContext);\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().: undefined\n  \"\"\"\n\n  const [currentMessage, setCurrentMessage] = useState<Message>(); #undefined\n  const [autoScrollEnabled, setAutoScrollEnabled] = useState<boolean>(true); #undefined\n  const [showSettings, setShowSettings] = useState<boolean>(false); #undefined\n  const [showScrollDownButton, setShowScrollDownButton] =\n    useState<boolean>(false); #undefined\n\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLDivElement#: undefined\n  \"\"\"\n  const chatContainerRef = useRef<HTMLDivElement>(null);\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLDivElement#: undefined\n  \"\"\"\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLTextAreaElement#: undefined\n  \"\"\"\n\n  const handleSend = useCallback( #undefined\n    async (message: Message, deleteCount = 0, plugin: Plugin | null = null) => {\n      if (selectedConversation) {\n        let updatedConversation: Conversation;\n        if (deleteCount) {\n          const updatedMessages = [...selectedConversation.messages];\n          for (let i = 0; i < deleteCount; i++) {\n            updatedMessages.pop();\n          }\n          updatedConversation = {\n            ...selectedConversation,\n            messages: [...updatedMessages, message],\n          };\n        } else {\n          updatedConversation = {\n            ...selectedConversation,\n            messages: [...selectedConversation.messages, message],\n          };\n        }\n        homeDispatch({\n          field: 'selectedConversation',\n          value: updatedConversation,\n        });\n        homeDispatch({ field: 'loading', value: true });\n        homeDispatch({ field: 'messageIsStreaming', value: true });\n        const chatBody: ChatBody = {\n          model: updatedConversation.model,\n          messages: updatedConversation.messages,\n          key: apiKey,\n          prompt: updatedConversation.prompt,\n          temperature: updatedConversation.temperature,\n        };\n        const endpoint = getEndpoint(plugin);\n        let body;\n        if (!plugin) {\n          body = JSON.stringify(chatBody);\n        } else {\n          body = JSON.stringify({\n            ...chatBody,\n            googleAPIKey: pluginKeys\n              .find((key) => key.pluginId === 'google-search')\n              ?.requiredKeys.find((key) => key.key === 'GOOGLE_API_KEY')?.value,\n            googleCSEId: pluginKeys\n              .find((key) => key.pluginId === 'google-search')\n              ?.requiredKeys.find((key) => key.key === 'GOOGLE_CSE_ID')?.value,\n          });\n        }\n        const controller = new AbortController();\n        \"\"\"\n        scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/AbortController#: undefined\n        scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/AbortController.: undefined\n        \"\"\"\n        const response = await fetch(endpoint, { #undefined\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          signal: controller.signal, #undefined\n          body,\n        });\n        if (!response.ok) {\n          homeDispatch({ field: 'loading', value: false });\n          homeDispatch({ field: 'messageIsStreaming', value: false });\n          toast.error(response.statusText);\n          return;\n        }\n        const data = response.body;\n        if (!data) {\n          homeDispatch({ field: 'loading', value: false });\n          homeDispatch({ field: 'messageIsStreaming', value: false });\n          return;\n        }\n        if (!plugin) {\n          if (updatedConversation.messages.length === 1) {\n            const { content } = message;\n            const customName =\n              content.length > 30 ? content.substring(0, 30) + '...' : content;\n            updatedConversation = {\n              ...updatedConversation,\n              name: customName,\n            };\n          }\n          homeDispatch({ field: 'loading', value: false });\n          const reader = data.getReader();\n          const decoder = new TextDecoder(); #undefined\n          let done = false;\n          let isFirst = true;\n          let text = '';\n          while (!done) {\n            if (stopConversationRef.current === true) { #undefined\n              controller.abort(); #undefined\n              done = true;\n              break;\n            }\n            const { value, done: doneReading } = await reader.read();\n            done = doneReading;\n            const chunkValue = decoder.decode(value); #undefined\n            text += chunkValue;\n            if (isFirst) {\n              isFirst = false;\n              const updatedMessages: Message[] = [\n                ...updatedConversation.messages,\n                { role: 'assistant', content: chunkValue },\n              ];\n              updatedConversation = {\n                ...updatedConversation,\n                messages: updatedMessages,\n              };\n              homeDispatch({\n                field: 'selectedConversation',\n                value: updatedConversation,\n              });\n            } else {\n              const updatedMessages: Message[] =\n                updatedConversation.messages.map((message, index) => {\n                  if (index === updatedConversation.messages.length - 1) {\n                    return {\n                      ...message,\n                      content: text,\n                    };\n                  }\n                  return message;\n                });\n              updatedConversation = {\n                ...updatedConversation,\n                messages: updatedMessages,\n              };\n              homeDispatch({\n                field: 'selectedConversation',\n                value: updatedConversation,\n              });\n            }\n          }\n          saveConversation(updatedConversation);\n          const updatedConversations: Conversation[] = conversations.map(\n            (conversation) => {\n              if (conversation.id === selectedConversation.id) {\n                return updatedConversation;\n              }\n              return conversation;\n            },\n          );\n          if (updatedConversations.length === 0) {\n            updatedConversations.push(updatedConversation);\n          }\n          homeDispatch({ field: 'conversations', value: updatedConversations });\n          saveConversations(updatedConversations);\n          homeDispatch({ field: 'messageIsStreaming', value: false });\n        } else {\n          const { answer } = await response.json();\n          const updatedMessages: Message[] = [\n            ...updatedConversation.messages,\n            { role: 'assistant', content: answer },\n          ];\n          updatedConversation = {\n            ...updatedConversation,\n            messages: updatedMessages,\n          };\n          homeDispatch({\n            field: 'selectedConversation',\n            value: updateConversation,\n          });\n          saveConversation(updatedConversation);\n          const updatedConversations: Conversation[] = conversations.map(\n            (conversation) => {\n              if (conversation.id === selectedConversation.id) {\n                return updatedConversation;\n              }\n              return conversation;\n            },\n          );\n          if (updatedConversations.length === 0) {\n            updatedConversations.push(updatedConversation);\n          }\n          homeDispatch({ field: 'conversations', value: updatedConversations });\n          saveConversations(updatedConversations);\n          homeDispatch({ field: 'loading', value: false });\n          homeDispatch({ field: 'messageIsStreaming', value: false });\n        }\n      }\n    },\n    [\n      apiKey,\n      conversations,\n      pluginKeys,\n      selectedConversation,\n      stopConversationRef,\n    ],\n  );\n\n  const scrollToBottom = useCallback(() => { #undefined\n    if (autoScrollEnabled) {\n      messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' }); #undefined\n      textareaRef.current?.focus(); #undefined\n    }\n  }, [autoScrollEnabled]);\n\n  const handleScroll = () => {\n    if (chatContainerRef.current) { #undefined\n      const { scrollTop, scrollHeight, clientHeight } =\n        chatContainerRef.current; #undefined\n      const bottomTolerance = 30;\n\n      if (scrollTop + clientHeight < scrollHeight - bottomTolerance) {\n        setAutoScrollEnabled(false);\n        setShowScrollDownButton(true);\n      } else {\n        setAutoScrollEnabled(true);\n        setShowScrollDownButton(false);\n      }\n    }\n  };\n\n  const handleScrollDown = () => {\n    chatContainerRef.current?.scrollTo({ #undefined\n      top: chatContainerRef.current.scrollHeight, #undefined\n      behavior: 'smooth',\n    });\n  };\n\n  const handleSettings = () => {\n    setShowSettings(!showSettings);\n  };\n\n  const onClearAll = () => {\n    if (\n      confirm(t<string>('Are you sure you want to clear all messages?')) &&\n      selectedConversation\n    ) {\n      handleUpdateConversation(selectedConversation, {\n        key: 'messages',\n        value: [],\n      });\n    }\n  };\n\n  const scrollDown = () => {\n    if (autoScrollEnabled) {\n      messagesEndRef.current?.scrollIntoView(true); #undefined\n    }\n  };\n  const throttledScrollDown = throttle(scrollDown, 250);\n\n  // useEffect(() => {\n  //   console.log('currentMessage', currentMessage);\n  //   if (currentMessage) {\n  //     handleSend(currentMessage);\n  //     homeDispatch({ field: 'currentMessage', value: undefined });\n  //   }\n  // }, [currentMessage]);\n\n  useEffect(() => { #undefined\n    throttledScrollDown();\n    selectedConversation &&\n      setCurrentMessage(\n        selectedConversation.messages[selectedConversation.messages.length - 2],\n      );\n  }, [selectedConversation, throttledScrollDown]);\n\n  useEffect(() => { #undefined\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        setAutoScrollEnabled(entry.isIntersecting);\n        if (entry.isIntersecting) {\n          textareaRef.current?.focus(); #undefined\n        }\n      },\n      {\n        root: null,\n        threshold: 0.5,\n      },\n    );\n    const messagesEndElement = messagesEndRef.current; #undefined\n    if (messagesEndElement) {\n      observer.observe(messagesEndElement);\n    }\n    return () => {\n      if (messagesEndElement) {\n        observer.unobserve(messagesEndElement);\n      }\n    };\n  }, [messagesEndRef]);\n\n  return (\n    <div className=\"relative flex-1 overflow-hidden bg-white dark:bg-[#343541]\">\n    \"\"\"\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n    \"\"\"\n      {!(apiKey || serverSideApiKeyIsSet) ? (\n        <div className=\"mx-auto flex h-full w-[300px] flex-col justify-center space-y-6 sm:w-[600px]\">\n        \"\"\"\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n        \"\"\"\n          <div className=\"text-center text-4xl font-bold text-black dark:text-white\">\n          \"\"\"\n          scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n          scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n          \"\"\"\n            Welcome to Chatbot UI\n          </div> #undefined\n          <div className=\"text-center text-lg text-black dark:text-white\">\n          \"\"\"\n          scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n          scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n          \"\"\"\n            <div className=\"mb-8\">{`Chatbot UI is an open source clone of OpenAI's ChatGPT UI.`}</div>\n            \"\"\"\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n            \"\"\"\n            <div className=\"mb-2 font-bold\">\n            \"\"\"\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n            \"\"\"\n              Important: Chatbot UI is 100% unaffiliated with OpenAI.\n            </div> #undefined\n          </div> #undefined\n          <div className=\"text-center text-gray-500 dark:text-gray-400\">\n          \"\"\"\n          scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n          scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n          \"\"\"\n            <div className=\"mb-2\">\n            \"\"\"\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n            \"\"\"\n            \"\"\"\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n            \"\"\"\n            \"\"\"\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n            \"\"\"\n              Chatbot UI allows you to plug in your API key to use this UI with\n              their API.\n            </div> #undefined\n            <div className=\"mb-2\">\n              It is <span className=\"italic\">only</span> used to communicate\n              \"\"\"\n              scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n              scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#span.: undefined\n              scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#span.: undefined\n              \"\"\"\n              with their API.\n            </div> #undefined\n            <div className=\"mb-2\">\n              {t(\n                'Please set your OpenAI API key in the bottom left of the sidebar.',\n              )}\n            </div> #undefined\n            <div> #undefined\n              {t(\"If you don't have an OpenAI API key, you can get one here: \")}\n              <a #undefined\n                href=\"https://platform.openai.com/account/api-keys\" #undefined\n                target=\"_blank\" #undefined\n                rel=\"noreferrer\" #undefined\n                className=\"text-blue-500 hover:underline\" #undefined\n              >\n                openai.com\n              </a> #undefined\n            </div> #undefined\n          </div> #undefined\n        </div>\n      ) : modelError ? (\n        <ErrorMessageDiv error={modelError} />\n        \"\"\"\n        scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ErrorMessageDiv.tsx`/ErrorMessageDiv.: This code defines a function that takes an error object as an argument and returns a React component that displays the error message, including the error title, description, and code (if available). The component uses CSS classes to style the layout and text.\n        scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ErrorMessageDiv.tsx`/Props#error.: undefined\n        \"\"\"\n      ) : (\n        <>\n          <div #undefined\n            className=\"max-h-full overflow-x-hidden\" #undefined\n            ref={chatContainerRef} #undefined\n            onScroll={handleScroll} #undefined\n          >\n            {selectedConversation?.messages.length === 0 ? (\n              <>\n                <div className=\"mx-auto flex flex-col space-y-5 md:space-y-10 px-3 pt-5 md:pt-12 sm:max-w-[600px]\">\n                \"\"\"\n                scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n                scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n                \"\"\"\n                  <div className=\"text-center text-3xl font-semibold text-gray-800 dark:text-gray-100\">\n                  \"\"\"\n                  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n                  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n                  \"\"\"\n                    {models.length === 0 ? (\n                      <div> #undefined\n                        <Spinner size=\"16px\" className=\"mx-auto\" />\n                        \"\"\"\n                        scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.: This code defines a React component that renders an SVG icon with 12 lines, used to indicate the loading state of a page or application.\n                        scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Props#size.: undefined\n                        scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Props#className.: undefined\n                        \"\"\"\n                      </div> #undefined\n                    ) : (\n                      'Chatbot UI'\n                    )}\n                  </div> #undefined\n\n                  {models.length > 0 && (\n                    <div className=\"flex h-full flex-col space-y-4 rounded-lg border border-neutral-200 p-4 dark:border-neutral-600\">\n                    \"\"\"\n                    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n                    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n                    \"\"\"\n                      <ModelSelect /> #This code is a React component that renders a dropdown menu for selecting an OpenAI model. It uses the `useTranslation` hook to localize the text, and the `useContext` hook to access the selected conversation and models from the HomeContext. The component also includes a link to view account usage.\n\n                      <SystemPrompt #This code defines a React component that allows users to input text and select from a list of pre-defined prompts. The component also includes a modal dialog for the user to input values for variables in the selected prompt.\n                        conversation={selectedConversation} #undefined\n                        prompts={prompts} #undefined\n                        onChangePrompt={(prompt) => #undefined\n                          handleUpdateConversation(selectedConversation, {\n                            key: 'prompt',\n                            value: prompt,\n                          })\n                        }\n                      />\n\n                      <TemperatureSlider #This code defines a React component that allows the user to adjust the temperature of a chatbot. The component uses the `useContext` hook to access the conversations and the `useState` hook to store the current temperature. The component also includes a range input field for the user to adjust the temperature, as well as a set of labels and tooltips to help the user understand the different temperature options.\n                        label={t('Temperature')} #undefined\n                        onChangeTemperature={(temperature) => #undefined\n                          handleUpdateConversation(selectedConversation, {\n                            key: 'temperature',\n                            value: temperature,\n                          })\n                        }\n                      />\n                    </div> #undefined\n                  )}\n                </div> #undefined\n              </>\n            ) : (\n              <>\n                <div className=\"sticky top-0 z-10 flex justify-center border border-b-neutral-300 bg-neutral-100 py-2 text-sm text-neutral-500 dark:border-none dark:bg-[#444654] dark:text-neutral-200\">\n                \"\"\"\n                scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n                scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n                \"\"\"\n                  {t('Model')}: {selectedConversation?.model.name} | {t('Temp')}\n                  : {selectedConversation?.temperature} |\n                  <button #undefined\n                    className=\"ml-2 cursor-pointer hover:opacity-50\" #undefined\n                    onClick={handleSettings} #undefined\n                  >\n                    <IconSettings size={18} />\n                  </button> #undefined\n                  <button #undefined\n                    className=\"ml-2 cursor-pointer hover:opacity-50\" #undefined\n                    onClick={onClearAll} #undefined\n                  >\n                    <IconClearAll size={18} />\n                  </button> #undefined\n                </div> #undefined\n                {showSettings && (\n                  <div className=\"flex flex-col space-y-10 md:mx-auto md:max-w-xl md:gap-6 md:py-3 md:pt-6 lg:max-w-2xl lg:px-0 xl:max-w-3xl\">\n                  \"\"\"\n                  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n                  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n                  \"\"\"\n                    <div className=\"flex h-full flex-col space-y-4 border-b border-neutral-200 p-4 dark:border-neutral-600 md:rounded-lg md:border\">\n                    \"\"\"\n                    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n                    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n                    \"\"\"\n                      <ModelSelect /> #This code is a React component that renders a dropdown menu for selecting an OpenAI model. It uses the `useTranslation` hook to localize the text, and the `useContext` hook to access the selected conversation and models from the HomeContext. The component also includes a link to view account usage.\n                    </div> #undefined\n                  </div> #undefined\n                )}\n\n                {selectedConversation?.messages.map((message, index) => (\n                  <MemoizedChatMessage #undefined\n                    key={index}\n                    message={message} #undefined\n                    messageIndex={index} #undefined\n                    onEdit={(editedMessage) => { #undefined\n                      setCurrentMessage(editedMessage);\n                      // discard edited message and the ones that come after then resend\n                      handleSend(\n                        editedMessage,\n                        selectedConversation?.messages.length - index,\n                      );\n                    }}\n                  />\n                ))}\n\n                {loading && <ChatLoader />} #This code defines a React component that renders a div element with a robot icon and a loading animation. The component uses TypeScript to define the types of its props and state, and it imports the necessary dependencies from the `@types/react` package.\n\n                <div #undefined\n                  className=\"h-[162px] bg-white dark:bg-[#343541]\" #undefined\n                  ref={messagesEndRef} #undefined\n                />\n              </>\n            )}\n          </div> #undefined\n\n          <ChatInput #The code defines a React component that renders a chat interface for a chatbot, allowing users to input text and select prompts. It also includes a modal dialog for inputting values for variables in the chatbot's responses.\n            stopConversationRef={stopConversationRef} #undefined\n            textareaRef={textareaRef} #undefined\n            onSend={(message, plugin) => { #undefined\n              setCurrentMessage(message);\n              handleSend(message, 0, plugin);\n            }}\n            onScrollDownClick={handleScrollDown} #undefined\n            onRegenerate={() => { #undefined\n              if (currentMessage) {\n                handleSend(currentMessage, 2, null);\n              }\n            }}\n            showScrollDownButton={showScrollDownButton} #undefined\n          />\n        </>\n      )}\n    </div>\n  );\n});\nChat.displayName = 'Chat';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/Chat.: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/NamedExoticComponent#displayName.: undefined\n\"\"\"\n","documentation":"The code defines a React component called \"Chat\" that renders a chat interface for a chatbot, allowing users to input text and select prompts. It also includes a modal dialog for inputting values for variables in the chatbot's responses."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/Props#","attributes":{"range":[36,0,38,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/Props#","content":"interface Props {\n  stopConversationRef: MutableRefObject<boolean>;\n}","file":"/components/Chat/Chat.tsx","language":"typescript","fileHash":"3305a19f2c06814eeee52e437155702febc0f5d7d52f4861414577b1659fa1d6","hash":"2d01a2557e3be90b0b18e5a8971c088fe1b4849038aded236c3421fdbdfa8f54","processedContent":"interface Props {\n  stopConversationRef: MutableRefObject<boolean>; #undefined\n}","documentation":"This code defines a type called `Props` that has a single property called `stopConversationRef`, which is a mutable reference to a boolean value."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`MemoizedChatMessage.tsx`/MemoizedChatMessage.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`MemoizedChatMessage.tsx`/MemoizedChatMessage.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/Props#stopConversationRef.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/Props#stopConversationRef.","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/AbortController#","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/AbortController#","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/AbortController.","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/AbortController.","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/AbortController#signal.","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/AbortController#signal.","language":"typescript"}},{"key":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/AbortController#abort().","attributes":{"symbol":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/AbortController#abort().","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onScroll.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onScroll.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/Chat.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/Chat.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/NamedExoticComponent#displayName.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/NamedExoticComponent#displayName.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Props#","attributes":{"range":[43,0,47,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Props#","content":"interface Props {\n  serverSideApiKeyIsSet: boolean;\n  serverSidePluginKeysSet: boolean;\n  defaultModelId: OpenAIModelID;\n}","file":"/pages/api/home/home.tsx","language":"typescript","fileHash":"29efd041208997937e22273fccce62905ed6ef4f8c4d9a288c894efe40972e1f","hash":"601494df6f6456590bb070540405f6fe2284cdfc446d75d8f386cdf1ed57dd0e","processedContent":"interface Props {\n  serverSideApiKeyIsSet: boolean;\n  serverSidePluginKeysSet: boolean;\n  defaultModelId: OpenAIModelID;\n}","documentation":"This code defines a set of properties for a component that will be used to render a specific view. The properties include a flag indicating whether the server-side API key is set, another flag indicating whether the server-side plugin keys are set, and a default model ID for the OpenAI model that will be used to generate text."}},{"key":"scip-typescript npm next 14.0.3 types/`index.d.ts`/GetServerSideProps#","attributes":{"symbol":"scip-typescript npm next 14.0.3 types/`index.d.ts`/GetServerSideProps#","language":"typescript"}},{"key":"scip-typescript npm next 14.0.3 dist/shared/lib/`head.d.ts`/Head().","attributes":{"symbol":"scip-typescript npm next 14.0.3 dist/shared/lib/`head.d.ts`/Head().","language":"typescript"}},{"key":"scip-typescript npm next 14.0.3 `head.d.ts`/","attributes":{"symbol":"scip-typescript npm next 14.0.3 `head.d.ts`/","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.context.tsx`/HomeContext.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.context.tsx`/HomeContext.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.context.tsx`/","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.context.tsx`/","language":"typescript","range":[0,0,27,0],"content":"import { Dispatch, createContext } from 'react';\n\nimport { ActionType } from '@/hooks/useCreateReducer';\n\nimport { Conversation } from '@/types/chat';\nimport { KeyValuePair } from '@/types/data';\nimport { FolderType } from '@/types/folder';\n\nimport { HomeInitialState } from './home.state';\n\nexport interface HomeContextProps {\n  state: HomeInitialState;\n  dispatch: Dispatch<ActionType<HomeInitialState>>;\n  handleNewConversation: () => void;\n  handleCreateFolder: (name: string, type: FolderType) => void;\n  handleDeleteFolder: (folderId: string) => void;\n  handleUpdateFolder: (folderId: string, name: string) => void;\n  handleSelectConversation: (conversation: Conversation) => void;\n  handleUpdateConversation: (\n    conversation: Conversation,\n    data: KeyValuePair,\n  ) => void;\n}\n\nconst HomeContext = createContext<HomeContextProps>(undefined!);\n\nexport default HomeContext;\n","file":"/pages/api/home/home.context.tsx","fileHash":"699ac506457c5c281c04dbec8d42a7aec13e2b3020041be864c9294918a33e53","hash":"699ac506457c5c281c04dbec8d42a7aec13e2b3020041be864c9294918a33e53","processedContent":"import { Dispatch, createContext } from 'react';\n\"\"\"\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/Dispatch#: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/createContext().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/: undefined\n\"\"\"\n\nimport { ActionType } from '@/hooks/useCreateReducer';\n\nimport { Conversation } from '@/types/chat';\nimport { KeyValuePair } from '@/types/data';\nimport { FolderType } from '@/types/folder';\n\nimport { HomeInitialState } from './home.state';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.state.tsx`/HomeInitialState#: This code defines an interface for the initial state of a home page, including various properties such as API keys, models, and conversations.\nscip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.state.tsx`/: This code defines an interface for the initial state of a home page, including various properties such as API keys, models, and conversations.\n\"\"\"\n\nexport interface HomeContextProps {\n  \"\"\"This code defines an interface for the initial state of a home page, including various properties such as API keys, models, and conversations.\"\"\"\n  pass\n\nconst HomeContext = createContext<HomeContextProps>(undefined!);\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.context.tsx`/HomeContextProps#: This code defines an interface for the initial state of a home page, including various properties such as API keys, models, and conversations.\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/createContext().: undefined\n\"\"\"\n\nexport default HomeContext; #undefined\n","documentation":"This code defines a context for the home page, including an initial state with properties such as API keys, models, and conversations. It also exports a default instance of the context."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.state.tsx`/HomeInitialState#","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.state.tsx`/HomeInitialState#","language":"typescript","range":[7,0,29,1],"content":"export interface HomeInitialState {\n  apiKey: string;\n  pluginKeys: PluginKey[];\n  loading: boolean;\n  lightMode: 'light' | 'dark';\n  messageIsStreaming: boolean;\n  modelError: ErrorMessage | null;\n  models: OpenAIModel[];\n  folders: FolderInterface[];\n  conversations: Conversation[];\n  selectedConversation: Conversation | undefined;\n  currentMessage: Message | undefined;\n  prompts: Prompt[];\n  temperature: number;\n  showChatbar: boolean;\n  showPromptbar: boolean;\n  currentFolder: FolderInterface | undefined;\n  messageError: boolean;\n  searchTerm: string;\n  defaultModelId: OpenAIModelID | undefined;\n  serverSideApiKeyIsSet: boolean;\n  serverSidePluginKeysSet: boolean;\n}","file":"/pages/api/home/home.state.tsx","fileHash":"796987cc13c4cf46d8cf655b57b90c3f25b8cd98175332857e855b842c7cb88a","hash":"d02f8f2b1b3ceb3e6f3ea38217877bb954ba61dcb522a9196cb615aa7427ed19","processedContent":"export interface HomeInitialState {\n  apiKey: string;\n  pluginKeys: PluginKey[];\n  loading: boolean;\n  lightMode: 'light' | 'dark';\n  messageIsStreaming: boolean;\n  modelError: ErrorMessage | null;\n  models: OpenAIModel[];\n  folders: FolderInterface[];\n  conversations: Conversation[];\n  selectedConversation: Conversation | undefined;\n  currentMessage: Message | undefined;\n  prompts: Prompt[];\n  temperature: number;\n  showChatbar: boolean;\n  showPromptbar: boolean;\n  currentFolder: FolderInterface | undefined;\n  messageError: boolean;\n  searchTerm: string;\n  defaultModelId: OpenAIModelID | undefined;\n  serverSideApiKeyIsSet: boolean;\n  serverSidePluginKeysSet: boolean;\n}","documentation":"This code defines an interface for the initial state of a home page, including various properties such as API keys, models, and conversations."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.state.tsx`/initialState.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.state.tsx`/initialState.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.state.tsx`/","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.state.tsx`/","language":"typescript","range":[0,0,54,0],"content":"import { Conversation, Message } from '@/types/chat';\nimport { ErrorMessage } from '@/types/error';\nimport { FolderInterface } from '@/types/folder';\nimport { OpenAIModel, OpenAIModelID } from '@/types/openai';\nimport { PluginKey } from '@/types/plugin';\nimport { Prompt } from '@/types/prompt';\n\nexport interface HomeInitialState {\n  apiKey: string;\n  pluginKeys: PluginKey[];\n  loading: boolean;\n  lightMode: 'light' | 'dark';\n  messageIsStreaming: boolean;\n  modelError: ErrorMessage | null;\n  models: OpenAIModel[];\n  folders: FolderInterface[];\n  conversations: Conversation[];\n  selectedConversation: Conversation | undefined;\n  currentMessage: Message | undefined;\n  prompts: Prompt[];\n  temperature: number;\n  showChatbar: boolean;\n  showPromptbar: boolean;\n  currentFolder: FolderInterface | undefined;\n  messageError: boolean;\n  searchTerm: string;\n  defaultModelId: OpenAIModelID | undefined;\n  serverSideApiKeyIsSet: boolean;\n  serverSidePluginKeysSet: boolean;\n}\n\nexport const initialState: HomeInitialState = {\n  apiKey: '',\n  loading: false,\n  pluginKeys: [],\n  lightMode: 'dark',\n  messageIsStreaming: false,\n  modelError: null,\n  models: [],\n  folders: [],\n  conversations: [],\n  selectedConversation: undefined,\n  currentMessage: undefined,\n  prompts: [],\n  temperature: 1,\n  showPromptbar: true,\n  showChatbar: true,\n  currentFolder: undefined,\n  messageError: false,\n  searchTerm: '',\n  defaultModelId: undefined,\n  serverSideApiKeyIsSet: false,\n  serverSidePluginKeysSet: false,\n};\n","file":"/pages/api/home/home.state.tsx","fileHash":"796987cc13c4cf46d8cf655b57b90c3f25b8cd98175332857e855b842c7cb88a","hash":"796987cc13c4cf46d8cf655b57b90c3f25b8cd98175332857e855b842c7cb88a","processedContent":"import { Conversation, Message } from '@/types/chat';\nimport { ErrorMessage } from '@/types/error';\nimport { FolderInterface } from '@/types/folder';\nimport { OpenAIModel, OpenAIModelID } from '@/types/openai';\nimport { PluginKey } from '@/types/plugin';\nimport { Prompt } from '@/types/prompt';\n\nexport interface HomeInitialState {\n  \"\"\"This code defines an interface for the initial state of a home page, including various properties such as API keys, models, and conversations.\"\"\"\n  pass\n\nexport const initialState: HomeInitialState = { #This code defines an interface for the initial state of a home page, including various properties such as API keys, models, and conversations.\n  apiKey: '',\n  loading: false,\n  pluginKeys: [],\n  lightMode: 'dark',\n  messageIsStreaming: false,\n  modelError: null,\n  models: [],\n  folders: [],\n  conversations: [],\n  selectedConversation: undefined,\n  currentMessage: undefined,\n  prompts: [],\n  temperature: 1,\n  showPromptbar: true,\n  showChatbar: true,\n  currentFolder: undefined,\n  messageError: false,\n  searchTerm: '',\n  defaultModelId: undefined,\n  serverSideApiKeyIsSet: false,\n  serverSidePluginKeysSet: false,\n};\n","documentation":"This code defines an interface for the initial state of a home page, including various properties such as API keys, models, and conversations."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Props#serverSideApiKeyIsSet.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Props#serverSideApiKeyIsSet.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Props#serverSidePluginKeysSet.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Props#serverSidePluginKeysSet.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Props#defaultModelId.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Props#defaultModelId.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#title.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#title.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#link.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#link.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/LinkHTMLAttributes#href.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/LinkHTMLAttributes#href.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#main.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#main.","language":"typescript"}},{"key":"scip-typescript npm next 14.0.3 types/`index.d.ts`/GetServerSidePropsContext#typeLiteral229:locale.","attributes":{"symbol":"scip-typescript npm next 14.0.3 types/`index.d.ts`/GetServerSidePropsContext#typeLiteral229:locale.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.context.tsx`/HomeContextProps#","attributes":{"range":[10,0,22,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.context.tsx`/HomeContextProps#","content":"export interface HomeContextProps {\n  state: HomeInitialState;\n  dispatch: Dispatch<ActionType<HomeInitialState>>;\n  handleNewConversation: () => void;\n  handleCreateFolder: (name: string, type: FolderType) => void;\n  handleDeleteFolder: (folderId: string) => void;\n  handleUpdateFolder: (folderId: string, name: string) => void;\n  handleSelectConversation: (conversation: Conversation) => void;\n  handleUpdateConversation: (\n    conversation: Conversation,\n    data: KeyValuePair,\n  ) => void;\n}","file":"/pages/api/home/home.context.tsx","language":"typescript","fileHash":"699ac506457c5c281c04dbec8d42a7aec13e2b3020041be864c9294918a33e53","hash":"87367a038c13ddcf94a496f780d291cc1430587ace58fe3efa5007627c2bff26","processedContent":"export interface HomeContextProps {\n  state: HomeInitialState; #This code defines an interface for the initial state of a home page, including various properties such as API keys, models, and conversations.\n  dispatch: Dispatch<ActionType<HomeInitialState>>;\n  \"\"\"\n  scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.state.tsx`/HomeInitialState#: This code defines an interface for the initial state of a home page, including various properties such as API keys, models, and conversations.\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/Dispatch#: undefined\n  \"\"\"\n  handleNewConversation: () => void;\n  handleCreateFolder: (name: string, type: FolderType) => void;\n  handleDeleteFolder: (folderId: string) => void;\n  handleUpdateFolder: (folderId: string, name: string) => void;\n  handleSelectConversation: (conversation: Conversation) => void;\n  handleUpdateConversation: (\n    conversation: Conversation,\n    data: KeyValuePair,\n  ) => void;\n}","documentation":"This code defines an interface for the initial state of a home page, including various properties such as API keys, models, and conversations."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/Props#","attributes":{"range":[2,0,5,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/Props#","content":"interface Props {\n  onClick: any;\n  side: 'left' | 'right';\n}","file":"/components/Sidebar/components/OpenCloseButton.tsx","language":"typescript","fileHash":"b60d675b5ecd9fb1cad65606f0d899e7202cac3c8bfa058c2d693f5dd110d5d7","hash":"ba3bbec7f55db60d4a6cc09a2a5c9a66f9b65d6bb6241caaa71a553fba0d742e","processedContent":"interface Props {\n  onClick: any;\n  side: 'left' | 'right';\n}","documentation":"This code defines a component's properties, including an `onClick` event handler and a `side` property that can be either 'left' or 'right'."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompts.tsx`/Props#","attributes":{"range":[6,0,8,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompts.tsx`/Props#","content":"interface Props {\n  prompts: Prompt[];\n}","file":"/components/Promptbar/components/Prompts.tsx","language":"typescript","fileHash":"6d9d51ad735bac5063606294c007ac67f7dc13cf5ddb19db99024fa5451061da","hash":"c2312ed19f5076643c924947b2388c76a61cd9b3717ace452830b4e5499b0f01","processedContent":"interface Props {\n  prompts: Prompt[];\n}","documentation":"This code defines a type called \"Props\" that contains an array of objects called \"Prompts\"."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","language":"typescript","range":[25,31,129,1],"content":"({ prompt }: Props) => {\n  const {\n    dispatch: promptDispatch,\n    handleUpdatePrompt,\n    handleDeletePrompt,\n  } = useContext(PromptbarContext);\n\n  const [showModal, setShowModal] = useState<boolean>(false);\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [isRenaming, setIsRenaming] = useState(false);\n  const [renameValue, setRenameValue] = useState('');\n\n  const handleUpdate = (prompt: Prompt) => {\n    handleUpdatePrompt(prompt);\n    promptDispatch({ field: 'searchTerm', value: '' });\n  };\n\n  const handleDelete: MouseEventHandler<HTMLButtonElement> = (e) => {\n    e.stopPropagation();\n\n    if (isDeleting) {\n      handleDeletePrompt(prompt);\n      promptDispatch({ field: 'searchTerm', value: '' });\n    }\n\n    setIsDeleting(false);\n  };\n\n  const handleCancelDelete: MouseEventHandler<HTMLButtonElement> = (e) => {\n    e.stopPropagation();\n    setIsDeleting(false);\n  };\n\n  const handleOpenDeleteModal: MouseEventHandler<HTMLButtonElement> = (e) => {\n    e.stopPropagation();\n    setIsDeleting(true);\n  };\n\n  const handleDragStart = (e: DragEvent<HTMLButtonElement>, prompt: Prompt) => {\n    if (e.dataTransfer) {\n      e.dataTransfer.setData('prompt', JSON.stringify(prompt));\n    }\n  };\n\n  useEffect(() => {\n    if (isRenaming) {\n      setIsDeleting(false);\n    } else if (isDeleting) {\n      setIsRenaming(false);\n    }\n  }, [isRenaming, isDeleting]);\n\n  return (\n    <div className=\"relative flex items-center\">\n      <button\n        className=\"flex w-full cursor-pointer items-center gap-3 rounded-lg p-3 text-sm transition-colors duration-200 hover:bg-[#343541]/90\"\n        draggable=\"true\"\n        onClick={(e) => {\n          e.stopPropagation();\n          setShowModal(true);\n        }}\n        onDragStart={(e) => handleDragStart(e, prompt)}\n        onMouseLeave={() => {\n          setIsDeleting(false);\n          setIsRenaming(false);\n          setRenameValue('');\n        }}\n      >\n        <IconBulbFilled size={18} />\n\n        <div className=\"relative max-h-5 flex-1 overflow-hidden text-ellipsis whitespace-nowrap break-all pr-4 text-left text-[12.5px] leading-3\">\n          {prompt.name}\n        </div>\n      </button>\n\n      {(isDeleting || isRenaming) && (\n        <div className=\"absolute right-1 z-10 flex text-gray-300\">\n          <SidebarActionButton handleClick={handleDelete}>\n            <IconCheck size={18} />\n          </SidebarActionButton>\n\n          <SidebarActionButton handleClick={handleCancelDelete}>\n            <IconX size={18} />\n          </SidebarActionButton>\n        </div>\n      )}\n\n      {!isDeleting && !isRenaming && (\n        <div className=\"absolute right-1 z-10 flex text-gray-300\">\n          <SidebarActionButton handleClick={handleOpenDeleteModal}>\n            <IconTrash size={18} />\n          </SidebarActionButton>\n        </div>\n      )}\n\n      {showModal && (\n        <PromptModal\n          prompt={prompt}\n          onClose={() => setShowModal(false)}\n          onUpdatePrompt={handleUpdate}\n        />\n      )}\n    </div>\n  );\n}","file":"/components/Promptbar/components/Prompt.tsx","fileHash":"50158cf1c353f676379ee20d59ba9d5724a3fd8ae578f54b51e2765e4b06213b","hash":"12082dbe53e86809bc1ad6b926bb87c8cb07d3973c63f08369f0c04775d7c60b","processedContent":"({ prompt }: Props) => {\n  const {\n    dispatch: promptDispatch, #undefined\n    handleUpdatePrompt, #undefined\n    handleDeletePrompt, #undefined\n  } = useContext(PromptbarContext);\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().: undefined\n  scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/PromptbarContext.: undefined\n  \"\"\"\n\n  const [showModal, setShowModal] = useState<boolean>(false); #undefined\n  const [isDeleting, setIsDeleting] = useState(false); #undefined\n  const [isRenaming, setIsRenaming] = useState(false); #undefined\n  const [renameValue, setRenameValue] = useState(''); #undefined\n\n  const handleUpdate = (prompt: Prompt) => {\n    handleUpdatePrompt(prompt);\n    promptDispatch({ field: 'searchTerm', value: '' });\n  };\n\n  const handleDelete: MouseEventHandler<HTMLButtonElement> = (e) => {\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MouseEventHandler#: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLButtonElement#: undefined\n  \"\"\"\n    e.stopPropagation(); #undefined\n\n    if (isDeleting) {\n      handleDeletePrompt(prompt);\n      promptDispatch({ field: 'searchTerm', value: '' });\n    }\n\n    setIsDeleting(false);\n  };\n\n  const handleCancelDelete: MouseEventHandler<HTMLButtonElement> = (e) => {\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MouseEventHandler#: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLButtonElement#: undefined\n  \"\"\"\n    e.stopPropagation(); #undefined\n    setIsDeleting(false);\n  };\n\n  const handleOpenDeleteModal: MouseEventHandler<HTMLButtonElement> = (e) => {\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MouseEventHandler#: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLButtonElement#: undefined\n  \"\"\"\n    e.stopPropagation(); #undefined\n    setIsDeleting(true);\n  };\n\n  const handleDragStart = (e: DragEvent<HTMLButtonElement>, prompt: Prompt) => {\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLButtonElement#: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DragEvent#: undefined\n  \"\"\"\n    if (e.dataTransfer) { #undefined\n      e.dataTransfer.setData('prompt', JSON.stringify(prompt)); #undefined\n    }\n  };\n\n  useEffect(() => { #undefined\n    if (isRenaming) {\n      setIsDeleting(false);\n    } else if (isDeleting) {\n      setIsRenaming(false);\n    }\n  }, [isRenaming, isDeleting]);\n\n  return (\n    <div className=\"relative flex items-center\">\n    \"\"\"\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n    \"\"\"\n      <button #undefined\n        className=\"flex w-full cursor-pointer items-center gap-3 rounded-lg p-3 text-sm transition-colors duration-200 hover:bg-[#343541]/90\" #undefined\n        draggable=\"true\" #undefined\n        onClick={(e) => { #undefined\n          e.stopPropagation(); #undefined\n          setShowModal(true);\n        }}\n        onDragStart={(e) => handleDragStart(e, prompt)} #undefined\n        onMouseLeave={() => { #undefined\n          setIsDeleting(false);\n          setIsRenaming(false);\n          setRenameValue('');\n        }}\n      >\n        <IconBulbFilled size={18} />\n\n        <div className=\"relative max-h-5 flex-1 overflow-hidden text-ellipsis whitespace-nowrap break-all pr-4 text-left text-[12.5px] leading-3\">\n        \"\"\"\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n        \"\"\"\n          {prompt.name}\n        </div> #undefined\n      </button> #undefined\n\n      {(isDeleting || isRenaming) && (\n        <div className=\"absolute right-1 z-10 flex text-gray-300\">\n        \"\"\"\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n        \"\"\"\n        \"\"\"\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n        \"\"\"\n          <SidebarActionButton handleClick={handleDelete}>\n            <IconCheck size={18} />\n          </SidebarActionButton>\n\n          <SidebarActionButton handleClick={handleCancelDelete}>\n            <IconX size={18} />\n          </SidebarActionButton>\n        </div> #undefined\n      )}\n\n      {!isDeleting && !isRenaming && (\n        <div className=\"absolute right-1 z-10 flex text-gray-300\">\n          <SidebarActionButton handleClick={handleOpenDeleteModal}>\n            <IconTrash size={18} />\n          </SidebarActionButton>\n        </div> #undefined\n      )}\n\n      {showModal && (\n        <PromptModal #This code defines a React component that renders a modal dialog for editing a prompt. The component uses the `useState` hook to manage the state of the prompt's name, description, and content, and the `useRef` hook to reference the modal element and the input elements within it. The component also handles keyboard events to close the modal when the user presses Enter without Shift, and it adds event listeners to handle clicking outside the modal to close it.\n          prompt={prompt} #undefined\n          onClose={() => setShowModal(false)} #undefined\n          onUpdatePrompt={handleUpdate} #undefined\n        />\n      )}\n    </div>\n  );\n}","documentation":"This code defines a React component that renders a prompt bar with a button to open a modal for editing the prompt. The component uses state and refs to manage the modal and input elements, and it handles keyboard and click events to close the modal and update the prompt."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/","language":"typescript","range":[0,0,130,0],"content":"import {\n  IconBulbFilled,\n  IconCheck,\n  IconTrash,\n  IconX,\n} from '@tabler/icons-react';\nimport {\n  DragEvent,\n  MouseEventHandler,\n  useContext,\n  useEffect,\n  useState,\n} from 'react';\n\nimport { Prompt } from '@/types/prompt';\n\nimport SidebarActionButton from '@/components/Buttons/SidebarActionButton';\n\nimport PromptbarContext from '../PromptBar.context';\nimport { PromptModal } from './PromptModal';\n\ninterface Props {\n  prompt: Prompt;\n}\n\nexport const PromptComponent = ({ prompt }: Props) => {\n  const {\n    dispatch: promptDispatch,\n    handleUpdatePrompt,\n    handleDeletePrompt,\n  } = useContext(PromptbarContext);\n\n  const [showModal, setShowModal] = useState<boolean>(false);\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [isRenaming, setIsRenaming] = useState(false);\n  const [renameValue, setRenameValue] = useState('');\n\n  const handleUpdate = (prompt: Prompt) => {\n    handleUpdatePrompt(prompt);\n    promptDispatch({ field: 'searchTerm', value: '' });\n  };\n\n  const handleDelete: MouseEventHandler<HTMLButtonElement> = (e) => {\n    e.stopPropagation();\n\n    if (isDeleting) {\n      handleDeletePrompt(prompt);\n      promptDispatch({ field: 'searchTerm', value: '' });\n    }\n\n    setIsDeleting(false);\n  };\n\n  const handleCancelDelete: MouseEventHandler<HTMLButtonElement> = (e) => {\n    e.stopPropagation();\n    setIsDeleting(false);\n  };\n\n  const handleOpenDeleteModal: MouseEventHandler<HTMLButtonElement> = (e) => {\n    e.stopPropagation();\n    setIsDeleting(true);\n  };\n\n  const handleDragStart = (e: DragEvent<HTMLButtonElement>, prompt: Prompt) => {\n    if (e.dataTransfer) {\n      e.dataTransfer.setData('prompt', JSON.stringify(prompt));\n    }\n  };\n\n  useEffect(() => {\n    if (isRenaming) {\n      setIsDeleting(false);\n    } else if (isDeleting) {\n      setIsRenaming(false);\n    }\n  }, [isRenaming, isDeleting]);\n\n  return (\n    <div className=\"relative flex items-center\">\n      <button\n        className=\"flex w-full cursor-pointer items-center gap-3 rounded-lg p-3 text-sm transition-colors duration-200 hover:bg-[#343541]/90\"\n        draggable=\"true\"\n        onClick={(e) => {\n          e.stopPropagation();\n          setShowModal(true);\n        }}\n        onDragStart={(e) => handleDragStart(e, prompt)}\n        onMouseLeave={() => {\n          setIsDeleting(false);\n          setIsRenaming(false);\n          setRenameValue('');\n        }}\n      >\n        <IconBulbFilled size={18} />\n\n        <div className=\"relative max-h-5 flex-1 overflow-hidden text-ellipsis whitespace-nowrap break-all pr-4 text-left text-[12.5px] leading-3\">\n          {prompt.name}\n        </div>\n      </button>\n\n      {(isDeleting || isRenaming) && (\n        <div className=\"absolute right-1 z-10 flex text-gray-300\">\n          <SidebarActionButton handleClick={handleDelete}>\n            <IconCheck size={18} />\n          </SidebarActionButton>\n\n          <SidebarActionButton handleClick={handleCancelDelete}>\n            <IconX size={18} />\n          </SidebarActionButton>\n        </div>\n      )}\n\n      {!isDeleting && !isRenaming && (\n        <div className=\"absolute right-1 z-10 flex text-gray-300\">\n          <SidebarActionButton handleClick={handleOpenDeleteModal}>\n            <IconTrash size={18} />\n          </SidebarActionButton>\n        </div>\n      )}\n\n      {showModal && (\n        <PromptModal\n          prompt={prompt}\n          onClose={() => setShowModal(false)}\n          onUpdatePrompt={handleUpdate}\n        />\n      )}\n    </div>\n  );\n};\n","file":"/components/Promptbar/components/Prompt.tsx","fileHash":"50158cf1c353f676379ee20d59ba9d5724a3fd8ae578f54b51e2765e4b06213b","hash":"50158cf1c353f676379ee20d59ba9d5724a3fd8ae578f54b51e2765e4b06213b","processedContent":"import {\n  IconBulbFilled,\n  IconCheck,\n  IconTrash,\n  IconX,\n} from '@tabler/icons-react';\nimport {\n  DragEvent, #undefined\n  MouseEventHandler, #undefined\n  useContext,\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().: undefined\n  \"\"\"\n  useEffect, #undefined\n  useState, #undefined\n} from 'react'; #undefined\n\nimport { Prompt } from '@/types/prompt';\n\nimport SidebarActionButton from '@/components/Buttons/SidebarActionButton';\n\nimport PromptbarContext from '../PromptBar.context';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/PromptbarContext.: undefined\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/: This code defines a context for a prompt bar component in an AI chatbot, which includes an initial state with a search term and a list of filtered prompts, as well as functions for handling create, delete, and update operations on prompts.\n\"\"\"\nimport { PromptModal } from './PromptModal';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.: This code defines a React component that renders a modal dialog for editing a prompt. The component uses the `useState` hook to manage the state of the prompt's name, description, and content, and the `useRef` hook to reference the modal element and the input elements within it. The component also handles keyboard events to close the modal when the user presses Enter without Shift, and it adds event listeners to handle clicking outside the modal to close it.\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/: This code defines a React component that renders a modal dialog for editing a prompt. It uses the `useState` and `useRef` hooks to manage the state of the prompt's name, description, and content, and handles keyboard events and click events to close the modal.\n\"\"\"\n\ninterface Props {\n  \"\"\"This code defines a type called \"Props\" that has a property called \"prompt\" of type \"Prompt\".\"\"\"\n  pass\n\nexport const PromptComponent = ({ prompt }: Props) => {\n  \"\"\"This code defines a React component that renders a prompt bar with a button to open a modal for editing the prompt. The component uses state and refs to manage the modal and input elements, and it handles keyboard and click events to close the modal and update the prompt.\"\"\"\n  pass\n","documentation":"This code defines a React component that renders a prompt bar with a button to open a modal for editing the prompt. The component uses state and refs to manage the modal and input elements, and it handles keyboard and click events to close the modal and update the prompt."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/Props#prompt.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/Props#prompt.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptbarSettings.tsx`/Props#","attributes":{"range":[2,0,2,18],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptbarSettings.tsx`/Props#","content":"interface Props {}","file":"/components/Promptbar/components/PromptbarSettings.tsx","language":"typescript","fileHash":"1bdcd58266c71e6169148c2bf5e30e13ac787073abb39bad3f220b0181a7aba3","hash":"0afffa08f4882abb5d583274bab503f32bf6c29dde35e7827c3b768889564359","processedContent":"interface Props {}","documentation":"This code defines an interface called \"Props\" that is used to define the properties of a component in a React application."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/","attributes":{"range":[0,0,130,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/","content":"import { FC, KeyboardEvent, useEffect, useRef, useState } from 'react';\n\nimport { useTranslation } from 'next-i18next';\n\nimport { Prompt } from '@/types/prompt';\n\ninterface Props {\n  prompt: Prompt;\n  onClose: () => void;\n  onUpdatePrompt: (prompt: Prompt) => void;\n}\n\nexport const PromptModal: FC<Props> = ({ prompt, onClose, onUpdatePrompt }) => {\n  const { t } = useTranslation('promptbar');\n  const [name, setName] = useState(prompt.name);\n  const [description, setDescription] = useState(prompt.description);\n  const [content, setContent] = useState(prompt.content);\n\n  const modalRef = useRef<HTMLDivElement>(null);\n  const nameInputRef = useRef<HTMLInputElement>(null);\n\n  const handleEnter = (e: KeyboardEvent<HTMLDivElement>) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      onUpdatePrompt({ ...prompt, name, description, content: content.trim() });\n      onClose();\n    }\n  };\n\n  useEffect(() => {\n    const handleMouseDown = (e: MouseEvent) => {\n      if (modalRef.current && !modalRef.current.contains(e.target as Node)) {\n        window.addEventListener('mouseup', handleMouseUp);\n      }\n    };\n\n    const handleMouseUp = (e: MouseEvent) => {\n      window.removeEventListener('mouseup', handleMouseUp);\n      onClose();\n    };\n\n    window.addEventListener('mousedown', handleMouseDown);\n\n    return () => {\n      window.removeEventListener('mousedown', handleMouseDown);\n    };\n  }, [onClose]);\n\n  useEffect(() => {\n    nameInputRef.current?.focus();\n  }, []);\n\n  return (\n    <div\n      className=\"fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50\"\n      onKeyDown={handleEnter}\n    >\n      <div className=\"fixed inset-0 z-10 overflow-hidden\">\n        <div className=\"flex items-center justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0\">\n          <div\n            className=\"hidden sm:inline-block sm:h-screen sm:align-middle\"\n            aria-hidden=\"true\"\n          />\n\n          <div\n            ref={modalRef}\n            className=\"dark:border-netural-400 inline-block max-h-[400px] transform overflow-y-auto rounded-lg border border-gray-300 bg-white px-4 pt-5 pb-4 text-left align-bottom shadow-xl transition-all dark:bg-[#202123] sm:my-8 sm:max-h-[600px] sm:w-full sm:max-w-lg sm:p-6 sm:align-middle\"\n            role=\"dialog\"\n          >\n            <div className=\"text-sm font-bold text-black dark:text-neutral-200\">\n              {t('Name')}\n            </div>\n            <input\n              ref={nameInputRef}\n              className=\"mt-2 w-full rounded-lg border border-neutral-500 px-4 py-2 text-neutral-900 shadow focus:outline-none dark:border-neutral-800 dark:border-opacity-50 dark:bg-[#40414F] dark:text-neutral-100\"\n              placeholder={t('A name for your prompt.') || ''}\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n            />\n\n            <div className=\"mt-6 text-sm font-bold text-black dark:text-neutral-200\">\n              {t('Description')}\n            </div>\n            <textarea\n              className=\"mt-2 w-full rounded-lg border border-neutral-500 px-4 py-2 text-neutral-900 shadow focus:outline-none dark:border-neutral-800 dark:border-opacity-50 dark:bg-[#40414F] dark:text-neutral-100\"\n              style={{ resize: 'none' }}\n              placeholder={t('A description for your prompt.') || ''}\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n              rows={3}\n            />\n\n            <div className=\"mt-6 text-sm font-bold text-black dark:text-neutral-200\">\n              {t('Prompt')}\n            </div>\n            <textarea\n              className=\"mt-2 w-full rounded-lg border border-neutral-500 px-4 py-2 text-neutral-900 shadow focus:outline-none dark:border-neutral-800 dark:border-opacity-50 dark:bg-[#40414F] dark:text-neutral-100\"\n              style={{ resize: 'none' }}\n              placeholder={\n                t(\n                  'Prompt content. Use {{}} to denote a variable. Ex: {{name}} is a {{adjective}} {{noun}}',\n                ) || ''\n              }\n              value={content}\n              onChange={(e) => setContent(e.target.value)}\n              rows={10}\n            />\n\n            <button\n              type=\"button\"\n              className=\"w-full px-4 py-2 mt-6 border rounded-lg shadow border-neutral-500 text-neutral-900 hover:bg-neutral-100 focus:outline-none dark:border-neutral-800 dark:border-opacity-50 dark:bg-white dark:text-black dark:hover:bg-neutral-300\"\n              onClick={() => {\n                const updatedPrompt = {\n                  ...prompt,\n                  name,\n                  description,\n                  content: content.trim(),\n                };\n\n                onUpdatePrompt(updatedPrompt);\n                onClose();\n              }}\n            >\n              {t('Save')}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","file":"/components/Promptbar/components/PromptModal.tsx","language":"typescript","fileHash":"1d85cae8aadb8fa541f8ee26c49242cd40d9314b0c7918c46323fcf3f4997e3f","hash":"1d85cae8aadb8fa541f8ee26c49242cd40d9314b0c7918c46323fcf3f4997e3f","processedContent":"import { FC, KeyboardEvent, useEffect, useRef, useState } from 'react';\n\"\"\"\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/: undefined\n\"\"\"\n\nimport { useTranslation } from 'next-i18next';\n\nimport { Prompt } from '@/types/prompt';\n\ninterface Props {\n  \"\"\"This code defines a set of properties for a component that takes in a prompt, allows the user to close the component, and updates the prompt when necessary.\"\"\"\n  pass\n\nexport const PromptModal: FC<Props> = ({ prompt, onClose, onUpdatePrompt }) => {\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/Props#: This code defines a set of properties for a component that takes in a prompt, allows the user to close the component, and updates the prompt when necessary.\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#: undefined\n\"\"\"\n  \"\"\"This code defines a React component that renders a modal dialog for editing a prompt. The component uses the `useState` hook to manage the state of the prompt's name, description, and content, and the `useRef` hook to reference the modal element and the input elements within it. The component also handles keyboard events to close the modal when the user presses Enter without Shift, and it adds event listeners to handle clicking outside the modal to close it.\"\"\"\n  pass\n","documentation":"This code defines a React component that renders a modal dialog for editing a prompt. It uses the `useState` and `useRef` hooks to manage the state of the prompt's name, description, and content, and handles keyboard events and click events to close the modal."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/Props#","attributes":{"range":[6,0,10,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/Props#","content":"interface Props {\n  prompt: Prompt;\n  onClose: () => void;\n  onUpdatePrompt: (prompt: Prompt) => void;\n}","file":"/components/Promptbar/components/PromptModal.tsx","language":"typescript","fileHash":"1d85cae8aadb8fa541f8ee26c49242cd40d9314b0c7918c46323fcf3f4997e3f","hash":"53ac71e68c5a7ae4d4d0739fa38ad8b0587e9581eaa6839b1e66ffc898aa9740","processedContent":"interface Props {\n  prompt: Prompt;\n  onClose: () => void;\n  onUpdatePrompt: (prompt: Prompt) => void;\n}","documentation":"This code defines a set of properties for a component that takes in a prompt, allows the user to close the component, and updates the prompt when necessary."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","attributes":{"range":[12,38,129,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","content":"({ prompt, onClose, onUpdatePrompt }) => {\n  const { t } = useTranslation('promptbar');\n  const [name, setName] = useState(prompt.name);\n  const [description, setDescription] = useState(prompt.description);\n  const [content, setContent] = useState(prompt.content);\n\n  const modalRef = useRef<HTMLDivElement>(null);\n  const nameInputRef = useRef<HTMLInputElement>(null);\n\n  const handleEnter = (e: KeyboardEvent<HTMLDivElement>) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      onUpdatePrompt({ ...prompt, name, description, content: content.trim() });\n      onClose();\n    }\n  };\n\n  useEffect(() => {\n    const handleMouseDown = (e: MouseEvent) => {\n      if (modalRef.current && !modalRef.current.contains(e.target as Node)) {\n        window.addEventListener('mouseup', handleMouseUp);\n      }\n    };\n\n    const handleMouseUp = (e: MouseEvent) => {\n      window.removeEventListener('mouseup', handleMouseUp);\n      onClose();\n    };\n\n    window.addEventListener('mousedown', handleMouseDown);\n\n    return () => {\n      window.removeEventListener('mousedown', handleMouseDown);\n    };\n  }, [onClose]);\n\n  useEffect(() => {\n    nameInputRef.current?.focus();\n  }, []);\n\n  return (\n    <div\n      className=\"fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50\"\n      onKeyDown={handleEnter}\n    >\n      <div className=\"fixed inset-0 z-10 overflow-hidden\">\n        <div className=\"flex items-center justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0\">\n          <div\n            className=\"hidden sm:inline-block sm:h-screen sm:align-middle\"\n            aria-hidden=\"true\"\n          />\n\n          <div\n            ref={modalRef}\n            className=\"dark:border-netural-400 inline-block max-h-[400px] transform overflow-y-auto rounded-lg border border-gray-300 bg-white px-4 pt-5 pb-4 text-left align-bottom shadow-xl transition-all dark:bg-[#202123] sm:my-8 sm:max-h-[600px] sm:w-full sm:max-w-lg sm:p-6 sm:align-middle\"\n            role=\"dialog\"\n          >\n            <div className=\"text-sm font-bold text-black dark:text-neutral-200\">\n              {t('Name')}\n            </div>\n            <input\n              ref={nameInputRef}\n              className=\"mt-2 w-full rounded-lg border border-neutral-500 px-4 py-2 text-neutral-900 shadow focus:outline-none dark:border-neutral-800 dark:border-opacity-50 dark:bg-[#40414F] dark:text-neutral-100\"\n              placeholder={t('A name for your prompt.') || ''}\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n            />\n\n            <div className=\"mt-6 text-sm font-bold text-black dark:text-neutral-200\">\n              {t('Description')}\n            </div>\n            <textarea\n              className=\"mt-2 w-full rounded-lg border border-neutral-500 px-4 py-2 text-neutral-900 shadow focus:outline-none dark:border-neutral-800 dark:border-opacity-50 dark:bg-[#40414F] dark:text-neutral-100\"\n              style={{ resize: 'none' }}\n              placeholder={t('A description for your prompt.') || ''}\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n              rows={3}\n            />\n\n            <div className=\"mt-6 text-sm font-bold text-black dark:text-neutral-200\">\n              {t('Prompt')}\n            </div>\n            <textarea\n              className=\"mt-2 w-full rounded-lg border border-neutral-500 px-4 py-2 text-neutral-900 shadow focus:outline-none dark:border-neutral-800 dark:border-opacity-50 dark:bg-[#40414F] dark:text-neutral-100\"\n              style={{ resize: 'none' }}\n              placeholder={\n                t(\n                  'Prompt content. Use {{}} to denote a variable. Ex: {{name}} is a {{adjective}} {{noun}}',\n                ) || ''\n              }\n              value={content}\n              onChange={(e) => setContent(e.target.value)}\n              rows={10}\n            />\n\n            <button\n              type=\"button\"\n              className=\"w-full px-4 py-2 mt-6 border rounded-lg shadow border-neutral-500 text-neutral-900 hover:bg-neutral-100 focus:outline-none dark:border-neutral-800 dark:border-opacity-50 dark:bg-white dark:text-black dark:hover:bg-neutral-300\"\n              onClick={() => {\n                const updatedPrompt = {\n                  ...prompt,\n                  name,\n                  description,\n                  content: content.trim(),\n                };\n\n                onUpdatePrompt(updatedPrompt);\n                onClose();\n              }}\n            >\n              {t('Save')}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","file":"/components/Promptbar/components/PromptModal.tsx","language":"typescript","fileHash":"1d85cae8aadb8fa541f8ee26c49242cd40d9314b0c7918c46323fcf3f4997e3f","hash":"fcf58c0e1bac94fd0a61074dadb0a8e842903d908f3769df7ba0d67838d95419","processedContent":"({ prompt, onClose, onUpdatePrompt }) => {\n  const { t } = useTranslation('promptbar');\n  const [name, setName] = useState(prompt.name); #undefined\n  const [description, setDescription] = useState(prompt.description); #undefined\n  const [content, setContent] = useState(prompt.content); #undefined\n\n  const modalRef = useRef<HTMLDivElement>(null);\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLDivElement#: undefined\n  \"\"\"\n  const nameInputRef = useRef<HTMLInputElement>(null);\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLInputElement#: undefined\n  \"\"\"\n\n  const handleEnter = (e: KeyboardEvent<HTMLDivElement>) => {\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLDivElement#: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#: undefined\n  \"\"\"\n    if (e.key === 'Enter' && !e.shiftKey) {\n    \"\"\"\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#key.: undefined\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#shiftKey.: undefined\n    \"\"\"\n      onUpdatePrompt({ ...prompt, name, description, content: content.trim() });\n      onClose();\n    }\n  };\n\n  useEffect(() => { #undefined\n    const handleMouseDown = (e: MouseEvent) => { #undefined\n      if (modalRef.current && !modalRef.current.contains(e.target as Node)) {\n      \"\"\"\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.: undefined\n      \"\"\"\n        window.addEventListener('mouseup', handleMouseUp);\n      }\n    };\n\n    const handleMouseUp = (e: MouseEvent) => { #undefined\n      window.removeEventListener('mouseup', handleMouseUp);\n      onClose();\n    };\n\n    window.addEventListener('mousedown', handleMouseDown);\n\n    return () => {\n      window.removeEventListener('mousedown', handleMouseDown);\n    };\n  }, [onClose]);\n\n  useEffect(() => { #undefined\n    nameInputRef.current?.focus(); #undefined\n  }, []);\n\n  return (\n    <div #undefined\n      className=\"fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50\" #undefined\n      onKeyDown={handleEnter} #undefined\n    >\n      <div className=\"fixed inset-0 z-10 overflow-hidden\">\n      \"\"\"\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n      \"\"\"\n        <div className=\"flex items-center justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0\">\n        \"\"\"\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n        \"\"\"\n          <div #undefined\n            className=\"hidden sm:inline-block sm:h-screen sm:align-middle\" #undefined\n            aria-hidden=\"true\" #undefined\n          />\n\n          <div #undefined\n            ref={modalRef} #undefined\n            className=\"dark:border-netural-400 inline-block max-h-[400px] transform overflow-y-auto rounded-lg border border-gray-300 bg-white px-4 pt-5 pb-4 text-left align-bottom shadow-xl transition-all dark:bg-[#202123] sm:my-8 sm:max-h-[600px] sm:w-full sm:max-w-lg sm:p-6 sm:align-middle\" #undefined\n            role=\"dialog\" #undefined\n          >\n            <div className=\"text-sm font-bold text-black dark:text-neutral-200\">\n            \"\"\"\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n            \"\"\"\n              {t('Name')}\n            </div> #undefined\n            <input #undefined\n              ref={nameInputRef} #undefined\n              className=\"mt-2 w-full rounded-lg border border-neutral-500 px-4 py-2 text-neutral-900 shadow focus:outline-none dark:border-neutral-800 dark:border-opacity-50 dark:bg-[#40414F] dark:text-neutral-100\" #undefined\n              placeholder={t('A name for your prompt.') || ''} #undefined\n              value={name} #undefined\n              onChange={(e) => setName(e.target.value)}\n              \"\"\"\n              scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#onChange.: undefined\n              scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ChangeEvent#target.: undefined\n              \"\"\"\n            />\n\n            <div className=\"mt-6 text-sm font-bold text-black dark:text-neutral-200\">\n            \"\"\"\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n            \"\"\"\n            \"\"\"\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n            \"\"\"\n              {t('Description')}\n            </div> #undefined\n            <textarea #undefined\n              className=\"mt-2 w-full rounded-lg border border-neutral-500 px-4 py-2 text-neutral-900 shadow focus:outline-none dark:border-neutral-800 dark:border-opacity-50 dark:bg-[#40414F] dark:text-neutral-100\" #undefined\n              style={{ resize: 'none' }} #undefined\n              placeholder={t('A description for your prompt.') || ''} #undefined\n              value={description} #undefined\n              onChange={(e) => setDescription(e.target.value)}\n              \"\"\"\n              scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ChangeEvent#target.: undefined\n              scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/TextareaHTMLAttributes#onChange.: undefined\n              \"\"\"\n              rows={3} #undefined\n            />\n\n            <div className=\"mt-6 text-sm font-bold text-black dark:text-neutral-200\">\n              {t('Prompt')}\n            </div> #undefined\n            <textarea #undefined\n              className=\"mt-2 w-full rounded-lg border border-neutral-500 px-4 py-2 text-neutral-900 shadow focus:outline-none dark:border-neutral-800 dark:border-opacity-50 dark:bg-[#40414F] dark:text-neutral-100\" #undefined\n              style={{ resize: 'none' }} #undefined\n              placeholder={ #undefined\n                t(\n                  'Prompt content. Use {{}} to denote a variable. Ex: {{name}} is a {{adjective}} {{noun}}',\n                ) || ''\n              }\n              value={content} #undefined\n              onChange={(e) => setContent(e.target.value)}\n              \"\"\"\n              scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ChangeEvent#target.: undefined\n              scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/TextareaHTMLAttributes#onChange.: undefined\n              \"\"\"\n              rows={10} #undefined\n            />\n\n            <button #undefined\n              type=\"button\" #undefined\n              className=\"w-full px-4 py-2 mt-6 border rounded-lg shadow border-neutral-500 text-neutral-900 hover:bg-neutral-100 focus:outline-none dark:border-neutral-800 dark:border-opacity-50 dark:bg-white dark:text-black dark:hover:bg-neutral-300\" #undefined\n              onClick={() => { #undefined\n                const updatedPrompt = {\n                  ...prompt,\n                  name,\n                  description,\n                  content: content.trim(),\n                };\n\n                onUpdatePrompt(updatedPrompt);\n                onClose();\n              }}\n            >\n              {t('Save')}\n            </button> #undefined\n          </div> #undefined\n        </div>\n      </div>\n    </div>\n  );\n}","documentation":"This code defines a React component that renders a modal dialog for editing a prompt. The component uses the `useState` hook to manage the state of the prompt's name, description, and content, and the `useRef` hook to reference the modal element and the input elements within it. The component also handles keyboard events to close the modal when the user presses Enter without Shift, and it adds event listeners to handle clicking outside the modal to close it."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/Props#prompt.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/Props#prompt.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/Props#onClose.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/Props#onClose.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/Props#onUpdatePrompt.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/Props#onUpdatePrompt.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/PromptbarContextProps#state.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/PromptbarContextProps#state.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.state.tsx`/PromptbarInitialState#searchTerm.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.state.tsx`/PromptbarInitialState#searchTerm.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.state.tsx`/PromptbarInitialState#filteredPrompts.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.state.tsx`/PromptbarInitialState#filteredPrompts.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/PromptbarContextProps#handleUpdatePrompt.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/PromptbarContextProps#handleUpdatePrompt.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/Props#","attributes":{"range":[21,0,23,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/Props#","content":"interface Props {\n  prompt: Prompt;\n}","file":"/components/Promptbar/components/Prompt.tsx","language":"typescript","fileHash":"50158cf1c353f676379ee20d59ba9d5724a3fd8ae578f54b51e2765e4b06213b","hash":"ebf286a53e686ea545b22ded7dc91b8347b73b8fca38f258f4db1ca63aa958ff","processedContent":"interface Props {\n  prompt: Prompt;\n}","documentation":"This code defines a type called \"Props\" that has a property called \"prompt\" of type \"Prompt\"."}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DragEvent#","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DragEvent#","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MouseEventHandler#","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MouseEventHandler#","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/PromptbarContextProps#dispatch.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/PromptbarContextProps#dispatch.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/PromptbarContextProps#handleDeletePrompt.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/PromptbarContextProps#handleDeletePrompt.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLButtonElement#","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLButtonElement#","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DragEvent#dataTransfer.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DragEvent#dataTransfer.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#draggable.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#draggable.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onDragStart.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onDragStart.","language":"typescript"}},{"key":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onMouseLeave.","attributes":{"symbol":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onMouseLeave.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/","attributes":{"range":[0,0,235,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/","content":"import { IconKey } from '@tabler/icons-react';\nimport { KeyboardEvent, useContext, useEffect, useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { PluginID, PluginKey } from '@/types/plugin';\n\nimport HomeContext from '@/pages/api/home/home.context';\n\nimport { SidebarButton } from '@/components/Sidebar/SidebarButton';\n\nimport ChatbarContext from '../Chatbar.context';\n\nexport const PluginKeys = () => {\n  const { t } = useTranslation('sidebar');\n\n  const {\n    state: { pluginKeys },\n  } = useContext(HomeContext);\n\n  const { handlePluginKeyChange, handleClearPluginKey } =\n    useContext(ChatbarContext);\n\n  const [isChanging, setIsChanging] = useState(false);\n\n  const modalRef = useRef<HTMLDivElement>(null);\n\n  const handleEnter = (e: KeyboardEvent<HTMLDivElement>) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      setIsChanging(false);\n    }\n  };\n\n  useEffect(() => {\n    const handleMouseDown = (e: MouseEvent) => {\n      if (modalRef.current && !modalRef.current.contains(e.target as Node)) {\n        window.addEventListener('mouseup', handleMouseUp);\n      }\n    };\n\n    const handleMouseUp = (e: MouseEvent) => {\n      window.removeEventListener('mouseup', handleMouseUp);\n      setIsChanging(false);\n    };\n\n    window.addEventListener('mousedown', handleMouseDown);\n\n    return () => {\n      window.removeEventListener('mousedown', handleMouseDown);\n    };\n  }, []);\n\n  return (\n    <>\n      <SidebarButton\n        text={t('Plugin Keys')}\n        icon={<IconKey size={18} />}\n        onClick={() => setIsChanging(true)}\n      />\n\n      {isChanging && (\n        <div\n          className=\"z-100 fixed inset-0 flex items-center justify-center bg-black bg-opacity-50\"\n          onKeyDown={handleEnter}\n        >\n          <div className=\"fixed inset-0 z-10 overflow-hidden\">\n            <div className=\"flex min-h-screen items-center justify-center px-4 pt-4 pb-20 text-center sm:block sm:p-0\">\n              <div\n                className=\"hidden sm:inline-block sm:h-screen sm:align-middle\"\n                aria-hidden=\"true\"\n              />\n\n              <div\n                ref={modalRef}\n                className=\"dark:border-netural-400 inline-block max-h-[400px] transform overflow-y-auto rounded-lg border border-gray-300 bg-white px-4 pt-5 pb-4 text-left align-bottom shadow-xl transition-all dark:bg-[#202123] sm:my-8 sm:max-h-[600px] sm:w-full sm:max-w-lg sm:p-6 sm:align-middle\"\n                role=\"dialog\"\n              >\n                <div className=\"mb-10 text-4xl\">Plugin Keys</div>\n\n                <div className=\"mt-6 rounded border p-4\">\n                  <div className=\"text-xl font-bold\">Google Search Plugin</div>\n                  <div className=\"mt-4 italic\">\n                    Please enter your Google API Key and Google CSE ID to enable\n                    the Google Search Plugin.\n                  </div>\n\n                  <div className=\"mt-6 text-sm font-bold text-black dark:text-neutral-200\">\n                    Google API Key\n                  </div>\n                  <input\n                    className=\"mt-2 w-full rounded-lg border border-neutral-500 px-4 py-2 text-neutral-900 shadow focus:outline-none dark:border-neutral-800 dark:border-opacity-50 dark:bg-[#40414F] dark:text-neutral-100\"\n                    type=\"password\"\n                    value={\n                      pluginKeys\n                        .find((p) => p.pluginId === PluginID.GOOGLE_SEARCH)\n                        ?.requiredKeys.find((k) => k.key === 'GOOGLE_API_KEY')\n                        ?.value\n                    }\n                    onChange={(e) => {\n                      const pluginKey = pluginKeys.find(\n                        (p) => p.pluginId === PluginID.GOOGLE_SEARCH,\n                      );\n\n                      if (pluginKey) {\n                        const requiredKey = pluginKey.requiredKeys.find(\n                          (k) => k.key === 'GOOGLE_API_KEY',\n                        );\n\n                        if (requiredKey) {\n                          const updatedPluginKey = {\n                            ...pluginKey,\n                            requiredKeys: pluginKey.requiredKeys.map((k) => {\n                              if (k.key === 'GOOGLE_API_KEY') {\n                                return {\n                                  ...k,\n                                  value: e.target.value,\n                                };\n                              }\n\n                              return k;\n                            }),\n                          };\n\n                          handlePluginKeyChange(updatedPluginKey);\n                        }\n                      } else {\n                        const newPluginKey: PluginKey = {\n                          pluginId: PluginID.GOOGLE_SEARCH,\n                          requiredKeys: [\n                            {\n                              key: 'GOOGLE_API_KEY',\n                              value: e.target.value,\n                            },\n                            {\n                              key: 'GOOGLE_CSE_ID',\n                              value: '',\n                            },\n                          ],\n                        };\n\n                        handlePluginKeyChange(newPluginKey);\n                      }\n                    }}\n                  />\n\n                  <div className=\"mt-6 text-sm font-bold text-black dark:text-neutral-200\">\n                    Google CSE ID\n                  </div>\n                  <input\n                    className=\"mt-2 w-full rounded-lg border border-neutral-500 px-4 py-2 text-neutral-900 shadow focus:outline-none dark:border-neutral-800 dark:border-opacity-50 dark:bg-[#40414F] dark:text-neutral-100\"\n                    type=\"password\"\n                    value={\n                      pluginKeys\n                        .find((p) => p.pluginId === PluginID.GOOGLE_SEARCH)\n                        ?.requiredKeys.find((k) => k.key === 'GOOGLE_CSE_ID')\n                        ?.value\n                    }\n                    onChange={(e) => {\n                      const pluginKey = pluginKeys.find(\n                        (p) => p.pluginId === PluginID.GOOGLE_SEARCH,\n                      );\n\n                      if (pluginKey) {\n                        const requiredKey = pluginKey.requiredKeys.find(\n                          (k) => k.key === 'GOOGLE_CSE_ID',\n                        );\n\n                        if (requiredKey) {\n                          const updatedPluginKey = {\n                            ...pluginKey,\n                            requiredKeys: pluginKey.requiredKeys.map((k) => {\n                              if (k.key === 'GOOGLE_CSE_ID') {\n                                return {\n                                  ...k,\n                                  value: e.target.value,\n                                };\n                              }\n\n                              return k;\n                            }),\n                          };\n\n                          handlePluginKeyChange(updatedPluginKey);\n                        }\n                      } else {\n                        const newPluginKey: PluginKey = {\n                          pluginId: PluginID.GOOGLE_SEARCH,\n                          requiredKeys: [\n                            {\n                              key: 'GOOGLE_API_KEY',\n                              value: '',\n                            },\n                            {\n                              key: 'GOOGLE_CSE_ID',\n                              value: e.target.value,\n                            },\n                          ],\n                        };\n\n                        handlePluginKeyChange(newPluginKey);\n                      }\n                    }}\n                  />\n\n                  <button\n                    className=\"mt-6 w-full rounded-lg border border-neutral-500 px-4 py-2 text-neutral-900 shadow hover:bg-neutral-100 focus:outline-none dark:border-neutral-800 dark:border-opacity-50 dark:bg-white dark:text-black dark:hover:bg-neutral-300\"\n                    onClick={() => {\n                      const pluginKey = pluginKeys.find(\n                        (p) => p.pluginId === PluginID.GOOGLE_SEARCH,\n                      );\n\n                      if (pluginKey) {\n                        handleClearPluginKey(pluginKey);\n                      }\n                    }}\n                  >\n                    Clear Google Search Plugin Keys\n                  </button>\n                </div>\n\n                <button\n                  type=\"button\"\n                  className=\"mt-6 w-full rounded-lg border border-neutral-500 px-4 py-2 text-neutral-900 shadow hover:bg-neutral-100 focus:outline-none dark:border-neutral-800 dark:border-opacity-50 dark:bg-white dark:text-black dark:hover:bg-neutral-300\"\n                  onClick={() => setIsChanging(false)}\n                >\n                  {t('Save')}\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n","file":"/components/Chatbar/components/PluginKeys.tsx","language":"typescript","fileHash":"8a9f7fe9ef2a99c3f16c81fd812517d12ddc66edc36285489e297f44b0969907","hash":"8a9f7fe9ef2a99c3f16c81fd812517d12ddc66edc36285489e297f44b0969907","processedContent":"import { IconKey } from '@tabler/icons-react';\nimport { KeyboardEvent, useContext, useEffect, useRef, useState } from 'react';\n\"\"\"\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/: undefined\n\"\"\"\nimport { useTranslation } from 'react-i18next';\n\nimport { PluginID, PluginKey } from '@/types/plugin';\n\nimport HomeContext from '@/pages/api/home/home.context';\n\nimport { SidebarButton } from '@/components/Sidebar/SidebarButton';\n\nimport ChatbarContext from '../Chatbar.context';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/ChatbarContext.: undefined\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/: This code defines a context for a chatbar component, which includes an initial state interface and a default export. The initial state interface defines properties such as searchTerm and filteredConversations, and methods for handling actions like deleting conversations or importing data.\n\"\"\"\n\nexport const PluginKeys = () => {\n  \"\"\"This code is a React component that displays a modal window with input fields for entering Google API keys and IDs. The component uses the `useContext` hook to access the plugin keys from the HomeContext, and it also uses the `useState` hook to manage the state of the modal window. When the user clicks the \"Save\" button, the component calls the `handlePluginKeyChange` function to update the plugin keys in the HomeContext.\"\"\"\n  pass\n","documentation":"This code defines a React component that displays a modal window for entering Google API keys and IDs, and it updates the plugin keys in the HomeContext when the user clicks \"Save\"."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","attributes":{"range":[12,26,234,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","content":"() => {\n  const { t } = useTranslation('sidebar');\n\n  const {\n    state: { pluginKeys },\n  } = useContext(HomeContext);\n\n  const { handlePluginKeyChange, handleClearPluginKey } =\n    useContext(ChatbarContext);\n\n  const [isChanging, setIsChanging] = useState(false);\n\n  const modalRef = useRef<HTMLDivElement>(null);\n\n  const handleEnter = (e: KeyboardEvent<HTMLDivElement>) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      setIsChanging(false);\n    }\n  };\n\n  useEffect(() => {\n    const handleMouseDown = (e: MouseEvent) => {\n      if (modalRef.current && !modalRef.current.contains(e.target as Node)) {\n        window.addEventListener('mouseup', handleMouseUp);\n      }\n    };\n\n    const handleMouseUp = (e: MouseEvent) => {\n      window.removeEventListener('mouseup', handleMouseUp);\n      setIsChanging(false);\n    };\n\n    window.addEventListener('mousedown', handleMouseDown);\n\n    return () => {\n      window.removeEventListener('mousedown', handleMouseDown);\n    };\n  }, []);\n\n  return (\n    <>\n      <SidebarButton\n        text={t('Plugin Keys')}\n        icon={<IconKey size={18} />}\n        onClick={() => setIsChanging(true)}\n      />\n\n      {isChanging && (\n        <div\n          className=\"z-100 fixed inset-0 flex items-center justify-center bg-black bg-opacity-50\"\n          onKeyDown={handleEnter}\n        >\n          <div className=\"fixed inset-0 z-10 overflow-hidden\">\n            <div className=\"flex min-h-screen items-center justify-center px-4 pt-4 pb-20 text-center sm:block sm:p-0\">\n              <div\n                className=\"hidden sm:inline-block sm:h-screen sm:align-middle\"\n                aria-hidden=\"true\"\n              />\n\n              <div\n                ref={modalRef}\n                className=\"dark:border-netural-400 inline-block max-h-[400px] transform overflow-y-auto rounded-lg border border-gray-300 bg-white px-4 pt-5 pb-4 text-left align-bottom shadow-xl transition-all dark:bg-[#202123] sm:my-8 sm:max-h-[600px] sm:w-full sm:max-w-lg sm:p-6 sm:align-middle\"\n                role=\"dialog\"\n              >\n                <div className=\"mb-10 text-4xl\">Plugin Keys</div>\n\n                <div className=\"mt-6 rounded border p-4\">\n                  <div className=\"text-xl font-bold\">Google Search Plugin</div>\n                  <div className=\"mt-4 italic\">\n                    Please enter your Google API Key and Google CSE ID to enable\n                    the Google Search Plugin.\n                  </div>\n\n                  <div className=\"mt-6 text-sm font-bold text-black dark:text-neutral-200\">\n                    Google API Key\n                  </div>\n                  <input\n                    className=\"mt-2 w-full rounded-lg border border-neutral-500 px-4 py-2 text-neutral-900 shadow focus:outline-none dark:border-neutral-800 dark:border-opacity-50 dark:bg-[#40414F] dark:text-neutral-100\"\n                    type=\"password\"\n                    value={\n                      pluginKeys\n                        .find((p) => p.pluginId === PluginID.GOOGLE_SEARCH)\n                        ?.requiredKeys.find((k) => k.key === 'GOOGLE_API_KEY')\n                        ?.value\n                    }\n                    onChange={(e) => {\n                      const pluginKey = pluginKeys.find(\n                        (p) => p.pluginId === PluginID.GOOGLE_SEARCH,\n                      );\n\n                      if (pluginKey) {\n                        const requiredKey = pluginKey.requiredKeys.find(\n                          (k) => k.key === 'GOOGLE_API_KEY',\n                        );\n\n                        if (requiredKey) {\n                          const updatedPluginKey = {\n                            ...pluginKey,\n                            requiredKeys: pluginKey.requiredKeys.map((k) => {\n                              if (k.key === 'GOOGLE_API_KEY') {\n                                return {\n                                  ...k,\n                                  value: e.target.value,\n                                };\n                              }\n\n                              return k;\n                            }),\n                          };\n\n                          handlePluginKeyChange(updatedPluginKey);\n                        }\n                      } else {\n                        const newPluginKey: PluginKey = {\n                          pluginId: PluginID.GOOGLE_SEARCH,\n                          requiredKeys: [\n                            {\n                              key: 'GOOGLE_API_KEY',\n                              value: e.target.value,\n                            },\n                            {\n                              key: 'GOOGLE_CSE_ID',\n                              value: '',\n                            },\n                          ],\n                        };\n\n                        handlePluginKeyChange(newPluginKey);\n                      }\n                    }}\n                  />\n\n                  <div className=\"mt-6 text-sm font-bold text-black dark:text-neutral-200\">\n                    Google CSE ID\n                  </div>\n                  <input\n                    className=\"mt-2 w-full rounded-lg border border-neutral-500 px-4 py-2 text-neutral-900 shadow focus:outline-none dark:border-neutral-800 dark:border-opacity-50 dark:bg-[#40414F] dark:text-neutral-100\"\n                    type=\"password\"\n                    value={\n                      pluginKeys\n                        .find((p) => p.pluginId === PluginID.GOOGLE_SEARCH)\n                        ?.requiredKeys.find((k) => k.key === 'GOOGLE_CSE_ID')\n                        ?.value\n                    }\n                    onChange={(e) => {\n                      const pluginKey = pluginKeys.find(\n                        (p) => p.pluginId === PluginID.GOOGLE_SEARCH,\n                      );\n\n                      if (pluginKey) {\n                        const requiredKey = pluginKey.requiredKeys.find(\n                          (k) => k.key === 'GOOGLE_CSE_ID',\n                        );\n\n                        if (requiredKey) {\n                          const updatedPluginKey = {\n                            ...pluginKey,\n                            requiredKeys: pluginKey.requiredKeys.map((k) => {\n                              if (k.key === 'GOOGLE_CSE_ID') {\n                                return {\n                                  ...k,\n                                  value: e.target.value,\n                                };\n                              }\n\n                              return k;\n                            }),\n                          };\n\n                          handlePluginKeyChange(updatedPluginKey);\n                        }\n                      } else {\n                        const newPluginKey: PluginKey = {\n                          pluginId: PluginID.GOOGLE_SEARCH,\n                          requiredKeys: [\n                            {\n                              key: 'GOOGLE_API_KEY',\n                              value: '',\n                            },\n                            {\n                              key: 'GOOGLE_CSE_ID',\n                              value: e.target.value,\n                            },\n                          ],\n                        };\n\n                        handlePluginKeyChange(newPluginKey);\n                      }\n                    }}\n                  />\n\n                  <button\n                    className=\"mt-6 w-full rounded-lg border border-neutral-500 px-4 py-2 text-neutral-900 shadow hover:bg-neutral-100 focus:outline-none dark:border-neutral-800 dark:border-opacity-50 dark:bg-white dark:text-black dark:hover:bg-neutral-300\"\n                    onClick={() => {\n                      const pluginKey = pluginKeys.find(\n                        (p) => p.pluginId === PluginID.GOOGLE_SEARCH,\n                      );\n\n                      if (pluginKey) {\n                        handleClearPluginKey(pluginKey);\n                      }\n                    }}\n                  >\n                    Clear Google Search Plugin Keys\n                  </button>\n                </div>\n\n                <button\n                  type=\"button\"\n                  className=\"mt-6 w-full rounded-lg border border-neutral-500 px-4 py-2 text-neutral-900 shadow hover:bg-neutral-100 focus:outline-none dark:border-neutral-800 dark:border-opacity-50 dark:bg-white dark:text-black dark:hover:bg-neutral-300\"\n                  onClick={() => setIsChanging(false)}\n                >\n                  {t('Save')}\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}","file":"/components/Chatbar/components/PluginKeys.tsx","language":"typescript","fileHash":"8a9f7fe9ef2a99c3f16c81fd812517d12ddc66edc36285489e297f44b0969907","hash":"2cd03355bbe2b185e8783b269b6f3d49d4f06d714a40a82d4d08f7750c1c297a","processedContent":"() => {\n  const { t } = useTranslation('sidebar');\n\n  const {\n    state: { pluginKeys },\n  } = useContext(HomeContext);\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().: undefined\n  \"\"\"\n\n  const { handlePluginKeyChange, handleClearPluginKey } =\n  \"\"\"\n  scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/ChatbarContextProps#handlePluginKeyChange.: undefined\n  scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/ChatbarContextProps#handleClearPluginKey.: undefined\n  \"\"\"\n    useContext(ChatbarContext);\n    \"\"\"\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().: undefined\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().: undefined\n    scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/ChatbarContext.: undefined\n    \"\"\"\n\n  const [isChanging, setIsChanging] = useState(false); #undefined\n\n  const modalRef = useRef<HTMLDivElement>(null);\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLDivElement#: undefined\n  \"\"\"\n\n  const handleEnter = (e: KeyboardEvent<HTMLDivElement>) => {\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLDivElement#: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#: undefined\n  \"\"\"\n    if (e.key === 'Enter' && !e.shiftKey) {\n    \"\"\"\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#key.: undefined\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#shiftKey.: undefined\n    \"\"\"\n      e.preventDefault(); #undefined\n      setIsChanging(false);\n    }\n  };\n\n  useEffect(() => { #undefined\n    const handleMouseDown = (e: MouseEvent) => { #undefined\n      if (modalRef.current && !modalRef.current.contains(e.target as Node)) {\n      \"\"\"\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.: undefined\n      \"\"\"\n        window.addEventListener('mouseup', handleMouseUp);\n      }\n    };\n\n    const handleMouseUp = (e: MouseEvent) => { #undefined\n      window.removeEventListener('mouseup', handleMouseUp);\n      setIsChanging(false);\n    };\n\n    window.addEventListener('mousedown', handleMouseDown);\n\n    return () => {\n      window.removeEventListener('mousedown', handleMouseDown);\n    };\n  }, []);\n\n  return (\n    <>\n      <SidebarButton\n        text={t('Plugin Keys')}\n        icon={<IconKey size={18} />}\n        onClick={() => setIsChanging(true)}\n      />\n\n      {isChanging && (\n        <div #undefined\n          className=\"z-100 fixed inset-0 flex items-center justify-center bg-black bg-opacity-50\" #undefined\n          onKeyDown={handleEnter} #undefined\n        >\n          <div className=\"fixed inset-0 z-10 overflow-hidden\">\n          \"\"\"\n          scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n          scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n          \"\"\"\n            <div className=\"flex min-h-screen items-center justify-center px-4 pt-4 pb-20 text-center sm:block sm:p-0\">\n            \"\"\"\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n            \"\"\"\n              <div #undefined\n                className=\"hidden sm:inline-block sm:h-screen sm:align-middle\" #undefined\n                aria-hidden=\"true\" #undefined\n              />\n\n              <div #undefined\n                ref={modalRef} #undefined\n                className=\"dark:border-netural-400 inline-block max-h-[400px] transform overflow-y-auto rounded-lg border border-gray-300 bg-white px-4 pt-5 pb-4 text-left align-bottom shadow-xl transition-all dark:bg-[#202123] sm:my-8 sm:max-h-[600px] sm:w-full sm:max-w-lg sm:p-6 sm:align-middle\" #undefined\n                role=\"dialog\" #undefined\n              >\n                <div className=\"mb-10 text-4xl\">Plugin Keys</div>\n                \"\"\"\n                scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n                scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n                scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n                \"\"\"\n\n                <div className=\"mt-6 rounded border p-4\">\n                \"\"\"\n                scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n                scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n                \"\"\"\n                  <div className=\"text-xl font-bold\">Google Search Plugin</div>\n                  \"\"\"\n                  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n                  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n                  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n                  \"\"\"\n                  <div className=\"mt-4 italic\">\n                  \"\"\"\n                  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n                  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n                  \"\"\"\n                    Please enter your Google API Key and Google CSE ID to enable\n                    the Google Search Plugin.\n                  </div> #undefined\n\n                  <div className=\"mt-6 text-sm font-bold text-black dark:text-neutral-200\">\n                  \"\"\"\n                  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n                  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n                  \"\"\"\n                  \"\"\"\n                  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n                  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n                  \"\"\"\n                    Google API Key\n                  </div> #undefined\n                  <input #undefined\n                    className=\"mt-2 w-full rounded-lg border border-neutral-500 px-4 py-2 text-neutral-900 shadow focus:outline-none dark:border-neutral-800 dark:border-opacity-50 dark:bg-[#40414F] dark:text-neutral-100\" #undefined\n                    type=\"password\" #undefined\n                    value={ #undefined\n                      pluginKeys\n                        .find((p) => p.pluginId === PluginID.GOOGLE_SEARCH)\n                        ?.requiredKeys.find((k) => k.key === 'GOOGLE_API_KEY')\n                        ?.value\n                    }\n                    onChange={(e) => { #undefined\n                      const pluginKey = pluginKeys.find(\n                        (p) => p.pluginId === PluginID.GOOGLE_SEARCH,\n                      );\n\n                      if (pluginKey) {\n                        const requiredKey = pluginKey.requiredKeys.find(\n                          (k) => k.key === 'GOOGLE_API_KEY',\n                        );\n\n                        if (requiredKey) {\n                          const updatedPluginKey = {\n                            ...pluginKey,\n                            requiredKeys: pluginKey.requiredKeys.map((k) => {\n                              if (k.key === 'GOOGLE_API_KEY') {\n                                return {\n                                  ...k,\n                                  value: e.target.value, #undefined\n                                };\n                              }\n\n                              return k;\n                            }),\n                          };\n\n                          handlePluginKeyChange(updatedPluginKey);\n                        }\n                      } else {\n                        const newPluginKey: PluginKey = {\n                          pluginId: PluginID.GOOGLE_SEARCH,\n                          requiredKeys: [\n                            {\n                              key: 'GOOGLE_API_KEY',\n                              value: e.target.value, #undefined\n                            },\n                            {\n                              key: 'GOOGLE_CSE_ID',\n                              value: '',\n                            },\n                          ],\n                        };\n\n                        handlePluginKeyChange(newPluginKey);\n                      }\n                    }}\n                  />\n\n                  <div className=\"mt-6 text-sm font-bold text-black dark:text-neutral-200\">\n                    Google CSE ID\n                  </div> #undefined\n                  <input #undefined\n                    className=\"mt-2 w-full rounded-lg border border-neutral-500 px-4 py-2 text-neutral-900 shadow focus:outline-none dark:border-neutral-800 dark:border-opacity-50 dark:bg-[#40414F] dark:text-neutral-100\" #undefined\n                    type=\"password\" #undefined\n                    value={ #undefined\n                      pluginKeys\n                        .find((p) => p.pluginId === PluginID.GOOGLE_SEARCH)\n                        ?.requiredKeys.find((k) => k.key === 'GOOGLE_CSE_ID')\n                        ?.value\n                    }\n                    onChange={(e) => { #undefined\n                      const pluginKey = pluginKeys.find(\n                        (p) => p.pluginId === PluginID.GOOGLE_SEARCH,\n                      );\n\n                      if (pluginKey) {\n                        const requiredKey = pluginKey.requiredKeys.find(\n                          (k) => k.key === 'GOOGLE_CSE_ID',\n                        );\n\n                        if (requiredKey) {\n                          const updatedPluginKey = {\n                            ...pluginKey,\n                            requiredKeys: pluginKey.requiredKeys.map((k) => {\n                              if (k.key === 'GOOGLE_CSE_ID') {\n                                return {\n                                  ...k,\n                                  value: e.target.value, #undefined\n                                };\n                              }\n\n                              return k;\n                            }),\n                          };\n\n                          handlePluginKeyChange(updatedPluginKey);\n                        }\n                      } else {\n                        const newPluginKey: PluginKey = {\n                          pluginId: PluginID.GOOGLE_SEARCH,\n                          requiredKeys: [\n                            {\n                              key: 'GOOGLE_API_KEY',\n                              value: '',\n                            },\n                            {\n                              key: 'GOOGLE_CSE_ID',\n                              value: e.target.value,\n                            },\n                          ],\n                        };\n\n                        handlePluginKeyChange(newPluginKey);\n                      }\n                    }}\n                  />\n\n                  <button #undefined\n                    className=\"mt-6 w-full rounded-lg border border-neutral-500 px-4 py-2 text-neutral-900 shadow hover:bg-neutral-100 focus:outline-none dark:border-neutral-800 dark:border-opacity-50 dark:bg-white dark:text-black dark:hover:bg-neutral-300\" #undefined\n                    onClick={() => { #undefined\n                      const pluginKey = pluginKeys.find(\n                        (p) => p.pluginId === PluginID.GOOGLE_SEARCH,\n                      );\n\n                      if (pluginKey) {\n                        handleClearPluginKey(pluginKey);\n                      }\n                    }}\n                  >\n                    Clear Google Search Plugin Keys\n                  </button> #undefined\n                </div> #undefined\n\n                <button\n                  type=\"button\" #undefined\n                  className=\"mt-6 w-full rounded-lg border border-neutral-500 px-4 py-2 text-neutral-900 shadow hover:bg-neutral-100 focus:outline-none dark:border-neutral-800 dark:border-opacity-50 dark:bg-white dark:text-black dark:hover:bg-neutral-300\"\n                  onClick={() => setIsChanging(false)} #undefined\n                >\n                  {t('Save')}\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}","documentation":"This code is a React component that displays a modal window with input fields for entering Google API keys and IDs. The component uses the `useContext` hook to access the plugin keys from the HomeContext, and it also uses the `useState` hook to manage the state of the modal window. When the user clicks the \"Save\" button, the component calls the `handlePluginKeyChange` function to update the plugin keys in the HomeContext."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/ChatbarContextProps#handlePluginKeyChange.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/ChatbarContextProps#handlePluginKeyChange.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/ChatbarContextProps#handleClearPluginKey.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/ChatbarContextProps#handleClearPluginKey.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversations.tsx`/Props#","attributes":{"range":[4,0,6,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversations.tsx`/Props#","content":"interface Props {\n  conversations: Conversation[];\n}","file":"/components/Chatbar/components/Conversations.tsx","language":"typescript","fileHash":"9c39eb0d3dfeb15f6ae87e5cafa54606c3dfbf20a46c722e8ce3828ab5332bec","hash":"bb9e7720641dfd9b9aee767d63139980a1b7c2e91cbfaea8369c86c592f6d331","processedContent":"interface Props {\n  conversations: Conversation[];\n}","documentation":"This code defines a type called \"Props\" that contains an array of \"Conversation\" objects."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","language":"typescript","range":[27,37,167,1],"content":"({ conversation }: Props) => {\n  const {\n    state: { selectedConversation, messageIsStreaming },\n    handleSelectConversation,\n    handleUpdateConversation,\n  } = useContext(HomeContext);\n\n  const { handleDeleteConversation } = useContext(ChatbarContext);\n\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [isRenaming, setIsRenaming] = useState(false);\n  const [renameValue, setRenameValue] = useState('');\n\n  const handleEnterDown = (e: KeyboardEvent<HTMLDivElement>) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      selectedConversation && handleRename(selectedConversation);\n    }\n  };\n\n  const handleDragStart = (\n    e: DragEvent<HTMLButtonElement>,\n    conversation: Conversation,\n  ) => {\n    if (e.dataTransfer) {\n      e.dataTransfer.setData('conversation', JSON.stringify(conversation));\n    }\n  };\n\n  const handleRename = (conversation: Conversation) => {\n    if (renameValue.trim().length > 0) {\n      handleUpdateConversation(conversation, {\n        key: 'name',\n        value: renameValue,\n      });\n      setRenameValue('');\n      setIsRenaming(false);\n    }\n  };\n\n  const handleConfirm: MouseEventHandler<HTMLButtonElement> = (e) => {\n    e.stopPropagation();\n    if (isDeleting) {\n      handleDeleteConversation(conversation);\n    } else if (isRenaming) {\n      handleRename(conversation);\n    }\n    setIsDeleting(false);\n    setIsRenaming(false);\n  };\n\n  const handleCancel: MouseEventHandler<HTMLButtonElement> = (e) => {\n    e.stopPropagation();\n    setIsDeleting(false);\n    setIsRenaming(false);\n  };\n\n  const handleOpenRenameModal: MouseEventHandler<HTMLButtonElement> = (e) => {\n    e.stopPropagation();\n    setIsRenaming(true);\n    selectedConversation && setRenameValue(selectedConversation.name);\n  };\n  const handleOpenDeleteModal: MouseEventHandler<HTMLButtonElement> = (e) => {\n    e.stopPropagation();\n    setIsDeleting(true);\n  };\n\n  useEffect(() => {\n    if (isRenaming) {\n      setIsDeleting(false);\n    } else if (isDeleting) {\n      setIsRenaming(false);\n    }\n  }, [isRenaming, isDeleting]);\n\n  return (\n    <div className=\"relative flex items-center\">\n      {isRenaming && selectedConversation?.id === conversation.id ? (\n        <div className=\"flex w-full items-center gap-3 rounded-lg bg-[#343541]/90 p-3\">\n          <IconMessage size={18} />\n          <input\n            className=\"mr-12 flex-1 overflow-hidden overflow-ellipsis border-neutral-400 bg-transparent text-left text-[12.5px] leading-3 text-white outline-none focus:border-neutral-100\"\n            type=\"text\"\n            value={renameValue}\n            onChange={(e) => setRenameValue(e.target.value)}\n            onKeyDown={handleEnterDown}\n            autoFocus\n          />\n        </div>\n      ) : (\n        <button\n          className={`flex w-full cursor-pointer items-center gap-3 rounded-lg p-3 text-sm transition-colors duration-200 hover:bg-[#343541]/90 ${\n            messageIsStreaming ? 'disabled:cursor-not-allowed' : ''\n          } ${\n            selectedConversation?.id === conversation.id\n              ? 'bg-[#343541]/90'\n              : ''\n          }`}\n          onClick={() => handleSelectConversation(conversation)}\n          disabled={messageIsStreaming}\n          draggable=\"true\"\n          onDragStart={(e) => handleDragStart(e, conversation)}\n        >\n          <IconMessage size={18} />\n          <div\n            className={`relative max-h-5 flex-1 overflow-hidden text-ellipsis whitespace-nowrap break-all text-left text-[12.5px] leading-3 ${\n              selectedConversation?.id === conversation.id ? 'pr-12' : 'pr-1'\n            }`}\n          >\n            {conversation.name}\n          </div>\n        </button>\n      )}\n\n      {(isDeleting || isRenaming) &&\n        selectedConversation?.id === conversation.id && (\n          <div className=\"absolute right-1 z-10 flex text-gray-300\">\n            <SidebarActionButton handleClick={handleConfirm}>\n              <IconCheck size={18} />\n            </SidebarActionButton>\n            <SidebarActionButton handleClick={handleCancel}>\n              <IconX size={18} />\n            </SidebarActionButton>\n          </div>\n        )}\n\n      {selectedConversation?.id === conversation.id &&\n        !isDeleting &&\n        !isRenaming && (\n          <div className=\"absolute right-1 z-10 flex text-gray-300\">\n            <SidebarActionButton handleClick={handleOpenRenameModal}>\n              <IconPencil size={18} />\n            </SidebarActionButton>\n            <SidebarActionButton handleClick={handleOpenDeleteModal}>\n              <IconTrash size={18} />\n            </SidebarActionButton>\n          </div>\n        )}\n    </div>\n  );\n}","file":"/components/Chatbar/components/Conversation.tsx","fileHash":"eb97dfe56543011b57e01da6c28765b9a059649b60699ce3bca3ca0acdb12854","hash":"07bd86f8aa910cddb3be48df6c0e0b0bc10dd06a548446a44eecf876299d6b22","processedContent":"({ conversation }: Props) => {\n  const {\n    state: { selectedConversation, messageIsStreaming },\n    handleSelectConversation,\n    handleUpdateConversation,\n  } = useContext(HomeContext);\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().: undefined\n  \"\"\"\n\n  const { handleDeleteConversation } = useContext(ChatbarContext);\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().: undefined\n  \"\"\"\n\n  const [isDeleting, setIsDeleting] = useState(false); #undefined\n  const [isRenaming, setIsRenaming] = useState(false); #undefined\n  const [renameValue, setRenameValue] = useState(''); #undefined\n\n  const handleEnterDown = (e: KeyboardEvent<HTMLDivElement>) => {\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLDivElement#: undefined\n  \"\"\"\n    if (e.key === 'Enter') { #undefined\n      e.preventDefault(); #undefined\n      selectedConversation && handleRename(selectedConversation);\n    }\n  };\n\n  const handleDragStart = (\n    e: DragEvent<HTMLButtonElement>,\n    \"\"\"\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DragEvent#: undefined\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLButtonElement#: undefined\n    \"\"\"\n    conversation: Conversation,\n  ) => {\n    if (e.dataTransfer) { #undefined\n      e.dataTransfer.setData('conversation', JSON.stringify(conversation)); #undefined\n    }\n  };\n\n  const handleRename = (conversation: Conversation) => {\n    if (renameValue.trim().length > 0) {\n      handleUpdateConversation(conversation, {\n        key: 'name',\n        value: renameValue,\n      });\n      setRenameValue('');\n      setIsRenaming(false);\n    }\n  };\n\n  const handleConfirm: MouseEventHandler<HTMLButtonElement> = (e) => {\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLButtonElement#: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MouseEventHandler#: undefined\n  \"\"\"\n    e.stopPropagation(); #undefined\n    if (isDeleting) {\n      handleDeleteConversation(conversation);\n    } else if (isRenaming) {\n      handleRename(conversation);\n    }\n    setIsDeleting(false);\n    setIsRenaming(false);\n  };\n\n  const handleCancel: MouseEventHandler<HTMLButtonElement> = (e) => {\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLButtonElement#: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MouseEventHandler#: undefined\n  \"\"\"\n    e.stopPropagation(); #undefined\n    setIsDeleting(false);\n    setIsRenaming(false);\n  };\n\n  const handleOpenRenameModal: MouseEventHandler<HTMLButtonElement> = (e) => {\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLButtonElement#: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MouseEventHandler#: undefined\n  \"\"\"\n    e.stopPropagation(); #undefined\n    setIsRenaming(true);\n    selectedConversation && setRenameValue(selectedConversation.name);\n  };\n  const handleOpenDeleteModal: MouseEventHandler<HTMLButtonElement> = (e) => {\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLButtonElement#: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MouseEventHandler#: undefined\n  \"\"\"\n    e.stopPropagation(); #undefined\n    setIsDeleting(true);\n  };\n\n  useEffect(() => { #undefined\n    if (isRenaming) {\n      setIsDeleting(false);\n    } else if (isDeleting) {\n      setIsRenaming(false);\n    }\n  }, [isRenaming, isDeleting]);\n\n  return (\n    <div className=\"relative flex items-center\">\n    \"\"\"\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n    \"\"\"\n      {isRenaming && selectedConversation?.id === conversation.id ? (\n        <div className=\"flex w-full items-center gap-3 rounded-lg bg-[#343541]/90 p-3\">\n        \"\"\"\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n        scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n        \"\"\"\n          <IconMessage size={18} />\n          <input #undefined\n            className=\"mr-12 flex-1 overflow-hidden overflow-ellipsis border-neutral-400 bg-transparent text-left text-[12.5px] leading-3 text-white outline-none focus:border-neutral-100\" #undefined\n            type=\"text\" #undefined\n            value={renameValue} #undefined\n            onChange={(e) => setRenameValue(e.target.value)}\n            \"\"\"\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#onChange.: undefined\n            scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ChangeEvent#target.: undefined\n            \"\"\"\n            onKeyDown={handleEnterDown} #undefined\n            autoFocus #undefined\n          />\n        </div> #undefined\n      ) : (\n        <button #undefined\n          className={`flex w-full cursor-pointer items-center gap-3 rounded-lg p-3 text-sm transition-colors duration-200 hover:bg-[#343541]/90 ${ #undefined\n            messageIsStreaming ? 'disabled:cursor-not-allowed' : ''\n          } ${\n            selectedConversation?.id === conversation.id\n              ? 'bg-[#343541]/90'\n              : ''\n          }`}\n          onClick={() => handleSelectConversation(conversation)} #undefined\n          disabled={messageIsStreaming} #undefined\n          draggable=\"true\" #undefined\n          onDragStart={(e) => handleDragStart(e, conversation)} #undefined\n        >\n          <IconMessage size={18} />\n          <div #undefined\n            className={`relative max-h-5 flex-1 overflow-hidden text-ellipsis whitespace-nowrap break-all text-left text-[12.5px] leading-3 ${ #undefined\n              selectedConversation?.id === conversation.id ? 'pr-12' : 'pr-1'\n            }`}\n          >\n            {conversation.name}\n          </div> #undefined\n        </button> #undefined\n      )}\n\n      {(isDeleting || isRenaming) &&\n        selectedConversation?.id === conversation.id && (\n          <div className=\"absolute right-1 z-10 flex text-gray-300\">\n          \"\"\"\n          scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n          scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n          \"\"\"\n          \"\"\"\n          scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n          scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n          \"\"\"\n            <SidebarActionButton handleClick={handleConfirm}>\n              <IconCheck size={18} />\n            </SidebarActionButton>\n            <SidebarActionButton handleClick={handleCancel}>\n              <IconX size={18} />\n            </SidebarActionButton>\n          </div> #undefined\n        )}\n\n      {selectedConversation?.id === conversation.id &&\n        !isDeleting &&\n        !isRenaming && (\n          <div className=\"absolute right-1 z-10 flex text-gray-300\">\n            <SidebarActionButton handleClick={handleOpenRenameModal}>\n              <IconPencil size={18} />\n            </SidebarActionButton>\n            <SidebarActionButton handleClick={handleOpenDeleteModal}>\n              <IconTrash size={18} />\n            </SidebarActionButton>\n          </div> #undefined\n        )}\n    </div>\n  );\n}","documentation":"This code is a React component that renders a list of conversations in a chat application. It allows users to rename or delete conversations by clicking on the conversation name or using keyboard shortcuts. The component also includes a modal for renaming and deleting conversations."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/","language":"typescript","range":[0,0,168,0],"content":"import {\n  IconCheck,\n  IconMessage,\n  IconPencil,\n  IconTrash,\n  IconX,\n} from '@tabler/icons-react';\nimport {\n  DragEvent,\n  KeyboardEvent,\n  MouseEventHandler,\n  useContext,\n  useEffect,\n  useState,\n} from 'react';\n\nimport { Conversation } from '@/types/chat';\n\nimport HomeContext from '@/pages/api/home/home.context';\n\nimport SidebarActionButton from '@/components/Buttons/SidebarActionButton';\nimport ChatbarContext from '@/components/Chatbar/Chatbar.context';\n\ninterface Props {\n  conversation: Conversation;\n}\n\nexport const ConversationComponent = ({ conversation }: Props) => {\n  const {\n    state: { selectedConversation, messageIsStreaming },\n    handleSelectConversation,\n    handleUpdateConversation,\n  } = useContext(HomeContext);\n\n  const { handleDeleteConversation } = useContext(ChatbarContext);\n\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [isRenaming, setIsRenaming] = useState(false);\n  const [renameValue, setRenameValue] = useState('');\n\n  const handleEnterDown = (e: KeyboardEvent<HTMLDivElement>) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      selectedConversation && handleRename(selectedConversation);\n    }\n  };\n\n  const handleDragStart = (\n    e: DragEvent<HTMLButtonElement>,\n    conversation: Conversation,\n  ) => {\n    if (e.dataTransfer) {\n      e.dataTransfer.setData('conversation', JSON.stringify(conversation));\n    }\n  };\n\n  const handleRename = (conversation: Conversation) => {\n    if (renameValue.trim().length > 0) {\n      handleUpdateConversation(conversation, {\n        key: 'name',\n        value: renameValue,\n      });\n      setRenameValue('');\n      setIsRenaming(false);\n    }\n  };\n\n  const handleConfirm: MouseEventHandler<HTMLButtonElement> = (e) => {\n    e.stopPropagation();\n    if (isDeleting) {\n      handleDeleteConversation(conversation);\n    } else if (isRenaming) {\n      handleRename(conversation);\n    }\n    setIsDeleting(false);\n    setIsRenaming(false);\n  };\n\n  const handleCancel: MouseEventHandler<HTMLButtonElement> = (e) => {\n    e.stopPropagation();\n    setIsDeleting(false);\n    setIsRenaming(false);\n  };\n\n  const handleOpenRenameModal: MouseEventHandler<HTMLButtonElement> = (e) => {\n    e.stopPropagation();\n    setIsRenaming(true);\n    selectedConversation && setRenameValue(selectedConversation.name);\n  };\n  const handleOpenDeleteModal: MouseEventHandler<HTMLButtonElement> = (e) => {\n    e.stopPropagation();\n    setIsDeleting(true);\n  };\n\n  useEffect(() => {\n    if (isRenaming) {\n      setIsDeleting(false);\n    } else if (isDeleting) {\n      setIsRenaming(false);\n    }\n  }, [isRenaming, isDeleting]);\n\n  return (\n    <div className=\"relative flex items-center\">\n      {isRenaming && selectedConversation?.id === conversation.id ? (\n        <div className=\"flex w-full items-center gap-3 rounded-lg bg-[#343541]/90 p-3\">\n          <IconMessage size={18} />\n          <input\n            className=\"mr-12 flex-1 overflow-hidden overflow-ellipsis border-neutral-400 bg-transparent text-left text-[12.5px] leading-3 text-white outline-none focus:border-neutral-100\"\n            type=\"text\"\n            value={renameValue}\n            onChange={(e) => setRenameValue(e.target.value)}\n            onKeyDown={handleEnterDown}\n            autoFocus\n          />\n        </div>\n      ) : (\n        <button\n          className={`flex w-full cursor-pointer items-center gap-3 rounded-lg p-3 text-sm transition-colors duration-200 hover:bg-[#343541]/90 ${\n            messageIsStreaming ? 'disabled:cursor-not-allowed' : ''\n          } ${\n            selectedConversation?.id === conversation.id\n              ? 'bg-[#343541]/90'\n              : ''\n          }`}\n          onClick={() => handleSelectConversation(conversation)}\n          disabled={messageIsStreaming}\n          draggable=\"true\"\n          onDragStart={(e) => handleDragStart(e, conversation)}\n        >\n          <IconMessage size={18} />\n          <div\n            className={`relative max-h-5 flex-1 overflow-hidden text-ellipsis whitespace-nowrap break-all text-left text-[12.5px] leading-3 ${\n              selectedConversation?.id === conversation.id ? 'pr-12' : 'pr-1'\n            }`}\n          >\n            {conversation.name}\n          </div>\n        </button>\n      )}\n\n      {(isDeleting || isRenaming) &&\n        selectedConversation?.id === conversation.id && (\n          <div className=\"absolute right-1 z-10 flex text-gray-300\">\n            <SidebarActionButton handleClick={handleConfirm}>\n              <IconCheck size={18} />\n            </SidebarActionButton>\n            <SidebarActionButton handleClick={handleCancel}>\n              <IconX size={18} />\n            </SidebarActionButton>\n          </div>\n        )}\n\n      {selectedConversation?.id === conversation.id &&\n        !isDeleting &&\n        !isRenaming && (\n          <div className=\"absolute right-1 z-10 flex text-gray-300\">\n            <SidebarActionButton handleClick={handleOpenRenameModal}>\n              <IconPencil size={18} />\n            </SidebarActionButton>\n            <SidebarActionButton handleClick={handleOpenDeleteModal}>\n              <IconTrash size={18} />\n            </SidebarActionButton>\n          </div>\n        )}\n    </div>\n  );\n};\n","file":"/components/Chatbar/components/Conversation.tsx","fileHash":"eb97dfe56543011b57e01da6c28765b9a059649b60699ce3bca3ca0acdb12854","hash":"eb97dfe56543011b57e01da6c28765b9a059649b60699ce3bca3ca0acdb12854","processedContent":"import {\n  IconCheck,\n  IconMessage,\n  IconPencil,\n  IconTrash,\n  IconX,\n} from '@tabler/icons-react';\nimport {\n  DragEvent, #undefined\n  KeyboardEvent, #undefined\n  MouseEventHandler, #undefined\n  useContext,\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().: undefined\n  \"\"\"\n  useEffect, #undefined\n  useState, #undefined\n} from 'react'; #undefined\n\nimport { Conversation } from '@/types/chat';\n\nimport HomeContext from '@/pages/api/home/home.context';\n\nimport SidebarActionButton from '@/components/Buttons/SidebarActionButton';\nimport ChatbarContext from '@/components/Chatbar/Chatbar.context';\n\ninterface Props {\n  \"\"\"This code defines a type called \"Props\" that contains a property called \"conversation\" of type \"Conversation\".\"\"\"\n  pass\n\nexport const ConversationComponent = ({ conversation }: Props) => {\n  \"\"\"This code is a React component that renders a list of conversations in a chat application. It allows users to rename or delete conversations by clicking on the conversation name or using keyboard shortcuts. The component also includes a modal for renaming and deleting conversations.\"\"\"\n  pass\n","documentation":"This code defines a React component that renders a list of conversations in a chat application. It allows users to rename or delete conversations by clicking on the conversation name or using keyboard shortcuts."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/Props#conversation.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/Props#conversation.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/Props#","attributes":{"range":[23,0,25,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/Props#","content":"interface Props {\n  conversation: Conversation;\n}","file":"/components/Chatbar/components/Conversation.tsx","language":"typescript","fileHash":"eb97dfe56543011b57e01da6c28765b9a059649b60699ce3bca3ca0acdb12854","hash":"e22fd3e755b3315cf317b24a7e44002361021d4b3b24954bb3286b39b5319caf","processedContent":"interface Props {\n  conversation: Conversation;\n}","documentation":"This code defines a type called \"Props\" that contains a property called \"conversation\" of type \"Conversation\"."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ClearConversations.tsx`/","attributes":{"range":[0,0,57,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ClearConversations.tsx`/","content":"import { IconCheck, IconTrash, IconX } from '@tabler/icons-react';\nimport { FC, useState } from 'react';\n\nimport { useTranslation } from 'next-i18next';\n\nimport { SidebarButton } from '@/components/Sidebar/SidebarButton';\n\ninterface Props {\n  onClearConversations: () => void;\n}\n\nexport const ClearConversations: FC<Props> = ({ onClearConversations }) => {\n  const [isConfirming, setIsConfirming] = useState<boolean>(false);\n\n  const { t } = useTranslation('sidebar');\n\n  const handleClearConversations = () => {\n    onClearConversations();\n    setIsConfirming(false);\n  };\n\n  return isConfirming ? (\n    <div className=\"flex w-full cursor-pointer items-center rounded-lg py-3 px-3 hover:bg-gray-500/10\">\n      <IconTrash size={18} />\n\n      <div className=\"ml-3 flex-1 text-left text-[12.5px] leading-3 text-white\">\n        {t('Are you sure?')}\n      </div>\n\n      <div className=\"flex w-[40px]\">\n        <IconCheck\n          className=\"ml-auto mr-1 min-w-[20px] text-neutral-400 hover:text-neutral-100\"\n          size={18}\n          onClick={(e) => {\n            e.stopPropagation();\n            handleClearConversations();\n          }}\n        />\n\n        <IconX\n          className=\"ml-auto min-w-[20px] text-neutral-400 hover:text-neutral-100\"\n          size={18}\n          onClick={(e) => {\n            e.stopPropagation();\n            setIsConfirming(false);\n          }}\n        />\n      </div>\n    </div>\n  ) : (\n    <SidebarButton\n      text={t('Clear conversations')}\n      icon={<IconTrash size={18} />}\n      onClick={() => setIsConfirming(true)}\n    />\n  );\n};\n","file":"/components/Chatbar/components/ClearConversations.tsx","language":"typescript","fileHash":"b68db11efffcd11b960cf47a6900d482db02b3a80be252440ca82f982d641570","hash":"b68db11efffcd11b960cf47a6900d482db02b3a80be252440ca82f982d641570","processedContent":"import { IconCheck, IconTrash, IconX } from '@tabler/icons-react';\nimport { FC, useState } from 'react';\n\"\"\"\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/: undefined\n\"\"\"\n\nimport { useTranslation } from 'next-i18next';\n\nimport { SidebarButton } from '@/components/Sidebar/SidebarButton';\n\ninterface Props {\n  \"\"\"This code defines a Props interface that includes an onClearConversations method, which is a function that clears conversations.\"\"\"\n  pass\n\nexport const ClearConversations: FC<Props> = ({ onClearConversations }) => {\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ClearConversations.tsx`/Props#: This code defines a Props interface that includes an onClearConversations method, which is a function that clears conversations.\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#: undefined\n\"\"\"\n  \"\"\"This code defines a React component that displays a button with an icon and text. When the button is clicked, it sets a state variable to true, which causes the button to display a confirmation message. If the user confirms the action, the `onClearConversations` function is called, and the state variable is set back to false.\"\"\"\n  pass\n","documentation":"This code defines a React component that displays a button with an icon and text. When the button is clicked, it sets a state variable to true, which causes the button to display a confirmation message. If the user confirms the action, the `onClearConversations` function is called, and the state variable is set back to false."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ClearConversations.tsx`/Props#","attributes":{"range":[7,0,9,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ClearConversations.tsx`/Props#","content":"interface Props {\n  onClearConversations: () => void;\n}","file":"/components/Chatbar/components/ClearConversations.tsx","language":"typescript","fileHash":"b68db11efffcd11b960cf47a6900d482db02b3a80be252440ca82f982d641570","hash":"1c4a3d3474f479e25cc44196ec83be414d1b5c6641c99c0dd29a14ed88ffe252","processedContent":"interface Props {\n  onClearConversations: () => void;\n}","documentation":"This code defines a Props interface that includes an onClearConversations method, which is a function that clears conversations."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ClearConversations.tsx`/ClearConversations.","attributes":{"range":[11,45,56,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ClearConversations.tsx`/ClearConversations.","content":"({ onClearConversations }) => {\n  const [isConfirming, setIsConfirming] = useState<boolean>(false);\n\n  const { t } = useTranslation('sidebar');\n\n  const handleClearConversations = () => {\n    onClearConversations();\n    setIsConfirming(false);\n  };\n\n  return isConfirming ? (\n    <div className=\"flex w-full cursor-pointer items-center rounded-lg py-3 px-3 hover:bg-gray-500/10\">\n      <IconTrash size={18} />\n\n      <div className=\"ml-3 flex-1 text-left text-[12.5px] leading-3 text-white\">\n        {t('Are you sure?')}\n      </div>\n\n      <div className=\"flex w-[40px]\">\n        <IconCheck\n          className=\"ml-auto mr-1 min-w-[20px] text-neutral-400 hover:text-neutral-100\"\n          size={18}\n          onClick={(e) => {\n            e.stopPropagation();\n            handleClearConversations();\n          }}\n        />\n\n        <IconX\n          className=\"ml-auto min-w-[20px] text-neutral-400 hover:text-neutral-100\"\n          size={18}\n          onClick={(e) => {\n            e.stopPropagation();\n            setIsConfirming(false);\n          }}\n        />\n      </div>\n    </div>\n  ) : (\n    <SidebarButton\n      text={t('Clear conversations')}\n      icon={<IconTrash size={18} />}\n      onClick={() => setIsConfirming(true)}\n    />\n  );\n}","file":"/components/Chatbar/components/ClearConversations.tsx","language":"typescript","fileHash":"b68db11efffcd11b960cf47a6900d482db02b3a80be252440ca82f982d641570","hash":"288bb1a2572d75258c5def8246bde8443a79677193e0a970889035e439d61d2a","processedContent":"({ onClearConversations }) => {\n  const [isConfirming, setIsConfirming] = useState<boolean>(false); #undefined\n\n  const { t } = useTranslation('sidebar');\n\n  const handleClearConversations = () => {\n    onClearConversations();\n    setIsConfirming(false);\n  };\n\n  return isConfirming ? (\n    <div className=\"flex w-full cursor-pointer items-center rounded-lg py-3 px-3 hover:bg-gray-500/10\">\n    \"\"\"\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n    scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n    \"\"\"\n      <IconTrash size={18} />\n\n      <div className=\"ml-3 flex-1 text-left text-[12.5px] leading-3 text-white\">\n      \"\"\"\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n      \"\"\"\n        {t('Are you sure?')}\n      </div> #undefined\n\n      <div className=\"flex w-[40px]\">\n      \"\"\"\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.: undefined\n      scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.: undefined\n      \"\"\"\n        <IconCheck\n          className=\"ml-auto mr-1 min-w-[20px] text-neutral-400 hover:text-neutral-100\"\n          size={18}\n          onClick={(e) => {\n            e.stopPropagation();\n            handleClearConversations();\n          }}\n        />\n\n        <IconX\n          className=\"ml-auto min-w-[20px] text-neutral-400 hover:text-neutral-100\"\n          size={18}\n          onClick={(e) => {\n            e.stopPropagation();\n            setIsConfirming(false);\n          }}\n        />\n      </div> #undefined\n    </div>\n  ) : (\n    <SidebarButton\n      text={t('Clear conversations')}\n      icon={<IconTrash size={18} />}\n      onClick={() => setIsConfirming(true)}\n    />\n  );\n}","documentation":"This code defines a React component that displays a button with an icon and text. When the button is clicked, it sets a state variable to true, which causes the button to display a confirmation message. If the user confirms the action, the `onClearConversations` function is called, and the state variable is set back to false."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ClearConversations.tsx`/Props#onClearConversations.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ClearConversations.tsx`/Props#onClearConversations.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/ChatbarContextProps#handleClearConversations.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/ChatbarContextProps#handleClearConversations.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/ChatbarContextProps#handleImportConversations.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/ChatbarContextProps#handleImportConversations.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/ChatbarContextProps#handleExportData.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/ChatbarContextProps#handleExportData.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/ChatbarContextProps#handleApiKeyChange.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/ChatbarContextProps#handleApiKeyChange.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatFolders.tsx`/Props#","attributes":{"range":[10,0,12,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatFolders.tsx`/Props#","content":"interface Props {\n  searchTerm: string;\n}","file":"/components/Chatbar/components/ChatFolders.tsx","language":"typescript","fileHash":"bdf6c41fbc8a1e9bada2d59b9fbf0cbad09ff8815dd3ddedb5274732ba43cc81","hash":"d73a6eb444bbb2f65e22b4bc2a89dd4068d5c6f07cc406b02c3b7192c892c49d","processedContent":"interface Props {\n  searchTerm: string;\n}","documentation":"This code defines a type called \"Props\" that has one property called \"searchTerm\" which is a string."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Buttons/SidebarActionButton/`index.ts`/","attributes":{"range":[0,0,1,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Buttons/SidebarActionButton/`index.ts`/","content":"export { default } from './SidebarActionButton';\n","file":"/components/Buttons/SidebarActionButton/index.ts","language":"typescript","fileHash":"253a43ef7a22d43e70c9d1a6f553c85089953b759078ea74fa0f9df7813d089b","hash":"253a43ef7a22d43e70c9d1a6f553c85089953b759078ea74fa0f9df7813d089b","processedContent":"export { default } from './SidebarActionButton';\n\"\"\"\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Buttons/SidebarActionButton/`SidebarActionButton.tsx`/SidebarActionButton.: This code defines a button component that takes in a handleClick function and some children elements as props. It renders a button element with a neutral-400 text color, and when clicked, it calls the handleClick function.\nscip-typescript npm ai-chatbot-starter 0.1.0 components/Buttons/SidebarActionButton/`SidebarActionButton.tsx`/: This code defines a button component in React that takes in a handleClick function and some children elements as props. When clicked, it calls the handleClick function.\n\"\"\"\n","documentation":"This code defines a button component in React that takes in a handleClick function and some children elements as props. When clicked, it calls the handleClick function."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Buttons/SidebarActionButton/`SidebarActionButton.tsx`/SidebarActionButton.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Buttons/SidebarActionButton/`SidebarActionButton.tsx`/SidebarActionButton.","language":"typescript","range":[7,28,14,1],"content":"({ handleClick, children }: Props) => (\n  <button\n    className=\"min-w-[20px] p-1 text-neutral-400 hover:text-neutral-100\"\n    onClick={handleClick}\n  >\n    {children}\n  </button>\n)","file":"/components/Buttons/SidebarActionButton/SidebarActionButton.tsx","fileHash":"3f557a4464495b6b0b6cca7f26ea043f1cfef75f35c951078ed1a740acfa4700","hash":"ef3742962bf6616642e206ee1d4547f8d2c0397c061c381344a3591a6633b1f6","processedContent":"({ handleClick, children }: Props) => (\n  <button #undefined\n    className=\"min-w-[20px] p-1 text-neutral-400 hover:text-neutral-100\" #undefined\n    onClick={handleClick} #undefined\n  >\n    {children}\n  </button> #undefined\n)","documentation":"This code defines a button component that takes in a handleClick function and some children elements as props. It renders a button element with a neutral-400 text color, and when clicked, it calls the handleClick function."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Buttons/SidebarActionButton/`SidebarActionButton.tsx`/","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Buttons/SidebarActionButton/`SidebarActionButton.tsx`/","language":"typescript","range":[0,0,17,0],"content":"import { MouseEventHandler, ReactElement } from 'react';\n\ninterface Props {\n  handleClick: MouseEventHandler<HTMLButtonElement>;\n  children: ReactElement;\n}\n\nconst SidebarActionButton = ({ handleClick, children }: Props) => (\n  <button\n    className=\"min-w-[20px] p-1 text-neutral-400 hover:text-neutral-100\"\n    onClick={handleClick}\n  >\n    {children}\n  </button>\n);\n\nexport default SidebarActionButton;\n","file":"/components/Buttons/SidebarActionButton/SidebarActionButton.tsx","fileHash":"3f557a4464495b6b0b6cca7f26ea043f1cfef75f35c951078ed1a740acfa4700","hash":"3f557a4464495b6b0b6cca7f26ea043f1cfef75f35c951078ed1a740acfa4700","processedContent":"import { MouseEventHandler, ReactElement } from 'react';\n\"\"\"\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MouseEventHandler#: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ReactElement#: undefined\nscip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/: undefined\n\"\"\"\n\ninterface Props {\n  \"\"\"This code defines a component's properties, including a function that handles a mouse click event and a list of child elements.\"\"\"\n  pass\n\nconst SidebarActionButton = ({ handleClick, children }: Props) => (\n  \"\"\"This code defines a button component that takes in a handleClick function and some children elements as props. It renders a button element with a neutral-400 text color, and when clicked, it calls the handleClick function.\"\"\"\n  pass\n\nexport default SidebarActionButton; #This code defines a button component that takes in a handleClick function and some children elements as props. It renders a button element with a neutral-400 text color, and when clicked, it calls the handleClick function.\n","documentation":"This code defines a button component in React that takes in a handleClick function and some children elements as props. When clicked, it calls the handleClick function."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Buttons/SidebarActionButton/`SidebarActionButton.tsx`/Props#","attributes":{"range":[2,0,5,1],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Buttons/SidebarActionButton/`SidebarActionButton.tsx`/Props#","content":"interface Props {\n  handleClick: MouseEventHandler<HTMLButtonElement>;\n  children: ReactElement;\n}","file":"/components/Buttons/SidebarActionButton/SidebarActionButton.tsx","language":"typescript","fileHash":"3f557a4464495b6b0b6cca7f26ea043f1cfef75f35c951078ed1a740acfa4700","hash":"dda6f897bd9e5e5a1c4c2173a430b3e35f2200fb90dcac463b29ed6b806f1a5c","processedContent":"interface Props {\n  handleClick: MouseEventHandler<HTMLButtonElement>;\n  \"\"\"\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MouseEventHandler#: undefined\n  scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLButtonElement#: undefined\n  \"\"\"\n  children: ReactElement; #undefined\n}","documentation":"This code defines a component's properties, including a function that handles a mouse click event and a list of child elements."}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Buttons/SidebarActionButton/`SidebarActionButton.tsx`/Props#handleClick.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Buttons/SidebarActionButton/`SidebarActionButton.tsx`/Props#handleClick.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Buttons/SidebarActionButton/`SidebarActionButton.tsx`/Props#children.","attributes":{"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Buttons/SidebarActionButton/`SidebarActionButton.tsx`/Props#children.","language":"typescript"}},{"key":"scip-typescript npm ai-chatbot-starter 0.1.0 __tests__/utils/app/`importExports.test.ts`/","attributes":{"range":[0,0,264,0],"symbol":"scip-typescript npm ai-chatbot-starter 0.1.0 __tests__/utils/app/`importExports.test.ts`/","content":"import { DEFAULT_SYSTEM_PROMPT, DEFAULT_TEMPERATURE } from '@/utils/app/const';\nimport {\n  cleanData,\n  isExportFormatV1,\n  isExportFormatV2,\n  isExportFormatV3,\n  isExportFormatV4,\n  isLatestExportFormat,\n} from '@/utils/app/importExport';\n\nimport { ExportFormatV1, ExportFormatV2, ExportFormatV4 } from '@/types/export';\nimport { OpenAIModelID, OpenAIModels } from '@/types/openai';\n\nimport { describe, expect, it } from 'vitest';\n\ndescribe('Export Format Functions', () => {\n  describe('isExportFormatV1', () => {\n    it('should return true for v1 format', () => {\n      const obj = [{ id: 1 }];\n      expect(isExportFormatV1(obj)).toBe(true);\n    });\n\n    it('should return false for non-v1 formats', () => {\n      const obj = { version: 3, history: [], folders: [] };\n      expect(isExportFormatV1(obj)).toBe(false);\n    });\n  });\n\n  describe('isExportFormatV2', () => {\n    it('should return true for v2 format', () => {\n      const obj = { history: [], folders: [] };\n      expect(isExportFormatV2(obj)).toBe(true);\n    });\n\n    it('should return false for non-v2 formats', () => {\n      const obj = { version: 3, history: [], folders: [] };\n      expect(isExportFormatV2(obj)).toBe(false);\n    });\n  });\n\n  describe('isExportFormatV3', () => {\n    it('should return true for v3 format', () => {\n      const obj = { version: 3, history: [], folders: [] };\n      expect(isExportFormatV3(obj)).toBe(true);\n    });\n\n    it('should return false for non-v3 formats', () => {\n      const obj = { version: 4, history: [], folders: [] };\n      expect(isExportFormatV3(obj)).toBe(false);\n    });\n  });\n\n  describe('isExportFormatV4', () => {\n    it('should return true for v4 format', () => {\n      const obj = { version: 4, history: [], folders: [], prompts: [] };\n      expect(isExportFormatV4(obj)).toBe(true);\n    });\n\n    it('should return false for non-v4 formats', () => {\n      const obj = { version: 5, history: [], folders: [], prompts: [] };\n      expect(isExportFormatV4(obj)).toBe(false);\n    });\n  });\n});\n\ndescribe('cleanData Functions', () => {\n  describe('cleaning v1 data', () => {\n    it('should return the latest format', () => {\n      const data = [\n        {\n          id: 1,\n          name: 'conversation 1',\n          messages: [\n            {\n              role: 'user',\n              content: \"what's up ?\",\n            },\n            {\n              role: 'assistant',\n              content: 'Hi',\n            },\n          ],\n        },\n      ] as ExportFormatV1;\n      const obj = cleanData(data);\n      expect(isLatestExportFormat(obj)).toBe(true);\n      expect(obj).toEqual({\n        version: 4,\n        history: [\n          {\n            id: 1,\n            name: 'conversation 1',\n            messages: [\n              {\n                role: 'user',\n                content: \"what's up ?\",\n              },\n              {\n                role: 'assistant',\n                content: 'Hi',\n              },\n            ],\n            model: OpenAIModels[OpenAIModelID.GPT_3_5],\n            prompt: DEFAULT_SYSTEM_PROMPT,\n            temperature: DEFAULT_TEMPERATURE,\n            folderId: null,\n          },\n        ],\n        folders: [],\n        prompts: [],\n      });\n    });\n  });\n\n  describe('cleaning v2 data', () => {\n    it('should return the latest format', () => {\n      const data = {\n        history: [\n          {\n            id: '1',\n            name: 'conversation 1',\n            messages: [\n              {\n                role: 'user',\n                content: \"what's up ?\",\n              },\n              {\n                role: 'assistant',\n                content: 'Hi',\n              },\n            ],\n          },\n        ],\n        folders: [\n          {\n            id: 1,\n            name: 'folder 1',\n          },\n        ],\n      } as ExportFormatV2;\n      const obj = cleanData(data);\n      expect(isLatestExportFormat(obj)).toBe(true);\n      expect(obj).toEqual({\n        version: 4,\n        history: [\n          {\n            id: '1',\n            name: 'conversation 1',\n            messages: [\n              {\n                role: 'user',\n                content: \"what's up ?\",\n              },\n              {\n                role: 'assistant',\n                content: 'Hi',\n              },\n            ],\n            model: OpenAIModels[OpenAIModelID.GPT_3_5],\n            prompt: DEFAULT_SYSTEM_PROMPT,\n            temperature: DEFAULT_TEMPERATURE,\n            folderId: null,\n          },\n        ],\n        folders: [\n          {\n            id: '1',\n            name: 'folder 1',\n            type: 'chat',\n          },\n        ],\n        prompts: [],\n      });\n    });\n  });\n\n  describe('cleaning v4 data', () => {\n    it('should return the latest format', () => {\n      const data = {\n        version: 4,\n        history: [\n          {\n            id: '1',\n            name: 'conversation 1',\n            messages: [\n              {\n                role: 'user',\n                content: \"what's up ?\",\n              },\n              {\n                role: 'assistant',\n                content: 'Hi',\n              },\n            ],\n            model: OpenAIModels[OpenAIModelID.GPT_3_5],\n            prompt: DEFAULT_SYSTEM_PROMPT,\n            temperature: DEFAULT_TEMPERATURE,\n            folderId: null,\n          },\n        ],\n        folders: [\n          {\n            id: '1',\n            name: 'folder 1',\n            type: 'chat',\n          },\n        ],\n        prompts: [\n          {\n            id: '1',\n            name: 'prompt 1',\n            description: '',\n            content: '',\n            model: OpenAIModels[OpenAIModelID.GPT_3_5],\n            folderId: null,\n          },\n        ],\n      } as ExportFormatV4;\n\n      const obj = cleanData(data);\n      expect(isLatestExportFormat(obj)).toBe(true);\n      expect(obj).toEqual({\n        version: 4,\n        history: [\n          {\n            id: '1',\n            name: 'conversation 1',\n            messages: [\n              {\n                role: 'user',\n                content: \"what's up ?\",\n              },\n              {\n                role: 'assistant',\n                content: 'Hi',\n              },\n            ],\n            model: OpenAIModels[OpenAIModelID.GPT_3_5],\n            prompt: DEFAULT_SYSTEM_PROMPT,\n            temperature: DEFAULT_TEMPERATURE,\n            folderId: null,\n          },\n        ],\n        folders: [\n          {\n            id: '1',\n            name: 'folder 1',\n            type: 'chat',\n          },\n        ],\n        prompts: [\n          {\n            id: '1',\n            name: 'prompt 1',\n            description: '',\n            content: '',\n            model: OpenAIModels[OpenAIModelID.GPT_3_5],\n            folderId: null,\n          },\n        ],\n      });\n    });\n  });\n});\n","file":"/__tests__/utils/app/importExports.test.ts","language":"typescript","fileHash":"8799d278cbd1be2dcac3cf5c6c90572b5f822f825fdb11e6ffe5a2eb671c28ab","hash":"8799d278cbd1be2dcac3cf5c6c90572b5f822f825fdb11e6ffe5a2eb671c28ab","processedContent":"import { DEFAULT_SYSTEM_PROMPT, DEFAULT_TEMPERATURE } from '@/utils/app/const';\nimport {\n  cleanData,\n  isExportFormatV1,\n  isExportFormatV2,\n  isExportFormatV3,\n  isExportFormatV4,\n  isLatestExportFormat,\n} from '@/utils/app/importExport';\n\nimport { ExportFormatV1, ExportFormatV2, ExportFormatV4 } from '@/types/export';\nimport { OpenAIModelID, OpenAIModels } from '@/types/openai';\n\nimport { describe, expect, it } from 'vitest';\n\ndescribe('Export Format Functions', () => {\n  describe('isExportFormatV1', () => {\n    it('should return true for v1 format', () => {\n      const obj = [{ id: 1 }];\n      expect(isExportFormatV1(obj)).toBe(true);\n    });\n\n    it('should return false for non-v1 formats', () => {\n      const obj = { version: 3, history: [], folders: [] };\n      expect(isExportFormatV1(obj)).toBe(false);\n    });\n  });\n\n  describe('isExportFormatV2', () => {\n    it('should return true for v2 format', () => {\n      const obj = { history: [], folders: [] };\n      expect(isExportFormatV2(obj)).toBe(true);\n    });\n\n    it('should return false for non-v2 formats', () => {\n      const obj = { version: 3, history: [], folders: [] };\n      expect(isExportFormatV2(obj)).toBe(false);\n    });\n  });\n\n  describe('isExportFormatV3', () => {\n    it('should return true for v3 format', () => {\n      const obj = { version: 3, history: [], folders: [] };\n      expect(isExportFormatV3(obj)).toBe(true);\n    });\n\n    it('should return false for non-v3 formats', () => {\n      const obj = { version: 4, history: [], folders: [] };\n      expect(isExportFormatV3(obj)).toBe(false);\n    });\n  });\n\n  describe('isExportFormatV4', () => {\n    it('should return true for v4 format', () => {\n      const obj = { version: 4, history: [], folders: [], prompts: [] };\n      expect(isExportFormatV4(obj)).toBe(true);\n    });\n\n    it('should return false for non-v4 formats', () => {\n      const obj = { version: 5, history: [], folders: [], prompts: [] };\n      expect(isExportFormatV4(obj)).toBe(false);\n    });\n  });\n});\n\ndescribe('cleanData Functions', () => {\n  describe('cleaning v1 data', () => {\n    it('should return the latest format', () => {\n      const data = [\n        {\n          id: 1,\n          name: 'conversation 1',\n          messages: [\n            {\n              role: 'user',\n              content: \"what's up ?\",\n            },\n            {\n              role: 'assistant',\n              content: 'Hi',\n            },\n          ],\n        },\n      ] as ExportFormatV1;\n      const obj = cleanData(data);\n      expect(isLatestExportFormat(obj)).toBe(true);\n      expect(obj).toEqual({\n        version: 4,\n        history: [\n          {\n            id: 1,\n            name: 'conversation 1',\n            messages: [\n              {\n                role: 'user',\n                content: \"what's up ?\",\n              },\n              {\n                role: 'assistant',\n                content: 'Hi',\n              },\n            ],\n            model: OpenAIModels[OpenAIModelID.GPT_3_5],\n            prompt: DEFAULT_SYSTEM_PROMPT,\n            temperature: DEFAULT_TEMPERATURE,\n            folderId: null,\n          },\n        ],\n        folders: [],\n        prompts: [],\n      });\n    });\n  });\n\n  describe('cleaning v2 data', () => {\n    it('should return the latest format', () => {\n      const data = {\n        history: [\n          {\n            id: '1',\n            name: 'conversation 1',\n            messages: [\n              {\n                role: 'user',\n                content: \"what's up ?\",\n              },\n              {\n                role: 'assistant',\n                content: 'Hi',\n              },\n            ],\n          },\n        ],\n        folders: [\n          {\n            id: 1,\n            name: 'folder 1',\n          },\n        ],\n      } as ExportFormatV2;\n      const obj = cleanData(data);\n      expect(isLatestExportFormat(obj)).toBe(true);\n      expect(obj).toEqual({\n        version: 4,\n        history: [\n          {\n            id: '1',\n            name: 'conversation 1',\n            messages: [\n              {\n                role: 'user',\n                content: \"what's up ?\",\n              },\n              {\n                role: 'assistant',\n                content: 'Hi',\n              },\n            ],\n            model: OpenAIModels[OpenAIModelID.GPT_3_5],\n            prompt: DEFAULT_SYSTEM_PROMPT,\n            temperature: DEFAULT_TEMPERATURE,\n            folderId: null,\n          },\n        ],\n        folders: [\n          {\n            id: '1',\n            name: 'folder 1',\n            type: 'chat',\n          },\n        ],\n        prompts: [],\n      });\n    });\n  });\n\n  describe('cleaning v4 data', () => {\n    it('should return the latest format', () => {\n      const data = {\n        version: 4,\n        history: [\n          {\n            id: '1',\n            name: 'conversation 1',\n            messages: [\n              {\n                role: 'user',\n                content: \"what's up ?\",\n              },\n              {\n                role: 'assistant',\n                content: 'Hi',\n              },\n            ],\n            model: OpenAIModels[OpenAIModelID.GPT_3_5],\n            prompt: DEFAULT_SYSTEM_PROMPT,\n            temperature: DEFAULT_TEMPERATURE,\n            folderId: null,\n          },\n        ],\n        folders: [\n          {\n            id: '1',\n            name: 'folder 1',\n            type: 'chat',\n          },\n        ],\n        prompts: [\n          {\n            id: '1',\n            name: 'prompt 1',\n            description: '',\n            content: '',\n            model: OpenAIModels[OpenAIModelID.GPT_3_5],\n            folderId: null,\n          },\n        ],\n      } as ExportFormatV4;\n\n      const obj = cleanData(data);\n      expect(isLatestExportFormat(obj)).toBe(true);\n      expect(obj).toEqual({\n        version: 4,\n        history: [\n          {\n            id: '1',\n            name: 'conversation 1',\n            messages: [\n              {\n                role: 'user',\n                content: \"what's up ?\",\n              },\n              {\n                role: 'assistant',\n                content: 'Hi',\n              },\n            ],\n            model: OpenAIModels[OpenAIModelID.GPT_3_5],\n            prompt: DEFAULT_SYSTEM_PROMPT,\n            temperature: DEFAULT_TEMPERATURE,\n            folderId: null,\n          },\n        ],\n        folders: [\n          {\n            id: '1',\n            name: 'folder 1',\n            type: 'chat',\n          },\n        ],\n        prompts: [\n          {\n            id: '1',\n            name: 'prompt 1',\n            description: '',\n            content: '',\n            model: OpenAIModels[OpenAIModelID.GPT_3_5],\n            folderId: null,\n          },\n        ],\n      });\n    });\n  });\n});\n","documentation":"The code is a set of functions for cleaning and validating data in an export format for a chatbot. It includes functions for checking the version of the data, cleaning v1, v2, and v4 formats, and returning the latest format."}}],"edges":[{"key":"geid_144_0","source":"scip-typescript npm ai-chatbot-starter 0.1.0 `vitest.config.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/","attributes":{"type":"uses","at":[0,17,0,23]}},{"key":"geid_144_1","source":"scip-typescript npm ai-chatbot-starter 0.1.0 `vitest.config.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/__dirname.","attributes":{"type":"uses","at":[6,24,6,33]}},{"key":"geid_144_2","source":"scip-typescript npm ai-chatbot-starter 0.1.0 `tailwind.config.js`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/require.","attributes":{"type":"uses","at":[16,12,16,19]}},{"key":"geid_144_3","source":"scip-typescript npm ai-chatbot-starter 0.1.0 `next-i18next.config.js`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/require.","attributes":{"type":"uses","at":[30,8,30,15]}},{"key":"geid_144_4","source":"scip-typescript npm ai-chatbot-starter 0.1.0 `next-i18next.config.js`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/","attributes":{"type":"uses","at":[30,16,30,22]}},{"key":"geid_144_5","source":"scip-typescript npm ai-chatbot-starter 0.1.0 `next-i18next.config.js`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`path.d.ts`/`\"path\"`/path/PlatformPath#resolve().","attributes":{"type":"uses","at":[30,24,30,31]}},{"key":"geid_144_6","source":"scip-typescript npm ai-chatbot-starter 0.1.0 `next.config.js`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 `next-i18next.config.js`/i18n0:","attributes":{"type":"uses","at":[0,8,0,12]}},{"key":"geid_144_7","source":"scip-typescript npm ai-chatbot-starter 0.1.0 `next.config.js`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/require.","attributes":{"type":"uses","at":[0,17,0,24]}},{"key":"geid_144_8","source":"scip-typescript npm ai-chatbot-starter 0.1.0 `next.config.js`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 `next-i18next.config.js`/","attributes":{"type":"uses","at":[0,25,0,48]}},{"key":"geid_144_9","source":"scip-typescript npm ai-chatbot-starter 0.1.0 `next.config.js`/","target":"scip-typescript npm next 14.0.3 dist/server/`config-shared.d.ts`/WebpackConfigContext#isServer.","attributes":{"type":"uses","at":[7,20,7,28]}},{"key":"geid_144_10","source":"scip-typescript npm ai-chatbot-starter 0.1.0 `next.config.js`/","target":"scip-typescript npm next 14.0.3 dist/server/`config-shared.d.ts`/WebpackConfigContext#dev.","attributes":{"type":"uses","at":[7,30,7,33]}},{"key":"geid_144_11","source":"scip-typescript npm ai-chatbot-starter 0.1.0 `next.config.js`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 `next.config.js`/nextConfig.","attributes":{"type":"uses","at":[17,17,17,27]}},{"key":"geid_144_12","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/process.","attributes":{"type":"uses","at":[1,2,1,9]}},{"key":"geid_144_13","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/process.","attributes":{"type":"uses","at":[1,2,1,9]}},{"key":"geid_144_14","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/NodeJS/Process#env.","attributes":{"type":"uses","at":[1,10,1,13]}},{"key":"geid_144_15","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/process.","attributes":{"type":"uses","at":[5,2,5,9]}},{"key":"geid_144_16","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/process.","attributes":{"type":"uses","at":[5,2,5,9]}},{"key":"geid_144_17","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/NodeJS/Process#env.","attributes":{"type":"uses","at":[5,10,5,13]}},{"key":"geid_144_18","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/process.","attributes":{"type":"uses","at":[8,13,8,20]}},{"key":"geid_144_19","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/process.","attributes":{"type":"uses","at":[8,13,8,20]}},{"key":"geid_144_20","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/NodeJS/Process#env.","attributes":{"type":"uses","at":[8,21,8,24]}},{"key":"geid_144_21","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/process.","attributes":{"type":"uses","at":[11,2,11,9]}},{"key":"geid_144_22","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/process.","attributes":{"type":"uses","at":[11,2,11,9]}},{"key":"geid_144_23","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/NodeJS/Process#env.","attributes":{"type":"uses","at":[11,10,11,13]}},{"key":"geid_144_24","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/process.","attributes":{"type":"uses","at":[14,2,14,9]}},{"key":"geid_144_25","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/process.","attributes":{"type":"uses","at":[14,2,14,9]}},{"key":"geid_144_26","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/NodeJS/Process#env.","attributes":{"type":"uses","at":[14,10,14,13]}},{"key":"geid_144_27","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/process.","attributes":{"type":"uses","at":[17,2,17,9]}},{"key":"geid_144_28","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/process.","attributes":{"type":"uses","at":[17,2,17,9]}},{"key":"geid_144_29","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/NodeJS/Process#env.","attributes":{"type":"uses","at":[17,10,17,13]}},{"key":"geid_144_30","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/process.","attributes":{"type":"uses","at":[20,2,20,9]}},{"key":"geid_144_31","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/process.","attributes":{"type":"uses","at":[20,2,20,9]}},{"key":"geid_144_32","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/NodeJS/Process#env.","attributes":{"type":"uses","at":[20,10,20,13]}},{"key":"geid_144_33","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModel#","attributes":{"type":"defines","at":[2,0,7,1]}},{"key":"geid_144_34","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/OPENAI_API_TYPE.","attributes":{"type":"uses","at":[0,9,0,24]}},{"key":"geid_144_35","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/","attributes":{"type":"uses","at":[0,32,0,52]}},{"key":"geid_144_36","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModelID#","attributes":{"type":"uses","at":[17,31,17,44]}},{"key":"geid_144_37","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModelID#GPT_3_5.","attributes":{"type":"uses","at":[17,45,17,52]}},{"key":"geid_144_38","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModelID#","attributes":{"type":"uses","at":[19,34,19,47]}},{"key":"geid_144_39","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModel#","attributes":{"type":"uses","at":[19,49,19,60]}},{"key":"geid_144_40","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModelID#","attributes":{"type":"uses","at":[20,3,20,16]}},{"key":"geid_144_41","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModelID#GPT_3_5.","attributes":{"type":"uses","at":[20,17,20,24]}},{"key":"geid_144_42","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModelID#","attributes":{"type":"uses","at":[21,8,21,21]}},{"key":"geid_144_43","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModelID#GPT_3_5.","attributes":{"type":"uses","at":[21,22,21,29]}},{"key":"geid_144_44","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModelID#","attributes":{"type":"uses","at":[26,3,26,16]}},{"key":"geid_144_45","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModelID#GPT_3_5_AZ.","attributes":{"type":"uses","at":[26,17,26,27]}},{"key":"geid_144_46","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModelID#","attributes":{"type":"uses","at":[27,8,27,21]}},{"key":"geid_144_47","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModelID#GPT_3_5_AZ.","attributes":{"type":"uses","at":[27,22,27,32]}},{"key":"geid_144_48","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModelID#","attributes":{"type":"uses","at":[32,3,32,16]}},{"key":"geid_144_49","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModelID#GPT_4.","attributes":{"type":"uses","at":[32,17,32,22]}},{"key":"geid_144_50","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModelID#","attributes":{"type":"uses","at":[33,8,33,21]}},{"key":"geid_144_51","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModelID#GPT_4.","attributes":{"type":"uses","at":[33,22,33,27]}},{"key":"geid_144_52","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModelID#","attributes":{"type":"uses","at":[38,3,38,16]}},{"key":"geid_144_53","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModelID#GPT_4_32K.","attributes":{"type":"uses","at":[38,17,38,26]}},{"key":"geid_144_54","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModelID#","attributes":{"type":"uses","at":[39,8,39,21]}},{"key":"geid_144_55","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModelID#GPT_4_32K.","attributes":{"type":"uses","at":[39,22,39,31]}},{"key":"geid_144_56","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`chat.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`chat.ts`/Conversation#","attributes":{"type":"defines","at":[17,0,25,1]}},{"key":"geid_144_57","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`chat.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`chat.ts`/ChatBody#","attributes":{"type":"defines","at":[9,0,15,1]}},{"key":"geid_144_58","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`chat.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`chat.ts`/Message#","attributes":{"type":"defines","at":[2,0,5,1]}},{"key":"geid_144_59","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`chat.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModel#","attributes":{"type":"uses","at":[0,9,0,20]}},{"key":"geid_144_60","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`chat.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/","attributes":{"type":"uses","at":[0,28,0,38]}},{"key":"geid_144_61","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`chat.ts`/Message#","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`chat.ts`/Role#","attributes":{"type":"uses","at":[3,8,3,12]}},{"key":"geid_144_62","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`chat.ts`/ChatBody#","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModel#","attributes":{"type":"uses","at":[10,9,10,20]}},{"key":"geid_144_63","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`chat.ts`/ChatBody#","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`chat.ts`/Message#","attributes":{"type":"uses","at":[11,12,11,19]}},{"key":"geid_144_64","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`chat.ts`/Conversation#","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`chat.ts`/Message#","attributes":{"type":"uses","at":[20,12,20,19]}},{"key":"geid_144_65","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`chat.ts`/Conversation#","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModel#","attributes":{"type":"uses","at":[21,9,21,20]}},{"key":"geid_144_66","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`folder.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`folder.ts`/FolderInterface#","attributes":{"type":"defines","at":[0,0,4,1]}},{"key":"geid_144_67","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`folder.ts`/FolderInterface#","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`folder.ts`/FolderType#","attributes":{"type":"uses","at":[3,8,3,18]}},{"key":"geid_144_68","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`data.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`data.ts`/KeyValuePair#","attributes":{"type":"defines","at":[0,0,3,1]}},{"key":"geid_144_69","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/PluginKey#","attributes":{"type":"defines","at":[8,0,11,1]}},{"key":"geid_144_70","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/Plugin#","attributes":{"type":"defines","at":[2,0,6,1]}},{"key":"geid_144_71","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`data.ts`/KeyValuePair#","attributes":{"type":"uses","at":[0,9,0,21]}},{"key":"geid_144_72","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`data.ts`/","attributes":{"type":"uses","at":[0,29,0,37]}},{"key":"geid_144_73","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/Plugin#","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/PluginID#","attributes":{"type":"uses","at":[3,6,3,14]}},{"key":"geid_144_74","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/Plugin#","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/PluginName#","attributes":{"type":"uses","at":[4,8,4,18]}},{"key":"geid_144_75","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/Plugin#","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`data.ts`/KeyValuePair#","attributes":{"type":"uses","at":[5,16,5,28]}},{"key":"geid_144_76","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/PluginKey#","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/PluginID#","attributes":{"type":"uses","at":[9,12,9,20]}},{"key":"geid_144_77","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/PluginKey#","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`data.ts`/KeyValuePair#","attributes":{"type":"uses","at":[10,16,10,28]}},{"key":"geid_144_78","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/PluginID#","attributes":{"type":"uses","at":[21,29,21,37]}},{"key":"geid_144_79","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/Plugin#","attributes":{"type":"uses","at":[21,39,21,45]}},{"key":"geid_144_80","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/PluginID#","attributes":{"type":"uses","at":[22,3,22,11]}},{"key":"geid_144_81","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/PluginID#GOOGLE_SEARCH.","attributes":{"type":"uses","at":[22,12,22,25]}},{"key":"geid_144_82","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/PluginID#","attributes":{"type":"uses","at":[23,8,23,16]}},{"key":"geid_144_83","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/PluginID#GOOGLE_SEARCH.","attributes":{"type":"uses","at":[23,17,23,30]}},{"key":"geid_144_84","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/PluginName#","attributes":{"type":"uses","at":[24,10,24,20]}},{"key":"geid_144_85","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/PluginName#GOOGLE_SEARCH.","attributes":{"type":"uses","at":[24,21,24,34]}},{"key":"geid_144_86","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/Plugins.","attributes":{"type":"uses","at":[38,40,38,47]}},{"key":"geid_144_87","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`prompt.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`prompt.ts`/Prompt#","attributes":{"type":"defines","at":[2,0,9,1]}},{"key":"geid_144_88","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`prompt.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModel#","attributes":{"type":"uses","at":[0,9,0,20]}},{"key":"geid_144_89","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`prompt.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/","attributes":{"type":"uses","at":[0,28,0,38]}},{"key":"geid_144_90","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`prompt.ts`/Prompt#","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModel#","attributes":{"type":"uses","at":[7,9,7,20]}},{"key":"geid_144_91","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`storage.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`storage.ts`/LocalStorage#","attributes":{"type":"defines","at":[6,0,20,1]}},{"key":"geid_144_92","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`storage.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`chat.ts`/Conversation#","attributes":{"type":"uses","at":[0,9,0,21]}},{"key":"geid_144_93","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`storage.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`chat.ts`/","attributes":{"type":"uses","at":[0,29,0,37]}},{"key":"geid_144_94","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`storage.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`folder.ts`/FolderInterface#","attributes":{"type":"uses","at":[1,9,1,24]}},{"key":"geid_144_95","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`storage.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`folder.ts`/","attributes":{"type":"uses","at":[1,32,1,42]}},{"key":"geid_144_96","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`storage.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/PluginKey#","attributes":{"type":"uses","at":[2,9,2,18]}},{"key":"geid_144_97","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`storage.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/","attributes":{"type":"uses","at":[2,26,2,36]}},{"key":"geid_144_98","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`storage.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`prompt.ts`/Prompt#","attributes":{"type":"uses","at":[3,9,3,15]}},{"key":"geid_144_99","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`storage.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`prompt.ts`/","attributes":{"type":"uses","at":[3,23,3,33]}},{"key":"geid_144_100","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`storage.ts`/LocalStorage#","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`chat.ts`/Conversation#","attributes":{"type":"uses","at":[8,23,8,35]}},{"key":"geid_144_101","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`storage.ts`/LocalStorage#","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`chat.ts`/Conversation#","attributes":{"type":"uses","at":[9,24,9,36]}},{"key":"geid_144_102","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`storage.ts`/LocalStorage#","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`folder.ts`/FolderInterface#","attributes":{"type":"uses","at":[12,11,12,26]}},{"key":"geid_144_103","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`storage.ts`/LocalStorage#","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`prompt.ts`/Prompt#","attributes":{"type":"uses","at":[14,11,14,17]}},{"key":"geid_144_104","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`storage.ts`/LocalStorage#","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`plugin.ts`/PluginKey#","attributes":{"type":"uses","at":[19,14,19,23]}},{"key":"geid_144_105","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`settings.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`settings.ts`/Settings#","attributes":{"type":"defines","at":[0,0,2,1]}},{"key":"geid_144_106","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`google.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`google.ts`/GoogleSource#","attributes":{"type":"defines","at":[11,0,18,1]}},{"key":"geid_144_107","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`google.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`google.ts`/GoogleResponse#","attributes":{"type":"defines","at":[7,0,9,1]}},{"key":"geid_144_108","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`google.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`google.ts`/GoogleBody#","attributes":{"type":"defines","at":[2,0,5,1]}},{"key":"geid_144_109","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`google.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`chat.ts`/ChatBody#","attributes":{"type":"uses","at":[0,9,0,17]}},{"key":"geid_144_110","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`google.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`chat.ts`/Message#","attributes":{"type":"uses","at":[0,19,0,26]}},{"key":"geid_144_111","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`google.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`chat.ts`/","attributes":{"type":"uses","at":[0,34,0,42]}},{"key":"geid_144_112","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`google.ts`/GoogleBody#","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`chat.ts`/ChatBody#","attributes":{"type":"uses","at":[2,36,2,44]}},{"key":"geid_144_113","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`google.ts`/GoogleResponse#","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`chat.ts`/Message#","attributes":{"type":"uses","at":[8,11,8,18]}},{"key":"geid_144_114","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/ExportFormatV4#","attributes":{"type":"defines","at":[39,0,44,1]}},{"key":"geid_144_115","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/ExportFormatV3#","attributes":{"type":"defines","at":[33,0,37,1]}},{"key":"geid_144_116","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/ExportFormatV2#","attributes":{"type":"defines","at":[27,0,30,1]}},{"key":"geid_144_117","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/ChatFolder#","attributes":{"type":"defines","at":[22,0,25,1]}},{"key":"geid_144_118","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/ConversationV1#","attributes":{"type":"defines","at":[13,0,17,1]}},{"key":"geid_144_119","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`chat.ts`/Conversation#","attributes":{"type":"uses","at":[0,9,0,21]}},{"key":"geid_144_120","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`chat.ts`/Message#","attributes":{"type":"uses","at":[0,23,0,30]}},{"key":"geid_144_121","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`chat.ts`/","attributes":{"type":"uses","at":[0,38,0,46]}},{"key":"geid_144_122","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`folder.ts`/FolderInterface#","attributes":{"type":"uses","at":[1,9,1,24]}},{"key":"geid_144_123","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`folder.ts`/","attributes":{"type":"uses","at":[1,32,1,42]}},{"key":"geid_144_124","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/OpenAIModel#","attributes":{"type":"uses","at":[2,9,2,20]}},{"key":"geid_144_125","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`openai.ts`/","attributes":{"type":"uses","at":[2,28,2,38]}},{"key":"geid_144_126","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`prompt.ts`/Prompt#","attributes":{"type":"uses","at":[3,9,3,15]}},{"key":"geid_144_127","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`prompt.ts`/","attributes":{"type":"uses","at":[3,23,3,33]}},{"key":"geid_144_128","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/ExportFormatV1#","attributes":{"type":"uses","at":[6,4,6,18]}},{"key":"geid_144_129","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/ExportFormatV2#","attributes":{"type":"uses","at":[7,4,7,18]}},{"key":"geid_144_130","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/ExportFormatV3#","attributes":{"type":"uses","at":[8,4,8,18]}},{"key":"geid_144_131","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/ExportFormatV4#","attributes":{"type":"uses","at":[9,4,9,18]}},{"key":"geid_144_132","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/ExportFormatV4#","attributes":{"type":"uses","at":[10,33,10,47]}},{"key":"geid_144_133","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/ConversationV1#","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`chat.ts`/Message#","attributes":{"type":"uses","at":[16,12,16,19]}},{"key":"geid_144_134","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/ConversationV1#","attributes":{"type":"uses","at":[19,29,19,43]}},{"key":"geid_144_135","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/ExportFormatV2#","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`chat.ts`/Conversation#","attributes":{"type":"uses","at":[28,11,28,23]}},{"key":"geid_144_136","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/ExportFormatV2#","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/ChatFolder#","attributes":{"type":"uses","at":[29,11,29,21]}},{"key":"geid_144_137","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/ExportFormatV3#","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`chat.ts`/Conversation#","attributes":{"type":"uses","at":[35,11,35,23]}},{"key":"geid_144_138","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/ExportFormatV3#","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`folder.ts`/FolderInterface#","attributes":{"type":"uses","at":[36,11,36,26]}},{"key":"geid_144_139","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/ExportFormatV4#","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`chat.ts`/Conversation#","attributes":{"type":"uses","at":[41,11,41,23]}},{"key":"geid_144_140","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/ExportFormatV4#","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`folder.ts`/FolderInterface#","attributes":{"type":"uses","at":[42,11,42,26]}},{"key":"geid_144_141","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`export.ts`/ExportFormatV4#","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`prompt.ts`/Prompt#","attributes":{"type":"uses","at":[43,11,43,17]}},{"key":"geid_144_142","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`error.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`error.ts`/ErrorMessage#","attributes":{"type":"defines","at":[0,0,4,1]}},{"key":"geid_144_143","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`error.ts`/ErrorMessage#","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/String#","attributes":{"type":"uses","at":[1,8,1,14]}},{"key":"geid_144_144","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`error.ts`/ErrorMessage#","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/String#","attributes":{"type":"uses","at":[2,9,2,15]}},{"key":"geid_144_145","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`error.ts`/ErrorMessage#","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/String#","attributes":{"type":"uses","at":[3,16,3,22]}},{"key":"geid_144_146","source":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`env.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 types/`env.ts`/ProcessEnv#","attributes":{"type":"defines","at":[0,0,6,1]}},{"key":"geid_144_147","source":"scip-typescript npm ai-chatbot-starter 0.1.0 services/`useApiService.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 services/`useApiService.ts`/useApiService.","attributes":{"type":"defines","at":[8,22,43,1]}},{"key":"geid_144_148","source":"scip-typescript npm ai-chatbot-starter 0.1.0 services/`useApiService.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 services/`useApiService.ts`/GetModelsRequestProps#","attributes":{"type":"defines","at":[4,0,6,1]}},{"key":"geid_144_149","source":"scip-typescript npm ai-chatbot-starter 0.1.0 services/`useApiService.ts`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useCallback().","attributes":{"type":"uses","at":[0,9,0,20]}},{"key":"geid_144_150","source":"scip-typescript npm ai-chatbot-starter 0.1.0 services/`useApiService.ts`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/","attributes":{"type":"uses","at":[0,28,0,35]}},{"key":"geid_144_151","source":"scip-typescript npm ai-chatbot-starter 0.1.0 services/`useApiService.ts`/useApiService.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useCallback().","attributes":{"type":"uses","at":[27,20,27,31]}},{"key":"geid_144_152","source":"scip-typescript npm ai-chatbot-starter 0.1.0 services/`useApiService.ts`/useApiService.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 services/`useApiService.ts`/GetModelsRequestProps#","attributes":{"type":"uses","at":[28,13,28,34]}},{"key":"geid_144_153","source":"scip-typescript npm ai-chatbot-starter 0.1.0 services/`useApiService.ts`/useApiService.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/AbortSignal#","attributes":{"type":"uses","at":[28,45,28,56]}},{"key":"geid_144_154","source":"scip-typescript npm ai-chatbot-starter 0.1.0 services/`useApiService.ts`/useApiService.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/AbortSignal.","attributes":{"type":"uses","at":[28,45,28,56]}},{"key":"geid_144_155","source":"scip-typescript npm ai-chatbot-starter 0.1.0 services/`useApiService.ts`/useApiService.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 services/`useApiService.ts`/GetModelsRequestProps#","attributes":{"type":"uses","at":[29,31,29,52]}},{"key":"geid_144_156","source":"scip-typescript npm ai-chatbot-starter 0.1.0 services/`useApiService.ts`/useApiService.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 services/`useApiService.ts`/GetModelsRequestProps#key.","attributes":{"type":"uses","at":[30,28,30,31]}},{"key":"geid_144_157","source":"scip-typescript npm ai-chatbot-starter 0.1.0 services/`useApiService.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 services/`useApiService.ts`/useApiService.","attributes":{"type":"uses","at":[45,15,45,28]}},{"key":"geid_144_158","source":"scip-typescript npm ai-chatbot-starter 0.1.0 services/`errorService.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 services/`errorService.ts`/useErrorService.","attributes":{"type":"defines","at":[6,24,32,1]}},{"key":"geid_144_159","source":"scip-typescript npm ai-chatbot-starter 0.1.0 services/`errorService.ts`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useMemo().","attributes":{"type":"uses","at":[0,9,0,16]}},{"key":"geid_144_160","source":"scip-typescript npm ai-chatbot-starter 0.1.0 services/`errorService.ts`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/","attributes":{"type":"uses","at":[0,24,0,31]}},{"key":"geid_144_161","source":"scip-typescript npm ai-chatbot-starter 0.1.0 services/`errorService.ts`/useErrorService.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useMemo().","attributes":{"type":"uses","at":[10,20,10,27]}},{"key":"geid_144_162","source":"scip-typescript npm ai-chatbot-starter 0.1.0 services/`errorService.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 services/`errorService.ts`/useErrorService.","attributes":{"type":"uses","at":[34,15,34,30]}},{"key":"geid_144_163","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`index.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","attributes":{"type":"uses","at":[0,9,0,16]}},{"key":"geid_144_164","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`index.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/getServerSideProps.","attributes":{"type":"uses","at":[0,18,0,36]}},{"key":"geid_144_165","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`index.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/","attributes":{"type":"uses","at":[0,44,0,52]}},{"key":"geid_144_166","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`index.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","attributes":{"type":"uses","at":[0,9,0,16]}},{"key":"geid_144_167","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`index.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/getServerSideProps.","attributes":{"type":"uses","at":[0,18,0,36]}},{"key":"geid_144_168","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`index.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`index.ts`/","attributes":{"type":"uses","at":[0,44,0,56]}},{"key":"geid_144_169","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_document.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_document.tsx`/Document().","attributes":{"type":"defines","at":[8,0,23,1]}},{"key":"geid_144_170","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_document.tsx`/","target":"scip-typescript npm next 14.0.3 dist/shared/lib/`utils.d.ts`/DocumentProps#","attributes":{"type":"uses","at":[0,9,0,22]}},{"key":"geid_144_171","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_document.tsx`/","target":"scip-typescript npm next 14.0.3 dist/pages/`_document.d.ts`/Head#","attributes":{"type":"uses","at":[0,24,0,28]}},{"key":"geid_144_172","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_document.tsx`/","target":"scip-typescript npm next 14.0.3 dist/pages/`_document.d.ts`/Html().","attributes":{"type":"uses","at":[0,30,0,34]}},{"key":"geid_144_173","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_document.tsx`/","target":"scip-typescript npm next 14.0.3 dist/pages/`_document.d.ts`/Main().","attributes":{"type":"uses","at":[0,36,0,40]}},{"key":"geid_144_174","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_document.tsx`/","target":"scip-typescript npm next 14.0.3 dist/pages/`_document.d.ts`/NextScript#","attributes":{"type":"uses","at":[0,42,0,52]}},{"key":"geid_144_175","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_document.tsx`/","target":"scip-typescript npm next 14.0.3 `document.d.ts`/","attributes":{"type":"uses","at":[0,60,0,75]}},{"key":"geid_144_176","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_document.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 `next-i18next.config.js`/","attributes":{"type":"uses","at":[2,26,2,50]}},{"key":"geid_144_177","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_document.tsx`/","target":"scip-typescript npm next 14.0.3 dist/shared/lib/`utils.d.ts`/DocumentProps#","attributes":{"type":"uses","at":[4,13,4,26]}},{"key":"geid_144_178","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_document.tsx`/Document().","target":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_document.tsx`/Props#","attributes":{"type":"uses","at":[8,40,8,45]}},{"key":"geid_144_179","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_document.tsx`/Document().","target":"scip-typescript npm next 14.0.3 dist/shared/lib/`html-context.shared-runtime.d.ts`/HtmlProps#typeLiteral4:__NEXT_DATA__.","attributes":{"type":"uses","at":[10,10,10,23]}},{"key":"geid_144_180","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_document.tsx`/Document().","target":"scip-typescript npm next 14.0.3 dist/shared/lib/`utils.d.ts`/NEXT_DATA#typeLiteral5:locale.","attributes":{"type":"uses","at":[10,24,10,30]}},{"key":"geid_144_181","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_document.tsx`/Document().","target":"scip-typescript npm next 14.0.3 dist/pages/`_document.d.ts`/Html().","attributes":{"type":"uses","at":[12,5,12,9]}},{"key":"geid_144_182","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_document.tsx`/Document().","target":"scip-typescript npm next 14.0.3 dist/pages/`_document.d.ts`/Head#","attributes":{"type":"uses","at":[13,7,13,11]}},{"key":"geid_144_183","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_document.tsx`/Document().","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#meta.","attributes":{"type":"uses","at":[14,9,14,13]}},{"key":"geid_144_184","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_document.tsx`/Document().","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MetaHTMLAttributes#name.","attributes":{"type":"uses","at":[14,14,14,18]}},{"key":"geid_144_185","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_document.tsx`/Document().","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#content.","attributes":{"type":"uses","at":[14,50,14,57]}},{"key":"geid_144_186","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_document.tsx`/Document().","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#meta.","attributes":{"type":"uses","at":[15,9,15,13]}},{"key":"geid_144_187","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_document.tsx`/Document().","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MetaHTMLAttributes#name.","attributes":{"type":"uses","at":[15,14,15,18]}},{"key":"geid_144_188","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_document.tsx`/Document().","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#content.","attributes":{"type":"uses","at":[15,48,15,55]}},{"key":"geid_144_189","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_document.tsx`/Document().","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#meta.","attributes":{"type":"uses","at":[15,71,15,75]}},{"key":"geid_144_190","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_document.tsx`/Document().","target":"scip-typescript npm next 14.0.3 dist/pages/`_document.d.ts`/Head#","attributes":{"type":"uses","at":[16,8,16,12]}},{"key":"geid_144_191","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_document.tsx`/Document().","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#body.","attributes":{"type":"uses","at":[17,7,17,11]}},{"key":"geid_144_192","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_document.tsx`/Document().","target":"scip-typescript npm next 14.0.3 dist/pages/`_document.d.ts`/Main().","attributes":{"type":"uses","at":[18,9,18,13]}},{"key":"geid_144_193","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_document.tsx`/Document().","target":"scip-typescript npm next 14.0.3 dist/pages/`_document.d.ts`/NextScript#","attributes":{"type":"uses","at":[19,9,19,19]}},{"key":"geid_144_194","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_document.tsx`/Document().","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#body.","attributes":{"type":"uses","at":[20,8,20,12]}},{"key":"geid_144_195","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_document.tsx`/Document().","target":"scip-typescript npm next 14.0.3 dist/pages/`_document.d.ts`/Html().","attributes":{"type":"uses","at":[21,6,21,10]}},{"key":"geid_144_196","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_app.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_app.tsx`/App().","attributes":{"type":"defines","at":[11,0,22,1]}},{"key":"geid_144_197","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_app.tsx`/","target":"scip-typescript npm next 14.0.3 dist/pages/`_app.d.ts`/AppProps#","attributes":{"type":"uses","at":[4,14,4,22]}},{"key":"geid_144_198","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_app.tsx`/","target":"scip-typescript npm next 14.0.3 `app.d.ts`/","attributes":{"type":"uses","at":[4,30,4,40]}},{"key":"geid_144_199","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_app.tsx`/","target":"scip-typescript npm @next/font HEAD dist/google/`index.d.ts`/Inter().","attributes":{"type":"uses","at":[5,9,5,14]}},{"key":"geid_144_200","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_app.tsx`/","target":"scip-typescript npm next 14.0.3 font/google/`index.d.ts`/","attributes":{"type":"uses","at":[5,22,5,40]}},{"key":"geid_144_201","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_app.tsx`/","target":"scip-typescript npm @next/font HEAD dist/google/`index.d.ts`/Inter().","attributes":{"type":"uses","at":[9,14,9,19]}},{"key":"geid_144_202","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_app.tsx`/App().","target":"scip-typescript npm next 14.0.3 dist/shared/lib/`utils.d.ts`/AppInitialProps#typeLiteral10:pageProps.","attributes":{"type":"uses","at":[11,26,11,35]}},{"key":"geid_144_203","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_app.tsx`/App().","target":"scip-typescript npm next 14.0.3 dist/pages/`_app.d.ts`/AppProps#","attributes":{"type":"uses","at":[11,39,11,47]}},{"key":"geid_144_204","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_app.tsx`/App().","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[15,5,15,8]}},{"key":"geid_144_205","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_app.tsx`/App().","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[15,9,15,18]}},{"key":"geid_144_206","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_app.tsx`/App().","target":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_app.tsx`/inter.","attributes":{"type":"uses","at":[15,20,15,25]}},{"key":"geid_144_207","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_app.tsx`/App().","target":"scip-typescript npm @next/font HEAD dist/`types.d.ts`/NextFont#typeLiteral14:className.","attributes":{"type":"uses","at":[15,26,15,35]}},{"key":"geid_144_208","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_app.tsx`/App().","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[20,6,20,9]}},{"key":"geid_144_209","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_app.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/`_app.tsx`/App().","attributes":{"type":"uses","at":[24,34,24,37]}},{"key":"geid_144_210","source":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useFetch.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useFetch.ts`/useFetch.","attributes":{"type":"defines","at":[10,24,87,1]}},{"key":"geid_144_211","source":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useFetch.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/AbortSignal#","attributes":{"type":"uses","at":[3,11,3,22]}},{"key":"geid_144_212","source":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useFetch.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/AbortSignal.","attributes":{"type":"uses","at":[3,11,3,22]}},{"key":"geid_144_213","source":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useFetch.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useFetch.ts`/RequestModel#","attributes":{"type":"uses","at":[6,35,6,47]}},{"key":"geid_144_214","source":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useFetch.ts`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/FormData#","attributes":{"type":"uses","at":[7,18,7,26]}},{"key":"geid_144_215","source":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useFetch.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/FormData#","attributes":{"type":"uses","at":[7,18,7,26]}},{"key":"geid_144_216","source":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useFetch.ts`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/FormData.","attributes":{"type":"uses","at":[7,18,7,26]}},{"key":"geid_144_217","source":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useFetch.ts`/useFetch.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/AbortSignal#","attributes":{"type":"uses","at":[14,13,14,24]}},{"key":"geid_144_218","source":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useFetch.ts`/useFetch.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/AbortSignal.","attributes":{"type":"uses","at":[14,13,14,24]}},{"key":"geid_144_219","source":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useFetch.ts`/useFetch.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/FormData#","attributes":{"type":"uses","at":[19,32,19,40]}},{"key":"geid_144_220","source":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useFetch.ts`/useFetch.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/FormData#","attributes":{"type":"uses","at":[19,32,19,40]}},{"key":"geid_144_221","source":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useFetch.ts`/useFetch.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/FormData.","attributes":{"type":"uses","at":[19,32,19,40]}},{"key":"geid_144_222","source":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useFetch.ts`/useFetch.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/FormData#","attributes":{"type":"uses","at":[27,51,27,59]}},{"key":"geid_144_223","source":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useFetch.ts`/useFetch.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/FormData#","attributes":{"type":"uses","at":[27,51,27,59]}},{"key":"geid_144_224","source":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useFetch.ts`/useFetch.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/FormData.","attributes":{"type":"uses","at":[27,51,27,59]}},{"key":"geid_144_225","source":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useFetch.ts`/useFetch.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/fetch().","attributes":{"type":"uses","at":[32,11,32,16]}},{"key":"geid_144_226","source":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useFetch.ts`/useFetch.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useFetch.ts`/RequestModel#","attributes":{"type":"uses","at":[65,42,65,54]}},{"key":"geid_144_227","source":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useFetch.ts`/useFetch.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useFetch.ts`/RequestWithBodyModel#","attributes":{"type":"uses","at":[70,16,70,36]}},{"key":"geid_144_228","source":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useFetch.ts`/useFetch.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useFetch.ts`/RequestWithBodyModel#","attributes":{"type":"uses","at":[74,42,74,62]}},{"key":"geid_144_229","source":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useFetch.ts`/useFetch.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useFetch.ts`/RequestWithBodyModel#","attributes":{"type":"uses","at":[79,16,79,36]}},{"key":"geid_144_230","source":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useFetch.ts`/useFetch.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useFetch.ts`/RequestModel#","attributes":{"type":"uses","at":[83,45,83,57]}},{"key":"geid_144_231","source":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useCreateReducer.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useCreateReducer.ts`/useCreateReducer.","attributes":{"type":"defines","at":[13,32,29,1]}},{"key":"geid_144_232","source":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useCreateReducer.ts`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useMemo().","attributes":{"type":"uses","at":[0,9,0,16]}},{"key":"geid_144_233","source":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useCreateReducer.ts`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useReducer().","attributes":{"type":"uses","at":[0,18,0,28]}},{"key":"geid_144_234","source":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useCreateReducer.ts`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/","attributes":{"type":"uses","at":[0,36,0,43]}},{"key":"geid_144_235","source":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useCreateReducer.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useCreateReducer.ts`/FieldNames#[T]","attributes":{"type":"uses","at":[4,14,4,15]}},{"key":"geid_144_236","source":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useCreateReducer.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useCreateReducer.ts`/FieldNames#[T]","attributes":{"type":"uses","at":[4,18,4,19]}},{"key":"geid_144_237","source":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useCreateReducer.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useCreateReducer.ts`/FieldNames#[T]","attributes":{"type":"uses","at":[5,8,5,9]}},{"key":"geid_144_238","source":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useCreateReducer.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useCreateReducer.ts`/FieldNames#","attributes":{"type":"uses","at":[10,30,10,40]}},{"key":"geid_144_239","source":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useCreateReducer.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useCreateReducer.ts`/ActionType#[T]","attributes":{"type":"uses","at":[10,41,10,42]}},{"key":"geid_144_240","source":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useCreateReducer.ts`/useCreateReducer.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useCreateReducer.ts`/FieldNames#","attributes":{"type":"uses","at":[16,32,16,42]}},{"key":"geid_144_241","source":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useCreateReducer.ts`/useCreateReducer.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useReducer().","attributes":{"type":"uses","at":[26,28,26,38]}},{"key":"geid_144_242","source":"scip-typescript npm ai-chatbot-starter 0.1.0 hooks/`useCreateReducer.ts`/useCreateReducer.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useMemo().","attributes":{"type":"uses","at":[28,9,28,16]}},{"key":"geid_144_243","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/OpenAIStream.","attributes":{"type":"defines","at":[25,28,116,1]}},{"key":"geid_144_244","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/OpenAIError#","attributes":{"type":"defines","at":[11,0,23,1]}},{"key":"geid_144_245","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/AZURE_DEPLOYMENT_ID.","attributes":{"type":"uses","at":[3,9,3,28]}},{"key":"geid_144_246","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/OPENAI_API_HOST.","attributes":{"type":"uses","at":[3,30,3,45]}},{"key":"geid_144_247","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/OPENAI_API_TYPE.","attributes":{"type":"uses","at":[3,47,3,62]}},{"key":"geid_144_248","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/OPENAI_API_VERSION.","attributes":{"type":"uses","at":[3,64,3,82]}},{"key":"geid_144_249","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/OPENAI_ORGANIZATION.","attributes":{"type":"uses","at":[3,84,3,103]}},{"key":"geid_144_250","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/","attributes":{"type":"uses","at":[3,111,3,125]}},{"key":"geid_144_251","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/OpenAIError#","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/OpenAIError#type.","attributes":{"type":"uses","at":[19,9,19,13]}},{"key":"geid_144_252","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/OpenAIError#","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/OpenAIError#param.","attributes":{"type":"uses","at":[20,9,20,14]}},{"key":"geid_144_253","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/OpenAIError#","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/OpenAIError#code.","attributes":{"type":"uses","at":[21,9,21,13]}},{"key":"geid_144_254","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/OpenAIStream.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/OPENAI_API_HOST.","attributes":{"type":"uses","at":[32,15,32,30]}},{"key":"geid_144_255","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/OpenAIStream.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/OPENAI_API_TYPE.","attributes":{"type":"uses","at":[33,6,33,21]}},{"key":"geid_144_256","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/OpenAIStream.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/OPENAI_API_HOST.","attributes":{"type":"uses","at":[34,13,34,28]}},{"key":"geid_144_257","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/OpenAIStream.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/AZURE_DEPLOYMENT_ID.","attributes":{"type":"uses","at":[34,51,34,70]}},{"key":"geid_144_258","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/OpenAIStream.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/OPENAI_API_VERSION.","attributes":{"type":"uses","at":[34,103,34,121]}},{"key":"geid_144_259","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/OpenAIStream.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/fetch().","attributes":{"type":"uses","at":[36,20,36,25]}},{"key":"geid_144_260","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/OpenAIStream.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/OPENAI_API_TYPE.","attributes":{"type":"uses","at":[39,10,39,25]}},{"key":"geid_144_261","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/OpenAIStream.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/process.","attributes":{"type":"uses","at":[40,45,40,52]}},{"key":"geid_144_262","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/OpenAIStream.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/process.","attributes":{"type":"uses","at":[40,45,40,52]}},{"key":"geid_144_263","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/OpenAIStream.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/NodeJS/Process#env.","attributes":{"type":"uses","at":[40,53,40,56]}},{"key":"geid_144_264","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/OpenAIStream.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/OPENAI_API_TYPE.","attributes":{"type":"uses","at":[42,10,42,25]}},{"key":"geid_144_265","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/OpenAIStream.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/process.","attributes":{"type":"uses","at":[43,34,43,41]}},{"key":"geid_144_266","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/OpenAIStream.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/process.","attributes":{"type":"uses","at":[43,34,43,41]}},{"key":"geid_144_267","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/OpenAIStream.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/NodeJS/Process#env.","attributes":{"type":"uses","at":[43,42,43,45]}},{"key":"geid_144_268","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/OpenAIStream.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/OPENAI_API_TYPE.","attributes":{"type":"uses","at":[45,11,45,26]}},{"key":"geid_144_269","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/OpenAIStream.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/OPENAI_ORGANIZATION.","attributes":{"type":"uses","at":[45,43,45,62]}},{"key":"geid_144_270","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/OpenAIStream.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/OPENAI_ORGANIZATION.","attributes":{"type":"uses","at":[46,31,46,50]}},{"key":"geid_144_271","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/OpenAIStream.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/OPENAI_API_TYPE.","attributes":{"type":"uses","at":[51,10,51,25]}},{"key":"geid_144_272","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/OpenAIStream.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`util.d.ts`/`\"util\"`/global/TextEncoder.","attributes":{"type":"uses","at":[65,22,65,33]}},{"key":"geid_144_273","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/OpenAIStream.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`util.d.ts`/`\"util\"`/global/TextDecoder.","attributes":{"type":"uses","at":[66,22,66,33]}},{"key":"geid_144_274","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/OpenAIStream.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/OpenAIError#`<constructor>`().","attributes":{"type":"uses","at":[71,16,71,27]}},{"key":"geid_144_275","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/OpenAIStream.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`util.d.ts`/`\"util\"`/TextDecoder#decode().","attributes":{"type":"uses","at":[80,18,80,24]}},{"key":"geid_144_276","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/OpenAIStream.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`util.d.ts`/`\"util\"`/TextEncoder#encode().","attributes":{"type":"uses","at":[99,34,99,40]}},{"key":"geid_144_277","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`index.ts`/OpenAIStream.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`util.d.ts`/`\"util\"`/TextDecoder#decode().","attributes":{"type":"uses","at":[110,28,110,34]}},{"key":"geid_144_278","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`google.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/server/`google.ts`/cleanSourceText.","attributes":{"type":"defines","at":[0,31,8,1]}},{"key":"geid_144_279","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/data/`throttle.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/data/`throttle.ts`/throttle().","attributes":{"type":"defines","at":[0,0,21,1]}},{"key":"geid_144_280","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/data/`throttle.ts`/throttle().","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/data/`throttle.ts`/throttle().[T]","attributes":{"type":"uses","at":[1,8,1,9]}},{"key":"geid_144_281","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/data/`throttle.ts`/throttle().","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/data/`throttle.ts`/throttle().[T]","attributes":{"type":"uses","at":[3,3,3,4]}},{"key":"geid_144_282","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/data/`throttle.ts`/throttle().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`timers.d.ts`/`\"timers\"`/global/setTimeout().","attributes":{"type":"uses","at":[4,34,4,44]}},{"key":"geid_144_283","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/data/`throttle.ts`/throttle().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`timers.d.ts`/`\"timers\"`/global/setTimeout/","attributes":{"type":"uses","at":[4,34,4,44]}},{"key":"geid_144_284","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/data/`throttle.ts`/throttle().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`timers.d.ts`/`\"timers\"`/global/clearTimeout().","attributes":{"type":"uses","at":[12,6,12,18]}},{"key":"geid_144_285","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/data/`throttle.ts`/throttle().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`timers.d.ts`/`\"timers\"`/global/setTimeout().","attributes":{"type":"uses","at":[13,17,13,27]}},{"key":"geid_144_286","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/data/`throttle.ts`/throttle().","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`timers.d.ts`/`\"timers\"`/global/setTimeout/","attributes":{"type":"uses","at":[13,17,13,27]}},{"key":"geid_144_287","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/data/`throttle.ts`/throttle().","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/data/`throttle.ts`/throttle().[T]","attributes":{"type":"uses","at":[20,8,20,9]}},{"key":"geid_144_288","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`settings.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`settings.ts`/saveSettings.","attributes":{"type":"defines","at":[20,28,22,1]}},{"key":"geid_144_289","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`settings.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`settings.ts`/getSettings.","attributes":{"type":"defines","at":[4,27,18,1]}},{"key":"geid_144_290","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`settings.ts`/getSettings.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`settings.ts`/STORAGE_KEY.","attributes":{"type":"uses","at":[8,44,8,55]}},{"key":"geid_144_291","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`settings.ts`/getSettings.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.","attributes":{"type":"uses","at":[14,6,14,13]}},{"key":"geid_144_292","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`settings.ts`/getSettings.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/","attributes":{"type":"uses","at":[14,6,14,13]}},{"key":"geid_144_293","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`settings.ts`/getSettings.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.","attributes":{"type":"uses","at":[14,6,14,13]}},{"key":"geid_144_294","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`settings.ts`/getSettings.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#error().","attributes":{"type":"uses","at":[14,14,14,19]}},{"key":"geid_144_295","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`settings.ts`/saveSettings.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`settings.ts`/STORAGE_KEY.","attributes":{"type":"uses","at":[21,23,21,34]}},{"key":"geid_144_296","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`prompts.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`prompts.ts`/savePrompts.","attributes":{"type":"defines","at":[19,27,21,1]}},{"key":"geid_144_297","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`prompts.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`prompts.ts`/updatePrompt.","attributes":{"type":"defines","at":[2,28,17,1]}},{"key":"geid_144_298","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`prompts.ts`/updatePrompt.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`prompts.ts`/savePrompts.","attributes":{"type":"uses","at":[11,2,11,13]}},{"key":"geid_144_299","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`clean.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`clean.ts`/cleanConversationHistory.","attributes":{"type":"defines","at":[54,40,98,1]}},{"key":"geid_144_300","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`clean.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`clean.ts`/cleanSelectedConversation.","attributes":{"type":"defines","at":[5,41,52,1]}},{"key":"geid_144_301","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`clean.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/DEFAULT_SYSTEM_PROMPT.","attributes":{"type":"uses","at":[3,9,3,30]}},{"key":"geid_144_302","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`clean.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/DEFAULT_TEMPERATURE.","attributes":{"type":"uses","at":[3,32,3,51]}},{"key":"geid_144_303","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`clean.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/","attributes":{"type":"uses","at":[3,59,3,68]}},{"key":"geid_144_304","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`clean.ts`/cleanSelectedConversation.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/DEFAULT_SYSTEM_PROMPT.","attributes":{"type":"uses","at":[26,44,26,65]}},{"key":"geid_144_305","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`clean.ts`/cleanSelectedConversation.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/DEFAULT_TEMPERATURE.","attributes":{"type":"uses","at":[33,54,33,73]}},{"key":"geid_144_306","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`clean.ts`/cleanConversationHistory.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.","attributes":{"type":"uses","at":[62,4,62,11]}},{"key":"geid_144_307","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`clean.ts`/cleanConversationHistory.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/","attributes":{"type":"uses","at":[62,4,62,11]}},{"key":"geid_144_308","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`clean.ts`/cleanConversationHistory.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.","attributes":{"type":"uses","at":[62,4,62,11]}},{"key":"geid_144_309","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`clean.ts`/cleanConversationHistory.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#warn().","attributes":{"type":"uses","at":[62,12,62,16]}},{"key":"geid_144_310","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`clean.ts`/cleanConversationHistory.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/DEFAULT_SYSTEM_PROMPT.","attributes":{"type":"uses","at":[73,30,73,51]}},{"key":"geid_144_311","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`clean.ts`/cleanConversationHistory.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`const.ts`/DEFAULT_TEMPERATURE.","attributes":{"type":"uses","at":[77,35,77,54]}},{"key":"geid_144_312","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`clean.ts`/cleanConversationHistory.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.","attributes":{"type":"uses","at":[91,6,91,13]}},{"key":"geid_144_313","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`clean.ts`/cleanConversationHistory.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/","attributes":{"type":"uses","at":[91,6,91,13]}},{"key":"geid_144_314","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`clean.ts`/cleanConversationHistory.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.","attributes":{"type":"uses","at":[91,6,91,13]}},{"key":"geid_144_315","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`clean.ts`/cleanConversationHistory.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#warn().","attributes":{"type":"uses","at":[91,14,91,18]}},{"key":"geid_144_316","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/importData.","attributes":{"type":"defines","at":[111,26,163,1]}},{"key":"geid_144_317","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/exportData.","attributes":{"type":"defines","at":[73,26,109,1]}},{"key":"geid_144_318","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/currentDate().","attributes":{"type":"defines","at":[66,0,71,1]}},{"key":"geid_144_319","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/cleanData().","attributes":{"type":"defines","at":[32,0,64,1]}},{"key":"geid_144_320","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/isExportFormatV4().","attributes":{"type":"defines","at":[26,0,28,1]}},{"key":"geid_144_321","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/isExportFormatV3().","attributes":{"type":"defines","at":[22,0,24,1]}},{"key":"geid_144_322","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/isExportFormatV2().","attributes":{"type":"defines","at":[18,0,20,1]}},{"key":"geid_144_323","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/isExportFormatV1().","attributes":{"type":"defines","at":[14,0,16,1]}},{"key":"geid_144_324","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`clean.ts`/cleanConversationHistory.","attributes":{"type":"uses","at":[12,9,12,33]}},{"key":"geid_144_325","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`clean.ts`/","attributes":{"type":"uses","at":[12,41,12,50]}},{"key":"geid_144_326","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/isExportFormatV4().","attributes":{"type":"uses","at":[30,36,30,52]}},{"key":"geid_144_327","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/cleanData().","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/isExportFormatV1().","attributes":{"type":"uses","at":[33,6,33,22]}},{"key":"geid_144_328","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/cleanData().","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`clean.ts`/cleanConversationHistory.","attributes":{"type":"uses","at":[36,15,36,39]}},{"key":"geid_144_329","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/cleanData().","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/isExportFormatV2().","attributes":{"type":"uses","at":[42,6,42,22]}},{"key":"geid_144_330","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/cleanData().","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`clean.ts`/cleanConversationHistory.","attributes":{"type":"uses","at":[45,15,45,39]}},{"key":"geid_144_331","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/cleanData().","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/isExportFormatV3().","attributes":{"type":"uses","at":[55,6,55,22]}},{"key":"geid_144_332","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/cleanData().","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/isExportFormatV4().","attributes":{"type":"uses","at":[59,6,59,22]}},{"key":"geid_144_333","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/exportData.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`buffer.d.ts`/`\"buffer\"`/global/Blob#","attributes":{"type":"uses","at":[97,19,97,23]}},{"key":"geid_144_334","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/exportData.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`buffer.d.ts`/`\"buffer\"`/global/Blob.","attributes":{"type":"uses","at":[97,19,97,23]}},{"key":"geid_144_335","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/exportData.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/global/URL#","attributes":{"type":"uses","at":[100,14,100,17]}},{"key":"geid_144_336","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/exportData.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/global/URL.","attributes":{"type":"uses","at":[100,14,100,17]}},{"key":"geid_144_337","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/exportData.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/URL#createObjectURL().","attributes":{"type":"uses","at":[100,18,100,33]}},{"key":"geid_144_338","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/exportData.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/currentDate().","attributes":{"type":"uses","at":[102,40,102,51]}},{"key":"geid_144_339","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/exportData.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/global/URL#","attributes":{"type":"uses","at":[108,2,108,5]}},{"key":"geid_144_340","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/exportData.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/global/URL.","attributes":{"type":"uses","at":[108,2,108,5]}},{"key":"geid_144_341","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/exportData.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/URL#revokeObjectURL().","attributes":{"type":"uses","at":[108,6,108,21]}},{"key":"geid_144_342","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/importData.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`importExport.ts`/cleanData().","attributes":{"type":"uses","at":[114,40,114,49]}},{"key":"geid_144_343","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`folders.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`folders.ts`/saveFolders.","attributes":{"type":"defines","at":[2,27,4,1]}},{"key":"geid_144_344","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`conversation.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`conversation.ts`/saveConversations.","attributes":{"type":"defines","at":[27,33,29,1]}},{"key":"geid_144_345","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`conversation.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`conversation.ts`/saveConversation.","attributes":{"type":"defines","at":[23,32,25,1]}},{"key":"geid_144_346","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`conversation.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`conversation.ts`/updateConversation.","attributes":{"type":"defines","at":[2,34,21,1]}},{"key":"geid_144_347","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`conversation.ts`/updateConversation.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`conversation.ts`/saveConversation.","attributes":{"type":"uses","at":[14,2,14,18]}},{"key":"geid_144_348","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`conversation.ts`/updateConversation.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`conversation.ts`/saveConversations.","attributes":{"type":"uses","at":[15,2,15,19]}},{"key":"geid_144_349","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`codeblock.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`codeblock.ts`/generateRandomString.","attributes":{"type":"defines","at":[31,36,38,1]}},{"key":"geid_144_350","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`codeblock.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`codeblock.ts`/languageMap#","attributes":{"type":"defines","at":[0,0,2,1]}},{"key":"geid_144_351","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`codeblock.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`codeblock.ts`/languageMap#","attributes":{"type":"uses","at":[4,35,4,46]}},{"key":"geid_144_352","source":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`api.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 utils/app/`api.ts`/getEndpoint.","attributes":{"type":"defines","at":[2,27,12,1]}},{"key":"geid_144_353","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`models.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`models.ts`/handler.","attributes":{"type":"defines","at":[8,16,69,1]}},{"key":"geid_144_354","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`models.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Request#","attributes":{"type":"uses","at":[8,28,8,35]}},{"key":"geid_144_355","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`models.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Request.","attributes":{"type":"uses","at":[8,28,8,35]}},{"key":"geid_144_356","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`models.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Response#","attributes":{"type":"uses","at":[8,46,8,54]}},{"key":"geid_144_357","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`models.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Response.","attributes":{"type":"uses","at":[8,46,8,54]}},{"key":"geid_144_358","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`models.ts`/handler.","target":"scip-typescript npm undici-types 5.26.5 `fetch.d.ts`/Request#json.","attributes":{"type":"uses","at":[10,31,10,35]}},{"key":"geid_144_359","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`models.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/fetch().","attributes":{"type":"uses","at":[19,27,19,32]}},{"key":"geid_144_360","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`models.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/process.","attributes":{"type":"uses","at":[23,47,23,54]}},{"key":"geid_144_361","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`models.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/process.","attributes":{"type":"uses","at":[23,47,23,54]}},{"key":"geid_144_362","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`models.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/NodeJS/Process#env.","attributes":{"type":"uses","at":[23,55,23,58]}},{"key":"geid_144_363","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`models.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/process.","attributes":{"type":"uses","at":[26,36,26,43]}},{"key":"geid_144_364","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`models.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/process.","attributes":{"type":"uses","at":[26,36,26,43]}},{"key":"geid_144_365","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`models.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/NodeJS/Process#env.","attributes":{"type":"uses","at":[26,44,26,47]}},{"key":"geid_144_366","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`models.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Response#","attributes":{"type":"uses","at":[35,17,35,25]}},{"key":"geid_144_367","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`models.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Response.","attributes":{"type":"uses","at":[35,17,35,25]}},{"key":"geid_144_368","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`models.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.","attributes":{"type":"uses","at":[40,6,40,13]}},{"key":"geid_144_369","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`models.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/","attributes":{"type":"uses","at":[40,6,40,13]}},{"key":"geid_144_370","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`models.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.","attributes":{"type":"uses","at":[40,6,40,13]}},{"key":"geid_144_371","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`models.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#error().","attributes":{"type":"uses","at":[40,14,40,19]}},{"key":"geid_144_372","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`models.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Response#","attributes":{"type":"uses","at":[64,15,64,23]}},{"key":"geid_144_373","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`models.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Response.","attributes":{"type":"uses","at":[64,15,64,23]}},{"key":"geid_144_374","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`models.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.","attributes":{"type":"uses","at":[66,4,66,11]}},{"key":"geid_144_375","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`models.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/","attributes":{"type":"uses","at":[66,4,66,11]}},{"key":"geid_144_376","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`models.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.","attributes":{"type":"uses","at":[66,4,66,11]}},{"key":"geid_144_377","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`models.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#error().","attributes":{"type":"uses","at":[66,12,66,17]}},{"key":"geid_144_378","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`models.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Response#","attributes":{"type":"uses","at":[67,15,67,23]}},{"key":"geid_144_379","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`models.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Response.","attributes":{"type":"uses","at":[67,15,67,23]}},{"key":"geid_144_380","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`models.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`models.ts`/handler.","attributes":{"type":"uses","at":[71,15,71,22]}},{"key":"geid_144_381","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`google.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`google.ts`/handler.","attributes":{"type":"defines","at":[12,16,146,1]}},{"key":"geid_144_382","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`google.ts`/","target":"scip-typescript npm next 14.0.3 dist/shared/lib/`utils.d.ts`/NextApiRequest#","attributes":{"type":"uses","at":[0,9,0,23]}},{"key":"geid_144_383","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`google.ts`/","target":"scip-typescript npm next 14.0.3 dist/shared/lib/`utils.d.ts`/NextApiResponse#","attributes":{"type":"uses","at":[0,25,0,40]}},{"key":"geid_144_384","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`google.ts`/","target":"scip-typescript npm next 14.0.3 `index.d.ts`/","attributes":{"type":"uses","at":[0,48,0,54]}},{"key":"geid_144_385","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`google.ts`/handler.","target":"scip-typescript npm next 14.0.3 dist/shared/lib/`utils.d.ts`/NextApiRequest#","attributes":{"type":"uses","at":[12,28,12,42]}},{"key":"geid_144_386","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`google.ts`/handler.","target":"scip-typescript npm next 14.0.3 dist/shared/lib/`utils.d.ts`/NextApiResponse#","attributes":{"type":"uses","at":[12,49,12,64]}},{"key":"geid_144_387","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`google.ts`/handler.","target":"scip-typescript npm next 14.0.3 dist/shared/lib/`utils.d.ts`/NextApiRequest#body.","attributes":{"type":"uses","at":[15,10,15,14]}},{"key":"geid_144_388","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`google.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/fetch().","attributes":{"type":"uses","at":[20,28,20,33]}},{"key":"geid_144_389","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`google.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/process.","attributes":{"type":"uses","at":[22,38,22,45]}},{"key":"geid_144_390","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`google.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/process.","attributes":{"type":"uses","at":[22,38,22,45]}},{"key":"geid_144_391","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`google.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/NodeJS/Process#env.","attributes":{"type":"uses","at":[22,46,22,49]}},{"key":"geid_144_392","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`google.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/process.","attributes":{"type":"uses","at":[24,36,24,43]}},{"key":"geid_144_393","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`google.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/process.","attributes":{"type":"uses","at":[24,36,24,43]}},{"key":"geid_144_394","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`google.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/NodeJS/Process#env.","attributes":{"type":"uses","at":[24,44,24,47]}},{"key":"geid_144_395","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`google.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`timers.d.ts`/`\"timers\"`/global/setTimeout().","attributes":{"type":"uses","at":[43,12,43,22]}},{"key":"geid_144_396","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`google.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`timers.d.ts`/`\"timers\"`/global/setTimeout/","attributes":{"type":"uses","at":[43,12,43,22]}},{"key":"geid_144_397","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`google.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/fetch().","attributes":{"type":"uses","at":[47,12,47,17]}},{"key":"geid_144_398","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`google.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.","attributes":{"type":"uses","at":[57,14,57,21]}},{"key":"geid_144_399","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`google.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/","attributes":{"type":"uses","at":[57,14,57,21]}},{"key":"geid_144_400","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`google.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.","attributes":{"type":"uses","at":[57,14,57,21]}},{"key":"geid_144_401","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`google.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#error().","attributes":{"type":"uses","at":[57,22,57,27]}},{"key":"geid_144_402","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`google.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.","attributes":{"type":"uses","at":[78,10,78,17]}},{"key":"geid_144_403","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`google.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/","attributes":{"type":"uses","at":[78,10,78,17]}},{"key":"geid_144_404","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`google.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.","attributes":{"type":"uses","at":[78,10,78,17]}},{"key":"geid_144_405","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`google.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#error().","attributes":{"type":"uses","at":[78,18,78,23]}},{"key":"geid_144_406","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`google.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/fetch().","attributes":{"type":"uses","at":[114,28,114,33]}},{"key":"geid_144_407","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`google.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/process.","attributes":{"type":"uses","at":[117,45,117,52]}},{"key":"geid_144_408","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`google.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/process.","attributes":{"type":"uses","at":[117,45,117,52]}},{"key":"geid_144_409","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`google.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/NodeJS/Process#env.","attributes":{"type":"uses","at":[117,53,117,56]}},{"key":"geid_144_410","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`google.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/process.","attributes":{"type":"uses","at":[118,12,118,19]}},{"key":"geid_144_411","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`google.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/process.","attributes":{"type":"uses","at":[118,12,118,19]}},{"key":"geid_144_412","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`google.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/NodeJS/Process#env.","attributes":{"type":"uses","at":[118,20,118,23]}},{"key":"geid_144_413","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`google.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/process.","attributes":{"type":"uses","at":[119,33,119,40]}},{"key":"geid_144_414","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`google.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/process.","attributes":{"type":"uses","at":[119,33,119,40]}},{"key":"geid_144_415","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`google.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/NodeJS/Process#env.","attributes":{"type":"uses","at":[119,41,119,44]}},{"key":"geid_144_416","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`google.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.","attributes":{"type":"uses","at":[143,4,143,11]}},{"key":"geid_144_417","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`google.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/","attributes":{"type":"uses","at":[143,4,143,11]}},{"key":"geid_144_418","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`google.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.","attributes":{"type":"uses","at":[143,4,143,11]}},{"key":"geid_144_419","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`google.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#error().","attributes":{"type":"uses","at":[143,12,143,17]}},{"key":"geid_144_420","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`google.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`google.ts`/handler.","attributes":{"type":"uses","at":[148,15,148,22]}},{"key":"geid_144_421","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`chat.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`chat.ts`/handler.","attributes":{"type":"defines","at":[15,16,65,1]}},{"key":"geid_144_422","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`chat.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Request#","attributes":{"type":"uses","at":[15,28,15,35]}},{"key":"geid_144_423","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`chat.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Request.","attributes":{"type":"uses","at":[15,28,15,35]}},{"key":"geid_144_424","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`chat.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Response#","attributes":{"type":"uses","at":[15,46,15,54]}},{"key":"geid_144_425","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`chat.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Response.","attributes":{"type":"uses","at":[15,46,15,54]}},{"key":"geid_144_426","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`chat.ts`/handler.","target":"scip-typescript npm undici-types 5.26.5 `fetch.d.ts`/Request#json.","attributes":{"type":"uses","at":[17,69,17,73]}},{"key":"geid_144_427","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`chat.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Response#","attributes":{"type":"uses","at":[56,15,56,23]}},{"key":"geid_144_428","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`chat.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Response.","attributes":{"type":"uses","at":[56,15,56,23]}},{"key":"geid_144_429","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`chat.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/console.","attributes":{"type":"uses","at":[58,4,58,11]}},{"key":"geid_144_430","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`chat.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console/","attributes":{"type":"uses","at":[58,4,58,11]}},{"key":"geid_144_431","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`chat.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/console.","attributes":{"type":"uses","at":[58,4,58,11]}},{"key":"geid_144_432","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`chat.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`console.d.ts`/`\"node:console\"`/global/Console#error().","attributes":{"type":"uses","at":[58,12,58,17]}},{"key":"geid_144_433","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`chat.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Response#","attributes":{"type":"uses","at":[60,17,60,25]}},{"key":"geid_144_434","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`chat.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Response.","attributes":{"type":"uses","at":[60,17,60,25]}},{"key":"geid_144_435","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`chat.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Response#","attributes":{"type":"uses","at":[62,17,62,25]}},{"key":"geid_144_436","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`chat.ts`/handler.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/Response.","attributes":{"type":"uses","at":[62,17,62,25]}},{"key":"geid_144_437","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`chat.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/`chat.ts`/handler.","attributes":{"type":"uses","at":[67,15,67,22]}},{"key":"geid_144_438","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`index.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","attributes":{"type":"uses","at":[0,9,0,16]}},{"key":"geid_144_439","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`index.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/","attributes":{"type":"uses","at":[0,24,0,35]}},{"key":"geid_144_440","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","attributes":{"type":"defines","at":[7,16,31,1]}},{"key":"geid_144_441","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Props#","attributes":{"type":"defines","at":[2,0,5,1]}},{"key":"geid_144_442","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#","attributes":{"type":"uses","at":[0,9,0,11]}},{"key":"geid_144_443","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/","attributes":{"type":"uses","at":[0,19,0,26]}},{"key":"geid_144_444","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Props#size.","attributes":{"type":"uses","at":[7,19,7,23]}},{"key":"geid_144_445","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Props#className.","attributes":{"type":"uses","at":[7,33,7,42]}},{"key":"geid_144_446","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Props#","attributes":{"type":"uses","at":[7,51,7,56]}},{"key":"geid_144_447","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#svg.","attributes":{"type":"uses","at":[9,5,9,8]}},{"key":"geid_144_448","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#stroke.","attributes":{"type":"uses","at":[10,6,10,12]}},{"key":"geid_144_449","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#fill.","attributes":{"type":"uses","at":[11,6,11,10]}},{"key":"geid_144_450","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#strokeWidth.","attributes":{"type":"uses","at":[12,6,12,17]}},{"key":"geid_144_451","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#viewBox.","attributes":{"type":"uses","at":[13,6,13,13]}},{"key":"geid_144_452","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#strokeLinecap.","attributes":{"type":"uses","at":[14,6,14,19]}},{"key":"geid_144_453","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#strokeLinejoin.","attributes":{"type":"uses","at":[15,6,15,20]}},{"key":"geid_144_454","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#className.","attributes":{"type":"uses","at":[16,6,16,15]}},{"key":"geid_144_455","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#height.","attributes":{"type":"uses","at":[17,6,17,12]}},{"key":"geid_144_456","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#width.","attributes":{"type":"uses","at":[18,6,18,11]}},{"key":"geid_144_457","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#xmlns.","attributes":{"type":"uses","at":[19,6,19,11]}},{"key":"geid_144_458","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#line.","attributes":{"type":"uses","at":[21,7,21,11]}},{"key":"geid_144_459","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#x1.","attributes":{"type":"uses","at":[21,12,21,14]}},{"key":"geid_144_460","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#y1.","attributes":{"type":"uses","at":[21,20,21,22]}},{"key":"geid_144_461","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#x2.","attributes":{"type":"uses","at":[21,27,21,29]}},{"key":"geid_144_462","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#y2.","attributes":{"type":"uses","at":[21,35,21,37]}},{"key":"geid_144_463","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#line.","attributes":{"type":"uses","at":[21,44,21,48]}},{"key":"geid_144_464","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#line.","attributes":{"type":"uses","at":[22,7,22,11]}},{"key":"geid_144_465","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#x1.","attributes":{"type":"uses","at":[22,12,22,14]}},{"key":"geid_144_466","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#y1.","attributes":{"type":"uses","at":[22,20,22,22]}},{"key":"geid_144_467","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#x2.","attributes":{"type":"uses","at":[22,28,22,30]}},{"key":"geid_144_468","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#y2.","attributes":{"type":"uses","at":[22,36,22,38]}},{"key":"geid_144_469","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#line.","attributes":{"type":"uses","at":[22,46,22,50]}},{"key":"geid_144_470","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#line.","attributes":{"type":"uses","at":[23,7,23,11]}},{"key":"geid_144_471","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#x1.","attributes":{"type":"uses","at":[23,12,23,14]}},{"key":"geid_144_472","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#y1.","attributes":{"type":"uses","at":[23,22,23,24]}},{"key":"geid_144_473","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#x2.","attributes":{"type":"uses","at":[23,32,23,34]}},{"key":"geid_144_474","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#y2.","attributes":{"type":"uses","at":[23,42,23,44]}},{"key":"geid_144_475","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#line.","attributes":{"type":"uses","at":[23,54,23,58]}},{"key":"geid_144_476","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#line.","attributes":{"type":"uses","at":[24,7,24,11]}},{"key":"geid_144_477","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#x1.","attributes":{"type":"uses","at":[24,12,24,14]}},{"key":"geid_144_478","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#y1.","attributes":{"type":"uses","at":[24,23,24,25]}},{"key":"geid_144_479","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#x2.","attributes":{"type":"uses","at":[24,34,24,36]}},{"key":"geid_144_480","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#y2.","attributes":{"type":"uses","at":[24,45,24,47]}},{"key":"geid_144_481","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#line.","attributes":{"type":"uses","at":[24,58,24,62]}},{"key":"geid_144_482","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#line.","attributes":{"type":"uses","at":[25,7,25,11]}},{"key":"geid_144_483","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#x1.","attributes":{"type":"uses","at":[25,12,25,14]}},{"key":"geid_144_484","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#y1.","attributes":{"type":"uses","at":[25,19,25,21]}},{"key":"geid_144_485","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#x2.","attributes":{"type":"uses","at":[25,27,25,29]}},{"key":"geid_144_486","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#y2.","attributes":{"type":"uses","at":[25,34,25,36]}},{"key":"geid_144_487","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#line.","attributes":{"type":"uses","at":[25,44,25,48]}},{"key":"geid_144_488","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#line.","attributes":{"type":"uses","at":[26,7,26,11]}},{"key":"geid_144_489","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#x1.","attributes":{"type":"uses","at":[26,12,26,14]}},{"key":"geid_144_490","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#y1.","attributes":{"type":"uses","at":[26,20,26,22]}},{"key":"geid_144_491","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#x2.","attributes":{"type":"uses","at":[26,28,26,30]}},{"key":"geid_144_492","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#y2.","attributes":{"type":"uses","at":[26,36,26,38]}},{"key":"geid_144_493","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#line.","attributes":{"type":"uses","at":[26,46,26,50]}},{"key":"geid_144_494","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#line.","attributes":{"type":"uses","at":[27,7,27,11]}},{"key":"geid_144_495","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#x1.","attributes":{"type":"uses","at":[27,12,27,14]}},{"key":"geid_144_496","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#y1.","attributes":{"type":"uses","at":[27,22,27,24]}},{"key":"geid_144_497","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#x2.","attributes":{"type":"uses","at":[27,33,27,35]}},{"key":"geid_144_498","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#y2.","attributes":{"type":"uses","at":[27,43,27,45]}},{"key":"geid_144_499","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#line.","attributes":{"type":"uses","at":[27,56,27,60]}},{"key":"geid_144_500","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#line.","attributes":{"type":"uses","at":[28,7,28,11]}},{"key":"geid_144_501","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#x1.","attributes":{"type":"uses","at":[28,12,28,14]}},{"key":"geid_144_502","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#y1.","attributes":{"type":"uses","at":[28,23,28,25]}},{"key":"geid_144_503","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#x2.","attributes":{"type":"uses","at":[28,33,28,35]}},{"key":"geid_144_504","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SVGAttributes#y2.","attributes":{"type":"uses","at":[28,44,28,46]}},{"key":"geid_144_505","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#line.","attributes":{"type":"uses","at":[28,56,28,60]}},{"key":"geid_144_506","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#svg.","attributes":{"type":"uses","at":[29,6,29,9]}},{"key":"geid_144_507","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","attributes":{"type":"uses","at":[33,15,33,22]}},{"key":"geid_144_508","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`index.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","attributes":{"type":"uses","at":[0,9,0,16]}},{"key":"geid_144_509","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`index.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/","attributes":{"type":"uses","at":[0,24,0,35]}},{"key":"geid_144_510","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/SidebarButton.","attributes":{"type":"defines","at":[8,40,18,1]}},{"key":"geid_144_511","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/Props#","attributes":{"type":"defines","at":[2,0,6,1]}},{"key":"geid_144_512","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#","attributes":{"type":"uses","at":[0,9,0,11]}},{"key":"geid_144_513","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/","attributes":{"type":"uses","at":[0,19,0,26]}},{"key":"geid_144_514","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/Props#","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/","attributes":{"type":"uses","at":[4,8,4,11]}},{"key":"geid_144_515","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/Props#","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/Element#","attributes":{"type":"uses","at":[4,12,4,19]}},{"key":"geid_144_516","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#","attributes":{"type":"uses","at":[8,28,8,30]}},{"key":"geid_144_517","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/Props#","attributes":{"type":"uses","at":[8,31,8,36]}},{"key":"geid_144_518","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/SidebarButton.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/Props#text.","attributes":{"type":"uses","at":[8,43,8,47]}},{"key":"geid_144_519","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/SidebarButton.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/Props#icon.","attributes":{"type":"uses","at":[8,49,8,53]}},{"key":"geid_144_520","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/SidebarButton.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/Props#onClick.","attributes":{"type":"uses","at":[8,55,8,62]}},{"key":"geid_144_521","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/SidebarButton.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[10,5,10,11]}},{"key":"geid_144_522","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/SidebarButton.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[11,6,11,15]}},{"key":"geid_144_523","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/SidebarButton.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onClick.","attributes":{"type":"uses","at":[12,6,12,13]}},{"key":"geid_144_524","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/SidebarButton.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[14,7,14,10]}},{"key":"geid_144_525","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/SidebarButton.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[14,19,14,22]}},{"key":"geid_144_526","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/SidebarButton.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#span.","attributes":{"type":"uses","at":[15,7,15,11]}},{"key":"geid_144_527","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/SidebarButton.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#span.","attributes":{"type":"uses","at":[15,20,15,24]}},{"key":"geid_144_528","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/SidebarButton.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[16,6,16,12]}},{"key":"geid_144_529","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`index.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/Search.","attributes":{"type":"uses","at":[0,9,0,16]}},{"key":"geid_144_530","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`index.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/","attributes":{"type":"uses","at":[0,24,0,34]}},{"key":"geid_144_531","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","attributes":{"type":"defines","at":[27,16,120,1]}},{"key":"geid_144_532","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#","attributes":{"type":"defines","at":[11,0,25,1]}},{"key":"geid_144_533","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ReactNode#","attributes":{"type":"uses","at":[1,9,1,18]}},{"key":"geid_144_534","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/","attributes":{"type":"uses","at":[1,26,1,33]}},{"key":"geid_144_535","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/CloseSidebarButton.","attributes":{"type":"uses","at":[5,2,5,20]}},{"key":"geid_144_536","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/OpenSidebarButton.","attributes":{"type":"uses","at":[6,2,6,19]}},{"key":"geid_144_537","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/","attributes":{"type":"uses","at":[7,7,7,37]}},{"key":"geid_144_538","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/Search.","attributes":{"type":"uses","at":[9,7,9,13]}},{"key":"geid_144_539","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`index.ts`/","attributes":{"type":"uses","at":[9,19,9,30]}},{"key":"geid_144_540","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#[T]","attributes":{"type":"uses","at":[15,9,15,10]}},{"key":"geid_144_541","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ReactNode#","attributes":{"type":"uses","at":[16,17,16,26]}},{"key":"geid_144_542","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ReactNode#","attributes":{"type":"uses","at":[17,19,17,28]}},{"key":"geid_144_543","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ReactNode#","attributes":{"type":"uses","at":[18,20,18,29]}},{"key":"geid_144_544","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#isOpen.","attributes":{"type":"uses","at":[28,2,28,8]}},{"key":"geid_144_545","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#addItemButtonTitle.","attributes":{"type":"uses","at":[29,2,29,20]}},{"key":"geid_144_546","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#side.","attributes":{"type":"uses","at":[30,2,30,6]}},{"key":"geid_144_547","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#items.","attributes":{"type":"uses","at":[31,2,31,7]}},{"key":"geid_144_548","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#itemComponent.","attributes":{"type":"uses","at":[32,2,32,15]}},{"key":"geid_144_549","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#folderComponent.","attributes":{"type":"uses","at":[33,2,33,17]}},{"key":"geid_144_550","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#footerComponent.","attributes":{"type":"uses","at":[34,2,34,17]}},{"key":"geid_144_551","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#searchTerm.","attributes":{"type":"uses","at":[35,2,35,12]}},{"key":"geid_144_552","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#handleSearchTerm.","attributes":{"type":"uses","at":[36,2,36,18]}},{"key":"geid_144_553","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#toggleOpen.","attributes":{"type":"uses","at":[37,2,37,12]}},{"key":"geid_144_554","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#handleCreateItem.","attributes":{"type":"uses","at":[38,2,38,18]}},{"key":"geid_144_555","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#handleCreateFolder.","attributes":{"type":"uses","at":[39,2,39,20]}},{"key":"geid_144_556","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#handleDrop.","attributes":{"type":"uses","at":[40,2,40,12]}},{"key":"geid_144_557","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#","attributes":{"type":"uses","at":[41,3,41,8]}},{"key":"geid_144_558","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[57,5,57,8]}},{"key":"geid_144_559","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[58,7,58,10]}},{"key":"geid_144_560","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[59,8,59,17]}},{"key":"geid_144_561","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[61,9,61,12]}},{"key":"geid_144_562","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[61,13,61,22]}},{"key":"geid_144_563","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[62,11,62,17]}},{"key":"geid_144_564","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[63,12,63,21]}},{"key":"geid_144_565","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onClick.","attributes":{"type":"uses","at":[64,12,64,19]}},{"key":"geid_144_566","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[71,12,71,18]}},{"key":"geid_144_567","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[73,11,73,17]}},{"key":"geid_144_568","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[74,12,74,21]}},{"key":"geid_144_569","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onClick.","attributes":{"type":"uses","at":[75,12,75,19]}},{"key":"geid_144_570","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[78,12,78,18]}},{"key":"geid_144_571","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[79,10,79,13]}},{"key":"geid_144_572","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/Search.","attributes":{"type":"uses","at":[80,9,80,15]}},{"key":"geid_144_573","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/Props#placeholder.","attributes":{"type":"uses","at":[81,10,81,21]}},{"key":"geid_144_574","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/Props#searchTerm.","attributes":{"type":"uses","at":[82,10,82,20]}},{"key":"geid_144_575","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/Props#onSearch.","attributes":{"type":"uses","at":[83,10,83,18]}},{"key":"geid_144_576","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[86,9,86,12]}},{"key":"geid_144_577","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[86,13,86,22]}},{"key":"geid_144_578","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[88,13,88,16]}},{"key":"geid_144_579","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[88,17,88,26]}},{"key":"geid_144_580","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[90,14,90,17]}},{"key":"geid_144_581","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[94,13,94,16]}},{"key":"geid_144_582","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[95,14,95,23]}},{"key":"geid_144_583","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onDrop.","attributes":{"type":"uses","at":[96,14,96,20]}},{"key":"geid_144_584","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onDragOver.","attributes":{"type":"uses","at":[97,14,97,24]}},{"key":"geid_144_585","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onDragEnter.","attributes":{"type":"uses","at":[98,14,98,25]}},{"key":"geid_144_586","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onDragLeave.","attributes":{"type":"uses","at":[99,14,99,25]}},{"key":"geid_144_587","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[102,14,102,17]}},{"key":"geid_144_588","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[104,13,104,16]}},{"key":"geid_144_589","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[104,17,104,26]}},{"key":"geid_144_590","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#span.","attributes":{"type":"uses","at":[106,15,106,19]}},{"key":"geid_144_591","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[106,20,106,29]}},{"key":"geid_144_592","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#span.","attributes":{"type":"uses","at":[108,16,108,20]}},{"key":"geid_144_593","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[109,14,109,17]}},{"key":"geid_144_594","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[111,10,111,13]}},{"key":"geid_144_595","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[113,8,113,11]}},{"key":"geid_144_596","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/CloseSidebarButton.","attributes":{"type":"uses","at":[115,7,115,25]}},{"key":"geid_144_597","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/Props#onClick.","attributes":{"type":"uses","at":[115,26,115,33]}},{"key":"geid_144_598","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/Props#side.","attributes":{"type":"uses","at":[115,47,115,51]}},{"key":"geid_144_599","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[116,6,116,9]}},{"key":"geid_144_600","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/OpenSidebarButton.","attributes":{"type":"uses","at":[118,5,118,22]}},{"key":"geid_144_601","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/Props#onClick.","attributes":{"type":"uses","at":[118,23,118,30]}},{"key":"geid_144_602","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/Props#side.","attributes":{"type":"uses","at":[118,44,118,48]}},{"key":"geid_144_603","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","attributes":{"type":"uses","at":[122,15,122,22]}},{"key":"geid_144_604","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","attributes":{"type":"defines","at":[17,40,104,1]}},{"key":"geid_144_605","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/Props#","attributes":{"type":"defines","at":[12,0,15,1]}},{"key":"geid_144_606","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#","attributes":{"type":"uses","at":[0,9,0,11]}},{"key":"geid_144_607","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().","attributes":{"type":"uses","at":[0,13,0,23]}},{"key":"geid_144_608","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().","attributes":{"type":"uses","at":[0,13,0,23]}},{"key":"geid_144_609","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().","attributes":{"type":"uses","at":[0,25,0,34]}},{"key":"geid_144_610","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useReducer().","attributes":{"type":"uses","at":[0,36,0,46]}},{"key":"geid_144_611","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().","attributes":{"type":"uses","at":[0,48,0,54]}},{"key":"geid_144_612","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/","attributes":{"type":"uses","at":[0,62,0,69]}},{"key":"geid_144_613","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#","attributes":{"type":"uses","at":[17,28,17,30]}},{"key":"geid_144_614","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/Props#","attributes":{"type":"uses","at":[17,31,17,36]}},{"key":"geid_144_615","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/Props#open.","attributes":{"type":"uses","at":[17,43,17,47]}},{"key":"geid_144_616","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/Props#onClose.","attributes":{"type":"uses","at":[17,49,17,56]}},{"key":"geid_144_617","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().","attributes":{"type":"uses","at":[23,37,23,47]}},{"key":"geid_144_618","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().","attributes":{"type":"uses","at":[23,37,23,47]}},{"key":"geid_144_619","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().","attributes":{"type":"uses","at":[24,19,24,25]}},{"key":"geid_144_620","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLDivElement#","attributes":{"type":"uses","at":[24,26,24,40]}},{"key":"geid_144_621","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().","attributes":{"type":"uses","at":[26,2,26,11]}},{"key":"geid_144_622","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/MouseEvent#","attributes":{"type":"uses","at":[27,32,27,42]}},{"key":"geid_144_623","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[28,19,28,26]}},{"key":"geid_144_624","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[28,40,28,47]}},{"key":"geid_144_625","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/MouseEvent#","attributes":{"type":"uses","at":[33,30,33,40]}},{"key":"geid_144_626","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[57,5,57,8]}},{"key":"geid_144_627","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[57,9,57,18]}},{"key":"geid_144_628","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[58,7,58,10]}},{"key":"geid_144_629","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[58,11,58,20]}},{"key":"geid_144_630","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[59,9,59,12]}},{"key":"geid_144_631","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[59,13,59,22]}},{"key":"geid_144_632","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[60,11,60,14]}},{"key":"geid_144_633","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[61,12,61,21]}},{"key":"geid_144_634","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/AriaAttributes#`\"aria-hidden\"`.","attributes":{"type":"uses","at":[62,12,62,23]}},{"key":"geid_144_635","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[65,11,65,14]}},{"key":"geid_144_636","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ClassAttributes#ref.","attributes":{"type":"uses","at":[66,12,66,15]}},{"key":"geid_144_637","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[67,12,67,21]}},{"key":"geid_144_638","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#role.","attributes":{"type":"uses","at":[68,12,68,16]}},{"key":"geid_144_639","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[70,13,70,16]}},{"key":"geid_144_640","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[70,17,70,26]}},{"key":"geid_144_641","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[72,14,72,17]}},{"key":"geid_144_642","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[74,13,74,16]}},{"key":"geid_144_643","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[74,17,74,26]}},{"key":"geid_144_644","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[76,14,76,17]}},{"key":"geid_144_645","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#select.","attributes":{"type":"uses","at":[78,13,78,19]}},{"key":"geid_144_646","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[79,14,79,23]}},{"key":"geid_144_647","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SelectHTMLAttributes#value.","attributes":{"type":"uses","at":[80,14,80,19]}},{"key":"geid_144_648","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SelectHTMLAttributes#onChange.","attributes":{"type":"uses","at":[81,14,81,22]}},{"key":"geid_144_649","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ChangeEvent#target.","attributes":{"type":"uses","at":[82,56,82,62]}},{"key":"geid_144_650","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#option.","attributes":{"type":"uses","at":[85,15,85,21]}},{"key":"geid_144_651","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/OptionHTMLAttributes#value.","attributes":{"type":"uses","at":[85,22,85,27]}},{"key":"geid_144_652","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#option.","attributes":{"type":"uses","at":[85,53,85,59]}},{"key":"geid_144_653","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#option.","attributes":{"type":"uses","at":[86,15,86,21]}},{"key":"geid_144_654","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/OptionHTMLAttributes#value.","attributes":{"type":"uses","at":[86,22,86,27]}},{"key":"geid_144_655","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#option.","attributes":{"type":"uses","at":[86,55,86,61]}},{"key":"geid_144_656","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#select.","attributes":{"type":"uses","at":[87,14,87,20]}},{"key":"geid_144_657","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[89,13,89,19]}},{"key":"geid_144_658","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ButtonHTMLAttributes#type.","attributes":{"type":"uses","at":[90,14,90,18]}},{"key":"geid_144_659","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[91,14,91,23]}},{"key":"geid_144_660","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onClick.","attributes":{"type":"uses","at":[92,14,92,21]}},{"key":"geid_144_661","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[98,14,98,20]}},{"key":"geid_144_662","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[99,12,99,15]}},{"key":"geid_144_663","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[100,10,100,13]}},{"key":"geid_144_664","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[101,8,101,11]}},{"key":"geid_144_665","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`SettingDialog.tsx`/SettingDialog.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[102,6,102,9]}},{"key":"geid_144_666","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Key.","attributes":{"type":"defines","at":[12,30,78,1]}},{"key":"geid_144_667","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Props#","attributes":{"type":"defines","at":[7,0,10,1]}},{"key":"geid_144_668","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#","attributes":{"type":"uses","at":[1,9,1,11]}},{"key":"geid_144_669","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#","attributes":{"type":"uses","at":[1,13,1,26]}},{"key":"geid_144_670","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().","attributes":{"type":"uses","at":[1,28,1,37]}},{"key":"geid_144_671","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().","attributes":{"type":"uses","at":[1,39,1,45]}},{"key":"geid_144_672","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[1,47,1,55]}},{"key":"geid_144_673","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/","attributes":{"type":"uses","at":[1,63,1,70]}},{"key":"geid_144_674","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/SidebarButton.","attributes":{"type":"uses","at":[5,9,5,22]}},{"key":"geid_144_675","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/","attributes":{"type":"uses","at":[5,30,5,56]}},{"key":"geid_144_676","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#","attributes":{"type":"uses","at":[12,18,12,20]}},{"key":"geid_144_677","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Props#","attributes":{"type":"uses","at":[12,21,12,26]}},{"key":"geid_144_678","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Key.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Props#apiKey.","attributes":{"type":"uses","at":[12,33,12,39]}},{"key":"geid_144_679","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Key.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Props#onApiKeyChange.","attributes":{"type":"uses","at":[12,41,12,55]}},{"key":"geid_144_680","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Key.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[14,38,14,46]}},{"key":"geid_144_681","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Key.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[15,30,15,38]}},{"key":"geid_144_682","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Key.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().","attributes":{"type":"uses","at":[16,19,16,25]}},{"key":"geid_144_683","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Key.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLInputElement#","attributes":{"type":"uses","at":[16,26,16,42]}},{"key":"geid_144_684","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Key.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#","attributes":{"type":"uses","at":[18,30,18,43]}},{"key":"geid_144_685","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Key.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLDivElement#","attributes":{"type":"uses","at":[18,44,18,58]}},{"key":"geid_144_686","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Key.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#key.","attributes":{"type":"uses","at":[19,10,19,13]}},{"key":"geid_144_687","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Key.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/BaseSyntheticEvent#preventDefault().","attributes":{"type":"uses","at":[20,8,20,22]}},{"key":"geid_144_688","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Key.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().","attributes":{"type":"uses","at":[30,2,30,11]}},{"key":"geid_144_689","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Key.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[32,15,32,22]}},{"key":"geid_144_690","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Key.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[37,5,37,8]}},{"key":"geid_144_691","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Key.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[37,9,37,18]}},{"key":"geid_144_692","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Key.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#input.","attributes":{"type":"uses","at":[40,7,40,12]}},{"key":"geid_144_693","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Key.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ClassAttributes#ref.","attributes":{"type":"uses","at":[41,8,41,11]}},{"key":"geid_144_694","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Key.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[42,8,42,17]}},{"key":"geid_144_695","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Key.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#type.","attributes":{"type":"uses","at":[43,8,43,12]}},{"key":"geid_144_696","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Key.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#value.","attributes":{"type":"uses","at":[44,8,44,13]}},{"key":"geid_144_697","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Key.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#onChange.","attributes":{"type":"uses","at":[45,8,45,16]}},{"key":"geid_144_698","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Key.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ChangeEvent#target.","attributes":{"type":"uses","at":[45,37,45,43]}},{"key":"geid_144_699","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Key.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onKeyDown.","attributes":{"type":"uses","at":[46,8,46,17]}},{"key":"geid_144_700","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Key.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#placeholder.","attributes":{"type":"uses","at":[47,8,47,19]}},{"key":"geid_144_701","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Key.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[50,7,50,10]}},{"key":"geid_144_702","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Key.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[50,11,50,20]}},{"key":"geid_144_703","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Key.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[69,8,69,11]}},{"key":"geid_144_704","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Key.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[70,6,70,9]}},{"key":"geid_144_705","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Key.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/SidebarButton.","attributes":{"type":"uses","at":[72,5,72,18]}},{"key":"geid_144_706","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Key.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/Props#text.","attributes":{"type":"uses","at":[73,6,73,10]}},{"key":"geid_144_707","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Key.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/Props#icon.","attributes":{"type":"uses","at":[74,6,74,10]}},{"key":"geid_144_708","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Key.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/Props#onClick.","attributes":{"type":"uses","at":[75,6,75,13]}},{"key":"geid_144_709","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Import.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Import.tsx`/Import.","attributes":{"type":"defines","at":[13,33,50,1]}},{"key":"geid_144_710","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Import.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Import.tsx`/Props#","attributes":{"type":"defines","at":[9,0,11,1]}},{"key":"geid_144_711","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Import.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#","attributes":{"type":"uses","at":[1,9,1,11]}},{"key":"geid_144_712","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Import.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/","attributes":{"type":"uses","at":[1,19,1,26]}},{"key":"geid_144_713","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Import.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/SidebarButton.","attributes":{"type":"uses","at":[7,9,7,22]}},{"key":"geid_144_714","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Import.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/","attributes":{"type":"uses","at":[7,30,7,56]}},{"key":"geid_144_715","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Import.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#","attributes":{"type":"uses","at":[13,21,13,23]}},{"key":"geid_144_716","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Import.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Import.tsx`/Props#","attributes":{"type":"uses","at":[13,24,13,29]}},{"key":"geid_144_717","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Import.tsx`/Import.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Import.tsx`/Props#onImport.","attributes":{"type":"uses","at":[13,36,13,44]}},{"key":"geid_144_718","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Import.tsx`/Import.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#input.","attributes":{"type":"uses","at":[17,7,17,12]}},{"key":"geid_144_719","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Import.tsx`/Import.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#id.","attributes":{"type":"uses","at":[18,8,18,10]}},{"key":"geid_144_720","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Import.tsx`/Import.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[19,8,19,17]}},{"key":"geid_144_721","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Import.tsx`/Import.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#tabIndex.","attributes":{"type":"uses","at":[20,8,20,16]}},{"key":"geid_144_722","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Import.tsx`/Import.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#type.","attributes":{"type":"uses","at":[21,8,21,12]}},{"key":"geid_144_723","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Import.tsx`/Import.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#accept.","attributes":{"type":"uses","at":[22,8,22,14]}},{"key":"geid_144_724","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Import.tsx`/Import.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#onChange.","attributes":{"type":"uses","at":[23,8,23,16]}},{"key":"geid_144_725","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Import.tsx`/Import.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ChangeEvent#target.","attributes":{"type":"uses","at":[24,17,24,23]}},{"key":"geid_144_726","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Import.tsx`/Import.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ChangeEvent#target.","attributes":{"type":"uses","at":[26,25,26,31]}},{"key":"geid_144_727","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Import.tsx`/Import.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/SidebarButton.","attributes":{"type":"uses","at":[36,7,36,20]}},{"key":"geid_144_728","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Import.tsx`/Import.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/Props#text.","attributes":{"type":"uses","at":[37,8,37,12]}},{"key":"geid_144_729","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Import.tsx`/Import.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/Props#icon.","attributes":{"type":"uses","at":[38,8,38,12]}},{"key":"geid_144_730","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Import.tsx`/Import.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/Props#onClick.","attributes":{"type":"uses","at":[39,8,39,15]}},{"key":"geid_144_731","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Import.tsx`/Import.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLInputElement#","attributes":{"type":"uses","at":[42,15,42,31]}},{"key":"geid_144_732","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/Search.","attributes":{"type":"defines","at":[10,26,40,1]}},{"key":"geid_144_733","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/Props#","attributes":{"type":"defines","at":[5,0,9,1]}},{"key":"geid_144_734","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#","attributes":{"type":"uses","at":[1,9,1,11]}},{"key":"geid_144_735","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/","attributes":{"type":"uses","at":[1,19,1,26]}},{"key":"geid_144_736","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#","attributes":{"type":"uses","at":[10,14,10,16]}},{"key":"geid_144_737","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/Props#","attributes":{"type":"uses","at":[10,17,10,22]}},{"key":"geid_144_738","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/Search.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/Props#placeholder.","attributes":{"type":"uses","at":[10,29,10,40]}},{"key":"geid_144_739","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/Search.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/Props#searchTerm.","attributes":{"type":"uses","at":[10,42,10,52]}},{"key":"geid_144_740","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/Search.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/Props#onSearch.","attributes":{"type":"uses","at":[10,54,10,62]}},{"key":"geid_144_741","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/Search.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ChangeEvent#","attributes":{"type":"uses","at":[13,39,13,50]}},{"key":"geid_144_742","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/Search.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLInputElement#","attributes":{"type":"uses","at":[13,51,13,67]}},{"key":"geid_144_743","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/Search.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ChangeEvent#target.","attributes":{"type":"uses","at":[14,15,14,21]}},{"key":"geid_144_744","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/Search.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[22,5,22,8]}},{"key":"geid_144_745","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/Search.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[22,9,22,18]}},{"key":"geid_144_746","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/Search.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#input.","attributes":{"type":"uses","at":[23,7,23,12]}},{"key":"geid_144_747","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/Search.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[24,8,24,17]}},{"key":"geid_144_748","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/Search.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#type.","attributes":{"type":"uses","at":[25,8,25,12]}},{"key":"geid_144_749","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/Search.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#placeholder.","attributes":{"type":"uses","at":[26,8,26,19]}},{"key":"geid_144_750","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/Search.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#value.","attributes":{"type":"uses","at":[27,8,27,13]}},{"key":"geid_144_751","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/Search.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#onChange.","attributes":{"type":"uses","at":[28,8,28,16]}},{"key":"geid_144_752","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/Search.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[38,6,38,9]}},{"key":"geid_144_753","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Search/`Search.tsx`/Search.","attributes":{"type":"uses","at":[42,15,42,21]}},{"key":"geid_144_754","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`index.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/Promptbar.","attributes":{"type":"uses","at":[0,9,0,16]}},{"key":"geid_144_755","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`index.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/","attributes":{"type":"uses","at":[0,24,0,37]}},{"key":"geid_144_756","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/Promptbar.","attributes":{"type":"defines","at":[22,18,149,1]}},{"key":"geid_144_757","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().","attributes":{"type":"uses","at":[0,9,0,19]}},{"key":"geid_144_758","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().","attributes":{"type":"uses","at":[0,9,0,19]}},{"key":"geid_144_759","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().","attributes":{"type":"uses","at":[0,21,0,30]}},{"key":"geid_144_760","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[0,32,0,40]}},{"key":"geid_144_761","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/","attributes":{"type":"uses","at":[0,48,0,55]}},{"key":"geid_144_762","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptFolders.tsx`/PromptFolders.","attributes":{"type":"uses","at":[12,9,12,22]}},{"key":"geid_144_763","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptFolders.tsx`/","attributes":{"type":"uses","at":[12,30,12,58]}},{"key":"geid_144_764","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptbarSettings.tsx`/PromptbarSettings.","attributes":{"type":"uses","at":[13,9,13,26]}},{"key":"geid_144_765","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptbarSettings.tsx`/","attributes":{"type":"uses","at":[13,34,13,66]}},{"key":"geid_144_766","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompts.tsx`/Prompts.","attributes":{"type":"uses","at":[14,9,14,16]}},{"key":"geid_144_767","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompts.tsx`/","attributes":{"type":"uses","at":[14,24,14,46]}},{"key":"geid_144_768","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","attributes":{"type":"uses","at":[16,7,16,14]}},{"key":"geid_144_769","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`index.ts`/","attributes":{"type":"uses","at":[16,20,16,32]}},{"key":"geid_144_770","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/PromptbarContext.","attributes":{"type":"uses","at":[17,7,17,23]}},{"key":"geid_144_771","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/","attributes":{"type":"uses","at":[17,29,17,50]}},{"key":"geid_144_772","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.state.tsx`/PromptbarInitialState#","attributes":{"type":"uses","at":[18,9,18,30]}},{"key":"geid_144_773","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.state.tsx`/initialState.","attributes":{"type":"uses","at":[18,32,18,44]}},{"key":"geid_144_774","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.state.tsx`/","attributes":{"type":"uses","at":[18,52,18,71]}},{"key":"geid_144_775","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/","target":"scip-typescript npm @types/uuid 9.0.7 `index.d.ts`/v4.","attributes":{"type":"uses","at":[20,9,20,11]}},{"key":"geid_144_776","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/","target":"scip-typescript npm @types/uuid 9.0.7 `index.d.ts`/v4.","attributes":{"type":"uses","at":[20,15,20,21]}},{"key":"geid_144_777","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/","target":"scip-typescript npm @types/uuid 9.0.7 `index.d.ts`/","attributes":{"type":"uses","at":[20,29,20,35]}},{"key":"geid_144_778","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/Promptbar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.state.tsx`/PromptbarInitialState#","attributes":{"type":"uses","at":[25,49,25,70]}},{"key":"geid_144_779","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/Promptbar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.state.tsx`/PromptbarInitialState#","attributes":{"type":"uses","at":[26,4,26,16]}},{"key":"geid_144_780","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/Promptbar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().","attributes":{"type":"uses","at":[33,6,33,16]}},{"key":"geid_144_781","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/Promptbar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().","attributes":{"type":"uses","at":[33,6,33,16]}},{"key":"geid_144_782","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/Promptbar.","target":"scip-typescript npm @types/uuid 9.0.7 `index.d.ts`/v4.","attributes":{"type":"uses","at":[48,12,48,18]}},{"key":"geid_144_783","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/Promptbar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().","attributes":{"type":"uses","at":[99,2,99,11]}},{"key":"geid_144_784","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/Promptbar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/PromptbarContext.","attributes":{"type":"uses","at":[119,5,119,21]}},{"key":"geid_144_785","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/Promptbar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/Context#Provider.","attributes":{"type":"uses","at":[119,22,119,30]}},{"key":"geid_144_786","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/Promptbar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ProviderProps#value.","attributes":{"type":"uses","at":[120,6,120,11]}},{"key":"geid_144_787","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/Promptbar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","attributes":{"type":"uses","at":[127,7,127,14]}},{"key":"geid_144_788","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/Promptbar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#side.","attributes":{"type":"uses","at":[128,8,128,12]}},{"key":"geid_144_789","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/Promptbar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#isOpen.","attributes":{"type":"uses","at":[129,8,129,14]}},{"key":"geid_144_790","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/Promptbar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#addItemButtonTitle.","attributes":{"type":"uses","at":[130,8,130,26]}},{"key":"geid_144_791","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/Promptbar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#itemComponent.","attributes":{"type":"uses","at":[131,8,131,21]}},{"key":"geid_144_792","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/Promptbar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompts.tsx`/Prompts.","attributes":{"type":"uses","at":[132,11,132,18]}},{"key":"geid_144_793","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/Promptbar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompts.tsx`/Props#prompts.","attributes":{"type":"uses","at":[133,12,133,19]}},{"key":"geid_144_794","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/Promptbar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#folderComponent.","attributes":{"type":"uses","at":[136,8,136,23]}},{"key":"geid_144_795","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/Promptbar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptFolders.tsx`/PromptFolders.","attributes":{"type":"uses","at":[136,26,136,39]}},{"key":"geid_144_796","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/Promptbar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#items.","attributes":{"type":"uses","at":[137,8,137,13]}},{"key":"geid_144_797","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/Promptbar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#searchTerm.","attributes":{"type":"uses","at":[138,8,138,18]}},{"key":"geid_144_798","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/Promptbar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#handleSearchTerm.","attributes":{"type":"uses","at":[139,8,139,24]}},{"key":"geid_144_799","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/Promptbar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#toggleOpen.","attributes":{"type":"uses","at":[142,8,142,18]}},{"key":"geid_144_800","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/Promptbar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#handleCreateItem.","attributes":{"type":"uses","at":[143,8,143,24]}},{"key":"geid_144_801","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/Promptbar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#handleCreateFolder.","attributes":{"type":"uses","at":[144,8,144,26]}},{"key":"geid_144_802","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/Promptbar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#handleDrop.","attributes":{"type":"uses","at":[145,8,145,18]}},{"key":"geid_144_803","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/Promptbar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/PromptbarContext.","attributes":{"type":"uses","at":[147,6,147,22]}},{"key":"geid_144_804","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/Promptbar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/Context#Provider.","attributes":{"type":"uses","at":[147,23,147,31]}},{"key":"geid_144_805","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.tsx`/Promptbar.","attributes":{"type":"uses","at":[151,15,151,24]}},{"key":"geid_144_806","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.state.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.state.tsx`/PromptbarInitialState#","attributes":{"type":"defines","at":[2,0,5,1]}},{"key":"geid_144_807","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.state.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.state.tsx`/PromptbarInitialState#","attributes":{"type":"uses","at":[7,27,7,48]}},{"key":"geid_144_808","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/PromptbarContextProps#","attributes":{"type":"defines","at":[8,0,14,1]}},{"key":"geid_144_809","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/Dispatch#","attributes":{"type":"uses","at":[0,9,0,17]}},{"key":"geid_144_810","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/createContext().","attributes":{"type":"uses","at":[0,19,0,32]}},{"key":"geid_144_811","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/","attributes":{"type":"uses","at":[0,40,0,47]}},{"key":"geid_144_812","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.state.tsx`/PromptbarInitialState#","attributes":{"type":"uses","at":[6,9,6,30]}},{"key":"geid_144_813","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.state.tsx`/","attributes":{"type":"uses","at":[6,38,6,57]}},{"key":"geid_144_814","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/PromptbarContextProps#","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.state.tsx`/PromptbarInitialState#","attributes":{"type":"uses","at":[9,9,9,30]}},{"key":"geid_144_815","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/PromptbarContextProps#","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/Dispatch#","attributes":{"type":"uses","at":[10,12,10,20]}},{"key":"geid_144_816","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/PromptbarContextProps#","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.state.tsx`/PromptbarInitialState#","attributes":{"type":"uses","at":[10,32,10,53]}},{"key":"geid_144_817","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/createContext().","attributes":{"type":"uses","at":[16,25,16,38]}},{"key":"geid_144_818","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/PromptbarContextProps#","attributes":{"type":"uses","at":[16,39,16,60]}},{"key":"geid_144_819","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/PromptbarContext.","attributes":{"type":"uses","at":[18,15,18,31]}},{"key":"geid_144_820","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Mobile/`Navbar.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Mobile/`Navbar.tsx`/Navbar.","attributes":{"type":"defines","at":[10,33,28,1]}},{"key":"geid_144_821","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Mobile/`Navbar.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Mobile/`Navbar.tsx`/Props#","attributes":{"type":"defines","at":[5,0,8,1]}},{"key":"geid_144_822","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Mobile/`Navbar.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#","attributes":{"type":"uses","at":[1,9,1,11]}},{"key":"geid_144_823","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Mobile/`Navbar.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/","attributes":{"type":"uses","at":[1,19,1,26]}},{"key":"geid_144_824","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Mobile/`Navbar.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#","attributes":{"type":"uses","at":[10,21,10,23]}},{"key":"geid_144_825","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Mobile/`Navbar.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Mobile/`Navbar.tsx`/Props#","attributes":{"type":"uses","at":[10,24,10,29]}},{"key":"geid_144_826","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Mobile/`Navbar.tsx`/Navbar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Mobile/`Navbar.tsx`/Props#selectedConversation.","attributes":{"type":"uses","at":[11,2,11,22]}},{"key":"geid_144_827","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Mobile/`Navbar.tsx`/Navbar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Mobile/`Navbar.tsx`/Props#onNewConversation.","attributes":{"type":"uses","at":[12,2,12,19]}},{"key":"geid_144_828","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Mobile/`Navbar.tsx`/Navbar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#nav.","attributes":{"type":"uses","at":[15,5,15,8]}},{"key":"geid_144_829","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Mobile/`Navbar.tsx`/Navbar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[15,9,15,18]}},{"key":"geid_144_830","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Mobile/`Navbar.tsx`/Navbar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[16,7,16,10]}},{"key":"geid_144_831","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Mobile/`Navbar.tsx`/Navbar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[16,11,16,20]}},{"key":"geid_144_832","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Mobile/`Navbar.tsx`/Navbar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[16,30,16,33]}},{"key":"geid_144_833","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Mobile/`Navbar.tsx`/Navbar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[18,7,18,10]}},{"key":"geid_144_834","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Mobile/`Navbar.tsx`/Navbar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[18,11,18,20]}},{"key":"geid_144_835","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Mobile/`Navbar.tsx`/Navbar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[20,8,20,11]}},{"key":"geid_144_836","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Mobile/`Navbar.tsx`/Navbar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#nav.","attributes":{"type":"uses","at":[26,6,26,9]}},{"key":"geid_144_837","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`MemoizedReactMarkdown.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#","attributes":{"type":"uses","at":[0,9,0,11]}},{"key":"geid_144_838","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`MemoizedReactMarkdown.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/memo().","attributes":{"type":"uses","at":[0,13,0,17]}},{"key":"geid_144_839","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`MemoizedReactMarkdown.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/","attributes":{"type":"uses","at":[0,25,0,32]}},{"key":"geid_144_840","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`MemoizedReactMarkdown.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#","attributes":{"type":"uses","at":[3,36,3,38]}},{"key":"geid_144_841","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`MemoizedReactMarkdown.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/memo().","attributes":{"type":"uses","at":[3,50,3,54]}},{"key":"geid_144_842","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/Props#","attributes":{"type":"defines","at":[12,0,15,1]}},{"key":"geid_144_843","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#","attributes":{"type":"uses","at":[1,9,1,11]}},{"key":"geid_144_844","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/memo().","attributes":{"type":"uses","at":[1,13,1,17]}},{"key":"geid_144_845","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[1,19,1,27]}},{"key":"geid_144_846","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/","attributes":{"type":"uses","at":[1,35,1,42]}},{"key":"geid_144_847","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#","attributes":{"type":"uses","at":[17,24,17,26]}},{"key":"geid_144_848","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/Props#","attributes":{"type":"uses","at":[17,27,17,32]}},{"key":"geid_144_849","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/memo().","attributes":{"type":"uses","at":[17,36,17,40]}},{"key":"geid_144_850","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/Props#language.","attributes":{"type":"uses","at":[17,44,17,52]}},{"key":"geid_144_851","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/Props#value.","attributes":{"type":"uses","at":[17,54,17,59]}},{"key":"geid_144_852","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[19,34,19,42]}},{"key":"geid_144_853","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`timers.d.ts`/`\"timers\"`/global/setTimeout().","attributes":{"type":"uses","at":[29,6,29,16]}},{"key":"geid_144_854","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`timers.d.ts`/`\"timers\"`/global/setTimeout/","attributes":{"type":"uses","at":[29,6,29,16]}},{"key":"geid_144_855","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`buffer.d.ts`/`\"buffer\"`/global/Blob#","attributes":{"type":"uses","at":[50,21,50,25]}},{"key":"geid_144_856","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`buffer.d.ts`/`\"buffer\"`/global/Blob.","attributes":{"type":"uses","at":[50,21,50,25]}},{"key":"geid_144_857","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/global/URL#","attributes":{"type":"uses","at":[51,16,51,19]}},{"key":"geid_144_858","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/global/URL.","attributes":{"type":"uses","at":[51,16,51,19]}},{"key":"geid_144_859","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/URL#createObjectURL().","attributes":{"type":"uses","at":[51,20,51,35]}},{"key":"geid_144_860","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/global/URL#","attributes":{"type":"uses","at":[59,4,59,7]}},{"key":"geid_144_861","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/global/URL.","attributes":{"type":"uses","at":[59,4,59,7]}},{"key":"geid_144_862","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`url.d.ts`/`\"url\"`/URL#revokeObjectURL().","attributes":{"type":"uses","at":[59,8,59,23]}},{"key":"geid_144_863","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[62,5,62,8]}},{"key":"geid_144_864","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[62,9,62,18]}},{"key":"geid_144_865","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[63,7,63,10]}},{"key":"geid_144_866","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[63,11,63,20]}},{"key":"geid_144_867","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#span.","attributes":{"type":"uses","at":[64,9,64,13]}},{"key":"geid_144_868","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[64,14,64,23]}},{"key":"geid_144_869","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#span.","attributes":{"type":"uses","at":[64,67,64,71]}},{"key":"geid_144_870","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[66,9,66,12]}},{"key":"geid_144_871","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[66,13,66,22]}},{"key":"geid_144_872","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[67,11,67,17]}},{"key":"geid_144_873","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[68,12,68,21]}},{"key":"geid_144_874","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onClick.","attributes":{"type":"uses","at":[69,12,69,19]}},{"key":"geid_144_875","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[73,12,73,18]}},{"key":"geid_144_876","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[74,11,74,17]}},{"key":"geid_144_877","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[75,12,75,21]}},{"key":"geid_144_878","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onClick.","attributes":{"type":"uses","at":[76,12,76,19]}},{"key":"geid_144_879","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[79,12,79,18]}},{"key":"geid_144_880","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[80,10,80,13]}},{"key":"geid_144_881","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[81,8,81,11]}},{"key":"geid_144_882","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[90,6,90,9]}},{"key":"geid_144_883","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/CodeBlock.","attributes":{"type":"uses","at":[93,0,93,9]}},{"key":"geid_144_884","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FunctionComponent#displayName.","attributes":{"type":"uses","at":[93,10,93,21]}},{"key":"geid_144_885","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`index.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","attributes":{"type":"uses","at":[0,9,0,16]}},{"key":"geid_144_886","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`index.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/","attributes":{"type":"uses","at":[0,24,0,34]}},{"key":"geid_144_887","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","attributes":{"type":"defines","at":[29,15,189,1]}},{"key":"geid_144_888","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Props#","attributes":{"type":"defines","at":[22,0,27,1]}},{"key":"geid_144_889","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#","attributes":{"type":"uses","at":[9,2,9,15]}},{"key":"geid_144_890","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ReactElement#","attributes":{"type":"uses","at":[10,2,10,14]}},{"key":"geid_144_891","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().","attributes":{"type":"uses","at":[11,2,11,12]}},{"key":"geid_144_892","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().","attributes":{"type":"uses","at":[11,2,11,12]}},{"key":"geid_144_893","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().","attributes":{"type":"uses","at":[12,2,12,11]}},{"key":"geid_144_894","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[13,2,13,10]}},{"key":"geid_144_895","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/","attributes":{"type":"uses","at":[14,7,14,14]}},{"key":"geid_144_896","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Props#","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ReactElement#","attributes":{"type":"uses","at":[26,20,26,32]}},{"key":"geid_144_897","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Props#currentFolder.","attributes":{"type":"uses","at":[30,2,30,15]}},{"key":"geid_144_898","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Props#searchTerm.","attributes":{"type":"uses","at":[31,2,31,12]}},{"key":"geid_144_899","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Props#handleDrop.","attributes":{"type":"uses","at":[32,2,32,12]}},{"key":"geid_144_900","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Props#folderComponent.","attributes":{"type":"uses","at":[33,2,33,17]}},{"key":"geid_144_901","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Props#","attributes":{"type":"uses","at":[34,3,34,8]}},{"key":"geid_144_902","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().","attributes":{"type":"uses","at":[35,53,35,63]}},{"key":"geid_144_903","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().","attributes":{"type":"uses","at":[35,53,35,63]}},{"key":"geid_144_904","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[37,38,37,46]}},{"key":"geid_144_905","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[38,38,38,46]}},{"key":"geid_144_906","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[39,40,39,48]}},{"key":"geid_144_907","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[40,30,40,38]}},{"key":"geid_144_908","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#","attributes":{"type":"uses","at":[42,30,42,43]}},{"key":"geid_144_909","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLDivElement#","attributes":{"type":"uses","at":[42,44,42,58]}},{"key":"geid_144_910","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#key.","attributes":{"type":"uses","at":[43,10,43,13]}},{"key":"geid_144_911","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/BaseSyntheticEvent#preventDefault().","attributes":{"type":"uses","at":[44,8,44,22]}},{"key":"geid_144_912","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().","attributes":{"type":"uses","at":[77,2,77,11]}},{"key":"geid_144_913","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().","attributes":{"type":"uses","at":[85,2,85,11]}},{"key":"geid_144_914","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[95,7,95,10]}},{"key":"geid_144_915","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[95,11,95,20]}},{"key":"geid_144_916","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[97,11,97,14]}},{"key":"geid_144_917","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[97,15,97,24]}},{"key":"geid_144_918","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#input.","attributes":{"type":"uses","at":[103,13,103,18]}},{"key":"geid_144_919","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[104,14,104,23]}},{"key":"geid_144_920","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#type.","attributes":{"type":"uses","at":[105,14,105,18]}},{"key":"geid_144_921","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#value.","attributes":{"type":"uses","at":[106,14,106,19]}},{"key":"geid_144_922","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#onChange.","attributes":{"type":"uses","at":[107,14,107,22]}},{"key":"geid_144_923","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ChangeEvent#target.","attributes":{"type":"uses","at":[107,48,107,54]}},{"key":"geid_144_924","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onKeyDown.","attributes":{"type":"uses","at":[108,14,108,23]}},{"key":"geid_144_925","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#autoFocus.","attributes":{"type":"uses","at":[109,14,109,23]}},{"key":"geid_144_926","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[111,12,111,15]}},{"key":"geid_144_927","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[113,11,113,17]}},{"key":"geid_144_928","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[114,12,114,21]}},{"key":"geid_144_929","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onClick.","attributes":{"type":"uses","at":[115,12,115,19]}},{"key":"geid_144_930","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onDrop.","attributes":{"type":"uses","at":[116,12,116,18]}},{"key":"geid_144_931","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onDragOver.","attributes":{"type":"uses","at":[117,12,117,22]}},{"key":"geid_144_932","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onDragEnter.","attributes":{"type":"uses","at":[118,12,118,23]}},{"key":"geid_144_933","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onDragLeave.","attributes":{"type":"uses","at":[119,12,119,23]}},{"key":"geid_144_934","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[127,13,127,16]}},{"key":"geid_144_935","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[127,17,127,26]}},{"key":"geid_144_936","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[129,14,129,17]}},{"key":"geid_144_937","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[130,12,130,18]}},{"key":"geid_144_938","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[134,11,134,14]}},{"key":"geid_144_939","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[134,15,134,24]}},{"key":"geid_144_940","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[160,12,160,15]}},{"key":"geid_144_941","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[164,11,164,14]}},{"key":"geid_144_942","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[164,15,164,24]}},{"key":"geid_144_943","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[182,12,182,15]}},{"key":"geid_144_944","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[184,8,184,11]}},{"key":"geid_144_945","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Folder/`Folder.tsx`/Folder.","attributes":{"type":"uses","at":[191,15,191,21]}},{"key":"geid_144_946","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/Chatbar.","attributes":{"type":"defines","at":[28,23,240,1]}},{"key":"geid_144_947","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useCallback().","attributes":{"type":"uses","at":[0,9,0,20]}},{"key":"geid_144_948","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().","attributes":{"type":"uses","at":[0,22,0,32]}},{"key":"geid_144_949","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().","attributes":{"type":"uses","at":[0,22,0,32]}},{"key":"geid_144_950","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().","attributes":{"type":"uses","at":[0,34,0,43]}},{"key":"geid_144_951","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/","attributes":{"type":"uses","at":[0,51,0,58]}},{"key":"geid_144_952","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatFolders.tsx`/ChatFolders.","attributes":{"type":"uses","at":[18,9,18,20]}},{"key":"geid_144_953","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatFolders.tsx`/","attributes":{"type":"uses","at":[18,28,18,54]}},{"key":"geid_144_954","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/ChatbarSettings.","attributes":{"type":"uses","at":[19,9,19,24]}},{"key":"geid_144_955","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/","attributes":{"type":"uses","at":[19,32,19,62]}},{"key":"geid_144_956","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversations.tsx`/Conversations.","attributes":{"type":"uses","at":[20,9,20,22]}},{"key":"geid_144_957","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversations.tsx`/","attributes":{"type":"uses","at":[20,30,20,58]}},{"key":"geid_144_958","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","attributes":{"type":"uses","at":[22,7,22,14]}},{"key":"geid_144_959","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`index.ts`/","attributes":{"type":"uses","at":[22,20,22,32]}},{"key":"geid_144_960","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/ChatbarContext.","attributes":{"type":"uses","at":[23,7,23,21]}},{"key":"geid_144_961","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/","attributes":{"type":"uses","at":[23,27,23,46]}},{"key":"geid_144_962","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.state.tsx`/ChatbarInitialState#","attributes":{"type":"uses","at":[24,9,24,28]}},{"key":"geid_144_963","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.state.tsx`/initialState.","attributes":{"type":"uses","at":[24,30,24,42]}},{"key":"geid_144_964","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.state.tsx`/","attributes":{"type":"uses","at":[24,50,24,67]}},{"key":"geid_144_965","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/","target":"scip-typescript npm @types/uuid 9.0.7 `index.d.ts`/v4.","attributes":{"type":"uses","at":[26,9,26,11]}},{"key":"geid_144_966","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/","target":"scip-typescript npm @types/uuid 9.0.7 `index.d.ts`/v4.","attributes":{"type":"uses","at":[26,15,26,21]}},{"key":"geid_144_967","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/","target":"scip-typescript npm @types/uuid 9.0.7 `index.d.ts`/","attributes":{"type":"uses","at":[26,29,26,35]}},{"key":"geid_144_968","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/Chatbar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.state.tsx`/ChatbarInitialState#","attributes":{"type":"uses","at":[31,47,31,66]}},{"key":"geid_144_969","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/Chatbar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.state.tsx`/ChatbarInitialState#","attributes":{"type":"uses","at":[32,4,32,16]}},{"key":"geid_144_970","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/Chatbar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().","attributes":{"type":"uses","at":[41,6,41,16]}},{"key":"geid_144_971","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/Chatbar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().","attributes":{"type":"uses","at":[41,6,41,16]}},{"key":"geid_144_972","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/Chatbar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useCallback().","attributes":{"type":"uses","at":[48,29,48,40]}},{"key":"geid_144_973","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/Chatbar.","target":"scip-typescript npm @types/uuid 9.0.7 `index.d.ts`/v4.","attributes":{"type":"uses","at":[118,14,118,20]}},{"key":"geid_144_974","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/Chatbar.","target":"scip-typescript npm @types/uuid 9.0.7 `index.d.ts`/v4.","attributes":{"type":"uses","at":[160,16,160,22]}},{"key":"geid_144_975","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/Chatbar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().","attributes":{"type":"uses","at":[188,2,188,11]}},{"key":"geid_144_976","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/Chatbar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/ChatbarContext.","attributes":{"type":"uses","at":[209,5,209,19]}},{"key":"geid_144_977","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/Chatbar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/Context#Provider.","attributes":{"type":"uses","at":[209,20,209,28]}},{"key":"geid_144_978","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/Chatbar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ProviderProps#value.","attributes":{"type":"uses","at":[210,6,210,11]}},{"key":"geid_144_979","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/Chatbar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Sidebar.","attributes":{"type":"uses","at":[221,7,221,14]}},{"key":"geid_144_980","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/Chatbar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#side.","attributes":{"type":"uses","at":[222,8,222,12]}},{"key":"geid_144_981","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/Chatbar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#isOpen.","attributes":{"type":"uses","at":[223,8,223,14]}},{"key":"geid_144_982","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/Chatbar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#addItemButtonTitle.","attributes":{"type":"uses","at":[224,8,224,26]}},{"key":"geid_144_983","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/Chatbar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#itemComponent.","attributes":{"type":"uses","at":[225,8,225,21]}},{"key":"geid_144_984","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/Chatbar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversations.tsx`/Conversations.","attributes":{"type":"uses","at":[225,24,225,37]}},{"key":"geid_144_985","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/Chatbar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversations.tsx`/Props#conversations.","attributes":{"type":"uses","at":[225,38,225,51]}},{"key":"geid_144_986","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/Chatbar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#folderComponent.","attributes":{"type":"uses","at":[226,8,226,23]}},{"key":"geid_144_987","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/Chatbar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatFolders.tsx`/ChatFolders.","attributes":{"type":"uses","at":[226,26,226,37]}},{"key":"geid_144_988","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/Chatbar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatFolders.tsx`/Props#searchTerm.","attributes":{"type":"uses","at":[226,38,226,48]}},{"key":"geid_144_989","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/Chatbar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#items.","attributes":{"type":"uses","at":[227,8,227,13]}},{"key":"geid_144_990","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/Chatbar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#searchTerm.","attributes":{"type":"uses","at":[228,8,228,18]}},{"key":"geid_144_991","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/Chatbar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#handleSearchTerm.","attributes":{"type":"uses","at":[229,8,229,24]}},{"key":"geid_144_992","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/Chatbar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#toggleOpen.","attributes":{"type":"uses","at":[232,8,232,18]}},{"key":"geid_144_993","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/Chatbar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#handleCreateItem.","attributes":{"type":"uses","at":[233,8,233,24]}},{"key":"geid_144_994","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/Chatbar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#handleCreateFolder.","attributes":{"type":"uses","at":[234,8,234,26]}},{"key":"geid_144_995","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/Chatbar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#handleDrop.","attributes":{"type":"uses","at":[235,8,235,18]}},{"key":"geid_144_996","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/Chatbar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`Sidebar.tsx`/Props#footerComponent.","attributes":{"type":"uses","at":[236,8,236,23]}},{"key":"geid_144_997","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/Chatbar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/ChatbarSettings.","attributes":{"type":"uses","at":[236,26,236,41]}},{"key":"geid_144_998","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/Chatbar.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/ChatbarContext.","attributes":{"type":"uses","at":[238,6,238,20]}},{"key":"geid_144_999","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.tsx`/Chatbar.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/Context#Provider.","attributes":{"type":"uses","at":[238,21,238,29]}},{"key":"geid_144_1000","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.state.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.state.tsx`/ChatbarInitialState#","attributes":{"type":"defines","at":[2,0,5,1]}},{"key":"geid_144_1001","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.state.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.state.tsx`/ChatbarInitialState#","attributes":{"type":"uses","at":[7,27,7,46]}},{"key":"geid_144_1002","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/ChatbarContextProps#","attributes":{"type":"defines","at":[10,0,20,1]}},{"key":"geid_144_1003","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/Dispatch#","attributes":{"type":"uses","at":[0,9,0,17]}},{"key":"geid_144_1004","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/createContext().","attributes":{"type":"uses","at":[0,19,0,32]}},{"key":"geid_144_1005","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/","attributes":{"type":"uses","at":[0,40,0,47]}},{"key":"geid_144_1006","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.state.tsx`/ChatbarInitialState#","attributes":{"type":"uses","at":[8,9,8,28]}},{"key":"geid_144_1007","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.state.tsx`/","attributes":{"type":"uses","at":[8,36,8,53]}},{"key":"geid_144_1008","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/ChatbarContextProps#","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.state.tsx`/ChatbarInitialState#","attributes":{"type":"uses","at":[11,9,11,28]}},{"key":"geid_144_1009","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/ChatbarContextProps#","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/Dispatch#","attributes":{"type":"uses","at":[12,12,12,20]}},{"key":"geid_144_1010","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/ChatbarContextProps#","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.state.tsx`/ChatbarInitialState#","attributes":{"type":"uses","at":[12,32,12,51]}},{"key":"geid_144_1011","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/createContext().","attributes":{"type":"uses","at":[22,23,22,36]}},{"key":"geid_144_1012","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/ChatbarContextProps#","attributes":{"type":"uses","at":[22,37,22,56]}},{"key":"geid_144_1013","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/ChatbarContext.","attributes":{"type":"uses","at":[24,15,24,29]}},{"key":"geid_144_1014","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","attributes":{"type":"defines","at":[11,40,123,1]}},{"key":"geid_144_1015","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/Props#","attributes":{"type":"defines","at":[4,0,9,1]}},{"key":"geid_144_1016","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#","attributes":{"type":"uses","at":[0,9,0,11]}},{"key":"geid_144_1017","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#","attributes":{"type":"uses","at":[0,13,0,26]}},{"key":"geid_144_1018","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().","attributes":{"type":"uses","at":[0,28,0,37]}},{"key":"geid_144_1019","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().","attributes":{"type":"uses","at":[0,39,0,45]}},{"key":"geid_144_1020","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[0,47,0,55]}},{"key":"geid_144_1021","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/","attributes":{"type":"uses","at":[0,63,0,70]}},{"key":"geid_144_1022","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#","attributes":{"type":"uses","at":[11,28,11,30]}},{"key":"geid_144_1023","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/Props#","attributes":{"type":"uses","at":[11,31,11,36]}},{"key":"geid_144_1024","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/Props#prompt.","attributes":{"type":"uses","at":[12,2,12,8]}},{"key":"geid_144_1025","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/Props#variables.","attributes":{"type":"uses","at":[13,2,13,11]}},{"key":"geid_144_1026","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/Props#onSubmit.","attributes":{"type":"uses","at":[14,2,14,10]}},{"key":"geid_144_1027","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/Props#onClose.","attributes":{"type":"uses","at":[15,2,15,9]}},{"key":"geid_144_1028","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[17,50,17,58]}},{"key":"geid_144_1029","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().","attributes":{"type":"uses","at":[28,19,28,25]}},{"key":"geid_144_1030","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLDivElement#","attributes":{"type":"uses","at":[28,26,28,40]}},{"key":"geid_144_1031","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().","attributes":{"type":"uses","at":[29,23,29,29]}},{"key":"geid_144_1032","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLTextAreaElement#","attributes":{"type":"uses","at":[29,30,29,49]}},{"key":"geid_144_1033","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#","attributes":{"type":"uses","at":[49,28,49,41]}},{"key":"geid_144_1034","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLDivElement#","attributes":{"type":"uses","at":[49,42,49,56]}},{"key":"geid_144_1035","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#key.","attributes":{"type":"uses","at":[50,10,50,13]}},{"key":"geid_144_1036","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#shiftKey.","attributes":{"type":"uses","at":[50,32,50,40]}},{"key":"geid_144_1037","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/BaseSyntheticEvent#preventDefault().","attributes":{"type":"uses","at":[51,8,51,22]}},{"key":"geid_144_1038","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#key.","attributes":{"type":"uses","at":[53,17,53,20]}},{"key":"geid_144_1039","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().","attributes":{"type":"uses","at":[58,2,58,11]}},{"key":"geid_144_1040","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/MouseEvent#","attributes":{"type":"uses","at":[59,35,59,45]}},{"key":"geid_144_1041","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[60,19,60,26]}},{"key":"geid_144_1042","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[60,40,60,47]}},{"key":"geid_144_1043","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().","attributes":{"type":"uses","at":[72,2,72,11]}},{"key":"geid_144_1044","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[73,21,73,28]}},{"key":"geid_144_1045","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[74,19,74,26]}},{"key":"geid_144_1046","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[79,5,79,8]}},{"key":"geid_144_1047","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[80,6,80,15]}},{"key":"geid_144_1048","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onKeyDown.","attributes":{"type":"uses","at":[81,6,81,15]}},{"key":"geid_144_1049","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[83,7,83,10]}},{"key":"geid_144_1050","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ClassAttributes#ref.","attributes":{"type":"uses","at":[84,8,84,11]}},{"key":"geid_144_1051","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[85,8,85,17]}},{"key":"geid_144_1052","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#role.","attributes":{"type":"uses","at":[86,8,86,12]}},{"key":"geid_144_1053","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[88,9,88,12]}},{"key":"geid_144_1054","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[88,13,88,22]}},{"key":"geid_144_1055","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[90,10,90,13]}},{"key":"geid_144_1056","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[92,9,92,12]}},{"key":"geid_144_1057","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[92,13,92,22]}},{"key":"geid_144_1058","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[94,10,94,13]}},{"key":"geid_144_1059","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[97,11,97,14]}},{"key":"geid_144_1060","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[97,15,97,24]}},{"key":"geid_144_1061","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/Attributes#key.","attributes":{"type":"uses","at":[97,32,97,35]}},{"key":"geid_144_1062","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[98,13,98,16]}},{"key":"geid_144_1063","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[98,17,98,26]}},{"key":"geid_144_1064","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[100,14,100,17]}},{"key":"geid_144_1065","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#textarea.","attributes":{"type":"uses","at":[102,13,102,21]}},{"key":"geid_144_1066","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ClassAttributes#ref.","attributes":{"type":"uses","at":[103,14,103,17]}},{"key":"geid_144_1067","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[104,14,104,23]}},{"key":"geid_144_1068","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#style.","attributes":{"type":"uses","at":[105,14,105,19]}},{"key":"geid_144_1069","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/TextareaHTMLAttributes#placeholder.","attributes":{"type":"uses","at":[106,14,106,25]}},{"key":"geid_144_1070","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/TextareaHTMLAttributes#value.","attributes":{"type":"uses","at":[107,14,107,19]}},{"key":"geid_144_1071","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/TextareaHTMLAttributes#onChange.","attributes":{"type":"uses","at":[108,14,108,22]}},{"key":"geid_144_1072","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ChangeEvent#target.","attributes":{"type":"uses","at":[108,53,108,59]}},{"key":"geid_144_1073","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/TextareaHTMLAttributes#rows.","attributes":{"type":"uses","at":[109,14,109,18]}},{"key":"geid_144_1074","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[111,12,111,15]}},{"key":"geid_144_1075","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[114,9,114,15]}},{"key":"geid_144_1076","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[115,10,115,19]}},{"key":"geid_144_1077","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onClick.","attributes":{"type":"uses","at":[116,10,116,17]}},{"key":"geid_144_1078","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[119,10,119,16]}},{"key":"geid_144_1079","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[120,8,120,11]}},{"key":"geid_144_1080","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[121,6,121,9]}},{"key":"geid_144_1081","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","attributes":{"type":"defines","at":[13,44,66,1]}},{"key":"geid_144_1082","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/Props#","attributes":{"type":"defines","at":[8,0,11,1]}},{"key":"geid_144_1083","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#","attributes":{"type":"uses","at":[0,9,0,11]}},{"key":"geid_144_1084","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().","attributes":{"type":"uses","at":[0,13,0,23]}},{"key":"geid_144_1085","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().","attributes":{"type":"uses","at":[0,13,0,23]}},{"key":"geid_144_1086","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[0,25,0,33]}},{"key":"geid_144_1087","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/","attributes":{"type":"uses","at":[0,41,0,48]}},{"key":"geid_144_1088","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#","attributes":{"type":"uses","at":[13,32,13,34]}},{"key":"geid_144_1089","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/Props#","attributes":{"type":"uses","at":[13,35,13,40]}},{"key":"geid_144_1090","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/Props#label.","attributes":{"type":"uses","at":[14,2,14,7]}},{"key":"geid_144_1091","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/Props#onChangeTemperature.","attributes":{"type":"uses","at":[15,2,15,21]}},{"key":"geid_144_1092","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().","attributes":{"type":"uses","at":[19,6,19,16]}},{"key":"geid_144_1093","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().","attributes":{"type":"uses","at":[19,6,19,16]}},{"key":"geid_144_1094","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[21,40,21,48]}},{"key":"geid_144_1095","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ChangeEvent#","attributes":{"type":"uses","at":[25,37,25,48]}},{"key":"geid_144_1096","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLInputElement#","attributes":{"type":"uses","at":[25,49,25,65]}},{"key":"geid_144_1097","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ChangeEvent#target.","attributes":{"type":"uses","at":[26,38,26,44]}},{"key":"geid_144_1098","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[32,5,32,8]}},{"key":"geid_144_1099","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[32,9,32,18]}},{"key":"geid_144_1100","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#label.","attributes":{"type":"uses","at":[33,7,33,12]}},{"key":"geid_144_1101","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[33,13,33,22]}},{"key":"geid_144_1102","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#label.","attributes":{"type":"uses","at":[35,8,35,13]}},{"key":"geid_144_1103","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#span.","attributes":{"type":"uses","at":[36,7,36,11]}},{"key":"geid_144_1104","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[36,12,36,21]}},{"key":"geid_144_1105","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#span.","attributes":{"type":"uses","at":[40,8,40,12]}},{"key":"geid_144_1106","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#span.","attributes":{"type":"uses","at":[41,7,41,11]}},{"key":"geid_144_1107","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[41,12,41,21]}},{"key":"geid_144_1108","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#span.","attributes":{"type":"uses","at":[43,8,43,12]}},{"key":"geid_144_1109","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#input.","attributes":{"type":"uses","at":[44,7,44,12]}},{"key":"geid_144_1110","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[45,8,45,17]}},{"key":"geid_144_1111","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#type.","attributes":{"type":"uses","at":[46,8,46,12]}},{"key":"geid_144_1112","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#min.","attributes":{"type":"uses","at":[47,8,47,11]}},{"key":"geid_144_1113","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#max.","attributes":{"type":"uses","at":[48,8,48,11]}},{"key":"geid_144_1114","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#step.","attributes":{"type":"uses","at":[49,8,49,12]}},{"key":"geid_144_1115","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#value.","attributes":{"type":"uses","at":[50,8,50,13]}},{"key":"geid_144_1116","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#onChange.","attributes":{"type":"uses","at":[51,8,51,16]}},{"key":"geid_144_1117","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#ul.","attributes":{"type":"uses","at":[53,7,53,9]}},{"key":"geid_144_1118","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[53,10,53,19]}},{"key":"geid_144_1119","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#li.","attributes":{"type":"uses","at":[54,9,54,11]}},{"key":"geid_144_1120","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[54,12,54,21]}},{"key":"geid_144_1121","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#span.","attributes":{"type":"uses","at":[55,11,55,15]}},{"key":"geid_144_1122","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[55,16,55,25]}},{"key":"geid_144_1123","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#span.","attributes":{"type":"uses","at":[55,53,55,57]}},{"key":"geid_144_1124","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#li.","attributes":{"type":"uses","at":[56,10,56,12]}},{"key":"geid_144_1125","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#li.","attributes":{"type":"uses","at":[57,9,57,11]}},{"key":"geid_144_1126","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[57,12,57,21]}},{"key":"geid_144_1127","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#span.","attributes":{"type":"uses","at":[58,11,58,15]}},{"key":"geid_144_1128","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[58,16,58,25]}},{"key":"geid_144_1129","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#span.","attributes":{"type":"uses","at":[58,53,58,57]}},{"key":"geid_144_1130","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#li.","attributes":{"type":"uses","at":[59,10,59,12]}},{"key":"geid_144_1131","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#li.","attributes":{"type":"uses","at":[60,9,60,11]}},{"key":"geid_144_1132","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[60,12,60,21]}},{"key":"geid_144_1133","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#span.","attributes":{"type":"uses","at":[61,11,61,15]}},{"key":"geid_144_1134","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[61,16,61,25]}},{"key":"geid_144_1135","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#span.","attributes":{"type":"uses","at":[61,54,61,58]}},{"key":"geid_144_1136","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#li.","attributes":{"type":"uses","at":[62,10,62,12]}},{"key":"geid_144_1137","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#ul.","attributes":{"type":"uses","at":[63,8,63,10]}},{"key":"geid_144_1138","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[64,6,64,9]}},{"key":"geid_144_1139","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","attributes":{"type":"defines","at":[25,39,242,1]}},{"key":"geid_144_1140","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/Props#","attributes":{"type":"defines","at":[19,0,23,1]}},{"key":"geid_144_1141","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#","attributes":{"type":"uses","at":[1,2,1,4]}},{"key":"geid_144_1142","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#","attributes":{"type":"uses","at":[2,2,2,15]}},{"key":"geid_144_1143","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useCallback().","attributes":{"type":"uses","at":[3,2,3,13]}},{"key":"geid_144_1144","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().","attributes":{"type":"uses","at":[4,2,4,11]}},{"key":"geid_144_1145","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().","attributes":{"type":"uses","at":[5,2,5,8]}},{"key":"geid_144_1146","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[6,2,6,10]}},{"key":"geid_144_1147","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/","attributes":{"type":"uses","at":[7,7,7,14]}},{"key":"geid_144_1148","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/PromptList.","attributes":{"type":"uses","at":[16,9,16,19]}},{"key":"geid_144_1149","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/","attributes":{"type":"uses","at":[16,27,16,41]}},{"key":"geid_144_1150","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","attributes":{"type":"uses","at":[17,9,17,22]}},{"key":"geid_144_1151","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/","attributes":{"type":"uses","at":[17,30,17,47]}},{"key":"geid_144_1152","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#","attributes":{"type":"uses","at":[25,27,25,29]}},{"key":"geid_144_1153","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/Props#","attributes":{"type":"uses","at":[25,30,25,35]}},{"key":"geid_144_1154","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/Props#conversation.","attributes":{"type":"uses","at":[26,2,26,14]}},{"key":"geid_144_1155","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/Props#prompts.","attributes":{"type":"uses","at":[27,2,27,9]}},{"key":"geid_144_1156","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/Props#onChangePrompt.","attributes":{"type":"uses","at":[28,2,28,16]}},{"key":"geid_144_1157","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[32,28,32,36]}},{"key":"geid_144_1158","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[33,52,33,60]}},{"key":"geid_144_1159","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[34,46,34,54]}},{"key":"geid_144_1160","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[35,50,35,58]}},{"key":"geid_144_1161","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[36,36,36,44]}},{"key":"geid_144_1162","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[37,46,37,54]}},{"key":"geid_144_1163","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().","attributes":{"type":"uses","at":[39,22,39,28]}},{"key":"geid_144_1164","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLTextAreaElement#","attributes":{"type":"uses","at":[39,29,39,48]}},{"key":"geid_144_1165","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().","attributes":{"type":"uses","at":[40,24,40,30]}},{"key":"geid_144_1166","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLUListElement#","attributes":{"type":"uses","at":[40,31,40,47]}},{"key":"geid_144_1167","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ChangeEvent#","attributes":{"type":"uses","at":[46,33,46,44]}},{"key":"geid_144_1168","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLTextAreaElement#","attributes":{"type":"uses","at":[46,45,46,64]}},{"key":"geid_144_1169","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ChangeEvent#target.","attributes":{"type":"uses","at":[47,20,47,26]}},{"key":"geid_144_1170","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useCallback().","attributes":{"type":"uses","at":[90,37,90,48]}},{"key":"geid_144_1171","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[127,35,127,42]}},{"key":"geid_144_1172","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[128,18,128,25]}},{"key":"geid_144_1173","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#","attributes":{"type":"uses","at":[132,28,132,41]}},{"key":"geid_144_1174","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLTextAreaElement#","attributes":{"type":"uses","at":[132,42,132,61]}},{"key":"geid_144_1175","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#key.","attributes":{"type":"uses","at":[134,12,134,15]}},{"key":"geid_144_1176","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/BaseSyntheticEvent#preventDefault().","attributes":{"type":"uses","at":[135,10,135,24]}},{"key":"geid_144_1177","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#key.","attributes":{"type":"uses","at":[139,19,139,22]}},{"key":"geid_144_1178","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/BaseSyntheticEvent#preventDefault().","attributes":{"type":"uses","at":[140,10,140,24]}},{"key":"geid_144_1179","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#key.","attributes":{"type":"uses","at":[144,19,144,22]}},{"key":"geid_144_1180","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/BaseSyntheticEvent#preventDefault().","attributes":{"type":"uses","at":[145,10,145,24]}},{"key":"geid_144_1181","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#key.","attributes":{"type":"uses","at":[149,19,149,22]}},{"key":"geid_144_1182","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/BaseSyntheticEvent#preventDefault().","attributes":{"type":"uses","at":[150,10,150,24]}},{"key":"geid_144_1183","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#key.","attributes":{"type":"uses","at":[152,19,152,22]}},{"key":"geid_144_1184","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/BaseSyntheticEvent#preventDefault().","attributes":{"type":"uses","at":[153,10,153,24]}},{"key":"geid_144_1185","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().","attributes":{"type":"uses","at":[161,2,161,11]}},{"key":"geid_144_1186","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[162,35,162,42]}},{"key":"geid_144_1187","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[163,18,163,25]}},{"key":"geid_144_1188","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[164,18,164,25]}},{"key":"geid_144_1189","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[164,56,164,63]}},{"key":"geid_144_1190","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().","attributes":{"type":"uses","at":[168,2,168,11]}},{"key":"geid_144_1191","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().","attributes":{"type":"uses","at":[176,2,176,11]}},{"key":"geid_144_1192","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/MouseEvent#","attributes":{"type":"uses","at":[177,35,177,45]}},{"key":"geid_144_1193","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[179,22,179,29]}},{"key":"geid_144_1194","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[180,23,180,30]}},{"key":"geid_144_1195","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[194,5,194,8]}},{"key":"geid_144_1196","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[194,9,194,18]}},{"key":"geid_144_1197","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#label.","attributes":{"type":"uses","at":[195,7,195,12]}},{"key":"geid_144_1198","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[195,13,195,22]}},{"key":"geid_144_1199","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#label.","attributes":{"type":"uses","at":[197,8,197,13]}},{"key":"geid_144_1200","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#textarea.","attributes":{"type":"uses","at":[198,7,198,15]}},{"key":"geid_144_1201","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ClassAttributes#ref.","attributes":{"type":"uses","at":[199,8,199,11]}},{"key":"geid_144_1202","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[200,8,200,17]}},{"key":"geid_144_1203","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#style.","attributes":{"type":"uses","at":[201,8,201,13]}},{"key":"geid_144_1204","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[203,34,203,41]}},{"key":"geid_144_1205","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[206,24,206,31]}},{"key":"geid_144_1206","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[206,47,206,54]}},{"key":"geid_144_1207","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/TextareaHTMLAttributes#placeholder.","attributes":{"type":"uses","at":[211,8,211,19]}},{"key":"geid_144_1208","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/TextareaHTMLAttributes#value.","attributes":{"type":"uses","at":[214,8,214,13]}},{"key":"geid_144_1209","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/TextareaHTMLAttributes#rows.","attributes":{"type":"uses","at":[215,8,215,12]}},{"key":"geid_144_1210","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/TextareaHTMLAttributes#onChange.","attributes":{"type":"uses","at":[216,8,216,16]}},{"key":"geid_144_1211","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onKeyDown.","attributes":{"type":"uses","at":[217,8,217,17]}},{"key":"geid_144_1212","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[221,9,221,12]}},{"key":"geid_144_1213","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/PromptList.","attributes":{"type":"uses","at":[222,11,222,21]}},{"key":"geid_144_1214","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/Props#activePromptIndex.","attributes":{"type":"uses","at":[223,12,223,29]}},{"key":"geid_144_1215","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/Props#prompts.","attributes":{"type":"uses","at":[224,12,224,19]}},{"key":"geid_144_1216","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/Props#onSelect.","attributes":{"type":"uses","at":[225,12,225,20]}},{"key":"geid_144_1217","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/Props#onMouseOver.","attributes":{"type":"uses","at":[226,12,226,23]}},{"key":"geid_144_1218","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/Props#promptListRef.","attributes":{"type":"uses","at":[227,12,227,25]}},{"key":"geid_144_1219","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[229,10,229,13]}},{"key":"geid_144_1220","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","attributes":{"type":"uses","at":[233,9,233,22]}},{"key":"geid_144_1221","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/Props#prompt.","attributes":{"type":"uses","at":[234,10,234,16]}},{"key":"geid_144_1222","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/Props#variables.","attributes":{"type":"uses","at":[235,10,235,19]}},{"key":"geid_144_1223","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/Props#onSubmit.","attributes":{"type":"uses","at":[236,10,236,18]}},{"key":"geid_144_1224","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/Props#onClose.","attributes":{"type":"uses","at":[237,10,237,17]}},{"key":"geid_144_1225","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[240,6,240,9]}},{"key":"geid_144_1226","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Regenerate.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Regenerate.tsx`/Regenerate.","attributes":{"type":"defines","at":[9,37,25,1]}},{"key":"geid_144_1227","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Regenerate.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Regenerate.tsx`/Props#","attributes":{"type":"defines","at":[5,0,7,1]}},{"key":"geid_144_1228","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Regenerate.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#","attributes":{"type":"uses","at":[1,9,1,11]}},{"key":"geid_144_1229","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Regenerate.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/","attributes":{"type":"uses","at":[1,19,1,26]}},{"key":"geid_144_1230","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Regenerate.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#","attributes":{"type":"uses","at":[9,25,9,27]}},{"key":"geid_144_1231","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Regenerate.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Regenerate.tsx`/Props#","attributes":{"type":"uses","at":[9,28,9,33]}},{"key":"geid_144_1232","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Regenerate.tsx`/Regenerate.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Regenerate.tsx`/Props#onRegenerate.","attributes":{"type":"uses","at":[9,40,9,52]}},{"key":"geid_144_1233","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Regenerate.tsx`/Regenerate.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[12,5,12,8]}},{"key":"geid_144_1234","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Regenerate.tsx`/Regenerate.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[12,9,12,18]}},{"key":"geid_144_1235","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Regenerate.tsx`/Regenerate.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[13,7,13,10]}},{"key":"geid_144_1236","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Regenerate.tsx`/Regenerate.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[13,11,13,20]}},{"key":"geid_144_1237","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Regenerate.tsx`/Regenerate.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[15,8,15,11]}},{"key":"geid_144_1238","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Regenerate.tsx`/Regenerate.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[16,7,16,13]}},{"key":"geid_144_1239","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Regenerate.tsx`/Regenerate.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[17,8,17,17]}},{"key":"geid_144_1240","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Regenerate.tsx`/Regenerate.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onClick.","attributes":{"type":"uses","at":[18,8,18,15]}},{"key":"geid_144_1241","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Regenerate.tsx`/Regenerate.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[21,9,21,12]}},{"key":"geid_144_1242","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Regenerate.tsx`/Regenerate.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[21,41,21,44]}},{"key":"geid_144_1243","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Regenerate.tsx`/Regenerate.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[22,8,22,14]}},{"key":"geid_144_1244","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Regenerate.tsx`/Regenerate.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[23,6,23,9]}},{"key":"geid_144_1245","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/PromptList.","attributes":{"type":"defines","at":[12,37,44,1]}},{"key":"geid_144_1246","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/Props#","attributes":{"type":"defines","at":[4,0,10,1]}},{"key":"geid_144_1247","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#","attributes":{"type":"uses","at":[0,9,0,11]}},{"key":"geid_144_1248","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#","attributes":{"type":"uses","at":[0,13,0,29]}},{"key":"geid_144_1249","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/","attributes":{"type":"uses","at":[0,37,0,44]}},{"key":"geid_144_1250","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/Props#","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#","attributes":{"type":"uses","at":[9,17,9,33]}},{"key":"geid_144_1251","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/Props#","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLUListElement#","attributes":{"type":"uses","at":[9,34,9,50]}},{"key":"geid_144_1252","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#","attributes":{"type":"uses","at":[12,25,12,27]}},{"key":"geid_144_1253","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/Props#","attributes":{"type":"uses","at":[12,28,12,33]}},{"key":"geid_144_1254","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/PromptList.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/Props#prompts.","attributes":{"type":"uses","at":[13,2,13,9]}},{"key":"geid_144_1255","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/PromptList.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/Props#activePromptIndex.","attributes":{"type":"uses","at":[14,2,14,19]}},{"key":"geid_144_1256","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/PromptList.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/Props#onSelect.","attributes":{"type":"uses","at":[15,2,15,10]}},{"key":"geid_144_1257","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/PromptList.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/Props#onMouseOver.","attributes":{"type":"uses","at":[16,2,16,13]}},{"key":"geid_144_1258","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/PromptList.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/Props#promptListRef.","attributes":{"type":"uses","at":[17,2,17,15]}},{"key":"geid_144_1259","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/PromptList.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#ul.","attributes":{"type":"uses","at":[20,5,20,7]}},{"key":"geid_144_1260","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/PromptList.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ClassAttributes#ref.","attributes":{"type":"uses","at":[21,6,21,9]}},{"key":"geid_144_1261","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/PromptList.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[22,6,22,15]}},{"key":"geid_144_1262","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/PromptList.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#li.","attributes":{"type":"uses","at":[25,9,25,11]}},{"key":"geid_144_1263","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/PromptList.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/Attributes#key.","attributes":{"type":"uses","at":[26,10,26,13]}},{"key":"geid_144_1264","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/PromptList.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[27,10,27,19]}},{"key":"geid_144_1265","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/PromptList.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onClick.","attributes":{"type":"uses","at":[32,10,32,17]}},{"key":"geid_144_1266","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/PromptList.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/BaseSyntheticEvent#preventDefault().","attributes":{"type":"uses","at":[33,14,33,28]}},{"key":"geid_144_1267","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/PromptList.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/BaseSyntheticEvent#stopPropagation().","attributes":{"type":"uses","at":[34,14,34,29]}},{"key":"geid_144_1268","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/PromptList.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onMouseEnter.","attributes":{"type":"uses","at":[37,10,37,22]}},{"key":"geid_144_1269","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/PromptList.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#li.","attributes":{"type":"uses","at":[40,10,40,12]}},{"key":"geid_144_1270","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/PromptList.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#ul.","attributes":{"type":"uses","at":[42,6,42,8]}},{"key":"geid_144_1271","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","attributes":{"type":"defines","at":[12,39,102,1]}},{"key":"geid_144_1272","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/Props#","attributes":{"type":"defines","at":[6,0,10,1]}},{"key":"geid_144_1273","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#","attributes":{"type":"uses","at":[0,9,0,11]}},{"key":"geid_144_1274","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().","attributes":{"type":"uses","at":[0,13,0,22]}},{"key":"geid_144_1275","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().","attributes":{"type":"uses","at":[0,24,0,30]}},{"key":"geid_144_1276","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/","attributes":{"type":"uses","at":[0,38,0,45]}},{"key":"geid_144_1277","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/Props#","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#","attributes":{"type":"uses","at":[9,23,9,36]}},{"key":"geid_144_1278","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/Props#","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLSelectElement#","attributes":{"type":"uses","at":[9,37,9,54]}},{"key":"geid_144_1279","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#","attributes":{"type":"uses","at":[12,27,12,29]}},{"key":"geid_144_1280","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/Props#","attributes":{"type":"uses","at":[12,30,12,35]}},{"key":"geid_144_1281","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/Props#plugin.","attributes":{"type":"uses","at":[13,2,13,8]}},{"key":"geid_144_1282","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/Props#onPluginChange.","attributes":{"type":"uses","at":[14,2,14,16]}},{"key":"geid_144_1283","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/Props#onKeyDown.","attributes":{"type":"uses","at":[15,2,15,11]}},{"key":"geid_144_1284","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().","attributes":{"type":"uses","at":[19,20,19,26]}},{"key":"geid_144_1285","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLSelectElement#","attributes":{"type":"uses","at":[19,27,19,44]}},{"key":"geid_144_1286","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#","attributes":{"type":"uses","at":[21,34,21,47]}},{"key":"geid_144_1287","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLSelectElement#","attributes":{"type":"uses","at":[21,48,21,65]}},{"key":"geid_144_1288","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[22,36,22,43]}},{"key":"geid_144_1289","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#key.","attributes":{"type":"uses","at":[25,10,25,13]}},{"key":"geid_144_1290","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#metaKey.","attributes":{"type":"uses","at":[25,27,25,34]}},{"key":"geid_144_1291","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/BaseSyntheticEvent#preventDefault().","attributes":{"type":"uses","at":[26,8,26,22]}},{"key":"geid_144_1292","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/Event#","attributes":{"type":"uses","at":[30,40,30,45]}},{"key":"geid_144_1293","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`dom-events.d.ts`/global/Event#","attributes":{"type":"uses","at":[30,40,30,45]}},{"key":"geid_144_1294","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`dom-events.d.ts`/global/Event.","attributes":{"type":"uses","at":[30,40,30,45]}},{"key":"geid_144_1295","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#key.","attributes":{"type":"uses","at":[32,17,32,20]}},{"key":"geid_144_1296","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#shiftKey.","attributes":{"type":"uses","at":[32,34,32,42]}},{"key":"geid_144_1297","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#metaKey.","attributes":{"type":"uses","at":[32,48,32,55]}},{"key":"geid_144_1298","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/BaseSyntheticEvent#preventDefault().","attributes":{"type":"uses","at":[33,8,33,22]}},{"key":"geid_144_1299","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/Event#","attributes":{"type":"uses","at":[37,40,37,45]}},{"key":"geid_144_1300","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`dom-events.d.ts`/global/Event#","attributes":{"type":"uses","at":[37,40,37,45]}},{"key":"geid_144_1301","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`dom-events.d.ts`/global/Event.","attributes":{"type":"uses","at":[37,40,37,45]}},{"key":"geid_144_1302","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#key.","attributes":{"type":"uses","at":[39,17,39,20]}},{"key":"geid_144_1303","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/BaseSyntheticEvent#preventDefault().","attributes":{"type":"uses","at":[40,8,40,22]}},{"key":"geid_144_1304","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/Event#","attributes":{"type":"uses","at":[42,40,42,45]}},{"key":"geid_144_1305","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`dom-events.d.ts`/global/Event#","attributes":{"type":"uses","at":[42,40,42,45]}},{"key":"geid_144_1306","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`dom-events.d.ts`/global/Event.","attributes":{"type":"uses","at":[42,40,42,45]}},{"key":"geid_144_1307","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().","attributes":{"type":"uses","at":[56,2,56,11]}},{"key":"geid_144_1308","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[57,18,57,25]}},{"key":"geid_144_1309","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[58,16,58,23]}},{"key":"geid_144_1310","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[63,5,63,8]}},{"key":"geid_144_1311","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[63,9,63,18]}},{"key":"geid_144_1312","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[64,7,64,10]}},{"key":"geid_144_1313","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[64,11,64,20]}},{"key":"geid_144_1314","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#select.","attributes":{"type":"uses","at":[65,9,65,15]}},{"key":"geid_144_1315","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ClassAttributes#ref.","attributes":{"type":"uses","at":[66,10,66,13]}},{"key":"geid_144_1316","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[67,10,67,19]}},{"key":"geid_144_1317","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#placeholder.","attributes":{"type":"uses","at":[68,10,68,21]}},{"key":"geid_144_1318","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SelectHTMLAttributes#value.","attributes":{"type":"uses","at":[69,10,69,15]}},{"key":"geid_144_1319","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SelectHTMLAttributes#onChange.","attributes":{"type":"uses","at":[70,10,70,18]}},{"key":"geid_144_1320","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ChangeEvent#target.","attributes":{"type":"uses","at":[73,44,73,50]}},{"key":"geid_144_1321","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onKeyDown.","attributes":{"type":"uses","at":[77,10,77,19]}},{"key":"geid_144_1322","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#option.","attributes":{"type":"uses","at":[81,11,81,17]}},{"key":"geid_144_1323","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/Attributes#key.","attributes":{"type":"uses","at":[82,12,82,15]}},{"key":"geid_144_1324","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/OptionHTMLAttributes#value.","attributes":{"type":"uses","at":[83,12,83,17]}},{"key":"geid_144_1325","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[84,12,84,21]}},{"key":"geid_144_1326","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#option.","attributes":{"type":"uses","at":[87,12,87,18]}},{"key":"geid_144_1327","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#option.","attributes":{"type":"uses","at":[90,13,90,19]}},{"key":"geid_144_1328","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/Attributes#key.","attributes":{"type":"uses","at":[91,14,91,17]}},{"key":"geid_144_1329","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/OptionHTMLAttributes#value.","attributes":{"type":"uses","at":[92,14,92,19]}},{"key":"geid_144_1330","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[93,14,93,23]}},{"key":"geid_144_1331","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#option.","attributes":{"type":"uses","at":[96,14,96,20]}},{"key":"geid_144_1332","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#select.","attributes":{"type":"uses","at":[98,10,98,16]}},{"key":"geid_144_1333","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[99,8,99,11]}},{"key":"geid_144_1334","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[100,6,100,9]}},{"key":"geid_144_1335","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ModelSelect.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ModelSelect.tsx`/ModelSelect.","attributes":{"type":"defines","at":[9,27,65,1]}},{"key":"geid_144_1336","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ModelSelect.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().","attributes":{"type":"uses","at":[1,9,1,19]}},{"key":"geid_144_1337","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ModelSelect.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().","attributes":{"type":"uses","at":[1,9,1,19]}},{"key":"geid_144_1338","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ModelSelect.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/","attributes":{"type":"uses","at":[1,27,1,34]}},{"key":"geid_144_1339","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ModelSelect.tsx`/ModelSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().","attributes":{"type":"uses","at":[16,6,16,16]}},{"key":"geid_144_1340","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ModelSelect.tsx`/ModelSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().","attributes":{"type":"uses","at":[16,6,16,16]}},{"key":"geid_144_1341","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ModelSelect.tsx`/ModelSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ChangeEvent#","attributes":{"type":"uses","at":[18,33,18,44]}},{"key":"geid_144_1342","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ModelSelect.tsx`/ModelSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLSelectElement#","attributes":{"type":"uses","at":[18,45,18,62]}},{"key":"geid_144_1343","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ModelSelect.tsx`/ModelSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ChangeEvent#target.","attributes":{"type":"uses","at":[23,36,23,42]}},{"key":"geid_144_1344","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ModelSelect.tsx`/ModelSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[29,5,29,8]}},{"key":"geid_144_1345","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ModelSelect.tsx`/ModelSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[29,9,29,18]}},{"key":"geid_144_1346","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ModelSelect.tsx`/ModelSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#label.","attributes":{"type":"uses","at":[30,7,30,12]}},{"key":"geid_144_1347","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ModelSelect.tsx`/ModelSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[30,13,30,22]}},{"key":"geid_144_1348","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ModelSelect.tsx`/ModelSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#label.","attributes":{"type":"uses","at":[32,8,32,13]}},{"key":"geid_144_1349","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ModelSelect.tsx`/ModelSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[33,7,33,10]}},{"key":"geid_144_1350","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ModelSelect.tsx`/ModelSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[33,11,33,20]}},{"key":"geid_144_1351","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ModelSelect.tsx`/ModelSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#select.","attributes":{"type":"uses","at":[34,9,34,15]}},{"key":"geid_144_1352","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ModelSelect.tsx`/ModelSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[35,10,35,19]}},{"key":"geid_144_1353","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ModelSelect.tsx`/ModelSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#placeholder.","attributes":{"type":"uses","at":[36,10,36,21]}},{"key":"geid_144_1354","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ModelSelect.tsx`/ModelSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SelectHTMLAttributes#value.","attributes":{"type":"uses","at":[37,10,37,15]}},{"key":"geid_144_1355","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ModelSelect.tsx`/ModelSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/SelectHTMLAttributes#onChange.","attributes":{"type":"uses","at":[38,10,38,18]}},{"key":"geid_144_1356","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ModelSelect.tsx`/ModelSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#option.","attributes":{"type":"uses","at":[41,13,41,19]}},{"key":"geid_144_1357","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ModelSelect.tsx`/ModelSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/Attributes#key.","attributes":{"type":"uses","at":[42,14,42,17]}},{"key":"geid_144_1358","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ModelSelect.tsx`/ModelSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/OptionHTMLAttributes#value.","attributes":{"type":"uses","at":[43,14,43,19]}},{"key":"geid_144_1359","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ModelSelect.tsx`/ModelSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[44,14,44,23]}},{"key":"geid_144_1360","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ModelSelect.tsx`/ModelSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#option.","attributes":{"type":"uses","at":[49,14,49,20]}},{"key":"geid_144_1361","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ModelSelect.tsx`/ModelSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#select.","attributes":{"type":"uses","at":[51,10,51,16]}},{"key":"geid_144_1362","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ModelSelect.tsx`/ModelSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[52,8,52,11]}},{"key":"geid_144_1363","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ModelSelect.tsx`/ModelSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[53,7,53,10]}},{"key":"geid_144_1364","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ModelSelect.tsx`/ModelSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[53,11,53,20]}},{"key":"geid_144_1365","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ModelSelect.tsx`/ModelSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#a.","attributes":{"type":"uses","at":[54,9,54,10]}},{"key":"geid_144_1366","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ModelSelect.tsx`/ModelSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/AnchorHTMLAttributes#href.","attributes":{"type":"uses","at":[55,10,55,14]}},{"key":"geid_144_1367","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ModelSelect.tsx`/ModelSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/AnchorHTMLAttributes#target.","attributes":{"type":"uses","at":[56,10,56,16]}},{"key":"geid_144_1368","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ModelSelect.tsx`/ModelSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[57,10,57,19]}},{"key":"geid_144_1369","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ModelSelect.tsx`/ModelSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#a.","attributes":{"type":"uses","at":[61,10,61,11]}},{"key":"geid_144_1370","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ModelSelect.tsx`/ModelSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[62,8,62,11]}},{"key":"geid_144_1371","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ModelSelect.tsx`/ModelSelect.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[63,6,63,9]}},{"key":"geid_144_1372","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`MemoizedChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#","attributes":{"type":"uses","at":[0,9,0,11]}},{"key":"geid_144_1373","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`MemoizedChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/memo().","attributes":{"type":"uses","at":[0,13,0,17]}},{"key":"geid_144_1374","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`MemoizedChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/","attributes":{"type":"uses","at":[0,25,0,32]}},{"key":"geid_144_1375","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`MemoizedChatMessage.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/ChatMessage.","attributes":{"type":"uses","at":[1,9,1,20]}},{"key":"geid_144_1376","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`MemoizedChatMessage.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/Props#","attributes":{"type":"uses","at":[1,22,1,27]}},{"key":"geid_144_1377","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`MemoizedChatMessage.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","attributes":{"type":"uses","at":[1,35,1,50]}},{"key":"geid_144_1378","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`MemoizedChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#","attributes":{"type":"uses","at":[3,34,3,36]}},{"key":"geid_144_1379","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`MemoizedChatMessage.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/Props#","attributes":{"type":"uses","at":[3,37,3,42]}},{"key":"geid_144_1380","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`MemoizedChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/memo().","attributes":{"type":"uses","at":[3,46,3,50]}},{"key":"geid_144_1381","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`MemoizedChatMessage.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/ChatMessage.","attributes":{"type":"uses","at":[4,4,4,15]}},{"key":"geid_144_1382","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ErrorMessageDiv.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ErrorMessageDiv.tsx`/ErrorMessageDiv.","attributes":{"type":"defines","at":[9,42,27,1]}},{"key":"geid_144_1383","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ErrorMessageDiv.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ErrorMessageDiv.tsx`/Props#","attributes":{"type":"defines","at":[5,0,7,1]}},{"key":"geid_144_1384","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ErrorMessageDiv.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#","attributes":{"type":"uses","at":[1,9,1,11]}},{"key":"geid_144_1385","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ErrorMessageDiv.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/","attributes":{"type":"uses","at":[1,19,1,26]}},{"key":"geid_144_1386","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ErrorMessageDiv.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#","attributes":{"type":"uses","at":[9,30,9,32]}},{"key":"geid_144_1387","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ErrorMessageDiv.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ErrorMessageDiv.tsx`/Props#","attributes":{"type":"uses","at":[9,33,9,38]}},{"key":"geid_144_1388","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ErrorMessageDiv.tsx`/ErrorMessageDiv.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ErrorMessageDiv.tsx`/Props#error.","attributes":{"type":"uses","at":[9,45,9,50]}},{"key":"geid_144_1389","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ErrorMessageDiv.tsx`/ErrorMessageDiv.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[11,5,11,8]}},{"key":"geid_144_1390","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ErrorMessageDiv.tsx`/ErrorMessageDiv.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[11,9,11,18]}},{"key":"geid_144_1391","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ErrorMessageDiv.tsx`/ErrorMessageDiv.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[12,7,12,10]}},{"key":"geid_144_1392","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ErrorMessageDiv.tsx`/ErrorMessageDiv.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[12,11,12,20]}},{"key":"geid_144_1393","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ErrorMessageDiv.tsx`/ErrorMessageDiv.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[14,8,14,11]}},{"key":"geid_144_1394","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ErrorMessageDiv.tsx`/ErrorMessageDiv.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[15,7,15,10]}},{"key":"geid_144_1395","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ErrorMessageDiv.tsx`/ErrorMessageDiv.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[15,11,15,20]}},{"key":"geid_144_1396","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ErrorMessageDiv.tsx`/ErrorMessageDiv.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[15,64,15,67]}},{"key":"geid_144_1397","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ErrorMessageDiv.tsx`/ErrorMessageDiv.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[17,9,17,12]}},{"key":"geid_144_1398","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ErrorMessageDiv.tsx`/ErrorMessageDiv.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/Attributes#key.","attributes":{"type":"uses","at":[17,13,17,16]}},{"key":"geid_144_1399","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ErrorMessageDiv.tsx`/ErrorMessageDiv.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[17,25,17,34]}},{"key":"geid_144_1400","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ErrorMessageDiv.tsx`/ErrorMessageDiv.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[20,10,20,13]}},{"key":"geid_144_1401","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ErrorMessageDiv.tsx`/ErrorMessageDiv.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[22,7,22,10]}},{"key":"geid_144_1402","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ErrorMessageDiv.tsx`/ErrorMessageDiv.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[22,11,22,20]}},{"key":"geid_144_1403","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ErrorMessageDiv.tsx`/ErrorMessageDiv.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#i.","attributes":{"type":"uses","at":[23,23,23,24]}},{"key":"geid_144_1404","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ErrorMessageDiv.tsx`/ErrorMessageDiv.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#i.","attributes":{"type":"uses","at":[23,45,23,46]}},{"key":"geid_144_1405","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ErrorMessageDiv.tsx`/ErrorMessageDiv.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[24,8,24,11]}},{"key":"geid_144_1406","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ErrorMessageDiv.tsx`/ErrorMessageDiv.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[25,6,25,9]}},{"key":"geid_144_1407","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/Props#","attributes":{"type":"defines","at":[25,0,29,1]}},{"key":"geid_144_1408","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#","attributes":{"type":"uses","at":[8,9,8,11]}},{"key":"geid_144_1409","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/memo().","attributes":{"type":"uses","at":[8,13,8,17]}},{"key":"geid_144_1410","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().","attributes":{"type":"uses","at":[8,19,8,29]}},{"key":"geid_144_1411","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().","attributes":{"type":"uses","at":[8,19,8,29]}},{"key":"geid_144_1412","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().","attributes":{"type":"uses","at":[8,31,8,40]}},{"key":"geid_144_1413","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().","attributes":{"type":"uses","at":[8,42,8,48]}},{"key":"geid_144_1414","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[8,50,8,58]}},{"key":"geid_144_1415","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/","attributes":{"type":"uses","at":[8,66,8,73]}},{"key":"geid_144_1416","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/CodeBlock.","attributes":{"type":"uses","at":[18,9,18,18]}},{"key":"geid_144_1417","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/","attributes":{"type":"uses","at":[18,26,18,49]}},{"key":"geid_144_1418","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`MemoizedReactMarkdown.tsx`/MemoizedReactMarkdown.","attributes":{"type":"uses","at":[19,9,19,30]}},{"key":"geid_144_1419","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`MemoizedReactMarkdown.tsx`/","attributes":{"type":"uses","at":[19,38,19,73]}},{"key":"geid_144_1420","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#","attributes":{"type":"uses","at":[31,26,31,28]}},{"key":"geid_144_1421","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/Props#","attributes":{"type":"uses","at":[31,29,31,34]}},{"key":"geid_144_1422","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/memo().","attributes":{"type":"uses","at":[31,38,31,42]}},{"key":"geid_144_1423","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/Props#message.","attributes":{"type":"uses","at":[31,46,31,53]}},{"key":"geid_144_1424","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/Props#messageIndex.","attributes":{"type":"uses","at":[31,55,31,67]}},{"key":"geid_144_1425","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/Props#onEdit.","attributes":{"type":"uses","at":[31,69,31,75]}},{"key":"geid_144_1426","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().","attributes":{"type":"uses","at":[37,6,37,16]}},{"key":"geid_144_1427","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().","attributes":{"type":"uses","at":[37,6,37,16]}},{"key":"geid_144_1428","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[39,36,39,44]}},{"key":"geid_144_1429","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[40,34,40,42]}},{"key":"geid_144_1430","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[41,46,41,54]}},{"key":"geid_144_1431","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[42,45,42,53]}},{"key":"geid_144_1432","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().","attributes":{"type":"uses","at":[44,22,44,28]}},{"key":"geid_144_1433","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLTextAreaElement#","attributes":{"type":"uses","at":[44,29,44,48]}},{"key":"geid_144_1434","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ChangeEvent#","attributes":{"type":"uses","at":[50,42,50,53]}},{"key":"geid_144_1435","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLTextAreaElement#","attributes":{"type":"uses","at":[50,54,50,73]}},{"key":"geid_144_1436","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ChangeEvent#target.","attributes":{"type":"uses","at":[51,28,51,34]}},{"key":"geid_144_1437","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[52,20,52,27]}},{"key":"geid_144_1438","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[53,18,53,25]}},{"key":"geid_144_1439","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[54,18,54,25]}},{"key":"geid_144_1440","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[54,56,54,63]}},{"key":"geid_144_1441","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#","attributes":{"type":"uses","at":[96,37,96,50]}},{"key":"geid_144_1442","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLTextAreaElement#","attributes":{"type":"uses","at":[96,51,96,70]}},{"key":"geid_144_1443","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#key.","attributes":{"type":"uses","at":[97,10,97,13]}},{"key":"geid_144_1444","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#shiftKey.","attributes":{"type":"uses","at":[97,45,97,53]}},{"key":"geid_144_1445","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/BaseSyntheticEvent#preventDefault().","attributes":{"type":"uses","at":[98,8,98,22]}},{"key":"geid_144_1446","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`timers.d.ts`/`\"timers\"`/global/setTimeout().","attributes":{"type":"uses","at":[108,6,108,16]}},{"key":"geid_144_1447","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`timers.d.ts`/`\"timers\"`/global/setTimeout/","attributes":{"type":"uses","at":[108,6,108,16]}},{"key":"geid_144_1448","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().","attributes":{"type":"uses","at":[114,2,114,11]}},{"key":"geid_144_1449","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().","attributes":{"type":"uses","at":[119,2,119,11]}},{"key":"geid_144_1450","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[120,20,120,27]}},{"key":"geid_144_1451","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[121,18,121,25]}},{"key":"geid_144_1452","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[122,18,122,25]}},{"key":"geid_144_1453","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[122,56,122,63]}},{"key":"geid_144_1454","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[127,5,127,8]}},{"key":"geid_144_1455","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[128,6,128,15]}},{"key":"geid_144_1456","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#style.","attributes":{"type":"uses","at":[133,6,133,11]}},{"key":"geid_144_1457","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[135,7,135,10]}},{"key":"geid_144_1458","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[135,11,135,20]}},{"key":"geid_144_1459","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[136,9,136,12]}},{"key":"geid_144_1460","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[136,13,136,22]}},{"key":"geid_144_1461","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[142,10,142,13]}},{"key":"geid_144_1462","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[144,9,144,12]}},{"key":"geid_144_1463","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[144,13,144,22]}},{"key":"geid_144_1464","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[146,13,146,16]}},{"key":"geid_144_1465","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[146,17,146,26]}},{"key":"geid_144_1466","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[148,17,148,20]}},{"key":"geid_144_1467","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[148,21,148,30]}},{"key":"geid_144_1468","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#textarea.","attributes":{"type":"uses","at":[149,19,149,27]}},{"key":"geid_144_1469","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ClassAttributes#ref.","attributes":{"type":"uses","at":[150,20,150,23]}},{"key":"geid_144_1470","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[151,20,151,29]}},{"key":"geid_144_1471","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/TextareaHTMLAttributes#value.","attributes":{"type":"uses","at":[152,20,152,25]}},{"key":"geid_144_1472","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/TextareaHTMLAttributes#onChange.","attributes":{"type":"uses","at":[153,20,153,28]}},{"key":"geid_144_1473","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onKeyDown.","attributes":{"type":"uses","at":[154,20,154,29]}},{"key":"geid_144_1474","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onCompositionStart.","attributes":{"type":"uses","at":[155,20,155,38]}},{"key":"geid_144_1475","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onCompositionEnd.","attributes":{"type":"uses","at":[156,20,156,36]}},{"key":"geid_144_1476","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#style.","attributes":{"type":"uses","at":[157,20,157,25]}},{"key":"geid_144_1477","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[167,19,167,22]}},{"key":"geid_144_1478","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[167,23,167,32]}},{"key":"geid_144_1479","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[168,21,168,27]}},{"key":"geid_144_1480","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[169,22,169,31]}},{"key":"geid_144_1481","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onClick.","attributes":{"type":"uses","at":[170,22,170,29]}},{"key":"geid_144_1482","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ButtonHTMLAttributes#disabled.","attributes":{"type":"uses","at":[171,22,171,30]}},{"key":"geid_144_1483","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[174,22,174,28]}},{"key":"geid_144_1484","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[175,21,175,27]}},{"key":"geid_144_1485","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[176,22,176,31]}},{"key":"geid_144_1486","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onClick.","attributes":{"type":"uses","at":[177,22,177,29]}},{"key":"geid_144_1487","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[183,22,183,28]}},{"key":"geid_144_1488","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[184,20,184,23]}},{"key":"geid_144_1489","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[185,18,185,21]}},{"key":"geid_144_1490","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[187,17,187,20]}},{"key":"geid_144_1491","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[187,21,187,30]}},{"key":"geid_144_1492","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[189,18,189,21]}},{"key":"geid_144_1493","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[193,17,193,20]}},{"key":"geid_144_1494","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[193,21,193,30]}},{"key":"geid_144_1495","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[194,19,194,25]}},{"key":"geid_144_1496","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[195,20,195,29]}},{"key":"geid_144_1497","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onClick.","attributes":{"type":"uses","at":[196,20,196,27]}},{"key":"geid_144_1498","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[199,20,199,26]}},{"key":"geid_144_1499","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[200,19,200,25]}},{"key":"geid_144_1500","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[201,20,201,29]}},{"key":"geid_144_1501","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onClick.","attributes":{"type":"uses","at":[202,20,202,27]}},{"key":"geid_144_1502","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[205,20,205,26]}},{"key":"geid_144_1503","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[206,18,206,21]}},{"key":"geid_144_1504","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[208,14,208,17]}},{"key":"geid_144_1505","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[210,13,210,16]}},{"key":"geid_144_1506","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[210,17,210,26]}},{"key":"geid_144_1507","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`MemoizedReactMarkdown.tsx`/MemoizedReactMarkdown.","attributes":{"type":"uses","at":[211,15,211,36]}},{"key":"geid_144_1508","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#span.","attributes":{"type":"uses","at":[219,32,219,36]}},{"key":"geid_144_1509","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[219,37,219,46]}},{"key":"geid_144_1510","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#span.","attributes":{"type":"uses","at":[219,86,219,90]}},{"key":"geid_144_1511","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/CodeBlock.","attributes":{"type":"uses","at":[228,23,228,32]}},{"key":"geid_144_1512","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/Props#language.","attributes":{"type":"uses","at":[230,24,230,32]}},{"key":"geid_144_1513","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`CodeBlock.tsx`/Props#value.","attributes":{"type":"uses","at":[231,24,231,29]}},{"key":"geid_144_1514","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#code.","attributes":{"type":"uses","at":[235,23,235,27]}},{"key":"geid_144_1515","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[235,28,235,37]}},{"key":"geid_144_1516","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#code.","attributes":{"type":"uses","at":[237,24,237,28]}},{"key":"geid_144_1517","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#table.","attributes":{"type":"uses","at":[242,23,242,28]}},{"key":"geid_144_1518","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[242,29,242,38]}},{"key":"geid_144_1519","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#table.","attributes":{"type":"uses","at":[244,24,244,29]}},{"key":"geid_144_1520","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#th.","attributes":{"type":"uses","at":[249,23,249,25]}},{"key":"geid_144_1521","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[249,26,249,35]}},{"key":"geid_144_1522","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#th.","attributes":{"type":"uses","at":[251,24,251,26]}},{"key":"geid_144_1523","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#td.","attributes":{"type":"uses","at":[256,23,256,25]}},{"key":"geid_144_1524","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[256,26,256,35]}},{"key":"geid_144_1525","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#td.","attributes":{"type":"uses","at":[258,24,258,26]}},{"key":"geid_144_1526","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Markdown/`MemoizedReactMarkdown.tsx`/MemoizedReactMarkdown.","attributes":{"type":"uses","at":[266,16,266,37]}},{"key":"geid_144_1527","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[268,15,268,18]}},{"key":"geid_144_1528","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[268,19,268,28]}},{"key":"geid_144_1529","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[275,19,275,25]}},{"key":"geid_144_1530","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[276,20,276,29]}},{"key":"geid_144_1531","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onClick.","attributes":{"type":"uses","at":[277,20,277,27]}},{"key":"geid_144_1532","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[280,20,280,26]}},{"key":"geid_144_1533","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[282,16,282,19]}},{"key":"geid_144_1534","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[283,14,283,17]}},{"key":"geid_144_1535","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[285,10,285,13]}},{"key":"geid_144_1536","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[286,8,286,11]}},{"key":"geid_144_1537","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[287,6,287,9]}},{"key":"geid_144_1538","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/ChatMessage.","attributes":{"type":"uses","at":[290,0,290,11]}},{"key":"geid_144_1539","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FunctionComponent#displayName.","attributes":{"type":"uses","at":[290,12,290,23]}},{"key":"geid_144_1540","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatLoader.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatLoader.tsx`/ChatLoader.","attributes":{"type":"defines","at":[5,37,19,1]}},{"key":"geid_144_1541","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatLoader.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatLoader.tsx`/Props#","attributes":{"type":"defines","at":[3,0,3,19]}},{"key":"geid_144_1542","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatLoader.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#","attributes":{"type":"uses","at":[1,9,1,11]}},{"key":"geid_144_1543","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatLoader.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/","attributes":{"type":"uses","at":[1,19,1,26]}},{"key":"geid_144_1544","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatLoader.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#","attributes":{"type":"uses","at":[5,25,5,27]}},{"key":"geid_144_1545","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatLoader.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatLoader.tsx`/Props#","attributes":{"type":"uses","at":[5,28,5,33]}},{"key":"geid_144_1546","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatLoader.tsx`/ChatLoader.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[7,5,7,8]}},{"key":"geid_144_1547","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatLoader.tsx`/ChatLoader.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[8,6,8,15]}},{"key":"geid_144_1548","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatLoader.tsx`/ChatLoader.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#style.","attributes":{"type":"uses","at":[9,6,9,11]}},{"key":"geid_144_1549","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatLoader.tsx`/ChatLoader.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[11,7,11,10]}},{"key":"geid_144_1550","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatLoader.tsx`/ChatLoader.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[11,11,11,20]}},{"key":"geid_144_1551","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatLoader.tsx`/ChatLoader.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[12,9,12,12]}},{"key":"geid_144_1552","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatLoader.tsx`/ChatLoader.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[12,13,12,22]}},{"key":"geid_144_1553","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatLoader.tsx`/ChatLoader.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[14,10,14,13]}},{"key":"geid_144_1554","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatLoader.tsx`/ChatLoader.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#span.","attributes":{"type":"uses","at":[15,9,15,13]}},{"key":"geid_144_1555","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatLoader.tsx`/ChatLoader.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[15,14,15,23]}},{"key":"geid_144_1556","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatLoader.tsx`/ChatLoader.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#span.","attributes":{"type":"uses","at":[15,63,15,67]}},{"key":"geid_144_1557","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatLoader.tsx`/ChatLoader.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[16,8,16,11]}},{"key":"geid_144_1558","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatLoader.tsx`/ChatLoader.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[17,6,17,9]}},{"key":"geid_144_1559","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","attributes":{"type":"defines","at":[39,25,397,1]}},{"key":"geid_144_1560","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/Props#","attributes":{"type":"defines","at":[30,0,37,1]}},{"key":"geid_144_1561","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#","attributes":{"type":"uses","at":[9,2,9,15]}},{"key":"geid_144_1562","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#","attributes":{"type":"uses","at":[10,2,10,18]}},{"key":"geid_144_1563","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useCallback().","attributes":{"type":"uses","at":[11,2,11,13]}},{"key":"geid_144_1564","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().","attributes":{"type":"uses","at":[12,2,12,12]}},{"key":"geid_144_1565","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().","attributes":{"type":"uses","at":[12,2,12,12]}},{"key":"geid_144_1566","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().","attributes":{"type":"uses","at":[13,2,13,11]}},{"key":"geid_144_1567","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().","attributes":{"type":"uses","at":[14,2,14,8]}},{"key":"geid_144_1568","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[15,2,15,10]}},{"key":"geid_144_1569","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/","attributes":{"type":"uses","at":[16,7,16,14]}},{"key":"geid_144_1570","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","attributes":{"type":"uses","at":[26,9,26,21]}},{"key":"geid_144_1571","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/","attributes":{"type":"uses","at":[26,29,26,45]}},{"key":"geid_144_1572","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/PromptList.","attributes":{"type":"uses","at":[27,9,27,19]}},{"key":"geid_144_1573","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/","attributes":{"type":"uses","at":[27,27,27,41]}},{"key":"geid_144_1574","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","attributes":{"type":"uses","at":[28,9,28,22]}},{"key":"geid_144_1575","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/","attributes":{"type":"uses","at":[28,30,28,47]}},{"key":"geid_144_1576","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/Props#","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#","attributes":{"type":"uses","at":[34,23,34,39]}},{"key":"geid_144_1577","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/Props#","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#","attributes":{"type":"uses","at":[35,15,35,31]}},{"key":"geid_144_1578","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/Props#","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLTextAreaElement#","attributes":{"type":"uses","at":[35,32,35,51]}},{"key":"geid_144_1579","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/Props#onSend.","attributes":{"type":"uses","at":[40,2,40,8]}},{"key":"geid_144_1580","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/Props#onRegenerate.","attributes":{"type":"uses","at":[41,2,41,14]}},{"key":"geid_144_1581","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/Props#onScrollDownClick.","attributes":{"type":"uses","at":[42,2,42,19]}},{"key":"geid_144_1582","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/Props#stopConversationRef.","attributes":{"type":"uses","at":[43,2,43,21]}},{"key":"geid_144_1583","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/Props#textareaRef.","attributes":{"type":"uses","at":[44,2,44,13]}},{"key":"geid_144_1584","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/Props#showScrollDownButton.","attributes":{"type":"uses","at":[45,2,45,22]}},{"key":"geid_144_1585","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/Props#","attributes":{"type":"uses","at":[46,3,46,8]}},{"key":"geid_144_1586","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().","attributes":{"type":"uses","at":[53,6,53,16]}},{"key":"geid_144_1587","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().","attributes":{"type":"uses","at":[53,6,53,16]}},{"key":"geid_144_1588","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[55,32,55,40]}},{"key":"geid_144_1589","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[56,34,56,42]}},{"key":"geid_144_1590","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[57,46,57,54]}},{"key":"geid_144_1591","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[58,52,58,60]}},{"key":"geid_144_1592","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[59,50,59,58]}},{"key":"geid_144_1593","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[60,36,60,44]}},{"key":"geid_144_1594","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[61,46,61,54]}},{"key":"geid_144_1595","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[62,50,62,58]}},{"key":"geid_144_1596","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[63,30,63,38]}},{"key":"geid_144_1597","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().","attributes":{"type":"uses","at":[65,24,65,30]}},{"key":"geid_144_1598","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLUListElement#","attributes":{"type":"uses","at":[65,31,65,47]}},{"key":"geid_144_1599","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ChangeEvent#","attributes":{"type":"uses","at":[71,33,71,44]}},{"key":"geid_144_1600","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLTextAreaElement#","attributes":{"type":"uses","at":[71,45,71,64]}},{"key":"geid_144_1601","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ChangeEvent#target.","attributes":{"type":"uses","at":[72,20,72,26]}},{"key":"geid_144_1602","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[103,62,103,69]}},{"key":"geid_144_1603","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[104,18,104,25]}},{"key":"geid_144_1604","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[109,24,109,31]}},{"key":"geid_144_1605","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`timers.d.ts`/`\"timers\"`/global/setTimeout().","attributes":{"type":"uses","at":[110,4,110,14]}},{"key":"geid_144_1606","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`timers.d.ts`/`\"timers\"`/global/setTimeout/","attributes":{"type":"uses","at":[110,4,110,14]}},{"key":"geid_144_1607","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[111,26,111,33]}},{"key":"geid_144_1608","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#","attributes":{"type":"uses","at":[138,28,138,41]}},{"key":"geid_144_1609","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLTextAreaElement#","attributes":{"type":"uses","at":[138,42,138,61]}},{"key":"geid_144_1610","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#key.","attributes":{"type":"uses","at":[140,12,140,15]}},{"key":"geid_144_1611","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/BaseSyntheticEvent#preventDefault().","attributes":{"type":"uses","at":[141,10,141,24]}},{"key":"geid_144_1612","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#key.","attributes":{"type":"uses","at":[145,19,145,22]}},{"key":"geid_144_1613","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/BaseSyntheticEvent#preventDefault().","attributes":{"type":"uses","at":[146,10,146,24]}},{"key":"geid_144_1614","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#key.","attributes":{"type":"uses","at":[150,19,150,22]}},{"key":"geid_144_1615","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/BaseSyntheticEvent#preventDefault().","attributes":{"type":"uses","at":[151,10,151,24]}},{"key":"geid_144_1616","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#key.","attributes":{"type":"uses","at":[155,19,155,22]}},{"key":"geid_144_1617","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/BaseSyntheticEvent#preventDefault().","attributes":{"type":"uses","at":[156,10,156,24]}},{"key":"geid_144_1618","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#key.","attributes":{"type":"uses","at":[158,19,158,22]}},{"key":"geid_144_1619","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/BaseSyntheticEvent#preventDefault().","attributes":{"type":"uses","at":[159,10,159,24]}},{"key":"geid_144_1620","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#key.","attributes":{"type":"uses","at":[164,17,164,20]}},{"key":"geid_144_1621","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#shiftKey.","attributes":{"type":"uses","at":[164,67,164,75]}},{"key":"geid_144_1622","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/BaseSyntheticEvent#preventDefault().","attributes":{"type":"uses","at":[165,8,165,22]}},{"key":"geid_144_1623","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#key.","attributes":{"type":"uses","at":[167,17,167,20]}},{"key":"geid_144_1624","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#metaKey.","attributes":{"type":"uses","at":[167,34,167,41]}},{"key":"geid_144_1625","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/BaseSyntheticEvent#preventDefault().","attributes":{"type":"uses","at":[168,8,168,22]}},{"key":"geid_144_1626","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useCallback().","attributes":{"type":"uses","at":[185,37,185,48]}},{"key":"geid_144_1627","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[220,35,220,42]}},{"key":"geid_144_1628","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[221,18,221,25]}},{"key":"geid_144_1629","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().","attributes":{"type":"uses","at":[225,2,225,11]}},{"key":"geid_144_1630","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[226,22,226,29]}},{"key":"geid_144_1631","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[227,20,227,27]}},{"key":"geid_144_1632","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().","attributes":{"type":"uses","at":[231,2,231,11]}},{"key":"geid_144_1633","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[232,35,232,42]}},{"key":"geid_144_1634","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[233,18,233,25]}},{"key":"geid_144_1635","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[234,18,234,25]}},{"key":"geid_144_1636","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[234,56,234,63]}},{"key":"geid_144_1637","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[235,18,235,25]}},{"key":"geid_144_1638","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[236,21,236,28]}},{"key":"geid_144_1639","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().","attributes":{"type":"uses","at":[241,2,241,11]}},{"key":"geid_144_1640","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/MouseEvent#","attributes":{"type":"uses","at":[242,35,242,45]}},{"key":"geid_144_1641","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[244,22,244,29]}},{"key":"geid_144_1642","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[245,23,245,30]}},{"key":"geid_144_1643","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[259,5,259,8]}},{"key":"geid_144_1644","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[259,9,259,18]}},{"key":"geid_144_1645","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[260,7,260,10]}},{"key":"geid_144_1646","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[260,11,260,20]}},{"key":"geid_144_1647","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[262,11,262,17]}},{"key":"geid_144_1648","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[263,12,263,21]}},{"key":"geid_144_1649","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onClick.","attributes":{"type":"uses","at":[264,12,264,19]}},{"key":"geid_144_1650","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[267,12,267,18]}},{"key":"geid_144_1651","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[273,13,273,19]}},{"key":"geid_144_1652","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[274,14,274,23]}},{"key":"geid_144_1653","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onClick.","attributes":{"type":"uses","at":[275,14,275,21]}},{"key":"geid_144_1654","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[278,14,278,20]}},{"key":"geid_144_1655","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[281,9,281,12]}},{"key":"geid_144_1656","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[281,13,281,22]}},{"key":"geid_144_1657","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[282,11,282,17]}},{"key":"geid_144_1658","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[283,12,283,21]}},{"key":"geid_144_1659","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onClick.","attributes":{"type":"uses","at":[284,12,284,19]}},{"key":"geid_144_1660","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onKeyDown.","attributes":{"type":"uses","at":[285,12,285,21]}},{"key":"geid_144_1661","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[288,12,288,18]}},{"key":"geid_144_1662","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[291,13,291,16]}},{"key":"geid_144_1663","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[291,17,291,26]}},{"key":"geid_144_1664","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/PluginSelect.","attributes":{"type":"uses","at":[292,15,292,27]}},{"key":"geid_144_1665","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/Props#plugin.","attributes":{"type":"uses","at":[293,16,293,22]}},{"key":"geid_144_1666","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/Props#onKeyDown.","attributes":{"type":"uses","at":[294,16,294,25]}},{"key":"geid_144_1667","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[298,32,298,39]}},{"key":"geid_144_1668","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PluginSelect.tsx`/Props#onPluginChange.","attributes":{"type":"uses","at":[301,16,301,30]}},{"key":"geid_144_1669","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[305,49,305,56]}},{"key":"geid_144_1670","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[306,32,306,39]}},{"key":"geid_144_1671","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[310,14,310,17]}},{"key":"geid_144_1672","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#textarea.","attributes":{"type":"uses","at":[313,11,313,19]}},{"key":"geid_144_1673","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ClassAttributes#ref.","attributes":{"type":"uses","at":[314,12,314,15]}},{"key":"geid_144_1674","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[315,12,315,21]}},{"key":"geid_144_1675","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#style.","attributes":{"type":"uses","at":[316,12,316,17]}},{"key":"geid_144_1676","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[318,38,318,45]}},{"key":"geid_144_1677","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[321,28,321,35]}},{"key":"geid_144_1678","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[321,51,321,58]}},{"key":"geid_144_1679","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/TextareaHTMLAttributes#placeholder.","attributes":{"type":"uses","at":[326,12,326,23]}},{"key":"geid_144_1680","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/TextareaHTMLAttributes#value.","attributes":{"type":"uses","at":[329,12,329,17]}},{"key":"geid_144_1681","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/TextareaHTMLAttributes#rows.","attributes":{"type":"uses","at":[330,12,330,16]}},{"key":"geid_144_1682","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onCompositionStart.","attributes":{"type":"uses","at":[331,12,331,30]}},{"key":"geid_144_1683","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onCompositionEnd.","attributes":{"type":"uses","at":[332,12,332,28]}},{"key":"geid_144_1684","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/TextareaHTMLAttributes#onChange.","attributes":{"type":"uses","at":[333,12,333,20]}},{"key":"geid_144_1685","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onKeyDown.","attributes":{"type":"uses","at":[334,12,334,21]}},{"key":"geid_144_1686","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[337,11,337,17]}},{"key":"geid_144_1687","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[338,12,338,21]}},{"key":"geid_144_1688","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onClick.","attributes":{"type":"uses","at":[339,12,339,19]}},{"key":"geid_144_1689","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[342,15,342,18]}},{"key":"geid_144_1690","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[342,19,342,28]}},{"key":"geid_144_1691","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[342,132,342,135]}},{"key":"geid_144_1692","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[346,12,346,18]}},{"key":"geid_144_1693","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[349,13,349,16]}},{"key":"geid_144_1694","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[349,17,349,26]}},{"key":"geid_144_1695","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[350,15,350,21]}},{"key":"geid_144_1696","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[351,16,351,25]}},{"key":"geid_144_1697","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onClick.","attributes":{"type":"uses","at":[352,16,352,23]}},{"key":"geid_144_1698","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[355,16,355,22]}},{"key":"geid_144_1699","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[356,14,356,17]}},{"key":"geid_144_1700","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[360,13,360,16]}},{"key":"geid_144_1701","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[360,17,360,26]}},{"key":"geid_144_1702","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/PromptList.","attributes":{"type":"uses","at":[361,15,361,25]}},{"key":"geid_144_1703","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/Props#activePromptIndex.","attributes":{"type":"uses","at":[362,16,362,33]}},{"key":"geid_144_1704","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/Props#prompts.","attributes":{"type":"uses","at":[363,16,363,23]}},{"key":"geid_144_1705","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/Props#onSelect.","attributes":{"type":"uses","at":[364,16,364,24]}},{"key":"geid_144_1706","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/Props#onMouseOver.","attributes":{"type":"uses","at":[365,16,365,27]}},{"key":"geid_144_1707","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`PromptList.tsx`/Props#promptListRef.","attributes":{"type":"uses","at":[366,16,366,29]}},{"key":"geid_144_1708","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[368,14,368,17]}},{"key":"geid_144_1709","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/VariableModal.","attributes":{"type":"uses","at":[372,13,372,26]}},{"key":"geid_144_1710","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/Props#prompt.","attributes":{"type":"uses","at":[373,14,373,20]}},{"key":"geid_144_1711","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/Props#variables.","attributes":{"type":"uses","at":[374,14,374,23]}},{"key":"geid_144_1712","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/Props#onSubmit.","attributes":{"type":"uses","at":[375,14,375,22]}},{"key":"geid_144_1713","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`VariableModal.tsx`/Props#onClose.","attributes":{"type":"uses","at":[376,14,376,21]}},{"key":"geid_144_1714","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[379,10,379,13]}},{"key":"geid_144_1715","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[380,8,380,11]}},{"key":"geid_144_1716","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[381,7,381,10]}},{"key":"geid_144_1717","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[381,11,381,20]}},{"key":"geid_144_1718","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#a.","attributes":{"type":"uses","at":[382,9,382,10]}},{"key":"geid_144_1719","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/AnchorHTMLAttributes#href.","attributes":{"type":"uses","at":[383,10,383,14]}},{"key":"geid_144_1720","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/AnchorHTMLAttributes#target.","attributes":{"type":"uses","at":[384,10,384,16]}},{"key":"geid_144_1721","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#rel.","attributes":{"type":"uses","at":[385,10,385,13]}},{"key":"geid_144_1722","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[386,10,386,19]}},{"key":"geid_144_1723","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#a.","attributes":{"type":"uses","at":[389,10,389,11]}},{"key":"geid_144_1724","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[394,8,394,11]}},{"key":"geid_144_1725","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[395,6,395,9]}},{"key":"geid_144_1726","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/Props#","attributes":{"type":"defines","at":[36,0,38,1]}},{"key":"geid_144_1727","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#","attributes":{"type":"uses","at":[2,2,2,18]}},{"key":"geid_144_1728","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/memo().","attributes":{"type":"uses","at":[3,2,3,6]}},{"key":"geid_144_1729","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useCallback().","attributes":{"type":"uses","at":[4,2,4,13]}},{"key":"geid_144_1730","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().","attributes":{"type":"uses","at":[5,2,5,12]}},{"key":"geid_144_1731","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().","attributes":{"type":"uses","at":[5,2,5,12]}},{"key":"geid_144_1732","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().","attributes":{"type":"uses","at":[6,2,6,11]}},{"key":"geid_144_1733","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().","attributes":{"type":"uses","at":[7,2,7,8]}},{"key":"geid_144_1734","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[8,2,8,10]}},{"key":"geid_144_1735","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/","attributes":{"type":"uses","at":[9,7,9,14]}},{"key":"geid_144_1736","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","attributes":{"type":"uses","at":[27,7,27,14]}},{"key":"geid_144_1737","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`index.ts`/","attributes":{"type":"uses","at":[27,20,27,32]}},{"key":"geid_144_1738","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","attributes":{"type":"uses","at":[28,9,28,18]}},{"key":"geid_144_1739","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/","attributes":{"type":"uses","at":[28,26,28,39]}},{"key":"geid_144_1740","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatLoader.tsx`/ChatLoader.","attributes":{"type":"uses","at":[29,9,29,19]}},{"key":"geid_144_1741","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatLoader.tsx`/","attributes":{"type":"uses","at":[29,27,29,41]}},{"key":"geid_144_1742","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ErrorMessageDiv.tsx`/ErrorMessageDiv.","attributes":{"type":"uses","at":[30,9,30,24]}},{"key":"geid_144_1743","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ErrorMessageDiv.tsx`/","attributes":{"type":"uses","at":[30,32,30,51]}},{"key":"geid_144_1744","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ModelSelect.tsx`/ModelSelect.","attributes":{"type":"uses","at":[31,9,31,20]}},{"key":"geid_144_1745","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ModelSelect.tsx`/","attributes":{"type":"uses","at":[31,28,31,43]}},{"key":"geid_144_1746","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","attributes":{"type":"uses","at":[32,9,32,21]}},{"key":"geid_144_1747","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/","attributes":{"type":"uses","at":[32,29,32,45]}},{"key":"geid_144_1748","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","attributes":{"type":"uses","at":[33,9,33,26]}},{"key":"geid_144_1749","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/","attributes":{"type":"uses","at":[33,34,33,49]}},{"key":"geid_144_1750","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`MemoizedChatMessage.tsx`/MemoizedChatMessage.","attributes":{"type":"uses","at":[34,9,34,28]}},{"key":"geid_144_1751","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`MemoizedChatMessage.tsx`/","attributes":{"type":"uses","at":[34,36,34,59]}},{"key":"geid_144_1752","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/Props#","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#","attributes":{"type":"uses","at":[37,23,37,39]}},{"key":"geid_144_1753","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/memo().","attributes":{"type":"uses","at":[40,20,40,24]}},{"key":"geid_144_1754","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/Props#stopConversationRef.","attributes":{"type":"uses","at":[40,28,40,47]}},{"key":"geid_144_1755","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/Props#","attributes":{"type":"uses","at":[40,51,40,56]}},{"key":"geid_144_1756","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().","attributes":{"type":"uses","at":[58,6,58,16]}},{"key":"geid_144_1757","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().","attributes":{"type":"uses","at":[58,6,58,16]}},{"key":"geid_144_1758","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[60,46,60,54]}},{"key":"geid_144_1759","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[61,52,61,60]}},{"key":"geid_144_1760","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[62,42,62,50]}},{"key":"geid_144_1761","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[64,4,64,12]}},{"key":"geid_144_1762","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().","attributes":{"type":"uses","at":[66,25,66,31]}},{"key":"geid_144_1763","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLDivElement#","attributes":{"type":"uses","at":[66,32,66,46]}},{"key":"geid_144_1764","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().","attributes":{"type":"uses","at":[67,27,67,33]}},{"key":"geid_144_1765","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLDivElement#","attributes":{"type":"uses","at":[67,34,67,48]}},{"key":"geid_144_1766","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().","attributes":{"type":"uses","at":[68,22,68,28]}},{"key":"geid_144_1767","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLTextAreaElement#","attributes":{"type":"uses","at":[68,29,68,48]}},{"key":"geid_144_1768","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useCallback().","attributes":{"type":"uses","at":[70,21,70,32]}},{"key":"geid_144_1769","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/AbortController#","attributes":{"type":"uses","at":[117,31,117,46]}},{"key":"geid_144_1770","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/AbortController.","attributes":{"type":"uses","at":[117,31,117,46]}},{"key":"geid_144_1771","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/fetch().","attributes":{"type":"uses","at":[118,31,118,36]}},{"key":"geid_144_1772","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/AbortController#signal.","attributes":{"type":"uses","at":[123,29,123,35]}},{"key":"geid_144_1773","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`util.d.ts`/`\"util\"`/global/TextDecoder.","attributes":{"type":"uses","at":[150,30,150,41]}},{"key":"geid_144_1774","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[155,36,155,43]}},{"key":"geid_144_1775","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/AbortController#abort().","attributes":{"type":"uses","at":[156,25,156,30]}},{"key":"geid_144_1776","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`util.d.ts`/`\"util\"`/TextDecoder#decode().","attributes":{"type":"uses","at":[162,39,162,45]}},{"key":"geid_144_1777","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useCallback().","attributes":{"type":"uses","at":[256,25,256,36]}},{"key":"geid_144_1778","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[258,21,258,28]}},{"key":"geid_144_1779","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[259,18,259,25]}},{"key":"geid_144_1780","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[264,25,264,32]}},{"key":"geid_144_1781","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[266,25,266,32]}},{"key":"geid_144_1782","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[280,21,280,28]}},{"key":"geid_144_1783","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[281,28,281,35]}},{"key":"geid_144_1784","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[304,21,304,28]}},{"key":"geid_144_1785","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().","attributes":{"type":"uses","at":[317,2,317,11]}},{"key":"geid_144_1786","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().","attributes":{"type":"uses","at":[325,2,325,11]}},{"key":"geid_144_1787","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[330,22,330,29]}},{"key":"geid_144_1788","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[338,46,338,53]}},{"key":"geid_144_1789","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[350,5,350,8]}},{"key":"geid_144_1790","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[350,9,350,18]}},{"key":"geid_144_1791","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[352,9,352,12]}},{"key":"geid_144_1792","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[352,13,352,22]}},{"key":"geid_144_1793","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[353,11,353,14]}},{"key":"geid_144_1794","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[353,15,353,24]}},{"key":"geid_144_1795","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[355,12,355,15]}},{"key":"geid_144_1796","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[356,11,356,14]}},{"key":"geid_144_1797","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[356,15,356,24]}},{"key":"geid_144_1798","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[357,13,357,16]}},{"key":"geid_144_1799","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[357,17,357,26]}},{"key":"geid_144_1800","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[357,98,357,101]}},{"key":"geid_144_1801","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[358,13,358,16]}},{"key":"geid_144_1802","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[358,17,358,26]}},{"key":"geid_144_1803","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[360,14,360,17]}},{"key":"geid_144_1804","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[361,12,361,15]}},{"key":"geid_144_1805","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[362,11,362,14]}},{"key":"geid_144_1806","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[362,15,362,24]}},{"key":"geid_144_1807","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[363,13,363,16]}},{"key":"geid_144_1808","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[363,17,363,26]}},{"key":"geid_144_1809","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[366,14,366,17]}},{"key":"geid_144_1810","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[367,13,367,16]}},{"key":"geid_144_1811","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[367,17,367,26]}},{"key":"geid_144_1812","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#span.","attributes":{"type":"uses","at":[368,21,368,25]}},{"key":"geid_144_1813","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[368,26,368,35]}},{"key":"geid_144_1814","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#span.","attributes":{"type":"uses","at":[368,51,368,55]}},{"key":"geid_144_1815","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[370,14,370,17]}},{"key":"geid_144_1816","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[371,13,371,16]}},{"key":"geid_144_1817","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[371,17,371,26]}},{"key":"geid_144_1818","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[375,14,375,17]}},{"key":"geid_144_1819","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[376,13,376,16]}},{"key":"geid_144_1820","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#a.","attributes":{"type":"uses","at":[378,15,378,16]}},{"key":"geid_144_1821","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/AnchorHTMLAttributes#href.","attributes":{"type":"uses","at":[379,16,379,20]}},{"key":"geid_144_1822","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/AnchorHTMLAttributes#target.","attributes":{"type":"uses","at":[380,16,380,22]}},{"key":"geid_144_1823","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#rel.","attributes":{"type":"uses","at":[381,16,381,19]}},{"key":"geid_144_1824","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[382,16,382,25]}},{"key":"geid_144_1825","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#a.","attributes":{"type":"uses","at":[385,16,385,17]}},{"key":"geid_144_1826","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[386,14,386,17]}},{"key":"geid_144_1827","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[387,12,387,15]}},{"key":"geid_144_1828","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[388,10,388,13]}},{"key":"geid_144_1829","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ErrorMessageDiv.tsx`/ErrorMessageDiv.","attributes":{"type":"uses","at":[390,9,390,24]}},{"key":"geid_144_1830","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ErrorMessageDiv.tsx`/Props#error.","attributes":{"type":"uses","at":[390,25,390,30]}},{"key":"geid_144_1831","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[393,11,393,14]}},{"key":"geid_144_1832","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[394,12,394,21]}},{"key":"geid_144_1833","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ClassAttributes#ref.","attributes":{"type":"uses","at":[395,12,395,15]}},{"key":"geid_144_1834","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onScroll.","attributes":{"type":"uses","at":[396,12,396,20]}},{"key":"geid_144_1835","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[400,17,400,20]}},{"key":"geid_144_1836","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[400,21,400,30]}},{"key":"geid_144_1837","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[401,19,401,22]}},{"key":"geid_144_1838","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[401,23,401,32]}},{"key":"geid_144_1839","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[403,23,403,26]}},{"key":"geid_144_1840","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Spinner.","attributes":{"type":"uses","at":[404,25,404,32]}},{"key":"geid_144_1841","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Props#size.","attributes":{"type":"uses","at":[404,33,404,37]}},{"key":"geid_144_1842","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Spinner/`Spinner.tsx`/Props#className.","attributes":{"type":"uses","at":[404,45,404,54]}},{"key":"geid_144_1843","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[405,24,405,27]}},{"key":"geid_144_1844","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[409,20,409,23]}},{"key":"geid_144_1845","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[412,21,412,24]}},{"key":"geid_144_1846","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[412,25,412,34]}},{"key":"geid_144_1847","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ModelSelect.tsx`/ModelSelect.","attributes":{"type":"uses","at":[413,23,413,34]}},{"key":"geid_144_1848","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/SystemPrompt.","attributes":{"type":"uses","at":[415,23,415,35]}},{"key":"geid_144_1849","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/Props#conversation.","attributes":{"type":"uses","at":[416,24,416,36]}},{"key":"geid_144_1850","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/Props#prompts.","attributes":{"type":"uses","at":[417,24,417,31]}},{"key":"geid_144_1851","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`SystemPrompt.tsx`/Props#onChangePrompt.","attributes":{"type":"uses","at":[418,24,418,38]}},{"key":"geid_144_1852","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/TemperatureSlider.","attributes":{"type":"uses","at":[426,23,426,40]}},{"key":"geid_144_1853","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/Props#label.","attributes":{"type":"uses","at":[427,24,427,29]}},{"key":"geid_144_1854","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Temperature.tsx`/Props#onChangeTemperature.","attributes":{"type":"uses","at":[428,24,428,43]}},{"key":"geid_144_1855","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[435,22,435,25]}},{"key":"geid_144_1856","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[437,18,437,21]}},{"key":"geid_144_1857","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[441,17,441,20]}},{"key":"geid_144_1858","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[441,21,441,30]}},{"key":"geid_144_1859","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[444,19,444,25]}},{"key":"geid_144_1860","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[445,20,445,29]}},{"key":"geid_144_1861","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onClick.","attributes":{"type":"uses","at":[446,20,446,27]}},{"key":"geid_144_1862","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[449,20,449,26]}},{"key":"geid_144_1863","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[450,19,450,25]}},{"key":"geid_144_1864","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[451,20,451,29]}},{"key":"geid_144_1865","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onClick.","attributes":{"type":"uses","at":[452,20,452,27]}},{"key":"geid_144_1866","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[455,20,455,26]}},{"key":"geid_144_1867","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[456,18,456,21]}},{"key":"geid_144_1868","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[458,19,458,22]}},{"key":"geid_144_1869","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[458,23,458,32]}},{"key":"geid_144_1870","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[459,21,459,24]}},{"key":"geid_144_1871","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[459,25,459,34]}},{"key":"geid_144_1872","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ModelSelect.tsx`/ModelSelect.","attributes":{"type":"uses","at":[460,23,460,34]}},{"key":"geid_144_1873","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[461,22,461,25]}},{"key":"geid_144_1874","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[462,20,462,23]}},{"key":"geid_144_1875","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`MemoizedChatMessage.tsx`/MemoizedChatMessage.","attributes":{"type":"uses","at":[466,19,466,38]}},{"key":"geid_144_1876","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/Props#message.","attributes":{"type":"uses","at":[468,20,468,27]}},{"key":"geid_144_1877","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/Props#messageIndex.","attributes":{"type":"uses","at":[469,20,469,32]}},{"key":"geid_144_1878","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatMessage.tsx`/Props#onEdit.","attributes":{"type":"uses","at":[470,20,470,26]}},{"key":"geid_144_1879","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatLoader.tsx`/ChatLoader.","attributes":{"type":"uses","at":[481,29,481,39]}},{"key":"geid_144_1880","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[483,17,483,20]}},{"key":"geid_144_1881","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[484,18,484,27]}},{"key":"geid_144_1882","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ClassAttributes#ref.","attributes":{"type":"uses","at":[485,18,485,21]}},{"key":"geid_144_1883","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[489,12,489,15]}},{"key":"geid_144_1884","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/ChatInput.","attributes":{"type":"uses","at":[491,11,491,20]}},{"key":"geid_144_1885","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/Props#stopConversationRef.","attributes":{"type":"uses","at":[492,12,492,31]}},{"key":"geid_144_1886","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/Props#textareaRef.","attributes":{"type":"uses","at":[493,12,493,23]}},{"key":"geid_144_1887","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/Props#onSend.","attributes":{"type":"uses","at":[494,12,494,18]}},{"key":"geid_144_1888","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/Props#onScrollDownClick.","attributes":{"type":"uses","at":[498,12,498,29]}},{"key":"geid_144_1889","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/Props#onRegenerate.","attributes":{"type":"uses","at":[499,12,499,24]}},{"key":"geid_144_1890","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`ChatInput.tsx`/Props#showScrollDownButton.","attributes":{"type":"uses","at":[504,12,504,32]}},{"key":"geid_144_1891","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[508,6,508,9]}},{"key":"geid_144_1892","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/Chat.","attributes":{"type":"uses","at":[511,0,511,4]}},{"key":"geid_144_1893","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chat/`Chat.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/NamedExoticComponent#displayName.","attributes":{"type":"uses","at":[511,5,511,16]}},{"key":"geid_144_1894","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/getServerSideProps.","attributes":{"type":"defines","at":[397,54,430,1]}},{"key":"geid_144_1895","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","attributes":{"type":"defines","at":[49,13,394,1]}},{"key":"geid_144_1896","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Props#","attributes":{"type":"defines","at":[43,0,47,1]}},{"key":"geid_144_1897","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().","attributes":{"type":"uses","at":[0,9,0,18]}},{"key":"geid_144_1898","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().","attributes":{"type":"uses","at":[0,20,0,26]}},{"key":"geid_144_1899","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[0,28,0,36]}},{"key":"geid_144_1900","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/","attributes":{"type":"uses","at":[0,44,0,51]}},{"key":"geid_144_1901","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/","target":"scip-typescript npm next 14.0.3 types/`index.d.ts`/GetServerSideProps#","attributes":{"type":"uses","at":[3,9,3,27]}},{"key":"geid_144_1902","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/","target":"scip-typescript npm next 14.0.3 `index.d.ts`/","attributes":{"type":"uses","at":[3,35,3,41]}},{"key":"geid_144_1903","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/","target":"scip-typescript npm next 14.0.3 dist/shared/lib/`head.d.ts`/Head().","attributes":{"type":"uses","at":[6,7,6,11]}},{"key":"geid_144_1904","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/","target":"scip-typescript npm next 14.0.3 `head.d.ts`/","attributes":{"type":"uses","at":[6,17,6,28]}},{"key":"geid_144_1905","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.context.tsx`/HomeContext.","attributes":{"type":"uses","at":[38,7,38,18]}},{"key":"geid_144_1906","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.context.tsx`/","attributes":{"type":"uses","at":[38,24,38,40]}},{"key":"geid_144_1907","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.state.tsx`/HomeInitialState#","attributes":{"type":"uses","at":[39,9,39,25]}},{"key":"geid_144_1908","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.state.tsx`/initialState.","attributes":{"type":"uses","at":[39,27,39,39]}},{"key":"geid_144_1909","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.state.tsx`/","attributes":{"type":"uses","at":[39,47,39,61]}},{"key":"geid_144_1910","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/","target":"scip-typescript npm @types/uuid 9.0.7 `index.d.ts`/v4.","attributes":{"type":"uses","at":[41,9,41,11]}},{"key":"geid_144_1911","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/","target":"scip-typescript npm @types/uuid 9.0.7 `index.d.ts`/v4.","attributes":{"type":"uses","at":[41,15,41,21]}},{"key":"geid_144_1912","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/","target":"scip-typescript npm @types/uuid 9.0.7 `index.d.ts`/","attributes":{"type":"uses","at":[41,29,41,35]}},{"key":"geid_144_1913","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Props#serverSideApiKeyIsSet.","attributes":{"type":"uses","at":[50,2,50,23]}},{"key":"geid_144_1914","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Props#serverSidePluginKeysSet.","attributes":{"type":"uses","at":[51,2,51,25]}},{"key":"geid_144_1915","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Props#defaultModelId.","attributes":{"type":"uses","at":[52,2,52,16]}},{"key":"geid_144_1916","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Props#","attributes":{"type":"uses","at":[53,3,53,8]}},{"key":"geid_144_1917","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[57,44,57,52]}},{"key":"geid_144_1918","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.state.tsx`/HomeInitialState#","attributes":{"type":"uses","at":[59,40,59,56]}},{"key":"geid_144_1919","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.state.tsx`/HomeInitialState#","attributes":{"type":"uses","at":[60,4,60,16]}},{"key":"geid_144_1920","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().","attributes":{"type":"uses","at":[76,30,76,36]}},{"key":"geid_144_1921","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().","attributes":{"type":"uses","at":[93,2,93,11]}},{"key":"geid_144_1922","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().","attributes":{"type":"uses","at":[97,2,97,11]}},{"key":"geid_144_1923","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","target":"scip-typescript npm @types/uuid 9.0.7 `index.d.ts`/v4.","attributes":{"type":"uses","at":[116,10,116,16]}},{"key":"geid_144_1924","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","target":"scip-typescript npm @types/uuid 9.0.7 `index.d.ts`/v4.","attributes":{"type":"uses","at":[184,10,184,16]}},{"key":"geid_144_1925","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().","attributes":{"type":"uses","at":[229,2,229,11]}},{"key":"geid_144_1926","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().","attributes":{"type":"uses","at":[235,2,235,11]}},{"key":"geid_144_1927","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().","attributes":{"type":"uses","at":[252,2,252,11]}},{"key":"geid_144_1928","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","target":"scip-typescript npm @types/uuid 9.0.7 `index.d.ts`/v4.","attributes":{"type":"uses","at":[332,14,332,20]}},{"key":"geid_144_1929","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.context.tsx`/HomeContext.","attributes":{"type":"uses","at":[350,5,350,16]}},{"key":"geid_144_1930","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/Context#Provider.","attributes":{"type":"uses","at":[350,17,350,25]}},{"key":"geid_144_1931","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ProviderProps#value.","attributes":{"type":"uses","at":[351,6,351,11]}},{"key":"geid_144_1932","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","target":"scip-typescript npm next 14.0.3 dist/shared/lib/`head.d.ts`/Head().","attributes":{"type":"uses","at":[361,7,361,11]}},{"key":"geid_144_1933","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#title.","attributes":{"type":"uses","at":[362,9,362,14]}},{"key":"geid_144_1934","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#title.","attributes":{"type":"uses","at":[362,27,362,32]}},{"key":"geid_144_1935","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#meta.","attributes":{"type":"uses","at":[363,9,363,13]}},{"key":"geid_144_1936","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MetaHTMLAttributes#name.","attributes":{"type":"uses","at":[363,14,363,18]}},{"key":"geid_144_1937","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#content.","attributes":{"type":"uses","at":[363,33,363,40]}},{"key":"geid_144_1938","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#meta.","attributes":{"type":"uses","at":[364,9,364,13]}},{"key":"geid_144_1939","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MetaHTMLAttributes#name.","attributes":{"type":"uses","at":[365,10,365,14]}},{"key":"geid_144_1940","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#content.","attributes":{"type":"uses","at":[366,10,366,17]}},{"key":"geid_144_1941","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#link.","attributes":{"type":"uses","at":[368,9,368,13]}},{"key":"geid_144_1942","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#rel.","attributes":{"type":"uses","at":[368,14,368,17]}},{"key":"geid_144_1943","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/LinkHTMLAttributes#href.","attributes":{"type":"uses","at":[368,25,368,29]}},{"key":"geid_144_1944","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","target":"scip-typescript npm next 14.0.3 dist/shared/lib/`head.d.ts`/Head().","attributes":{"type":"uses","at":[369,8,369,12]}},{"key":"geid_144_1945","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#main.","attributes":{"type":"uses","at":[371,9,371,13]}},{"key":"geid_144_1946","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[372,10,372,19]}},{"key":"geid_144_1947","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[374,11,374,14]}},{"key":"geid_144_1948","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[374,15,374,24]}},{"key":"geid_144_1949","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[379,12,379,15]}},{"key":"geid_144_1950","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[381,11,381,14]}},{"key":"geid_144_1951","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[381,15,381,24]}},{"key":"geid_144_1952","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[384,13,384,16]}},{"key":"geid_144_1953","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[384,17,384,26]}},{"key":"geid_144_1954","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[386,14,386,17]}},{"key":"geid_144_1955","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[389,12,389,15]}},{"key":"geid_144_1956","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#main.","attributes":{"type":"uses","at":[390,10,390,14]}},{"key":"geid_144_1957","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.context.tsx`/HomeContext.","attributes":{"type":"uses","at":[392,6,392,17]}},{"key":"geid_144_1958","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/Context#Provider.","attributes":{"type":"uses","at":[392,18,392,26]}},{"key":"geid_144_1959","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/Home.","attributes":{"type":"uses","at":[395,15,395,19]}},{"key":"geid_144_1960","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/","target":"scip-typescript npm next 14.0.3 types/`index.d.ts`/GetServerSideProps#","attributes":{"type":"uses","at":[397,33,397,51]}},{"key":"geid_144_1961","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/getServerSideProps.","target":"scip-typescript npm next 14.0.3 types/`index.d.ts`/GetServerSidePropsContext#typeLiteral229:locale.","attributes":{"type":"uses","at":[397,63,397,69]}},{"key":"geid_144_1962","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/getServerSideProps.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/process.","attributes":{"type":"uses","at":[399,5,399,12]}},{"key":"geid_144_1963","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/getServerSideProps.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/process.","attributes":{"type":"uses","at":[399,5,399,12]}},{"key":"geid_144_1964","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/getServerSideProps.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/NodeJS/Process#env.","attributes":{"type":"uses","at":[399,13,399,16]}},{"key":"geid_144_1965","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/getServerSideProps.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/process.","attributes":{"type":"uses","at":[401,8,401,15]}},{"key":"geid_144_1966","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/getServerSideProps.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/process.","attributes":{"type":"uses","at":[401,8,401,15]}},{"key":"geid_144_1967","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/getServerSideProps.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/NodeJS/Process#env.","attributes":{"type":"uses","at":[401,16,401,19]}},{"key":"geid_144_1968","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/getServerSideProps.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/process.","attributes":{"type":"uses","at":[403,6,403,13]}},{"key":"geid_144_1969","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/getServerSideProps.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/process.","attributes":{"type":"uses","at":[403,6,403,13]}},{"key":"geid_144_1970","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/getServerSideProps.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/NodeJS/Process#env.","attributes":{"type":"uses","at":[403,14,403,17]}},{"key":"geid_144_1971","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/getServerSideProps.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/process.","attributes":{"type":"uses","at":[408,23,408,30]}},{"key":"geid_144_1972","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/getServerSideProps.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/process.","attributes":{"type":"uses","at":[408,23,408,30]}},{"key":"geid_144_1973","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/getServerSideProps.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/NodeJS/Process#env.","attributes":{"type":"uses","at":[408,31,408,34]}},{"key":"geid_144_1974","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/getServerSideProps.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/process.","attributes":{"type":"uses","at":[409,22,409,29]}},{"key":"geid_144_1975","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/getServerSideProps.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/process.","attributes":{"type":"uses","at":[409,22,409,29]}},{"key":"geid_144_1976","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/getServerSideProps.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/NodeJS/Process#env.","attributes":{"type":"uses","at":[409,30,409,33]}},{"key":"geid_144_1977","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/getServerSideProps.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`globals.d.ts`/process.","attributes":{"type":"uses","at":[417,31,417,38]}},{"key":"geid_144_1978","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/getServerSideProps.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/process.","attributes":{"type":"uses","at":[417,31,417,38]}},{"key":"geid_144_1979","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.tsx`/getServerSideProps.","target":"scip-typescript npm @types/node 20.9.3 `ts4.8`/`process.d.ts`/`\"process\"`/global/NodeJS/Process#env.","attributes":{"type":"uses","at":[417,39,417,42]}},{"key":"geid_144_1980","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.state.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.state.tsx`/HomeInitialState#","attributes":{"type":"defines","at":[7,0,29,1]}},{"key":"geid_144_1981","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.state.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.state.tsx`/HomeInitialState#","attributes":{"type":"uses","at":[31,27,31,43]}},{"key":"geid_144_1982","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.context.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.context.tsx`/HomeContextProps#","attributes":{"type":"defines","at":[10,0,22,1]}},{"key":"geid_144_1983","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.context.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/Dispatch#","attributes":{"type":"uses","at":[0,9,0,17]}},{"key":"geid_144_1984","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.context.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/createContext().","attributes":{"type":"uses","at":[0,19,0,32]}},{"key":"geid_144_1985","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.context.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/","attributes":{"type":"uses","at":[0,40,0,47]}},{"key":"geid_144_1986","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.context.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.state.tsx`/HomeInitialState#","attributes":{"type":"uses","at":[8,9,8,25]}},{"key":"geid_144_1987","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.context.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.state.tsx`/","attributes":{"type":"uses","at":[8,33,8,47]}},{"key":"geid_144_1988","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.context.tsx`/HomeContextProps#","target":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.state.tsx`/HomeInitialState#","attributes":{"type":"uses","at":[11,9,11,25]}},{"key":"geid_144_1989","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.context.tsx`/HomeContextProps#","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/Dispatch#","attributes":{"type":"uses","at":[12,12,12,20]}},{"key":"geid_144_1990","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.context.tsx`/HomeContextProps#","target":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.state.tsx`/HomeInitialState#","attributes":{"type":"uses","at":[12,32,12,48]}},{"key":"geid_144_1991","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.context.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/createContext().","attributes":{"type":"uses","at":[24,20,24,33]}},{"key":"geid_144_1992","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.context.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.context.tsx`/HomeContextProps#","attributes":{"type":"uses","at":[24,34,24,50]}},{"key":"geid_144_1993","source":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.context.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 pages/api/home/`home.context.tsx`/HomeContext.","attributes":{"type":"uses","at":[26,15,26,26]}},{"key":"geid_144_1994","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/OpenSidebarButton.","attributes":{"type":"defines","at":[28,33,41,1]}},{"key":"geid_144_1995","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/CloseSidebarButton.","attributes":{"type":"defines","at":[7,34,26,1]}},{"key":"geid_144_1996","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/Props#","attributes":{"type":"defines","at":[2,0,5,1]}},{"key":"geid_144_1997","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/CloseSidebarButton.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/Props#onClick.","attributes":{"type":"uses","at":[7,37,7,44]}},{"key":"geid_144_1998","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/CloseSidebarButton.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/Props#side.","attributes":{"type":"uses","at":[7,46,7,50]}},{"key":"geid_144_1999","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/CloseSidebarButton.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/Props#","attributes":{"type":"uses","at":[7,54,7,59]}},{"key":"geid_144_2000","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/CloseSidebarButton.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[10,7,10,13]}},{"key":"geid_144_2001","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/CloseSidebarButton.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[11,8,11,17]}},{"key":"geid_144_2002","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/CloseSidebarButton.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onClick.","attributes":{"type":"uses","at":[16,8,16,15]}},{"key":"geid_144_2003","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/CloseSidebarButton.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[19,8,19,14]}},{"key":"geid_144_2004","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/CloseSidebarButton.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[20,7,20,10]}},{"key":"geid_144_2005","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/CloseSidebarButton.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onClick.","attributes":{"type":"uses","at":[21,8,21,15]}},{"key":"geid_144_2006","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/CloseSidebarButton.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[22,8,22,17]}},{"key":"geid_144_2007","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/CloseSidebarButton.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[23,9,23,12]}},{"key":"geid_144_2008","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/OpenSidebarButton.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/Props#onClick.","attributes":{"type":"uses","at":[28,36,28,43]}},{"key":"geid_144_2009","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/OpenSidebarButton.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/Props#side.","attributes":{"type":"uses","at":[28,45,28,49]}},{"key":"geid_144_2010","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/OpenSidebarButton.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/Props#","attributes":{"type":"uses","at":[28,53,28,58]}},{"key":"geid_144_2011","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/OpenSidebarButton.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[30,5,30,11]}},{"key":"geid_144_2012","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/OpenSidebarButton.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[31,6,31,15]}},{"key":"geid_144_2013","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/OpenSidebarButton.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onClick.","attributes":{"type":"uses","at":[36,6,36,13]}},{"key":"geid_144_2014","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/components/`OpenCloseButton.tsx`/OpenSidebarButton.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[39,6,39,12]}},{"key":"geid_144_2015","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompts.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompts.tsx`/Prompts.","attributes":{"type":"defines","at":[10,34,21,1]}},{"key":"geid_144_2016","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompts.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompts.tsx`/Props#","attributes":{"type":"defines","at":[6,0,8,1]}},{"key":"geid_144_2017","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompts.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#","attributes":{"type":"uses","at":[0,9,0,11]}},{"key":"geid_144_2018","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompts.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/","attributes":{"type":"uses","at":[0,19,0,26]}},{"key":"geid_144_2019","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompts.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","attributes":{"type":"uses","at":[4,9,4,24]}},{"key":"geid_144_2020","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompts.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/","attributes":{"type":"uses","at":[4,32,4,42]}},{"key":"geid_144_2021","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompts.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#","attributes":{"type":"uses","at":[10,22,10,24]}},{"key":"geid_144_2022","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompts.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompts.tsx`/Props#","attributes":{"type":"uses","at":[10,25,10,30]}},{"key":"geid_144_2023","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompts.tsx`/Prompts.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompts.tsx`/Props#prompts.","attributes":{"type":"uses","at":[10,37,10,44]}},{"key":"geid_144_2024","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompts.tsx`/Prompts.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[12,5,12,8]}},{"key":"geid_144_2025","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompts.tsx`/Prompts.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[12,9,12,18]}},{"key":"geid_144_2026","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompts.tsx`/Prompts.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","attributes":{"type":"uses","at":[17,11,17,26]}},{"key":"geid_144_2027","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompts.tsx`/Prompts.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/Props#prompt.","attributes":{"type":"uses","at":[17,39,17,45]}},{"key":"geid_144_2028","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompts.tsx`/Prompts.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[19,6,19,9]}},{"key":"geid_144_2029","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptbarSettings.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptbarSettings.tsx`/PromptbarSettings.","attributes":{"type":"defines","at":[4,44,6,1]}},{"key":"geid_144_2030","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptbarSettings.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptbarSettings.tsx`/Props#","attributes":{"type":"defines","at":[2,0,2,18]}},{"key":"geid_144_2031","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptbarSettings.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#","attributes":{"type":"uses","at":[0,9,0,11]}},{"key":"geid_144_2032","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptbarSettings.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/","attributes":{"type":"uses","at":[0,19,0,26]}},{"key":"geid_144_2033","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptbarSettings.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#","attributes":{"type":"uses","at":[4,32,4,34]}},{"key":"geid_144_2034","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptbarSettings.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptbarSettings.tsx`/Props#","attributes":{"type":"uses","at":[4,35,4,40]}},{"key":"geid_144_2035","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptbarSettings.tsx`/PromptbarSettings.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[5,10,5,13]}},{"key":"geid_144_2036","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptbarSettings.tsx`/PromptbarSettings.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[5,16,5,19]}},{"key":"geid_144_2037","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","attributes":{"type":"defines","at":[12,38,129,1]}},{"key":"geid_144_2038","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/Props#","attributes":{"type":"defines","at":[6,0,10,1]}},{"key":"geid_144_2039","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#","attributes":{"type":"uses","at":[0,9,0,11]}},{"key":"geid_144_2040","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#","attributes":{"type":"uses","at":[0,13,0,26]}},{"key":"geid_144_2041","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().","attributes":{"type":"uses","at":[0,28,0,37]}},{"key":"geid_144_2042","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().","attributes":{"type":"uses","at":[0,39,0,45]}},{"key":"geid_144_2043","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[0,47,0,55]}},{"key":"geid_144_2044","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/","attributes":{"type":"uses","at":[0,63,0,70]}},{"key":"geid_144_2045","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#","attributes":{"type":"uses","at":[12,26,12,28]}},{"key":"geid_144_2046","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/Props#","attributes":{"type":"uses","at":[12,29,12,34]}},{"key":"geid_144_2047","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/Props#prompt.","attributes":{"type":"uses","at":[12,41,12,47]}},{"key":"geid_144_2048","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/Props#onClose.","attributes":{"type":"uses","at":[12,49,12,56]}},{"key":"geid_144_2049","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/Props#onUpdatePrompt.","attributes":{"type":"uses","at":[12,58,12,72]}},{"key":"geid_144_2050","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[14,26,14,34]}},{"key":"geid_144_2051","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[15,40,15,48]}},{"key":"geid_144_2052","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[16,32,16,40]}},{"key":"geid_144_2053","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().","attributes":{"type":"uses","at":[18,19,18,25]}},{"key":"geid_144_2054","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLDivElement#","attributes":{"type":"uses","at":[18,26,18,40]}},{"key":"geid_144_2055","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().","attributes":{"type":"uses","at":[19,23,19,29]}},{"key":"geid_144_2056","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLInputElement#","attributes":{"type":"uses","at":[19,30,19,46]}},{"key":"geid_144_2057","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#","attributes":{"type":"uses","at":[21,26,21,39]}},{"key":"geid_144_2058","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLDivElement#","attributes":{"type":"uses","at":[21,40,21,54]}},{"key":"geid_144_2059","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#key.","attributes":{"type":"uses","at":[22,10,22,13]}},{"key":"geid_144_2060","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#shiftKey.","attributes":{"type":"uses","at":[22,32,22,40]}},{"key":"geid_144_2061","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().","attributes":{"type":"uses","at":[28,2,28,11]}},{"key":"geid_144_2062","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/MouseEvent#","attributes":{"type":"uses","at":[29,32,29,42]}},{"key":"geid_144_2063","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[30,19,30,26]}},{"key":"geid_144_2064","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[30,40,30,47]}},{"key":"geid_144_2065","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/MouseEvent#","attributes":{"type":"uses","at":[35,30,35,40]}},{"key":"geid_144_2066","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().","attributes":{"type":"uses","at":[47,2,47,11]}},{"key":"geid_144_2067","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[48,17,48,24]}},{"key":"geid_144_2068","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[52,5,52,8]}},{"key":"geid_144_2069","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[53,6,53,15]}},{"key":"geid_144_2070","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onKeyDown.","attributes":{"type":"uses","at":[54,6,54,15]}},{"key":"geid_144_2071","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[56,7,56,10]}},{"key":"geid_144_2072","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[56,11,56,20]}},{"key":"geid_144_2073","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[57,9,57,12]}},{"key":"geid_144_2074","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[57,13,57,22]}},{"key":"geid_144_2075","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[58,11,58,14]}},{"key":"geid_144_2076","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[59,12,59,21]}},{"key":"geid_144_2077","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/AriaAttributes#`\"aria-hidden\"`.","attributes":{"type":"uses","at":[60,12,60,23]}},{"key":"geid_144_2078","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[63,11,63,14]}},{"key":"geid_144_2079","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ClassAttributes#ref.","attributes":{"type":"uses","at":[64,12,64,15]}},{"key":"geid_144_2080","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[65,12,65,21]}},{"key":"geid_144_2081","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#role.","attributes":{"type":"uses","at":[66,12,66,16]}},{"key":"geid_144_2082","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[68,13,68,16]}},{"key":"geid_144_2083","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[68,17,68,26]}},{"key":"geid_144_2084","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[70,14,70,17]}},{"key":"geid_144_2085","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#input.","attributes":{"type":"uses","at":[71,13,71,18]}},{"key":"geid_144_2086","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ClassAttributes#ref.","attributes":{"type":"uses","at":[72,14,72,17]}},{"key":"geid_144_2087","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[73,14,73,23]}},{"key":"geid_144_2088","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#placeholder.","attributes":{"type":"uses","at":[74,14,74,25]}},{"key":"geid_144_2089","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#value.","attributes":{"type":"uses","at":[75,14,75,19]}},{"key":"geid_144_2090","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#onChange.","attributes":{"type":"uses","at":[76,14,76,22]}},{"key":"geid_144_2091","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ChangeEvent#target.","attributes":{"type":"uses","at":[76,41,76,47]}},{"key":"geid_144_2092","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[79,13,79,16]}},{"key":"geid_144_2093","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[79,17,79,26]}},{"key":"geid_144_2094","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[81,14,81,17]}},{"key":"geid_144_2095","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#textarea.","attributes":{"type":"uses","at":[82,13,82,21]}},{"key":"geid_144_2096","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[83,14,83,23]}},{"key":"geid_144_2097","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#style.","attributes":{"type":"uses","at":[84,14,84,19]}},{"key":"geid_144_2098","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/TextareaHTMLAttributes#placeholder.","attributes":{"type":"uses","at":[85,14,85,25]}},{"key":"geid_144_2099","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/TextareaHTMLAttributes#value.","attributes":{"type":"uses","at":[86,14,86,19]}},{"key":"geid_144_2100","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/TextareaHTMLAttributes#onChange.","attributes":{"type":"uses","at":[87,14,87,22]}},{"key":"geid_144_2101","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ChangeEvent#target.","attributes":{"type":"uses","at":[87,48,87,54]}},{"key":"geid_144_2102","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/TextareaHTMLAttributes#rows.","attributes":{"type":"uses","at":[88,14,88,18]}},{"key":"geid_144_2103","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[91,13,91,16]}},{"key":"geid_144_2104","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[91,17,91,26]}},{"key":"geid_144_2105","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[93,14,93,17]}},{"key":"geid_144_2106","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#textarea.","attributes":{"type":"uses","at":[94,13,94,21]}},{"key":"geid_144_2107","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[95,14,95,23]}},{"key":"geid_144_2108","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#style.","attributes":{"type":"uses","at":[96,14,96,19]}},{"key":"geid_144_2109","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/TextareaHTMLAttributes#placeholder.","attributes":{"type":"uses","at":[97,14,97,25]}},{"key":"geid_144_2110","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/TextareaHTMLAttributes#value.","attributes":{"type":"uses","at":[102,14,102,19]}},{"key":"geid_144_2111","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/TextareaHTMLAttributes#onChange.","attributes":{"type":"uses","at":[103,14,103,22]}},{"key":"geid_144_2112","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ChangeEvent#target.","attributes":{"type":"uses","at":[103,44,103,50]}},{"key":"geid_144_2113","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/TextareaHTMLAttributes#rows.","attributes":{"type":"uses","at":[104,14,104,18]}},{"key":"geid_144_2114","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[107,13,107,19]}},{"key":"geid_144_2115","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ButtonHTMLAttributes#type.","attributes":{"type":"uses","at":[108,14,108,18]}},{"key":"geid_144_2116","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[109,14,109,23]}},{"key":"geid_144_2117","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onClick.","attributes":{"type":"uses","at":[110,14,110,21]}},{"key":"geid_144_2118","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[123,14,123,20]}},{"key":"geid_144_2119","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[124,12,124,15]}},{"key":"geid_144_2120","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[125,10,125,13]}},{"key":"geid_144_2121","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[126,8,126,11]}},{"key":"geid_144_2122","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[127,6,127,9]}},{"key":"geid_144_2123","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptFolders.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptFolders.tsx`/PromptFolders.","attributes":{"type":"defines","at":[11,29,63,1]}},{"key":"geid_144_2124","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptFolders.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().","attributes":{"type":"uses","at":[0,9,0,19]}},{"key":"geid_144_2125","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptFolders.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().","attributes":{"type":"uses","at":[0,9,0,19]}},{"key":"geid_144_2126","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptFolders.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/","attributes":{"type":"uses","at":[0,27,0,34]}},{"key":"geid_144_2127","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptFolders.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/PromptbarContext.","attributes":{"type":"uses","at":[9,7,9,23]}},{"key":"geid_144_2128","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptFolders.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/","attributes":{"type":"uses","at":[9,29,9,51]}},{"key":"geid_144_2129","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptFolders.tsx`/PromptFolders.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().","attributes":{"type":"uses","at":[14,6,14,16]}},{"key":"geid_144_2130","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptFolders.tsx`/PromptFolders.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().","attributes":{"type":"uses","at":[14,6,14,16]}},{"key":"geid_144_2131","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptFolders.tsx`/PromptFolders.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/PromptbarContextProps#state.","attributes":{"type":"uses","at":[17,4,17,9]}},{"key":"geid_144_2132","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptFolders.tsx`/PromptFolders.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.state.tsx`/PromptbarInitialState#searchTerm.","attributes":{"type":"uses","at":[17,13,17,23]}},{"key":"geid_144_2133","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptFolders.tsx`/PromptFolders.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`Promptbar.state.tsx`/PromptbarInitialState#filteredPrompts.","attributes":{"type":"uses","at":[17,25,17,40]}},{"key":"geid_144_2134","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptFolders.tsx`/PromptFolders.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/PromptbarContextProps#handleUpdatePrompt.","attributes":{"type":"uses","at":[18,4,18,22]}},{"key":"geid_144_2135","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptFolders.tsx`/PromptFolders.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().","attributes":{"type":"uses","at":[19,6,19,16]}},{"key":"geid_144_2136","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptFolders.tsx`/PromptFolders.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().","attributes":{"type":"uses","at":[19,6,19,16]}},{"key":"geid_144_2137","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptFolders.tsx`/PromptFolders.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/PromptbarContext.","attributes":{"type":"uses","at":[19,17,19,33]}},{"key":"geid_144_2138","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptFolders.tsx`/PromptFolders.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[40,13,40,16]}},{"key":"geid_144_2139","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptFolders.tsx`/PromptFolders.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/Attributes#key.","attributes":{"type":"uses","at":[40,17,40,20]}},{"key":"geid_144_2140","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptFolders.tsx`/PromptFolders.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[40,29,40,38]}},{"key":"geid_144_2141","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptFolders.tsx`/PromptFolders.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[42,14,42,17]}},{"key":"geid_144_2142","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptFolders.tsx`/PromptFolders.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[48,5,48,8]}},{"key":"geid_144_2143","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptFolders.tsx`/PromptFolders.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[48,9,48,18]}},{"key":"geid_144_2144","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptFolders.tsx`/PromptFolders.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[61,6,61,9]}},{"key":"geid_144_2145","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","attributes":{"type":"defines","at":[25,31,129,1]}},{"key":"geid_144_2146","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/Props#","attributes":{"type":"defines","at":[21,0,23,1]}},{"key":"geid_144_2147","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DragEvent#","attributes":{"type":"uses","at":[7,2,7,11]}},{"key":"geid_144_2148","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MouseEventHandler#","attributes":{"type":"uses","at":[8,2,8,19]}},{"key":"geid_144_2149","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().","attributes":{"type":"uses","at":[9,2,9,12]}},{"key":"geid_144_2150","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().","attributes":{"type":"uses","at":[9,2,9,12]}},{"key":"geid_144_2151","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().","attributes":{"type":"uses","at":[10,2,10,11]}},{"key":"geid_144_2152","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[11,2,11,10]}},{"key":"geid_144_2153","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/","attributes":{"type":"uses","at":[12,7,12,14]}},{"key":"geid_144_2154","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/PromptbarContext.","attributes":{"type":"uses","at":[18,7,18,23]}},{"key":"geid_144_2155","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/","attributes":{"type":"uses","at":[18,29,18,51]}},{"key":"geid_144_2156","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","attributes":{"type":"uses","at":[19,9,19,20]}},{"key":"geid_144_2157","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/","attributes":{"type":"uses","at":[19,28,19,43]}},{"key":"geid_144_2158","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/Props#prompt.","attributes":{"type":"uses","at":[25,34,25,40]}},{"key":"geid_144_2159","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/Props#","attributes":{"type":"uses","at":[25,44,25,49]}},{"key":"geid_144_2160","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/PromptbarContextProps#dispatch.","attributes":{"type":"uses","at":[27,4,27,12]}},{"key":"geid_144_2161","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/PromptbarContextProps#handleUpdatePrompt.","attributes":{"type":"uses","at":[28,4,28,22]}},{"key":"geid_144_2162","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/PromptbarContextProps#handleDeletePrompt.","attributes":{"type":"uses","at":[29,4,29,22]}},{"key":"geid_144_2163","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().","attributes":{"type":"uses","at":[30,6,30,16]}},{"key":"geid_144_2164","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().","attributes":{"type":"uses","at":[30,6,30,16]}},{"key":"geid_144_2165","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/`PromptBar.context.tsx`/PromptbarContext.","attributes":{"type":"uses","at":[30,17,30,33]}},{"key":"geid_144_2166","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[32,36,32,44]}},{"key":"geid_144_2167","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[33,38,33,46]}},{"key":"geid_144_2168","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[34,38,34,46]}},{"key":"geid_144_2169","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[35,40,35,48]}},{"key":"geid_144_2170","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MouseEventHandler#","attributes":{"type":"uses","at":[42,22,42,39]}},{"key":"geid_144_2171","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLButtonElement#","attributes":{"type":"uses","at":[42,40,42,57]}},{"key":"geid_144_2172","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/BaseSyntheticEvent#stopPropagation().","attributes":{"type":"uses","at":[43,6,43,21]}},{"key":"geid_144_2173","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MouseEventHandler#","attributes":{"type":"uses","at":[53,28,53,45]}},{"key":"geid_144_2174","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLButtonElement#","attributes":{"type":"uses","at":[53,46,53,63]}},{"key":"geid_144_2175","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/BaseSyntheticEvent#stopPropagation().","attributes":{"type":"uses","at":[54,6,54,21]}},{"key":"geid_144_2176","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MouseEventHandler#","attributes":{"type":"uses","at":[58,31,58,48]}},{"key":"geid_144_2177","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLButtonElement#","attributes":{"type":"uses","at":[58,49,58,66]}},{"key":"geid_144_2178","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/BaseSyntheticEvent#stopPropagation().","attributes":{"type":"uses","at":[59,6,59,21]}},{"key":"geid_144_2179","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DragEvent#","attributes":{"type":"uses","at":[63,30,63,39]}},{"key":"geid_144_2180","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLButtonElement#","attributes":{"type":"uses","at":[63,40,63,57]}},{"key":"geid_144_2181","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DragEvent#dataTransfer.","attributes":{"type":"uses","at":[64,10,64,22]}},{"key":"geid_144_2182","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DragEvent#dataTransfer.","attributes":{"type":"uses","at":[65,8,65,20]}},{"key":"geid_144_2183","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().","attributes":{"type":"uses","at":[69,2,69,11]}},{"key":"geid_144_2184","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[78,5,78,8]}},{"key":"geid_144_2185","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[78,9,78,18]}},{"key":"geid_144_2186","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[79,7,79,13]}},{"key":"geid_144_2187","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[80,8,80,17]}},{"key":"geid_144_2188","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#draggable.","attributes":{"type":"uses","at":[81,8,81,17]}},{"key":"geid_144_2189","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onClick.","attributes":{"type":"uses","at":[82,8,82,15]}},{"key":"geid_144_2190","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/BaseSyntheticEvent#stopPropagation().","attributes":{"type":"uses","at":[83,12,83,27]}},{"key":"geid_144_2191","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onDragStart.","attributes":{"type":"uses","at":[86,8,86,19]}},{"key":"geid_144_2192","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onMouseLeave.","attributes":{"type":"uses","at":[87,8,87,20]}},{"key":"geid_144_2193","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[95,9,95,12]}},{"key":"geid_144_2194","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[95,13,95,22]}},{"key":"geid_144_2195","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[97,10,97,13]}},{"key":"geid_144_2196","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[98,8,98,14]}},{"key":"geid_144_2197","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[101,9,101,12]}},{"key":"geid_144_2198","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[101,13,101,22]}},{"key":"geid_144_2199","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[109,10,109,13]}},{"key":"geid_144_2200","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[113,9,113,12]}},{"key":"geid_144_2201","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[113,13,113,22]}},{"key":"geid_144_2202","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[117,10,117,13]}},{"key":"geid_144_2203","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/PromptModal.","attributes":{"type":"uses","at":[121,9,121,20]}},{"key":"geid_144_2204","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/Props#prompt.","attributes":{"type":"uses","at":[122,10,122,16]}},{"key":"geid_144_2205","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/Props#onClose.","attributes":{"type":"uses","at":[123,10,123,17]}},{"key":"geid_144_2206","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`PromptModal.tsx`/Props#onUpdatePrompt.","attributes":{"type":"uses","at":[124,10,124,24]}},{"key":"geid_144_2207","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Promptbar/components/`Prompt.tsx`/PromptComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[127,6,127,9]}},{"key":"geid_144_2208","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","attributes":{"type":"defines","at":[12,26,234,1]}},{"key":"geid_144_2209","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#","attributes":{"type":"uses","at":[1,9,1,22]}},{"key":"geid_144_2210","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().","attributes":{"type":"uses","at":[1,24,1,34]}},{"key":"geid_144_2211","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().","attributes":{"type":"uses","at":[1,24,1,34]}},{"key":"geid_144_2212","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().","attributes":{"type":"uses","at":[1,36,1,45]}},{"key":"geid_144_2213","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().","attributes":{"type":"uses","at":[1,47,1,53]}},{"key":"geid_144_2214","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[1,55,1,63]}},{"key":"geid_144_2215","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/","attributes":{"type":"uses","at":[1,71,1,78]}},{"key":"geid_144_2216","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/ChatbarContext.","attributes":{"type":"uses","at":[10,7,10,21]}},{"key":"geid_144_2217","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/","attributes":{"type":"uses","at":[10,27,10,47]}},{"key":"geid_144_2218","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().","attributes":{"type":"uses","at":[17,6,17,16]}},{"key":"geid_144_2219","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().","attributes":{"type":"uses","at":[17,6,17,16]}},{"key":"geid_144_2220","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/ChatbarContextProps#handlePluginKeyChange.","attributes":{"type":"uses","at":[19,10,19,31]}},{"key":"geid_144_2221","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/ChatbarContextProps#handleClearPluginKey.","attributes":{"type":"uses","at":[19,33,19,53]}},{"key":"geid_144_2222","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().","attributes":{"type":"uses","at":[20,4,20,14]}},{"key":"geid_144_2223","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().","attributes":{"type":"uses","at":[20,4,20,14]}},{"key":"geid_144_2224","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/ChatbarContext.","attributes":{"type":"uses","at":[20,15,20,29]}},{"key":"geid_144_2225","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[22,38,22,46]}},{"key":"geid_144_2226","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useRef().","attributes":{"type":"uses","at":[24,19,24,25]}},{"key":"geid_144_2227","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLDivElement#","attributes":{"type":"uses","at":[24,26,24,40]}},{"key":"geid_144_2228","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#","attributes":{"type":"uses","at":[26,26,26,39]}},{"key":"geid_144_2229","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLDivElement#","attributes":{"type":"uses","at":[26,40,26,54]}},{"key":"geid_144_2230","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#key.","attributes":{"type":"uses","at":[27,10,27,13]}},{"key":"geid_144_2231","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#shiftKey.","attributes":{"type":"uses","at":[27,32,27,40]}},{"key":"geid_144_2232","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/BaseSyntheticEvent#preventDefault().","attributes":{"type":"uses","at":[28,8,28,22]}},{"key":"geid_144_2233","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().","attributes":{"type":"uses","at":[33,2,33,11]}},{"key":"geid_144_2234","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/MouseEvent#","attributes":{"type":"uses","at":[34,32,34,42]}},{"key":"geid_144_2235","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[35,19,35,26]}},{"key":"geid_144_2236","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MutableRefObject#current.","attributes":{"type":"uses","at":[35,40,35,47]}},{"key":"geid_144_2237","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/MouseEvent#","attributes":{"type":"uses","at":[40,30,40,40]}},{"key":"geid_144_2238","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[61,9,61,12]}},{"key":"geid_144_2239","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[62,10,62,19]}},{"key":"geid_144_2240","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onKeyDown.","attributes":{"type":"uses","at":[63,10,63,19]}},{"key":"geid_144_2241","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[65,11,65,14]}},{"key":"geid_144_2242","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[65,15,65,24]}},{"key":"geid_144_2243","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[66,13,66,16]}},{"key":"geid_144_2244","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[66,17,66,26]}},{"key":"geid_144_2245","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[67,15,67,18]}},{"key":"geid_144_2246","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[68,16,68,25]}},{"key":"geid_144_2247","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/AriaAttributes#`\"aria-hidden\"`.","attributes":{"type":"uses","at":[69,16,69,27]}},{"key":"geid_144_2248","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[72,15,72,18]}},{"key":"geid_144_2249","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ClassAttributes#ref.","attributes":{"type":"uses","at":[73,16,73,19]}},{"key":"geid_144_2250","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[74,16,74,25]}},{"key":"geid_144_2251","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#role.","attributes":{"type":"uses","at":[75,16,75,20]}},{"key":"geid_144_2252","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[77,17,77,20]}},{"key":"geid_144_2253","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[77,21,77,30]}},{"key":"geid_144_2254","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[77,61,77,64]}},{"key":"geid_144_2255","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[79,17,79,20]}},{"key":"geid_144_2256","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[79,21,79,30]}},{"key":"geid_144_2257","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[80,19,80,22]}},{"key":"geid_144_2258","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[80,23,80,32]}},{"key":"geid_144_2259","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[80,75,80,78]}},{"key":"geid_144_2260","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[81,19,81,22]}},{"key":"geid_144_2261","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[81,23,81,32]}},{"key":"geid_144_2262","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[84,20,84,23]}},{"key":"geid_144_2263","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[86,19,86,22]}},{"key":"geid_144_2264","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[86,23,86,32]}},{"key":"geid_144_2265","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[88,20,88,23]}},{"key":"geid_144_2266","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#input.","attributes":{"type":"uses","at":[89,19,89,24]}},{"key":"geid_144_2267","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[90,20,90,29]}},{"key":"geid_144_2268","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#type.","attributes":{"type":"uses","at":[91,20,91,24]}},{"key":"geid_144_2269","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#value.","attributes":{"type":"uses","at":[92,20,92,25]}},{"key":"geid_144_2270","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#onChange.","attributes":{"type":"uses","at":[98,20,98,28]}},{"key":"geid_144_2271","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ChangeEvent#target.","attributes":{"type":"uses","at":[115,43,115,49]}},{"key":"geid_144_2272","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ChangeEvent#target.","attributes":{"type":"uses","at":[131,39,131,45]}},{"key":"geid_144_2273","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[145,19,145,22]}},{"key":"geid_144_2274","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[145,23,145,32]}},{"key":"geid_144_2275","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[147,20,147,23]}},{"key":"geid_144_2276","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#input.","attributes":{"type":"uses","at":[148,19,148,24]}},{"key":"geid_144_2277","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[149,20,149,29]}},{"key":"geid_144_2278","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#type.","attributes":{"type":"uses","at":[150,20,150,24]}},{"key":"geid_144_2279","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#value.","attributes":{"type":"uses","at":[151,20,151,25]}},{"key":"geid_144_2280","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#onChange.","attributes":{"type":"uses","at":[157,20,157,28]}},{"key":"geid_144_2281","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ChangeEvent#target.","attributes":{"type":"uses","at":[174,43,174,49]}},{"key":"geid_144_2282","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ChangeEvent#target.","attributes":{"type":"uses","at":[194,39,194,45]}},{"key":"geid_144_2283","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[204,19,204,25]}},{"key":"geid_144_2284","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[205,20,205,29]}},{"key":"geid_144_2285","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onClick.","attributes":{"type":"uses","at":[206,20,206,27]}},{"key":"geid_144_2286","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[217,20,217,26]}},{"key":"geid_144_2287","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[218,18,218,21]}},{"key":"geid_144_2288","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[220,17,220,23]}},{"key":"geid_144_2289","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ButtonHTMLAttributes#type.","attributes":{"type":"uses","at":[221,18,221,22]}},{"key":"geid_144_2290","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[222,18,222,27]}},{"key":"geid_144_2291","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onClick.","attributes":{"type":"uses","at":[223,18,223,25]}},{"key":"geid_144_2292","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[226,18,226,24]}},{"key":"geid_144_2293","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[227,16,227,19]}},{"key":"geid_144_2294","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[228,14,228,17]}},{"key":"geid_144_2295","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[229,12,229,15]}},{"key":"geid_144_2296","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[230,10,230,13]}},{"key":"geid_144_2297","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversations.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversations.tsx`/Conversations.","attributes":{"type":"defines","at":[8,29,20,1]}},{"key":"geid_144_2298","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversations.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversations.tsx`/Props#","attributes":{"type":"defines","at":[4,0,6,1]}},{"key":"geid_144_2299","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversations.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","attributes":{"type":"uses","at":[2,9,2,30]}},{"key":"geid_144_2300","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversations.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/","attributes":{"type":"uses","at":[2,38,2,54]}},{"key":"geid_144_2301","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversations.tsx`/Conversations.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversations.tsx`/Props#conversations.","attributes":{"type":"uses","at":[8,32,8,45]}},{"key":"geid_144_2302","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversations.tsx`/Conversations.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversations.tsx`/Props#","attributes":{"type":"uses","at":[8,49,8,54]}},{"key":"geid_144_2303","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversations.tsx`/Conversations.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[10,5,10,8]}},{"key":"geid_144_2304","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversations.tsx`/Conversations.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[10,9,10,18]}},{"key":"geid_144_2305","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversations.tsx`/Conversations.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","attributes":{"type":"uses","at":[16,11,16,32]}},{"key":"geid_144_2306","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversations.tsx`/Conversations.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/Props#conversation.","attributes":{"type":"uses","at":[16,45,16,57]}},{"key":"geid_144_2307","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversations.tsx`/Conversations.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[18,6,18,9]}},{"key":"geid_144_2308","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","attributes":{"type":"defines","at":[27,37,167,1]}},{"key":"geid_144_2309","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/Props#","attributes":{"type":"defines","at":[23,0,25,1]}},{"key":"geid_144_2310","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DragEvent#","attributes":{"type":"uses","at":[8,2,8,11]}},{"key":"geid_144_2311","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#","attributes":{"type":"uses","at":[9,2,9,15]}},{"key":"geid_144_2312","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MouseEventHandler#","attributes":{"type":"uses","at":[10,2,10,19]}},{"key":"geid_144_2313","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().","attributes":{"type":"uses","at":[11,2,11,12]}},{"key":"geid_144_2314","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().","attributes":{"type":"uses","at":[11,2,11,12]}},{"key":"geid_144_2315","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().","attributes":{"type":"uses","at":[12,2,12,11]}},{"key":"geid_144_2316","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[13,2,13,10]}},{"key":"geid_144_2317","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/","attributes":{"type":"uses","at":[14,7,14,14]}},{"key":"geid_144_2318","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/Props#conversation.","attributes":{"type":"uses","at":[27,40,27,52]}},{"key":"geid_144_2319","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/Props#","attributes":{"type":"uses","at":[27,56,27,61]}},{"key":"geid_144_2320","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().","attributes":{"type":"uses","at":[32,6,32,16]}},{"key":"geid_144_2321","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().","attributes":{"type":"uses","at":[32,6,32,16]}},{"key":"geid_144_2322","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().","attributes":{"type":"uses","at":[34,39,34,49]}},{"key":"geid_144_2323","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().","attributes":{"type":"uses","at":[34,39,34,49]}},{"key":"geid_144_2324","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[36,38,36,46]}},{"key":"geid_144_2325","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[37,38,37,46]}},{"key":"geid_144_2326","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[38,40,38,48]}},{"key":"geid_144_2327","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#","attributes":{"type":"uses","at":[40,30,40,43]}},{"key":"geid_144_2328","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLDivElement#","attributes":{"type":"uses","at":[40,44,40,58]}},{"key":"geid_144_2329","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/KeyboardEvent#key.","attributes":{"type":"uses","at":[41,10,41,13]}},{"key":"geid_144_2330","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/BaseSyntheticEvent#preventDefault().","attributes":{"type":"uses","at":[42,8,42,22]}},{"key":"geid_144_2331","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DragEvent#","attributes":{"type":"uses","at":[48,7,48,16]}},{"key":"geid_144_2332","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLButtonElement#","attributes":{"type":"uses","at":[48,17,48,34]}},{"key":"geid_144_2333","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DragEvent#dataTransfer.","attributes":{"type":"uses","at":[51,10,51,22]}},{"key":"geid_144_2334","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DragEvent#dataTransfer.","attributes":{"type":"uses","at":[52,8,52,20]}},{"key":"geid_144_2335","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MouseEventHandler#","attributes":{"type":"uses","at":[67,23,67,40]}},{"key":"geid_144_2336","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLButtonElement#","attributes":{"type":"uses","at":[67,41,67,58]}},{"key":"geid_144_2337","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/BaseSyntheticEvent#stopPropagation().","attributes":{"type":"uses","at":[68,6,68,21]}},{"key":"geid_144_2338","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MouseEventHandler#","attributes":{"type":"uses","at":[78,22,78,39]}},{"key":"geid_144_2339","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLButtonElement#","attributes":{"type":"uses","at":[78,40,78,57]}},{"key":"geid_144_2340","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/BaseSyntheticEvent#stopPropagation().","attributes":{"type":"uses","at":[79,6,79,21]}},{"key":"geid_144_2341","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MouseEventHandler#","attributes":{"type":"uses","at":[84,31,84,48]}},{"key":"geid_144_2342","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLButtonElement#","attributes":{"type":"uses","at":[84,49,84,66]}},{"key":"geid_144_2343","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/BaseSyntheticEvent#stopPropagation().","attributes":{"type":"uses","at":[85,6,85,21]}},{"key":"geid_144_2344","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MouseEventHandler#","attributes":{"type":"uses","at":[89,31,89,48]}},{"key":"geid_144_2345","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLButtonElement#","attributes":{"type":"uses","at":[89,49,89,66]}},{"key":"geid_144_2346","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/BaseSyntheticEvent#stopPropagation().","attributes":{"type":"uses","at":[90,6,90,21]}},{"key":"geid_144_2347","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useEffect().","attributes":{"type":"uses","at":[94,2,94,11]}},{"key":"geid_144_2348","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[103,5,103,8]}},{"key":"geid_144_2349","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[103,9,103,18]}},{"key":"geid_144_2350","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[105,9,105,12]}},{"key":"geid_144_2351","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[105,13,105,22]}},{"key":"geid_144_2352","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#input.","attributes":{"type":"uses","at":[107,11,107,16]}},{"key":"geid_144_2353","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[108,12,108,21]}},{"key":"geid_144_2354","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#type.","attributes":{"type":"uses","at":[109,12,109,16]}},{"key":"geid_144_2355","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#value.","attributes":{"type":"uses","at":[110,12,110,17]}},{"key":"geid_144_2356","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/InputHTMLAttributes#onChange.","attributes":{"type":"uses","at":[111,12,111,20]}},{"key":"geid_144_2357","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ChangeEvent#target.","attributes":{"type":"uses","at":[111,46,111,52]}},{"key":"geid_144_2358","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onKeyDown.","attributes":{"type":"uses","at":[112,12,112,21]}},{"key":"geid_144_2359","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#autoFocus.","attributes":{"type":"uses","at":[113,12,113,21]}},{"key":"geid_144_2360","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[115,10,115,13]}},{"key":"geid_144_2361","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[117,9,117,15]}},{"key":"geid_144_2362","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[118,10,118,19]}},{"key":"geid_144_2363","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onClick.","attributes":{"type":"uses","at":[125,10,125,17]}},{"key":"geid_144_2364","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ButtonHTMLAttributes#disabled.","attributes":{"type":"uses","at":[126,10,126,18]}},{"key":"geid_144_2365","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#draggable.","attributes":{"type":"uses","at":[127,10,127,19]}},{"key":"geid_144_2366","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onDragStart.","attributes":{"type":"uses","at":[128,10,128,21]}},{"key":"geid_144_2367","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[131,11,131,14]}},{"key":"geid_144_2368","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[132,12,132,21]}},{"key":"geid_144_2369","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[137,12,137,15]}},{"key":"geid_144_2370","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[138,10,138,16]}},{"key":"geid_144_2371","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[143,11,143,14]}},{"key":"geid_144_2372","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[143,15,143,24]}},{"key":"geid_144_2373","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[150,12,150,15]}},{"key":"geid_144_2374","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[156,11,156,14]}},{"key":"geid_144_2375","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[156,15,156,24]}},{"key":"geid_144_2376","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[163,12,163,15]}},{"key":"geid_144_2377","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[165,6,165,9]}},{"key":"geid_144_2378","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ClearConversations.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ClearConversations.tsx`/ClearConversations.","attributes":{"type":"defines","at":[11,45,56,1]}},{"key":"geid_144_2379","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ClearConversations.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ClearConversations.tsx`/Props#","attributes":{"type":"defines","at":[7,0,9,1]}},{"key":"geid_144_2380","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ClearConversations.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#","attributes":{"type":"uses","at":[1,9,1,11]}},{"key":"geid_144_2381","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ClearConversations.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[1,13,1,21]}},{"key":"geid_144_2382","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ClearConversations.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/","attributes":{"type":"uses","at":[1,29,1,36]}},{"key":"geid_144_2383","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ClearConversations.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/FC#","attributes":{"type":"uses","at":[11,33,11,35]}},{"key":"geid_144_2384","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ClearConversations.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ClearConversations.tsx`/Props#","attributes":{"type":"uses","at":[11,36,11,41]}},{"key":"geid_144_2385","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ClearConversations.tsx`/ClearConversations.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ClearConversations.tsx`/Props#onClearConversations.","attributes":{"type":"uses","at":[11,48,11,68]}},{"key":"geid_144_2386","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ClearConversations.tsx`/ClearConversations.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[12,42,12,50]}},{"key":"geid_144_2387","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ClearConversations.tsx`/ClearConversations.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[22,5,22,8]}},{"key":"geid_144_2388","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ClearConversations.tsx`/ClearConversations.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[22,9,22,18]}},{"key":"geid_144_2389","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ClearConversations.tsx`/ClearConversations.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[25,7,25,10]}},{"key":"geid_144_2390","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ClearConversations.tsx`/ClearConversations.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[25,11,25,20]}},{"key":"geid_144_2391","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ClearConversations.tsx`/ClearConversations.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[27,8,27,11]}},{"key":"geid_144_2392","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ClearConversations.tsx`/ClearConversations.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[29,7,29,10]}},{"key":"geid_144_2393","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ClearConversations.tsx`/ClearConversations.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[29,11,29,20]}},{"key":"geid_144_2394","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ClearConversations.tsx`/ClearConversations.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[47,8,47,11]}},{"key":"geid_144_2395","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ClearConversations.tsx`/ClearConversations.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[48,6,48,9]}},{"key":"geid_144_2396","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/ChatbarSettings.","attributes":{"type":"defines","at":[16,31,72,1]}},{"key":"geid_144_2397","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().","attributes":{"type":"uses","at":[1,9,1,19]}},{"key":"geid_144_2398","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().","attributes":{"type":"uses","at":[1,9,1,19]}},{"key":"geid_144_2399","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[1,21,1,29]}},{"key":"geid_144_2400","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/","attributes":{"type":"uses","at":[1,37,1,44]}},{"key":"geid_144_2401","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Import.tsx`/Import.","attributes":{"type":"uses","at":[9,9,9,15]}},{"key":"geid_144_2402","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Import.tsx`/","attributes":{"type":"uses","at":[9,23,9,46]}},{"key":"geid_144_2403","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Key.","attributes":{"type":"uses","at":[10,9,10,12]}},{"key":"geid_144_2404","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/","attributes":{"type":"uses","at":[10,20,10,40]}},{"key":"geid_144_2405","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/SidebarButton.","attributes":{"type":"uses","at":[11,9,11,22]}},{"key":"geid_144_2406","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/","attributes":{"type":"uses","at":[11,30,11,59]}},{"key":"geid_144_2407","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/ChatbarContext.","attributes":{"type":"uses","at":[12,7,12,21]}},{"key":"geid_144_2408","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/","attributes":{"type":"uses","at":[12,27,12,47]}},{"key":"geid_144_2409","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ClearConversations.tsx`/ClearConversations.","attributes":{"type":"uses","at":[13,9,13,27]}},{"key":"geid_144_2410","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ClearConversations.tsx`/","attributes":{"type":"uses","at":[13,35,13,57]}},{"key":"geid_144_2411","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","attributes":{"type":"uses","at":[14,9,14,19]}},{"key":"geid_144_2412","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/","attributes":{"type":"uses","at":[14,27,14,41]}},{"key":"geid_144_2413","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/ChatbarSettings.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useState().","attributes":{"type":"uses","at":[18,52,18,60]}},{"key":"geid_144_2414","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/ChatbarSettings.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().","attributes":{"type":"uses","at":[29,6,29,16]}},{"key":"geid_144_2415","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/ChatbarSettings.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().","attributes":{"type":"uses","at":[29,6,29,16]}},{"key":"geid_144_2416","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/ChatbarSettings.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/ChatbarContextProps#handleClearConversations.","attributes":{"type":"uses","at":[32,4,32,28]}},{"key":"geid_144_2417","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/ChatbarSettings.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/ChatbarContextProps#handleImportConversations.","attributes":{"type":"uses","at":[33,4,33,29]}},{"key":"geid_144_2418","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/ChatbarSettings.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/ChatbarContextProps#handleExportData.","attributes":{"type":"uses","at":[34,4,34,20]}},{"key":"geid_144_2419","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/ChatbarSettings.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/ChatbarContextProps#handleApiKeyChange.","attributes":{"type":"uses","at":[35,4,35,22]}},{"key":"geid_144_2420","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/ChatbarSettings.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().","attributes":{"type":"uses","at":[36,6,36,16]}},{"key":"geid_144_2421","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/ChatbarSettings.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().","attributes":{"type":"uses","at":[36,6,36,16]}},{"key":"geid_144_2422","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/ChatbarSettings.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/`Chatbar.context.tsx`/ChatbarContext.","attributes":{"type":"uses","at":[36,17,36,31]}},{"key":"geid_144_2423","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/ChatbarSettings.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[39,5,39,8]}},{"key":"geid_144_2424","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/ChatbarSettings.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[39,9,39,18]}},{"key":"geid_144_2425","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/ChatbarSettings.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ClearConversations.tsx`/ClearConversations.","attributes":{"type":"uses","at":[41,9,41,27]}},{"key":"geid_144_2426","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/ChatbarSettings.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ClearConversations.tsx`/Props#onClearConversations.","attributes":{"type":"uses","at":[41,28,41,48]}},{"key":"geid_144_2427","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/ChatbarSettings.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Import.tsx`/Import.","attributes":{"type":"uses","at":[44,7,44,13]}},{"key":"geid_144_2428","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/ChatbarSettings.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Import.tsx`/Props#onImport.","attributes":{"type":"uses","at":[44,14,44,22]}},{"key":"geid_144_2429","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/ChatbarSettings.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/SidebarButton.","attributes":{"type":"uses","at":[46,7,46,20]}},{"key":"geid_144_2430","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/ChatbarSettings.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/Props#text.","attributes":{"type":"uses","at":[47,8,47,12]}},{"key":"geid_144_2431","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/ChatbarSettings.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/Props#icon.","attributes":{"type":"uses","at":[48,8,48,12]}},{"key":"geid_144_2432","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/ChatbarSettings.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/Props#onClick.","attributes":{"type":"uses","at":[49,8,49,15]}},{"key":"geid_144_2433","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/ChatbarSettings.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/SidebarButton.","attributes":{"type":"uses","at":[52,7,52,20]}},{"key":"geid_144_2434","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/ChatbarSettings.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/Props#text.","attributes":{"type":"uses","at":[53,8,53,12]}},{"key":"geid_144_2435","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/ChatbarSettings.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/Props#icon.","attributes":{"type":"uses","at":[54,8,54,12]}},{"key":"geid_144_2436","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/ChatbarSettings.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Sidebar/`SidebarButton.tsx`/Props#onClick.","attributes":{"type":"uses","at":[55,8,55,15]}},{"key":"geid_144_2437","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/ChatbarSettings.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Key.","attributes":{"type":"uses","at":[59,9,59,12]}},{"key":"geid_144_2438","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/ChatbarSettings.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Props#apiKey.","attributes":{"type":"uses","at":[59,13,59,19]}},{"key":"geid_144_2439","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/ChatbarSettings.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Settings/`Key.tsx`/Props#onApiKeyChange.","attributes":{"type":"uses","at":[59,29,59,43]}},{"key":"geid_144_2440","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/ChatbarSettings.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`PluginKeys.tsx`/PluginKeys.","attributes":{"type":"uses","at":[62,35,62,45]}},{"key":"geid_144_2441","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatbarSettings.tsx`/ChatbarSettings.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[70,6,70,9]}},{"key":"geid_144_2442","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatFolders.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatFolders.tsx`/ChatFolders.","attributes":{"type":"defines","at":[14,27,63,1]}},{"key":"geid_144_2443","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatFolders.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatFolders.tsx`/Props#","attributes":{"type":"defines","at":[10,0,12,1]}},{"key":"geid_144_2444","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatFolders.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().","attributes":{"type":"uses","at":[0,9,0,19]}},{"key":"geid_144_2445","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatFolders.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().","attributes":{"type":"uses","at":[0,9,0,19]}},{"key":"geid_144_2446","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatFolders.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/","attributes":{"type":"uses","at":[0,27,0,34]}},{"key":"geid_144_2447","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatFolders.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","attributes":{"type":"uses","at":[8,9,8,30]}},{"key":"geid_144_2448","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatFolders.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/","attributes":{"type":"uses","at":[8,38,8,54]}},{"key":"geid_144_2449","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatFolders.tsx`/ChatFolders.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatFolders.tsx`/Props#searchTerm.","attributes":{"type":"uses","at":[14,30,14,40]}},{"key":"geid_144_2450","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatFolders.tsx`/ChatFolders.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatFolders.tsx`/Props#","attributes":{"type":"uses","at":[14,44,14,49]}},{"key":"geid_144_2451","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatFolders.tsx`/ChatFolders.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/useContext().","attributes":{"type":"uses","at":[18,6,18,16]}},{"key":"geid_144_2452","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatFolders.tsx`/ChatFolders.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`canary.d.ts`/`\".\"`/useContext().","attributes":{"type":"uses","at":[18,6,18,16]}},{"key":"geid_144_2453","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatFolders.tsx`/ChatFolders.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[38,15,38,18]}},{"key":"geid_144_2454","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatFolders.tsx`/ChatFolders.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/Attributes#key.","attributes":{"type":"uses","at":[38,19,38,22]}},{"key":"geid_144_2455","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatFolders.tsx`/ChatFolders.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[38,31,38,40]}},{"key":"geid_144_2456","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatFolders.tsx`/ChatFolders.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/ConversationComponent.","attributes":{"type":"uses","at":[39,17,39,38]}},{"key":"geid_144_2457","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatFolders.tsx`/ChatFolders.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`Conversation.tsx`/Props#conversation.","attributes":{"type":"uses","at":[39,39,39,51]}},{"key":"geid_144_2458","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatFolders.tsx`/ChatFolders.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[40,16,40,19]}},{"key":"geid_144_2459","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatFolders.tsx`/ChatFolders.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[48,5,48,8]}},{"key":"geid_144_2460","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatFolders.tsx`/ChatFolders.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[48,9,48,18]}},{"key":"geid_144_2461","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Chatbar/components/`ChatFolders.tsx`/ChatFolders.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#div.","attributes":{"type":"uses","at":[61,6,61,9]}},{"key":"geid_144_2462","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Buttons/SidebarActionButton/`index.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Buttons/SidebarActionButton/`SidebarActionButton.tsx`/SidebarActionButton.","attributes":{"type":"uses","at":[0,9,0,16]}},{"key":"geid_144_2463","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Buttons/SidebarActionButton/`index.ts`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Buttons/SidebarActionButton/`SidebarActionButton.tsx`/","attributes":{"type":"uses","at":[0,24,0,47]}},{"key":"geid_144_2464","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Buttons/SidebarActionButton/`SidebarActionButton.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Buttons/SidebarActionButton/`SidebarActionButton.tsx`/SidebarActionButton.","attributes":{"type":"defines","at":[7,28,14,1]}},{"key":"geid_144_2465","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Buttons/SidebarActionButton/`SidebarActionButton.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Buttons/SidebarActionButton/`SidebarActionButton.tsx`/Props#","attributes":{"type":"defines","at":[2,0,5,1]}},{"key":"geid_144_2466","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Buttons/SidebarActionButton/`SidebarActionButton.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MouseEventHandler#","attributes":{"type":"uses","at":[0,9,0,26]}},{"key":"geid_144_2467","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Buttons/SidebarActionButton/`SidebarActionButton.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ReactElement#","attributes":{"type":"uses","at":[0,28,0,40]}},{"key":"geid_144_2468","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Buttons/SidebarActionButton/`SidebarActionButton.tsx`/","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/","attributes":{"type":"uses","at":[0,48,0,55]}},{"key":"geid_144_2469","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Buttons/SidebarActionButton/`SidebarActionButton.tsx`/Props#","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/MouseEventHandler#","attributes":{"type":"uses","at":[3,15,3,32]}},{"key":"geid_144_2470","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Buttons/SidebarActionButton/`SidebarActionButton.tsx`/Props#","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`global.d.ts`/HTMLButtonElement#","attributes":{"type":"uses","at":[3,33,3,50]}},{"key":"geid_144_2471","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Buttons/SidebarActionButton/`SidebarActionButton.tsx`/Props#","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/ReactElement#","attributes":{"type":"uses","at":[4,12,4,24]}},{"key":"geid_144_2472","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Buttons/SidebarActionButton/`SidebarActionButton.tsx`/SidebarActionButton.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Buttons/SidebarActionButton/`SidebarActionButton.tsx`/Props#handleClick.","attributes":{"type":"uses","at":[7,31,7,42]}},{"key":"geid_144_2473","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Buttons/SidebarActionButton/`SidebarActionButton.tsx`/SidebarActionButton.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Buttons/SidebarActionButton/`SidebarActionButton.tsx`/Props#children.","attributes":{"type":"uses","at":[7,44,7,52]}},{"key":"geid_144_2474","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Buttons/SidebarActionButton/`SidebarActionButton.tsx`/SidebarActionButton.","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Buttons/SidebarActionButton/`SidebarActionButton.tsx`/Props#","attributes":{"type":"uses","at":[7,56,7,61]}},{"key":"geid_144_2475","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Buttons/SidebarActionButton/`SidebarActionButton.tsx`/SidebarActionButton.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[8,3,8,9]}},{"key":"geid_144_2476","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Buttons/SidebarActionButton/`SidebarActionButton.tsx`/SidebarActionButton.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/HTMLAttributes#className.","attributes":{"type":"uses","at":[9,4,9,13]}},{"key":"geid_144_2477","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Buttons/SidebarActionButton/`SidebarActionButton.tsx`/SidebarActionButton.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/React/DOMAttributes#onClick.","attributes":{"type":"uses","at":[10,4,10,11]}},{"key":"geid_144_2478","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Buttons/SidebarActionButton/`SidebarActionButton.tsx`/SidebarActionButton.","target":"scip-typescript npm @types/react 18.2.39 `ts5.0`/`index.d.ts`/global/JSX/IntrinsicElements#button.","attributes":{"type":"uses","at":[13,4,13,10]}},{"key":"geid_144_2479","source":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Buttons/SidebarActionButton/`SidebarActionButton.tsx`/","target":"scip-typescript npm ai-chatbot-starter 0.1.0 components/Buttons/SidebarActionButton/`SidebarActionButton.tsx`/SidebarActionButton.","attributes":{"type":"uses","at":[16,15,16,34]}}]}